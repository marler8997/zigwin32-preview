//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//
pub const wszCMM_PROP_NAME = "Name";
pub const wszCMM_PROP_DESCRIPTION = "Description";
pub const wszCMM_PROP_COPYRIGHT = "Copyright";
pub const wszCMM_PROP_FILEVER = "File Version";
pub const wszCMM_PROP_PRODUCTVER = "Product Version";
pub const wszCMM_PROP_DISPLAY_HWND = "HWND";
pub const wszCMM_PROP_ISMULTITHREADED = "IsMultiThreaded";

//
// types
//
// --------------------------------------------------------
// Type: MSA_INFO_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSA_INFO_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: MSA_INFO_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSA_INFO_STATE = *opaque{
};
// --------------------------------------------------------
// Type: MSA_INFO_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSA_INFO_0 = extern struct {
    State: MSA_INFO_STATE,
};
// --------------------------------------------------------
// Type: HCERTCHAINENGINE
// TypeLayoutAttr: sequential
// RAIIFree 'CertFreeCertificateChainEngine' (TODO: can we use this information?)
pub const HCERTCHAINENGINE = ?*opaque{};
// --------------------------------------------------------
// Type: HCRYPTASYNC
// TypeLayoutAttr: sequential
// RAIIFree 'CryptCloseAsyncHandle' (TODO: can we use this information?)
pub const HCRYPTASYNC = ?*opaque{};
// --------------------------------------------------------
// Type: LsaHandle
// TypeLayoutAttr: sequential
// RAIIFree 'LsaDeregisterLogonProcess' (TODO: can we use this information?)
pub const LsaHandle = ?*opaque{};
// --------------------------------------------------------
// Type: GENERIC_MAPPING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GENERIC_MAPPING = extern struct {
    GenericRead: u32,
    GenericWrite: u32,
    GenericExecute: u32,
    GenericAll: u32,
};
// --------------------------------------------------------
// Type: LUID_AND_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LUID_AND_ATTRIBUTES = extern struct {
    Luid: LUID,
    Attributes: u32,
};
// --------------------------------------------------------
// Type: SID_IDENTIFIER_AUTHORITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SID_IDENTIFIER_AUTHORITY = extern struct {
    Value: ?[*]u8,
};
// --------------------------------------------------------
// Type: SID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SID = extern struct {
    Revision: u8,
    SubAuthorityCount: u8,
    IdentifierAuthority: SID_IDENTIFIER_AUTHORITY,
    SubAuthority: ?[*]u32,
};
// --------------------------------------------------------
// Type: SID_NAME_USE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SID_NAME_USE = *opaque{
};
// --------------------------------------------------------
// Type: SID_AND_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SID_AND_ATTRIBUTES = extern struct {
    Sid: ?*opaque{},
    Attributes: u32,
};
// --------------------------------------------------------
// Type: SID_AND_ATTRIBUTES_HASH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SID_AND_ATTRIBUTES_HASH = extern struct {
    SidCount: u32,
    SidAttr: ?*SID_AND_ATTRIBUTES,
    Hash: ?[*]?*opaque{},
};
// --------------------------------------------------------
// Type: WELL_KNOWN_SID_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WELL_KNOWN_SID_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: ACL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACL = extern struct {
    AclRevision: u8,
    Sbz1: u8,
    AclSize: u16,
    AceCount: u16,
    Sbz2: u16,
};
// --------------------------------------------------------
// Type: ACE_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACE_HEADER = extern struct {
    AceType: u8,
    AceFlags: u8,
    AceSize: u16,
};
// --------------------------------------------------------
// Type: ACCESS_ALLOWED_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACCESS_ALLOWED_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    SidStart: u32,
};
// --------------------------------------------------------
// Type: ACCESS_DENIED_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACCESS_DENIED_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    SidStart: u32,
};
// --------------------------------------------------------
// Type: SYSTEM_AUDIT_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_AUDIT_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    SidStart: u32,
};
// --------------------------------------------------------
// Type: SYSTEM_ALARM_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_ALARM_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    SidStart: u32,
};
// --------------------------------------------------------
// Type: SYSTEM_RESOURCE_ATTRIBUTE_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_RESOURCE_ATTRIBUTE_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    SidStart: u32,
};
// --------------------------------------------------------
// Type: SYSTEM_SCOPED_POLICY_ID_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_SCOPED_POLICY_ID_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    SidStart: u32,
};
// --------------------------------------------------------
// Type: SYSTEM_MANDATORY_LABEL_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_MANDATORY_LABEL_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    SidStart: u32,
};
// --------------------------------------------------------
// Type: ACCESS_ALLOWED_OBJECT_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACCESS_ALLOWED_OBJECT_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    Flags: u32,
    ObjectType: Guid,
    InheritedObjectType: Guid,
    SidStart: u32,
};
// --------------------------------------------------------
// Type: ACCESS_DENIED_OBJECT_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACCESS_DENIED_OBJECT_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    Flags: u32,
    ObjectType: Guid,
    InheritedObjectType: Guid,
    SidStart: u32,
};
// --------------------------------------------------------
// Type: SYSTEM_AUDIT_OBJECT_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_AUDIT_OBJECT_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    Flags: u32,
    ObjectType: Guid,
    InheritedObjectType: Guid,
    SidStart: u32,
};
// --------------------------------------------------------
// Type: SYSTEM_ALARM_OBJECT_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_ALARM_OBJECT_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    Flags: u32,
    ObjectType: Guid,
    InheritedObjectType: Guid,
    SidStart: u32,
};
// --------------------------------------------------------
// Type: ACCESS_ALLOWED_CALLBACK_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACCESS_ALLOWED_CALLBACK_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    SidStart: u32,
};
// --------------------------------------------------------
// Type: ACCESS_DENIED_CALLBACK_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACCESS_DENIED_CALLBACK_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    SidStart: u32,
};
// --------------------------------------------------------
// Type: SYSTEM_AUDIT_CALLBACK_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_AUDIT_CALLBACK_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    SidStart: u32,
};
// --------------------------------------------------------
// Type: SYSTEM_ALARM_CALLBACK_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_ALARM_CALLBACK_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    SidStart: u32,
};
// --------------------------------------------------------
// Type: ACCESS_ALLOWED_CALLBACK_OBJECT_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACCESS_ALLOWED_CALLBACK_OBJECT_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    Flags: u32,
    ObjectType: Guid,
    InheritedObjectType: Guid,
    SidStart: u32,
};
// --------------------------------------------------------
// Type: ACCESS_DENIED_CALLBACK_OBJECT_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACCESS_DENIED_CALLBACK_OBJECT_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    Flags: u32,
    ObjectType: Guid,
    InheritedObjectType: Guid,
    SidStart: u32,
};
// --------------------------------------------------------
// Type: SYSTEM_AUDIT_CALLBACK_OBJECT_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_AUDIT_CALLBACK_OBJECT_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    Flags: u32,
    ObjectType: Guid,
    InheritedObjectType: Guid,
    SidStart: u32,
};
// --------------------------------------------------------
// Type: SYSTEM_ALARM_CALLBACK_OBJECT_ACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SYSTEM_ALARM_CALLBACK_OBJECT_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    Flags: u32,
    ObjectType: Guid,
    InheritedObjectType: Guid,
    SidStart: u32,
};
// --------------------------------------------------------
// Type: ACL_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ACL_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: ACL_REVISION_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACL_REVISION_INFORMATION = extern struct {
    AclRevision: u32,
};
// --------------------------------------------------------
// Type: ACL_SIZE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACL_SIZE_INFORMATION = extern struct {
    AceCount: u32,
    AclBytesInUse: u32,
    AclBytesFree: u32,
};
// --------------------------------------------------------
// Type: SECURITY_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECURITY_DESCRIPTOR = extern struct {
    Revision: u8,
    Sbz1: u8,
    Control: u16,
    Owner: ?*opaque{},
    Group: ?*opaque{},
    Sacl: ?*ACL,
    Dacl: ?*ACL,
};
// --------------------------------------------------------
// Type: OBJECT_TYPE_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OBJECT_TYPE_LIST = extern struct {
    Level: u16,
    Sbz: u16,
    ObjectType: ?*Guid,
};
// --------------------------------------------------------
// Type: AUDIT_EVENT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AUDIT_EVENT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: PRIVILEGE_SET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRIVILEGE_SET = extern struct {
    PrivilegeCount: u32,
    Control: u32,
    Privilege: ?[*]LUID_AND_ATTRIBUTES,
};
// --------------------------------------------------------
// Type: SECURITY_IMPERSONATION_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SECURITY_IMPERSONATION_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: TOKEN_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TOKEN_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: TOKEN_ELEVATION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TOKEN_ELEVATION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: TOKEN_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TOKEN_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: TOKEN_USER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_USER = extern struct {
    User: SID_AND_ATTRIBUTES,
};
// --------------------------------------------------------
// Type: TOKEN_GROUPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_GROUPS = extern struct {
    GroupCount: u32,
    Groups: ?[*]SID_AND_ATTRIBUTES,
};
// --------------------------------------------------------
// Type: TOKEN_PRIVILEGES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_PRIVILEGES = extern struct {
    PrivilegeCount: u32,
    Privileges: ?[*]LUID_AND_ATTRIBUTES,
};
// --------------------------------------------------------
// Type: TOKEN_OWNER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_OWNER = extern struct {
    Owner: ?*opaque{},
};
// --------------------------------------------------------
// Type: TOKEN_PRIMARY_GROUP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_PRIMARY_GROUP = extern struct {
    PrimaryGroup: ?*opaque{},
};
// --------------------------------------------------------
// Type: TOKEN_DEFAULT_DACL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_DEFAULT_DACL = extern struct {
    DefaultDacl: ?*ACL,
};
// --------------------------------------------------------
// Type: TOKEN_USER_CLAIMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_USER_CLAIMS = extern struct {
    UserClaims: ?*opaque{},
};
// --------------------------------------------------------
// Type: TOKEN_DEVICE_CLAIMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_DEVICE_CLAIMS = extern struct {
    DeviceClaims: ?*opaque{},
};
// --------------------------------------------------------
// Type: TOKEN_GROUPS_AND_PRIVILEGES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_GROUPS_AND_PRIVILEGES = extern struct {
    SidCount: u32,
    SidLength: u32,
    Sids: ?*SID_AND_ATTRIBUTES,
    RestrictedSidCount: u32,
    RestrictedSidLength: u32,
    RestrictedSids: ?*SID_AND_ATTRIBUTES,
    PrivilegeCount: u32,
    PrivilegeLength: u32,
    Privileges: ?*LUID_AND_ATTRIBUTES,
    AuthenticationId: LUID,
};
// --------------------------------------------------------
// Type: TOKEN_LINKED_TOKEN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_LINKED_TOKEN = extern struct {
    LinkedToken: HANDLE,
};
// --------------------------------------------------------
// Type: TOKEN_ELEVATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_ELEVATION = extern struct {
    TokenIsElevated: u32,
};
// --------------------------------------------------------
// Type: TOKEN_MANDATORY_LABEL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_MANDATORY_LABEL = extern struct {
    Label: SID_AND_ATTRIBUTES,
};
// --------------------------------------------------------
// Type: TOKEN_MANDATORY_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_MANDATORY_POLICY = extern struct {
    Policy: u32,
};
// --------------------------------------------------------
// Type: TOKEN_ACCESS_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_ACCESS_INFORMATION = extern struct {
    SidHash: ?*SID_AND_ATTRIBUTES_HASH,
    RestrictedSidHash: ?*SID_AND_ATTRIBUTES_HASH,
    Privileges: ?*TOKEN_PRIVILEGES,
    AuthenticationId: LUID,
    TokenType: TOKEN_TYPE,
    ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
    MandatoryPolicy: TOKEN_MANDATORY_POLICY,
    Flags: u32,
    AppContainerNumber: u32,
    PackageSid: ?*opaque{},
    CapabilitiesHash: ?*SID_AND_ATTRIBUTES_HASH,
    TrustLevelSid: ?*opaque{},
    SecurityAttributes: ?*opaque{},
};
// --------------------------------------------------------
// Type: TOKEN_AUDIT_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_AUDIT_POLICY = extern struct {
    PerUserPolicy: ?[*]u8,
};
// --------------------------------------------------------
// Type: TOKEN_SOURCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_SOURCE = extern struct {
    SourceName: ?[*]i8,
    SourceIdentifier: LUID,
};
// --------------------------------------------------------
// Type: TOKEN_STATISTICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_STATISTICS = extern struct {
    TokenId: LUID,
    AuthenticationId: LUID,
    ExpirationTime: LARGE_INTEGER,
    TokenType: TOKEN_TYPE,
    ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
    DynamicCharged: u32,
    DynamicAvailable: u32,
    GroupCount: u32,
    PrivilegeCount: u32,
    ModifiedId: LUID,
};
// --------------------------------------------------------
// Type: TOKEN_CONTROL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_CONTROL = extern struct {
    TokenId: LUID,
    AuthenticationId: LUID,
    ModifiedId: LUID,
    TokenSource: TOKEN_SOURCE,
};
// --------------------------------------------------------
// Type: TOKEN_ORIGIN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_ORIGIN = extern struct {
    OriginatingLogonSession: LUID,
};
// --------------------------------------------------------
// Type: MANDATORY_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MANDATORY_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: TOKEN_APPCONTAINER_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKEN_APPCONTAINER_INFORMATION = extern struct {
    TokenAppContainer: ?*opaque{},
};
// --------------------------------------------------------
// Type: CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE = extern struct {
    Version: u64,
    Name: ?*u16,
};
// --------------------------------------------------------
// Type: CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = extern struct {
    pValue: ?*opaque{},
    ValueLength: u32,
};
// --------------------------------------------------------
// Type: CLAIM_SECURITY_ATTRIBUTE_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLAIM_SECURITY_ATTRIBUTE_V1 = extern struct {
    Name: ?*u16,
    ValueType: u16,
    Reserved: u16,
    Flags: u32,
    ValueCount: u32,
    Values: _Values_e__Union,
    // --------------------------------------------------------
    // Type: _Values_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Values_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 = extern struct {
    Name: u32,
    ValueType: u16,
    Reserved: u16,
    Flags: u32,
    ValueCount: u32,
    Values: _Values_e__Union,
    // --------------------------------------------------------
    // Type: _Values_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Values_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CLAIM_SECURITY_ATTRIBUTES_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLAIM_SECURITY_ATTRIBUTES_INFORMATION = extern struct {
    Version: u16,
    Reserved: u16,
    AttributeCount: u32,
    Attribute: _Attribute_e__Union,
    // --------------------------------------------------------
    // Type: _Attribute_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Attribute_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: SECURITY_QUALITY_OF_SERVICE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECURITY_QUALITY_OF_SERVICE = extern struct {
    Length: u32,
    ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
    ContextTrackingMode: u8,
    EffectiveOnly: u8,
};
// --------------------------------------------------------
// Type: SECURITY_CAPABILITIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECURITY_CAPABILITIES = extern struct {
    AppContainerSid: ?*opaque{},
    Capabilities: ?*SID_AND_ATTRIBUTES,
    CapabilityCount: u32,
    Reserved: u32,
};
// --------------------------------------------------------
// Type: QUOTA_LIMITS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QUOTA_LIMITS = extern struct {
    PagedPoolLimit: ?*opaque{},
    NonPagedPoolLimit: ?*opaque{},
    MinimumWorkingSetSize: ?*opaque{},
    MaximumWorkingSetSize: ?*opaque{},
    PagefileLimit: ?*opaque{},
    TimeLimit: LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: CMS_KEY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMS_KEY_INFO = extern struct {
    dwVersion: u32,
    Algid: u32,
    pbOID: ?*u8,
    cbOID: u32,
};
// --------------------------------------------------------
// Type: HMAC_Info
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HMAC_Info = extern struct {
    HashAlgid: u32,
    pbInnerString: ?*u8,
    cbInnerString: u32,
    pbOuterString: ?*u8,
    cbOuterString: u32,
};
// --------------------------------------------------------
// Type: SCHANNEL_ALG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCHANNEL_ALG = extern struct {
    dwUse: u32,
    Algid: u32,
    cBits: u32,
    dwFlags: u32,
    dwReserved: u32,
};
// --------------------------------------------------------
// Type: PROV_ENUMALGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROV_ENUMALGS = extern struct {
    aiAlgid: u32,
    dwBitLen: u32,
    dwNameLen: u32,
    szName: ?[*]i8,
};
// --------------------------------------------------------
// Type: PROV_ENUMALGS_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROV_ENUMALGS_EX = extern struct {
    aiAlgid: u32,
    dwDefaultLen: u32,
    dwMinLen: u32,
    dwMaxLen: u32,
    dwProtocols: u32,
    dwNameLen: u32,
    szName: ?[*]i8,
    dwLongNameLen: u32,
    szLongName: ?[*]i8,
};
// --------------------------------------------------------
// Type: PUBLICKEYSTRUC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PUBLICKEYSTRUC = extern struct {
    bType: u8,
    bVersion: u8,
    reserved: u16,
    aiKeyAlg: u32,
};
// --------------------------------------------------------
// Type: RSAPUBKEY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RSAPUBKEY = extern struct {
    magic: u32,
    bitlen: u32,
    pubexp: u32,
};
// --------------------------------------------------------
// Type: PUBKEY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PUBKEY = extern struct {
    magic: u32,
    bitlen: u32,
};
// --------------------------------------------------------
// Type: DSSSEED
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSSSEED = extern struct {
    counter: u32,
    seed: ?[*]u8,
};
// --------------------------------------------------------
// Type: PUBKEYVER3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PUBKEYVER3 = extern struct {
    magic: u32,
    bitlenP: u32,
    bitlenQ: u32,
    bitlenJ: u32,
    DSSSeed: DSSSEED,
};
// --------------------------------------------------------
// Type: PRIVKEYVER3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRIVKEYVER3 = extern struct {
    magic: u32,
    bitlenP: u32,
    bitlenQ: u32,
    bitlenJ: u32,
    bitlenX: u32,
    DSSSeed: DSSSEED,
};
// --------------------------------------------------------
// Type: KEY_TYPE_SUBTYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KEY_TYPE_SUBTYPE = extern struct {
    dwKeySpec: u32,
    Type: Guid,
    Subtype: Guid,
};
// --------------------------------------------------------
// Type: CERT_FORTEZZA_DATA_PROP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_FORTEZZA_DATA_PROP = extern struct {
    SerialNumber: ?[*]u8,
    CertIndex: i32,
    CertLabel: ?[*]u8,
};
// --------------------------------------------------------
// Type: CRYPT_RC4_KEY_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_RC4_KEY_STATE = extern struct {
    Key: ?[*]u8,
    SBox: ?[*]u8,
    i: u8,
    j: u8,
};
// --------------------------------------------------------
// Type: CRYPT_DES_KEY_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_DES_KEY_STATE = extern struct {
    Key: ?[*]u8,
    IV: ?[*]u8,
    Feedback: ?[*]u8,
};
// --------------------------------------------------------
// Type: CRYPT_3DES_KEY_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_3DES_KEY_STATE = extern struct {
    Key: ?[*]u8,
    IV: ?[*]u8,
    Feedback: ?[*]u8,
};
// --------------------------------------------------------
// Type: CRYPT_AES_128_KEY_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_AES_128_KEY_STATE = extern struct {
    Key: ?[*]u8,
    IV: ?[*]u8,
    EncryptionState: ?[*]u8,
    DecryptionState: ?[*]u8,
    Feedback: ?[*]u8,
};
// --------------------------------------------------------
// Type: CRYPT_AES_256_KEY_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_AES_256_KEY_STATE = extern struct {
    Key: ?[*]u8,
    IV: ?[*]u8,
    EncryptionState: ?[*]u8,
    DecryptionState: ?[*]u8,
    Feedback: ?[*]u8,
};
// --------------------------------------------------------
// Type: CRYPTOAPI_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTOAPI_BLOB = extern struct {
    cbData: u32,
    pbData: ?*u8,
};
// --------------------------------------------------------
// Type: CMS_DH_KEY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMS_DH_KEY_INFO = extern struct {
    dwVersion: u32,
    Algid: u32,
    pszContentEncObjId: ?*i8,
    PubInfo: CRYPTOAPI_BLOB,
    pReserved: ?*opaque{},
};
// --------------------------------------------------------
// Type: BCRYPT_KEY_LENGTHS_STRUCT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_KEY_LENGTHS_STRUCT = extern struct {
    dwMinLength: u32,
    dwMaxLength: u32,
    dwIncrement: u32,
};
// --------------------------------------------------------
// Type: BCRYPT_OID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_OID = extern struct {
    cbOID: u32,
    pbOID: ?*u8,
};
// --------------------------------------------------------
// Type: BCRYPT_OID_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_OID_LIST = extern struct {
    dwOIDCount: u32,
    pOIDs: ?*BCRYPT_OID,
};
// --------------------------------------------------------
// Type: BCRYPT_PKCS1_PADDING_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_PKCS1_PADDING_INFO = extern struct {
    pszAlgId: ?*u16,
};
// --------------------------------------------------------
// Type: BCRYPT_PSS_PADDING_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_PSS_PADDING_INFO = extern struct {
    pszAlgId: ?*u16,
    cbSalt: u32,
};
// --------------------------------------------------------
// Type: BCRYPT_OAEP_PADDING_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_OAEP_PADDING_INFO = extern struct {
    pszAlgId: ?*u16,
    pbLabel: ?*u8,
    cbLabel: u32,
};
// --------------------------------------------------------
// Type: BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO = extern struct {
    cbSize: u32,
    dwInfoVersion: u32,
    pbNonce: ?*u8,
    cbNonce: u32,
    pbAuthData: ?*u8,
    cbAuthData: u32,
    pbTag: ?*u8,
    cbTag: u32,
    pbMacContext: ?*u8,
    cbMacContext: u32,
    cbAAD: u32,
    cbData: u64,
    dwFlags: u32,
};
// --------------------------------------------------------
// Type: BCryptBuffer
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCryptBuffer = extern struct {
    cbBuffer: u32,
    BufferType: u32,
    pvBuffer: ?*opaque{},
};
// --------------------------------------------------------
// Type: BCryptBufferDesc
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCryptBufferDesc = extern struct {
    ulVersion: u32,
    cBuffers: u32,
    pBuffers: ?*BCryptBuffer,
};
// --------------------------------------------------------
// Type: BCRYPT_KEY_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_KEY_BLOB = extern struct {
    Magic: u32,
};
// --------------------------------------------------------
// Type: BCRYPT_RSAKEY_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_RSAKEY_BLOB = extern struct {
    Magic: u32,
    BitLength: u32,
    cbPublicExp: u32,
    cbModulus: u32,
    cbPrime1: u32,
    cbPrime2: u32,
};
// --------------------------------------------------------
// Type: BCRYPT_ECCKEY_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_ECCKEY_BLOB = extern struct {
    dwMagic: u32,
    cbKey: u32,
};
// --------------------------------------------------------
// Type: SSL_ECCKEY_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SSL_ECCKEY_BLOB = extern struct {
    dwCurveType: u32,
    cbKey: u32,
};
// --------------------------------------------------------
// Type: ECC_CURVE_TYPE_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ECC_CURVE_TYPE_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: ECC_CURVE_ALG_ID_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ECC_CURVE_ALG_ID_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: BCRYPT_ECCFULLKEY_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_ECCFULLKEY_BLOB = extern struct {
    dwMagic: u32,
    dwVersion: u32,
    dwCurveType: ECC_CURVE_TYPE_ENUM,
    dwCurveGenerationAlgId: ECC_CURVE_ALG_ID_ENUM,
    cbFieldLength: u32,
    cbSubgroupOrder: u32,
    cbCofactor: u32,
    cbSeed: u32,
};
// --------------------------------------------------------
// Type: BCRYPT_DH_KEY_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_DH_KEY_BLOB = extern struct {
    dwMagic: u32,
    cbKey: u32,
};
// --------------------------------------------------------
// Type: BCRYPT_DH_PARAMETER_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_DH_PARAMETER_HEADER = extern struct {
    cbLength: u32,
    dwMagic: u32,
    cbKeyLength: u32,
};
// --------------------------------------------------------
// Type: BCRYPT_DSA_KEY_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_DSA_KEY_BLOB = extern struct {
    dwMagic: u32,
    cbKey: u32,
    Count: ?[*]u8,
    Seed: ?[*]u8,
    q: ?[*]u8,
};
// --------------------------------------------------------
// Type: HASHALGORITHM_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HASHALGORITHM_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: DSAFIPSVERSION_ENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DSAFIPSVERSION_ENUM = *opaque{
};
// --------------------------------------------------------
// Type: BCRYPT_DSA_KEY_BLOB_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_DSA_KEY_BLOB_V2 = extern struct {
    dwMagic: u32,
    cbKey: u32,
    hashAlgorithm: HASHALGORITHM_ENUM,
    standardVersion: DSAFIPSVERSION_ENUM,
    cbSeedLength: u32,
    cbGroupSize: u32,
    Count: ?[*]u8,
};
// --------------------------------------------------------
// Type: BCRYPT_KEY_DATA_BLOB_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_KEY_DATA_BLOB_HEADER = extern struct {
    dwMagic: u32,
    dwVersion: u32,
    cbKeyData: u32,
};
// --------------------------------------------------------
// Type: BCRYPT_DSA_PARAMETER_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_DSA_PARAMETER_HEADER = extern struct {
    cbLength: u32,
    dwMagic: u32,
    cbKeyLength: u32,
    Count: ?[*]u8,
    Seed: ?[*]u8,
    q: ?[*]u8,
};
// --------------------------------------------------------
// Type: BCRYPT_DSA_PARAMETER_HEADER_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_DSA_PARAMETER_HEADER_V2 = extern struct {
    cbLength: u32,
    dwMagic: u32,
    cbKeyLength: u32,
    hashAlgorithm: HASHALGORITHM_ENUM,
    standardVersion: DSAFIPSVERSION_ENUM,
    cbSeedLength: u32,
    cbGroupSize: u32,
    Count: ?[*]u8,
};
// --------------------------------------------------------
// Type: BCRYPT_ECC_CURVE_NAMES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_ECC_CURVE_NAMES = extern struct {
    dwEccCurveNames: u32,
    pEccCurveNames: ?*?*u16,
};
// --------------------------------------------------------
// Type: BCRYPT_HASH_OPERATION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BCRYPT_HASH_OPERATION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: BCRYPT_MULTI_HASH_OPERATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_MULTI_HASH_OPERATION = extern struct {
    iHash: u32,
    hashOperation: BCRYPT_HASH_OPERATION_TYPE,
    pbBuffer: ?*u8,
    cbBuffer: u32,
};
// --------------------------------------------------------
// Type: BCRYPT_MULTI_OPERATION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BCRYPT_MULTI_OPERATION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: BCRYPT_MULTI_OBJECT_LENGTH_STRUCT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_MULTI_OBJECT_LENGTH_STRUCT = extern struct {
    cbPerObject: u32,
    cbPerElement: u32,
};
// --------------------------------------------------------
// Type: BCRYPT_ALGORITHM_IDENTIFIER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_ALGORITHM_IDENTIFIER = extern struct {
    pszName: ?*u16,
    dwClass: u32,
    dwFlags: u32,
};
// --------------------------------------------------------
// Type: BCRYPT_PROVIDER_NAME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_PROVIDER_NAME = extern struct {
    pszProviderName: ?*u16,
};
// --------------------------------------------------------
// Type: BCRYPT_INTERFACE_VERSION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BCRYPT_INTERFACE_VERSION = extern struct {
    MajorVersion: u16,
    MinorVersion: u16,
};
// --------------------------------------------------------
// Type: CRYPT_INTERFACE_REG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_INTERFACE_REG = extern struct {
    dwInterface: u32,
    dwFlags: u32,
    cFunctions: u32,
    rgpszFunctions: ?*?*u16,
};
// --------------------------------------------------------
// Type: CRYPT_IMAGE_REG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_IMAGE_REG = extern struct {
    pszImage: ?*u16,
    cInterfaces: u32,
    rgpInterfaces: ?*?*CRYPT_INTERFACE_REG,
};
// --------------------------------------------------------
// Type: CRYPT_PROVIDER_REG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROVIDER_REG = extern struct {
    cAliases: u32,
    rgpszAliases: ?*?*u16,
    pUM: ?*CRYPT_IMAGE_REG,
    pKM: ?*CRYPT_IMAGE_REG,
};
// --------------------------------------------------------
// Type: CRYPT_PROVIDERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROVIDERS = extern struct {
    cProviders: u32,
    rgpszProviders: ?*?*u16,
};
// --------------------------------------------------------
// Type: CRYPT_CONTEXT_CONFIG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_CONTEXT_CONFIG = extern struct {
    dwFlags: u32,
    dwReserved: u32,
};
// --------------------------------------------------------
// Type: CRYPT_CONTEXT_FUNCTION_CONFIG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_CONTEXT_FUNCTION_CONFIG = extern struct {
    dwFlags: u32,
    dwReserved: u32,
};
// --------------------------------------------------------
// Type: CRYPT_CONTEXTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_CONTEXTS = extern struct {
    cContexts: u32,
    rgpszContexts: ?*?*u16,
};
// --------------------------------------------------------
// Type: CRYPT_CONTEXT_FUNCTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_CONTEXT_FUNCTIONS = extern struct {
    cFunctions: u32,
    rgpszFunctions: ?*?*u16,
};
// --------------------------------------------------------
// Type: CRYPT_CONTEXT_FUNCTION_PROVIDERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_CONTEXT_FUNCTION_PROVIDERS = extern struct {
    cProviders: u32,
    rgpszProviders: ?*?*u16,
};
// --------------------------------------------------------
// Type: CRYPT_PROPERTY_REF
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROPERTY_REF = extern struct {
    pszProperty: ?*u16,
    cbValue: u32,
    pbValue: ?*u8,
};
// --------------------------------------------------------
// Type: CRYPT_IMAGE_REF
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_IMAGE_REF = extern struct {
    pszImage: ?*u16,
    dwFlags: u32,
};
// --------------------------------------------------------
// Type: CRYPT_PROVIDER_REF
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROVIDER_REF = extern struct {
    dwInterface: u32,
    pszFunction: ?*u16,
    pszProvider: ?*u16,
    cProperties: u32,
    rgpProperties: ?*?*CRYPT_PROPERTY_REF,
    pUM: ?*CRYPT_IMAGE_REF,
    pKM: ?*CRYPT_IMAGE_REF,
};
// --------------------------------------------------------
// Type: CRYPT_PROVIDER_REFS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROVIDER_REFS = extern struct {
    cProviders: u32,
    rgpProviders: ?*?*CRYPT_PROVIDER_REF,
};
// --------------------------------------------------------
// Type: PFN_NCRYPT_ALLOC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_NCRYPT_ALLOC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_NCRYPT_FREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_NCRYPT_FREE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: NCRYPT_ALLOC_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_ALLOC_PARA = extern struct {
    cbSize: u32,
    pfnAlloc: PFN_NCRYPT_ALLOC,
    pfnFree: PFN_NCRYPT_FREE,
};
// --------------------------------------------------------
// Type: NCRYPT_CIPHER_PADDING_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_CIPHER_PADDING_INFO = extern struct {
    cbSize: u32,
    dwFlags: u32,
    pbIV: ?*u8,
    cbIV: u32,
    pbOtherInfo: ?*u8,
    cbOtherInfo: u32,
};
// --------------------------------------------------------
// Type: NCRYPT_PLATFORM_ATTEST_PADDING_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_PLATFORM_ATTEST_PADDING_INFO = extern struct {
    magic: u32,
    pcrMask: u32,
};
// --------------------------------------------------------
// Type: NCRYPT_KEY_ATTEST_PADDING_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_KEY_ATTEST_PADDING_INFO = extern struct {
    magic: u32,
    pbKeyBlob: ?*u8,
    cbKeyBlob: u32,
    pbKeyAuth: ?*u8,
    cbKeyAuth: u32,
};
// --------------------------------------------------------
// Type: NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES = extern struct {
    Version: u32,
    Flags: u32,
    cbPublicKeyBlob: u32,
};
// --------------------------------------------------------
// Type: NCRYPT_VSM_KEY_ATTESTATION_STATEMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_VSM_KEY_ATTESTATION_STATEMENT = extern struct {
    Magic: u32,
    Version: u32,
    cbSignature: u32,
    cbReport: u32,
    cbAttributes: u32,
};
// --------------------------------------------------------
// Type: NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS = extern struct {
    Version: u32,
    TrustletId: u64,
    MinSvn: u32,
    FlagsMask: u32,
    FlagsExpected: u32,
    _bitfield: u32,
};
// --------------------------------------------------------
// Type: NCRYPT_EXPORTED_ISOLATED_KEY_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_EXPORTED_ISOLATED_KEY_HEADER = extern struct {
    Version: u32,
    KeyUsage: u32,
    _bitfield: u32,
    cbAlgName: u32,
    cbNonce: u32,
    cbAuthTag: u32,
    cbWrappingKey: u32,
    cbIsolatedKey: u32,
};
// --------------------------------------------------------
// Type: NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE = extern struct {
    Header: NCRYPT_EXPORTED_ISOLATED_KEY_HEADER,
};
// --------------------------------------------------------
// Type: __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT = extern struct {
    Magic: u32,
    Version: u32,
    HeaderSize: u32,
    cbCertifyInfo: u32,
    cbSignature: u32,
    cbTpmPublic: u32,
};
// --------------------------------------------------------
// Type: NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT = extern struct {
    Magic: u32,
    Version: u32,
    pcrAlg: u32,
    cbSignature: u32,
    cbQuote: u32,
    cbPcrs: u32,
};
// --------------------------------------------------------
// Type: NCryptAlgorithmName
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCryptAlgorithmName = extern struct {
    pszName: ?*u16,
    dwClass: u32,
    dwAlgOperations: u32,
    dwFlags: u32,
};
// --------------------------------------------------------
// Type: NCryptKeyName
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCryptKeyName = extern struct {
    pszName: ?*u16,
    pszAlgid: ?*u16,
    dwLegacyKeySpec: u32,
    dwFlags: u32,
};
// --------------------------------------------------------
// Type: NCryptProviderName
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCryptProviderName = extern struct {
    pszName: ?*u16,
    pszComment: ?*u16,
};
// --------------------------------------------------------
// Type: NCRYPT_UI_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_UI_POLICY = extern struct {
    dwVersion: u32,
    dwFlags: u32,
    pszCreationTitle: ?*u16,
    pszFriendlyName: ?*u16,
    pszDescription: ?*u16,
};
// --------------------------------------------------------
// Type: __NCRYPT_KEY_ACCESS_POLICY_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const __NCRYPT_KEY_ACCESS_POLICY_BLOB = extern struct {
    dwVersion: u32,
    dwPolicyFlags: u32,
    cbUserSid: u32,
    cbApplicationSid: u32,
};
// --------------------------------------------------------
// Type: NCRYPT_SUPPORTED_LENGTHS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_SUPPORTED_LENGTHS = extern struct {
    dwMinLength: u32,
    dwMaxLength: u32,
    dwIncrement: u32,
    dwDefaultLength: u32,
};
// --------------------------------------------------------
// Type: __NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const __NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO = extern struct {
    dwVersion: u32,
    iExpiration: i32,
    pabNonce: ?[*]u8,
    pabPolicyRef: ?[*]u8,
    pabHMAC: ?[*]u8,
};
// --------------------------------------------------------
// Type: __NCRYPT_PCP_TPM_FW_VERSION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const __NCRYPT_PCP_TPM_FW_VERSION_INFO = extern struct {
    major1: u16,
    major2: u16,
    minor1: u16,
    minor2: u16,
};
// --------------------------------------------------------
// Type: __NCRYPT_PCP_RAW_POLICYDIGEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const __NCRYPT_PCP_RAW_POLICYDIGEST = extern struct {
    dwVersion: u32,
    cbDigest: u32,
};
// --------------------------------------------------------
// Type: NCRYPT_KEY_BLOB_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_KEY_BLOB_HEADER = extern struct {
    cbSize: u32,
    dwMagic: u32,
    cbAlgName: u32,
    cbKeyData: u32,
};
// --------------------------------------------------------
// Type: NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER = extern struct {
    magic: u32,
    cbHeader: u32,
    cbPublic: u32,
    cbPrivate: u32,
    cbName: u32,
};
// --------------------------------------------------------
// Type: CRYPT_BIT_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_BIT_BLOB = extern struct {
    cbData: u32,
    pbData: ?*u8,
    cUnusedBits: u32,
};
// --------------------------------------------------------
// Type: CRYPT_ALGORITHM_IDENTIFIER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_ALGORITHM_IDENTIFIER = extern struct {
    pszObjId: ?*i8,
    Parameters: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_OBJID_TABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_OBJID_TABLE = extern struct {
    dwAlgId: u32,
    pszObjId: ?*i8,
};
// --------------------------------------------------------
// Type: CRYPT_HASH_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_HASH_INFO = extern struct {
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    Hash: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CERT_EXTENSION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_EXTENSION = extern struct {
    pszObjId: ?*i8,
    fCritical: BOOL,
    Value: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_ATTRIBUTE_TYPE_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_ATTRIBUTE_TYPE_VALUE = extern struct {
    pszObjId: ?*i8,
    Value: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_ATTRIBUTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_ATTRIBUTE = extern struct {
    pszObjId: ?*i8,
    cValue: u32,
    rgValue: ?*CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_ATTRIBUTES = extern struct {
    cAttr: u32,
    rgAttr: ?*CRYPT_ATTRIBUTE,
};
// --------------------------------------------------------
// Type: CERT_RDN_ATTR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_RDN_ATTR = extern struct {
    pszObjId: ?*i8,
    dwValueType: u32,
    Value: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CERT_RDN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_RDN = extern struct {
    cRDNAttr: u32,
    rgRDNAttr: ?*CERT_RDN_ATTR,
};
// --------------------------------------------------------
// Type: CERT_NAME_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_NAME_INFO = extern struct {
    cRDN: u32,
    rgRDN: ?*CERT_RDN,
};
// --------------------------------------------------------
// Type: CERT_NAME_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_NAME_VALUE = extern struct {
    dwValueType: u32,
    Value: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CERT_PUBLIC_KEY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_PUBLIC_KEY_INFO = extern struct {
    Algorithm: CRYPT_ALGORITHM_IDENTIFIER,
    PublicKey: CRYPT_BIT_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_ECC_PRIVATE_KEY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_ECC_PRIVATE_KEY_INFO = extern struct {
    dwVersion: u32,
    PrivateKey: CRYPTOAPI_BLOB,
    szCurveOid: ?*i8,
    PublicKey: CRYPT_BIT_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_PRIVATE_KEY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PRIVATE_KEY_INFO = extern struct {
    Version: u32,
    Algorithm: CRYPT_ALGORITHM_IDENTIFIER,
    PrivateKey: CRYPTOAPI_BLOB,
    pAttributes: ?*CRYPT_ATTRIBUTES,
};
// --------------------------------------------------------
// Type: CRYPT_ENCRYPTED_PRIVATE_KEY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_ENCRYPTED_PRIVATE_KEY_INFO = extern struct {
    EncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedPrivateKey: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: PCRYPT_DECRYPT_PRIVATE_KEY_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PCRYPT_DECRYPT_PRIVATE_KEY_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PCRYPT_RESOLVE_HCRYPTPROV_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PCRYPT_RESOLVE_HCRYPTPROV_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_PKCS8_IMPORT_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PKCS8_IMPORT_PARAMS = extern struct {
    PrivateKey: CRYPTOAPI_BLOB,
    pResolvehCryptProvFunc: PCRYPT_RESOLVE_HCRYPTPROV_FUNC,
    pVoidResolveFunc: ?*opaque{},
    pDecryptPrivateKeyFunc: PCRYPT_DECRYPT_PRIVATE_KEY_FUNC,
    pVoidDecryptFunc: ?*opaque{},
};
// --------------------------------------------------------
// Type: CRYPT_PKCS8_EXPORT_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PKCS8_EXPORT_PARAMS = extern struct {
    hCryptProv: ?*opaque{},
    dwKeySpec: u32,
    pszPrivateKeyObjId: ?*i8,
    pEncryptPrivateKeyFunc: PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC,
    pVoidEncryptFunc: ?*opaque{},
};
// --------------------------------------------------------
// Type: CERT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_INFO = extern struct {
    dwVersion: u32,
    SerialNumber: CRYPTOAPI_BLOB,
    SignatureAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    Issuer: CRYPTOAPI_BLOB,
    NotBefore: FILETIME,
    NotAfter: FILETIME,
    Subject: CRYPTOAPI_BLOB,
    SubjectPublicKeyInfo: CERT_PUBLIC_KEY_INFO,
    IssuerUniqueId: CRYPT_BIT_BLOB,
    SubjectUniqueId: CRYPT_BIT_BLOB,
    cExtension: u32,
    rgExtension: ?*CERT_EXTENSION,
};
// --------------------------------------------------------
// Type: CRL_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRL_ENTRY = extern struct {
    SerialNumber: CRYPTOAPI_BLOB,
    RevocationDate: FILETIME,
    cExtension: u32,
    rgExtension: ?*CERT_EXTENSION,
};
// --------------------------------------------------------
// Type: CRL_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRL_INFO = extern struct {
    dwVersion: u32,
    SignatureAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    Issuer: CRYPTOAPI_BLOB,
    ThisUpdate: FILETIME,
    NextUpdate: FILETIME,
    cCRLEntry: u32,
    rgCRLEntry: ?*CRL_ENTRY,
    cExtension: u32,
    rgExtension: ?*CERT_EXTENSION,
};
// --------------------------------------------------------
// Type: CERT_OR_CRL_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_OR_CRL_BLOB = extern struct {
    dwChoice: u32,
    cbEncoded: u32,
    pbEncoded: ?*u8,
};
// --------------------------------------------------------
// Type: CERT_OR_CRL_BUNDLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_OR_CRL_BUNDLE = extern struct {
    cItem: u32,
    rgItem: ?*CERT_OR_CRL_BLOB,
};
// --------------------------------------------------------
// Type: CERT_REQUEST_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_REQUEST_INFO = extern struct {
    dwVersion: u32,
    Subject: CRYPTOAPI_BLOB,
    SubjectPublicKeyInfo: CERT_PUBLIC_KEY_INFO,
    cAttribute: u32,
    rgAttribute: ?*CRYPT_ATTRIBUTE,
};
// --------------------------------------------------------
// Type: CERT_KEYGEN_REQUEST_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_KEYGEN_REQUEST_INFO = extern struct {
    dwVersion: u32,
    SubjectPublicKeyInfo: CERT_PUBLIC_KEY_INFO,
    pwszChallengeString: ?*u16,
};
// --------------------------------------------------------
// Type: CERT_SIGNED_CONTENT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_SIGNED_CONTENT_INFO = extern struct {
    ToBeSigned: CRYPTOAPI_BLOB,
    SignatureAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    Signature: CRYPT_BIT_BLOB,
};
// --------------------------------------------------------
// Type: CTL_USAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CTL_USAGE = extern struct {
    cUsageIdentifier: u32,
    rgpszUsageIdentifier: ?*?*i8,
};
// --------------------------------------------------------
// Type: CTL_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CTL_ENTRY = extern struct {
    SubjectIdentifier: CRYPTOAPI_BLOB,
    cAttribute: u32,
    rgAttribute: ?*CRYPT_ATTRIBUTE,
};
// --------------------------------------------------------
// Type: CTL_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CTL_INFO = extern struct {
    dwVersion: u32,
    SubjectUsage: CTL_USAGE,
    ListIdentifier: CRYPTOAPI_BLOB,
    SequenceNumber: CRYPTOAPI_BLOB,
    ThisUpdate: FILETIME,
    NextUpdate: FILETIME,
    SubjectAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    cCTLEntry: u32,
    rgCTLEntry: ?*CTL_ENTRY,
    cExtension: u32,
    rgExtension: ?*CERT_EXTENSION,
};
// --------------------------------------------------------
// Type: CRYPT_TIME_STAMP_REQUEST_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_TIME_STAMP_REQUEST_INFO = extern struct {
    pszTimeStampAlgorithm: ?*i8,
    pszContentType: ?*i8,
    Content: CRYPTOAPI_BLOB,
    cAttribute: u32,
    rgAttribute: ?*CRYPT_ATTRIBUTE,
};
// --------------------------------------------------------
// Type: CRYPT_ENROLLMENT_NAME_VALUE_PAIR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_ENROLLMENT_NAME_VALUE_PAIR = extern struct {
    pwszName: ?*u16,
    pwszValue: ?*u16,
};
// --------------------------------------------------------
// Type: CRYPT_CSP_PROVIDER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_CSP_PROVIDER = extern struct {
    dwKeySpec: u32,
    pwszProviderName: ?*u16,
    Signature: CRYPT_BIT_BLOB,
};
// --------------------------------------------------------
// Type: PFN_CRYPT_ALLOC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_ALLOC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CRYPT_FREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_FREE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_ENCODE_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_ENCODE_PARA = extern struct {
    cbSize: u32,
    pfnAlloc: PFN_CRYPT_ALLOC,
    pfnFree: PFN_CRYPT_FREE,
};
// --------------------------------------------------------
// Type: CRYPT_DECODE_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_DECODE_PARA = extern struct {
    cbSize: u32,
    pfnAlloc: PFN_CRYPT_ALLOC,
    pfnFree: PFN_CRYPT_FREE,
};
// --------------------------------------------------------
// Type: CERT_EXTENSIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_EXTENSIONS = extern struct {
    cExtension: u32,
    rgExtension: ?*CERT_EXTENSION,
};
// --------------------------------------------------------
// Type: CERT_AUTHORITY_KEY_ID_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_AUTHORITY_KEY_ID_INFO = extern struct {
    KeyId: CRYPTOAPI_BLOB,
    CertIssuer: CRYPTOAPI_BLOB,
    CertSerialNumber: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CERT_PRIVATE_KEY_VALIDITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_PRIVATE_KEY_VALIDITY = extern struct {
    NotBefore: FILETIME,
    NotAfter: FILETIME,
};
// --------------------------------------------------------
// Type: CERT_KEY_ATTRIBUTES_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_KEY_ATTRIBUTES_INFO = extern struct {
    KeyId: CRYPTOAPI_BLOB,
    IntendedKeyUsage: CRYPT_BIT_BLOB,
    pPrivateKeyUsagePeriod: ?*CERT_PRIVATE_KEY_VALIDITY,
};
// --------------------------------------------------------
// Type: CERT_POLICY_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_POLICY_ID = extern struct {
    cCertPolicyElementId: u32,
    rgpszCertPolicyElementId: ?*?*i8,
};
// --------------------------------------------------------
// Type: CERT_KEY_USAGE_RESTRICTION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_KEY_USAGE_RESTRICTION_INFO = extern struct {
    cCertPolicyId: u32,
    rgCertPolicyId: ?*CERT_POLICY_ID,
    RestrictedKeyUsage: CRYPT_BIT_BLOB,
};
// --------------------------------------------------------
// Type: CERT_OTHER_NAME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_OTHER_NAME = extern struct {
    pszObjId: ?*i8,
    Value: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CERT_ALT_NAME_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_ALT_NAME_ENTRY = extern struct {
    dwAltNameChoice: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CERT_ALT_NAME_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_ALT_NAME_INFO = extern struct {
    cAltEntry: u32,
    rgAltEntry: ?*CERT_ALT_NAME_ENTRY,
};
// --------------------------------------------------------
// Type: CERT_BASIC_CONSTRAINTS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_BASIC_CONSTRAINTS_INFO = extern struct {
    SubjectType: CRYPT_BIT_BLOB,
    fPathLenConstraint: BOOL,
    dwPathLenConstraint: u32,
    cSubtreesConstraint: u32,
    rgSubtreesConstraint: ?*CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CERT_BASIC_CONSTRAINTS2_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_BASIC_CONSTRAINTS2_INFO = extern struct {
    fCA: BOOL,
    fPathLenConstraint: BOOL,
    dwPathLenConstraint: u32,
};
// --------------------------------------------------------
// Type: CERT_POLICY_QUALIFIER_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_POLICY_QUALIFIER_INFO = extern struct {
    pszPolicyQualifierId: ?*i8,
    Qualifier: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CERT_POLICY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_POLICY_INFO = extern struct {
    pszPolicyIdentifier: ?*i8,
    cPolicyQualifier: u32,
    rgPolicyQualifier: ?*CERT_POLICY_QUALIFIER_INFO,
};
// --------------------------------------------------------
// Type: CERT_POLICIES_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_POLICIES_INFO = extern struct {
    cPolicyInfo: u32,
    rgPolicyInfo: ?*CERT_POLICY_INFO,
};
// --------------------------------------------------------
// Type: CERT_POLICY_QUALIFIER_NOTICE_REFERENCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_POLICY_QUALIFIER_NOTICE_REFERENCE = extern struct {
    pszOrganization: ?*i8,
    cNoticeNumbers: u32,
    rgNoticeNumbers: ?*i32,
};
// --------------------------------------------------------
// Type: CERT_POLICY_QUALIFIER_USER_NOTICE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_POLICY_QUALIFIER_USER_NOTICE = extern struct {
    pNoticeReference: ?*CERT_POLICY_QUALIFIER_NOTICE_REFERENCE,
    pszDisplayText: ?*u16,
};
// --------------------------------------------------------
// Type: CPS_URLS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CPS_URLS = extern struct {
    pszURL: ?*u16,
    pAlgorithm: ?*CRYPT_ALGORITHM_IDENTIFIER,
    pDigest: ?*CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CERT_POLICY95_QUALIFIER1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_POLICY95_QUALIFIER1 = extern struct {
    pszPracticesReference: ?*u16,
    pszNoticeIdentifier: ?*i8,
    pszNSINoticeIdentifier: ?*i8,
    cCPSURLs: u32,
    rgCPSURLs: ?*CPS_URLS,
};
// --------------------------------------------------------
// Type: CERT_POLICY_MAPPING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_POLICY_MAPPING = extern struct {
    pszIssuerDomainPolicy: ?*i8,
    pszSubjectDomainPolicy: ?*i8,
};
// --------------------------------------------------------
// Type: CERT_POLICY_MAPPINGS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_POLICY_MAPPINGS_INFO = extern struct {
    cPolicyMapping: u32,
    rgPolicyMapping: ?*CERT_POLICY_MAPPING,
};
// --------------------------------------------------------
// Type: CERT_POLICY_CONSTRAINTS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_POLICY_CONSTRAINTS_INFO = extern struct {
    fRequireExplicitPolicy: BOOL,
    dwRequireExplicitPolicySkipCerts: u32,
    fInhibitPolicyMapping: BOOL,
    dwInhibitPolicyMappingSkipCerts: u32,
};
// --------------------------------------------------------
// Type: CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY = extern struct {
    pszObjId: ?*i8,
    cValue: u32,
    rgValue: ?*CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_CONTENT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_CONTENT_INFO = extern struct {
    pszObjId: ?*i8,
    Content: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_SEQUENCE_OF_ANY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_SEQUENCE_OF_ANY = extern struct {
    cValue: u32,
    rgValue: ?*CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CERT_AUTHORITY_KEY_ID2_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_AUTHORITY_KEY_ID2_INFO = extern struct {
    KeyId: CRYPTOAPI_BLOB,
    AuthorityCertIssuer: CERT_ALT_NAME_INFO,
    AuthorityCertSerialNumber: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CERT_ACCESS_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_ACCESS_DESCRIPTION = extern struct {
    pszAccessMethod: ?*i8,
    AccessLocation: CERT_ALT_NAME_ENTRY,
};
// --------------------------------------------------------
// Type: CERT_AUTHORITY_INFO_ACCESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_AUTHORITY_INFO_ACCESS = extern struct {
    cAccDescr: u32,
    rgAccDescr: ?*CERT_ACCESS_DESCRIPTION,
};
// --------------------------------------------------------
// Type: CRL_DIST_POINT_NAME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRL_DIST_POINT_NAME = extern struct {
    dwDistPointNameChoice: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CRL_DIST_POINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRL_DIST_POINT = extern struct {
    DistPointName: CRL_DIST_POINT_NAME,
    ReasonFlags: CRYPT_BIT_BLOB,
    CRLIssuer: CERT_ALT_NAME_INFO,
};
// --------------------------------------------------------
// Type: CRL_DIST_POINTS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRL_DIST_POINTS_INFO = extern struct {
    cDistPoint: u32,
    rgDistPoint: ?*CRL_DIST_POINT,
};
// --------------------------------------------------------
// Type: CROSS_CERT_DIST_POINTS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CROSS_CERT_DIST_POINTS_INFO = extern struct {
    dwSyncDeltaTime: u32,
    cDistPoint: u32,
    rgDistPoint: ?*CERT_ALT_NAME_INFO,
};
// --------------------------------------------------------
// Type: CERT_PAIR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_PAIR = extern struct {
    Forward: CRYPTOAPI_BLOB,
    Reverse: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CRL_ISSUING_DIST_POINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRL_ISSUING_DIST_POINT = extern struct {
    DistPointName: CRL_DIST_POINT_NAME,
    fOnlyContainsUserCerts: BOOL,
    fOnlyContainsCACerts: BOOL,
    OnlySomeReasonFlags: CRYPT_BIT_BLOB,
    fIndirectCRL: BOOL,
};
// --------------------------------------------------------
// Type: CERT_GENERAL_SUBTREE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_GENERAL_SUBTREE = extern struct {
    Base: CERT_ALT_NAME_ENTRY,
    dwMinimum: u32,
    fMaximum: BOOL,
    dwMaximum: u32,
};
// --------------------------------------------------------
// Type: CERT_NAME_CONSTRAINTS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_NAME_CONSTRAINTS_INFO = extern struct {
    cPermittedSubtree: u32,
    rgPermittedSubtree: ?*CERT_GENERAL_SUBTREE,
    cExcludedSubtree: u32,
    rgExcludedSubtree: ?*CERT_GENERAL_SUBTREE,
};
// --------------------------------------------------------
// Type: CERT_DSS_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_DSS_PARAMETERS = extern struct {
    p: CRYPTOAPI_BLOB,
    q: CRYPTOAPI_BLOB,
    g: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CERT_DH_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_DH_PARAMETERS = extern struct {
    p: CRYPTOAPI_BLOB,
    g: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CERT_ECC_SIGNATURE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_ECC_SIGNATURE = extern struct {
    r: CRYPTOAPI_BLOB,
    s: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CERT_X942_DH_VALIDATION_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_X942_DH_VALIDATION_PARAMS = extern struct {
    seed: CRYPT_BIT_BLOB,
    pgenCounter: u32,
};
// --------------------------------------------------------
// Type: CERT_X942_DH_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_X942_DH_PARAMETERS = extern struct {
    p: CRYPTOAPI_BLOB,
    g: CRYPTOAPI_BLOB,
    q: CRYPTOAPI_BLOB,
    j: CRYPTOAPI_BLOB,
    pValidationParams: ?*CERT_X942_DH_VALIDATION_PARAMS,
};
// --------------------------------------------------------
// Type: CRYPT_X942_OTHER_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_X942_OTHER_INFO = extern struct {
    pszContentEncryptionObjId: ?*i8,
    rgbCounter: ?[*]u8,
    rgbKeyLength: ?[*]u8,
    PubInfo: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_ECC_CMS_SHARED_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_ECC_CMS_SHARED_INFO = extern struct {
    Algorithm: CRYPT_ALGORITHM_IDENTIFIER,
    EntityUInfo: CRYPTOAPI_BLOB,
    rgbSuppPubInfo: ?[*]u8,
};
// --------------------------------------------------------
// Type: CRYPT_RC2_CBC_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_RC2_CBC_PARAMETERS = extern struct {
    dwVersion: u32,
    fIV: BOOL,
    rgbIV: ?[*]u8,
};
// --------------------------------------------------------
// Type: CRYPT_SMIME_CAPABILITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_SMIME_CAPABILITY = extern struct {
    pszObjId: ?*i8,
    Parameters: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_SMIME_CAPABILITIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_SMIME_CAPABILITIES = extern struct {
    cCapability: u32,
    rgCapability: ?*CRYPT_SMIME_CAPABILITY,
};
// --------------------------------------------------------
// Type: CERT_QC_STATEMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_QC_STATEMENT = extern struct {
    pszStatementId: ?*i8,
    StatementInfo: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CERT_QC_STATEMENTS_EXT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_QC_STATEMENTS_EXT_INFO = extern struct {
    cStatement: u32,
    rgStatement: ?*CERT_QC_STATEMENT,
};
// --------------------------------------------------------
// Type: CRYPT_MASK_GEN_ALGORITHM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_MASK_GEN_ALGORITHM = extern struct {
    pszObjId: ?*i8,
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
};
// --------------------------------------------------------
// Type: CRYPT_RSA_SSA_PSS_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_RSA_SSA_PSS_PARAMETERS = extern struct {
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    MaskGenAlgorithm: CRYPT_MASK_GEN_ALGORITHM,
    dwSaltLength: u32,
    dwTrailerField: u32,
};
// --------------------------------------------------------
// Type: CRYPT_PSOURCE_ALGORITHM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PSOURCE_ALGORITHM = extern struct {
    pszObjId: ?*i8,
    EncodingParameters: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_RSAES_OAEP_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_RSAES_OAEP_PARAMETERS = extern struct {
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    MaskGenAlgorithm: CRYPT_MASK_GEN_ALGORITHM,
    PSourceAlgorithm: CRYPT_PSOURCE_ALGORITHM,
};
// --------------------------------------------------------
// Type: CMC_TAGGED_ATTRIBUTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMC_TAGGED_ATTRIBUTE = extern struct {
    dwBodyPartID: u32,
    Attribute: CRYPT_ATTRIBUTE,
};
// --------------------------------------------------------
// Type: CMC_TAGGED_CERT_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMC_TAGGED_CERT_REQUEST = extern struct {
    dwBodyPartID: u32,
    SignedCertRequest: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CMC_TAGGED_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMC_TAGGED_REQUEST = extern struct {
    dwTaggedRequestChoice: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CMC_TAGGED_CONTENT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMC_TAGGED_CONTENT_INFO = extern struct {
    dwBodyPartID: u32,
    EncodedContentInfo: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CMC_TAGGED_OTHER_MSG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMC_TAGGED_OTHER_MSG = extern struct {
    dwBodyPartID: u32,
    pszObjId: ?*i8,
    Value: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CMC_DATA_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMC_DATA_INFO = extern struct {
    cTaggedAttribute: u32,
    rgTaggedAttribute: ?*CMC_TAGGED_ATTRIBUTE,
    cTaggedRequest: u32,
    rgTaggedRequest: ?*CMC_TAGGED_REQUEST,
    cTaggedContentInfo: u32,
    rgTaggedContentInfo: ?*CMC_TAGGED_CONTENT_INFO,
    cTaggedOtherMsg: u32,
    rgTaggedOtherMsg: ?*CMC_TAGGED_OTHER_MSG,
};
// --------------------------------------------------------
// Type: CMC_RESPONSE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMC_RESPONSE_INFO = extern struct {
    cTaggedAttribute: u32,
    rgTaggedAttribute: ?*CMC_TAGGED_ATTRIBUTE,
    cTaggedContentInfo: u32,
    rgTaggedContentInfo: ?*CMC_TAGGED_CONTENT_INFO,
    cTaggedOtherMsg: u32,
    rgTaggedOtherMsg: ?*CMC_TAGGED_OTHER_MSG,
};
// --------------------------------------------------------
// Type: CMC_PEND_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMC_PEND_INFO = extern struct {
    PendToken: CRYPTOAPI_BLOB,
    PendTime: FILETIME,
};
// --------------------------------------------------------
// Type: CMC_STATUS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMC_STATUS_INFO = extern struct {
    dwStatus: u32,
    cBodyList: u32,
    rgdwBodyList: ?*u32,
    pwszStatusString: ?*u16,
    dwOtherInfoChoice: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CMC_ADD_EXTENSIONS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMC_ADD_EXTENSIONS_INFO = extern struct {
    dwCmcDataReference: u32,
    cCertReference: u32,
    rgdwCertReference: ?*u32,
    cExtension: u32,
    rgExtension: ?*CERT_EXTENSION,
};
// --------------------------------------------------------
// Type: CMC_ADD_ATTRIBUTES_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMC_ADD_ATTRIBUTES_INFO = extern struct {
    dwCmcDataReference: u32,
    cCertReference: u32,
    rgdwCertReference: ?*u32,
    cAttribute: u32,
    rgAttribute: ?*CRYPT_ATTRIBUTE,
};
// --------------------------------------------------------
// Type: CERT_TEMPLATE_EXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_TEMPLATE_EXT = extern struct {
    pszObjId: ?*i8,
    dwMajorVersion: u32,
    fMinorVersion: BOOL,
    dwMinorVersion: u32,
};
// --------------------------------------------------------
// Type: CERT_HASHED_URL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_HASHED_URL = extern struct {
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    Hash: CRYPTOAPI_BLOB,
    pwszUrl: ?*u16,
};
// --------------------------------------------------------
// Type: CERT_LOGOTYPE_DETAILS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_LOGOTYPE_DETAILS = extern struct {
    pwszMimeType: ?*u16,
    cHashedUrl: u32,
    rgHashedUrl: ?*CERT_HASHED_URL,
};
// --------------------------------------------------------
// Type: CERT_LOGOTYPE_REFERENCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_LOGOTYPE_REFERENCE = extern struct {
    cHashedUrl: u32,
    rgHashedUrl: ?*CERT_HASHED_URL,
};
// --------------------------------------------------------
// Type: CERT_LOGOTYPE_IMAGE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_LOGOTYPE_IMAGE_INFO = extern struct {
    dwLogotypeImageInfoChoice: u32,
    dwFileSize: u32,
    dwXSize: u32,
    dwYSize: u32,
    dwLogotypeImageResolutionChoice: u32,
    Anonymous: _Anonymous_e__Union,
    pwszLanguage: ?*u16,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CERT_LOGOTYPE_IMAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_LOGOTYPE_IMAGE = extern struct {
    LogotypeDetails: CERT_LOGOTYPE_DETAILS,
    pLogotypeImageInfo: ?*CERT_LOGOTYPE_IMAGE_INFO,
};
// --------------------------------------------------------
// Type: CERT_LOGOTYPE_AUDIO_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_LOGOTYPE_AUDIO_INFO = extern struct {
    dwFileSize: u32,
    dwPlayTime: u32,
    dwChannels: u32,
    dwSampleRate: u32,
    pwszLanguage: ?*u16,
};
// --------------------------------------------------------
// Type: CERT_LOGOTYPE_AUDIO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_LOGOTYPE_AUDIO = extern struct {
    LogotypeDetails: CERT_LOGOTYPE_DETAILS,
    pLogotypeAudioInfo: ?*CERT_LOGOTYPE_AUDIO_INFO,
};
// --------------------------------------------------------
// Type: CERT_LOGOTYPE_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_LOGOTYPE_DATA = extern struct {
    cLogotypeImage: u32,
    rgLogotypeImage: ?*CERT_LOGOTYPE_IMAGE,
    cLogotypeAudio: u32,
    rgLogotypeAudio: ?*CERT_LOGOTYPE_AUDIO,
};
// --------------------------------------------------------
// Type: CERT_LOGOTYPE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_LOGOTYPE_INFO = extern struct {
    dwLogotypeInfoChoice: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CERT_OTHER_LOGOTYPE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_OTHER_LOGOTYPE_INFO = extern struct {
    pszObjId: ?*i8,
    LogotypeInfo: CERT_LOGOTYPE_INFO,
};
// --------------------------------------------------------
// Type: CERT_LOGOTYPE_EXT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_LOGOTYPE_EXT_INFO = extern struct {
    cCommunityLogo: u32,
    rgCommunityLogo: ?*CERT_LOGOTYPE_INFO,
    pIssuerLogo: ?*CERT_LOGOTYPE_INFO,
    pSubjectLogo: ?*CERT_LOGOTYPE_INFO,
    cOtherLogo: u32,
    rgOtherLogo: ?*CERT_OTHER_LOGOTYPE_INFO,
};
// --------------------------------------------------------
// Type: CERT_BIOMETRIC_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_BIOMETRIC_DATA = extern struct {
    dwTypeOfBiometricDataChoice: u32,
    Anonymous: _Anonymous_e__Union,
    HashedUrl: CERT_HASHED_URL,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CERT_BIOMETRIC_EXT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_BIOMETRIC_EXT_INFO = extern struct {
    cBiometricData: u32,
    rgBiometricData: ?*CERT_BIOMETRIC_DATA,
};
// --------------------------------------------------------
// Type: OCSP_SIGNATURE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OCSP_SIGNATURE_INFO = extern struct {
    SignatureAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    Signature: CRYPT_BIT_BLOB,
    cCertEncoded: u32,
    rgCertEncoded: ?*CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: OCSP_SIGNED_REQUEST_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OCSP_SIGNED_REQUEST_INFO = extern struct {
    ToBeSigned: CRYPTOAPI_BLOB,
    pOptionalSignatureInfo: ?*OCSP_SIGNATURE_INFO,
};
// --------------------------------------------------------
// Type: OCSP_CERT_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OCSP_CERT_ID = extern struct {
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    IssuerNameHash: CRYPTOAPI_BLOB,
    IssuerKeyHash: CRYPTOAPI_BLOB,
    SerialNumber: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: OCSP_REQUEST_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OCSP_REQUEST_ENTRY = extern struct {
    CertId: OCSP_CERT_ID,
    cExtension: u32,
    rgExtension: ?*CERT_EXTENSION,
};
// --------------------------------------------------------
// Type: OCSP_REQUEST_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OCSP_REQUEST_INFO = extern struct {
    dwVersion: u32,
    pRequestorName: ?*CERT_ALT_NAME_ENTRY,
    cRequestEntry: u32,
    rgRequestEntry: ?*OCSP_REQUEST_ENTRY,
    cExtension: u32,
    rgExtension: ?*CERT_EXTENSION,
};
// --------------------------------------------------------
// Type: OCSP_RESPONSE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OCSP_RESPONSE_INFO = extern struct {
    dwStatus: u32,
    pszObjId: ?*i8,
    Value: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: OCSP_BASIC_SIGNED_RESPONSE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OCSP_BASIC_SIGNED_RESPONSE_INFO = extern struct {
    ToBeSigned: CRYPTOAPI_BLOB,
    SignatureInfo: OCSP_SIGNATURE_INFO,
};
// --------------------------------------------------------
// Type: OCSP_BASIC_REVOKED_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OCSP_BASIC_REVOKED_INFO = extern struct {
    RevocationDate: FILETIME,
    dwCrlReasonCode: u32,
};
// --------------------------------------------------------
// Type: OCSP_BASIC_RESPONSE_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OCSP_BASIC_RESPONSE_ENTRY = extern struct {
    CertId: OCSP_CERT_ID,
    dwCertStatus: u32,
    Anonymous: _Anonymous_e__Union,
    ThisUpdate: FILETIME,
    NextUpdate: FILETIME,
    cExtension: u32,
    rgExtension: ?*CERT_EXTENSION,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: OCSP_BASIC_RESPONSE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OCSP_BASIC_RESPONSE_INFO = extern struct {
    dwVersion: u32,
    dwResponderIdChoice: u32,
    Anonymous: _Anonymous_e__Union,
    ProducedAt: FILETIME,
    cResponseEntry: u32,
    rgResponseEntry: ?*OCSP_BASIC_RESPONSE_ENTRY,
    cExtension: u32,
    rgExtension: ?*CERT_EXTENSION,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CERT_SUPPORTED_ALGORITHM_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_SUPPORTED_ALGORITHM_INFO = extern struct {
    Algorithm: CRYPT_ALGORITHM_IDENTIFIER,
    IntendedKeyUsage: CRYPT_BIT_BLOB,
    IntendedCertPolicies: CERT_POLICIES_INFO,
};
// --------------------------------------------------------
// Type: CERT_TPM_SPECIFICATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_TPM_SPECIFICATION_INFO = extern struct {
    pwszFamily: ?*u16,
    dwLevel: u32,
    dwRevision: u32,
};
// --------------------------------------------------------
// Type: CRYPT_OID_FUNC_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_OID_FUNC_ENTRY = extern struct {
    pszOID: ?*i8,
    pvFuncAddr: ?*opaque{},
};
// --------------------------------------------------------
// Type: PFN_CRYPT_ENUM_OID_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_ENUM_OID_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_OID_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_OID_INFO = extern struct {
    cbSize: u32,
    pszOID: ?*i8,
    pwszName: ?*u16,
    dwGroupId: u32,
    Anonymous: _Anonymous_e__Union,
    ExtraInfo: CRYPTOAPI_BLOB,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PFN_CRYPT_ENUM_OID_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_ENUM_OID_INFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CERT_STRONG_SIGN_SERIALIZED_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_STRONG_SIGN_SERIALIZED_INFO = extern struct {
    dwFlags: u32,
    pwszCNGSignHashAlgids: ?*u16,
    pwszCNGPubKeyMinBitLengths: ?*u16,
};
// --------------------------------------------------------
// Type: CERT_STRONG_SIGN_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_STRONG_SIGN_PARA = extern struct {
    cbSize: u32,
    dwInfoChoice: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CERT_ISSUER_SERIAL_NUMBER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_ISSUER_SERIAL_NUMBER = extern struct {
    Issuer: CRYPTOAPI_BLOB,
    SerialNumber: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CERT_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_ID = extern struct {
    dwIdChoice: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CMSG_SIGNER_ENCODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_SIGNER_ENCODE_INFO = extern struct {
    cbSize: u32,
    pCertInfo: ?*CERT_INFO,
    Anonymous: _Anonymous_e__Union,
    dwKeySpec: u32,
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: ?*opaque{},
    cAuthAttr: u32,
    rgAuthAttr: ?*CRYPT_ATTRIBUTE,
    cUnauthAttr: u32,
    rgUnauthAttr: ?*CRYPT_ATTRIBUTE,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CMSG_SIGNED_ENCODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_SIGNED_ENCODE_INFO = extern struct {
    cbSize: u32,
    cSigners: u32,
    rgSigners: ?*CMSG_SIGNER_ENCODE_INFO,
    cCertEncoded: u32,
    rgCertEncoded: ?*CRYPTOAPI_BLOB,
    cCrlEncoded: u32,
    rgCrlEncoded: ?*CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CMSG_ENVELOPED_ENCODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_ENVELOPED_ENCODE_INFO = extern struct {
    cbSize: u32,
    hCryptProv: ?*opaque{},
    ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo: ?*opaque{},
    cRecipients: u32,
    rgpRecipients: ?*?*CERT_INFO,
};
// --------------------------------------------------------
// Type: CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO = extern struct {
    cbSize: u32,
    KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyEncryptionAuxInfo: ?*opaque{},
    hCryptProv: ?*opaque{},
    RecipientPublicKey: CRYPT_BIT_BLOB,
    RecipientId: CERT_ID,
};
// --------------------------------------------------------
// Type: CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO = extern struct {
    cbSize: u32,
    RecipientPublicKey: CRYPT_BIT_BLOB,
    RecipientId: CERT_ID,
    Date: FILETIME,
    pOtherAttr: ?*CRYPT_ATTRIBUTE_TYPE_VALUE,
};
// --------------------------------------------------------
// Type: CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO = extern struct {
    cbSize: u32,
    KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyEncryptionAuxInfo: ?*opaque{},
    KeyWrapAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyWrapAuxInfo: ?*opaque{},
    hCryptProv: ?*opaque{},
    dwKeySpec: u32,
    dwKeyChoice: u32,
    Anonymous: _Anonymous_e__Union,
    UserKeyingMaterial: CRYPTOAPI_BLOB,
    cRecipientEncryptedKeys: u32,
    rgpRecipientEncryptedKeys: ?*?*CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO = extern struct {
    cbSize: u32,
    KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyEncryptionAuxInfo: ?*opaque{},
    hCryptProv: ?*opaque{},
    dwKeyChoice: u32,
    Anonymous: _Anonymous_e__Union,
    KeyId: CRYPTOAPI_BLOB,
    Date: FILETIME,
    pOtherAttr: ?*CRYPT_ATTRIBUTE_TYPE_VALUE,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CMSG_RECIPIENT_ENCODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_RECIPIENT_ENCODE_INFO = extern struct {
    dwRecipientChoice: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CMSG_RC2_AUX_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_RC2_AUX_INFO = extern struct {
    cbSize: u32,
    dwBitLen: u32,
};
// --------------------------------------------------------
// Type: CMSG_SP3_COMPATIBLE_AUX_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_SP3_COMPATIBLE_AUX_INFO = extern struct {
    cbSize: u32,
    dwFlags: u32,
};
// --------------------------------------------------------
// Type: CMSG_RC4_AUX_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_RC4_AUX_INFO = extern struct {
    cbSize: u32,
    dwBitLen: u32,
};
// --------------------------------------------------------
// Type: CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO = extern struct {
    cbSize: u32,
    SignedInfo: CMSG_SIGNED_ENCODE_INFO,
    EnvelopedInfo: CMSG_ENVELOPED_ENCODE_INFO,
};
// --------------------------------------------------------
// Type: CMSG_HASHED_ENCODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_HASHED_ENCODE_INFO = extern struct {
    cbSize: u32,
    hCryptProv: ?*opaque{},
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: ?*opaque{},
};
// --------------------------------------------------------
// Type: CMSG_ENCRYPTED_ENCODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_ENCRYPTED_ENCODE_INFO = extern struct {
    cbSize: u32,
    ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo: ?*opaque{},
};
// --------------------------------------------------------
// Type: PFN_CMSG_STREAM_OUTPUT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_STREAM_OUTPUT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CMSG_STREAM_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_STREAM_INFO = extern struct {
    cbContent: u32,
    pfnStreamOutput: PFN_CMSG_STREAM_OUTPUT,
    pvArg: ?*opaque{},
};
// --------------------------------------------------------
// Type: CMSG_SIGNER_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_SIGNER_INFO = extern struct {
    dwVersion: u32,
    Issuer: CRYPTOAPI_BLOB,
    SerialNumber: CRYPTOAPI_BLOB,
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    HashEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedHash: CRYPTOAPI_BLOB,
    AuthAttrs: CRYPT_ATTRIBUTES,
    UnauthAttrs: CRYPT_ATTRIBUTES,
};
// --------------------------------------------------------
// Type: CMSG_CMS_SIGNER_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_CMS_SIGNER_INFO = extern struct {
    dwVersion: u32,
    SignerId: CERT_ID,
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    HashEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedHash: CRYPTOAPI_BLOB,
    AuthAttrs: CRYPT_ATTRIBUTES,
    UnauthAttrs: CRYPT_ATTRIBUTES,
};
// --------------------------------------------------------
// Type: CMSG_KEY_TRANS_RECIPIENT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_KEY_TRANS_RECIPIENT_INFO = extern struct {
    dwVersion: u32,
    RecipientId: CERT_ID,
    KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedKey: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CMSG_RECIPIENT_ENCRYPTED_KEY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_RECIPIENT_ENCRYPTED_KEY_INFO = extern struct {
    RecipientId: CERT_ID,
    EncryptedKey: CRYPTOAPI_BLOB,
    Date: FILETIME,
    pOtherAttr: ?*CRYPT_ATTRIBUTE_TYPE_VALUE,
};
// --------------------------------------------------------
// Type: CMSG_KEY_AGREE_RECIPIENT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_KEY_AGREE_RECIPIENT_INFO = extern struct {
    dwVersion: u32,
    dwOriginatorChoice: u32,
    Anonymous: _Anonymous_e__Union,
    UserKeyingMaterial: CRYPTOAPI_BLOB,
    KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    cRecipientEncryptedKeys: u32,
    rgpRecipientEncryptedKeys: ?*?*CMSG_RECIPIENT_ENCRYPTED_KEY_INFO,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CMSG_MAIL_LIST_RECIPIENT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_MAIL_LIST_RECIPIENT_INFO = extern struct {
    dwVersion: u32,
    KeyId: CRYPTOAPI_BLOB,
    KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedKey: CRYPTOAPI_BLOB,
    Date: FILETIME,
    pOtherAttr: ?*CRYPT_ATTRIBUTE_TYPE_VALUE,
};
// --------------------------------------------------------
// Type: CMSG_CMS_RECIPIENT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_CMS_RECIPIENT_INFO = extern struct {
    dwRecipientChoice: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA = extern struct {
    cbSize: u32,
    hCryptProv: ?*opaque{},
    dwSignerIndex: u32,
    dwSignerType: u32,
    pvSigner: ?*opaque{},
};
// --------------------------------------------------------
// Type: CMSG_CTRL_DECRYPT_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_CTRL_DECRYPT_PARA = extern struct {
    cbSize: u32,
    Anonymous: _Anonymous_e__Union,
    dwKeySpec: u32,
    dwRecipientIndex: u32,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CMSG_CTRL_KEY_TRANS_DECRYPT_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_CTRL_KEY_TRANS_DECRYPT_PARA = extern struct {
    cbSize: u32,
    Anonymous: _Anonymous_e__Union,
    dwKeySpec: u32,
    pKeyTrans: ?*CMSG_KEY_TRANS_RECIPIENT_INFO,
    dwRecipientIndex: u32,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CMSG_CTRL_KEY_AGREE_DECRYPT_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_CTRL_KEY_AGREE_DECRYPT_PARA = extern struct {
    cbSize: u32,
    Anonymous: _Anonymous_e__Union,
    dwKeySpec: u32,
    pKeyAgree: ?*CMSG_KEY_AGREE_RECIPIENT_INFO,
    dwRecipientIndex: u32,
    dwRecipientEncryptedKeyIndex: u32,
    OriginatorPublicKey: CRYPT_BIT_BLOB,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CMSG_CTRL_MAIL_LIST_DECRYPT_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_CTRL_MAIL_LIST_DECRYPT_PARA = extern struct {
    cbSize: u32,
    hCryptProv: ?*opaque{},
    pMailList: ?*CMSG_MAIL_LIST_RECIPIENT_INFO,
    dwRecipientIndex: u32,
    dwKeyChoice: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA = extern struct {
    cbSize: u32,
    dwSignerIndex: u32,
    blob: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA = extern struct {
    cbSize: u32,
    dwSignerIndex: u32,
    dwUnauthAttrIndex: u32,
};
// --------------------------------------------------------
// Type: PFN_CMSG_ALLOC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_ALLOC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CMSG_FREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_FREE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CMSG_GEN_ENCRYPT_KEY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_GEN_ENCRYPT_KEY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CMSG_EXPORT_ENCRYPT_KEY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_EXPORT_ENCRYPT_KEY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CMSG_IMPORT_ENCRYPT_KEY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_IMPORT_ENCRYPT_KEY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CMSG_CONTENT_ENCRYPT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_CONTENT_ENCRYPT_INFO = extern struct {
    cbSize: u32,
    hCryptProv: ?*opaque{},
    ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo: ?*opaque{},
    cRecipients: u32,
    rgCmsRecipients: ?*CMSG_RECIPIENT_ENCODE_INFO,
    pfnAlloc: PFN_CMSG_ALLOC,
    pfnFree: PFN_CMSG_FREE,
    dwEncryptFlags: u32,
    Anonymous: _Anonymous_e__Union,
    dwFlags: u32,
    fCNG: BOOL,
    pbCNGContentEncryptKeyObject: ?*u8,
    pbContentEncryptKey: ?*u8,
    cbContentEncryptKey: u32,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CMSG_KEY_TRANS_ENCRYPT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_KEY_TRANS_ENCRYPT_INFO = extern struct {
    cbSize: u32,
    dwRecipientIndex: u32,
    KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedKey: CRYPTOAPI_BLOB,
    dwFlags: u32,
};
// --------------------------------------------------------
// Type: PFN_CMSG_EXPORT_KEY_TRANS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_EXPORT_KEY_TRANS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CMSG_KEY_AGREE_KEY_ENCRYPT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_KEY_AGREE_KEY_ENCRYPT_INFO = extern struct {
    cbSize: u32,
    EncryptedKey: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CMSG_KEY_AGREE_ENCRYPT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_KEY_AGREE_ENCRYPT_INFO = extern struct {
    cbSize: u32,
    dwRecipientIndex: u32,
    KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    UserKeyingMaterial: CRYPTOAPI_BLOB,
    dwOriginatorChoice: u32,
    Anonymous: _Anonymous_e__Union,
    cKeyAgreeKeyEncryptInfo: u32,
    rgpKeyAgreeKeyEncryptInfo: ?*?*CMSG_KEY_AGREE_KEY_ENCRYPT_INFO,
    dwFlags: u32,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PFN_CMSG_EXPORT_KEY_AGREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_EXPORT_KEY_AGREE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CMSG_MAIL_LIST_ENCRYPT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_MAIL_LIST_ENCRYPT_INFO = extern struct {
    cbSize: u32,
    dwRecipientIndex: u32,
    KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedKey: CRYPTOAPI_BLOB,
    dwFlags: u32,
};
// --------------------------------------------------------
// Type: PFN_CMSG_EXPORT_MAIL_LIST
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_EXPORT_MAIL_LIST = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CMSG_IMPORT_KEY_TRANS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_IMPORT_KEY_TRANS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CMSG_IMPORT_KEY_AGREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_IMPORT_KEY_AGREE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CMSG_IMPORT_MAIL_LIST
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_IMPORT_MAIL_LIST = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CMSG_CNG_CONTENT_DECRYPT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CMSG_CNG_CONTENT_DECRYPT_INFO = extern struct {
    cbSize: u32,
    ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pfnAlloc: PFN_CMSG_ALLOC,
    pfnFree: PFN_CMSG_FREE,
    hNCryptKey: ?*opaque{},
    pbContentEncryptKey: ?*u8,
    cbContentEncryptKey: u32,
    hCNGContentEncryptKey: ?*opaque{},
    pbCNGContentEncryptKeyObject: ?*u8,
};
// --------------------------------------------------------
// Type: PFN_CMSG_CNG_IMPORT_KEY_TRANS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_CNG_IMPORT_KEY_TRANS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CMSG_CNG_IMPORT_KEY_AGREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_CNG_IMPORT_KEY_AGREE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CERT_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_CONTEXT = extern struct {
    dwCertEncodingType: u32,
    pbCertEncoded: ?*u8,
    cbCertEncoded: u32,
    pCertInfo: ?*CERT_INFO,
    hCertStore: ?*opaque{},
};
// --------------------------------------------------------
// Type: CRL_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRL_CONTEXT = extern struct {
    dwCertEncodingType: u32,
    pbCrlEncoded: ?*u8,
    cbCrlEncoded: u32,
    pCrlInfo: ?*CRL_INFO,
    hCertStore: ?*opaque{},
};
// --------------------------------------------------------
// Type: CTL_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CTL_CONTEXT = extern struct {
    dwMsgAndCertEncodingType: u32,
    pbCtlEncoded: ?*u8,
    cbCtlEncoded: u32,
    pCtlInfo: ?*CTL_INFO,
    hCertStore: ?*opaque{},
    hCryptMsg: ?*opaque{},
    pbCtlContent: ?*u8,
    cbCtlContent: u32,
};
// --------------------------------------------------------
// Type: CertKeyType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CertKeyType = *opaque{
};
// --------------------------------------------------------
// Type: CRYPT_KEY_PROV_PARAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_KEY_PROV_PARAM = extern struct {
    dwParam: u32,
    pbData: ?*u8,
    cbData: u32,
    dwFlags: u32,
};
// --------------------------------------------------------
// Type: CRYPT_KEY_PROV_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_KEY_PROV_INFO = extern struct {
    pwszContainerName: ?*u16,
    pwszProvName: ?*u16,
    dwProvType: u32,
    dwFlags: u32,
    cProvParam: u32,
    rgProvParam: ?*CRYPT_KEY_PROV_PARAM,
    dwKeySpec: u32,
};
// --------------------------------------------------------
// Type: CERT_KEY_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_KEY_CONTEXT = extern struct {
    cbSize: u32,
    Anonymous: _Anonymous_e__Union,
    dwKeySpec: u32,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: ROOT_INFO_LUID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ROOT_INFO_LUID = extern struct {
    LowPart: u32,
    HighPart: i32,
};
// --------------------------------------------------------
// Type: CRYPT_SMART_CARD_ROOT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_SMART_CARD_ROOT_INFO = extern struct {
    rgbCardID: ?[*]u8,
    luid: ROOT_INFO_LUID,
};
// --------------------------------------------------------
// Type: CERT_SYSTEM_STORE_RELOCATE_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_SYSTEM_STORE_RELOCATE_PARA = extern struct {
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CERT_REGISTRY_STORE_CLIENT_GPT_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_REGISTRY_STORE_CLIENT_GPT_PARA = extern struct {
    hKeyBase: HKEY,
    pwszRegPath: ?*u16,
};
// --------------------------------------------------------
// Type: CERT_REGISTRY_STORE_ROAMING_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_REGISTRY_STORE_ROAMING_PARA = extern struct {
    hKey: HKEY,
    pwszStoreDirectory: ?*u16,
};
// --------------------------------------------------------
// Type: CERT_LDAP_STORE_OPENED_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_LDAP_STORE_OPENED_PARA = extern struct {
    pvLdapSessionHandle: ?*opaque{},
    pwszLdapUrl: ?*u16,
};
// --------------------------------------------------------
// Type: CERT_STORE_PROV_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_STORE_PROV_INFO = extern struct {
    cbSize: u32,
    cStoreProvFunc: u32,
    rgpvStoreProvFunc: ?*?*opaque{},
    hStoreProv: ?*opaque{},
    dwStoreProvFlags: u32,
    hStoreProvFuncAddr2: ?*opaque{},
};
// --------------------------------------------------------
// Type: PFN_CERT_DLL_OPEN_STORE_PROV_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_DLL_OPEN_STORE_PROV_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_CLOSE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_CLOSE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_READ_CERT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_READ_CERT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_WRITE_CERT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_WRITE_CERT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_DELETE_CERT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_DELETE_CERT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_SET_CERT_PROPERTY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_SET_CERT_PROPERTY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_READ_CRL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_READ_CRL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_WRITE_CRL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_WRITE_CRL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_DELETE_CRL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_DELETE_CRL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_SET_CRL_PROPERTY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_SET_CRL_PROPERTY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_READ_CTL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_READ_CTL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_WRITE_CTL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_WRITE_CTL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_DELETE_CTL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_DELETE_CTL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_SET_CTL_PROPERTY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_SET_CTL_PROPERTY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_CONTROL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_CONTROL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CERT_STORE_PROV_FIND_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_STORE_PROV_FIND_INFO = extern struct {
    cbSize: u32,
    dwMsgAndCertEncodingType: u32,
    dwFindFlags: u32,
    dwFindType: u32,
    pvFindPara: ?*opaque{},
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_FIND_CERT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_FIND_CERT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_FREE_FIND_CERT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_FREE_FIND_CERT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_GET_CERT_PROPERTY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_GET_CERT_PROPERTY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_FIND_CRL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_FIND_CRL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_FREE_FIND_CRL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_FREE_FIND_CRL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_GET_CRL_PROPERTY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_GET_CRL_PROPERTY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_FIND_CTL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_FIND_CTL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_FREE_FIND_CTL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_FREE_FIND_CTL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_STORE_PROV_GET_CTL_PROPERTY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_STORE_PROV_GET_CTL_PROPERTY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRL_FIND_ISSUED_FOR_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRL_FIND_ISSUED_FOR_PARA = extern struct {
    pSubjectCert: ?*CERT_CONTEXT,
    pIssuerCert: ?*CERT_CONTEXT,
};
// --------------------------------------------------------
// Type: CTL_ANY_SUBJECT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CTL_ANY_SUBJECT_INFO = extern struct {
    SubjectAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    SubjectIdentifier: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CTL_FIND_USAGE_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CTL_FIND_USAGE_PARA = extern struct {
    cbSize: u32,
    SubjectUsage: CTL_USAGE,
    ListIdentifier: CRYPTOAPI_BLOB,
    pSigner: ?*CERT_INFO,
};
// --------------------------------------------------------
// Type: CTL_FIND_SUBJECT_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CTL_FIND_SUBJECT_PARA = extern struct {
    cbSize: u32,
    pUsagePara: ?*CTL_FIND_USAGE_PARA,
    dwSubjectType: u32,
    pvSubject: ?*opaque{},
};
// --------------------------------------------------------
// Type: PFN_CERT_CREATE_CONTEXT_SORT_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_CREATE_CONTEXT_SORT_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CERT_CREATE_CONTEXT_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_CREATE_CONTEXT_PARA = extern struct {
    cbSize: u32,
    pfnFree: PFN_CRYPT_FREE,
    pvFree: ?*opaque{},
    pfnSort: PFN_CERT_CREATE_CONTEXT_SORT_FUNC,
    pvSort: ?*opaque{},
};
// --------------------------------------------------------
// Type: CERT_SYSTEM_STORE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_SYSTEM_STORE_INFO = extern struct {
    cbSize: u32,
};
// --------------------------------------------------------
// Type: CERT_PHYSICAL_STORE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_PHYSICAL_STORE_INFO = extern struct {
    cbSize: u32,
    pszOpenStoreProvider: ?*i8,
    dwOpenEncodingType: u32,
    dwOpenFlags: u32,
    OpenParameters: CRYPTOAPI_BLOB,
    dwFlags: u32,
    dwPriority: u32,
};
// --------------------------------------------------------
// Type: PFN_CERT_ENUM_SYSTEM_STORE_LOCATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_ENUM_SYSTEM_STORE_LOCATION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_ENUM_SYSTEM_STORE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_ENUM_SYSTEM_STORE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_ENUM_PHYSICAL_STORE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_ENUM_PHYSICAL_STORE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CTL_VERIFY_USAGE_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CTL_VERIFY_USAGE_PARA = extern struct {
    cbSize: u32,
    ListIdentifier: CRYPTOAPI_BLOB,
    cCtlStore: u32,
    rghCtlStore: ?*?*opaque{},
    cSignerStore: u32,
    rghSignerStore: ?*?*opaque{},
};
// --------------------------------------------------------
// Type: CTL_VERIFY_USAGE_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CTL_VERIFY_USAGE_STATUS = extern struct {
    cbSize: u32,
    dwError: u32,
    dwFlags: u32,
    ppCtl: ?*?*CTL_CONTEXT,
    dwCtlEntryIndex: u32,
    ppSigner: ?*?*CERT_CONTEXT,
    dwSignerIndex: u32,
};
// --------------------------------------------------------
// Type: CERT_REVOCATION_CRL_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_REVOCATION_CRL_INFO = extern struct {
    cbSize: u32,
    pBaseCrlContext: ?*CRL_CONTEXT,
    pDeltaCrlContext: ?*CRL_CONTEXT,
    pCrlEntry: ?*CRL_ENTRY,
    fDeltaCrlEntry: BOOL,
};
// --------------------------------------------------------
// Type: CERT_REVOCATION_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_REVOCATION_PARA = extern struct {
    cbSize: u32,
    pIssuerCert: ?*CERT_CONTEXT,
    cCertStore: u32,
    rgCertStore: ?*?*opaque{},
    hCrlStore: ?*opaque{},
    pftTimeToUse: ?*FILETIME,
};
// --------------------------------------------------------
// Type: CERT_REVOCATION_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_REVOCATION_STATUS = extern struct {
    cbSize: u32,
    dwIndex: u32,
    dwError: u32,
    dwReason: u32,
    fHasFreshnessTime: BOOL,
    dwFreshnessTime: u32,
};
// --------------------------------------------------------
// Type: CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO = extern struct {
    CertSignHashCNGAlgPropData: CRYPTOAPI_BLOB,
    CertIssuerPubKeyBitLengthPropData: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO = extern struct {
    cCNGHashAlgid: u32,
    rgpwszCNGHashAlgid: ?*?*u16,
    dwWeakIndex: u32,
};
// --------------------------------------------------------
// Type: PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA = extern struct {
    cOID: u32,
    rgpszOID: ?*?*i8,
};
// --------------------------------------------------------
// Type: PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_IMPORT_PRIV_KEY_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_IMPORT_PRIV_KEY_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_EXPORT_PRIV_KEY_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_EXPORT_PRIV_KEY_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CRYPT_GET_SIGNER_CERTIFICATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_GET_SIGNER_CERTIFICATE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_SIGN_MESSAGE_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_SIGN_MESSAGE_PARA = extern struct {
    cbSize: u32,
    dwMsgEncodingType: u32,
    pSigningCert: ?*CERT_CONTEXT,
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: ?*opaque{},
    cMsgCert: u32,
    rgpMsgCert: ?*?*CERT_CONTEXT,
    cMsgCrl: u32,
    rgpMsgCrl: ?*?*CRL_CONTEXT,
    cAuthAttr: u32,
    rgAuthAttr: ?*CRYPT_ATTRIBUTE,
    cUnauthAttr: u32,
    rgUnauthAttr: ?*CRYPT_ATTRIBUTE,
    dwFlags: u32,
    dwInnerContentType: u32,
};
// --------------------------------------------------------
// Type: CRYPT_VERIFY_MESSAGE_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_VERIFY_MESSAGE_PARA = extern struct {
    cbSize: u32,
    dwMsgAndCertEncodingType: u32,
    hCryptProv: ?*opaque{},
    pfnGetSignerCertificate: PFN_CRYPT_GET_SIGNER_CERTIFICATE,
    pvGetArg: ?*opaque{},
};
// --------------------------------------------------------
// Type: CRYPT_ENCRYPT_MESSAGE_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_ENCRYPT_MESSAGE_PARA = extern struct {
    cbSize: u32,
    dwMsgEncodingType: u32,
    hCryptProv: ?*opaque{},
    ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo: ?*opaque{},
    dwFlags: u32,
    dwInnerContentType: u32,
};
// --------------------------------------------------------
// Type: CRYPT_DECRYPT_MESSAGE_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_DECRYPT_MESSAGE_PARA = extern struct {
    cbSize: u32,
    dwMsgAndCertEncodingType: u32,
    cCertStore: u32,
    rghCertStore: ?*?*opaque{},
};
// --------------------------------------------------------
// Type: CRYPT_HASH_MESSAGE_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_HASH_MESSAGE_PARA = extern struct {
    cbSize: u32,
    dwMsgEncodingType: u32,
    hCryptProv: ?*opaque{},
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: ?*opaque{},
};
// --------------------------------------------------------
// Type: CRYPT_KEY_SIGN_MESSAGE_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_KEY_SIGN_MESSAGE_PARA = extern struct {
    cbSize: u32,
    dwMsgAndCertEncodingType: u32,
    Anonymous: _Anonymous_e__Union,
    dwKeySpec: u32,
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: ?*opaque{},
    PubKeyAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CRYPT_KEY_VERIFY_MESSAGE_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_KEY_VERIFY_MESSAGE_PARA = extern struct {
    cbSize: u32,
    dwMsgEncodingType: u32,
    hCryptProv: ?*opaque{},
};
// --------------------------------------------------------
// Type: CERT_CHAIN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_CHAIN = extern struct {
    cCerts: u32,
    certs: ?*CRYPTOAPI_BLOB,
    keyLocatorInfo: CRYPT_KEY_PROV_INFO,
};
// --------------------------------------------------------
// Type: PFN_CRYPT_ASYNC_PARAM_FREE_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_ASYNC_PARAM_FREE_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_BLOB_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_BLOB_ARRAY = extern struct {
    cBlob: u32,
    rgBlob: ?*CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_CREDENTIALS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_CREDENTIALS = extern struct {
    cbSize: u32,
    pszCredentialsOid: ?*i8,
    pvCredentials: ?*opaque{},
};
// --------------------------------------------------------
// Type: CRYPT_PASSWORD_CREDENTIALSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PASSWORD_CREDENTIALSA = extern struct {
    cbSize: u32,
    pszUsername: ?*i8,
    pszPassword: ?*i8,
};
// --------------------------------------------------------
// Type: CRYPT_PASSWORD_CREDENTIALSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PASSWORD_CREDENTIALSW = extern struct {
    cbSize: u32,
    pszUsername: ?*u16,
    pszPassword: ?*u16,
};
// --------------------------------------------------------
// Type: PFN_FREE_ENCODED_OBJECT_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_FREE_ENCODED_OBJECT_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPTNET_URL_CACHE_PRE_FETCH_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTNET_URL_CACHE_PRE_FETCH_INFO = extern struct {
    cbSize: u32,
    dwObjectType: u32,
    dwError: u32,
    dwReserved: u32,
    ThisUpdateTime: FILETIME,
    NextUpdateTime: FILETIME,
    PublishTime: FILETIME,
};
// --------------------------------------------------------
// Type: CRYPTNET_URL_CACHE_FLUSH_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTNET_URL_CACHE_FLUSH_INFO = extern struct {
    cbSize: u32,
    dwExemptSeconds: u32,
    ExpireTime: FILETIME,
};
// --------------------------------------------------------
// Type: CRYPTNET_URL_CACHE_RESPONSE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTNET_URL_CACHE_RESPONSE_INFO = extern struct {
    cbSize: u32,
    wResponseType: u16,
    wResponseFlags: u16,
    LastModifiedTime: FILETIME,
    dwMaxAge: u32,
    pwszETag: ?*u16,
    dwProxyId: u32,
};
// --------------------------------------------------------
// Type: CRYPT_RETRIEVE_AUX_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_RETRIEVE_AUX_INFO = extern struct {
    cbSize: u32,
    pLastSyncTime: ?*FILETIME,
    dwMaxUrlRetrievalByteCount: u32,
    pPreFetchInfo: ?*CRYPTNET_URL_CACHE_PRE_FETCH_INFO,
    pFlushInfo: ?*CRYPTNET_URL_CACHE_FLUSH_INFO,
    ppResponseInfo: ?*?*CRYPTNET_URL_CACHE_RESPONSE_INFO,
    pwszCacheFileNamePrefix: ?*u16,
    pftCacheResync: ?*FILETIME,
    fProxyCacheRetrieval: BOOL,
    dwHttpStatusCode: u32,
    ppwszErrorResponseHeaders: ?*?*u16,
    ppErrorContentBlob: ?*?*CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: PFN_CRYPT_CANCEL_RETRIEVAL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_CANCEL_RETRIEVAL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_ASYNC_RETRIEVAL_COMPLETION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_ASYNC_RETRIEVAL_COMPLETION = extern struct {
    pfnCompletion: PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC,
    pvCompletion: ?*opaque{},
};
// --------------------------------------------------------
// Type: PFN_CANCEL_ASYNC_RETRIEVAL_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CANCEL_ASYNC_RETRIEVAL_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_URL_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_URL_ARRAY = extern struct {
    cUrl: u32,
    rgwszUrl: ?*?*u16,
};
// --------------------------------------------------------
// Type: CRYPT_URL_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_URL_INFO = extern struct {
    cbSize: u32,
    dwSyncDeltaTime: u32,
    cGroup: u32,
    rgcGroupEntry: ?*u32,
};
// --------------------------------------------------------
// Type: CERT_CRL_CONTEXT_PAIR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_CRL_CONTEXT_PAIR = extern struct {
    pCertContext: ?*CERT_CONTEXT,
    pCrlContext: ?*CRL_CONTEXT,
};
// --------------------------------------------------------
// Type: CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO = extern struct {
    cbSize: u32,
    iDeltaCrlIndicator: i32,
    pftCacheResync: ?*FILETIME,
    pLastSyncTime: ?*FILETIME,
    pMaxAgeTime: ?*FILETIME,
    pChainPara: ?*CERT_REVOCATION_CHAIN_PARA,
    pDeltaCrlIndicator: ?*CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: PFN_CRYPT_ENUM_KEYID_PROP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_ENUM_KEYID_PROP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CERT_CHAIN_ENGINE_CONFIG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_CHAIN_ENGINE_CONFIG = extern struct {
    cbSize: u32,
    hRestrictedRoot: ?*opaque{},
    hRestrictedTrust: ?*opaque{},
    hRestrictedOther: ?*opaque{},
    cAdditionalStore: u32,
    rghAdditionalStore: ?*?*opaque{},
    dwFlags: u32,
    dwUrlRetrievalTimeout: u32,
    MaximumCachedCertificates: u32,
    CycleDetectionModulus: u32,
    hExclusiveRoot: ?*opaque{},
    hExclusiveTrustedPeople: ?*opaque{},
    dwExclusiveFlags: u32,
};
// --------------------------------------------------------
// Type: CERT_TRUST_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_TRUST_STATUS = extern struct {
    dwErrorStatus: u32,
    dwInfoStatus: u32,
};
// --------------------------------------------------------
// Type: CERT_REVOCATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_REVOCATION_INFO = extern struct {
    cbSize: u32,
    dwRevocationResult: u32,
    pszRevocationOid: ?*i8,
    pvOidSpecificInfo: ?*opaque{},
    fHasFreshnessTime: BOOL,
    dwFreshnessTime: u32,
    pCrlInfo: ?*CERT_REVOCATION_CRL_INFO,
};
// --------------------------------------------------------
// Type: CERT_TRUST_LIST_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_TRUST_LIST_INFO = extern struct {
    cbSize: u32,
    pCtlEntry: ?*CTL_ENTRY,
    pCtlContext: ?*CTL_CONTEXT,
};
// --------------------------------------------------------
// Type: CERT_CHAIN_ELEMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_CHAIN_ELEMENT = extern struct {
    cbSize: u32,
    pCertContext: ?*CERT_CONTEXT,
    TrustStatus: CERT_TRUST_STATUS,
    pRevocationInfo: ?*CERT_REVOCATION_INFO,
    pIssuanceUsage: ?*CTL_USAGE,
    pApplicationUsage: ?*CTL_USAGE,
    pwszExtendedErrorInfo: ?*u16,
};
// --------------------------------------------------------
// Type: CERT_SIMPLE_CHAIN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_SIMPLE_CHAIN = extern struct {
    cbSize: u32,
    TrustStatus: CERT_TRUST_STATUS,
    cElement: u32,
    rgpElement: ?*?*CERT_CHAIN_ELEMENT,
    pTrustListInfo: ?*CERT_TRUST_LIST_INFO,
    fHasRevocationFreshnessTime: BOOL,
    dwRevocationFreshnessTime: u32,
};
// --------------------------------------------------------
// Type: CERT_CHAIN_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_CHAIN_CONTEXT = extern struct {
    cbSize: u32,
    TrustStatus: CERT_TRUST_STATUS,
    cChain: u32,
    rgpChain: ?*?*CERT_SIMPLE_CHAIN,
    cLowerQualityChainContext: u32,
    rgpLowerQualityChainContext: ?*?*CERT_CHAIN_CONTEXT,
    fHasRevocationFreshnessTime: BOOL,
    dwRevocationFreshnessTime: u32,
    dwCreateFlags: u32,
    ChainId: Guid,
};
// --------------------------------------------------------
// Type: CERT_USAGE_MATCH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_USAGE_MATCH = extern struct {
    dwType: u32,
    Usage: CTL_USAGE,
};
// --------------------------------------------------------
// Type: CTL_USAGE_MATCH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CTL_USAGE_MATCH = extern struct {
    dwType: u32,
    Usage: CTL_USAGE,
};
// --------------------------------------------------------
// Type: CERT_CHAIN_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_CHAIN_PARA = extern struct {
    cbSize: u32,
    RequestedUsage: CERT_USAGE_MATCH,
};
// --------------------------------------------------------
// Type: CERT_REVOCATION_CHAIN_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_REVOCATION_CHAIN_PARA = extern struct {
    cbSize: u32,
    hChainEngine: HCERTCHAINENGINE,
    hAdditionalStore: ?*opaque{},
    dwChainFlags: u32,
    dwUrlRetrievalTimeout: u32,
    pftCurrentTime: ?*FILETIME,
    pftCacheResync: ?*FILETIME,
    cbMaxUrlRetrievalByteCount: u32,
};
// --------------------------------------------------------
// Type: CRL_REVOCATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRL_REVOCATION_INFO = extern struct {
    pCrlEntry: ?*CRL_ENTRY,
    pCrlContext: ?*CRL_CONTEXT,
    pCrlIssuerChain: ?*CERT_CHAIN_CONTEXT,
};
// --------------------------------------------------------
// Type: PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CERT_CHAIN_FIND_BY_ISSUER_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_CHAIN_FIND_BY_ISSUER_PARA = extern struct {
    cbSize: u32,
    pszUsageIdentifier: ?*i8,
    dwKeySpec: u32,
    dwAcquirePrivateKeyFlags: u32,
    cIssuer: u32,
    rgIssuer: ?*CRYPTOAPI_BLOB,
    pfnFindCallback: PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK,
    pvFindArg: ?*opaque{},
};
// --------------------------------------------------------
// Type: CERT_CHAIN_POLICY_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_CHAIN_POLICY_PARA = extern struct {
    cbSize: u32,
    dwFlags: u32,
    pvExtraPolicyPara: ?*opaque{},
};
// --------------------------------------------------------
// Type: CERT_CHAIN_POLICY_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_CHAIN_POLICY_STATUS = extern struct {
    cbSize: u32,
    dwError: u32,
    lChainIndex: i32,
    lElementIndex: i32,
    pvExtraPolicyStatus: ?*opaque{},
};
// --------------------------------------------------------
// Type: AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA = extern struct {
    cbSize: u32,
    dwRegPolicySettings: u32,
    pSignerInfo: ?*CMSG_SIGNER_INFO,
};
// --------------------------------------------------------
// Type: AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS = extern struct {
    cbSize: u32,
    fCommercial: BOOL,
};
// --------------------------------------------------------
// Type: AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA = extern struct {
    cbSize: u32,
    dwRegPolicySettings: u32,
    fCommercial: BOOL,
};
// --------------------------------------------------------
// Type: HTTPSPolicyCallbackData
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HTTPSPolicyCallbackData = extern struct {
    Anonymous: _Anonymous_e__Union,
    dwAuthType: u32,
    fdwChecks: u32,
    pwszServerName: ?*u16,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: EV_EXTRA_CERT_CHAIN_POLICY_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EV_EXTRA_CERT_CHAIN_POLICY_PARA = extern struct {
    cbSize: u32,
    dwRootProgramQualifierFlags: u32,
};
// --------------------------------------------------------
// Type: EV_EXTRA_CERT_CHAIN_POLICY_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EV_EXTRA_CERT_CHAIN_POLICY_STATUS = extern struct {
    cbSize: u32,
    dwQualifiers: u32,
    dwIssuanceUsageIndex: u32,
};
// --------------------------------------------------------
// Type: SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS = extern struct {
    cbSize: u32,
    dwErrorLevel: u32,
    dwErrorCategory: u32,
    dwReserved: u32,
    wszErrorText: ?[*]u16,
};
// --------------------------------------------------------
// Type: SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA = extern struct {
    cbSize: u32,
    dwReserved: u32,
    pwszServerName: ?*u16,
    rgpszHpkpValue: ?[*]?*i8,
};
// --------------------------------------------------------
// Type: SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA = extern struct {
    cbSize: u32,
    dwReserved: u32,
    pwszServerName: ?*u16,
};
// --------------------------------------------------------
// Type: SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS = extern struct {
    cbSize: u32,
    lError: i32,
    wszErrorText: ?[*]u16,
};
// --------------------------------------------------------
// Type: CRYPT_PKCS12_PBE_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PKCS12_PBE_PARAMS = extern struct {
    iIterations: i32,
    cbSalt: u32,
};
// --------------------------------------------------------
// Type: PKCS12_PBES2_EXPORT_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PKCS12_PBES2_EXPORT_PARAMS = extern struct {
    dwSize: u32,
    hNcryptDescriptor: ?*opaque{},
    pwszPbes2Alg: ?*u16,
};
// --------------------------------------------------------
// Type: CERT_SERVER_OCSP_RESPONSE_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_SERVER_OCSP_RESPONSE_CONTEXT = extern struct {
    cbSize: u32,
    pbEncodedOcspResponse: ?*u8,
    cbEncodedOcspResponse: u32,
};
// --------------------------------------------------------
// Type: PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CERT_SERVER_OCSP_RESPONSE_OPEN_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_SERVER_OCSP_RESPONSE_OPEN_PARA = extern struct {
    cbSize: u32,
    dwFlags: u32,
    pcbUsedSize: ?*u32,
    pwszOcspDirectory: ?*u16,
    pfnUpdateCallback: PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK,
    pvUpdateCallbackArg: ?*opaque{},
};
// --------------------------------------------------------
// Type: CERT_SELECT_CHAIN_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_SELECT_CHAIN_PARA = extern struct {
    hChainEngine: HCERTCHAINENGINE,
    pTime: ?*FILETIME,
    hAdditionalStore: ?*opaque{},
    pChainPara: ?*CERT_CHAIN_PARA,
    dwFlags: u32,
};
// --------------------------------------------------------
// Type: CERT_SELECT_CRITERIA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_SELECT_CRITERIA = extern struct {
    dwType: u32,
    cPara: u32,
    ppPara: ?*?*opaque{},
};
// --------------------------------------------------------
// Type: CRYPT_TIMESTAMP_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_TIMESTAMP_REQUEST = extern struct {
    dwVersion: u32,
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    HashedMessage: CRYPTOAPI_BLOB,
    pszTSAPolicyId: ?*i8,
    Nonce: CRYPTOAPI_BLOB,
    fCertReq: BOOL,
    cExtension: u32,
    rgExtension: ?*CERT_EXTENSION,
};
// --------------------------------------------------------
// Type: CRYPT_TIMESTAMP_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_TIMESTAMP_RESPONSE = extern struct {
    dwStatus: u32,
    cFreeText: u32,
    rgFreeText: ?*?*u16,
    FailureInfo: CRYPT_BIT_BLOB,
    ContentInfo: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_TIMESTAMP_ACCURACY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_TIMESTAMP_ACCURACY = extern struct {
    dwSeconds: u32,
    dwMillis: u32,
    dwMicros: u32,
};
// --------------------------------------------------------
// Type: CRYPT_TIMESTAMP_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_TIMESTAMP_INFO = extern struct {
    dwVersion: u32,
    pszTSAPolicyId: ?*i8,
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    HashedMessage: CRYPTOAPI_BLOB,
    SerialNumber: CRYPTOAPI_BLOB,
    ftTime: FILETIME,
    pvAccuracy: ?*CRYPT_TIMESTAMP_ACCURACY,
    fOrdering: BOOL,
    Nonce: CRYPTOAPI_BLOB,
    Tsa: CRYPTOAPI_BLOB,
    cExtension: u32,
    rgExtension: ?*CERT_EXTENSION,
};
// --------------------------------------------------------
// Type: CRYPT_TIMESTAMP_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_TIMESTAMP_CONTEXT = extern struct {
    cbEncoded: u32,
    pbEncoded: ?*u8,
    pTimeStamp: ?*CRYPT_TIMESTAMP_INFO,
};
// --------------------------------------------------------
// Type: CRYPT_TIMESTAMP_PARA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_TIMESTAMP_PARA = extern struct {
    pszTSAPolicyId: ?*i8,
    fRequestCerts: BOOL,
    Nonce: CRYPTOAPI_BLOB,
    cExtension: u32,
    rgExtension: ?*CERT_EXTENSION,
};
// --------------------------------------------------------
// Type: PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE = extern struct {
    cbSize: u32,
    pfnGet: PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET,
    pfnRelease: PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE,
    pfnFreePassword: PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD,
    pfnFree: PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE,
    pfnFreeIdentifier: PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER,
};
// --------------------------------------------------------
// Type: PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CERT_IS_WEAK_HASH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CERT_IS_WEAK_HASH = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPTPROTECT_PROMPTSTRUCT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTPROTECT_PROMPTSTRUCT = extern struct {
    cbSize: u32,
    dwPromptFlags: u32,
    hwndApp: HWND,
    szPrompt: ?*u16,
};
// --------------------------------------------------------
// Type: SCARD_READERSTATEA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCARD_READERSTATEA = extern struct {
    szReader: ?*i8,
    pvUserData: ?*opaque{},
    dwCurrentState: u32,
    dwEventState: u32,
    cbAtr: u32,
    rgbAtr: ?[*]u8,
};
// --------------------------------------------------------
// Type: SCARD_READERSTATEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCARD_READERSTATEW = extern struct {
    szReader: ?*u16,
    pvUserData: ?*opaque{},
    dwCurrentState: u32,
    dwEventState: u32,
    cbAtr: u32,
    rgbAtr: ?[*]u8,
};
// --------------------------------------------------------
// Type: SCARD_ATRMASK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCARD_ATRMASK = extern struct {
    cbAtr: u32,
    rgbAtr: ?[*]u8,
    rgbMask: ?[*]u8,
};
// --------------------------------------------------------
// Type: LPOCNCONNPROCA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPOCNCONNPROCA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPOCNCONNPROCW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPOCNCONNPROCW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPOCNCHKPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPOCNCHKPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPOCNDSCPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPOCNDSCPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: OPENCARD_SEARCH_CRITERIAA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OPENCARD_SEARCH_CRITERIAA = extern struct {
    dwStructSize: u32,
    lpstrGroupNames: ?*i8,
    nMaxGroupNames: u32,
    rgguidInterfaces: ?*Guid,
    cguidInterfaces: u32,
    lpstrCardNames: ?*i8,
    nMaxCardNames: u32,
    lpfnCheck: LPOCNCHKPROC,
    lpfnConnect: LPOCNCONNPROCA,
    lpfnDisconnect: LPOCNDSCPROC,
    pvUserData: ?*opaque{},
    dwShareMode: u32,
    dwPreferredProtocols: u32,
};
// --------------------------------------------------------
// Type: OPENCARD_SEARCH_CRITERIAW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OPENCARD_SEARCH_CRITERIAW = extern struct {
    dwStructSize: u32,
    lpstrGroupNames: ?*u16,
    nMaxGroupNames: u32,
    rgguidInterfaces: ?*Guid,
    cguidInterfaces: u32,
    lpstrCardNames: ?*u16,
    nMaxCardNames: u32,
    lpfnCheck: LPOCNCHKPROC,
    lpfnConnect: LPOCNCONNPROCW,
    lpfnDisconnect: LPOCNDSCPROC,
    pvUserData: ?*opaque{},
    dwShareMode: u32,
    dwPreferredProtocols: u32,
};
// --------------------------------------------------------
// Type: OPENCARDNAME_EXA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OPENCARDNAME_EXA = extern struct {
    dwStructSize: u32,
    hSCardContext: ?*opaque{},
    hwndOwner: HWND,
    dwFlags: u32,
    lpstrTitle: ?*i8,
    lpstrSearchDesc: ?*i8,
    hIcon: HICON,
    pOpenCardSearchCriteria: ?*OPENCARD_SEARCH_CRITERIAA,
    lpfnConnect: LPOCNCONNPROCA,
    pvUserData: ?*opaque{},
    dwShareMode: u32,
    dwPreferredProtocols: u32,
    lpstrRdr: ?*i8,
    nMaxRdr: u32,
    lpstrCard: ?*i8,
    nMaxCard: u32,
    dwActiveProtocol: u32,
    hCardHandle: ?*opaque{},
};
// --------------------------------------------------------
// Type: OPENCARDNAME_EXW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OPENCARDNAME_EXW = extern struct {
    dwStructSize: u32,
    hSCardContext: ?*opaque{},
    hwndOwner: HWND,
    dwFlags: u32,
    lpstrTitle: ?*u16,
    lpstrSearchDesc: ?*u16,
    hIcon: HICON,
    pOpenCardSearchCriteria: ?*OPENCARD_SEARCH_CRITERIAW,
    lpfnConnect: LPOCNCONNPROCW,
    pvUserData: ?*opaque{},
    dwShareMode: u32,
    dwPreferredProtocols: u32,
    lpstrRdr: ?*u16,
    nMaxRdr: u32,
    lpstrCard: ?*u16,
    nMaxCard: u32,
    dwActiveProtocol: u32,
    hCardHandle: ?*opaque{},
};
// --------------------------------------------------------
// Type: READER_SEL_REQUEST_MATCH_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const READER_SEL_REQUEST_MATCH_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: READER_SEL_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const READER_SEL_REQUEST = extern struct {
    dwShareMode: u32,
    dwPreferredProtocols: u32,
    MatchType: READER_SEL_REQUEST_MATCH_TYPE,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _SerialNumberParameter_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _SerialNumberParameter_e__Struct = extern struct {
            cbSerialNumberOffset: u32,
            cbSerialNumberLength: u32,
            dwDesiredCardModuleVersion: u32,
        };
        // --------------------------------------------------------
        // Type: _ReaderAndContainerParameter_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _ReaderAndContainerParameter_e__Struct = extern struct {
            cbReaderNameOffset: u32,
            cchReaderNameLength: u32,
            cbContainerNameOffset: u32,
            cchContainerNameLength: u32,
            dwDesiredCardModuleVersion: u32,
            dwCspFlags: u32,
        };
    };
};
// --------------------------------------------------------
// Type: READER_SEL_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const READER_SEL_RESPONSE = extern struct {
    cbReaderNameOffset: u32,
    cchReaderNameLength: u32,
    cbCardNameOffset: u32,
    cchCardNameLength: u32,
};
// --------------------------------------------------------
// Type: OPENCARDNAMEA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OPENCARDNAMEA = extern struct {
    dwStructSize: u32,
    hwndOwner: HWND,
    hSCardContext: ?*opaque{},
    lpstrGroupNames: ?*i8,
    nMaxGroupNames: u32,
    lpstrCardNames: ?*i8,
    nMaxCardNames: u32,
    rgguidInterfaces: ?*Guid,
    cguidInterfaces: u32,
    lpstrRdr: ?*i8,
    nMaxRdr: u32,
    lpstrCard: ?*i8,
    nMaxCard: u32,
    lpstrTitle: ?*i8,
    dwFlags: u32,
    pvUserData: ?*opaque{},
    dwShareMode: u32,
    dwPreferredProtocols: u32,
    dwActiveProtocol: u32,
    lpfnConnect: LPOCNCONNPROCA,
    lpfnCheck: LPOCNCHKPROC,
    lpfnDisconnect: LPOCNDSCPROC,
    hCardHandle: ?*opaque{},
};
// --------------------------------------------------------
// Type: OPENCARDNAMEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OPENCARDNAMEW = extern struct {
    dwStructSize: u32,
    hwndOwner: HWND,
    hSCardContext: ?*opaque{},
    lpstrGroupNames: ?*u16,
    nMaxGroupNames: u32,
    lpstrCardNames: ?*u16,
    nMaxCardNames: u32,
    rgguidInterfaces: ?*Guid,
    cguidInterfaces: u32,
    lpstrRdr: ?*u16,
    nMaxRdr: u32,
    lpstrCard: ?*u16,
    nMaxCard: u32,
    lpstrTitle: ?*u16,
    dwFlags: u32,
    pvUserData: ?*opaque{},
    dwShareMode: u32,
    dwPreferredProtocols: u32,
    dwActiveProtocol: u32,
    lpfnConnect: LPOCNCONNPROCW,
    lpfnCheck: LPOCNCHKPROC,
    lpfnDisconnect: LPOCNDSCPROC,
    hCardHandle: ?*opaque{},
};
// --------------------------------------------------------
// Type: SERVICE_TRIGGER_CUSTOM_STATE_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_TRIGGER_CUSTOM_STATE_ID = extern struct {
    Data: ?[*]u32,
};
// --------------------------------------------------------
// Type: SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM = extern struct {
    u: _u_e__Union,
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _s_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _s_e__Struct = extern struct {
            DataOffset: u32,
            Data: ?[*]u8,
        };
    };
};
// --------------------------------------------------------
// Type: SERVICE_DESCRIPTIONA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_DESCRIPTIONA = extern struct {
    lpDescription: ?*i8,
};
// --------------------------------------------------------
// Type: SERVICE_DESCRIPTIONW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_DESCRIPTIONW = extern struct {
    lpDescription: ?*u16,
};
// --------------------------------------------------------
// Type: SC_ACTION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SC_ACTION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SC_ACTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SC_ACTION = extern struct {
    Type: SC_ACTION_TYPE,
    Delay: u32,
};
// --------------------------------------------------------
// Type: SERVICE_FAILURE_ACTIONSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_FAILURE_ACTIONSA = extern struct {
    dwResetPeriod: u32,
    lpRebootMsg: ?*i8,
    lpCommand: ?*i8,
    cActions: u32,
    lpsaActions: ?*SC_ACTION,
};
// --------------------------------------------------------
// Type: SERVICE_FAILURE_ACTIONSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_FAILURE_ACTIONSW = extern struct {
    dwResetPeriod: u32,
    lpRebootMsg: ?*u16,
    lpCommand: ?*u16,
    cActions: u32,
    lpsaActions: ?*SC_ACTION,
};
// --------------------------------------------------------
// Type: SERVICE_DELAYED_AUTO_START_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_DELAYED_AUTO_START_INFO = extern struct {
    fDelayedAutostart: BOOL,
};
// --------------------------------------------------------
// Type: SERVICE_FAILURE_ACTIONS_FLAG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_FAILURE_ACTIONS_FLAG = extern struct {
    fFailureActionsOnNonCrashFailures: BOOL,
};
// --------------------------------------------------------
// Type: SERVICE_SID_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_SID_INFO = extern struct {
    dwServiceSidType: u32,
};
// --------------------------------------------------------
// Type: SERVICE_REQUIRED_PRIVILEGES_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_REQUIRED_PRIVILEGES_INFOA = extern struct {
    pmszRequiredPrivileges: ?*i8,
};
// --------------------------------------------------------
// Type: SERVICE_REQUIRED_PRIVILEGES_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_REQUIRED_PRIVILEGES_INFOW = extern struct {
    pmszRequiredPrivileges: ?*u16,
};
// --------------------------------------------------------
// Type: SERVICE_PRESHUTDOWN_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_PRESHUTDOWN_INFO = extern struct {
    dwPreshutdownTimeout: u32,
};
// --------------------------------------------------------
// Type: SERVICE_TRIGGER_SPECIFIC_DATA_ITEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_TRIGGER_SPECIFIC_DATA_ITEM = extern struct {
    dwDataType: u32,
    cbData: u32,
    pData: ?*u8,
};
// --------------------------------------------------------
// Type: SERVICE_TRIGGER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_TRIGGER = extern struct {
    dwTriggerType: u32,
    dwAction: u32,
    pTriggerSubtype: ?*Guid,
    cDataItems: u32,
    pDataItems: ?*SERVICE_TRIGGER_SPECIFIC_DATA_ITEM,
};
// --------------------------------------------------------
// Type: SERVICE_TRIGGER_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_TRIGGER_INFO = extern struct {
    cTriggers: u32,
    pTriggers: ?*SERVICE_TRIGGER,
    pReserved: ?*u8,
};
// --------------------------------------------------------
// Type: SERVICE_PREFERRED_NODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_PREFERRED_NODE_INFO = extern struct {
    usPreferredNode: u16,
    fDelete: u8,
};
// --------------------------------------------------------
// Type: SERVICE_TIMECHANGE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_TIMECHANGE_INFO = extern struct {
    liNewTime: LARGE_INTEGER,
    liOldTime: LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: SERVICE_LAUNCH_PROTECTED_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_LAUNCH_PROTECTED_INFO = extern struct {
    dwLaunchProtected: u32,
};
// --------------------------------------------------------
// Type: SC_HANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SC_HANDLE__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: SERVICE_STATUS_HANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_STATUS_HANDLE__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: SC_STATUS_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SC_STATUS_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SC_ENUM_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SC_ENUM_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SERVICE_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_STATUS = extern struct {
    dwServiceType: u32,
    dwCurrentState: u32,
    dwControlsAccepted: u32,
    dwWin32ExitCode: u32,
    dwServiceSpecificExitCode: u32,
    dwCheckPoint: u32,
    dwWaitHint: u32,
};
// --------------------------------------------------------
// Type: SERVICE_STATUS_PROCESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_STATUS_PROCESS = extern struct {
    dwServiceType: u32,
    dwCurrentState: u32,
    dwControlsAccepted: u32,
    dwWin32ExitCode: u32,
    dwServiceSpecificExitCode: u32,
    dwCheckPoint: u32,
    dwWaitHint: u32,
    dwProcessId: u32,
    dwServiceFlags: u32,
};
// --------------------------------------------------------
// Type: ENUM_SERVICE_STATUSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENUM_SERVICE_STATUSA = extern struct {
    lpServiceName: ?*i8,
    lpDisplayName: ?*i8,
    ServiceStatus: SERVICE_STATUS,
};
// --------------------------------------------------------
// Type: ENUM_SERVICE_STATUSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENUM_SERVICE_STATUSW = extern struct {
    lpServiceName: ?*u16,
    lpDisplayName: ?*u16,
    ServiceStatus: SERVICE_STATUS,
};
// --------------------------------------------------------
// Type: ENUM_SERVICE_STATUS_PROCESSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENUM_SERVICE_STATUS_PROCESSA = extern struct {
    lpServiceName: ?*i8,
    lpDisplayName: ?*i8,
    ServiceStatusProcess: SERVICE_STATUS_PROCESS,
};
// --------------------------------------------------------
// Type: ENUM_SERVICE_STATUS_PROCESSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENUM_SERVICE_STATUS_PROCESSW = extern struct {
    lpServiceName: ?*u16,
    lpDisplayName: ?*u16,
    ServiceStatusProcess: SERVICE_STATUS_PROCESS,
};
// --------------------------------------------------------
// Type: QUERY_SERVICE_LOCK_STATUSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QUERY_SERVICE_LOCK_STATUSA = extern struct {
    fIsLocked: u32,
    lpLockOwner: ?*i8,
    dwLockDuration: u32,
};
// --------------------------------------------------------
// Type: QUERY_SERVICE_LOCK_STATUSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QUERY_SERVICE_LOCK_STATUSW = extern struct {
    fIsLocked: u32,
    lpLockOwner: ?*u16,
    dwLockDuration: u32,
};
// --------------------------------------------------------
// Type: QUERY_SERVICE_CONFIGA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QUERY_SERVICE_CONFIGA = extern struct {
    dwServiceType: u32,
    dwStartType: u32,
    dwErrorControl: u32,
    lpBinaryPathName: ?*i8,
    lpLoadOrderGroup: ?*i8,
    dwTagId: u32,
    lpDependencies: ?*i8,
    lpServiceStartName: ?*i8,
    lpDisplayName: ?*i8,
};
// --------------------------------------------------------
// Type: QUERY_SERVICE_CONFIGW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QUERY_SERVICE_CONFIGW = extern struct {
    dwServiceType: u32,
    dwStartType: u32,
    dwErrorControl: u32,
    lpBinaryPathName: ?*u16,
    lpLoadOrderGroup: ?*u16,
    dwTagId: u32,
    lpDependencies: ?*u16,
    lpServiceStartName: ?*u16,
    lpDisplayName: ?*u16,
};
// --------------------------------------------------------
// Type: SERVICE_MAIN_FUNCTIONW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SERVICE_MAIN_FUNCTIONW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SERVICE_MAIN_FUNCTIONA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SERVICE_MAIN_FUNCTIONA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPSERVICE_MAIN_FUNCTIONW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPSERVICE_MAIN_FUNCTIONW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPSERVICE_MAIN_FUNCTIONA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPSERVICE_MAIN_FUNCTIONA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SERVICE_TABLE_ENTRYA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_TABLE_ENTRYA = extern struct {
    lpServiceName: ?*i8,
    lpServiceProc: LPSERVICE_MAIN_FUNCTIONA,
};
// --------------------------------------------------------
// Type: SERVICE_TABLE_ENTRYW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_TABLE_ENTRYW = extern struct {
    lpServiceName: ?*u16,
    lpServiceProc: LPSERVICE_MAIN_FUNCTIONW,
};
// --------------------------------------------------------
// Type: HANDLER_FUNCTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HANDLER_FUNCTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: HANDLER_FUNCTION_EX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HANDLER_FUNCTION_EX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPHANDLER_FUNCTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPHANDLER_FUNCTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPHANDLER_FUNCTION_EX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPHANDLER_FUNCTION_EX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_SC_NOTIFY_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_SC_NOTIFY_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SERVICE_NOTIFY_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_NOTIFY_1 = extern struct {
    dwVersion: u32,
    pfnNotifyCallback: PFN_SC_NOTIFY_CALLBACK,
    pContext: ?*opaque{},
    dwNotificationStatus: u32,
    ServiceStatus: SERVICE_STATUS_PROCESS,
};
// --------------------------------------------------------
// Type: SERVICE_NOTIFY_2A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_NOTIFY_2A = extern struct {
    dwVersion: u32,
    pfnNotifyCallback: PFN_SC_NOTIFY_CALLBACK,
    pContext: ?*opaque{},
    dwNotificationStatus: u32,
    ServiceStatus: SERVICE_STATUS_PROCESS,
    dwNotificationTriggered: u32,
    pszServiceNames: ?*i8,
};
// --------------------------------------------------------
// Type: SERVICE_NOTIFY_2W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_NOTIFY_2W = extern struct {
    dwVersion: u32,
    pfnNotifyCallback: PFN_SC_NOTIFY_CALLBACK,
    pContext: ?*opaque{},
    dwNotificationStatus: u32,
    ServiceStatus: SERVICE_STATUS_PROCESS,
    dwNotificationTriggered: u32,
    pszServiceNames: ?*u16,
};
// --------------------------------------------------------
// Type: SERVICE_CONTROL_STATUS_REASON_PARAMSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_CONTROL_STATUS_REASON_PARAMSA = extern struct {
    dwReason: u32,
    pszComment: ?*i8,
    ServiceStatus: SERVICE_STATUS_PROCESS,
};
// --------------------------------------------------------
// Type: SERVICE_CONTROL_STATUS_REASON_PARAMSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_CONTROL_STATUS_REASON_PARAMSW = extern struct {
    dwReason: u32,
    pszComment: ?*u16,
    ServiceStatus: SERVICE_STATUS_PROCESS,
};
// --------------------------------------------------------
// Type: SERVICE_START_REASON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_START_REASON = extern struct {
    dwReason: u32,
};
// --------------------------------------------------------
// Type: SC_EVENT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SC_EVENT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SC_NOTIFICATION_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SC_NOTIFICATION_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PSC_NOTIFICATION_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PSC_NOTIFICATION_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: _SC_NOTIFICATION_REGISTRATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _SC_NOTIFICATION_REGISTRATION = opaque {
};
// --------------------------------------------------------
// Type: SERVICE_REGISTRY_STATE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SERVICE_REGISTRY_STATE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SERVICE_DIRECTORY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SERVICE_DIRECTORY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: LSA_TRUST_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_TRUST_INFORMATION = extern struct {
    Name: UNICODE_STRING,
    Sid: ?*opaque{},
};
// --------------------------------------------------------
// Type: LSA_REFERENCED_DOMAIN_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_REFERENCED_DOMAIN_LIST = extern struct {
    Entries: u32,
    Domains: ?*LSA_TRUST_INFORMATION,
};
// --------------------------------------------------------
// Type: LSA_TRANSLATED_SID2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_TRANSLATED_SID2 = extern struct {
    Use: SID_NAME_USE,
    Sid: ?*opaque{},
    DomainIndex: i32,
    Flags: u32,
};
// --------------------------------------------------------
// Type: LSA_TRANSLATED_NAME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_TRANSLATED_NAME = extern struct {
    Use: SID_NAME_USE,
    Name: UNICODE_STRING,
    DomainIndex: i32,
};
// --------------------------------------------------------
// Type: POLICY_ACCOUNT_DOMAIN_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_ACCOUNT_DOMAIN_INFO = extern struct {
    DomainName: UNICODE_STRING,
    DomainSid: ?*opaque{},
};
// --------------------------------------------------------
// Type: POLICY_DNS_DOMAIN_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_DNS_DOMAIN_INFO = extern struct {
    Name: UNICODE_STRING,
    DnsDomainName: UNICODE_STRING,
    DnsForestName: UNICODE_STRING,
    DomainGuid: Guid,
    Sid: ?*opaque{},
};
// --------------------------------------------------------
// Type: LSA_LOOKUP_DOMAIN_INFO_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_LOOKUP_DOMAIN_INFO_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: SECURITY_LOGON_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SECURITY_LOGON_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SE_ADT_PARAMETER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SE_ADT_PARAMETER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SE_ADT_OBJECT_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SE_ADT_OBJECT_TYPE = extern struct {
    ObjectType: Guid,
    Flags: u16,
    Level: u16,
    AccessMask: u32,
};
// --------------------------------------------------------
// Type: SE_ADT_PARAMETER_ARRAY_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SE_ADT_PARAMETER_ARRAY_ENTRY = extern struct {
    Type: SE_ADT_PARAMETER_TYPE,
    Length: u32,
    Data: ?[*]?*opaque{},
    Address: ?*opaque{},
};
// --------------------------------------------------------
// Type: SE_ADT_ACCESS_REASON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SE_ADT_ACCESS_REASON = extern struct {
    AccessMask: u32,
    AccessReasons: ?[*]u32,
    ObjectTypeIndex: u32,
    AccessGranted: u32,
    SecurityDescriptor: ?*opaque{},
};
// --------------------------------------------------------
// Type: SE_ADT_CLAIMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SE_ADT_CLAIMS = extern struct {
    Length: u32,
    Claims: ?*opaque{},
};
// --------------------------------------------------------
// Type: SE_ADT_PARAMETER_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SE_ADT_PARAMETER_ARRAY = extern struct {
    CategoryId: u32,
    AuditId: u32,
    ParameterCount: u32,
    Length: u32,
    FlatSubCategoryId: u16,
    Type: u16,
    Flags: u32,
    Parameters: ?[*]SE_ADT_PARAMETER_ARRAY_ENTRY,
};
// --------------------------------------------------------
// Type: SE_ADT_PARAMETER_ARRAY_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SE_ADT_PARAMETER_ARRAY_EX = extern struct {
    CategoryId: u32,
    AuditId: u32,
    Version: u32,
    ParameterCount: u32,
    Length: u32,
    FlatSubCategoryId: u16,
    Type: u16,
    Flags: u32,
    Parameters: ?[*]SE_ADT_PARAMETER_ARRAY_ENTRY,
};
// --------------------------------------------------------
// Type: POLICY_AUDIT_EVENT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const POLICY_AUDIT_EVENT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: LSA_TRANSLATED_SID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_TRANSLATED_SID = extern struct {
    Use: SID_NAME_USE,
    RelativeId: u32,
    DomainIndex: i32,
};
// --------------------------------------------------------
// Type: POLICY_LSA_SERVER_ROLE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const POLICY_LSA_SERVER_ROLE = *opaque{
};
// --------------------------------------------------------
// Type: POLICY_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const POLICY_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: POLICY_AUDIT_LOG_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_AUDIT_LOG_INFO = extern struct {
    AuditLogPercentFull: u32,
    MaximumLogSize: u32,
    AuditRetentionPeriod: LARGE_INTEGER,
    AuditLogFullShutdownInProgress: u8,
    TimeToShutdown: LARGE_INTEGER,
    NextAuditRecordId: u32,
};
// --------------------------------------------------------
// Type: POLICY_AUDIT_EVENTS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_AUDIT_EVENTS_INFO = extern struct {
    AuditingMode: u8,
    EventAuditingOptions: ?*u32,
    MaximumAuditEventCount: u32,
};
// --------------------------------------------------------
// Type: POLICY_AUDIT_SUBCATEGORIES_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_AUDIT_SUBCATEGORIES_INFO = extern struct {
    MaximumSubCategoryCount: u32,
    EventAuditingOptions: ?*u32,
};
// --------------------------------------------------------
// Type: POLICY_AUDIT_CATEGORIES_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_AUDIT_CATEGORIES_INFO = extern struct {
    MaximumCategoryCount: u32,
    SubCategoriesInfo: ?*POLICY_AUDIT_SUBCATEGORIES_INFO,
};
// --------------------------------------------------------
// Type: POLICY_PRIMARY_DOMAIN_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_PRIMARY_DOMAIN_INFO = extern struct {
    Name: UNICODE_STRING,
    Sid: ?*opaque{},
};
// --------------------------------------------------------
// Type: POLICY_PD_ACCOUNT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_PD_ACCOUNT_INFO = extern struct {
    Name: UNICODE_STRING,
};
// --------------------------------------------------------
// Type: POLICY_LSA_SERVER_ROLE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_LSA_SERVER_ROLE_INFO = extern struct {
    LsaServerRole: POLICY_LSA_SERVER_ROLE,
};
// --------------------------------------------------------
// Type: POLICY_REPLICA_SOURCE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_REPLICA_SOURCE_INFO = extern struct {
    ReplicaSource: UNICODE_STRING,
    ReplicaAccountName: UNICODE_STRING,
};
// --------------------------------------------------------
// Type: POLICY_DEFAULT_QUOTA_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_DEFAULT_QUOTA_INFO = extern struct {
    QuotaLimits: QUOTA_LIMITS,
};
// --------------------------------------------------------
// Type: POLICY_MODIFICATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_MODIFICATION_INFO = extern struct {
    ModifiedId: LARGE_INTEGER,
    DatabaseCreationTime: LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: POLICY_AUDIT_FULL_SET_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_AUDIT_FULL_SET_INFO = extern struct {
    ShutDownOnFull: u8,
};
// --------------------------------------------------------
// Type: POLICY_AUDIT_FULL_QUERY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_AUDIT_FULL_QUERY_INFO = extern struct {
    ShutDownOnFull: u8,
    LogIsFull: u8,
};
// --------------------------------------------------------
// Type: POLICY_DOMAIN_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const POLICY_DOMAIN_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: POLICY_DOMAIN_EFS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_DOMAIN_EFS_INFO = extern struct {
    InfoLength: u32,
    EfsBlob: ?*u8,
};
// --------------------------------------------------------
// Type: POLICY_DOMAIN_KERBEROS_TICKET_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_DOMAIN_KERBEROS_TICKET_INFO = extern struct {
    AuthenticationOptions: u32,
    MaxServiceTicketAge: LARGE_INTEGER,
    MaxTicketAge: LARGE_INTEGER,
    MaxRenewAge: LARGE_INTEGER,
    MaxClockSkew: LARGE_INTEGER,
    Reserved: LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: POLICY_MACHINE_ACCT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_MACHINE_ACCT_INFO = extern struct {
    Rid: u32,
    Sid: ?*opaque{},
};
// --------------------------------------------------------
// Type: POLICY_NOTIFICATION_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const POLICY_NOTIFICATION_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: TRUSTED_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TRUSTED_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: TRUSTED_DOMAIN_NAME_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRUSTED_DOMAIN_NAME_INFO = extern struct {
    Name: UNICODE_STRING,
};
// --------------------------------------------------------
// Type: TRUSTED_CONTROLLERS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRUSTED_CONTROLLERS_INFO = extern struct {
    Entries: u32,
    Names: ?*UNICODE_STRING,
};
// --------------------------------------------------------
// Type: TRUSTED_POSIX_OFFSET_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRUSTED_POSIX_OFFSET_INFO = extern struct {
    Offset: u32,
};
// --------------------------------------------------------
// Type: TRUSTED_PASSWORD_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRUSTED_PASSWORD_INFO = extern struct {
    Password: UNICODE_STRING,
    OldPassword: UNICODE_STRING,
};
// --------------------------------------------------------
// Type: TRUSTED_DOMAIN_INFORMATION_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRUSTED_DOMAIN_INFORMATION_EX = extern struct {
    Name: UNICODE_STRING,
    FlatName: UNICODE_STRING,
    Sid: ?*opaque{},
    TrustDirection: u32,
    TrustType: u32,
    TrustAttributes: u32,
};
// --------------------------------------------------------
// Type: TRUSTED_DOMAIN_INFORMATION_EX2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRUSTED_DOMAIN_INFORMATION_EX2 = extern struct {
    Name: UNICODE_STRING,
    FlatName: UNICODE_STRING,
    Sid: ?*opaque{},
    TrustDirection: u32,
    TrustType: u32,
    TrustAttributes: u32,
    ForestTrustLength: u32,
    ForestTrustInfo: ?*u8,
};
// --------------------------------------------------------
// Type: LSA_AUTH_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_AUTH_INFORMATION = extern struct {
    LastUpdateTime: LARGE_INTEGER,
    AuthType: u32,
    AuthInfoLength: u32,
    AuthInfo: ?*u8,
};
// --------------------------------------------------------
// Type: TRUSTED_DOMAIN_AUTH_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRUSTED_DOMAIN_AUTH_INFORMATION = extern struct {
    IncomingAuthInfos: u32,
    IncomingAuthenticationInformation: ?*LSA_AUTH_INFORMATION,
    IncomingPreviousAuthenticationInformation: ?*LSA_AUTH_INFORMATION,
    OutgoingAuthInfos: u32,
    OutgoingAuthenticationInformation: ?*LSA_AUTH_INFORMATION,
    OutgoingPreviousAuthenticationInformation: ?*LSA_AUTH_INFORMATION,
};
// --------------------------------------------------------
// Type: TRUSTED_DOMAIN_FULL_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRUSTED_DOMAIN_FULL_INFORMATION = extern struct {
    Information: TRUSTED_DOMAIN_INFORMATION_EX,
    PosixOffset: TRUSTED_POSIX_OFFSET_INFO,
    AuthInformation: TRUSTED_DOMAIN_AUTH_INFORMATION,
};
// --------------------------------------------------------
// Type: TRUSTED_DOMAIN_FULL_INFORMATION2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRUSTED_DOMAIN_FULL_INFORMATION2 = extern struct {
    Information: TRUSTED_DOMAIN_INFORMATION_EX2,
    PosixOffset: TRUSTED_POSIX_OFFSET_INFO,
    AuthInformation: TRUSTED_DOMAIN_AUTH_INFORMATION,
};
// --------------------------------------------------------
// Type: TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES = extern struct {
    SupportedEncryptionTypes: u32,
};
// --------------------------------------------------------
// Type: LSA_FOREST_TRUST_RECORD_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_FOREST_TRUST_RECORD_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: LSA_FOREST_TRUST_DOMAIN_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_FOREST_TRUST_DOMAIN_INFO = extern struct {
    Sid: ?*opaque{},
    DnsName: UNICODE_STRING,
    NetbiosName: UNICODE_STRING,
};
// --------------------------------------------------------
// Type: LSA_FOREST_TRUST_BINARY_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_FOREST_TRUST_BINARY_DATA = extern struct {
    Length: u32,
    Buffer: ?*u8,
};
// --------------------------------------------------------
// Type: LSA_FOREST_TRUST_RECORD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_FOREST_TRUST_RECORD = extern struct {
    Flags: u32,
    ForestTrustType: LSA_FOREST_TRUST_RECORD_TYPE,
    Time: LARGE_INTEGER,
    ForestTrustData: _ForestTrustData_e__Union,
    // --------------------------------------------------------
    // Type: _ForestTrustData_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _ForestTrustData_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: LSA_FOREST_TRUST_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_FOREST_TRUST_INFORMATION = extern struct {
    RecordCount: u32,
    Entries: ?*?*LSA_FOREST_TRUST_RECORD,
};
// --------------------------------------------------------
// Type: LSA_FOREST_TRUST_COLLISION_RECORD_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_FOREST_TRUST_COLLISION_RECORD_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: LSA_FOREST_TRUST_COLLISION_RECORD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_FOREST_TRUST_COLLISION_RECORD = extern struct {
    Index: u32,
    Type: LSA_FOREST_TRUST_COLLISION_RECORD_TYPE,
    Flags: u32,
    Name: UNICODE_STRING,
};
// --------------------------------------------------------
// Type: LSA_FOREST_TRUST_COLLISION_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_FOREST_TRUST_COLLISION_INFORMATION = extern struct {
    RecordCount: u32,
    Entries: ?*?*LSA_FOREST_TRUST_COLLISION_RECORD,
};
// --------------------------------------------------------
// Type: LSA_ENUMERATION_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_ENUMERATION_INFORMATION = extern struct {
    Sid: ?*opaque{},
};
// --------------------------------------------------------
// Type: LSA_LAST_INTER_LOGON_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_LAST_INTER_LOGON_INFO = extern struct {
    LastSuccessfulLogon: LARGE_INTEGER,
    LastFailedLogon: LARGE_INTEGER,
    FailedAttemptCountSinceLastSuccessfulLogon: u32,
};
// --------------------------------------------------------
// Type: SECURITY_LOGON_SESSION_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECURITY_LOGON_SESSION_DATA = extern struct {
    Size: u32,
    LogonId: LUID,
    UserName: UNICODE_STRING,
    LogonDomain: UNICODE_STRING,
    AuthenticationPackage: UNICODE_STRING,
    LogonType: u32,
    Session: u32,
    Sid: ?*opaque{},
    LogonTime: LARGE_INTEGER,
    LogonServer: UNICODE_STRING,
    DnsDomainName: UNICODE_STRING,
    Upn: UNICODE_STRING,
    UserFlags: u32,
    LastLogonInfo: LSA_LAST_INTER_LOGON_INFO,
    LogonScript: UNICODE_STRING,
    ProfilePath: UNICODE_STRING,
    HomeDirectory: UNICODE_STRING,
    HomeDirectoryDrive: UNICODE_STRING,
    LogoffTime: LARGE_INTEGER,
    KickOffTime: LARGE_INTEGER,
    PasswordLastSet: LARGE_INTEGER,
    PasswordCanChange: LARGE_INTEGER,
    PasswordMustChange: LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: CENTRAL_ACCESS_POLICY_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CENTRAL_ACCESS_POLICY_ENTRY = extern struct {
    Name: UNICODE_STRING,
    Description: UNICODE_STRING,
    ChangeId: UNICODE_STRING,
    LengthAppliesTo: u32,
    AppliesTo: ?*u8,
    LengthSD: u32,
    SD: ?*opaque{},
    LengthStagedSD: u32,
    StagedSD: ?*opaque{},
    Flags: u32,
};
// --------------------------------------------------------
// Type: CENTRAL_ACCESS_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CENTRAL_ACCESS_POLICY = extern struct {
    CAPID: ?*opaque{},
    Name: UNICODE_STRING,
    Description: UNICODE_STRING,
    ChangeId: UNICODE_STRING,
    Flags: u32,
    CAPECount: u32,
    CAPEs: ?*?*CENTRAL_ACCESS_POLICY_ENTRY,
};
// --------------------------------------------------------
// Type: NEGOTIATE_MESSAGES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NEGOTIATE_MESSAGES = *opaque{
};
// --------------------------------------------------------
// Type: NEGOTIATE_PACKAGE_PREFIX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NEGOTIATE_PACKAGE_PREFIX = extern struct {
    PackageId: ?*opaque{},
    PackageDataA: ?*opaque{},
    PackageDataW: ?*opaque{},
    PrefixLen: ?*opaque{},
    Prefix: ?[*]u8,
};
// --------------------------------------------------------
// Type: NEGOTIATE_PACKAGE_PREFIXES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NEGOTIATE_PACKAGE_PREFIXES = extern struct {
    MessageType: u32,
    PrefixCount: u32,
    Offset: u32,
    Pad: u32,
};
// --------------------------------------------------------
// Type: NEGOTIATE_CALLER_NAME_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NEGOTIATE_CALLER_NAME_REQUEST = extern struct {
    MessageType: u32,
    LogonId: LUID,
};
// --------------------------------------------------------
// Type: NEGOTIATE_CALLER_NAME_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NEGOTIATE_CALLER_NAME_RESPONSE = extern struct {
    MessageType: u32,
    CallerName: ?*u16,
};
// --------------------------------------------------------
// Type: DOMAIN_PASSWORD_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOMAIN_PASSWORD_INFORMATION = extern struct {
    MinPasswordLength: u16,
    PasswordHistoryLength: u16,
    PasswordProperties: u32,
    MaxPasswordAge: LARGE_INTEGER,
    MinPasswordAge: LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: PSAM_PASSWORD_NOTIFICATION_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PSAM_PASSWORD_NOTIFICATION_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PSAM_INIT_NOTIFICATION_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PSAM_INIT_NOTIFICATION_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PSAM_PASSWORD_FILTER_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PSAM_PASSWORD_FILTER_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: MSV1_0_LOGON_SUBMIT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSV1_0_LOGON_SUBMIT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: MSV1_0_PROFILE_BUFFER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSV1_0_PROFILE_BUFFER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: MSV1_0_INTERACTIVE_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_INTERACTIVE_LOGON = extern struct {
    MessageType: MSV1_0_LOGON_SUBMIT_TYPE,
    LogonDomainName: UNICODE_STRING,
    UserName: UNICODE_STRING,
    Password: UNICODE_STRING,
};
// --------------------------------------------------------
// Type: MSV1_0_INTERACTIVE_PROFILE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_INTERACTIVE_PROFILE = extern struct {
    MessageType: MSV1_0_PROFILE_BUFFER_TYPE,
    LogonCount: u16,
    BadPasswordCount: u16,
    LogonTime: LARGE_INTEGER,
    LogoffTime: LARGE_INTEGER,
    KickOffTime: LARGE_INTEGER,
    PasswordLastSet: LARGE_INTEGER,
    PasswordCanChange: LARGE_INTEGER,
    PasswordMustChange: LARGE_INTEGER,
    LogonScript: UNICODE_STRING,
    HomeDirectory: UNICODE_STRING,
    FullName: UNICODE_STRING,
    ProfilePath: UNICODE_STRING,
    HomeDirectoryDrive: UNICODE_STRING,
    LogonServer: UNICODE_STRING,
    UserFlags: u32,
};
// --------------------------------------------------------
// Type: MSV1_0_LM20_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_LM20_LOGON = extern struct {
    MessageType: MSV1_0_LOGON_SUBMIT_TYPE,
    LogonDomainName: UNICODE_STRING,
    UserName: UNICODE_STRING,
    Workstation: UNICODE_STRING,
    ChallengeToClient: ?[*]u8,
    CaseSensitiveChallengeResponse: STRING,
    CaseInsensitiveChallengeResponse: STRING,
    ParameterControl: u32,
};
// --------------------------------------------------------
// Type: MSV1_0_SUBAUTH_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_SUBAUTH_LOGON = extern struct {
    MessageType: MSV1_0_LOGON_SUBMIT_TYPE,
    LogonDomainName: UNICODE_STRING,
    UserName: UNICODE_STRING,
    Workstation: UNICODE_STRING,
    ChallengeToClient: ?[*]u8,
    AuthenticationInfo1: STRING,
    AuthenticationInfo2: STRING,
    ParameterControl: u32,
    SubAuthPackageId: u32,
};
// --------------------------------------------------------
// Type: MSV1_0_S4U_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_S4U_LOGON = extern struct {
    MessageType: MSV1_0_LOGON_SUBMIT_TYPE,
    Flags: u32,
    UserPrincipalName: UNICODE_STRING,
    DomainName: UNICODE_STRING,
};
// --------------------------------------------------------
// Type: MSV1_0_LM20_LOGON_PROFILE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_LM20_LOGON_PROFILE = extern struct {
    MessageType: MSV1_0_PROFILE_BUFFER_TYPE,
    KickOffTime: LARGE_INTEGER,
    LogoffTime: LARGE_INTEGER,
    UserFlags: u32,
    UserSessionKey: ?[*]u8,
    LogonDomainName: UNICODE_STRING,
    LanmanSessionKey: ?[*]u8,
    LogonServer: UNICODE_STRING,
    UserParameters: UNICODE_STRING,
};
// --------------------------------------------------------
// Type: MSV1_0_CREDENTIAL_KEY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSV1_0_CREDENTIAL_KEY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: MSV1_0_CREDENTIAL_KEY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_CREDENTIAL_KEY = extern struct {
    Data: ?[*]u8,
};
// --------------------------------------------------------
// Type: MSV1_0_SUPPLEMENTAL_CREDENTIAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_SUPPLEMENTAL_CREDENTIAL = extern struct {
    Version: u32,
    Flags: u32,
    LmPassword: ?[*]u8,
    NtPassword: ?[*]u8,
};
// --------------------------------------------------------
// Type: MSV1_0_SUPPLEMENTAL_CREDENTIAL_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_SUPPLEMENTAL_CREDENTIAL_V2 = extern struct {
    Version: u32,
    Flags: u32,
    NtPassword: ?[*]u8,
    CredentialKey: MSV1_0_CREDENTIAL_KEY,
};
// --------------------------------------------------------
// Type: MSV1_0_SUPPLEMENTAL_CREDENTIAL_V3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_SUPPLEMENTAL_CREDENTIAL_V3 = extern struct {
    Version: u32,
    Flags: u32,
    CredentialKeyType: MSV1_0_CREDENTIAL_KEY_TYPE,
    NtPassword: ?[*]u8,
    CredentialKey: MSV1_0_CREDENTIAL_KEY,
    ShaPassword: ?[*]u8,
};
// --------------------------------------------------------
// Type: MSV1_0_IUM_SUPPLEMENTAL_CREDENTIAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_IUM_SUPPLEMENTAL_CREDENTIAL = extern struct {
    Version: u32,
    EncryptedCredsSize: u32,
    EncryptedCreds: ?[*]u8,
};
// --------------------------------------------------------
// Type: MSV1_0_REMOTE_SUPPLEMENTAL_CREDENTIAL
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const MSV1_0_REMOTE_SUPPLEMENTAL_CREDENTIAL = *opaque{
};
// --------------------------------------------------------
// Type: MSV1_0_NTLM3_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_NTLM3_RESPONSE = extern struct {
    Response: ?[*]u8,
    RespType: u8,
    HiRespType: u8,
    Flags: u16,
    MsgWord: u32,
    TimeStamp: u64,
    ChallengeFromClient: ?[*]u8,
    AvPairsOff: u32,
    Buffer: ?[*]u8,
};
// --------------------------------------------------------
// Type: MSV1_0_AVID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSV1_0_AVID = *opaque{
};
// --------------------------------------------------------
// Type: MSV1_0_AV_PAIR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_AV_PAIR = extern struct {
    AvId: u16,
    AvLen: u16,
};
// --------------------------------------------------------
// Type: MSV1_0_PROTOCOL_MESSAGE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSV1_0_PROTOCOL_MESSAGE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: MSV1_0_CHANGEPASSWORD_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_CHANGEPASSWORD_REQUEST = extern struct {
    MessageType: MSV1_0_PROTOCOL_MESSAGE_TYPE,
    DomainName: UNICODE_STRING,
    AccountName: UNICODE_STRING,
    OldPassword: UNICODE_STRING,
    NewPassword: UNICODE_STRING,
    Impersonating: u8,
};
// --------------------------------------------------------
// Type: MSV1_0_CHANGEPASSWORD_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_CHANGEPASSWORD_RESPONSE = extern struct {
    MessageType: MSV1_0_PROTOCOL_MESSAGE_TYPE,
    PasswordInfoValid: u8,
    DomainPasswordInfo: DOMAIN_PASSWORD_INFORMATION,
};
// --------------------------------------------------------
// Type: MSV1_0_PASSTHROUGH_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_PASSTHROUGH_REQUEST = extern struct {
    MessageType: MSV1_0_PROTOCOL_MESSAGE_TYPE,
    DomainName: UNICODE_STRING,
    PackageName: UNICODE_STRING,
    DataLength: u32,
    LogonData: ?*u8,
    Pad: u32,
};
// --------------------------------------------------------
// Type: MSV1_0_PASSTHROUGH_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_PASSTHROUGH_RESPONSE = extern struct {
    MessageType: MSV1_0_PROTOCOL_MESSAGE_TYPE,
    Pad: u32,
    DataLength: u32,
    ValidationData: ?*u8,
};
// --------------------------------------------------------
// Type: MSV1_0_SUBAUTH_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_SUBAUTH_REQUEST = extern struct {
    MessageType: MSV1_0_PROTOCOL_MESSAGE_TYPE,
    SubAuthPackageId: u32,
    SubAuthInfoLength: u32,
    SubAuthSubmitBuffer: ?*u8,
};
// --------------------------------------------------------
// Type: MSV1_0_SUBAUTH_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_SUBAUTH_RESPONSE = extern struct {
    MessageType: MSV1_0_PROTOCOL_MESSAGE_TYPE,
    SubAuthInfoLength: u32,
    SubAuthReturnBuffer: ?*u8,
};
// --------------------------------------------------------
// Type: KERB_LOGON_SUBMIT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KERB_LOGON_SUBMIT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: KERB_INTERACTIVE_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_INTERACTIVE_LOGON = extern struct {
    MessageType: KERB_LOGON_SUBMIT_TYPE,
    LogonDomainName: UNICODE_STRING,
    UserName: UNICODE_STRING,
    Password: UNICODE_STRING,
};
// --------------------------------------------------------
// Type: KERB_INTERACTIVE_UNLOCK_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_INTERACTIVE_UNLOCK_LOGON = extern struct {
    Logon: KERB_INTERACTIVE_LOGON,
    LogonId: LUID,
};
// --------------------------------------------------------
// Type: KERB_SMART_CARD_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_SMART_CARD_LOGON = extern struct {
    MessageType: KERB_LOGON_SUBMIT_TYPE,
    Pin: UNICODE_STRING,
    CspDataLength: u32,
    CspData: ?*u8,
};
// --------------------------------------------------------
// Type: KERB_SMART_CARD_UNLOCK_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_SMART_CARD_UNLOCK_LOGON = extern struct {
    Logon: KERB_SMART_CARD_LOGON,
    LogonId: LUID,
};
// --------------------------------------------------------
// Type: KERB_CERTIFICATE_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_CERTIFICATE_LOGON = extern struct {
    MessageType: KERB_LOGON_SUBMIT_TYPE,
    DomainName: UNICODE_STRING,
    UserName: UNICODE_STRING,
    Pin: UNICODE_STRING,
    Flags: u32,
    CspDataLength: u32,
    CspData: ?*u8,
};
// --------------------------------------------------------
// Type: KERB_CERTIFICATE_UNLOCK_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_CERTIFICATE_UNLOCK_LOGON = extern struct {
    Logon: KERB_CERTIFICATE_LOGON,
    LogonId: LUID,
};
// --------------------------------------------------------
// Type: KERB_CERTIFICATE_S4U_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_CERTIFICATE_S4U_LOGON = extern struct {
    MessageType: KERB_LOGON_SUBMIT_TYPE,
    Flags: u32,
    UserPrincipalName: UNICODE_STRING,
    DomainName: UNICODE_STRING,
    CertificateLength: u32,
    Certificate: ?*u8,
};
// --------------------------------------------------------
// Type: KERB_TICKET_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_TICKET_LOGON = extern struct {
    MessageType: KERB_LOGON_SUBMIT_TYPE,
    Flags: u32,
    ServiceTicketLength: u32,
    TicketGrantingTicketLength: u32,
    ServiceTicket: ?*u8,
    TicketGrantingTicket: ?*u8,
};
// --------------------------------------------------------
// Type: KERB_TICKET_UNLOCK_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_TICKET_UNLOCK_LOGON = extern struct {
    Logon: KERB_TICKET_LOGON,
    LogonId: LUID,
};
// --------------------------------------------------------
// Type: KERB_S4U_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_S4U_LOGON = extern struct {
    MessageType: KERB_LOGON_SUBMIT_TYPE,
    Flags: u32,
    ClientUpn: UNICODE_STRING,
    ClientRealm: UNICODE_STRING,
};
// --------------------------------------------------------
// Type: KERB_PROFILE_BUFFER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KERB_PROFILE_BUFFER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: KERB_INTERACTIVE_PROFILE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_INTERACTIVE_PROFILE = extern struct {
    MessageType: KERB_PROFILE_BUFFER_TYPE,
    LogonCount: u16,
    BadPasswordCount: u16,
    LogonTime: LARGE_INTEGER,
    LogoffTime: LARGE_INTEGER,
    KickOffTime: LARGE_INTEGER,
    PasswordLastSet: LARGE_INTEGER,
    PasswordCanChange: LARGE_INTEGER,
    PasswordMustChange: LARGE_INTEGER,
    LogonScript: UNICODE_STRING,
    HomeDirectory: UNICODE_STRING,
    FullName: UNICODE_STRING,
    ProfilePath: UNICODE_STRING,
    HomeDirectoryDrive: UNICODE_STRING,
    LogonServer: UNICODE_STRING,
    UserFlags: u32,
};
// --------------------------------------------------------
// Type: KERB_SMART_CARD_PROFILE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_SMART_CARD_PROFILE = extern struct {
    Profile: KERB_INTERACTIVE_PROFILE,
    CertificateSize: u32,
    CertificateData: ?*u8,
};
// --------------------------------------------------------
// Type: KERB_CRYPTO_KEY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_CRYPTO_KEY = extern struct {
    KeyType: i32,
    Length: u32,
    Value: ?*u8,
};
// --------------------------------------------------------
// Type: KERB_CRYPTO_KEY32
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_CRYPTO_KEY32 = extern struct {
    KeyType: i32,
    Length: u32,
    Offset: u32,
};
// --------------------------------------------------------
// Type: KERB_TICKET_PROFILE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_TICKET_PROFILE = extern struct {
    Profile: KERB_INTERACTIVE_PROFILE,
    SessionKey: KERB_CRYPTO_KEY,
};
// --------------------------------------------------------
// Type: KERB_PROTOCOL_MESSAGE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KERB_PROTOCOL_MESSAGE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: KERB_QUERY_TKT_CACHE_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_QUERY_TKT_CACHE_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    LogonId: LUID,
};
// --------------------------------------------------------
// Type: KERB_TICKET_CACHE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_TICKET_CACHE_INFO = extern struct {
    ServerName: UNICODE_STRING,
    RealmName: UNICODE_STRING,
    StartTime: LARGE_INTEGER,
    EndTime: LARGE_INTEGER,
    RenewTime: LARGE_INTEGER,
    EncryptionType: i32,
    TicketFlags: u32,
};
// --------------------------------------------------------
// Type: KERB_TICKET_CACHE_INFO_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_TICKET_CACHE_INFO_EX = extern struct {
    ClientName: UNICODE_STRING,
    ClientRealm: UNICODE_STRING,
    ServerName: UNICODE_STRING,
    ServerRealm: UNICODE_STRING,
    StartTime: LARGE_INTEGER,
    EndTime: LARGE_INTEGER,
    RenewTime: LARGE_INTEGER,
    EncryptionType: i32,
    TicketFlags: u32,
};
// --------------------------------------------------------
// Type: KERB_TICKET_CACHE_INFO_EX2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_TICKET_CACHE_INFO_EX2 = extern struct {
    ClientName: UNICODE_STRING,
    ClientRealm: UNICODE_STRING,
    ServerName: UNICODE_STRING,
    ServerRealm: UNICODE_STRING,
    StartTime: LARGE_INTEGER,
    EndTime: LARGE_INTEGER,
    RenewTime: LARGE_INTEGER,
    EncryptionType: i32,
    TicketFlags: u32,
    SessionKeyType: u32,
    BranchId: u32,
};
// --------------------------------------------------------
// Type: KERB_TICKET_CACHE_INFO_EX3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_TICKET_CACHE_INFO_EX3 = extern struct {
    ClientName: UNICODE_STRING,
    ClientRealm: UNICODE_STRING,
    ServerName: UNICODE_STRING,
    ServerRealm: UNICODE_STRING,
    StartTime: LARGE_INTEGER,
    EndTime: LARGE_INTEGER,
    RenewTime: LARGE_INTEGER,
    EncryptionType: i32,
    TicketFlags: u32,
    SessionKeyType: u32,
    BranchId: u32,
    CacheFlags: u32,
    KdcCalled: UNICODE_STRING,
};
// --------------------------------------------------------
// Type: KERB_QUERY_TKT_CACHE_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_QUERY_TKT_CACHE_RESPONSE = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    CountOfTickets: u32,
    Tickets: ?[*]KERB_TICKET_CACHE_INFO,
};
// --------------------------------------------------------
// Type: KERB_QUERY_TKT_CACHE_EX_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_QUERY_TKT_CACHE_EX_RESPONSE = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    CountOfTickets: u32,
    Tickets: ?[*]KERB_TICKET_CACHE_INFO_EX,
};
// --------------------------------------------------------
// Type: KERB_QUERY_TKT_CACHE_EX2_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_QUERY_TKT_CACHE_EX2_RESPONSE = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    CountOfTickets: u32,
    Tickets: ?[*]KERB_TICKET_CACHE_INFO_EX2,
};
// --------------------------------------------------------
// Type: KERB_QUERY_TKT_CACHE_EX3_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_QUERY_TKT_CACHE_EX3_RESPONSE = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    CountOfTickets: u32,
    Tickets: ?[*]KERB_TICKET_CACHE_INFO_EX3,
};
// --------------------------------------------------------
// Type: SecHandle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecHandle = extern struct {
    dwLower: ?*opaque{},
    dwUpper: ?*opaque{},
};
// --------------------------------------------------------
// Type: KERB_AUTH_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_AUTH_DATA = extern struct {
    Type: u32,
    Length: u32,
    Data: ?*u8,
};
// --------------------------------------------------------
// Type: KERB_NET_ADDRESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_NET_ADDRESS = extern struct {
    Family: u32,
    Length: u32,
    Address: ?*i8,
};
// --------------------------------------------------------
// Type: KERB_NET_ADDRESSES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_NET_ADDRESSES = extern struct {
    Number: u32,
    Addresses: ?[*]KERB_NET_ADDRESS,
};
// --------------------------------------------------------
// Type: KERB_EXTERNAL_NAME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_EXTERNAL_NAME = extern struct {
    NameType: i16,
    NameCount: u16,
    Names: ?[*]UNICODE_STRING,
};
// --------------------------------------------------------
// Type: KERB_EXTERNAL_TICKET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_EXTERNAL_TICKET = extern struct {
    ServiceName: ?*KERB_EXTERNAL_NAME,
    TargetName: ?*KERB_EXTERNAL_NAME,
    ClientName: ?*KERB_EXTERNAL_NAME,
    DomainName: UNICODE_STRING,
    TargetDomainName: UNICODE_STRING,
    AltTargetDomainName: UNICODE_STRING,
    SessionKey: KERB_CRYPTO_KEY,
    TicketFlags: u32,
    Flags: u32,
    KeyExpirationTime: LARGE_INTEGER,
    StartTime: LARGE_INTEGER,
    EndTime: LARGE_INTEGER,
    RenewUntil: LARGE_INTEGER,
    TimeSkew: LARGE_INTEGER,
    EncodedTicketSize: u32,
    EncodedTicket: ?*u8,
};
// --------------------------------------------------------
// Type: KERB_RETRIEVE_TKT_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_RETRIEVE_TKT_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    LogonId: LUID,
    TargetName: UNICODE_STRING,
    TicketFlags: u32,
    CacheOptions: u32,
    EncryptionType: i32,
    CredentialsHandle: SecHandle,
};
// --------------------------------------------------------
// Type: KERB_RETRIEVE_TKT_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_RETRIEVE_TKT_RESPONSE = extern struct {
    Ticket: KERB_EXTERNAL_TICKET,
};
// --------------------------------------------------------
// Type: KERB_PURGE_TKT_CACHE_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_PURGE_TKT_CACHE_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    LogonId: LUID,
    ServerName: UNICODE_STRING,
    RealmName: UNICODE_STRING,
};
// --------------------------------------------------------
// Type: KERB_PURGE_TKT_CACHE_EX_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_PURGE_TKT_CACHE_EX_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    LogonId: LUID,
    Flags: u32,
    TicketTemplate: KERB_TICKET_CACHE_INFO_EX,
};
// --------------------------------------------------------
// Type: KERB_SUBMIT_TKT_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_SUBMIT_TKT_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    LogonId: LUID,
    Flags: u32,
    Key: KERB_CRYPTO_KEY32,
    KerbCredSize: u32,
    KerbCredOffset: u32,
};
// --------------------------------------------------------
// Type: KERB_QUERY_KDC_PROXY_CACHE_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_QUERY_KDC_PROXY_CACHE_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    Flags: u32,
    LogonId: LUID,
};
// --------------------------------------------------------
// Type: KDC_PROXY_CACHE_ENTRY_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KDC_PROXY_CACHE_ENTRY_DATA = extern struct {
    SinceLastUsed: u64,
    DomainName: UNICODE_STRING,
    ProxyServerName: UNICODE_STRING,
    ProxyServerVdir: UNICODE_STRING,
    ProxyServerPort: u16,
    LogonId: LUID,
    CredUserName: UNICODE_STRING,
    CredDomainName: UNICODE_STRING,
    GlobalCache: u8,
};
// --------------------------------------------------------
// Type: KERB_QUERY_KDC_PROXY_CACHE_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_QUERY_KDC_PROXY_CACHE_RESPONSE = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    CountOfEntries: u32,
    Entries: ?*KDC_PROXY_CACHE_ENTRY_DATA,
};
// --------------------------------------------------------
// Type: KERB_PURGE_KDC_PROXY_CACHE_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_PURGE_KDC_PROXY_CACHE_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    Flags: u32,
    LogonId: LUID,
};
// --------------------------------------------------------
// Type: KERB_PURGE_KDC_PROXY_CACHE_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_PURGE_KDC_PROXY_CACHE_RESPONSE = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    CountOfPurged: u32,
};
// --------------------------------------------------------
// Type: KERB_S4U2PROXY_CACHE_ENTRY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_S4U2PROXY_CACHE_ENTRY_INFO = extern struct {
    ServerName: UNICODE_STRING,
    Flags: u32,
    LastStatus: NTSTATUS,
    Expiry: LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: KERB_S4U2PROXY_CRED
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_S4U2PROXY_CRED = extern struct {
    UserName: UNICODE_STRING,
    DomainName: UNICODE_STRING,
    Flags: u32,
    LastStatus: NTSTATUS,
    Expiry: LARGE_INTEGER,
    CountOfEntries: u32,
    Entries: ?*KERB_S4U2PROXY_CACHE_ENTRY_INFO,
};
// --------------------------------------------------------
// Type: KERB_QUERY_S4U2PROXY_CACHE_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_QUERY_S4U2PROXY_CACHE_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    Flags: u32,
    LogonId: LUID,
};
// --------------------------------------------------------
// Type: KERB_QUERY_S4U2PROXY_CACHE_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_QUERY_S4U2PROXY_CACHE_RESPONSE = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    CountOfCreds: u32,
    Creds: ?*KERB_S4U2PROXY_CRED,
};
// --------------------------------------------------------
// Type: KERB_RETRIEVE_KEY_TAB_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_RETRIEVE_KEY_TAB_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    Flags: u32,
    UserName: UNICODE_STRING,
    DomainName: UNICODE_STRING,
    Password: UNICODE_STRING,
};
// --------------------------------------------------------
// Type: KERB_RETRIEVE_KEY_TAB_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_RETRIEVE_KEY_TAB_RESPONSE = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    KeyTabLength: u32,
    KeyTab: ?*u8,
};
// --------------------------------------------------------
// Type: KERB_CHANGEPASSWORD_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_CHANGEPASSWORD_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    DomainName: UNICODE_STRING,
    AccountName: UNICODE_STRING,
    OldPassword: UNICODE_STRING,
    NewPassword: UNICODE_STRING,
    Impersonating: u8,
};
// --------------------------------------------------------
// Type: KERB_SETPASSWORD_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_SETPASSWORD_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    LogonId: LUID,
    CredentialsHandle: SecHandle,
    Flags: u32,
    DomainName: UNICODE_STRING,
    AccountName: UNICODE_STRING,
    Password: UNICODE_STRING,
};
// --------------------------------------------------------
// Type: KERB_SETPASSWORD_EX_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_SETPASSWORD_EX_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    LogonId: LUID,
    CredentialsHandle: SecHandle,
    Flags: u32,
    AccountRealm: UNICODE_STRING,
    AccountName: UNICODE_STRING,
    Password: UNICODE_STRING,
    ClientRealm: UNICODE_STRING,
    ClientName: UNICODE_STRING,
    Impersonating: u8,
    KdcAddress: UNICODE_STRING,
    KdcAddressType: u32,
};
// --------------------------------------------------------
// Type: KERB_DECRYPT_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_DECRYPT_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    LogonId: LUID,
    Flags: u32,
    CryptoType: i32,
    KeyUsage: i32,
    Key: KERB_CRYPTO_KEY,
    EncryptedDataSize: u32,
    InitialVectorSize: u32,
    InitialVector: ?*u8,
    EncryptedData: ?*u8,
};
// --------------------------------------------------------
// Type: KERB_DECRYPT_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_DECRYPT_RESPONSE = extern struct {
    DecryptedData: ?[*]u8,
};
// --------------------------------------------------------
// Type: KERB_ADD_BINDING_CACHE_ENTRY_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_ADD_BINDING_CACHE_ENTRY_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    RealmName: UNICODE_STRING,
    KdcAddress: UNICODE_STRING,
    AddressType: u32,
};
// --------------------------------------------------------
// Type: KERB_REFRESH_SCCRED_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_REFRESH_SCCRED_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    CredentialBlob: UNICODE_STRING,
    LogonId: LUID,
    Flags: u32,
};
// --------------------------------------------------------
// Type: KERB_ADD_CREDENTIALS_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_ADD_CREDENTIALS_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    UserName: UNICODE_STRING,
    DomainName: UNICODE_STRING,
    Password: UNICODE_STRING,
    LogonId: LUID,
    Flags: u32,
};
// --------------------------------------------------------
// Type: KERB_ADD_CREDENTIALS_REQUEST_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_ADD_CREDENTIALS_REQUEST_EX = extern struct {
    Credentials: KERB_ADD_CREDENTIALS_REQUEST,
    PrincipalNameCount: u32,
    PrincipalNames: ?[*]UNICODE_STRING,
};
// --------------------------------------------------------
// Type: KERB_TRANSFER_CRED_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_TRANSFER_CRED_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    OriginLogonId: LUID,
    DestinationLogonId: LUID,
    Flags: u32,
};
// --------------------------------------------------------
// Type: KERB_CLEANUP_MACHINE_PKINIT_CREDS_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_CLEANUP_MACHINE_PKINIT_CREDS_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    LogonId: LUID,
};
// --------------------------------------------------------
// Type: KERB_BINDING_CACHE_ENTRY_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_BINDING_CACHE_ENTRY_DATA = extern struct {
    DiscoveryTime: u64,
    RealmName: UNICODE_STRING,
    KdcAddress: UNICODE_STRING,
    AddressType: u32,
    Flags: u32,
    DcFlags: u32,
    CacheFlags: u32,
    KdcName: UNICODE_STRING,
};
// --------------------------------------------------------
// Type: KERB_QUERY_BINDING_CACHE_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_QUERY_BINDING_CACHE_RESPONSE = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    CountOfEntries: u32,
    Entries: ?*KERB_BINDING_CACHE_ENTRY_DATA,
};
// --------------------------------------------------------
// Type: KERB_ADD_BINDING_CACHE_ENTRY_EX_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_ADD_BINDING_CACHE_ENTRY_EX_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    RealmName: UNICODE_STRING,
    KdcAddress: UNICODE_STRING,
    AddressType: u32,
    DcFlags: u32,
};
// --------------------------------------------------------
// Type: KERB_QUERY_BINDING_CACHE_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_QUERY_BINDING_CACHE_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
};
// --------------------------------------------------------
// Type: KERB_PURGE_BINDING_CACHE_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_PURGE_BINDING_CACHE_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
};
// --------------------------------------------------------
// Type: KERB_QUERY_DOMAIN_EXTENDED_POLICIES_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_QUERY_DOMAIN_EXTENDED_POLICIES_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    Flags: u32,
    DomainName: UNICODE_STRING,
};
// --------------------------------------------------------
// Type: KERB_QUERY_DOMAIN_EXTENDED_POLICIES_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_QUERY_DOMAIN_EXTENDED_POLICIES_RESPONSE = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    Flags: u32,
    ExtendedPolicies: u32,
    DsFlags: u32,
};
// --------------------------------------------------------
// Type: KERB_CERTIFICATE_INFO_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KERB_CERTIFICATE_INFO_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: KERB_CERTIFICATE_HASHINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_CERTIFICATE_HASHINFO = extern struct {
    StoreNameLength: u16,
    HashLength: u16,
};
// --------------------------------------------------------
// Type: KERB_CERTIFICATE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERB_CERTIFICATE_INFO = extern struct {
    CertInfoSize: u32,
    InfoType: u32,
};
// --------------------------------------------------------
// Type: POLICY_AUDIT_SID_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_AUDIT_SID_ARRAY = extern struct {
    UsersCount: u32,
    UserSidArray: ?*?*opaque{},
};
// --------------------------------------------------------
// Type: AUDIT_POLICY_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUDIT_POLICY_INFORMATION = extern struct {
    AuditSubCategoryGuid: Guid,
    AuditingInformation: u32,
    AuditCategoryGuid: Guid,
};
// --------------------------------------------------------
// Type: PKU2U_CERT_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PKU2U_CERT_BLOB = extern struct {
    CertOffset: u32,
    CertLength: u16,
};
// --------------------------------------------------------
// Type: PKU2U_CREDUI_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PKU2U_CREDUI_CONTEXT = extern struct {
    Version: u64,
    cbHeaderLength: u16,
    cbStructureLength: u32,
    CertArrayCount: u16,
    CertArrayOffset: u32,
};
// --------------------------------------------------------
// Type: PKU2U_LOGON_SUBMIT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PKU2U_LOGON_SUBMIT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: PKU2U_CERTIFICATE_S4U_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PKU2U_CERTIFICATE_S4U_LOGON = extern struct {
    MessageType: PKU2U_LOGON_SUBMIT_TYPE,
    Flags: u32,
    UserPrincipalName: UNICODE_STRING,
    DomainName: UNICODE_STRING,
    CertificateLength: u32,
    Certificate: ?*u8,
};
// --------------------------------------------------------
// Type: SecPkgInfoW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgInfoW = extern struct {
    fCapabilities: u32,
    wVersion: u16,
    wRPCID: u16,
    cbMaxToken: u32,
    Name: ?*u16,
    Comment: ?*u16,
};
// --------------------------------------------------------
// Type: SecPkgInfoA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgInfoA = extern struct {
    fCapabilities: u32,
    wVersion: u16,
    wRPCID: u16,
    cbMaxToken: u32,
    Name: ?*i8,
    Comment: ?*i8,
};
// --------------------------------------------------------
// Type: SecBuffer
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecBuffer = extern struct {
    cbBuffer: u32,
    BufferType: u32,
    pvBuffer: ?*opaque{},
};
// --------------------------------------------------------
// Type: SecBufferDesc
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecBufferDesc = extern struct {
    ulVersion: u32,
    cBuffers: u32,
    pBuffers: ?*SecBuffer,
};
// --------------------------------------------------------
// Type: SEC_NEGOTIATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_NEGOTIATION_INFO = extern struct {
    Size: u32,
    NameLength: u32,
    Name: ?*u16,
    Reserved: ?*opaque{},
};
// --------------------------------------------------------
// Type: SEC_CHANNEL_BINDINGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_CHANNEL_BINDINGS = extern struct {
    dwInitiatorAddrType: u32,
    cbInitiatorLength: u32,
    dwInitiatorOffset: u32,
    dwAcceptorAddrType: u32,
    cbAcceptorLength: u32,
    dwAcceptorOffset: u32,
    cbApplicationDataLength: u32,
    dwApplicationDataOffset: u32,
};
// --------------------------------------------------------
// Type: SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT = *opaque{
};
// --------------------------------------------------------
// Type: SEC_APPLICATION_PROTOCOL_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_APPLICATION_PROTOCOL_LIST = extern struct {
    ProtoNegoExt: SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT,
    ProtocolListSize: u16,
    ProtocolList: ?[*]u8,
};
// --------------------------------------------------------
// Type: SEC_APPLICATION_PROTOCOLS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_APPLICATION_PROTOCOLS = extern struct {
    ProtocolListsSize: u32,
    ProtocolLists: ?[*]SEC_APPLICATION_PROTOCOL_LIST,
};
// --------------------------------------------------------
// Type: SEC_SRTP_PROTECTION_PROFILES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_SRTP_PROTECTION_PROFILES = extern struct {
    ProfilesSize: u16,
    ProfilesList: ?[*]u16,
};
// --------------------------------------------------------
// Type: SEC_SRTP_MASTER_KEY_IDENTIFIER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_SRTP_MASTER_KEY_IDENTIFIER = extern struct {
    MasterKeyIdentifierSize: u8,
    MasterKeyIdentifier: ?[*]u8,
};
// --------------------------------------------------------
// Type: SEC_TOKEN_BINDING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_TOKEN_BINDING = extern struct {
    MajorVersion: u8,
    MinorVersion: u8,
    KeyParametersSize: u16,
    KeyParameters: ?[*]u8,
};
// --------------------------------------------------------
// Type: SEC_PRESHAREDKEY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_PRESHAREDKEY = extern struct {
    KeySize: u16,
    Key: ?[*]u8,
};
// --------------------------------------------------------
// Type: SEC_PRESHAREDKEY_IDENTITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_PRESHAREDKEY_IDENTITY = extern struct {
    KeyIdentitySize: u16,
    KeyIdentity: ?[*]u8,
};
// --------------------------------------------------------
// Type: SEC_DTLS_MTU
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_DTLS_MTU = extern struct {
    PathMTU: u16,
};
// --------------------------------------------------------
// Type: SEC_FLAGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_FLAGS = extern struct {
    Flags: u64,
};
// --------------------------------------------------------
// Type: SEC_TRAFFIC_SECRET_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SEC_TRAFFIC_SECRET_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SEC_TRAFFIC_SECRETS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_TRAFFIC_SECRETS = extern struct {
    SymmetricAlgId: ?[*]u16,
    ChainingMode: ?[*]u16,
    HashAlgId: ?[*]u16,
    KeySize: u16,
    IvSize: u16,
    MsgSequenceStart: u16,
    MsgSequenceEnd: u16,
    TrafficSecretType: SEC_TRAFFIC_SECRET_TYPE,
    TrafficSecretSize: u16,
    TrafficSecret: ?[*]u8,
};
// --------------------------------------------------------
// Type: SecPkgCredentials_NamesW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgCredentials_NamesW = extern struct {
    sUserName: ?*u16,
};
// --------------------------------------------------------
// Type: SecPkgCredentials_NamesA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgCredentials_NamesA = extern struct {
    sUserName: ?*i8,
};
// --------------------------------------------------------
// Type: SecPkgCredentials_SSIProviderW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgCredentials_SSIProviderW = extern struct {
    sProviderName: ?*u16,
    ProviderInfoLength: u32,
    ProviderInfo: ?*i8,
};
// --------------------------------------------------------
// Type: SecPkgCredentials_SSIProviderA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgCredentials_SSIProviderA = extern struct {
    sProviderName: ?*i8,
    ProviderInfoLength: u32,
    ProviderInfo: ?*i8,
};
// --------------------------------------------------------
// Type: SecPkgCredentials_KdcProxySettingsW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgCredentials_KdcProxySettingsW = extern struct {
    Version: u32,
    Flags: u32,
    ProxyServerOffset: u16,
    ProxyServerLength: u16,
    ClientTlsCredOffset: u16,
    ClientTlsCredLength: u16,
};
// --------------------------------------------------------
// Type: SecPkgCredentials_Cert
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgCredentials_Cert = extern struct {
    EncodedCertSize: u32,
    EncodedCert: ?*u8,
};
// --------------------------------------------------------
// Type: SecPkgContext_SubjectAttributes
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_SubjectAttributes = extern struct {
    AttributeInfo: ?*opaque{},
};
// --------------------------------------------------------
// Type: SECPKG_CRED_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SECPKG_CRED_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: SecPkgContext_CredInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_CredInfo = extern struct {
    CredClass: SECPKG_CRED_CLASS,
    IsPromptingNeeded: u32,
};
// --------------------------------------------------------
// Type: SecPkgContext_NegoPackageInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_NegoPackageInfo = extern struct {
    PackageMask: u32,
};
// --------------------------------------------------------
// Type: SecPkgContext_NegoStatus
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_NegoStatus = extern struct {
    LastStatus: u32,
};
// --------------------------------------------------------
// Type: SecPkgContext_Sizes
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_Sizes = extern struct {
    cbMaxToken: u32,
    cbMaxSignature: u32,
    cbBlockSize: u32,
    cbSecurityTrailer: u32,
};
// --------------------------------------------------------
// Type: SecPkgContext_StreamSizes
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_StreamSizes = extern struct {
    cbHeader: u32,
    cbTrailer: u32,
    cbMaximumMessage: u32,
    cBuffers: u32,
    cbBlockSize: u32,
};
// --------------------------------------------------------
// Type: SecPkgContext_NamesW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_NamesW = extern struct {
    sUserName: ?*u16,
};
// --------------------------------------------------------
// Type: SECPKG_ATTR_LCT_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SECPKG_ATTR_LCT_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: SecPkgContext_LastClientTokenStatus
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_LastClientTokenStatus = extern struct {
    LastClientTokenStatus: SECPKG_ATTR_LCT_STATUS,
};
// --------------------------------------------------------
// Type: SecPkgContext_NamesA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_NamesA = extern struct {
    sUserName: ?*i8,
};
// --------------------------------------------------------
// Type: SecPkgContext_Lifespan
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_Lifespan = extern struct {
    tsStart: LARGE_INTEGER,
    tsExpiry: LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: SecPkgContext_DceInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_DceInfo = extern struct {
    AuthzSvc: u32,
    pPac: ?*opaque{},
};
// --------------------------------------------------------
// Type: SecPkgContext_KeyInfoA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_KeyInfoA = extern struct {
    sSignatureAlgorithmName: ?*i8,
    sEncryptAlgorithmName: ?*i8,
    KeySize: u32,
    SignatureAlgorithm: u32,
    EncryptAlgorithm: u32,
};
// --------------------------------------------------------
// Type: SecPkgContext_KeyInfoW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_KeyInfoW = extern struct {
    sSignatureAlgorithmName: ?*u16,
    sEncryptAlgorithmName: ?*u16,
    KeySize: u32,
    SignatureAlgorithm: u32,
    EncryptAlgorithm: u32,
};
// --------------------------------------------------------
// Type: SecPkgContext_AuthorityA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_AuthorityA = extern struct {
    sAuthorityName: ?*i8,
};
// --------------------------------------------------------
// Type: SecPkgContext_AuthorityW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_AuthorityW = extern struct {
    sAuthorityName: ?*u16,
};
// --------------------------------------------------------
// Type: SecPkgContext_ProtoInfoA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_ProtoInfoA = extern struct {
    sProtocolName: ?*i8,
    majorVersion: u32,
    minorVersion: u32,
};
// --------------------------------------------------------
// Type: SecPkgContext_ProtoInfoW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_ProtoInfoW = extern struct {
    sProtocolName: ?*u16,
    majorVersion: u32,
    minorVersion: u32,
};
// --------------------------------------------------------
// Type: SecPkgContext_PasswordExpiry
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_PasswordExpiry = extern struct {
    tsPasswordExpires: LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: SecPkgContext_LogoffTime
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_LogoffTime = extern struct {
    tsLogoffTime: LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: SecPkgContext_SessionKey
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_SessionKey = extern struct {
    SessionKeyLength: u32,
    SessionKey: ?*u8,
};
// --------------------------------------------------------
// Type: SecPkgContext_NegoKeys
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_NegoKeys = extern struct {
    KeyType: u32,
    KeyLength: u16,
    KeyValue: ?*u8,
    VerifyKeyType: u32,
    VerifyKeyLength: u16,
    VerifyKeyValue: ?*u8,
};
// --------------------------------------------------------
// Type: SecPkgContext_PackageInfoW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_PackageInfoW = extern struct {
    PackageInfo: ?*SecPkgInfoW,
};
// --------------------------------------------------------
// Type: SecPkgContext_PackageInfoA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_PackageInfoA = extern struct {
    PackageInfo: ?*SecPkgInfoA,
};
// --------------------------------------------------------
// Type: SecPkgContext_UserFlags
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_UserFlags = extern struct {
    UserFlags: u32,
};
// --------------------------------------------------------
// Type: SecPkgContext_Flags
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_Flags = extern struct {
    Flags: u32,
};
// --------------------------------------------------------
// Type: SecPkgContext_NegotiationInfoA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_NegotiationInfoA = extern struct {
    PackageInfo: ?*SecPkgInfoA,
    NegotiationState: u32,
};
// --------------------------------------------------------
// Type: SecPkgContext_NegotiationInfoW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_NegotiationInfoW = extern struct {
    PackageInfo: ?*SecPkgInfoW,
    NegotiationState: u32,
};
// --------------------------------------------------------
// Type: SecPkgContext_NativeNamesW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_NativeNamesW = extern struct {
    sClientName: ?*u16,
    sServerName: ?*u16,
};
// --------------------------------------------------------
// Type: SecPkgContext_NativeNamesA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_NativeNamesA = extern struct {
    sClientName: ?*i8,
    sServerName: ?*i8,
};
// --------------------------------------------------------
// Type: SecPkgContext_CredentialNameW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_CredentialNameW = extern struct {
    CredentialType: u32,
    sCredentialName: ?*u16,
};
// --------------------------------------------------------
// Type: SecPkgContext_CredentialNameA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_CredentialNameA = extern struct {
    CredentialType: u32,
    sCredentialName: ?*i8,
};
// --------------------------------------------------------
// Type: SecPkgContext_AccessToken
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_AccessToken = extern struct {
    AccessToken: ?*opaque{},
};
// --------------------------------------------------------
// Type: SecPkgContext_TargetInformation
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_TargetInformation = extern struct {
    MarshalledTargetInfoLength: u32,
    MarshalledTargetInfo: ?*u8,
};
// --------------------------------------------------------
// Type: SecPkgContext_AuthzID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_AuthzID = extern struct {
    AuthzIDLength: u32,
    AuthzID: ?*i8,
};
// --------------------------------------------------------
// Type: SecPkgContext_Target
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_Target = extern struct {
    TargetLength: u32,
    Target: ?*i8,
};
// --------------------------------------------------------
// Type: SecPkgContext_ClientSpecifiedTarget
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_ClientSpecifiedTarget = extern struct {
    sTargetName: ?*u16,
};
// --------------------------------------------------------
// Type: SecPkgContext_Bindings
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_Bindings = extern struct {
    BindingsLength: u32,
    Bindings: ?*SEC_CHANNEL_BINDINGS,
};
// --------------------------------------------------------
// Type: SEC_APPLICATION_PROTOCOL_NEGOTIATION_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SEC_APPLICATION_PROTOCOL_NEGOTIATION_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: SecPkgContext_ApplicationProtocol
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_ApplicationProtocol = extern struct {
    ProtoNegoStatus: SEC_APPLICATION_PROTOCOL_NEGOTIATION_STATUS,
    ProtoNegoExt: SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT,
    ProtocolIdSize: u8,
    ProtocolId: ?[*]u8,
};
// --------------------------------------------------------
// Type: SecPkgContext_NegotiatedTlsExtensions
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_NegotiatedTlsExtensions = extern struct {
    ExtensionsCount: u32,
    Extensions: ?*u16,
};
// --------------------------------------------------------
// Type: SECPKG_APP_MODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_APP_MODE_INFO = extern struct {
    UserFunction: u32,
    Argument1: ?*opaque{},
    Argument2: ?*opaque{},
    UserData: SecBuffer,
    ReturnToLsa: u8,
};
// --------------------------------------------------------
// Type: SEC_GET_KEY_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SEC_GET_KEY_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ACQUIRE_CREDENTIALS_HANDLE_FN_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ACQUIRE_CREDENTIALS_HANDLE_FN_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ACQUIRE_CREDENTIALS_HANDLE_FN_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ACQUIRE_CREDENTIALS_HANDLE_FN_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FREE_CREDENTIALS_HANDLE_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FREE_CREDENTIALS_HANDLE_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ADD_CREDENTIALS_FN_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADD_CREDENTIALS_FN_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ADD_CREDENTIALS_FN_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADD_CREDENTIALS_FN_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CHANGE_PASSWORD_FN_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CHANGE_PASSWORD_FN_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CHANGE_PASSWORD_FN_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CHANGE_PASSWORD_FN_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: INITIALIZE_SECURITY_CONTEXT_FN_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const INITIALIZE_SECURITY_CONTEXT_FN_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: INITIALIZE_SECURITY_CONTEXT_FN_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const INITIALIZE_SECURITY_CONTEXT_FN_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ACCEPT_SECURITY_CONTEXT_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ACCEPT_SECURITY_CONTEXT_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: COMPLETE_AUTH_TOKEN_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const COMPLETE_AUTH_TOKEN_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: IMPERSONATE_SECURITY_CONTEXT_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMPERSONATE_SECURITY_CONTEXT_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: REVERT_SECURITY_CONTEXT_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const REVERT_SECURITY_CONTEXT_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: QUERY_SECURITY_CONTEXT_TOKEN_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERY_SECURITY_CONTEXT_TOKEN_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DELETE_SECURITY_CONTEXT_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DELETE_SECURITY_CONTEXT_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: APPLY_CONTROL_TOKEN_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const APPLY_CONTROL_TOKEN_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: QUERY_CONTEXT_ATTRIBUTES_FN_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERY_CONTEXT_ATTRIBUTES_FN_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: QUERY_CONTEXT_ATTRIBUTES_EX_FN_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERY_CONTEXT_ATTRIBUTES_EX_FN_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: QUERY_CONTEXT_ATTRIBUTES_FN_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERY_CONTEXT_ATTRIBUTES_FN_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: QUERY_CONTEXT_ATTRIBUTES_EX_FN_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERY_CONTEXT_ATTRIBUTES_EX_FN_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SET_CONTEXT_ATTRIBUTES_FN_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SET_CONTEXT_ATTRIBUTES_FN_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SET_CONTEXT_ATTRIBUTES_FN_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SET_CONTEXT_ATTRIBUTES_FN_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: QUERY_CREDENTIALS_ATTRIBUTES_FN_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERY_CREDENTIALS_ATTRIBUTES_FN_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: QUERY_CREDENTIALS_ATTRIBUTES_FN_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERY_CREDENTIALS_ATTRIBUTES_FN_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SET_CREDENTIALS_ATTRIBUTES_FN_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SET_CREDENTIALS_ATTRIBUTES_FN_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SET_CREDENTIALS_ATTRIBUTES_FN_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SET_CREDENTIALS_ATTRIBUTES_FN_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FREE_CONTEXT_BUFFER_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FREE_CONTEXT_BUFFER_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: MAKE_SIGNATURE_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MAKE_SIGNATURE_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VERIFY_SIGNATURE_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VERIFY_SIGNATURE_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ENCRYPT_MESSAGE_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ENCRYPT_MESSAGE_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DECRYPT_MESSAGE_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DECRYPT_MESSAGE_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ENUMERATE_SECURITY_PACKAGES_FN_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ENUMERATE_SECURITY_PACKAGES_FN_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ENUMERATE_SECURITY_PACKAGES_FN_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ENUMERATE_SECURITY_PACKAGES_FN_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: QUERY_SECURITY_PACKAGE_INFO_FN_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERY_SECURITY_PACKAGE_INFO_FN_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: QUERY_SECURITY_PACKAGE_INFO_FN_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERY_SECURITY_PACKAGE_INFO_FN_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SecDelegationType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SecDelegationType = *opaque{
};
// --------------------------------------------------------
// Type: EXPORT_SECURITY_CONTEXT_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EXPORT_SECURITY_CONTEXT_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: IMPORT_SECURITY_CONTEXT_FN_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMPORT_SECURITY_CONTEXT_FN_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: IMPORT_SECURITY_CONTEXT_FN_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMPORT_SECURITY_CONTEXT_FN_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SecurityFunctionTableW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecurityFunctionTableW = extern struct {
    dwVersion: u32,
    EnumerateSecurityPackagesW: ENUMERATE_SECURITY_PACKAGES_FN_W,
    QueryCredentialsAttributesW: QUERY_CREDENTIALS_ATTRIBUTES_FN_W,
    AcquireCredentialsHandleW: ACQUIRE_CREDENTIALS_HANDLE_FN_W,
    FreeCredentialsHandle: FREE_CREDENTIALS_HANDLE_FN,
    Reserved2: ?*opaque{},
    InitializeSecurityContextW: INITIALIZE_SECURITY_CONTEXT_FN_W,
    AcceptSecurityContext: ACCEPT_SECURITY_CONTEXT_FN,
    CompleteAuthToken: COMPLETE_AUTH_TOKEN_FN,
    DeleteSecurityContext: DELETE_SECURITY_CONTEXT_FN,
    ApplyControlToken: APPLY_CONTROL_TOKEN_FN,
    QueryContextAttributesW: QUERY_CONTEXT_ATTRIBUTES_FN_W,
    ImpersonateSecurityContext: IMPERSONATE_SECURITY_CONTEXT_FN,
    RevertSecurityContext: REVERT_SECURITY_CONTEXT_FN,
    MakeSignature: MAKE_SIGNATURE_FN,
    VerifySignature: VERIFY_SIGNATURE_FN,
    FreeContextBuffer: FREE_CONTEXT_BUFFER_FN,
    QuerySecurityPackageInfoW: QUERY_SECURITY_PACKAGE_INFO_FN_W,
    Reserved3: ?*opaque{},
    Reserved4: ?*opaque{},
    ExportSecurityContext: EXPORT_SECURITY_CONTEXT_FN,
    ImportSecurityContextW: IMPORT_SECURITY_CONTEXT_FN_W,
    AddCredentialsW: ADD_CREDENTIALS_FN_W,
    Reserved8: ?*opaque{},
    QuerySecurityContextToken: QUERY_SECURITY_CONTEXT_TOKEN_FN,
    EncryptMessage: ENCRYPT_MESSAGE_FN,
    DecryptMessage: DECRYPT_MESSAGE_FN,
    SetContextAttributesW: SET_CONTEXT_ATTRIBUTES_FN_W,
    SetCredentialsAttributesW: SET_CREDENTIALS_ATTRIBUTES_FN_W,
    ChangeAccountPasswordW: CHANGE_PASSWORD_FN_W,
    QueryContextAttributesExW: QUERY_CONTEXT_ATTRIBUTES_EX_FN_W,
    QueryCredentialsAttributesExW: QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_W,
};
// --------------------------------------------------------
// Type: SecurityFunctionTableA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecurityFunctionTableA = extern struct {
    dwVersion: u32,
    EnumerateSecurityPackagesA: ENUMERATE_SECURITY_PACKAGES_FN_A,
    QueryCredentialsAttributesA: QUERY_CREDENTIALS_ATTRIBUTES_FN_A,
    AcquireCredentialsHandleA: ACQUIRE_CREDENTIALS_HANDLE_FN_A,
    FreeCredentialsHandle: FREE_CREDENTIALS_HANDLE_FN,
    Reserved2: ?*opaque{},
    InitializeSecurityContextA: INITIALIZE_SECURITY_CONTEXT_FN_A,
    AcceptSecurityContext: ACCEPT_SECURITY_CONTEXT_FN,
    CompleteAuthToken: COMPLETE_AUTH_TOKEN_FN,
    DeleteSecurityContext: DELETE_SECURITY_CONTEXT_FN,
    ApplyControlToken: APPLY_CONTROL_TOKEN_FN,
    QueryContextAttributesA: QUERY_CONTEXT_ATTRIBUTES_FN_A,
    ImpersonateSecurityContext: IMPERSONATE_SECURITY_CONTEXT_FN,
    RevertSecurityContext: REVERT_SECURITY_CONTEXT_FN,
    MakeSignature: MAKE_SIGNATURE_FN,
    VerifySignature: VERIFY_SIGNATURE_FN,
    FreeContextBuffer: FREE_CONTEXT_BUFFER_FN,
    QuerySecurityPackageInfoA: QUERY_SECURITY_PACKAGE_INFO_FN_A,
    Reserved3: ?*opaque{},
    Reserved4: ?*opaque{},
    ExportSecurityContext: EXPORT_SECURITY_CONTEXT_FN,
    ImportSecurityContextA: IMPORT_SECURITY_CONTEXT_FN_A,
    AddCredentialsA: ADD_CREDENTIALS_FN_A,
    Reserved8: ?*opaque{},
    QuerySecurityContextToken: QUERY_SECURITY_CONTEXT_TOKEN_FN,
    EncryptMessage: ENCRYPT_MESSAGE_FN,
    DecryptMessage: DECRYPT_MESSAGE_FN,
    SetContextAttributesA: SET_CONTEXT_ATTRIBUTES_FN_A,
    SetCredentialsAttributesA: SET_CREDENTIALS_ATTRIBUTES_FN_A,
    ChangeAccountPasswordA: CHANGE_PASSWORD_FN_A,
    QueryContextAttributesExA: QUERY_CONTEXT_ATTRIBUTES_EX_FN_A,
    QueryCredentialsAttributesExA: QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_A,
};
// --------------------------------------------------------
// Type: INIT_SECURITY_INTERFACE_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const INIT_SECURITY_INTERFACE_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: INIT_SECURITY_INTERFACE_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const INIT_SECURITY_INTERFACE_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SASL_AUTHZID_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SASL_AUTHZID_STATE = *opaque{
};
// --------------------------------------------------------
// Type: SEC_WINNT_AUTH_IDENTITY_EX2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_WINNT_AUTH_IDENTITY_EX2 = extern struct {
    Version: u32,
    cbHeaderLength: u16,
    cbStructureLength: u32,
    UserOffset: u32,
    UserLength: u16,
    DomainOffset: u32,
    DomainLength: u16,
    PackedCredentialsOffset: u32,
    PackedCredentialsLength: u16,
    Flags: u32,
    PackageListOffset: u32,
    PackageListLength: u16,
};
// --------------------------------------------------------
// Type: SEC_WINNT_AUTH_IDENTITY_EXW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_WINNT_AUTH_IDENTITY_EXW = extern struct {
    Version: u32,
    Length: u32,
    User: ?*u16,
    UserLength: u32,
    Domain: ?*u16,
    DomainLength: u32,
    Password: ?*u16,
    PasswordLength: u32,
    Flags: u32,
    PackageList: ?*u16,
    PackageListLength: u32,
};
// --------------------------------------------------------
// Type: SEC_WINNT_AUTH_IDENTITY_EXA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_WINNT_AUTH_IDENTITY_EXA = extern struct {
    Version: u32,
    Length: u32,
    User: ?*u8,
    UserLength: u32,
    Domain: ?*u8,
    DomainLength: u32,
    Password: ?*u8,
    PasswordLength: u32,
    Flags: u32,
    PackageList: ?*u8,
    PackageListLength: u32,
};
// --------------------------------------------------------
// Type: SEC_WINNT_AUTH_IDENTITY_INFO
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const SEC_WINNT_AUTH_IDENTITY_INFO = *opaque{
};
// --------------------------------------------------------
// Type: SECURITY_PACKAGE_OPTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECURITY_PACKAGE_OPTIONS = extern struct {
    Size: u32,
    Type: u32,
    Flags: u32,
    SignatureSize: u32,
    Signature: ?*opaque{},
};
// --------------------------------------------------------
// Type: CREDENTIAL_ATTRIBUTEA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CREDENTIAL_ATTRIBUTEA = extern struct {
    Keyword: ?*i8,
    Flags: u32,
    ValueSize: u32,
    Value: ?*u8,
};
// --------------------------------------------------------
// Type: CREDENTIAL_ATTRIBUTEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CREDENTIAL_ATTRIBUTEW = extern struct {
    Keyword: ?*u16,
    Flags: u32,
    ValueSize: u32,
    Value: ?*u8,
};
// --------------------------------------------------------
// Type: CREDENTIALA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CREDENTIALA = extern struct {
    Flags: u32,
    Type: u32,
    TargetName: ?*i8,
    Comment: ?*i8,
    LastWritten: FILETIME,
    CredentialBlobSize: u32,
    CredentialBlob: ?*u8,
    Persist: u32,
    AttributeCount: u32,
    Attributes: ?*CREDENTIAL_ATTRIBUTEA,
    TargetAlias: ?*i8,
    UserName: ?*i8,
};
// --------------------------------------------------------
// Type: CREDENTIALW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CREDENTIALW = extern struct {
    Flags: u32,
    Type: u32,
    TargetName: ?*u16,
    Comment: ?*u16,
    LastWritten: FILETIME,
    CredentialBlobSize: u32,
    CredentialBlob: ?*u8,
    Persist: u32,
    AttributeCount: u32,
    Attributes: ?*CREDENTIAL_ATTRIBUTEW,
    TargetAlias: ?*u16,
    UserName: ?*u16,
};
// --------------------------------------------------------
// Type: CREDENTIAL_TARGET_INFORMATIONA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CREDENTIAL_TARGET_INFORMATIONA = extern struct {
    TargetName: ?*i8,
    NetbiosServerName: ?*i8,
    DnsServerName: ?*i8,
    NetbiosDomainName: ?*i8,
    DnsDomainName: ?*i8,
    DnsTreeName: ?*i8,
    PackageName: ?*i8,
    Flags: u32,
    CredTypeCount: u32,
    CredTypes: ?*u32,
};
// --------------------------------------------------------
// Type: CREDENTIAL_TARGET_INFORMATIONW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CREDENTIAL_TARGET_INFORMATIONW = extern struct {
    TargetName: ?*u16,
    NetbiosServerName: ?*u16,
    DnsServerName: ?*u16,
    NetbiosDomainName: ?*u16,
    DnsDomainName: ?*u16,
    DnsTreeName: ?*u16,
    PackageName: ?*u16,
    Flags: u32,
    CredTypeCount: u32,
    CredTypes: ?*u32,
};
// --------------------------------------------------------
// Type: CERT_CREDENTIAL_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_CREDENTIAL_INFO = extern struct {
    cbSize: u32,
    rgbHashOfCert: ?[*]u8,
};
// --------------------------------------------------------
// Type: USERNAME_TARGET_CREDENTIAL_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USERNAME_TARGET_CREDENTIAL_INFO = extern struct {
    UserName: ?*u16,
};
// --------------------------------------------------------
// Type: BINARY_BLOB_CREDENTIAL_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BINARY_BLOB_CREDENTIAL_INFO = extern struct {
    cbBlob: u32,
    pbBlob: ?*u8,
};
// --------------------------------------------------------
// Type: CRED_MARSHAL_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CRED_MARSHAL_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: CRED_PROTECTION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CRED_PROTECTION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: CREDUI_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CREDUI_INFOA = extern struct {
    cbSize: u32,
    hwndParent: HWND,
    pszMessageText: ?*i8,
    pszCaptionText: ?*i8,
    hbmBanner: HBITMAP,
};
// --------------------------------------------------------
// Type: CREDUI_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CREDUI_INFOW = extern struct {
    cbSize: u32,
    hwndParent: HWND,
    pszMessageText: ?*u16,
    pszCaptionText: ?*u16,
    hbmBanner: HBITMAP,
};
// --------------------------------------------------------
// Type: LSA_TOKEN_INFORMATION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_TOKEN_INFORMATION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: LSA_TOKEN_INFORMATION_NULL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_TOKEN_INFORMATION_NULL = extern struct {
    ExpirationTime: LARGE_INTEGER,
    Groups: ?*TOKEN_GROUPS,
};
// --------------------------------------------------------
// Type: LSA_TOKEN_INFORMATION_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_TOKEN_INFORMATION_V1 = extern struct {
    ExpirationTime: LARGE_INTEGER,
    User: TOKEN_USER,
    Groups: ?*TOKEN_GROUPS,
    PrimaryGroup: TOKEN_PRIMARY_GROUP,
    Privileges: ?*TOKEN_PRIVILEGES,
    Owner: TOKEN_OWNER,
    DefaultDacl: TOKEN_DEFAULT_DACL,
};
// --------------------------------------------------------
// Type: LSA_TOKEN_INFORMATION_V3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_TOKEN_INFORMATION_V3 = extern struct {
    ExpirationTime: LARGE_INTEGER,
    User: TOKEN_USER,
    Groups: ?*TOKEN_GROUPS,
    PrimaryGroup: TOKEN_PRIMARY_GROUP,
    Privileges: ?*TOKEN_PRIVILEGES,
    Owner: TOKEN_OWNER,
    DefaultDacl: TOKEN_DEFAULT_DACL,
    UserClaims: TOKEN_USER_CLAIMS,
    DeviceClaims: TOKEN_DEVICE_CLAIMS,
    DeviceGroups: ?*TOKEN_GROUPS,
};
// --------------------------------------------------------
// Type: LSA_CREATE_LOGON_SESSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CREATE_LOGON_SESSION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_DELETE_LOGON_SESSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_DELETE_LOGON_SESSION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_ADD_CREDENTIAL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_ADD_CREDENTIAL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_GET_CREDENTIALS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_GET_CREDENTIALS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_DELETE_CREDENTIAL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_DELETE_CREDENTIAL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_ALLOCATE_LSA_HEAP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_ALLOCATE_LSA_HEAP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_FREE_LSA_HEAP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_FREE_LSA_HEAP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_ALLOCATE_PRIVATE_HEAP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_ALLOCATE_PRIVATE_HEAP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_FREE_PRIVATE_HEAP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_FREE_PRIVATE_HEAP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_ALLOCATE_CLIENT_BUFFER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_ALLOCATE_CLIENT_BUFFER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_FREE_CLIENT_BUFFER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_FREE_CLIENT_BUFFER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_COPY_TO_CLIENT_BUFFER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_COPY_TO_CLIENT_BUFFER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_COPY_FROM_CLIENT_BUFFER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_COPY_FROM_CLIENT_BUFFER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CREATE_LOGON_SESSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CREATE_LOGON_SESSION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_DELETE_LOGON_SESSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_DELETE_LOGON_SESSION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_ADD_CREDENTIAL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_ADD_CREDENTIAL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_GET_CREDENTIALS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_GET_CREDENTIALS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_DELETE_CREDENTIAL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_DELETE_CREDENTIAL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_ALLOCATE_LSA_HEAP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_ALLOCATE_LSA_HEAP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_FREE_LSA_HEAP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_FREE_LSA_HEAP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_ALLOCATE_PRIVATE_HEAP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_ALLOCATE_PRIVATE_HEAP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_FREE_PRIVATE_HEAP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_FREE_PRIVATE_HEAP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_ALLOCATE_CLIENT_BUFFER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_ALLOCATE_CLIENT_BUFFER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_FREE_CLIENT_BUFFER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_FREE_CLIENT_BUFFER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_COPY_TO_CLIENT_BUFFER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_COPY_TO_CLIENT_BUFFER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_COPY_FROM_CLIENT_BUFFER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_COPY_FROM_CLIENT_BUFFER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_DISPATCH_TABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_DISPATCH_TABLE = extern struct {
    CreateLogonSession: PLSA_CREATE_LOGON_SESSION,
    DeleteLogonSession: PLSA_DELETE_LOGON_SESSION,
    AddCredential: PLSA_ADD_CREDENTIAL,
    GetCredentials: PLSA_GET_CREDENTIALS,
    DeleteCredential: PLSA_DELETE_CREDENTIAL,
    AllocateLsaHeap: PLSA_ALLOCATE_LSA_HEAP,
    FreeLsaHeap: PLSA_FREE_LSA_HEAP,
    AllocateClientBuffer: PLSA_ALLOCATE_CLIENT_BUFFER,
    FreeClientBuffer: PLSA_FREE_CLIENT_BUFFER,
    CopyToClientBuffer: PLSA_COPY_TO_CLIENT_BUFFER,
    CopyFromClientBuffer: PLSA_COPY_FROM_CLIENT_BUFFER,
};
// --------------------------------------------------------
// Type: LSA_AP_INITIALIZE_PACKAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AP_INITIALIZE_PACKAGE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_AP_LOGON_USER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AP_LOGON_USER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_AP_LOGON_USER_EX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AP_LOGON_USER_EX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_AP_CALL_PACKAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AP_CALL_PACKAGE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_AP_CALL_PACKAGE_PASSTHROUGH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AP_CALL_PACKAGE_PASSTHROUGH = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_AP_LOGON_TERMINATED
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AP_LOGON_TERMINATED = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_AP_CALL_PACKAGE_UNTRUSTED
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AP_CALL_PACKAGE_UNTRUSTED = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_AP_INITIALIZE_PACKAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_AP_INITIALIZE_PACKAGE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_AP_LOGON_USER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_AP_LOGON_USER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_AP_LOGON_USER_EX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_AP_LOGON_USER_EX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_AP_CALL_PACKAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_AP_CALL_PACKAGE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_AP_CALL_PACKAGE_PASSTHROUGH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_AP_CALL_PACKAGE_PASSTHROUGH = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_AP_LOGON_TERMINATED
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_AP_LOGON_TERMINATED = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_AP_CALL_PACKAGE_UNTRUSTED
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_AP_CALL_PACKAGE_UNTRUSTED = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PSAM_CREDENTIAL_UPDATE_NOTIFY_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PSAM_CREDENTIAL_UPDATE_NOTIFY_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PSAM_CREDENTIAL_UPDATE_REGISTER_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PSAM_CREDENTIAL_UPDATE_REGISTER_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PSAM_CREDENTIAL_UPDATE_FREE_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PSAM_CREDENTIAL_UPDATE_FREE_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SAM_REGISTER_MAPPING_ELEMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SAM_REGISTER_MAPPING_ELEMENT = extern struct {
    Original: ?*i8,
    Mapped: ?*i8,
    Continuable: u8,
};
// --------------------------------------------------------
// Type: SAM_REGISTER_MAPPING_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SAM_REGISTER_MAPPING_LIST = extern struct {
    Count: u32,
    Elements: ?*SAM_REGISTER_MAPPING_ELEMENT,
};
// --------------------------------------------------------
// Type: SAM_REGISTER_MAPPING_TABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SAM_REGISTER_MAPPING_TABLE = extern struct {
    Count: u32,
    Lists: ?*SAM_REGISTER_MAPPING_LIST,
};
// --------------------------------------------------------
// Type: PSAM_CREDENTIAL_UPDATE_REGISTER_MAPPED_ENTRYPOINTS_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PSAM_CREDENTIAL_UPDATE_REGISTER_MAPPED_ENTRYPOINTS_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SEC_THREAD_START
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SEC_THREAD_START = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SECPKG_CLIENT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_CLIENT_INFO = extern struct {
    LogonId: LUID,
    ProcessID: u32,
    ThreadID: u32,
    HasTcbPrivilege: u8,
    Impersonating: u8,
    Restricted: u8,
    ClientFlags: u8,
    ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
    ClientToken: HANDLE,
};
// --------------------------------------------------------
// Type: SECPKG_CALL_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_CALL_INFO = extern struct {
    ProcessId: u32,
    ThreadId: u32,
    Attributes: u32,
    CallCount: u32,
    MechOid: ?*opaque{},
};
// --------------------------------------------------------
// Type: SECPKG_SUPPLEMENTAL_CRED
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_SUPPLEMENTAL_CRED = extern struct {
    PackageName: UNICODE_STRING,
    CredentialSize: u32,
    Credentials: ?*u8,
};
// --------------------------------------------------------
// Type: SECPKG_BYTE_VECTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_BYTE_VECTOR = extern struct {
    ByteArrayOffset: u32,
    ByteArrayLength: u16,
};
// --------------------------------------------------------
// Type: SECPKG_SHORT_VECTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_SHORT_VECTOR = extern struct {
    ShortArrayOffset: u32,
    ShortArrayCount: u16,
};
// --------------------------------------------------------
// Type: SECPKG_SUPPLIED_CREDENTIAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_SUPPLIED_CREDENTIAL = extern struct {
    cbHeaderLength: u16,
    cbStructureLength: u16,
    UserName: SECPKG_SHORT_VECTOR,
    DomainName: SECPKG_SHORT_VECTOR,
    PackedCredentials: SECPKG_BYTE_VECTOR,
    CredFlags: u32,
};
// --------------------------------------------------------
// Type: SECPKG_CREDENTIAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_CREDENTIAL = extern struct {
    Version: u64,
    cbHeaderLength: u16,
    cbStructureLength: u32,
    ClientProcess: u32,
    ClientThread: u32,
    LogonId: LUID,
    ClientToken: HANDLE,
    SessionId: u32,
    ModifiedId: LUID,
    fCredentials: u32,
    Flags: u32,
    PrincipalName: SECPKG_BYTE_VECTOR,
    PackageList: SECPKG_BYTE_VECTOR,
    MarshaledSuppliedCreds: SECPKG_BYTE_VECTOR,
};
// --------------------------------------------------------
// Type: SECPKG_SUPPLEMENTAL_CRED_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_SUPPLEMENTAL_CRED_ARRAY = extern struct {
    CredentialCount: u32,
    Credentials: ?[*]SECPKG_SUPPLEMENTAL_CRED,
};
// --------------------------------------------------------
// Type: SECPKG_SURROGATE_LOGON_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_SURROGATE_LOGON_ENTRY = extern struct {
    Type: Guid,
    Data: ?*opaque{},
};
// --------------------------------------------------------
// Type: SECPKG_SURROGATE_LOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_SURROGATE_LOGON = extern struct {
    Version: u32,
    SurrogateLogonID: LUID,
    EntryCount: u32,
    Entries: ?*SECPKG_SURROGATE_LOGON_ENTRY,
};
// --------------------------------------------------------
// Type: LSA_CALLBACK_FUNCTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CALLBACK_FUNCTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CALLBACK_FUNCTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CALLBACK_FUNCTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SECPKG_PRIMARY_CRED
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_PRIMARY_CRED = extern struct {
    LogonId: LUID,
    DownlevelName: UNICODE_STRING,
    DomainName: UNICODE_STRING,
    Password: UNICODE_STRING,
    OldPassword: UNICODE_STRING,
    UserSid: ?*opaque{},
    Flags: u32,
    DnsDomainName: UNICODE_STRING,
    Upn: UNICODE_STRING,
    LogonServer: UNICODE_STRING,
    Spare1: UNICODE_STRING,
    Spare2: UNICODE_STRING,
    Spare3: UNICODE_STRING,
    Spare4: UNICODE_STRING,
};
// --------------------------------------------------------
// Type: SECPKG_PRIMARY_CRED_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_PRIMARY_CRED_EX = extern struct {
    LogonId: LUID,
    DownlevelName: UNICODE_STRING,
    DomainName: UNICODE_STRING,
    Password: UNICODE_STRING,
    OldPassword: UNICODE_STRING,
    UserSid: ?*opaque{},
    Flags: u32,
    DnsDomainName: UNICODE_STRING,
    Upn: UNICODE_STRING,
    LogonServer: UNICODE_STRING,
    Spare1: UNICODE_STRING,
    Spare2: UNICODE_STRING,
    Spare3: UNICODE_STRING,
    Spare4: UNICODE_STRING,
    PackageId: ?*opaque{},
    PrevLogonId: LUID,
};
// --------------------------------------------------------
// Type: SECPKG_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_PARAMETERS = extern struct {
    Version: u32,
    MachineState: u32,
    SetupMode: u32,
    DomainSid: ?*opaque{},
    DomainName: UNICODE_STRING,
    DnsDomainName: UNICODE_STRING,
    DomainGuid: Guid,
};
// --------------------------------------------------------
// Type: SECPKG_EXTENDED_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SECPKG_EXTENDED_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: SECPKG_GSS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_GSS_INFO = extern struct {
    EncodedIdLength: u32,
    EncodedId: ?[*]u8,
};
// --------------------------------------------------------
// Type: SECPKG_CONTEXT_THUNKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_CONTEXT_THUNKS = extern struct {
    InfoLevelCount: u32,
    Levels: ?[*]u32,
};
// --------------------------------------------------------
// Type: SECPKG_MUTUAL_AUTH_LEVEL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_MUTUAL_AUTH_LEVEL = extern struct {
    MutualAuthLevel: u32,
};
// --------------------------------------------------------
// Type: SECPKG_WOW_CLIENT_DLL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_WOW_CLIENT_DLL = extern struct {
    WowClientDllPath: UNICODE_STRING,
};
// --------------------------------------------------------
// Type: SECPKG_SERIALIZED_OID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_SERIALIZED_OID = extern struct {
    OidLength: u32,
    OidAttributes: u32,
    OidValue: ?[*]u8,
};
// --------------------------------------------------------
// Type: SECPKG_EXTRA_OIDS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_EXTRA_OIDS = extern struct {
    OidCount: u32,
    Oids: ?[*]SECPKG_SERIALIZED_OID,
};
// --------------------------------------------------------
// Type: SECPKG_NEGO2_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_NEGO2_INFO = extern struct {
    AuthScheme: ?[*]u8,
    PackageFlags: u32,
};
// --------------------------------------------------------
// Type: SECPKG_EXTENDED_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_EXTENDED_INFORMATION = extern struct {
    Class: SECPKG_EXTENDED_INFORMATION_CLASS,
    Info: _Info_e__Union,
    // --------------------------------------------------------
    // Type: _Info_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Info_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: SECPKG_TARGETINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_TARGETINFO = extern struct {
    DomainSid: ?*opaque{},
    ComputerName: ?*u16,
};
// --------------------------------------------------------
// Type: SecPkgContext_SaslContext
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_SaslContext = extern struct {
    SaslContext: ?*opaque{},
};
// --------------------------------------------------------
// Type: SECURITY_USER_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECURITY_USER_DATA = extern struct {
    UserName: UNICODE_STRING,
    LogonDomainName: UNICODE_STRING,
    LogonServer: UNICODE_STRING,
    pSid: ?*opaque{},
};
// --------------------------------------------------------
// Type: SECPKG_CALL_PACKAGE_MESSAGE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SECPKG_CALL_PACKAGE_MESSAGE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SECPKG_CALL_PACKAGE_PIN_DC_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_CALL_PACKAGE_PIN_DC_REQUEST = extern struct {
    MessageType: u32,
    Flags: u32,
    DomainName: UNICODE_STRING,
    DcName: UNICODE_STRING,
    DcFlags: u32,
};
// --------------------------------------------------------
// Type: SECPKG_CALL_PACKAGE_UNPIN_ALL_DCS_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_CALL_PACKAGE_UNPIN_ALL_DCS_REQUEST = extern struct {
    MessageType: u32,
    Flags: u32,
};
// --------------------------------------------------------
// Type: SECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST = extern struct {
    MessageType: u32,
    OriginLogonId: LUID,
    DestinationLogonId: LUID,
    Flags: u32,
};
// --------------------------------------------------------
// Type: LSA_REDIRECTED_LOGON_INIT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_REDIRECTED_LOGON_INIT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_REDIRECTED_LOGON_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_REDIRECTED_LOGON_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_REDIRECTED_LOGON_CLEANUP_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_REDIRECTED_LOGON_CLEANUP_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_REDIRECTED_LOGON_GET_LOGON_CREDS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_REDIRECTED_LOGON_GET_LOGON_CREDS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_REDIRECTED_LOGON_GET_SUPP_CREDS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_REDIRECTED_LOGON_GET_SUPP_CREDS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_REDIRECTED_LOGON_INIT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_REDIRECTED_LOGON_INIT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_REDIRECTED_LOGON_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_REDIRECTED_LOGON_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_REDIRECTED_LOGON_GET_LOGON_CREDS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_REDIRECTED_LOGON_GET_LOGON_CREDS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_REDIRECTED_LOGON_GET_SUPP_CREDS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_REDIRECTED_LOGON_GET_SUPP_CREDS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_REDIRECTED_LOGON_CLEANUP_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_REDIRECTED_LOGON_CLEANUP_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SECPKG_REDIRECTED_LOGON_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_REDIRECTED_LOGON_BUFFER = extern struct {
    RedirectedLogonGuid: Guid,
    RedirectedLogonHandle: HANDLE,
    Init: PLSA_REDIRECTED_LOGON_INIT,
    Callback: PLSA_REDIRECTED_LOGON_CALLBACK,
    CleanupCallback: PLSA_REDIRECTED_LOGON_CLEANUP_CALLBACK,
    GetLogonCreds: PLSA_REDIRECTED_LOGON_GET_LOGON_CREDS,
    GetSupplementalCreds: PLSA_REDIRECTED_LOGON_GET_SUPP_CREDS,
};
// --------------------------------------------------------
// Type: SECPKG_POST_LOGON_USER_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_POST_LOGON_USER_INFO = extern struct {
    Flags: u32,
    LogonId: LUID,
    LinkedLogonId: LUID,
};
// --------------------------------------------------------
// Type: LSA_IMPERSONATE_CLIENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_IMPERSONATE_CLIENT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_UNLOAD_PACKAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_UNLOAD_PACKAGE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_DUPLICATE_HANDLE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_DUPLICATE_HANDLE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_SAVE_SUPPLEMENTAL_CREDENTIALS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_SAVE_SUPPLEMENTAL_CREDENTIALS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_CREATE_THREAD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CREATE_THREAD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_GET_CLIENT_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_GET_CLIENT_INFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_REGISTER_NOTIFICATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_REGISTER_NOTIFICATION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_CANCEL_NOTIFICATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CANCEL_NOTIFICATION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_MAP_BUFFER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_MAP_BUFFER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_CREATE_TOKEN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CREATE_TOKEN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SECPKG_SESSIONINFO_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SECPKG_SESSIONINFO_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: LSA_CREATE_TOKEN_EX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CREATE_TOKEN_EX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_AUDIT_LOGON
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AUDIT_LOGON = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_CALL_PACKAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CALL_PACKAGE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_CALL_PACKAGEEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CALL_PACKAGEEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_CALL_PACKAGE_PASSTHROUGH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CALL_PACKAGE_PASSTHROUGH = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_GET_CALL_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_GET_CALL_INFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_CREATE_SHARED_MEMORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CREATE_SHARED_MEMORY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_ALLOCATE_SHARED_MEMORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_ALLOCATE_SHARED_MEMORY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_FREE_SHARED_MEMORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_FREE_SHARED_MEMORY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_DELETE_SHARED_MEMORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_DELETE_SHARED_MEMORY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_GET_APP_MODE_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_GET_APP_MODE_INFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_SET_APP_MODE_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_SET_APP_MODE_INFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SECPKG_NAME_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SECPKG_NAME_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: LSA_OPEN_SAM_USER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_OPEN_SAM_USER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_GET_USER_CREDENTIALS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_GET_USER_CREDENTIALS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_GET_USER_AUTH_DATA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_GET_USER_AUTH_DATA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_CLOSE_SAM_USER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CLOSE_SAM_USER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_GET_AUTH_DATA_FOR_USER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_GET_AUTH_DATA_FOR_USER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_CONVERT_AUTH_DATA_TO_TOKEN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CONVERT_AUTH_DATA_TO_TOKEN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_CRACK_SINGLE_NAME
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CRACK_SINGLE_NAME = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_AUDIT_ACCOUNT_LOGON
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AUDIT_ACCOUNT_LOGON = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_CLIENT_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CLIENT_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_REGISTER_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_REGISTER_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_GET_EXTENDED_CALL_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_GET_EXTENDED_CALL_FLAGS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SECPKG_EVENT_PACKAGE_CHANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_EVENT_PACKAGE_CHANGE = extern struct {
    ChangeType: u32,
    PackageId: ?*opaque{},
    PackageName: UNICODE_STRING,
};
// --------------------------------------------------------
// Type: SECPKG_EVENT_ROLE_CHANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_EVENT_ROLE_CHANGE = extern struct {
    PreviousRole: u32,
    NewRole: u32,
};
// --------------------------------------------------------
// Type: SECPKG_EVENT_NOTIFY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_EVENT_NOTIFY = extern struct {
    EventClass: u32,
    Reserved: u32,
    EventDataSize: u32,
    EventData: ?*opaque{},
    PackageParameter: ?*opaque{},
};
// --------------------------------------------------------
// Type: LSA_UPDATE_PRIMARY_CREDENTIALS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_UPDATE_PRIMARY_CREDENTIALS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_PROTECT_MEMORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_PROTECT_MEMORY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_OPEN_TOKEN_BY_LOGON_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_OPEN_TOKEN_BY_LOGON_ID = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_EXPAND_AUTH_DATA_FOR_DOMAIN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_EXPAND_AUTH_DATA_FOR_DOMAIN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRED_FETCH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CRED_FETCH = *opaque{
};
// --------------------------------------------------------
// Type: LSA_GET_SERVICE_ACCOUNT_PASSWORD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_GET_SERVICE_ACCOUNT_PASSWORD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_AUDIT_LOGON_EX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AUDIT_LOGON_EX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_CHECK_PROTECTED_USER_BY_TOKEN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_CHECK_PROTECTED_USER_BY_TOKEN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_QUERY_CLIENT_REQUEST
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_QUERY_CLIENT_REQUEST = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_IMPERSONATE_CLIENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_IMPERSONATE_CLIENT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_UNLOAD_PACKAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_UNLOAD_PACKAGE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_DUPLICATE_HANDLE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_DUPLICATE_HANDLE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_SAVE_SUPPLEMENTAL_CREDENTIALS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_SAVE_SUPPLEMENTAL_CREDENTIALS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CREATE_THREAD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CREATE_THREAD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_GET_CLIENT_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_GET_CLIENT_INFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_REGISTER_NOTIFICATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_REGISTER_NOTIFICATION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CANCEL_NOTIFICATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CANCEL_NOTIFICATION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_MAP_BUFFER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_MAP_BUFFER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CREATE_TOKEN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CREATE_TOKEN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_AUDIT_LOGON
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_AUDIT_LOGON = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CALL_PACKAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CALL_PACKAGE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CALL_PACKAGEEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CALL_PACKAGEEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_GET_CALL_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_GET_CALL_INFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CREATE_SHARED_MEMORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CREATE_SHARED_MEMORY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_ALLOCATE_SHARED_MEMORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_ALLOCATE_SHARED_MEMORY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_FREE_SHARED_MEMORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_FREE_SHARED_MEMORY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_DELETE_SHARED_MEMORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_DELETE_SHARED_MEMORY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_OPEN_SAM_USER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_OPEN_SAM_USER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_GET_USER_CREDENTIALS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_GET_USER_CREDENTIALS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_GET_USER_AUTH_DATA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_GET_USER_AUTH_DATA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CLOSE_SAM_USER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CLOSE_SAM_USER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CONVERT_AUTH_DATA_TO_TOKEN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CONVERT_AUTH_DATA_TO_TOKEN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CLIENT_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CLIENT_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_REGISTER_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_REGISTER_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_UPDATE_PRIMARY_CREDENTIALS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_UPDATE_PRIMARY_CREDENTIALS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_GET_AUTH_DATA_FOR_USER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_GET_AUTH_DATA_FOR_USER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CRACK_SINGLE_NAME
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CRACK_SINGLE_NAME = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_AUDIT_ACCOUNT_LOGON
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_AUDIT_ACCOUNT_LOGON = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CALL_PACKAGE_PASSTHROUGH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CALL_PACKAGE_PASSTHROUGH = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_PROTECT_MEMORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_PROTECT_MEMORY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_OPEN_TOKEN_BY_LOGON_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_OPEN_TOKEN_BY_LOGON_ID = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_EXPAND_AUTH_DATA_FOR_DOMAIN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_EXPAND_AUTH_DATA_FOR_DOMAIN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CREATE_TOKEN_EX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CREATE_TOKEN_EX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_GET_EXTENDED_CALL_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_GET_EXTENDED_CALL_FLAGS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_GET_SERVICE_ACCOUNT_PASSWORD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_GET_SERVICE_ACCOUNT_PASSWORD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_AUDIT_LOGON_EX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_AUDIT_LOGON_EX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_CHECK_PROTECTED_USER_BY_TOKEN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_CHECK_PROTECTED_USER_BY_TOKEN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_QUERY_CLIENT_REQUEST
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_QUERY_CLIENT_REQUEST = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_GET_APP_MODE_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_GET_APP_MODE_INFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_SET_APP_MODE_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_SET_APP_MODE_INFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ENCRYPTED_CREDENTIALW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENCRYPTED_CREDENTIALW = extern struct {
    Cred: CREDENTIALW,
    ClearCredentialBlobSize: u32,
};
// --------------------------------------------------------
// Type: CredReadFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CredReadFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CredReadDomainCredentialsFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CredReadDomainCredentialsFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CredFreeCredentialsFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CredFreeCredentialsFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CredWriteFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CredWriteFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CrediUnmarshalandDecodeStringFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CrediUnmarshalandDecodeStringFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SEC_WINNT_AUTH_IDENTITY32
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_WINNT_AUTH_IDENTITY32 = extern struct {
    User: u32,
    UserLength: u32,
    Domain: u32,
    DomainLength: u32,
    Password: u32,
    PasswordLength: u32,
    Flags: u32,
};
// --------------------------------------------------------
// Type: SEC_WINNT_AUTH_IDENTITY_EX32
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_WINNT_AUTH_IDENTITY_EX32 = extern struct {
    Version: u32,
    Length: u32,
    User: u32,
    UserLength: u32,
    Domain: u32,
    DomainLength: u32,
    Password: u32,
    PasswordLength: u32,
    Flags: u32,
    PackageList: u32,
    PackageListLength: u32,
};
// --------------------------------------------------------
// Type: LSA_SECPKG_FUNCTION_TABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LSA_SECPKG_FUNCTION_TABLE = extern struct {
    CreateLogonSession: PLSA_CREATE_LOGON_SESSION,
    DeleteLogonSession: PLSA_DELETE_LOGON_SESSION,
    AddCredential: PLSA_ADD_CREDENTIAL,
    GetCredentials: PLSA_GET_CREDENTIALS,
    DeleteCredential: PLSA_DELETE_CREDENTIAL,
    AllocateLsaHeap: PLSA_ALLOCATE_LSA_HEAP,
    FreeLsaHeap: PLSA_FREE_LSA_HEAP,
    AllocateClientBuffer: PLSA_ALLOCATE_CLIENT_BUFFER,
    FreeClientBuffer: PLSA_FREE_CLIENT_BUFFER,
    CopyToClientBuffer: PLSA_COPY_TO_CLIENT_BUFFER,
    CopyFromClientBuffer: PLSA_COPY_FROM_CLIENT_BUFFER,
    ImpersonateClient: PLSA_IMPERSONATE_CLIENT,
    UnloadPackage: PLSA_UNLOAD_PACKAGE,
    DuplicateHandle: PLSA_DUPLICATE_HANDLE,
    SaveSupplementalCredentials: PLSA_SAVE_SUPPLEMENTAL_CREDENTIALS,
    CreateThread: PLSA_CREATE_THREAD,
    GetClientInfo: PLSA_GET_CLIENT_INFO,
    RegisterNotification: PLSA_REGISTER_NOTIFICATION,
    CancelNotification: PLSA_CANCEL_NOTIFICATION,
    MapBuffer: PLSA_MAP_BUFFER,
    CreateToken: PLSA_CREATE_TOKEN,
    AuditLogon: PLSA_AUDIT_LOGON,
    CallPackage: PLSA_CALL_PACKAGE,
    FreeReturnBuffer: PLSA_FREE_LSA_HEAP,
    GetCallInfo: PLSA_GET_CALL_INFO,
    CallPackageEx: PLSA_CALL_PACKAGEEX,
    CreateSharedMemory: PLSA_CREATE_SHARED_MEMORY,
    AllocateSharedMemory: PLSA_ALLOCATE_SHARED_MEMORY,
    FreeSharedMemory: PLSA_FREE_SHARED_MEMORY,
    DeleteSharedMemory: PLSA_DELETE_SHARED_MEMORY,
    OpenSamUser: PLSA_OPEN_SAM_USER,
    GetUserCredentials: PLSA_GET_USER_CREDENTIALS,
    GetUserAuthData: PLSA_GET_USER_AUTH_DATA,
    CloseSamUser: PLSA_CLOSE_SAM_USER,
    ConvertAuthDataToToken: PLSA_CONVERT_AUTH_DATA_TO_TOKEN,
    ClientCallback: PLSA_CLIENT_CALLBACK,
    UpdateCredentials: PLSA_UPDATE_PRIMARY_CREDENTIALS,
    GetAuthDataForUser: PLSA_GET_AUTH_DATA_FOR_USER,
    CrackSingleName: PLSA_CRACK_SINGLE_NAME,
    AuditAccountLogon: PLSA_AUDIT_ACCOUNT_LOGON,
    CallPackagePassthrough: PLSA_CALL_PACKAGE_PASSTHROUGH,
    CrediRead: ?*CredReadFn,
    CrediReadDomainCredentials: ?*CredReadDomainCredentialsFn,
    CrediFreeCredentials: ?*CredFreeCredentialsFn,
    LsaProtectMemory: PLSA_PROTECT_MEMORY,
    LsaUnprotectMemory: PLSA_PROTECT_MEMORY,
    OpenTokenByLogonId: PLSA_OPEN_TOKEN_BY_LOGON_ID,
    ExpandAuthDataForDomain: PLSA_EXPAND_AUTH_DATA_FOR_DOMAIN,
    AllocatePrivateHeap: PLSA_ALLOCATE_PRIVATE_HEAP,
    FreePrivateHeap: PLSA_FREE_PRIVATE_HEAP,
    CreateTokenEx: PLSA_CREATE_TOKEN_EX,
    CrediWrite: ?*CredWriteFn,
    CrediUnmarshalandDecodeString: ?*CrediUnmarshalandDecodeStringFn,
    DummyFunction6: PLSA_PROTECT_MEMORY,
    GetExtendedCallFlags: PLSA_GET_EXTENDED_CALL_FLAGS,
    DuplicateTokenHandle: PLSA_DUPLICATE_HANDLE,
    GetServiceAccountPassword: PLSA_GET_SERVICE_ACCOUNT_PASSWORD,
    DummyFunction7: PLSA_PROTECT_MEMORY,
    AuditLogonEx: PLSA_AUDIT_LOGON_EX,
    CheckProtectedUserByToken: PLSA_CHECK_PROTECTED_USER_BY_TOKEN,
    QueryClientRequest: PLSA_QUERY_CLIENT_REQUEST,
    GetAppModeInfo: PLSA_GET_APP_MODE_INFO,
    SetAppModeInfo: PLSA_SET_APP_MODE_INFO,
};
// --------------------------------------------------------
// Type: LSA_LOCATE_PKG_BY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_LOCATE_PKG_BY_ID = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_LOCATE_PKG_BY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_LOCATE_PKG_BY_ID = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SECPKG_DLL_FUNCTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_DLL_FUNCTIONS = extern struct {
    AllocateHeap: PLSA_ALLOCATE_LSA_HEAP,
    FreeHeap: PLSA_FREE_LSA_HEAP,
    RegisterCallback: PLSA_REGISTER_CALLBACK,
    LocatePackageById: PLSA_LOCATE_PKG_BY_ID,
};
// --------------------------------------------------------
// Type: SpInitializeFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpInitializeFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpShutdownFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpShutdownFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpGetInfoFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpGetInfoFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpGetExtendedInformationFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpGetExtendedInformationFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpSetExtendedInformationFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpSetExtendedInformationFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_AP_LOGON_USER_EX2
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AP_LOGON_USER_EX2 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_AP_LOGON_USER_EX2
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_AP_LOGON_USER_EX2 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_AP_LOGON_USER_EX3
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AP_LOGON_USER_EX3 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_AP_LOGON_USER_EX3
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_AP_LOGON_USER_EX3 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_AP_PRE_LOGON_USER_SURROGATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AP_PRE_LOGON_USER_SURROGATE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_AP_PRE_LOGON_USER_SURROGATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_AP_PRE_LOGON_USER_SURROGATE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_AP_POST_LOGON_USER_SURROGATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AP_POST_LOGON_USER_SURROGATE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLSA_AP_POST_LOGON_USER_SURROGATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLSA_AP_POST_LOGON_USER_SURROGATE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpAcceptCredentialsFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpAcceptCredentialsFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpAcquireCredentialsHandleFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpAcquireCredentialsHandleFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpFreeCredentialsHandleFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpFreeCredentialsHandleFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpQueryCredentialsAttributesFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpQueryCredentialsAttributesFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpSetCredentialsAttributesFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpSetCredentialsAttributesFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpAddCredentialsFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpAddCredentialsFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpSaveCredentialsFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpSaveCredentialsFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpGetCredentialsFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpGetCredentialsFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpDeleteCredentialsFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpDeleteCredentialsFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpInitLsaModeContextFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpInitLsaModeContextFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpDeleteContextFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpDeleteContextFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpApplyControlTokenFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpApplyControlTokenFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpAcceptLsaModeContextFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpAcceptLsaModeContextFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpGetUserInfoFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpGetUserInfoFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpQueryContextAttributesFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpQueryContextAttributesFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpSetContextAttributesFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpSetContextAttributesFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpChangeAccountPasswordFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpChangeAccountPasswordFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpQueryMetaDataFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpQueryMetaDataFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpExchangeMetaDataFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpExchangeMetaDataFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpGetCredUIContextFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpGetCredUIContextFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpUpdateCredentialsFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpUpdateCredentialsFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpValidateTargetInfoFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpValidateTargetInfoFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LSA_AP_POST_LOGON_USER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LSA_AP_POST_LOGON_USER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpGetRemoteCredGuardLogonBufferFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpGetRemoteCredGuardLogonBufferFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpGetRemoteCredGuardSupplementalCredsFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpGetRemoteCredGuardSupplementalCredsFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpGetTbalSupplementalCredsFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpGetTbalSupplementalCredsFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SECPKG_FUNCTION_TABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_FUNCTION_TABLE = extern struct {
    InitializePackage: PLSA_AP_INITIALIZE_PACKAGE,
    LogonUserA: PLSA_AP_LOGON_USER,
    CallPackage: PLSA_AP_CALL_PACKAGE,
    LogonTerminated: PLSA_AP_LOGON_TERMINATED,
    CallPackageUntrusted: PLSA_AP_CALL_PACKAGE_UNTRUSTED,
    CallPackagePassthrough: PLSA_AP_CALL_PACKAGE_PASSTHROUGH,
    LogonUserExA: PLSA_AP_LOGON_USER_EX,
    LogonUserEx2: PLSA_AP_LOGON_USER_EX2,
    Initialize: ?*SpInitializeFn,
    Shutdown: ?*SpShutdownFn,
    GetInfo: ?*SpGetInfoFn,
    AcceptCredentials: ?*SpAcceptCredentialsFn,
    AcquireCredentialsHandleA: ?*SpAcquireCredentialsHandleFn,
    QueryCredentialsAttributesA: ?*SpQueryCredentialsAttributesFn,
    FreeCredentialsHandle: ?*SpFreeCredentialsHandleFn,
    SaveCredentials: ?*SpSaveCredentialsFn,
    GetCredentials: ?*SpGetCredentialsFn,
    DeleteCredentials: ?*SpDeleteCredentialsFn,
    InitLsaModeContext: ?*SpInitLsaModeContextFn,
    AcceptLsaModeContext: ?*SpAcceptLsaModeContextFn,
    DeleteContext: ?*SpDeleteContextFn,
    ApplyControlToken: ?*SpApplyControlTokenFn,
    GetUserInfo: ?*SpGetUserInfoFn,
    GetExtendedInformation: ?*SpGetExtendedInformationFn,
    QueryContextAttributesA: ?*SpQueryContextAttributesFn,
    AddCredentialsA: ?*SpAddCredentialsFn,
    SetExtendedInformation: ?*SpSetExtendedInformationFn,
    SetContextAttributesA: ?*SpSetContextAttributesFn,
    SetCredentialsAttributesA: ?*SpSetCredentialsAttributesFn,
    ChangeAccountPasswordA: ?*SpChangeAccountPasswordFn,
    QueryMetaData: ?*SpQueryMetaDataFn,
    ExchangeMetaData: ?*SpExchangeMetaDataFn,
    GetCredUIContext: ?*SpGetCredUIContextFn,
    UpdateCredentials: ?*SpUpdateCredentialsFn,
    ValidateTargetInfo: ?*SpValidateTargetInfoFn,
    PostLogonUser: ?*LSA_AP_POST_LOGON_USER,
    GetRemoteCredGuardLogonBuffer: ?*SpGetRemoteCredGuardLogonBufferFn,
    GetRemoteCredGuardSupplementalCreds: ?*SpGetRemoteCredGuardSupplementalCredsFn,
    GetTbalSupplementalCreds: ?*SpGetTbalSupplementalCredsFn,
    LogonUserEx3: PLSA_AP_LOGON_USER_EX3,
    PreLogonUserSurrogate: PLSA_AP_PRE_LOGON_USER_SURROGATE,
    PostLogonUserSurrogate: PLSA_AP_POST_LOGON_USER_SURROGATE,
};
// --------------------------------------------------------
// Type: SpInstanceInitFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpInstanceInitFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpInitUserModeContextFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpInitUserModeContextFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpMakeSignatureFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpMakeSignatureFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpVerifySignatureFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpVerifySignatureFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpSealMessageFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpSealMessageFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpUnsealMessageFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpUnsealMessageFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpGetContextTokenFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpGetContextTokenFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpExportSecurityContextFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpExportSecurityContextFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpImportSecurityContextFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpImportSecurityContextFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpCompleteAuthTokenFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpCompleteAuthTokenFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpFormatCredentialsFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpFormatCredentialsFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpMarshallSupplementalCredsFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpMarshallSupplementalCredsFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SECPKG_USER_FUNCTION_TABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_USER_FUNCTION_TABLE = extern struct {
    InstanceInit: ?*SpInstanceInitFn,
    InitUserModeContext: ?*SpInitUserModeContextFn,
    MakeSignature: ?*SpMakeSignatureFn,
    VerifySignature: ?*SpVerifySignatureFn,
    SealMessage: ?*SpSealMessageFn,
    UnsealMessage: ?*SpUnsealMessageFn,
    GetContextToken: ?*SpGetContextTokenFn,
    QueryContextAttributesA: ?*SpQueryContextAttributesFn,
    CompleteAuthToken: ?*SpCompleteAuthTokenFn,
    DeleteUserModeContext: ?*SpDeleteContextFn,
    FormatCredentials: ?*SpFormatCredentialsFn,
    MarshallSupplementalCreds: ?*SpMarshallSupplementalCredsFn,
    ExportContext: ?*SpExportSecurityContextFn,
    ImportContext: ?*SpImportSecurityContextFn,
};
// --------------------------------------------------------
// Type: SpLsaModeInitializeFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpLsaModeInitializeFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SpUserModeInitializeFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SpUserModeInitializeFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KSEC_CONTEXT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KSEC_CONTEXT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: KSEC_LIST_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KSEC_LIST_ENTRY = extern struct {
    List: LIST_ENTRY,
    RefCount: i32,
    Signature: u32,
    OwningList: ?*opaque{},
    Reserved: ?*opaque{},
};
// --------------------------------------------------------
// Type: KSEC_CREATE_CONTEXT_LIST
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KSEC_CREATE_CONTEXT_LIST = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KSEC_INSERT_LIST_ENTRY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KSEC_INSERT_LIST_ENTRY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KSEC_REFERENCE_LIST_ENTRY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KSEC_REFERENCE_LIST_ENTRY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KSEC_DEREFERENCE_LIST_ENTRY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KSEC_DEREFERENCE_LIST_ENTRY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KSEC_SERIALIZE_WINNT_AUTH_DATA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KSEC_SERIALIZE_WINNT_AUTH_DATA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KSEC_SERIALIZE_SCHANNEL_AUTH_DATA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KSEC_SERIALIZE_SCHANNEL_AUTH_DATA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PKSEC_CREATE_CONTEXT_LIST
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PKSEC_CREATE_CONTEXT_LIST = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PKSEC_INSERT_LIST_ENTRY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PKSEC_INSERT_LIST_ENTRY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PKSEC_REFERENCE_LIST_ENTRY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PKSEC_REFERENCE_LIST_ENTRY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PKSEC_DEREFERENCE_LIST_ENTRY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PKSEC_DEREFERENCE_LIST_ENTRY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PKSEC_SERIALIZE_WINNT_AUTH_DATA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PKSEC_SERIALIZE_WINNT_AUTH_DATA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PKSEC_SERIALIZE_SCHANNEL_AUTH_DATA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PKSEC_SERIALIZE_SCHANNEL_AUTH_DATA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KSEC_LOCATE_PKG_BY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KSEC_LOCATE_PKG_BY_ID = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PKSEC_LOCATE_PKG_BY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PKSEC_LOCATE_PKG_BY_ID = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SECPKG_KERNEL_FUNCTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_KERNEL_FUNCTIONS = extern struct {
    AllocateHeap: PLSA_ALLOCATE_LSA_HEAP,
    FreeHeap: PLSA_FREE_LSA_HEAP,
    CreateContextList: PKSEC_CREATE_CONTEXT_LIST,
    InsertListEntry: PKSEC_INSERT_LIST_ENTRY,
    ReferenceListEntry: PKSEC_REFERENCE_LIST_ENTRY,
    DereferenceListEntry: PKSEC_DEREFERENCE_LIST_ENTRY,
    SerializeWinntAuthData: PKSEC_SERIALIZE_WINNT_AUTH_DATA,
    SerializeSchannelAuthData: PKSEC_SERIALIZE_SCHANNEL_AUTH_DATA,
    LocatePackageById: PKSEC_LOCATE_PKG_BY_ID,
};
// --------------------------------------------------------
// Type: KspInitPackageFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KspInitPackageFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KspDeleteContextFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KspDeleteContextFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KspInitContextFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KspInitContextFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KspMakeSignatureFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KspMakeSignatureFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KspVerifySignatureFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KspVerifySignatureFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KspSealMessageFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KspSealMessageFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KspUnsealMessageFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KspUnsealMessageFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KspGetTokenFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KspGetTokenFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KspQueryAttributesFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KspQueryAttributesFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KspCompleteTokenFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KspCompleteTokenFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KspMapHandleFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KspMapHandleFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KspSetPagingModeFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KspSetPagingModeFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KspSerializeAuthDataFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KspSerializeAuthDataFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SECPKG_KERNEL_FUNCTION_TABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECPKG_KERNEL_FUNCTION_TABLE = extern struct {
    Initialize: ?*KspInitPackageFn,
    DeleteContext: ?*KspDeleteContextFn,
    InitContext: ?*KspInitContextFn,
    MapHandle: ?*KspMapHandleFn,
    Sign: ?*KspMakeSignatureFn,
    Verify: ?*KspVerifySignatureFn,
    Seal: ?*KspSealMessageFn,
    Unseal: ?*KspUnsealMessageFn,
    GetToken: ?*KspGetTokenFn,
    QueryAttributes: ?*KspQueryAttributesFn,
    CompleteToken: ?*KspCompleteTokenFn,
    ExportContext: ?*SpExportSecurityContextFn,
    ImportContext: ?*SpImportSecurityContextFn,
    SetPackagePagingMode: ?*KspSetPagingModeFn,
    SerializeAuthData: ?*KspSerializeAuthDataFn,
};
// --------------------------------------------------------
// Type: SecPkgCred_SupportedAlgs
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgCred_SupportedAlgs = extern struct {
    cSupportedAlgs: u32,
    palgSupportedAlgs: ?*u32,
};
// --------------------------------------------------------
// Type: SecPkgCred_CipherStrengths
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgCred_CipherStrengths = extern struct {
    dwMinimumCipherStrength: u32,
    dwMaximumCipherStrength: u32,
};
// --------------------------------------------------------
// Type: SecPkgCred_SupportedProtocols
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgCred_SupportedProtocols = extern struct {
    grbitProtocol: u32,
};
// --------------------------------------------------------
// Type: SecPkgCred_ClientCertPolicy
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgCred_ClientCertPolicy = extern struct {
    dwFlags: u32,
    guidPolicyId: Guid,
    dwCertFlags: u32,
    dwUrlRetrievalTimeout: u32,
    fCheckRevocationFreshnessTime: BOOL,
    dwRevocationFreshnessTime: u32,
    fOmitUsageCheck: BOOL,
    pwszSslCtlStoreName: ?*u16,
    pwszSslCtlIdentifier: ?*u16,
};
// --------------------------------------------------------
// Type: eTlsSignatureAlgorithm
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const eTlsSignatureAlgorithm = *opaque{
};
// --------------------------------------------------------
// Type: eTlsHashAlgorithm
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const eTlsHashAlgorithm = *opaque{
};
// --------------------------------------------------------
// Type: SecPkgContext_RemoteCredentialInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_RemoteCredentialInfo = extern struct {
    cbCertificateChain: u32,
    pbCertificateChain: ?*u8,
    cCertificates: u32,
    fFlags: u32,
    dwBits: u32,
};
// --------------------------------------------------------
// Type: SecPkgContext_LocalCredentialInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_LocalCredentialInfo = extern struct {
    cbCertificateChain: u32,
    pbCertificateChain: ?*u8,
    cCertificates: u32,
    fFlags: u32,
    dwBits: u32,
};
// --------------------------------------------------------
// Type: SecPkgContext_ClientCertPolicyResult
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_ClientCertPolicyResult = extern struct {
    dwPolicyResult: HRESULT,
    guidPolicyId: Guid,
};
// --------------------------------------------------------
// Type: SecPkgContext_IssuerListInfoEx
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_IssuerListInfoEx = extern struct {
    aIssuers: ?*CRYPTOAPI_BLOB,
    cIssuers: u32,
};
// --------------------------------------------------------
// Type: SecPkgContext_ConnectionInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_ConnectionInfo = extern struct {
    dwProtocol: u32,
    aiCipher: u32,
    dwCipherStrength: u32,
    aiHash: u32,
    dwHashStrength: u32,
    aiExch: u32,
    dwExchStrength: u32,
};
// --------------------------------------------------------
// Type: SecPkgContext_ConnectionInfoEx
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_ConnectionInfoEx = extern struct {
    dwVersion: u32,
    dwProtocol: u32,
    szCipher: ?[*]u16,
    dwCipherStrength: u32,
    szHash: ?[*]u16,
    dwHashStrength: u32,
    szExchange: ?[*]u16,
    dwExchStrength: u32,
};
// --------------------------------------------------------
// Type: SecPkgContext_CipherInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_CipherInfo = extern struct {
    dwVersion: u32,
    dwProtocol: u32,
    dwCipherSuite: u32,
    dwBaseCipherSuite: u32,
    szCipherSuite: ?[*]u16,
    szCipher: ?[*]u16,
    dwCipherLen: u32,
    dwCipherBlockLen: u32,
    szHash: ?[*]u16,
    dwHashLen: u32,
    szExchange: ?[*]u16,
    dwMinExchangeLen: u32,
    dwMaxExchangeLen: u32,
    szCertificate: ?[*]u16,
    dwKeyType: u32,
};
// --------------------------------------------------------
// Type: SecPkgContext_EapKeyBlock
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_EapKeyBlock = extern struct {
    rgbKeys: ?[*]u8,
    rgbIVs: ?[*]u8,
};
// --------------------------------------------------------
// Type: SecPkgContext_MappedCredAttr
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_MappedCredAttr = extern struct {
    dwAttribute: u32,
    pvBuffer: ?*opaque{},
};
// --------------------------------------------------------
// Type: SecPkgContext_SessionInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_SessionInfo = extern struct {
    dwFlags: u32,
    cbSessionId: u32,
    rgbSessionId: ?[*]u8,
};
// --------------------------------------------------------
// Type: SecPkgContext_SessionAppData
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_SessionAppData = extern struct {
    dwFlags: u32,
    cbAppData: u32,
    pbAppData: ?*u8,
};
// --------------------------------------------------------
// Type: SecPkgContext_EapPrfInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_EapPrfInfo = extern struct {
    dwVersion: u32,
    cbPrfData: u32,
    pbPrfData: ?*u8,
};
// --------------------------------------------------------
// Type: SecPkgContext_SupportedSignatures
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_SupportedSignatures = extern struct {
    cSignatureAndHashAlgorithms: u16,
    pSignatureAndHashAlgorithms: ?*u16,
};
// --------------------------------------------------------
// Type: SecPkgContext_Certificates
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_Certificates = extern struct {
    cCertificates: u32,
    cbCertificateChain: u32,
    pbCertificateChain: ?*u8,
};
// --------------------------------------------------------
// Type: SecPkgContext_CertInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_CertInfo = extern struct {
    dwVersion: u32,
    cbSubjectName: u32,
    pwszSubjectName: ?*u16,
    cbIssuerName: u32,
    pwszIssuerName: ?*u16,
    dwKeySize: u32,
};
// --------------------------------------------------------
// Type: SecPkgContext_UiInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_UiInfo = extern struct {
    hParentWindow: HWND,
};
// --------------------------------------------------------
// Type: SecPkgContext_EarlyStart
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_EarlyStart = extern struct {
    dwEarlyStartFlags: u32,
};
// --------------------------------------------------------
// Type: SecPkgContext_KeyingMaterialInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_KeyingMaterialInfo = extern struct {
    cbLabel: u16,
    pszLabel: ?*i8,
    cbContextValue: u16,
    pbContextValue: ?*u8,
    cbKeyingMaterial: u32,
};
// --------------------------------------------------------
// Type: SecPkgContext_KeyingMaterial
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_KeyingMaterial = extern struct {
    cbKeyingMaterial: u32,
    pbKeyingMaterial: ?*u8,
};
// --------------------------------------------------------
// Type: SecPkgContext_KeyingMaterial_Inproc
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_KeyingMaterial_Inproc = extern struct {
    cbLabel: u16,
    pszLabel: ?*i8,
    cbContextValue: u16,
    pbContextValue: ?*u8,
    cbKeyingMaterial: u32,
    pbKeyingMaterial: ?*u8,
};
// --------------------------------------------------------
// Type: SecPkgContext_SrtpParameters
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_SrtpParameters = extern struct {
    ProtectionProfile: u16,
    MasterKeyIdentifierSize: u8,
    MasterKeyIdentifier: ?*u8,
};
// --------------------------------------------------------
// Type: SecPkgContext_TokenBinding
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SecPkgContext_TokenBinding = extern struct {
    MajorVersion: u8,
    MinorVersion: u8,
    KeyParametersSize: u16,
    KeyParameters: ?*u8,
};
// --------------------------------------------------------
// Type: _HMAPPER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _HMAPPER = opaque {
};
// --------------------------------------------------------
// Type: SCHANNEL_CRED
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCHANNEL_CRED = extern struct {
    dwVersion: u32,
    cCreds: u32,
    paCred: ?*?*CERT_CONTEXT,
    hRootStore: ?*opaque{},
    cMappers: u32,
    aphMappers: ?*?*_HMAPPER,
    cSupportedAlgs: u32,
    palgSupportedAlgs: ?*u32,
    grbitEnabledProtocols: u32,
    dwMinimumCipherStrength: u32,
    dwMaximumCipherStrength: u32,
    dwSessionLifespan: u32,
    dwFlags: u32,
    dwCredFormat: u32,
};
// --------------------------------------------------------
// Type: SEND_GENERIC_TLS_EXTENSION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEND_GENERIC_TLS_EXTENSION = extern struct {
    ExtensionType: u16,
    HandshakeType: u16,
    Flags: u32,
    BufferSize: u16,
    Buffer: ?[*]u8,
};
// --------------------------------------------------------
// Type: TLS_EXTENSION_SUBSCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TLS_EXTENSION_SUBSCRIPTION = extern struct {
    ExtensionType: u16,
    HandshakeType: u16,
};
// --------------------------------------------------------
// Type: SUBSCRIBE_GENERIC_TLS_EXTENSION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SUBSCRIBE_GENERIC_TLS_EXTENSION = extern struct {
    Flags: u32,
    SubscriptionsCount: u32,
    Subscriptions: ?[*]TLS_EXTENSION_SUBSCRIPTION,
};
// --------------------------------------------------------
// Type: SCHANNEL_CERT_HASH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCHANNEL_CERT_HASH = extern struct {
    dwLength: u32,
    dwFlags: u32,
    hProv: ?*opaque{},
    ShaHash: ?[*]u8,
};
// --------------------------------------------------------
// Type: SCHANNEL_CERT_HASH_STORE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCHANNEL_CERT_HASH_STORE = extern struct {
    dwLength: u32,
    dwFlags: u32,
    hProv: ?*opaque{},
    ShaHash: ?[*]u8,
    pwszStoreName: ?[*]u16,
};
// --------------------------------------------------------
// Type: SCHANNEL_ALERT_TOKEN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCHANNEL_ALERT_TOKEN = extern struct {
    dwTokenType: u32,
    dwAlertType: u32,
    dwAlertNumber: u32,
};
// --------------------------------------------------------
// Type: SCHANNEL_SESSION_TOKEN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCHANNEL_SESSION_TOKEN = extern struct {
    dwTokenType: u32,
    dwFlags: u32,
};
// --------------------------------------------------------
// Type: SCHANNEL_CLIENT_SIGNATURE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCHANNEL_CLIENT_SIGNATURE = extern struct {
    cbLength: u32,
    aiHash: u32,
    cbHash: u32,
    HashValue: ?[*]u8,
    CertThumbprint: ?[*]u8,
};
// --------------------------------------------------------
// Type: SSL_EMPTY_CACHE_FN_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SSL_EMPTY_CACHE_FN_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SSL_EMPTY_CACHE_FN_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SSL_EMPTY_CACHE_FN_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SSL_CREDENTIAL_CERTIFICATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SSL_CREDENTIAL_CERTIFICATE = extern struct {
    cbPrivateKey: u32,
    pPrivateKey: ?*u8,
    cbCertificate: u32,
    pCertificate: ?*u8,
    pszPassword: ?*i8,
};
// --------------------------------------------------------
// Type: SCH_CRED
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCH_CRED = extern struct {
    dwVersion: u32,
    cCreds: u32,
    paSecret: ?*?*opaque{},
    paPublic: ?*?*opaque{},
    cMappers: u32,
    aphMappers: ?*?*_HMAPPER,
};
// --------------------------------------------------------
// Type: SCH_CRED_SECRET_CAPI
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCH_CRED_SECRET_CAPI = extern struct {
    dwType: u32,
    hProv: ?*opaque{},
};
// --------------------------------------------------------
// Type: SCH_CRED_SECRET_PRIVKEY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCH_CRED_SECRET_PRIVKEY = extern struct {
    dwType: u32,
    pPrivateKey: ?*u8,
    cbPrivateKey: u32,
    pszPassword: ?*i8,
};
// --------------------------------------------------------
// Type: SCH_CRED_PUBLIC_CERTCHAIN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCH_CRED_PUBLIC_CERTCHAIN = extern struct {
    dwType: u32,
    cbCertChain: u32,
    pCertChain: ?*u8,
};
// --------------------------------------------------------
// Type: PctPublicKey
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PctPublicKey = extern struct {
    Type: u32,
    cbKey: u32,
    pKey: ?[*]u8,
};
// --------------------------------------------------------
// Type: X509Certificate
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const X509Certificate = extern struct {
    Version: u32,
    SerialNumber: ?[*]u32,
    SignatureAlgorithm: u32,
    ValidFrom: FILETIME,
    ValidUntil: FILETIME,
    pszIssuer: ?*i8,
    pszSubject: ?*i8,
    pPublicKey: ?*PctPublicKey,
};
// --------------------------------------------------------
// Type: SSL_CRACK_CERTIFICATE_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SSL_CRACK_CERTIFICATE_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SSL_FREE_CERTIFICATE_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SSL_FREE_CERTIFICATE_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SslGetServerIdentityFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SslGetServerIdentityFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SCH_EXTENSION_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCH_EXTENSION_DATA = extern struct {
    ExtensionType: u16,
    pExtData: ?*u8,
    cbExtData: u32,
};
// --------------------------------------------------------
// Type: SchGetExtensionsOptions
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SchGetExtensionsOptions = *opaque{
};
// --------------------------------------------------------
// Type: SslGetExtensionsFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SslGetExtensionsFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: OLD_LARGE_INTEGER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OLD_LARGE_INTEGER = extern struct {
    LowPart: u32,
    HighPart: i32,
};
// --------------------------------------------------------
// Type: SE_OBJECT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SE_OBJECT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: TRUSTEE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TRUSTEE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: TRUSTEE_FORM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TRUSTEE_FORM = *opaque{
};
// --------------------------------------------------------
// Type: MULTIPLE_TRUSTEE_OPERATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MULTIPLE_TRUSTEE_OPERATION = *opaque{
};
// --------------------------------------------------------
// Type: OBJECTS_AND_SID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OBJECTS_AND_SID = extern struct {
    ObjectsPresent: u32,
    ObjectTypeGuid: Guid,
    InheritedObjectTypeGuid: Guid,
    pSid: ?*SID,
};
// --------------------------------------------------------
// Type: OBJECTS_AND_NAME_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OBJECTS_AND_NAME_A = extern struct {
    ObjectsPresent: u32,
    ObjectType: SE_OBJECT_TYPE,
    ObjectTypeName: ?*i8,
    InheritedObjectTypeName: ?*i8,
    ptstrName: ?*i8,
};
// --------------------------------------------------------
// Type: OBJECTS_AND_NAME_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OBJECTS_AND_NAME_W = extern struct {
    ObjectsPresent: u32,
    ObjectType: SE_OBJECT_TYPE,
    ObjectTypeName: ?*u16,
    InheritedObjectTypeName: ?*u16,
    ptstrName: ?*u16,
};
// --------------------------------------------------------
// Type: TRUSTEE_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRUSTEE_A = extern struct {
    pMultipleTrustee: ?*TRUSTEE_A,
    MultipleTrusteeOperation: MULTIPLE_TRUSTEE_OPERATION,
    TrusteeForm: TRUSTEE_FORM,
    TrusteeType: TRUSTEE_TYPE,
    ptstrName: ?*i8,
};
// --------------------------------------------------------
// Type: TRUSTEE_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRUSTEE_W = extern struct {
    pMultipleTrustee: ?*TRUSTEE_W,
    MultipleTrusteeOperation: MULTIPLE_TRUSTEE_OPERATION,
    TrusteeForm: TRUSTEE_FORM,
    TrusteeType: TRUSTEE_TYPE,
    ptstrName: ?*u16,
};
// --------------------------------------------------------
// Type: ACCESS_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ACCESS_MODE = *opaque{
};
// --------------------------------------------------------
// Type: EXPLICIT_ACCESS_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EXPLICIT_ACCESS_A = extern struct {
    grfAccessPermissions: u32,
    grfAccessMode: ACCESS_MODE,
    grfInheritance: u32,
    Trustee: TRUSTEE_A,
};
// --------------------------------------------------------
// Type: EXPLICIT_ACCESS_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EXPLICIT_ACCESS_W = extern struct {
    grfAccessPermissions: u32,
    grfAccessMode: ACCESS_MODE,
    grfInheritance: u32,
    Trustee: TRUSTEE_W,
};
// --------------------------------------------------------
// Type: TRUSTEE_ACCESSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRUSTEE_ACCESSA = extern struct {
    lpProperty: ?*i8,
    Access: u32,
    fAccessFlags: u32,
    fReturnedAccess: u32,
};
// --------------------------------------------------------
// Type: TRUSTEE_ACCESSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRUSTEE_ACCESSW = extern struct {
    lpProperty: ?*u16,
    Access: u32,
    fAccessFlags: u32,
    fReturnedAccess: u32,
};
// --------------------------------------------------------
// Type: ACTRL_OVERLAPPED
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTRL_OVERLAPPED = extern struct {
    Anonymous: _Anonymous_e__Union,
    Reserved2: u32,
    hEvent: HANDLE,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: ACTRL_ACCESS_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTRL_ACCESS_INFOA = extern struct {
    fAccessPermission: u32,
    lpAccessPermissionName: ?*i8,
};
// --------------------------------------------------------
// Type: ACTRL_ACCESS_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTRL_ACCESS_INFOW = extern struct {
    fAccessPermission: u32,
    lpAccessPermissionName: ?*u16,
};
// --------------------------------------------------------
// Type: ACTRL_CONTROL_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTRL_CONTROL_INFOA = extern struct {
    lpControlId: ?*i8,
    lpControlName: ?*i8,
};
// --------------------------------------------------------
// Type: ACTRL_CONTROL_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTRL_CONTROL_INFOW = extern struct {
    lpControlId: ?*u16,
    lpControlName: ?*u16,
};
// --------------------------------------------------------
// Type: PROG_INVOKE_SETTING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROG_INVOKE_SETTING = *opaque{
};
// --------------------------------------------------------
// Type: _FN_OBJECT_MGR_FUNCTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _FN_OBJECT_MGR_FUNCTIONS = extern struct {
    Placeholder: u32,
};
// --------------------------------------------------------
// Type: INHERITED_FROMA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INHERITED_FROMA = extern struct {
    GenerationGap: i32,
    AncestorName: ?*i8,
};
// --------------------------------------------------------
// Type: INHERITED_FROMW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INHERITED_FROMW = extern struct {
    GenerationGap: i32,
    AncestorName: ?*u16,
};
// --------------------------------------------------------
// Type: WLX_SC_NOTIFICATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_SC_NOTIFICATION_INFO = extern struct {
    pszCard: ?*u16,
    pszReader: ?*u16,
    pszContainer: ?*u16,
    pszCryptoProvider: ?*u16,
};
// --------------------------------------------------------
// Type: WLX_PROFILE_V1_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_PROFILE_V1_0 = extern struct {
    dwType: u32,
    pszProfile: ?*u16,
};
// --------------------------------------------------------
// Type: WLX_PROFILE_V2_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_PROFILE_V2_0 = extern struct {
    dwType: u32,
    pszProfile: ?*u16,
    pszPolicy: ?*u16,
    pszNetworkDefaultUserProfile: ?*u16,
    pszServerName: ?*u16,
    pszEnvironment: ?*u16,
};
// --------------------------------------------------------
// Type: WLX_MPR_NOTIFY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_MPR_NOTIFY_INFO = extern struct {
    pszUserName: ?*u16,
    pszDomain: ?*u16,
    pszPassword: ?*u16,
    pszOldPassword: ?*u16,
};
// --------------------------------------------------------
// Type: WLX_TERMINAL_SERVICES_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_TERMINAL_SERVICES_DATA = extern struct {
    ProfilePath: ?[*]u16,
    HomeDir: ?[*]u16,
    HomeDirDrive: ?[*]u16,
};
// --------------------------------------------------------
// Type: WLX_CLIENT_CREDENTIALS_INFO_V1_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_CLIENT_CREDENTIALS_INFO_V1_0 = extern struct {
    dwType: u32,
    pszUserName: ?*u16,
    pszDomain: ?*u16,
    pszPassword: ?*u16,
    fPromptForPassword: BOOL,
};
// --------------------------------------------------------
// Type: WLX_CLIENT_CREDENTIALS_INFO_V2_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_CLIENT_CREDENTIALS_INFO_V2_0 = extern struct {
    dwType: u32,
    pszUserName: ?*u16,
    pszDomain: ?*u16,
    pszPassword: ?*u16,
    fPromptForPassword: BOOL,
    fDisconnectOnLogonFailure: BOOL,
};
// --------------------------------------------------------
// Type: WLX_CONSOLESWITCH_CREDENTIALS_INFO_V1_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_CONSOLESWITCH_CREDENTIALS_INFO_V1_0 = extern struct {
    dwType: u32,
    UserToken: HANDLE,
    LogonId: LUID,
    Quotas: QUOTA_LIMITS,
    UserName: ?*u16,
    Domain: ?*u16,
    LogonTime: LARGE_INTEGER,
    SmartCardLogon: BOOL,
    ProfileLength: u32,
    MessageType: u32,
    LogonCount: u16,
    BadPasswordCount: u16,
    ProfileLogonTime: LARGE_INTEGER,
    LogoffTime: LARGE_INTEGER,
    KickOffTime: LARGE_INTEGER,
    PasswordLastSet: LARGE_INTEGER,
    PasswordCanChange: LARGE_INTEGER,
    PasswordMustChange: LARGE_INTEGER,
    LogonScript: ?*u16,
    HomeDirectory: ?*u16,
    FullName: ?*u16,
    ProfilePath: ?*u16,
    HomeDirectoryDrive: ?*u16,
    LogonServer: ?*u16,
    UserFlags: u32,
    PrivateDataLen: u32,
    PrivateData: ?*u8,
};
// --------------------------------------------------------
// Type: WLX_DESKTOP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_DESKTOP = extern struct {
    Size: u32,
    Flags: u32,
    hDesktop: HDESK,
    pszDesktopName: ?*u16,
};
// --------------------------------------------------------
// Type: PWLX_USE_CTRL_ALT_DEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_USE_CTRL_ALT_DEL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_SET_CONTEXT_POINTER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_SET_CONTEXT_POINTER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_SAS_NOTIFY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_SAS_NOTIFY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_SET_TIMEOUT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_SET_TIMEOUT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_ASSIGN_SHELL_PROTECTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_ASSIGN_SHELL_PROTECTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_MESSAGE_BOX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_MESSAGE_BOX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_DIALOG_BOX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_DIALOG_BOX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_DIALOG_BOX_INDIRECT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_DIALOG_BOX_INDIRECT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_DIALOG_BOX_PARAM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_DIALOG_BOX_PARAM = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_DIALOG_BOX_INDIRECT_PARAM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_DIALOG_BOX_INDIRECT_PARAM = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_SWITCH_DESKTOP_TO_USER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_SWITCH_DESKTOP_TO_USER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_SWITCH_DESKTOP_TO_WINLOGON
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_SWITCH_DESKTOP_TO_WINLOGON = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_CHANGE_PASSWORD_NOTIFY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_CHANGE_PASSWORD_NOTIFY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_GET_SOURCE_DESKTOP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_GET_SOURCE_DESKTOP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_SET_RETURN_DESKTOP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_SET_RETURN_DESKTOP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_CREATE_USER_DESKTOP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_CREATE_USER_DESKTOP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_CHANGE_PASSWORD_NOTIFY_EX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_CHANGE_PASSWORD_NOTIFY_EX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_CLOSE_USER_DESKTOP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_CLOSE_USER_DESKTOP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_SET_OPTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_SET_OPTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_GET_OPTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_GET_OPTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_WIN31_MIGRATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_WIN31_MIGRATE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_QUERY_CLIENT_CREDENTIALS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_QUERY_CLIENT_CREDENTIALS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_QUERY_IC_CREDENTIALS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_QUERY_IC_CREDENTIALS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_QUERY_TS_LOGON_CREDENTIALS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_QUERY_TS_LOGON_CREDENTIALS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_DISCONNECT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_DISCONNECT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_QUERY_TERMINAL_SERVICES_DATA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_QUERY_TERMINAL_SERVICES_DATA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PWLX_QUERY_CONSOLESWITCH_CREDENTIALS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PWLX_QUERY_CONSOLESWITCH_CREDENTIALS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WLX_DISPATCH_VERSION_1_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_DISPATCH_VERSION_1_0 = extern struct {
    WlxUseCtrlAltDel: PWLX_USE_CTRL_ALT_DEL,
    WlxSetContextPointer: PWLX_SET_CONTEXT_POINTER,
    WlxSasNotify: PWLX_SAS_NOTIFY,
    WlxSetTimeout: PWLX_SET_TIMEOUT,
    WlxAssignShellProtection: PWLX_ASSIGN_SHELL_PROTECTION,
    WlxMessageBox: PWLX_MESSAGE_BOX,
    WlxDialogBox: PWLX_DIALOG_BOX,
    WlxDialogBoxParam: PWLX_DIALOG_BOX_PARAM,
    WlxDialogBoxIndirect: PWLX_DIALOG_BOX_INDIRECT,
    WlxDialogBoxIndirectParam: PWLX_DIALOG_BOX_INDIRECT_PARAM,
    WlxSwitchDesktopToUser: PWLX_SWITCH_DESKTOP_TO_USER,
    WlxSwitchDesktopToWinlogon: PWLX_SWITCH_DESKTOP_TO_WINLOGON,
    WlxChangePasswordNotify: PWLX_CHANGE_PASSWORD_NOTIFY,
};
// --------------------------------------------------------
// Type: WLX_DISPATCH_VERSION_1_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_DISPATCH_VERSION_1_1 = extern struct {
    WlxUseCtrlAltDel: PWLX_USE_CTRL_ALT_DEL,
    WlxSetContextPointer: PWLX_SET_CONTEXT_POINTER,
    WlxSasNotify: PWLX_SAS_NOTIFY,
    WlxSetTimeout: PWLX_SET_TIMEOUT,
    WlxAssignShellProtection: PWLX_ASSIGN_SHELL_PROTECTION,
    WlxMessageBox: PWLX_MESSAGE_BOX,
    WlxDialogBox: PWLX_DIALOG_BOX,
    WlxDialogBoxParam: PWLX_DIALOG_BOX_PARAM,
    WlxDialogBoxIndirect: PWLX_DIALOG_BOX_INDIRECT,
    WlxDialogBoxIndirectParam: PWLX_DIALOG_BOX_INDIRECT_PARAM,
    WlxSwitchDesktopToUser: PWLX_SWITCH_DESKTOP_TO_USER,
    WlxSwitchDesktopToWinlogon: PWLX_SWITCH_DESKTOP_TO_WINLOGON,
    WlxChangePasswordNotify: PWLX_CHANGE_PASSWORD_NOTIFY,
    WlxGetSourceDesktop: PWLX_GET_SOURCE_DESKTOP,
    WlxSetReturnDesktop: PWLX_SET_RETURN_DESKTOP,
    WlxCreateUserDesktop: PWLX_CREATE_USER_DESKTOP,
    WlxChangePasswordNotifyEx: PWLX_CHANGE_PASSWORD_NOTIFY_EX,
};
// --------------------------------------------------------
// Type: WLX_DISPATCH_VERSION_1_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_DISPATCH_VERSION_1_2 = extern struct {
    WlxUseCtrlAltDel: PWLX_USE_CTRL_ALT_DEL,
    WlxSetContextPointer: PWLX_SET_CONTEXT_POINTER,
    WlxSasNotify: PWLX_SAS_NOTIFY,
    WlxSetTimeout: PWLX_SET_TIMEOUT,
    WlxAssignShellProtection: PWLX_ASSIGN_SHELL_PROTECTION,
    WlxMessageBox: PWLX_MESSAGE_BOX,
    WlxDialogBox: PWLX_DIALOG_BOX,
    WlxDialogBoxParam: PWLX_DIALOG_BOX_PARAM,
    WlxDialogBoxIndirect: PWLX_DIALOG_BOX_INDIRECT,
    WlxDialogBoxIndirectParam: PWLX_DIALOG_BOX_INDIRECT_PARAM,
    WlxSwitchDesktopToUser: PWLX_SWITCH_DESKTOP_TO_USER,
    WlxSwitchDesktopToWinlogon: PWLX_SWITCH_DESKTOP_TO_WINLOGON,
    WlxChangePasswordNotify: PWLX_CHANGE_PASSWORD_NOTIFY,
    WlxGetSourceDesktop: PWLX_GET_SOURCE_DESKTOP,
    WlxSetReturnDesktop: PWLX_SET_RETURN_DESKTOP,
    WlxCreateUserDesktop: PWLX_CREATE_USER_DESKTOP,
    WlxChangePasswordNotifyEx: PWLX_CHANGE_PASSWORD_NOTIFY_EX,
    WlxCloseUserDesktop: PWLX_CLOSE_USER_DESKTOP,
};
// --------------------------------------------------------
// Type: WLX_DISPATCH_VERSION_1_3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_DISPATCH_VERSION_1_3 = extern struct {
    WlxUseCtrlAltDel: PWLX_USE_CTRL_ALT_DEL,
    WlxSetContextPointer: PWLX_SET_CONTEXT_POINTER,
    WlxSasNotify: PWLX_SAS_NOTIFY,
    WlxSetTimeout: PWLX_SET_TIMEOUT,
    WlxAssignShellProtection: PWLX_ASSIGN_SHELL_PROTECTION,
    WlxMessageBox: PWLX_MESSAGE_BOX,
    WlxDialogBox: PWLX_DIALOG_BOX,
    WlxDialogBoxParam: PWLX_DIALOG_BOX_PARAM,
    WlxDialogBoxIndirect: PWLX_DIALOG_BOX_INDIRECT,
    WlxDialogBoxIndirectParam: PWLX_DIALOG_BOX_INDIRECT_PARAM,
    WlxSwitchDesktopToUser: PWLX_SWITCH_DESKTOP_TO_USER,
    WlxSwitchDesktopToWinlogon: PWLX_SWITCH_DESKTOP_TO_WINLOGON,
    WlxChangePasswordNotify: PWLX_CHANGE_PASSWORD_NOTIFY,
    WlxGetSourceDesktop: PWLX_GET_SOURCE_DESKTOP,
    WlxSetReturnDesktop: PWLX_SET_RETURN_DESKTOP,
    WlxCreateUserDesktop: PWLX_CREATE_USER_DESKTOP,
    WlxChangePasswordNotifyEx: PWLX_CHANGE_PASSWORD_NOTIFY_EX,
    WlxCloseUserDesktop: PWLX_CLOSE_USER_DESKTOP,
    WlxSetOption: PWLX_SET_OPTION,
    WlxGetOption: PWLX_GET_OPTION,
    WlxWin31Migrate: PWLX_WIN31_MIGRATE,
    WlxQueryClientCredentials: PWLX_QUERY_CLIENT_CREDENTIALS,
    WlxQueryInetConnectorCredentials: PWLX_QUERY_IC_CREDENTIALS,
    WlxDisconnect: PWLX_DISCONNECT,
    WlxQueryTerminalServicesData: PWLX_QUERY_TERMINAL_SERVICES_DATA,
};
// --------------------------------------------------------
// Type: WLX_DISPATCH_VERSION_1_4
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_DISPATCH_VERSION_1_4 = extern struct {
    WlxUseCtrlAltDel: PWLX_USE_CTRL_ALT_DEL,
    WlxSetContextPointer: PWLX_SET_CONTEXT_POINTER,
    WlxSasNotify: PWLX_SAS_NOTIFY,
    WlxSetTimeout: PWLX_SET_TIMEOUT,
    WlxAssignShellProtection: PWLX_ASSIGN_SHELL_PROTECTION,
    WlxMessageBox: PWLX_MESSAGE_BOX,
    WlxDialogBox: PWLX_DIALOG_BOX,
    WlxDialogBoxParam: PWLX_DIALOG_BOX_PARAM,
    WlxDialogBoxIndirect: PWLX_DIALOG_BOX_INDIRECT,
    WlxDialogBoxIndirectParam: PWLX_DIALOG_BOX_INDIRECT_PARAM,
    WlxSwitchDesktopToUser: PWLX_SWITCH_DESKTOP_TO_USER,
    WlxSwitchDesktopToWinlogon: PWLX_SWITCH_DESKTOP_TO_WINLOGON,
    WlxChangePasswordNotify: PWLX_CHANGE_PASSWORD_NOTIFY,
    WlxGetSourceDesktop: PWLX_GET_SOURCE_DESKTOP,
    WlxSetReturnDesktop: PWLX_SET_RETURN_DESKTOP,
    WlxCreateUserDesktop: PWLX_CREATE_USER_DESKTOP,
    WlxChangePasswordNotifyEx: PWLX_CHANGE_PASSWORD_NOTIFY_EX,
    WlxCloseUserDesktop: PWLX_CLOSE_USER_DESKTOP,
    WlxSetOption: PWLX_SET_OPTION,
    WlxGetOption: PWLX_GET_OPTION,
    WlxWin31Migrate: PWLX_WIN31_MIGRATE,
    WlxQueryClientCredentials: PWLX_QUERY_CLIENT_CREDENTIALS,
    WlxQueryInetConnectorCredentials: PWLX_QUERY_IC_CREDENTIALS,
    WlxDisconnect: PWLX_DISCONNECT,
    WlxQueryTerminalServicesData: PWLX_QUERY_TERMINAL_SERVICES_DATA,
    WlxQueryConsoleSwitchCredentials: PWLX_QUERY_CONSOLESWITCH_CREDENTIALS,
    WlxQueryTsLogonCredentials: PWLX_QUERY_TS_LOGON_CREDENTIALS,
};
// --------------------------------------------------------
// Type: PFNMSGECALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNMSGECALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WLX_NOTIFICATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLX_NOTIFICATION_INFO = extern struct {
    Size: u32,
    Flags: u32,
    UserName: ?*u16,
    Domain: ?*u16,
    WindowStation: ?*u16,
    hToken: HANDLE,
    hDesktop: HDESK,
    pStatusCallback: PFNMSGECALLBACK,
};
// --------------------------------------------------------
// Type: TpmVirtualSmartCardManager
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const TpmVirtualSmartCardManager = opaque {
};
// --------------------------------------------------------
// Type: RemoteTpmVirtualSmartCardManager
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const RemoteTpmVirtualSmartCardManager = opaque {
};
// --------------------------------------------------------
// Type: TPMVSC_ATTESTATION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TPMVSC_ATTESTATION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: TPMVSCMGR_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TPMVSCMGR_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: TPMVSCMGR_ERROR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TPMVSCMGR_ERROR = *opaque{
};
// --------------------------------------------------------
// Type: ITpmVirtualSmartCardManagerStatusCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITpmVirtualSmartCardManagerStatusCallback = *opaque{
    // TODO: Method 'ReportProgress'
    // TODO: Method 'ReportError'
};
// --------------------------------------------------------
// Type: ITpmVirtualSmartCardManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITpmVirtualSmartCardManager = *opaque{
    // TODO: Method 'CreateVirtualSmartCard'
    // TODO: Method 'DestroyVirtualSmartCard'
};
// --------------------------------------------------------
// Type: ITpmVirtualSmartCardManager2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITpmVirtualSmartCardManager2 = *opaque{
    // TODO: Method 'CreateVirtualSmartCardWithPinPolicy'
};
// --------------------------------------------------------
// Type: ITpmVirtualSmartCardManager3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITpmVirtualSmartCardManager3 = *opaque{
    // TODO: Method 'CreateVirtualSmartCardWithAttestation'
};
// --------------------------------------------------------
// Type: KeyCredentialManagerOperationErrorStates
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KeyCredentialManagerOperationErrorStates = *opaque{
};
// --------------------------------------------------------
// Type: KeyCredentialManagerOperationType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KeyCredentialManagerOperationType = *opaque{
};
// --------------------------------------------------------
// Type: KeyCredentialManagerInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KeyCredentialManagerInfo = extern struct {
    containerId: Guid,
};
// --------------------------------------------------------
// Type: IDENTITY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IDENTITY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: PF_NPAddConnection
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPAddConnection = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPAddConnection3
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPAddConnection3 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPAddConnection4
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPAddConnection4 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPCancelConnection
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPCancelConnection = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPGetConnection
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPGetConnection = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPGetConnection3
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPGetConnection3 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPGetUniversalName
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPGetUniversalName = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPGetConnectionPerformance
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPGetConnectionPerformance = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPOpenEnum
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPOpenEnum = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPEnumResource
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPEnumResource = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPCloseEnum
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPCloseEnum = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPGetCaps
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPGetCaps = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPGetUser
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPGetUser = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPGetPersistentUseOptionsForConnection
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPGetPersistentUseOptionsForConnection = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPDeviceMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPDeviceMode = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPSearchDialog
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPSearchDialog = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPGetResourceParent
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPGetResourceParent = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPGetResourceInformation
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPGetResourceInformation = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPFormatNetworkName
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPFormatNetworkName = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPGetPropertyText
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPGetPropertyText = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPPropertyDialog
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPPropertyDialog = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPGetDirectoryType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPGetDirectoryType = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPDirectoryNotify
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPDirectoryNotify = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPLogonNotify
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPLogonNotify = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPPasswordChangeNotify
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPPasswordChangeNotify = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: NOTIFYINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NOTIFYINFO = extern struct {
    dwNotifyStatus: u32,
    dwOperationStatus: u32,
    lpContext: ?*opaque{},
};
// --------------------------------------------------------
// Type: NOTIFYADD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NOTIFYADD = extern struct {
    hwndOwner: HWND,
    NetResource: NETRESOURCEA,
    dwAddFlags: u32,
};
// --------------------------------------------------------
// Type: NOTIFYCANCEL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NOTIFYCANCEL = extern struct {
    lpName: ?*u16,
    lpProvider: ?*u16,
    dwFlags: u32,
    fForce: BOOL,
};
// --------------------------------------------------------
// Type: PF_AddConnectNotify
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_AddConnectNotify = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_CancelConnectNotify
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_CancelConnectNotify = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPFMXGetPermCaps
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPFMXGetPermCaps = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPFMXEditPerm
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPFMXEditPerm = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_NPFMXGetPermHelp
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_NPFMXGetPermHelp = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LOGON_HOURS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LOGON_HOURS = extern struct {
    UnitsPerWeek: u16,
    LogonHours: ?*u8,
};
// --------------------------------------------------------
// Type: SR_SECURITY_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SR_SECURITY_DESCRIPTOR = extern struct {
    Length: u32,
    SecurityDescriptor: ?*u8,
};
// --------------------------------------------------------
// Type: USER_ALL_INFORMATION
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const USER_ALL_INFORMATION = *opaque{
};
// --------------------------------------------------------
// Type: CLEAR_BLOCK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLEAR_BLOCK = extern struct {
    data: ?[*]i8,
};
// --------------------------------------------------------
// Type: USER_SESSION_KEY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_SESSION_KEY = extern struct {
    data: ?[*]CYPHER_BLOCK,
};
// --------------------------------------------------------
// Type: NETLOGON_LOGON_INFO_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NETLOGON_LOGON_INFO_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: NETLOGON_LOGON_IDENTITY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETLOGON_LOGON_IDENTITY_INFO = extern struct {
    LogonDomainName: UNICODE_STRING,
    ParameterControl: u32,
    LogonId: OLD_LARGE_INTEGER,
    UserName: UNICODE_STRING,
    Workstation: UNICODE_STRING,
};
// --------------------------------------------------------
// Type: NETLOGON_INTERACTIVE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETLOGON_INTERACTIVE_INFO = extern struct {
    Identity: NETLOGON_LOGON_IDENTITY_INFO,
    LmOwfPassword: LM_OWF_PASSWORD,
    NtOwfPassword: LM_OWF_PASSWORD,
};
// --------------------------------------------------------
// Type: NETLOGON_SERVICE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETLOGON_SERVICE_INFO = extern struct {
    Identity: NETLOGON_LOGON_IDENTITY_INFO,
    LmOwfPassword: LM_OWF_PASSWORD,
    NtOwfPassword: LM_OWF_PASSWORD,
};
// --------------------------------------------------------
// Type: NETLOGON_NETWORK_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETLOGON_NETWORK_INFO = extern struct {
    Identity: NETLOGON_LOGON_IDENTITY_INFO,
    LmChallenge: CLEAR_BLOCK,
    NtChallengeResponse: STRING,
    LmChallengeResponse: STRING,
};
// --------------------------------------------------------
// Type: NETLOGON_GENERIC_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETLOGON_GENERIC_INFO = extern struct {
    Identity: NETLOGON_LOGON_IDENTITY_INFO,
    PackageName: UNICODE_STRING,
    DataLength: u32,
    LogonData: ?*u8,
};
// --------------------------------------------------------
// Type: MSV1_0_VALIDATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSV1_0_VALIDATION_INFO = extern struct {
    LogoffTime: LARGE_INTEGER,
    KickoffTime: LARGE_INTEGER,
    LogonServer: UNICODE_STRING,
    LogonDomainName: UNICODE_STRING,
    SessionKey: USER_SESSION_KEY,
    Authoritative: u8,
    UserFlags: u32,
    WhichFields: u32,
    UserId: u32,
};
// --------------------------------------------------------
// Type: tag_IdentityUpdateEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const tag_IdentityUpdateEvent = *opaque{
};
// --------------------------------------------------------
// Type: IIdentityAdvise
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IIdentityAdvise = *opaque{
    // TODO: Method 'IdentityUpdated'
};
// --------------------------------------------------------
// Type: AsyncIIdentityAdvise
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const AsyncIIdentityAdvise = *opaque{
    // TODO: Method 'Begin_IdentityUpdated'
    // TODO: Method 'Finish_IdentityUpdated'
};
// --------------------------------------------------------
// Type: IIdentityProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IIdentityProvider = *opaque{
    // TODO: Method 'GetIdentityEnum'
    // TODO: Method 'Create'
    // TODO: Method 'Import'
    // TODO: Method 'Delete'
    // TODO: Method 'FindByUniqueID'
    // TODO: Method 'GetProviderPropertyStore'
    // TODO: Method 'Advise'
    // TODO: Method 'UnAdvise'
};
// --------------------------------------------------------
// Type: AsyncIIdentityProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const AsyncIIdentityProvider = *opaque{
    // TODO: Method 'Begin_GetIdentityEnum'
    // TODO: Method 'Finish_GetIdentityEnum'
    // TODO: Method 'Begin_Create'
    // TODO: Method 'Finish_Create'
    // TODO: Method 'Begin_Import'
    // TODO: Method 'Finish_Import'
    // TODO: Method 'Begin_Delete'
    // TODO: Method 'Finish_Delete'
    // TODO: Method 'Begin_FindByUniqueID'
    // TODO: Method 'Finish_FindByUniqueID'
    // TODO: Method 'Begin_GetProviderPropertyStore'
    // TODO: Method 'Finish_GetProviderPropertyStore'
    // TODO: Method 'Begin_Advise'
    // TODO: Method 'Finish_Advise'
    // TODO: Method 'Begin_UnAdvise'
    // TODO: Method 'Finish_UnAdvise'
};
// --------------------------------------------------------
// Type: IAssociatedIdentityProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAssociatedIdentityProvider = *opaque{
    // TODO: Method 'AssociateIdentity'
    // TODO: Method 'DisassociateIdentity'
    // TODO: Method 'ChangeCredential'
};
// --------------------------------------------------------
// Type: AsyncIAssociatedIdentityProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const AsyncIAssociatedIdentityProvider = *opaque{
    // TODO: Method 'Begin_AssociateIdentity'
    // TODO: Method 'Finish_AssociateIdentity'
    // TODO: Method 'Begin_DisassociateIdentity'
    // TODO: Method 'Finish_DisassociateIdentity'
    // TODO: Method 'Begin_ChangeCredential'
    // TODO: Method 'Finish_ChangeCredential'
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_identityprovider_0000_0003_0001
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_identityprovider_0000_0003_0001 = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL___MIDL_itf_identityprovider_0000_0003_0002
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL___MIDL_itf_identityprovider_0000_0003_0002 = *opaque{
};
// --------------------------------------------------------
// Type: IConnectedIdentityProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IConnectedIdentityProvider = *opaque{
    // TODO: Method 'ConnectIdentity'
    // TODO: Method 'DisconnectIdentity'
    // TODO: Method 'IsConnected'
    // TODO: Method 'GetUrl'
    // TODO: Method 'GetAccountState'
};
// --------------------------------------------------------
// Type: AsyncIConnectedIdentityProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const AsyncIConnectedIdentityProvider = *opaque{
    // TODO: Method 'Begin_ConnectIdentity'
    // TODO: Method 'Finish_ConnectIdentity'
    // TODO: Method 'Begin_DisconnectIdentity'
    // TODO: Method 'Finish_DisconnectIdentity'
    // TODO: Method 'Begin_IsConnected'
    // TODO: Method 'Finish_IsConnected'
    // TODO: Method 'Begin_GetUrl'
    // TODO: Method 'Finish_GetUrl'
    // TODO: Method 'Begin_GetAccountState'
    // TODO: Method 'Finish_GetAccountState'
};
// --------------------------------------------------------
// Type: IIdentityAuthentication
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IIdentityAuthentication = *opaque{
    // TODO: Method 'SetIdentityCredential'
    // TODO: Method 'ValidateIdentityCredential'
};
// --------------------------------------------------------
// Type: AsyncIIdentityAuthentication
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const AsyncIIdentityAuthentication = *opaque{
    // TODO: Method 'Begin_SetIdentityCredential'
    // TODO: Method 'Finish_SetIdentityCredential'
    // TODO: Method 'Begin_ValidateIdentityCredential'
    // TODO: Method 'Finish_ValidateIdentityCredential'
};
// --------------------------------------------------------
// Type: CoClassIdentityStore
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CoClassIdentityStore = opaque {
};
// --------------------------------------------------------
// Type: CIdentityProfileHandler
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CIdentityProfileHandler = opaque {
};
// --------------------------------------------------------
// Type: IIdentityStore
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IIdentityStore = *opaque{
    // TODO: Method 'GetCount'
    // TODO: Method 'GetAt'
    // TODO: Method 'AddToCache'
    // TODO: Method 'ConvertToSid'
    // TODO: Method 'EnumerateIdentities'
    // TODO: Method 'Reset'
};
// --------------------------------------------------------
// Type: AsyncIIdentityStore
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const AsyncIIdentityStore = *opaque{
    // TODO: Method 'Begin_GetCount'
    // TODO: Method 'Finish_GetCount'
    // TODO: Method 'Begin_GetAt'
    // TODO: Method 'Finish_GetAt'
    // TODO: Method 'Begin_AddToCache'
    // TODO: Method 'Finish_AddToCache'
    // TODO: Method 'Begin_ConvertToSid'
    // TODO: Method 'Finish_ConvertToSid'
    // TODO: Method 'Begin_EnumerateIdentities'
    // TODO: Method 'Finish_EnumerateIdentities'
    // TODO: Method 'Begin_Reset'
    // TODO: Method 'Finish_Reset'
};
// --------------------------------------------------------
// Type: IIdentityStoreEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IIdentityStoreEx = *opaque{
    // TODO: Method 'CreateConnectedIdentity'
    // TODO: Method 'DeleteConnectedIdentity'
};
// --------------------------------------------------------
// Type: AsyncIIdentityStoreEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const AsyncIIdentityStoreEx = *opaque{
    // TODO: Method 'Begin_CreateConnectedIdentity'
    // TODO: Method 'Finish_CreateConnectedIdentity'
    // TODO: Method 'Begin_DeleteConnectedIdentity'
    // TODO: Method 'Finish_DeleteConnectedIdentity'
};
// --------------------------------------------------------
// Type: AUDIT_PARAM_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AUDIT_PARAM_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: AUDIT_OBJECT_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUDIT_OBJECT_TYPE = extern struct {
    ObjectType: Guid,
    Flags: u16,
    Level: u16,
    AccessMask: u32,
};
// --------------------------------------------------------
// Type: AUDIT_OBJECT_TYPES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUDIT_OBJECT_TYPES = extern struct {
    Count: u16,
    Flags: u16,
    pObjectTypes: ?*AUDIT_OBJECT_TYPE,
};
// --------------------------------------------------------
// Type: AUDIT_IP_ADDRESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUDIT_IP_ADDRESS = extern struct {
    pIpAddress: ?[*]u8,
};
// --------------------------------------------------------
// Type: AUDIT_PARAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUDIT_PARAM = extern struct {
    Type: AUDIT_PARAM_TYPE,
    Length: u32,
    Flags: u32,
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: AUDIT_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUDIT_PARAMS = extern struct {
    Length: u32,
    Flags: u32,
    Count: u16,
    Parameters: ?*AUDIT_PARAM,
};
// --------------------------------------------------------
// Type: AUTHZ_AUDIT_EVENT_TYPE_LEGACY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_AUDIT_EVENT_TYPE_LEGACY = extern struct {
    CategoryId: u16,
    AuditId: u16,
    ParameterCount: u16,
};
// --------------------------------------------------------
// Type: AUTHZ_AUDIT_EVENT_TYPE_UNION
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const AUTHZ_AUDIT_EVENT_TYPE_UNION = *opaque{
};
// --------------------------------------------------------
// Type: AUTHZ_AUDIT_EVENT_TYPE_OLD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_AUDIT_EVENT_TYPE_OLD = extern struct {
    Version: u32,
    dwFlags: u32,
    RefCount: i32,
    hAudit: ?*opaque{},
    LinkId: LUID,
    u: AUTHZ_AUDIT_EVENT_TYPE_UNION,
};
// --------------------------------------------------------
// Type: AUTHZ_ACCESS_CHECK_RESULTS_HANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_ACCESS_CHECK_RESULTS_HANDLE__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: AUTHZ_CLIENT_CONTEXT_HANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_CLIENT_CONTEXT_HANDLE__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: AUTHZ_RESOURCE_MANAGER_HANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_RESOURCE_MANAGER_HANDLE__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: AUTHZ_AUDIT_EVENT_HANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_AUDIT_EVENT_HANDLE__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: AUTHZ_AUDIT_EVENT_TYPE_HANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_AUDIT_EVENT_TYPE_HANDLE__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: AUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: AUTHZ_ACCESS_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_ACCESS_REQUEST = extern struct {
    DesiredAccess: u32,
    PrincipalSelfSid: ?*opaque{},
    ObjectTypeList: ?*OBJECT_TYPE_LIST,
    ObjectTypeListLength: u32,
    OptionalArguments: ?*opaque{},
};
// --------------------------------------------------------
// Type: AUTHZ_ACCESS_REPLY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_ACCESS_REPLY = extern struct {
    ResultListLength: u32,
    GrantedAccessMask: ?*u32,
    SaclEvaluationResults: ?*u32,
    Error: ?*u32,
};
// --------------------------------------------------------
// Type: PFN_AUTHZ_DYNAMIC_ACCESS_CHECK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_AUTHZ_DYNAMIC_ACCESS_CHECK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_AUTHZ_COMPUTE_DYNAMIC_GROUPS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_AUTHZ_COMPUTE_DYNAMIC_GROUPS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_AUTHZ_FREE_DYNAMIC_GROUPS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_AUTHZ_FREE_DYNAMIC_GROUPS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_AUTHZ_GET_CENTRAL_ACCESS_POLICY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_AUTHZ_GET_CENTRAL_ACCESS_POLICY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_AUTHZ_FREE_CENTRAL_ACCESS_POLICY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_AUTHZ_FREE_CENTRAL_ACCESS_POLICY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: AUTHZ_SECURITY_ATTRIBUTE_FQBN_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_SECURITY_ATTRIBUTE_FQBN_VALUE = extern struct {
    Version: u64,
    pName: ?*u16,
};
// --------------------------------------------------------
// Type: AUTHZ_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = extern struct {
    pValue: ?*opaque{},
    ValueLength: u32,
};
// --------------------------------------------------------
// Type: AUTHZ_SECURITY_ATTRIBUTE_OPERATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AUTHZ_SECURITY_ATTRIBUTE_OPERATION = *opaque{
};
// --------------------------------------------------------
// Type: AUTHZ_SID_OPERATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AUTHZ_SID_OPERATION = *opaque{
};
// --------------------------------------------------------
// Type: AUTHZ_SECURITY_ATTRIBUTE_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_SECURITY_ATTRIBUTE_V1 = extern struct {
    pName: ?*u16,
    ValueType: u16,
    Reserved: u16,
    Flags: u32,
    ValueCount: u32,
    Values: _Values_e__Union,
    // --------------------------------------------------------
    // Type: _Values_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Values_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: AUTHZ_SECURITY_ATTRIBUTES_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_SECURITY_ATTRIBUTES_INFORMATION = extern struct {
    Version: u16,
    Reserved: u16,
    AttributeCount: u32,
    Attribute: _Attribute_e__Union,
    // --------------------------------------------------------
    // Type: _Attribute_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Attribute_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: AUTHZ_RPC_INIT_INFO_CLIENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_RPC_INIT_INFO_CLIENT = extern struct {
    version: u16,
    ObjectUuid: ?*u16,
    ProtSeq: ?*u16,
    NetworkAddr: ?*u16,
    Endpoint: ?*u16,
    Options: ?*u16,
    ServerSpn: ?*u16,
};
// --------------------------------------------------------
// Type: AUTHZ_INIT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_INIT_INFO = extern struct {
    version: u16,
    szResourceManagerName: ?*u16,
    pfnDynamicAccessCheck: PFN_AUTHZ_DYNAMIC_ACCESS_CHECK,
    pfnComputeDynamicGroups: PFN_AUTHZ_COMPUTE_DYNAMIC_GROUPS,
    pfnFreeDynamicGroups: PFN_AUTHZ_FREE_DYNAMIC_GROUPS,
    pfnGetCentralAccessPolicy: PFN_AUTHZ_GET_CENTRAL_ACCESS_POLICY,
    pfnFreeCentralAccessPolicy: PFN_AUTHZ_FREE_CENTRAL_ACCESS_POLICY,
};
// --------------------------------------------------------
// Type: AUTHZ_CONTEXT_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AUTHZ_CONTEXT_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: AUTHZ_AUDIT_EVENT_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AUTHZ_AUDIT_EVENT_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: AUTHZ_REGISTRATION_OBJECT_TYPE_NAME_OFFSET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_REGISTRATION_OBJECT_TYPE_NAME_OFFSET = extern struct {
    szObjectTypeName: ?*u16,
    dwOffset: u32,
};
// --------------------------------------------------------
// Type: AUTHZ_SOURCE_SCHEMA_REGISTRATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTHZ_SOURCE_SCHEMA_REGISTRATION = extern struct {
    dwFlags: u32,
    szEventSourceName: ?*u16,
    szEventMessageFile: ?*u16,
    szEventSourceXmlSchemaFile: ?*u16,
    szEventAccessStringsFile: ?*u16,
    szExecutableImagePath: ?*u16,
    Anonymous: _Anonymous_e__Union,
    dwObjectTypeNameCount: u32,
    ObjectTypeNames: ?[*]AUTHZ_REGISTRATION_OBJECT_TYPE_NAME_OFFSET,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: AzAuthorizationStore
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const AzAuthorizationStore = opaque {
};
// --------------------------------------------------------
// Type: AzBizRuleContext
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const AzBizRuleContext = opaque {
};
// --------------------------------------------------------
// Type: AzPrincipalLocator
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const AzPrincipalLocator = opaque {
};
// --------------------------------------------------------
// Type: IAzAuthorizationStore
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzAuthorizationStore = *opaque{
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
    // TODO: Method 'get_ApplicationData'
    // TODO: Method 'put_ApplicationData'
    // TODO: Method 'get_DomainTimeout'
    // TODO: Method 'put_DomainTimeout'
    // TODO: Method 'get_ScriptEngineTimeout'
    // TODO: Method 'put_ScriptEngineTimeout'
    // TODO: Method 'get_MaxScriptEngines'
    // TODO: Method 'put_MaxScriptEngines'
    // TODO: Method 'get_GenerateAudits'
    // TODO: Method 'put_GenerateAudits'
    // TODO: Method 'get_Writable'
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'AddPropertyItem'
    // TODO: Method 'DeletePropertyItem'
    // TODO: Method 'get_PolicyAdministrators'
    // TODO: Method 'get_PolicyReaders'
    // TODO: Method 'AddPolicyAdministrator'
    // TODO: Method 'DeletePolicyAdministrator'
    // TODO: Method 'AddPolicyReader'
    // TODO: Method 'DeletePolicyReader'
    // TODO: Method 'Initialize'
    // TODO: Method 'UpdateCache'
    // TODO: Method 'Delete'
    // TODO: Method 'get_Applications'
    // TODO: Method 'OpenApplication'
    // TODO: Method 'CreateApplication'
    // TODO: Method 'DeleteApplication'
    // TODO: Method 'get_ApplicationGroups'
    // TODO: Method 'CreateApplicationGroup'
    // TODO: Method 'OpenApplicationGroup'
    // TODO: Method 'DeleteApplicationGroup'
    // TODO: Method 'Submit'
    // TODO: Method 'get_DelegatedPolicyUsers'
    // TODO: Method 'AddDelegatedPolicyUser'
    // TODO: Method 'DeleteDelegatedPolicyUser'
    // TODO: Method 'get_TargetMachine'
    // TODO: Method 'get_ApplyStoreSacl'
    // TODO: Method 'put_ApplyStoreSacl'
    // TODO: Method 'get_PolicyAdministratorsName'
    // TODO: Method 'get_PolicyReadersName'
    // TODO: Method 'AddPolicyAdministratorName'
    // TODO: Method 'DeletePolicyAdministratorName'
    // TODO: Method 'AddPolicyReaderName'
    // TODO: Method 'DeletePolicyReaderName'
    // TODO: Method 'get_DelegatedPolicyUsersName'
    // TODO: Method 'AddDelegatedPolicyUserName'
    // TODO: Method 'DeleteDelegatedPolicyUserName'
    // TODO: Method 'CloseApplication'
};
// --------------------------------------------------------
// Type: IAzAuthorizationStore2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzAuthorizationStore2 = *opaque{
    // TODO: Method 'OpenApplication2'
    // TODO: Method 'CreateApplication2'
};
// --------------------------------------------------------
// Type: IAzAuthorizationStore3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzAuthorizationStore3 = *opaque{
    // TODO: Method 'IsUpdateNeeded'
    // TODO: Method 'BizruleGroupSupported'
    // TODO: Method 'UpgradeStoresFunctionalLevel'
    // TODO: Method 'IsFunctionalLevelUpgradeSupported'
    // TODO: Method 'GetSchemaVersion'
};
// --------------------------------------------------------
// Type: IAzApplication
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzApplication = *opaque{
    // TODO: Method 'get_Name'
    // TODO: Method 'put_Name'
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
    // TODO: Method 'get_ApplicationData'
    // TODO: Method 'put_ApplicationData'
    // TODO: Method 'get_AuthzInterfaceClsid'
    // TODO: Method 'put_AuthzInterfaceClsid'
    // TODO: Method 'get_Version'
    // TODO: Method 'put_Version'
    // TODO: Method 'get_GenerateAudits'
    // TODO: Method 'put_GenerateAudits'
    // TODO: Method 'get_ApplyStoreSacl'
    // TODO: Method 'put_ApplyStoreSacl'
    // TODO: Method 'get_Writable'
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'get_PolicyAdministrators'
    // TODO: Method 'get_PolicyReaders'
    // TODO: Method 'AddPolicyAdministrator'
    // TODO: Method 'DeletePolicyAdministrator'
    // TODO: Method 'AddPolicyReader'
    // TODO: Method 'DeletePolicyReader'
    // TODO: Method 'get_Scopes'
    // TODO: Method 'OpenScope'
    // TODO: Method 'CreateScope'
    // TODO: Method 'DeleteScope'
    // TODO: Method 'get_Operations'
    // TODO: Method 'OpenOperation'
    // TODO: Method 'CreateOperation'
    // TODO: Method 'DeleteOperation'
    // TODO: Method 'get_Tasks'
    // TODO: Method 'OpenTask'
    // TODO: Method 'CreateTask'
    // TODO: Method 'DeleteTask'
    // TODO: Method 'get_ApplicationGroups'
    // TODO: Method 'OpenApplicationGroup'
    // TODO: Method 'CreateApplicationGroup'
    // TODO: Method 'DeleteApplicationGroup'
    // TODO: Method 'get_Roles'
    // TODO: Method 'OpenRole'
    // TODO: Method 'CreateRole'
    // TODO: Method 'DeleteRole'
    // TODO: Method 'InitializeClientContextFromToken'
    // TODO: Method 'AddPropertyItem'
    // TODO: Method 'DeletePropertyItem'
    // TODO: Method 'Submit'
    // TODO: Method 'InitializeClientContextFromName'
    // TODO: Method 'get_DelegatedPolicyUsers'
    // TODO: Method 'AddDelegatedPolicyUser'
    // TODO: Method 'DeleteDelegatedPolicyUser'
    // TODO: Method 'InitializeClientContextFromStringSid'
    // TODO: Method 'get_PolicyAdministratorsName'
    // TODO: Method 'get_PolicyReadersName'
    // TODO: Method 'AddPolicyAdministratorName'
    // TODO: Method 'DeletePolicyAdministratorName'
    // TODO: Method 'AddPolicyReaderName'
    // TODO: Method 'DeletePolicyReaderName'
    // TODO: Method 'get_DelegatedPolicyUsersName'
    // TODO: Method 'AddDelegatedPolicyUserName'
    // TODO: Method 'DeleteDelegatedPolicyUserName'
};
// --------------------------------------------------------
// Type: IAzApplication2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzApplication2 = *opaque{
    // TODO: Method 'InitializeClientContextFromToken2'
    // TODO: Method 'InitializeClientContext2'
};
// --------------------------------------------------------
// Type: IAzApplications
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzApplications = *opaque{
    // TODO: Method 'get_Item'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
};
// --------------------------------------------------------
// Type: IAzOperation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzOperation = *opaque{
    // TODO: Method 'get_Name'
    // TODO: Method 'put_Name'
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
    // TODO: Method 'get_ApplicationData'
    // TODO: Method 'put_ApplicationData'
    // TODO: Method 'get_OperationID'
    // TODO: Method 'put_OperationID'
    // TODO: Method 'get_Writable'
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'Submit'
};
// --------------------------------------------------------
// Type: IAzOperations
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzOperations = *opaque{
    // TODO: Method 'get_Item'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
};
// --------------------------------------------------------
// Type: IAzTask
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzTask = *opaque{
    // TODO: Method 'get_Name'
    // TODO: Method 'put_Name'
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
    // TODO: Method 'get_ApplicationData'
    // TODO: Method 'put_ApplicationData'
    // TODO: Method 'get_BizRule'
    // TODO: Method 'put_BizRule'
    // TODO: Method 'get_BizRuleLanguage'
    // TODO: Method 'put_BizRuleLanguage'
    // TODO: Method 'get_BizRuleImportedPath'
    // TODO: Method 'put_BizRuleImportedPath'
    // TODO: Method 'get_IsRoleDefinition'
    // TODO: Method 'put_IsRoleDefinition'
    // TODO: Method 'get_Operations'
    // TODO: Method 'get_Tasks'
    // TODO: Method 'AddOperation'
    // TODO: Method 'DeleteOperation'
    // TODO: Method 'AddTask'
    // TODO: Method 'DeleteTask'
    // TODO: Method 'get_Writable'
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'AddPropertyItem'
    // TODO: Method 'DeletePropertyItem'
    // TODO: Method 'Submit'
};
// --------------------------------------------------------
// Type: IAzTasks
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzTasks = *opaque{
    // TODO: Method 'get_Item'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
};
// --------------------------------------------------------
// Type: IAzScope
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzScope = *opaque{
    // TODO: Method 'get_Name'
    // TODO: Method 'put_Name'
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
    // TODO: Method 'get_ApplicationData'
    // TODO: Method 'put_ApplicationData'
    // TODO: Method 'get_Writable'
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'AddPropertyItem'
    // TODO: Method 'DeletePropertyItem'
    // TODO: Method 'get_PolicyAdministrators'
    // TODO: Method 'get_PolicyReaders'
    // TODO: Method 'AddPolicyAdministrator'
    // TODO: Method 'DeletePolicyAdministrator'
    // TODO: Method 'AddPolicyReader'
    // TODO: Method 'DeletePolicyReader'
    // TODO: Method 'get_ApplicationGroups'
    // TODO: Method 'OpenApplicationGroup'
    // TODO: Method 'CreateApplicationGroup'
    // TODO: Method 'DeleteApplicationGroup'
    // TODO: Method 'get_Roles'
    // TODO: Method 'OpenRole'
    // TODO: Method 'CreateRole'
    // TODO: Method 'DeleteRole'
    // TODO: Method 'get_Tasks'
    // TODO: Method 'OpenTask'
    // TODO: Method 'CreateTask'
    // TODO: Method 'DeleteTask'
    // TODO: Method 'Submit'
    // TODO: Method 'get_CanBeDelegated'
    // TODO: Method 'get_BizrulesWritable'
    // TODO: Method 'get_PolicyAdministratorsName'
    // TODO: Method 'get_PolicyReadersName'
    // TODO: Method 'AddPolicyAdministratorName'
    // TODO: Method 'DeletePolicyAdministratorName'
    // TODO: Method 'AddPolicyReaderName'
    // TODO: Method 'DeletePolicyReaderName'
};
// --------------------------------------------------------
// Type: IAzScopes
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzScopes = *opaque{
    // TODO: Method 'get_Item'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
};
// --------------------------------------------------------
// Type: IAzApplicationGroup
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzApplicationGroup = *opaque{
    // TODO: Method 'get_Name'
    // TODO: Method 'put_Name'
    // TODO: Method 'get_Type'
    // TODO: Method 'put_Type'
    // TODO: Method 'get_LdapQuery'
    // TODO: Method 'put_LdapQuery'
    // TODO: Method 'get_AppMembers'
    // TODO: Method 'get_AppNonMembers'
    // TODO: Method 'get_Members'
    // TODO: Method 'get_NonMembers'
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
    // TODO: Method 'AddAppMember'
    // TODO: Method 'DeleteAppMember'
    // TODO: Method 'AddAppNonMember'
    // TODO: Method 'DeleteAppNonMember'
    // TODO: Method 'AddMember'
    // TODO: Method 'DeleteMember'
    // TODO: Method 'AddNonMember'
    // TODO: Method 'DeleteNonMember'
    // TODO: Method 'get_Writable'
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'AddPropertyItem'
    // TODO: Method 'DeletePropertyItem'
    // TODO: Method 'Submit'
    // TODO: Method 'AddMemberName'
    // TODO: Method 'DeleteMemberName'
    // TODO: Method 'AddNonMemberName'
    // TODO: Method 'DeleteNonMemberName'
    // TODO: Method 'get_MembersName'
    // TODO: Method 'get_NonMembersName'
};
// --------------------------------------------------------
// Type: IAzApplicationGroups
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzApplicationGroups = *opaque{
    // TODO: Method 'get_Item'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
};
// --------------------------------------------------------
// Type: IAzRole
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzRole = *opaque{
    // TODO: Method 'get_Name'
    // TODO: Method 'put_Name'
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
    // TODO: Method 'get_ApplicationData'
    // TODO: Method 'put_ApplicationData'
    // TODO: Method 'AddAppMember'
    // TODO: Method 'DeleteAppMember'
    // TODO: Method 'AddTask'
    // TODO: Method 'DeleteTask'
    // TODO: Method 'AddOperation'
    // TODO: Method 'DeleteOperation'
    // TODO: Method 'AddMember'
    // TODO: Method 'DeleteMember'
    // TODO: Method 'get_Writable'
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'get_AppMembers'
    // TODO: Method 'get_Members'
    // TODO: Method 'get_Operations'
    // TODO: Method 'get_Tasks'
    // TODO: Method 'AddPropertyItem'
    // TODO: Method 'DeletePropertyItem'
    // TODO: Method 'Submit'
    // TODO: Method 'AddMemberName'
    // TODO: Method 'DeleteMemberName'
    // TODO: Method 'get_MembersName'
};
// --------------------------------------------------------
// Type: IAzRoles
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzRoles = *opaque{
    // TODO: Method 'get_Item'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
};
// --------------------------------------------------------
// Type: IAzClientContext
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzClientContext = *opaque{
    // TODO: Method 'AccessCheck'
    // TODO: Method 'GetBusinessRuleString'
    // TODO: Method 'get_UserDn'
    // TODO: Method 'get_UserSamCompat'
    // TODO: Method 'get_UserDisplay'
    // TODO: Method 'get_UserGuid'
    // TODO: Method 'get_UserCanonical'
    // TODO: Method 'get_UserUpn'
    // TODO: Method 'get_UserDnsSamCompat'
    // TODO: Method 'GetProperty'
    // TODO: Method 'GetRoles'
    // TODO: Method 'get_RoleForAccessCheck'
    // TODO: Method 'put_RoleForAccessCheck'
};
// --------------------------------------------------------
// Type: IAzClientContext2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzClientContext2 = *opaque{
    // TODO: Method 'GetAssignedScopesPage'
    // TODO: Method 'AddRoles'
    // TODO: Method 'AddApplicationGroups'
    // TODO: Method 'AddStringSids'
    // TODO: Method 'put_LDAPQueryDN'
    // TODO: Method 'get_LDAPQueryDN'
};
// --------------------------------------------------------
// Type: IAzBizRuleContext
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzBizRuleContext = *opaque{
    // TODO: Method 'put_BusinessRuleResult'
    // TODO: Method 'put_BusinessRuleString'
    // TODO: Method 'get_BusinessRuleString'
    // TODO: Method 'GetParameter'
};
// --------------------------------------------------------
// Type: IAzBizRuleParameters
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzBizRuleParameters = *opaque{
    // TODO: Method 'AddParameter'
    // TODO: Method 'AddParameters'
    // TODO: Method 'GetParameterValue'
    // TODO: Method 'Remove'
    // TODO: Method 'RemoveAll'
    // TODO: Method 'get_Count'
};
// --------------------------------------------------------
// Type: IAzBizRuleInterfaces
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzBizRuleInterfaces = *opaque{
    // TODO: Method 'AddInterface'
    // TODO: Method 'AddInterfaces'
    // TODO: Method 'GetInterfaceValue'
    // TODO: Method 'Remove'
    // TODO: Method 'RemoveAll'
    // TODO: Method 'get_Count'
};
// --------------------------------------------------------
// Type: IAzClientContext3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzClientContext3 = *opaque{
    // TODO: Method 'AccessCheck2'
    // TODO: Method 'IsInRoleAssignment'
    // TODO: Method 'GetOperations'
    // TODO: Method 'GetTasks'
    // TODO: Method 'get_BizRuleParameters'
    // TODO: Method 'get_BizRuleInterfaces'
    // TODO: Method 'GetGroups'
    // TODO: Method 'get_Sids'
};
// --------------------------------------------------------
// Type: IAzScope2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzScope2 = *opaque{
    // TODO: Method 'get_RoleDefinitions'
    // TODO: Method 'CreateRoleDefinition'
    // TODO: Method 'OpenRoleDefinition'
    // TODO: Method 'DeleteRoleDefinition'
    // TODO: Method 'get_RoleAssignments'
    // TODO: Method 'CreateRoleAssignment'
    // TODO: Method 'OpenRoleAssignment'
    // TODO: Method 'DeleteRoleAssignment'
};
// --------------------------------------------------------
// Type: IAzApplication3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzApplication3 = *opaque{
    // TODO: Method 'ScopeExists'
    // TODO: Method 'OpenScope2'
    // TODO: Method 'CreateScope2'
    // TODO: Method 'DeleteScope2'
    // TODO: Method 'get_RoleDefinitions'
    // TODO: Method 'CreateRoleDefinition'
    // TODO: Method 'OpenRoleDefinition'
    // TODO: Method 'DeleteRoleDefinition'
    // TODO: Method 'get_RoleAssignments'
    // TODO: Method 'CreateRoleAssignment'
    // TODO: Method 'OpenRoleAssignment'
    // TODO: Method 'DeleteRoleAssignment'
    // TODO: Method 'get_BizRulesEnabled'
    // TODO: Method 'put_BizRulesEnabled'
};
// --------------------------------------------------------
// Type: IAzOperation2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzOperation2 = *opaque{
    // TODO: Method 'RoleAssignments'
};
// --------------------------------------------------------
// Type: IAzRoleDefinitions
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzRoleDefinitions = *opaque{
    // TODO: Method 'get_Item'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
};
// --------------------------------------------------------
// Type: IAzRoleDefinition
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzRoleDefinition = *opaque{
    // TODO: Method 'RoleAssignments'
    // TODO: Method 'AddRoleDefinition'
    // TODO: Method 'DeleteRoleDefinition'
    // TODO: Method 'get_RoleDefinitions'
};
// --------------------------------------------------------
// Type: IAzRoleAssignment
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzRoleAssignment = *opaque{
    // TODO: Method 'AddRoleDefinition'
    // TODO: Method 'DeleteRoleDefinition'
    // TODO: Method 'get_RoleDefinitions'
    // TODO: Method 'get_Scope'
};
// --------------------------------------------------------
// Type: IAzRoleAssignments
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzRoleAssignments = *opaque{
    // TODO: Method 'get_Item'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
};
// --------------------------------------------------------
// Type: IAzPrincipalLocator
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzPrincipalLocator = *opaque{
    // TODO: Method 'get_NameResolver'
    // TODO: Method 'get_ObjectPicker'
};
// --------------------------------------------------------
// Type: IAzNameResolver
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzNameResolver = *opaque{
    // TODO: Method 'NameFromSid'
    // TODO: Method 'NamesFromSids'
};
// --------------------------------------------------------
// Type: IAzObjectPicker
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzObjectPicker = *opaque{
    // TODO: Method 'GetPrincipals'
    // TODO: Method 'get_Name'
};
// --------------------------------------------------------
// Type: IAzApplicationGroup2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzApplicationGroup2 = *opaque{
    // TODO: Method 'get_BizRule'
    // TODO: Method 'put_BizRule'
    // TODO: Method 'get_BizRuleLanguage'
    // TODO: Method 'put_BizRuleLanguage'
    // TODO: Method 'get_BizRuleImportedPath'
    // TODO: Method 'put_BizRuleImportedPath'
    // TODO: Method 'RoleAssignments'
};
// --------------------------------------------------------
// Type: IAzTask2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAzTask2 = *opaque{
    // TODO: Method 'RoleAssignments'
};
// --------------------------------------------------------
// Type: AZ_PROP_CONSTANTS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AZ_PROP_CONSTANTS = *opaque{
};
// --------------------------------------------------------
// Type: SI_OBJECT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SI_OBJECT_INFO = extern struct {
    dwFlags: u32,
    hInstance: HINSTANCE,
    pszServerName: ?*u16,
    pszObjectName: ?*u16,
    pszPageTitle: ?*u16,
    guidObjectType: Guid,
};
// --------------------------------------------------------
// Type: SI_ACCESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SI_ACCESS = extern struct {
    pguid: ?*Guid,
    mask: u32,
    pszName: ?*u16,
    dwFlags: u32,
};
// --------------------------------------------------------
// Type: SI_INHERIT_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SI_INHERIT_TYPE = extern struct {
    pguid: ?*Guid,
    dwFlags: u32,
    pszName: ?*u16,
};
// --------------------------------------------------------
// Type: SI_PAGE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SI_PAGE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SI_PAGE_ACTIVATED
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SI_PAGE_ACTIVATED = *opaque{
};
// --------------------------------------------------------
// Type: ISecurityInformation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISecurityInformation = *opaque{
    // TODO: Method 'GetObjectInformation'
    // TODO: Method 'GetSecurity'
    // TODO: Method 'SetSecurity'
    // TODO: Method 'GetAccessRights'
    // TODO: Method 'MapGeneric'
    // TODO: Method 'GetInheritTypes'
    // TODO: Method 'PropertySheetPageCallback'
};
// --------------------------------------------------------
// Type: ISecurityInformation2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISecurityInformation2 = *opaque{
    // TODO: Method 'IsDaclCanonical'
    // TODO: Method 'LookupSids'
};
// --------------------------------------------------------
// Type: SID_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SID_INFO = extern struct {
    pSid: ?*opaque{},
    pwzCommonName: ?*u16,
    pwzClass: ?*u16,
    pwzUPN: ?*u16,
};
// --------------------------------------------------------
// Type: SID_INFO_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SID_INFO_LIST = extern struct {
    cItems: u32,
    aSidInfo: ?[*]SID_INFO,
};
// --------------------------------------------------------
// Type: IEffectivePermission
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEffectivePermission = *opaque{
    // TODO: Method 'GetEffectivePermission'
};
// --------------------------------------------------------
// Type: ISecurityObjectTypeInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISecurityObjectTypeInfo = *opaque{
    // TODO: Method 'GetInheritSource'
};
// --------------------------------------------------------
// Type: ISecurityInformation3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISecurityInformation3 = *opaque{
    // TODO: Method 'GetFullResourceName'
    // TODO: Method 'OpenElevatedEditor'
};
// --------------------------------------------------------
// Type: SECURITY_OBJECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SECURITY_OBJECT = extern struct {
    pwszName: ?*u16,
    pData: ?*opaque{},
    cbData: u32,
    pData2: ?*opaque{},
    cbData2: u32,
    Id: u32,
    fWellKnown: u8,
};
// --------------------------------------------------------
// Type: EFFPERM_RESULT_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EFFPERM_RESULT_LIST = extern struct {
    fEvaluated: u8,
    cObjectTypeListLength: u32,
    pObjectTypeList: ?*OBJECT_TYPE_LIST,
    pGrantedAccessList: ?*u32,
};
// --------------------------------------------------------
// Type: ISecurityInformation4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISecurityInformation4 = *opaque{
    // TODO: Method 'GetSecondarySecurity'
};
// --------------------------------------------------------
// Type: IEffectivePermission2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEffectivePermission2 = *opaque{
    // TODO: Method 'ComputeEffectivePermissionWithSecondarySecurity'
};
// --------------------------------------------------------
// Type: FN_PROGRESS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FN_PROGRESS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNREADOBJECTSECURITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNREADOBJECTSECURITY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNWRITEOBJECTSECURITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNWRITEOBJECTSECURITY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNDSCREATEISECINFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNDSCREATEISECINFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNDSCREATEISECINFOEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNDSCREATEISECINFOEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNDSCREATESECPAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNDSCREATESECPAGE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNDSEDITSECURITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNDSEDITSECURITY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CObjectId
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CObjectId = opaque {
};
// --------------------------------------------------------
// Type: CObjectIds
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CObjectIds = opaque {
};
// --------------------------------------------------------
// Type: CBinaryConverter
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CBinaryConverter = opaque {
};
// --------------------------------------------------------
// Type: CX500DistinguishedName
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX500DistinguishedName = opaque {
};
// --------------------------------------------------------
// Type: CCspInformation
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCspInformation = opaque {
};
// --------------------------------------------------------
// Type: CCspInformations
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCspInformations = opaque {
};
// --------------------------------------------------------
// Type: CCspStatus
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCspStatus = opaque {
};
// --------------------------------------------------------
// Type: CX509PublicKey
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509PublicKey = opaque {
};
// --------------------------------------------------------
// Type: CX509PrivateKey
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509PrivateKey = opaque {
};
// --------------------------------------------------------
// Type: CX509EndorsementKey
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509EndorsementKey = opaque {
};
// --------------------------------------------------------
// Type: CX509Extension
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509Extension = opaque {
};
// --------------------------------------------------------
// Type: CX509Extensions
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509Extensions = opaque {
};
// --------------------------------------------------------
// Type: CX509ExtensionKeyUsage
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509ExtensionKeyUsage = opaque {
};
// --------------------------------------------------------
// Type: CX509ExtensionEnhancedKeyUsage
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509ExtensionEnhancedKeyUsage = opaque {
};
// --------------------------------------------------------
// Type: CX509ExtensionTemplateName
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509ExtensionTemplateName = opaque {
};
// --------------------------------------------------------
// Type: CX509ExtensionTemplate
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509ExtensionTemplate = opaque {
};
// --------------------------------------------------------
// Type: CAlternativeName
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CAlternativeName = opaque {
};
// --------------------------------------------------------
// Type: CAlternativeNames
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CAlternativeNames = opaque {
};
// --------------------------------------------------------
// Type: CX509ExtensionAlternativeNames
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509ExtensionAlternativeNames = opaque {
};
// --------------------------------------------------------
// Type: CX509ExtensionBasicConstraints
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509ExtensionBasicConstraints = opaque {
};
// --------------------------------------------------------
// Type: CX509ExtensionSubjectKeyIdentifier
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509ExtensionSubjectKeyIdentifier = opaque {
};
// --------------------------------------------------------
// Type: CX509ExtensionAuthorityKeyIdentifier
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509ExtensionAuthorityKeyIdentifier = opaque {
};
// --------------------------------------------------------
// Type: CSmimeCapability
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CSmimeCapability = opaque {
};
// --------------------------------------------------------
// Type: CSmimeCapabilities
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CSmimeCapabilities = opaque {
};
// --------------------------------------------------------
// Type: CX509ExtensionSmimeCapabilities
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509ExtensionSmimeCapabilities = opaque {
};
// --------------------------------------------------------
// Type: CPolicyQualifier
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CPolicyQualifier = opaque {
};
// --------------------------------------------------------
// Type: CPolicyQualifiers
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CPolicyQualifiers = opaque {
};
// --------------------------------------------------------
// Type: CCertificatePolicy
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertificatePolicy = opaque {
};
// --------------------------------------------------------
// Type: CCertificatePolicies
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertificatePolicies = opaque {
};
// --------------------------------------------------------
// Type: CX509ExtensionCertificatePolicies
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509ExtensionCertificatePolicies = opaque {
};
// --------------------------------------------------------
// Type: CX509ExtensionMSApplicationPolicies
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509ExtensionMSApplicationPolicies = opaque {
};
// --------------------------------------------------------
// Type: CX509Attribute
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509Attribute = opaque {
};
// --------------------------------------------------------
// Type: CX509Attributes
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509Attributes = opaque {
};
// --------------------------------------------------------
// Type: CX509AttributeExtensions
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509AttributeExtensions = opaque {
};
// --------------------------------------------------------
// Type: CX509AttributeClientId
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509AttributeClientId = opaque {
};
// --------------------------------------------------------
// Type: CX509AttributeRenewalCertificate
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509AttributeRenewalCertificate = opaque {
};
// --------------------------------------------------------
// Type: CX509AttributeArchiveKey
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509AttributeArchiveKey = opaque {
};
// --------------------------------------------------------
// Type: CX509AttributeArchiveKeyHash
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509AttributeArchiveKeyHash = opaque {
};
// --------------------------------------------------------
// Type: CX509AttributeOSVersion
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509AttributeOSVersion = opaque {
};
// --------------------------------------------------------
// Type: CX509AttributeCspProvider
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509AttributeCspProvider = opaque {
};
// --------------------------------------------------------
// Type: CCryptAttribute
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCryptAttribute = opaque {
};
// --------------------------------------------------------
// Type: CCryptAttributes
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCryptAttributes = opaque {
};
// --------------------------------------------------------
// Type: CCertProperty
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertProperty = opaque {
};
// --------------------------------------------------------
// Type: CCertProperties
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertProperties = opaque {
};
// --------------------------------------------------------
// Type: CCertPropertyFriendlyName
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertPropertyFriendlyName = opaque {
};
// --------------------------------------------------------
// Type: CCertPropertyDescription
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertPropertyDescription = opaque {
};
// --------------------------------------------------------
// Type: CCertPropertyAutoEnroll
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertPropertyAutoEnroll = opaque {
};
// --------------------------------------------------------
// Type: CCertPropertyRequestOriginator
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertPropertyRequestOriginator = opaque {
};
// --------------------------------------------------------
// Type: CCertPropertySHA1Hash
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertPropertySHA1Hash = opaque {
};
// --------------------------------------------------------
// Type: CCertPropertyKeyProvInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertPropertyKeyProvInfo = opaque {
};
// --------------------------------------------------------
// Type: CCertPropertyArchived
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertPropertyArchived = opaque {
};
// --------------------------------------------------------
// Type: CCertPropertyBackedUp
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertPropertyBackedUp = opaque {
};
// --------------------------------------------------------
// Type: CCertPropertyEnrollment
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertPropertyEnrollment = opaque {
};
// --------------------------------------------------------
// Type: CCertPropertyRenewal
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertPropertyRenewal = opaque {
};
// --------------------------------------------------------
// Type: CCertPropertyArchivedKeyHash
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertPropertyArchivedKeyHash = opaque {
};
// --------------------------------------------------------
// Type: CCertPropertyEnrollmentPolicyServer
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertPropertyEnrollmentPolicyServer = opaque {
};
// --------------------------------------------------------
// Type: CSignerCertificate
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CSignerCertificate = opaque {
};
// --------------------------------------------------------
// Type: CX509NameValuePair
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509NameValuePair = opaque {
};
// --------------------------------------------------------
// Type: CCertificateAttestationChallenge
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertificateAttestationChallenge = opaque {
};
// --------------------------------------------------------
// Type: CX509CertificateRequestPkcs10
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509CertificateRequestPkcs10 = opaque {
};
// --------------------------------------------------------
// Type: CX509CertificateRequestCertificate
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509CertificateRequestCertificate = opaque {
};
// --------------------------------------------------------
// Type: CX509CertificateRequestPkcs7
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509CertificateRequestPkcs7 = opaque {
};
// --------------------------------------------------------
// Type: CX509CertificateRequestCmc
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509CertificateRequestCmc = opaque {
};
// --------------------------------------------------------
// Type: CX509Enrollment
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509Enrollment = opaque {
};
// --------------------------------------------------------
// Type: CX509EnrollmentWebClassFactory
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509EnrollmentWebClassFactory = opaque {
};
// --------------------------------------------------------
// Type: CX509EnrollmentHelper
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509EnrollmentHelper = opaque {
};
// --------------------------------------------------------
// Type: CX509MachineEnrollmentFactory
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509MachineEnrollmentFactory = opaque {
};
// --------------------------------------------------------
// Type: CX509EnrollmentPolicyActiveDirectory
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509EnrollmentPolicyActiveDirectory = opaque {
};
// --------------------------------------------------------
// Type: CX509EnrollmentPolicyWebService
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509EnrollmentPolicyWebService = opaque {
};
// --------------------------------------------------------
// Type: CX509PolicyServerListManager
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509PolicyServerListManager = opaque {
};
// --------------------------------------------------------
// Type: CX509PolicyServerUrl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509PolicyServerUrl = opaque {
};
// --------------------------------------------------------
// Type: CX509CertificateTemplateADWritable
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509CertificateTemplateADWritable = opaque {
};
// --------------------------------------------------------
// Type: CX509CertificateRevocationListEntry
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509CertificateRevocationListEntry = opaque {
};
// --------------------------------------------------------
// Type: CX509CertificateRevocationListEntries
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509CertificateRevocationListEntries = opaque {
};
// --------------------------------------------------------
// Type: CX509CertificateRevocationList
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509CertificateRevocationList = opaque {
};
// --------------------------------------------------------
// Type: CX509SCEPEnrollment
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509SCEPEnrollment = opaque {
};
// --------------------------------------------------------
// Type: CX509SCEPEnrollmentHelper
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CX509SCEPEnrollmentHelper = opaque {
};
// --------------------------------------------------------
// Type: CCertGetConfig
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertGetConfig = opaque {
};
// --------------------------------------------------------
// Type: CCertConfig
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertConfig = opaque {
};
// --------------------------------------------------------
// Type: CCertRequest
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertRequest = opaque {
};
// --------------------------------------------------------
// Type: CCertServerPolicy
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertServerPolicy = opaque {
};
// --------------------------------------------------------
// Type: CCertServerExit
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertServerExit = opaque {
};
// --------------------------------------------------------
// Type: ICertServerPolicy
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertServerPolicy = *opaque{
    // TODO: Method 'SetContext'
    // TODO: Method 'GetRequestProperty'
    // TODO: Method 'GetRequestAttribute'
    // TODO: Method 'GetCertificateProperty'
    // TODO: Method 'SetCertificateProperty'
    // TODO: Method 'GetCertificateExtension'
    // TODO: Method 'GetCertificateExtensionFlags'
    // TODO: Method 'SetCertificateExtension'
    // TODO: Method 'EnumerateExtensionsSetup'
    // TODO: Method 'EnumerateExtensions'
    // TODO: Method 'EnumerateExtensionsClose'
    // TODO: Method 'EnumerateAttributesSetup'
    // TODO: Method 'EnumerateAttributes'
    // TODO: Method 'EnumerateAttributesClose'
};
// --------------------------------------------------------
// Type: ICertServerExit
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertServerExit = *opaque{
    // TODO: Method 'SetContext'
    // TODO: Method 'GetRequestProperty'
    // TODO: Method 'GetRequestAttribute'
    // TODO: Method 'GetCertificateProperty'
    // TODO: Method 'GetCertificateExtension'
    // TODO: Method 'GetCertificateExtensionFlags'
    // TODO: Method 'EnumerateExtensionsSetup'
    // TODO: Method 'EnumerateExtensions'
    // TODO: Method 'EnumerateExtensionsClose'
    // TODO: Method 'EnumerateAttributesSetup'
    // TODO: Method 'EnumerateAttributes'
    // TODO: Method 'EnumerateAttributesClose'
};
// --------------------------------------------------------
// Type: ICertGetConfig
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertGetConfig = *opaque{
    // TODO: Method 'GetConfig'
};
// --------------------------------------------------------
// Type: ICertConfig
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertConfig = *opaque{
    // TODO: Method 'Reset'
    // TODO: Method 'Next'
    // TODO: Method 'GetField'
    // TODO: Method 'GetConfig'
};
// --------------------------------------------------------
// Type: ICertConfig2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertConfig2 = *opaque{
    // TODO: Method 'SetSharedFolder'
};
// --------------------------------------------------------
// Type: ICertRequest
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertRequest = *opaque{
    // TODO: Method 'Submit'
    // TODO: Method 'RetrievePending'
    // TODO: Method 'GetLastStatus'
    // TODO: Method 'GetRequestId'
    // TODO: Method 'GetDispositionMessage'
    // TODO: Method 'GetCACertificate'
    // TODO: Method 'GetCertificate'
};
// --------------------------------------------------------
// Type: ICertRequest2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertRequest2 = *opaque{
    // TODO: Method 'GetIssuedCertificate'
    // TODO: Method 'GetErrorMessageText'
    // TODO: Method 'GetCAProperty'
    // TODO: Method 'GetCAPropertyFlags'
    // TODO: Method 'GetCAPropertyDisplayName'
    // TODO: Method 'GetFullResponseProperty'
};
// --------------------------------------------------------
// Type: X509EnrollmentAuthFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509EnrollmentAuthFlags = *opaque{
};
// --------------------------------------------------------
// Type: ICertRequest3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertRequest3 = *opaque{
    // TODO: Method 'SetCredential'
    // TODO: Method 'GetRequestIdString'
    // TODO: Method 'GetIssuedCertificate2'
    // TODO: Method 'GetRefreshPolicy'
};
// --------------------------------------------------------
// Type: ICertManageModule
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertManageModule = *opaque{
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'Configure'
};
// --------------------------------------------------------
// Type: CERTTRANSBLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERTTRANSBLOB = extern struct {
    cb: u32,
    pb: ?*u8,
};
// --------------------------------------------------------
// Type: CERTVIEWRESTRICTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERTVIEWRESTRICTION = extern struct {
    ColumnIndex: u32,
    SeekOperator: i32,
    SortOrder: i32,
    pbValue: ?*u8,
    cbValue: u32,
};
// --------------------------------------------------------
// Type: CSEDB_RSTMAPW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CSEDB_RSTMAPW = extern struct {
    pwszDatabaseName: ?*u16,
    pwszNewDatabaseName: ?*u16,
};
// --------------------------------------------------------
// Type: FNCERTSRVISSERVERONLINEW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVISSERVERONLINEW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVBACKUPGETDYNAMICFILELISTW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVBACKUPGETDYNAMICFILELISTW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVBACKUPPREPAREW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVBACKUPPREPAREW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVBACKUPGETDATABASENAMESW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVBACKUPGETDATABASENAMESW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVBACKUPOPENFILEW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVBACKUPOPENFILEW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVBACKUPREAD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVBACKUPREAD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVBACKUPCLOSE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVBACKUPCLOSE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVBACKUPGETBACKUPLOGSW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVBACKUPGETBACKUPLOGSW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVBACKUPTRUNCATELOGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVBACKUPTRUNCATELOGS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVBACKUPEND
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVBACKUPEND = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVBACKUPFREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVBACKUPFREE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVRESTOREGETDATABASELOCATIONSW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVRESTOREGETDATABASELOCATIONSW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVRESTOREPREPAREW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVRESTOREPREPAREW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVRESTOREREGISTERW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVRESTOREREGISTERW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVRESTOREREGISTERCOMPLETE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVRESTOREREGISTERCOMPLETE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVRESTOREEND
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVRESTOREEND = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNCERTSRVSERVERCONTROLW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNCERTSRVSERVERCONTROLW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ICertPolicy
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertPolicy = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'VerifyRequest'
    // TODO: Method 'GetDescription'
    // TODO: Method 'ShutDown'
};
// --------------------------------------------------------
// Type: ICertPolicy2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertPolicy2 = *opaque{
    // TODO: Method 'GetManageModule'
};
// --------------------------------------------------------
// Type: X509SCEPMessageType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509SCEPMessageType = *opaque{
};
// --------------------------------------------------------
// Type: X509SCEPDisposition
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509SCEPDisposition = *opaque{
};
// --------------------------------------------------------
// Type: X509SCEPFailInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509SCEPFailInfo = *opaque{
};
// --------------------------------------------------------
// Type: INDESPolicy
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const INDESPolicy = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'Uninitialize'
    // TODO: Method 'GenerateChallenge'
    // TODO: Method 'VerifyRequest'
    // TODO: Method 'Notify'
};
// --------------------------------------------------------
// Type: CERTENROLL_OBJECTID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CERTENROLL_OBJECTID = *opaque{
};
// --------------------------------------------------------
// Type: WebSecurityLevel
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WebSecurityLevel = *opaque{
};
// --------------------------------------------------------
// Type: EncodingType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EncodingType = *opaque{
};
// --------------------------------------------------------
// Type: PFXExportOptions
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFXExportOptions = *opaque{
};
// --------------------------------------------------------
// Type: ObjectIdGroupId
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ObjectIdGroupId = *opaque{
};
// --------------------------------------------------------
// Type: ObjectIdPublicKeyFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ObjectIdPublicKeyFlags = *opaque{
};
// --------------------------------------------------------
// Type: AlgorithmFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AlgorithmFlags = *opaque{
};
// --------------------------------------------------------
// Type: IObjectId
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IObjectId = *opaque{
    // TODO: Method 'InitializeFromName'
    // TODO: Method 'InitializeFromValue'
    // TODO: Method 'InitializeFromAlgorithmName'
    // TODO: Method 'get_Name'
    // TODO: Method 'get_FriendlyName'
    // TODO: Method 'put_FriendlyName'
    // TODO: Method 'get_Value'
    // TODO: Method 'GetAlgorithmName'
};
// --------------------------------------------------------
// Type: IObjectIds
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IObjectIds = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
    // TODO: Method 'AddRange'
};
// --------------------------------------------------------
// Type: IBinaryConverter
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBinaryConverter = *opaque{
    // TODO: Method 'StringToString'
    // TODO: Method 'VariantByteArrayToString'
    // TODO: Method 'StringToVariantByteArray'
};
// --------------------------------------------------------
// Type: IBinaryConverter2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBinaryConverter2 = *opaque{
    // TODO: Method 'StringArrayToVariantArray'
    // TODO: Method 'VariantArrayToStringArray'
};
// --------------------------------------------------------
// Type: X500NameFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X500NameFlags = *opaque{
};
// --------------------------------------------------------
// Type: IX500DistinguishedName
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX500DistinguishedName = *opaque{
    // TODO: Method 'Decode'
    // TODO: Method 'Encode'
    // TODO: Method 'get_Name'
    // TODO: Method 'get_EncodedName'
};
// --------------------------------------------------------
// Type: X509CertificateEnrollmentContext
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509CertificateEnrollmentContext = *opaque{
};
// --------------------------------------------------------
// Type: EnrollmentEnrollStatus
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EnrollmentEnrollStatus = *opaque{
};
// --------------------------------------------------------
// Type: EnrollmentSelectionStatus
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EnrollmentSelectionStatus = *opaque{
};
// --------------------------------------------------------
// Type: EnrollmentDisplayStatus
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EnrollmentDisplayStatus = *opaque{
};
// --------------------------------------------------------
// Type: IX509EnrollmentStatus
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509EnrollmentStatus = *opaque{
    // TODO: Method 'AppendText'
    // TODO: Method 'get_Text'
    // TODO: Method 'put_Text'
    // TODO: Method 'get_Selected'
    // TODO: Method 'put_Selected'
    // TODO: Method 'get_Display'
    // TODO: Method 'put_Display'
    // TODO: Method 'get_Status'
    // TODO: Method 'put_Status'
    // TODO: Method 'get_Error'
    // TODO: Method 'put_Error'
    // TODO: Method 'get_ErrorText'
};
// --------------------------------------------------------
// Type: X509ProviderType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509ProviderType = *opaque{
};
// --------------------------------------------------------
// Type: AlgorithmType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AlgorithmType = *opaque{
};
// --------------------------------------------------------
// Type: AlgorithmOperationFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AlgorithmOperationFlags = *opaque{
};
// --------------------------------------------------------
// Type: ICspAlgorithm
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICspAlgorithm = *opaque{
    // TODO: Method 'GetAlgorithmOid'
    // TODO: Method 'get_DefaultLength'
    // TODO: Method 'get_IncrementLength'
    // TODO: Method 'get_LongName'
    // TODO: Method 'get_Valid'
    // TODO: Method 'get_MaxLength'
    // TODO: Method 'get_MinLength'
    // TODO: Method 'get_Name'
    // TODO: Method 'get_Type'
    // TODO: Method 'get_Operations'
};
// --------------------------------------------------------
// Type: ICspAlgorithms
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICspAlgorithms = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
    // TODO: Method 'get_ItemByName'
    // TODO: Method 'get_IndexByObjectId'
};
// --------------------------------------------------------
// Type: X509KeySpec
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509KeySpec = *opaque{
};
// --------------------------------------------------------
// Type: ICspInformation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICspInformation = *opaque{
    // TODO: Method 'InitializeFromName'
    // TODO: Method 'InitializeFromType'
    // TODO: Method 'get_CspAlgorithms'
    // TODO: Method 'get_HasHardwareRandomNumberGenerator'
    // TODO: Method 'get_IsHardwareDevice'
    // TODO: Method 'get_IsRemovable'
    // TODO: Method 'get_IsSoftwareDevice'
    // TODO: Method 'get_Valid'
    // TODO: Method 'get_MaxKeyContainerNameLength'
    // TODO: Method 'get_Name'
    // TODO: Method 'get_Type'
    // TODO: Method 'get_Version'
    // TODO: Method 'get_KeySpec'
    // TODO: Method 'get_IsSmartCard'
    // TODO: Method 'GetDefaultSecurityDescriptor'
    // TODO: Method 'get_LegacyCsp'
    // TODO: Method 'GetCspStatusFromOperations'
};
// --------------------------------------------------------
// Type: ICspInformations
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICspInformations = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
    // TODO: Method 'AddAvailableCsps'
    // TODO: Method 'get_ItemByName'
    // TODO: Method 'GetCspStatusFromProviderName'
    // TODO: Method 'GetCspStatusesFromOperations'
    // TODO: Method 'GetEncryptionCspAlgorithms'
    // TODO: Method 'GetHashAlgorithms'
};
// --------------------------------------------------------
// Type: ICspStatus
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICspStatus = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_Ordinal'
    // TODO: Method 'put_Ordinal'
    // TODO: Method 'get_CspAlgorithm'
    // TODO: Method 'get_CspInformation'
    // TODO: Method 'get_EnrollmentStatus'
    // TODO: Method 'get_DisplayName'
};
// --------------------------------------------------------
// Type: ICspStatuses
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICspStatuses = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
    // TODO: Method 'get_ItemByName'
    // TODO: Method 'get_ItemByOrdinal'
    // TODO: Method 'get_ItemByOperations'
    // TODO: Method 'get_ItemByProvider'
};
// --------------------------------------------------------
// Type: KeyIdentifierHashAlgorithm
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KeyIdentifierHashAlgorithm = *opaque{
};
// --------------------------------------------------------
// Type: IX509PublicKey
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509PublicKey = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'InitializeFromEncodedPublicKeyInfo'
    // TODO: Method 'get_Algorithm'
    // TODO: Method 'get_Length'
    // TODO: Method 'get_EncodedKey'
    // TODO: Method 'get_EncodedParameters'
    // TODO: Method 'ComputeKeyIdentifier'
};
// --------------------------------------------------------
// Type: X509PrivateKeyExportFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509PrivateKeyExportFlags = *opaque{
};
// --------------------------------------------------------
// Type: X509PrivateKeyUsageFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509PrivateKeyUsageFlags = *opaque{
};
// --------------------------------------------------------
// Type: X509PrivateKeyProtection
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509PrivateKeyProtection = *opaque{
};
// --------------------------------------------------------
// Type: X509PrivateKeyVerify
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509PrivateKeyVerify = *opaque{
};
// --------------------------------------------------------
// Type: IX509PrivateKey
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509PrivateKey = *opaque{
    // TODO: Method 'Open'
    // TODO: Method 'Create'
    // TODO: Method 'Close'
    // TODO: Method 'Delete'
    // TODO: Method 'Verify'
    // TODO: Method 'Import'
    // TODO: Method 'Export'
    // TODO: Method 'ExportPublicKey'
    // TODO: Method 'get_ContainerName'
    // TODO: Method 'put_ContainerName'
    // TODO: Method 'get_ContainerNamePrefix'
    // TODO: Method 'put_ContainerNamePrefix'
    // TODO: Method 'get_ReaderName'
    // TODO: Method 'put_ReaderName'
    // TODO: Method 'get_CspInformations'
    // TODO: Method 'put_CspInformations'
    // TODO: Method 'get_CspStatus'
    // TODO: Method 'put_CspStatus'
    // TODO: Method 'get_ProviderName'
    // TODO: Method 'put_ProviderName'
    // TODO: Method 'get_ProviderType'
    // TODO: Method 'put_ProviderType'
    // TODO: Method 'get_LegacyCsp'
    // TODO: Method 'put_LegacyCsp'
    // TODO: Method 'get_Algorithm'
    // TODO: Method 'put_Algorithm'
    // TODO: Method 'get_KeySpec'
    // TODO: Method 'put_KeySpec'
    // TODO: Method 'get_Length'
    // TODO: Method 'put_Length'
    // TODO: Method 'get_ExportPolicy'
    // TODO: Method 'put_ExportPolicy'
    // TODO: Method 'get_KeyUsage'
    // TODO: Method 'put_KeyUsage'
    // TODO: Method 'get_KeyProtection'
    // TODO: Method 'put_KeyProtection'
    // TODO: Method 'get_MachineContext'
    // TODO: Method 'put_MachineContext'
    // TODO: Method 'get_SecurityDescriptor'
    // TODO: Method 'put_SecurityDescriptor'
    // TODO: Method 'get_Certificate'
    // TODO: Method 'put_Certificate'
    // TODO: Method 'get_UniqueContainerName'
    // TODO: Method 'get_Opened'
    // TODO: Method 'get_DefaultContainer'
    // TODO: Method 'get_Existing'
    // TODO: Method 'put_Existing'
    // TODO: Method 'get_Silent'
    // TODO: Method 'put_Silent'
    // TODO: Method 'get_ParentWindow'
    // TODO: Method 'put_ParentWindow'
    // TODO: Method 'get_UIContextMessage'
    // TODO: Method 'put_UIContextMessage'
    // TODO: Method 'put_Pin'
    // TODO: Method 'get_FriendlyName'
    // TODO: Method 'put_FriendlyName'
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
};
// --------------------------------------------------------
// Type: X509HardwareKeyUsageFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509HardwareKeyUsageFlags = *opaque{
};
// --------------------------------------------------------
// Type: X509KeyParametersExportType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509KeyParametersExportType = *opaque{
};
// --------------------------------------------------------
// Type: IX509PrivateKey2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509PrivateKey2 = *opaque{
    // TODO: Method 'get_HardwareKeyUsage'
    // TODO: Method 'put_HardwareKeyUsage'
    // TODO: Method 'get_AlternateStorageLocation'
    // TODO: Method 'put_AlternateStorageLocation'
    // TODO: Method 'get_AlgorithmName'
    // TODO: Method 'put_AlgorithmName'
    // TODO: Method 'get_AlgorithmParameters'
    // TODO: Method 'put_AlgorithmParameters'
    // TODO: Method 'get_ParametersExportType'
    // TODO: Method 'put_ParametersExportType'
};
// --------------------------------------------------------
// Type: IX509EndorsementKey
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509EndorsementKey = *opaque{
    // TODO: Method 'get_ProviderName'
    // TODO: Method 'put_ProviderName'
    // TODO: Method 'get_Length'
    // TODO: Method 'get_Opened'
    // TODO: Method 'AddCertificate'
    // TODO: Method 'RemoveCertificate'
    // TODO: Method 'GetCertificateByIndex'
    // TODO: Method 'GetCertificateCount'
    // TODO: Method 'ExportPublicKey'
    // TODO: Method 'Open'
    // TODO: Method 'Close'
};
// --------------------------------------------------------
// Type: IX509Extension
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509Extension = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_ObjectId'
    // TODO: Method 'get_RawData'
    // TODO: Method 'get_Critical'
    // TODO: Method 'put_Critical'
};
// --------------------------------------------------------
// Type: IX509Extensions
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509Extensions = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
    // TODO: Method 'get_IndexByObjectId'
    // TODO: Method 'AddRange'
};
// --------------------------------------------------------
// Type: X509KeyUsageFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509KeyUsageFlags = *opaque{
};
// --------------------------------------------------------
// Type: IX509ExtensionKeyUsage
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509ExtensionKeyUsage = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_KeyUsage'
};
// --------------------------------------------------------
// Type: IX509ExtensionEnhancedKeyUsage
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509ExtensionEnhancedKeyUsage = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_EnhancedKeyUsage'
};
// --------------------------------------------------------
// Type: IX509ExtensionTemplateName
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509ExtensionTemplateName = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_TemplateName'
};
// --------------------------------------------------------
// Type: IX509ExtensionTemplate
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509ExtensionTemplate = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_TemplateOid'
    // TODO: Method 'get_MajorVersion'
    // TODO: Method 'get_MinorVersion'
};
// --------------------------------------------------------
// Type: AlternativeNameType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AlternativeNameType = *opaque{
};
// --------------------------------------------------------
// Type: IAlternativeName
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAlternativeName = *opaque{
    // TODO: Method 'InitializeFromString'
    // TODO: Method 'InitializeFromRawData'
    // TODO: Method 'InitializeFromOtherName'
    // TODO: Method 'get_Type'
    // TODO: Method 'get_StrValue'
    // TODO: Method 'get_ObjectId'
    // TODO: Method 'get_RawData'
};
// --------------------------------------------------------
// Type: IAlternativeNames
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAlternativeNames = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
};
// --------------------------------------------------------
// Type: IX509ExtensionAlternativeNames
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509ExtensionAlternativeNames = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_AlternativeNames'
};
// --------------------------------------------------------
// Type: IX509ExtensionBasicConstraints
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509ExtensionBasicConstraints = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_IsCA'
    // TODO: Method 'get_PathLenConstraint'
};
// --------------------------------------------------------
// Type: IX509ExtensionSubjectKeyIdentifier
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509ExtensionSubjectKeyIdentifier = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_SubjectKeyIdentifier'
};
// --------------------------------------------------------
// Type: IX509ExtensionAuthorityKeyIdentifier
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509ExtensionAuthorityKeyIdentifier = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_AuthorityKeyIdentifier'
};
// --------------------------------------------------------
// Type: ISmimeCapability
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISmimeCapability = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_ObjectId'
    // TODO: Method 'get_BitCount'
};
// --------------------------------------------------------
// Type: ISmimeCapabilities
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISmimeCapabilities = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
    // TODO: Method 'AddFromCsp'
    // TODO: Method 'AddAvailableSmimeCapabilities'
};
// --------------------------------------------------------
// Type: IX509ExtensionSmimeCapabilities
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509ExtensionSmimeCapabilities = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_SmimeCapabilities'
};
// --------------------------------------------------------
// Type: PolicyQualifierType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PolicyQualifierType = *opaque{
};
// --------------------------------------------------------
// Type: IPolicyQualifier
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPolicyQualifier = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'get_ObjectId'
    // TODO: Method 'get_Qualifier'
    // TODO: Method 'get_Type'
    // TODO: Method 'get_RawData'
};
// --------------------------------------------------------
// Type: IPolicyQualifiers
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPolicyQualifiers = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
};
// --------------------------------------------------------
// Type: ICertificatePolicy
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertificatePolicy = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_ObjectId'
    // TODO: Method 'get_PolicyQualifiers'
};
// --------------------------------------------------------
// Type: ICertificatePolicies
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertificatePolicies = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
};
// --------------------------------------------------------
// Type: IX509ExtensionCertificatePolicies
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509ExtensionCertificatePolicies = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_Policies'
};
// --------------------------------------------------------
// Type: IX509ExtensionMSApplicationPolicies
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509ExtensionMSApplicationPolicies = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_Policies'
};
// --------------------------------------------------------
// Type: IX509Attribute
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509Attribute = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_ObjectId'
    // TODO: Method 'get_RawData'
};
// --------------------------------------------------------
// Type: IX509Attributes
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509Attributes = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
};
// --------------------------------------------------------
// Type: IX509AttributeExtensions
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509AttributeExtensions = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_X509Extensions'
};
// --------------------------------------------------------
// Type: RequestClientInfoClientId
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RequestClientInfoClientId = *opaque{
};
// --------------------------------------------------------
// Type: IX509AttributeClientId
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509AttributeClientId = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_ClientId'
    // TODO: Method 'get_MachineDnsName'
    // TODO: Method 'get_UserSamName'
    // TODO: Method 'get_ProcessName'
};
// --------------------------------------------------------
// Type: IX509AttributeRenewalCertificate
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509AttributeRenewalCertificate = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_RenewalCertificate'
};
// --------------------------------------------------------
// Type: IX509AttributeArchiveKey
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509AttributeArchiveKey = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_EncryptedKeyBlob'
    // TODO: Method 'get_EncryptionAlgorithm'
    // TODO: Method 'get_EncryptionStrength'
};
// --------------------------------------------------------
// Type: IX509AttributeArchiveKeyHash
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509AttributeArchiveKeyHash = *opaque{
    // TODO: Method 'InitializeEncodeFromEncryptedKeyBlob'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_EncryptedKeyHashBlob'
};
// --------------------------------------------------------
// Type: IX509AttributeOSVersion
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509AttributeOSVersion = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_OSVersion'
};
// --------------------------------------------------------
// Type: IX509AttributeCspProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509AttributeCspProvider = *opaque{
    // TODO: Method 'InitializeEncode'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_KeySpec'
    // TODO: Method 'get_ProviderName'
    // TODO: Method 'get_Signature'
};
// --------------------------------------------------------
// Type: ICryptAttribute
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICryptAttribute = *opaque{
    // TODO: Method 'InitializeFromObjectId'
    // TODO: Method 'InitializeFromValues'
    // TODO: Method 'get_ObjectId'
    // TODO: Method 'get_Values'
};
// --------------------------------------------------------
// Type: ICryptAttributes
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICryptAttributes = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
    // TODO: Method 'get_IndexByObjectId'
    // TODO: Method 'AddRange'
};
// --------------------------------------------------------
// Type: CERTENROLL_PROPERTYID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CERTENROLL_PROPERTYID = *opaque{
};
// --------------------------------------------------------
// Type: ICertProperty
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertProperty = *opaque{
    // TODO: Method 'InitializeFromCertificate'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_PropertyId'
    // TODO: Method 'put_PropertyId'
    // TODO: Method 'get_RawData'
    // TODO: Method 'RemoveFromCertificate'
    // TODO: Method 'SetValueOnCertificate'
};
// --------------------------------------------------------
// Type: ICertProperties
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertProperties = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
    // TODO: Method 'InitializeFromCertificate'
};
// --------------------------------------------------------
// Type: ICertPropertyFriendlyName
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertPropertyFriendlyName = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_FriendlyName'
};
// --------------------------------------------------------
// Type: ICertPropertyDescription
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertPropertyDescription = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_Description'
};
// --------------------------------------------------------
// Type: ICertPropertyAutoEnroll
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertPropertyAutoEnroll = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_TemplateName'
};
// --------------------------------------------------------
// Type: ICertPropertyRequestOriginator
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertPropertyRequestOriginator = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'InitializeFromLocalRequestOriginator'
    // TODO: Method 'get_RequestOriginator'
};
// --------------------------------------------------------
// Type: ICertPropertySHA1Hash
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertPropertySHA1Hash = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_SHA1Hash'
};
// --------------------------------------------------------
// Type: ICertPropertyKeyProvInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertPropertyKeyProvInfo = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_PrivateKey'
};
// --------------------------------------------------------
// Type: ICertPropertyArchived
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertPropertyArchived = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_Archived'
};
// --------------------------------------------------------
// Type: ICertPropertyBackedUp
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertPropertyBackedUp = *opaque{
    // TODO: Method 'InitializeFromCurrentTime'
    // TODO: Method 'Initialize'
    // TODO: Method 'get_BackedUpValue'
    // TODO: Method 'get_BackedUpTime'
};
// --------------------------------------------------------
// Type: ICertPropertyEnrollment
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertPropertyEnrollment = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_RequestId'
    // TODO: Method 'get_CADnsName'
    // TODO: Method 'get_CAName'
    // TODO: Method 'get_FriendlyName'
};
// --------------------------------------------------------
// Type: ICertPropertyRenewal
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertPropertyRenewal = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'InitializeFromCertificateHash'
    // TODO: Method 'get_Renewal'
};
// --------------------------------------------------------
// Type: ICertPropertyArchivedKeyHash
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertPropertyArchivedKeyHash = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_ArchivedKeyHash'
};
// --------------------------------------------------------
// Type: EnrollmentPolicyServerPropertyFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EnrollmentPolicyServerPropertyFlags = *opaque{
};
// --------------------------------------------------------
// Type: PolicyServerUrlFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PolicyServerUrlFlags = *opaque{
};
// --------------------------------------------------------
// Type: ICertPropertyEnrollmentPolicyServer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertPropertyEnrollmentPolicyServer = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'GetPolicyServerUrl'
    // TODO: Method 'GetPolicyServerId'
    // TODO: Method 'GetEnrollmentServerUrl'
    // TODO: Method 'GetRequestIdString'
    // TODO: Method 'GetPropertyFlags'
    // TODO: Method 'GetUrlFlags'
    // TODO: Method 'GetAuthentication'
    // TODO: Method 'GetEnrollmentServerAuthentication'
};
// --------------------------------------------------------
// Type: IX509SignatureInformation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509SignatureInformation = *opaque{
    // TODO: Method 'get_HashAlgorithm'
    // TODO: Method 'put_HashAlgorithm'
    // TODO: Method 'get_PublicKeyAlgorithm'
    // TODO: Method 'put_PublicKeyAlgorithm'
    // TODO: Method 'get_Parameters'
    // TODO: Method 'put_Parameters'
    // TODO: Method 'get_AlternateSignatureAlgorithm'
    // TODO: Method 'put_AlternateSignatureAlgorithm'
    // TODO: Method 'get_AlternateSignatureAlgorithmSet'
    // TODO: Method 'get_NullSigned'
    // TODO: Method 'put_NullSigned'
    // TODO: Method 'GetSignatureAlgorithm'
    // TODO: Method 'SetDefaultValues'
};
// --------------------------------------------------------
// Type: ISignerCertificate
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISignerCertificate = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_Certificate'
    // TODO: Method 'get_PrivateKey'
    // TODO: Method 'get_Silent'
    // TODO: Method 'put_Silent'
    // TODO: Method 'get_ParentWindow'
    // TODO: Method 'put_ParentWindow'
    // TODO: Method 'get_UIContextMessage'
    // TODO: Method 'put_UIContextMessage'
    // TODO: Method 'put_Pin'
    // TODO: Method 'get_SignatureInformation'
};
// --------------------------------------------------------
// Type: ISignerCertificates
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISignerCertificates = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
    // TODO: Method 'Find'
};
// --------------------------------------------------------
// Type: IX509NameValuePair
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509NameValuePair = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_Value'
    // TODO: Method 'get_Name'
};
// --------------------------------------------------------
// Type: IX509NameValuePairs
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509NameValuePairs = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
};
// --------------------------------------------------------
// Type: EnrollmentTemplateProperty
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EnrollmentTemplateProperty = *opaque{
};
// --------------------------------------------------------
// Type: IX509CertificateTemplate
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateTemplate = *opaque{
    // TODO: Method 'get_Property'
};
// --------------------------------------------------------
// Type: IX509CertificateTemplates
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateTemplates = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
    // TODO: Method 'get_ItemByName'
    // TODO: Method 'get_ItemByOid'
};
// --------------------------------------------------------
// Type: CommitTemplateFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CommitTemplateFlags = *opaque{
};
// --------------------------------------------------------
// Type: IX509CertificateTemplateWritable
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateTemplateWritable = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'Commit'
    // TODO: Method 'get_Property'
    // TODO: Method 'put_Property'
    // TODO: Method 'get_Template'
};
// --------------------------------------------------------
// Type: EnrollmentCAProperty
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EnrollmentCAProperty = *opaque{
};
// --------------------------------------------------------
// Type: ICertificationAuthority
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertificationAuthority = *opaque{
    // TODO: Method 'get_Property'
};
// --------------------------------------------------------
// Type: ICertificationAuthorities
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertificationAuthorities = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
    // TODO: Method 'ComputeSiteCosts'
    // TODO: Method 'get_ItemByName'
};
// --------------------------------------------------------
// Type: X509EnrollmentPolicyLoadOption
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509EnrollmentPolicyLoadOption = *opaque{
};
// --------------------------------------------------------
// Type: EnrollmentPolicyFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EnrollmentPolicyFlags = *opaque{
};
// --------------------------------------------------------
// Type: PolicyServerUrlPropertyID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PolicyServerUrlPropertyID = *opaque{
};
// --------------------------------------------------------
// Type: X509EnrollmentPolicyExportFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509EnrollmentPolicyExportFlags = *opaque{
};
// --------------------------------------------------------
// Type: IX509EnrollmentPolicyServer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509EnrollmentPolicyServer = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'LoadPolicy'
    // TODO: Method 'GetTemplates'
    // TODO: Method 'GetCAsForTemplate'
    // TODO: Method 'GetCAs'
    // TODO: Method 'Validate'
    // TODO: Method 'GetCustomOids'
    // TODO: Method 'GetNextUpdateTime'
    // TODO: Method 'GetLastUpdateTime'
    // TODO: Method 'GetPolicyServerUrl'
    // TODO: Method 'GetPolicyServerId'
    // TODO: Method 'GetFriendlyName'
    // TODO: Method 'GetIsDefaultCEP'
    // TODO: Method 'GetUseClientId'
    // TODO: Method 'GetAllowUnTrustedCA'
    // TODO: Method 'GetCachePath'
    // TODO: Method 'GetCacheDir'
    // TODO: Method 'GetAuthFlags'
    // TODO: Method 'SetCredential'
    // TODO: Method 'QueryChanges'
    // TODO: Method 'InitializeImport'
    // TODO: Method 'Export'
    // TODO: Method 'get_Cost'
    // TODO: Method 'put_Cost'
};
// --------------------------------------------------------
// Type: IX509PolicyServerUrl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509PolicyServerUrl = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_Url'
    // TODO: Method 'put_Url'
    // TODO: Method 'get_Default'
    // TODO: Method 'put_Default'
    // TODO: Method 'get_Flags'
    // TODO: Method 'put_Flags'
    // TODO: Method 'get_AuthFlags'
    // TODO: Method 'put_AuthFlags'
    // TODO: Method 'get_Cost'
    // TODO: Method 'put_Cost'
    // TODO: Method 'GetStringProperty'
    // TODO: Method 'SetStringProperty'
    // TODO: Method 'UpdateRegistry'
    // TODO: Method 'RemoveFromRegistry'
};
// --------------------------------------------------------
// Type: IX509PolicyServerListManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509PolicyServerListManager = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
    // TODO: Method 'Initialize'
};
// --------------------------------------------------------
// Type: X509RequestType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509RequestType = *opaque{
};
// --------------------------------------------------------
// Type: X509RequestInheritOptions
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509RequestInheritOptions = *opaque{
};
// --------------------------------------------------------
// Type: InnerRequestLevel
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const InnerRequestLevel = *opaque{
};
// --------------------------------------------------------
// Type: IX509CertificateRequest
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateRequest = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'Encode'
    // TODO: Method 'ResetForEncode'
    // TODO: Method 'GetInnerRequest'
    // TODO: Method 'get_Type'
    // TODO: Method 'get_EnrollmentContext'
    // TODO: Method 'get_Silent'
    // TODO: Method 'put_Silent'
    // TODO: Method 'get_ParentWindow'
    // TODO: Method 'put_ParentWindow'
    // TODO: Method 'get_UIContextMessage'
    // TODO: Method 'put_UIContextMessage'
    // TODO: Method 'get_SuppressDefaults'
    // TODO: Method 'put_SuppressDefaults'
    // TODO: Method 'get_RenewalCertificate'
    // TODO: Method 'put_RenewalCertificate'
    // TODO: Method 'get_ClientId'
    // TODO: Method 'put_ClientId'
    // TODO: Method 'get_CspInformations'
    // TODO: Method 'put_CspInformations'
    // TODO: Method 'get_HashAlgorithm'
    // TODO: Method 'put_HashAlgorithm'
    // TODO: Method 'get_AlternateSignatureAlgorithm'
    // TODO: Method 'put_AlternateSignatureAlgorithm'
    // TODO: Method 'get_RawData'
};
// --------------------------------------------------------
// Type: Pkcs10AllowedSignatureTypes
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const Pkcs10AllowedSignatureTypes = *opaque{
};
// --------------------------------------------------------
// Type: IX509CertificateRequestPkcs10
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateRequestPkcs10 = *opaque{
    // TODO: Method 'InitializeFromTemplateName'
    // TODO: Method 'InitializeFromPrivateKey'
    // TODO: Method 'InitializeFromPublicKey'
    // TODO: Method 'InitializeFromCertificate'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'CheckSignature'
    // TODO: Method 'IsSmartCard'
    // TODO: Method 'get_TemplateObjectId'
    // TODO: Method 'get_PublicKey'
    // TODO: Method 'get_PrivateKey'
    // TODO: Method 'get_NullSigned'
    // TODO: Method 'get_ReuseKey'
    // TODO: Method 'get_OldCertificate'
    // TODO: Method 'get_Subject'
    // TODO: Method 'put_Subject'
    // TODO: Method 'get_CspStatuses'
    // TODO: Method 'get_SmimeCapabilities'
    // TODO: Method 'put_SmimeCapabilities'
    // TODO: Method 'get_SignatureInformation'
    // TODO: Method 'get_KeyContainerNamePrefix'
    // TODO: Method 'put_KeyContainerNamePrefix'
    // TODO: Method 'get_CryptAttributes'
    // TODO: Method 'get_X509Extensions'
    // TODO: Method 'get_CriticalExtensions'
    // TODO: Method 'get_SuppressOids'
    // TODO: Method 'get_RawDataToBeSigned'
    // TODO: Method 'get_Signature'
    // TODO: Method 'GetCspStatuses'
};
// --------------------------------------------------------
// Type: IX509CertificateRequestPkcs10V2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateRequestPkcs10V2 = *opaque{
    // TODO: Method 'InitializeFromTemplate'
    // TODO: Method 'InitializeFromPrivateKeyTemplate'
    // TODO: Method 'InitializeFromPublicKeyTemplate'
    // TODO: Method 'get_PolicyServer'
    // TODO: Method 'get_Template'
};
// --------------------------------------------------------
// Type: IX509CertificateRequestPkcs10V3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateRequestPkcs10V3 = *opaque{
    // TODO: Method 'get_AttestPrivateKey'
    // TODO: Method 'put_AttestPrivateKey'
    // TODO: Method 'get_AttestationEncryptionCertificate'
    // TODO: Method 'put_AttestationEncryptionCertificate'
    // TODO: Method 'get_EncryptionAlgorithm'
    // TODO: Method 'put_EncryptionAlgorithm'
    // TODO: Method 'get_EncryptionStrength'
    // TODO: Method 'put_EncryptionStrength'
    // TODO: Method 'get_ChallengePassword'
    // TODO: Method 'put_ChallengePassword'
    // TODO: Method 'get_NameValuePairs'
};
// --------------------------------------------------------
// Type: KeyAttestationClaimType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KeyAttestationClaimType = *opaque{
};
// --------------------------------------------------------
// Type: IX509CertificateRequestPkcs10V4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateRequestPkcs10V4 = *opaque{
    // TODO: Method 'get_ClaimType'
    // TODO: Method 'put_ClaimType'
    // TODO: Method 'get_AttestPrivateKeyPreferred'
    // TODO: Method 'put_AttestPrivateKeyPreferred'
};
// --------------------------------------------------------
// Type: IX509CertificateRequestCertificate
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateRequestCertificate = *opaque{
    // TODO: Method 'CheckPublicKeySignature'
    // TODO: Method 'get_Issuer'
    // TODO: Method 'put_Issuer'
    // TODO: Method 'get_NotBefore'
    // TODO: Method 'put_NotBefore'
    // TODO: Method 'get_NotAfter'
    // TODO: Method 'put_NotAfter'
    // TODO: Method 'get_SerialNumber'
    // TODO: Method 'put_SerialNumber'
    // TODO: Method 'get_SignerCertificate'
    // TODO: Method 'put_SignerCertificate'
};
// --------------------------------------------------------
// Type: IX509CertificateRequestCertificate2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateRequestCertificate2 = *opaque{
    // TODO: Method 'InitializeFromTemplate'
    // TODO: Method 'InitializeFromPrivateKeyTemplate'
    // TODO: Method 'get_PolicyServer'
    // TODO: Method 'get_Template'
};
// --------------------------------------------------------
// Type: IX509CertificateRequestPkcs7
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateRequestPkcs7 = *opaque{
    // TODO: Method 'InitializeFromTemplateName'
    // TODO: Method 'InitializeFromCertificate'
    // TODO: Method 'InitializeFromInnerRequest'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'get_RequesterName'
    // TODO: Method 'put_RequesterName'
    // TODO: Method 'get_SignerCertificate'
    // TODO: Method 'put_SignerCertificate'
};
// --------------------------------------------------------
// Type: IX509CertificateRequestPkcs7V2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateRequestPkcs7V2 = *opaque{
    // TODO: Method 'InitializeFromTemplate'
    // TODO: Method 'get_PolicyServer'
    // TODO: Method 'get_Template'
    // TODO: Method 'CheckCertificateSignature'
};
// --------------------------------------------------------
// Type: IX509CertificateRequestCmc
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateRequestCmc = *opaque{
    // TODO: Method 'InitializeFromInnerRequestTemplateName'
    // TODO: Method 'get_TemplateObjectId'
    // TODO: Method 'get_NullSigned'
    // TODO: Method 'get_CryptAttributes'
    // TODO: Method 'get_NameValuePairs'
    // TODO: Method 'get_X509Extensions'
    // TODO: Method 'get_CriticalExtensions'
    // TODO: Method 'get_SuppressOids'
    // TODO: Method 'get_TransactionId'
    // TODO: Method 'put_TransactionId'
    // TODO: Method 'get_SenderNonce'
    // TODO: Method 'put_SenderNonce'
    // TODO: Method 'get_SignatureInformation'
    // TODO: Method 'get_ArchivePrivateKey'
    // TODO: Method 'put_ArchivePrivateKey'
    // TODO: Method 'get_KeyArchivalCertificate'
    // TODO: Method 'put_KeyArchivalCertificate'
    // TODO: Method 'get_EncryptionAlgorithm'
    // TODO: Method 'put_EncryptionAlgorithm'
    // TODO: Method 'get_EncryptionStrength'
    // TODO: Method 'put_EncryptionStrength'
    // TODO: Method 'get_EncryptedKeyHash'
    // TODO: Method 'get_SignerCertificates'
};
// --------------------------------------------------------
// Type: IX509CertificateRequestCmc2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateRequestCmc2 = *opaque{
    // TODO: Method 'InitializeFromTemplate'
    // TODO: Method 'InitializeFromInnerRequestTemplate'
    // TODO: Method 'get_PolicyServer'
    // TODO: Method 'get_Template'
    // TODO: Method 'CheckSignature'
    // TODO: Method 'CheckCertificateSignature'
};
// --------------------------------------------------------
// Type: InstallResponseRestrictionFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const InstallResponseRestrictionFlags = *opaque{
};
// --------------------------------------------------------
// Type: IX509Enrollment
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509Enrollment = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'InitializeFromTemplateName'
    // TODO: Method 'InitializeFromRequest'
    // TODO: Method 'CreateRequest'
    // TODO: Method 'Enroll'
    // TODO: Method 'InstallResponse'
    // TODO: Method 'CreatePFX'
    // TODO: Method 'get_Request'
    // TODO: Method 'get_Silent'
    // TODO: Method 'put_Silent'
    // TODO: Method 'get_ParentWindow'
    // TODO: Method 'put_ParentWindow'
    // TODO: Method 'get_NameValuePairs'
    // TODO: Method 'get_EnrollmentContext'
    // TODO: Method 'get_Status'
    // TODO: Method 'get_Certificate'
    // TODO: Method 'get_Response'
    // TODO: Method 'get_CertificateFriendlyName'
    // TODO: Method 'put_CertificateFriendlyName'
    // TODO: Method 'get_CertificateDescription'
    // TODO: Method 'put_CertificateDescription'
    // TODO: Method 'get_RequestId'
    // TODO: Method 'get_CAConfigString'
};
// --------------------------------------------------------
// Type: IX509Enrollment2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509Enrollment2 = *opaque{
    // TODO: Method 'InitializeFromTemplate'
    // TODO: Method 'InstallResponse2'
    // TODO: Method 'get_PolicyServer'
    // TODO: Method 'get_Template'
    // TODO: Method 'get_RequestIdString'
};
// --------------------------------------------------------
// Type: WebEnrollmentFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WebEnrollmentFlags = *opaque{
};
// --------------------------------------------------------
// Type: IX509EnrollmentHelper
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509EnrollmentHelper = *opaque{
    // TODO: Method 'AddPolicyServer'
    // TODO: Method 'AddEnrollmentServer'
    // TODO: Method 'Enroll'
    // TODO: Method 'Initialize'
};
// --------------------------------------------------------
// Type: IX509EnrollmentWebClassFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509EnrollmentWebClassFactory = *opaque{
    // TODO: Method 'CreateObject'
};
// --------------------------------------------------------
// Type: IX509MachineEnrollmentFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509MachineEnrollmentFactory = *opaque{
    // TODO: Method 'CreateObject'
};
// --------------------------------------------------------
// Type: CRLRevocationReason
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CRLRevocationReason = *opaque{
};
// --------------------------------------------------------
// Type: IX509CertificateRevocationListEntry
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateRevocationListEntry = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'get_SerialNumber'
    // TODO: Method 'get_RevocationDate'
    // TODO: Method 'get_RevocationReason'
    // TODO: Method 'put_RevocationReason'
    // TODO: Method 'get_X509Extensions'
    // TODO: Method 'get_CriticalExtensions'
};
// --------------------------------------------------------
// Type: IX509CertificateRevocationListEntries
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateRevocationListEntries = *opaque{
    // TODO: Method 'get_ItemByIndex'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'Clear'
    // TODO: Method 'get_IndexBySerialNumber'
    // TODO: Method 'AddRange'
};
// --------------------------------------------------------
// Type: IX509CertificateRevocationList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509CertificateRevocationList = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'InitializeDecode'
    // TODO: Method 'Encode'
    // TODO: Method 'ResetForEncode'
    // TODO: Method 'CheckPublicKeySignature'
    // TODO: Method 'CheckSignature'
    // TODO: Method 'get_Issuer'
    // TODO: Method 'put_Issuer'
    // TODO: Method 'get_ThisUpdate'
    // TODO: Method 'put_ThisUpdate'
    // TODO: Method 'get_NextUpdate'
    // TODO: Method 'put_NextUpdate'
    // TODO: Method 'get_X509CRLEntries'
    // TODO: Method 'get_X509Extensions'
    // TODO: Method 'get_CriticalExtensions'
    // TODO: Method 'get_SignerCertificate'
    // TODO: Method 'put_SignerCertificate'
    // TODO: Method 'get_CRLNumber'
    // TODO: Method 'put_CRLNumber'
    // TODO: Method 'get_CAVersion'
    // TODO: Method 'put_CAVersion'
    // TODO: Method 'get_BaseCRL'
    // TODO: Method 'get_NullSigned'
    // TODO: Method 'get_HashAlgorithm'
    // TODO: Method 'put_HashAlgorithm'
    // TODO: Method 'get_AlternateSignatureAlgorithm'
    // TODO: Method 'put_AlternateSignatureAlgorithm'
    // TODO: Method 'get_SignatureInformation'
    // TODO: Method 'get_RawData'
    // TODO: Method 'get_RawDataToBeSigned'
    // TODO: Method 'get_Signature'
};
// --------------------------------------------------------
// Type: ICertificateAttestationChallenge
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertificateAttestationChallenge = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'DecryptChallenge'
    // TODO: Method 'get_RequestID'
};
// --------------------------------------------------------
// Type: ICertificateAttestationChallenge2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertificateAttestationChallenge2 = *opaque{
    // TODO: Method 'put_KeyContainerName'
    // TODO: Method 'put_KeyBlob'
};
// --------------------------------------------------------
// Type: IX509SCEPEnrollment
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509SCEPEnrollment = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'InitializeForPending'
    // TODO: Method 'CreateRequestMessage'
    // TODO: Method 'CreateRetrievePendingMessage'
    // TODO: Method 'CreateRetrieveCertificateMessage'
    // TODO: Method 'ProcessResponseMessage'
    // TODO: Method 'put_ServerCapabilities'
    // TODO: Method 'get_FailInfo'
    // TODO: Method 'get_SignerCertificate'
    // TODO: Method 'put_SignerCertificate'
    // TODO: Method 'get_OldCertificate'
    // TODO: Method 'put_OldCertificate'
    // TODO: Method 'get_TransactionId'
    // TODO: Method 'put_TransactionId'
    // TODO: Method 'get_Request'
    // TODO: Method 'get_CertificateFriendlyName'
    // TODO: Method 'put_CertificateFriendlyName'
    // TODO: Method 'get_Status'
    // TODO: Method 'get_Certificate'
    // TODO: Method 'get_Silent'
    // TODO: Method 'put_Silent'
    // TODO: Method 'DeleteRequest'
};
// --------------------------------------------------------
// Type: X509SCEPProcessMessageFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509SCEPProcessMessageFlags = *opaque{
};
// --------------------------------------------------------
// Type: DelayRetryAction
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DelayRetryAction = *opaque{
};
// --------------------------------------------------------
// Type: IX509SCEPEnrollment2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509SCEPEnrollment2 = *opaque{
    // TODO: Method 'CreateChallengeAnswerMessage'
    // TODO: Method 'ProcessResponseMessage2'
    // TODO: Method 'get_ResultMessageText'
    // TODO: Method 'get_DelayRetry'
    // TODO: Method 'get_ActivityId'
    // TODO: Method 'put_ActivityId'
};
// --------------------------------------------------------
// Type: IX509SCEPEnrollmentHelper
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IX509SCEPEnrollmentHelper = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'InitializeForPending'
    // TODO: Method 'Enroll'
    // TODO: Method 'FetchPending'
    // TODO: Method 'get_X509SCEPEnrollment'
    // TODO: Method 'get_ResultMessageText'
};
// --------------------------------------------------------
// Type: X509CertificateTemplateGeneralFlag
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509CertificateTemplateGeneralFlag = *opaque{
};
// --------------------------------------------------------
// Type: X509CertificateTemplateEnrollmentFlag
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509CertificateTemplateEnrollmentFlag = *opaque{
};
// --------------------------------------------------------
// Type: X509CertificateTemplateSubjectNameFlag
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509CertificateTemplateSubjectNameFlag = *opaque{
};
// --------------------------------------------------------
// Type: X509CertificateTemplatePrivateKeyFlag
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const X509CertificateTemplatePrivateKeyFlag = *opaque{
};
// --------------------------------------------------------
// Type: ImportPFXFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ImportPFXFlags = *opaque{
};
// --------------------------------------------------------
// Type: FNIMPORTPFXTOPROVIDER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNIMPORTPFXTOPROVIDER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FNIMPORTPFXTOPROVIDERFREEDATA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNIMPORTPFXTOPROVIDERFREEDATA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: NCRYPT_DESCRIPTOR_HANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_DESCRIPTOR_HANDLE__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: NCRYPT_STREAM_HANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_STREAM_HANDLE__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: PFNCryptStreamOutputCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNCryptStreamOutputCallback = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: NCRYPT_PROTECT_STREAM_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_PROTECT_STREAM_INFO = extern struct {
    pfnStreamOutput: PFNCryptStreamOutputCallback,
    pvCallbackCtxt: ?*opaque{},
};
// --------------------------------------------------------
// Type: PFNCryptStreamOutputCallbackEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNCryptStreamOutputCallbackEx = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: NCRYPT_PROTECT_STREAM_INFO_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NCRYPT_PROTECT_STREAM_INFO_EX = extern struct {
    pfnStreamOutput: PFNCryptStreamOutputCallbackEx,
    pvCallbackCtxt: ?*opaque{},
};
// --------------------------------------------------------
// Type: TOKENBINDING_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TOKENBINDING_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: TOKENBINDING_EXTENSION_FORMAT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TOKENBINDING_EXTENSION_FORMAT = *opaque{
};
// --------------------------------------------------------
// Type: TOKENBINDING_KEY_PARAMETERS_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TOKENBINDING_KEY_PARAMETERS_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: TOKENBINDING_IDENTIFIER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKENBINDING_IDENTIFIER = extern struct {
    keyType: u8,
};
// --------------------------------------------------------
// Type: TOKENBINDING_RESULT_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKENBINDING_RESULT_DATA = extern struct {
    bindingType: TOKENBINDING_TYPE,
    identifierSize: u32,
    identifierData: ?*TOKENBINDING_IDENTIFIER,
    extensionFormat: TOKENBINDING_EXTENSION_FORMAT,
    extensionSize: u32,
    extensionData: ?*opaque{},
};
// --------------------------------------------------------
// Type: TOKENBINDING_RESULT_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKENBINDING_RESULT_LIST = extern struct {
    resultCount: u32,
    resultData: ?*TOKENBINDING_RESULT_DATA,
};
// --------------------------------------------------------
// Type: TOKENBINDING_KEY_TYPES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOKENBINDING_KEY_TYPES = extern struct {
    keyCount: u32,
    keyType: ?*TOKENBINDING_KEY_PARAMETERS_TYPE,
};
// --------------------------------------------------------
// Type: CRYPT_XML_CHARSET
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CRYPT_XML_CHARSET = *opaque{
};
// --------------------------------------------------------
// Type: CRYPT_XML_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_BLOB = extern struct {
    dwCharset: CRYPT_XML_CHARSET,
    cbData: u32,
    pbData: ?*u8,
};
// --------------------------------------------------------
// Type: CRYPT_XML_DATA_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_DATA_BLOB = extern struct {
    cbData: u32,
    pbData: ?*u8,
};
// --------------------------------------------------------
// Type: CRYPT_XML_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CRYPT_XML_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: CRYPT_XML_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_PROPERTY = extern struct {
    dwPropId: CRYPT_XML_PROPERTY_ID,
    pvValue: ?*opaque{},
    cbValue: u32,
};
// --------------------------------------------------------
// Type: PFN_CRYPT_XML_WRITE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_XML_WRITE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CRYPT_XML_DATA_PROVIDER_READ
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_XML_DATA_PROVIDER_READ = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CRYPT_XML_DATA_PROVIDER_CLOSE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_XML_DATA_PROVIDER_CLOSE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_XML_DATA_PROVIDER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_DATA_PROVIDER = extern struct {
    pvCallbackState: ?*opaque{},
    cbBufferSize: u32,
    pfnRead: PFN_CRYPT_XML_DATA_PROVIDER_READ,
    pfnClose: PFN_CRYPT_XML_DATA_PROVIDER_CLOSE,
};
// --------------------------------------------------------
// Type: PFN_CRYPT_XML_CREATE_TRANSFORM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_XML_CREATE_TRANSFORM = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_XML_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_STATUS = extern struct {
    cbSize: u32,
    dwErrorStatus: u32,
    dwInfoStatus: u32,
};
// --------------------------------------------------------
// Type: CRYPT_XML_ALGORITHM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_ALGORITHM = extern struct {
    cbSize: u32,
    wszAlgorithm: ?*u16,
    Encoded: CRYPT_XML_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_XML_TRANSFORM_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_TRANSFORM_INFO = extern struct {
    cbSize: u32,
    wszAlgorithm: ?*u16,
    cbBufferSize: u32,
    dwFlags: u32,
    pfnCreateTransform: PFN_CRYPT_XML_CREATE_TRANSFORM,
};
// --------------------------------------------------------
// Type: CRYPT_XML_TRANSFORM_CHAIN_CONFIG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_TRANSFORM_CHAIN_CONFIG = extern struct {
    cbSize: u32,
    cTransformInfo: u32,
    rgpTransformInfo: ?*?*CRYPT_XML_TRANSFORM_INFO,
};
// --------------------------------------------------------
// Type: CRYPT_XML_KEY_DSA_KEY_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_KEY_DSA_KEY_VALUE = extern struct {
    P: CRYPT_XML_DATA_BLOB,
    Q: CRYPT_XML_DATA_BLOB,
    G: CRYPT_XML_DATA_BLOB,
    Y: CRYPT_XML_DATA_BLOB,
    J: CRYPT_XML_DATA_BLOB,
    Seed: CRYPT_XML_DATA_BLOB,
    Counter: CRYPT_XML_DATA_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_XML_KEY_ECDSA_KEY_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_KEY_ECDSA_KEY_VALUE = extern struct {
    wszNamedCurve: ?*u16,
    X: CRYPT_XML_DATA_BLOB,
    Y: CRYPT_XML_DATA_BLOB,
    ExplicitPara: CRYPT_XML_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_XML_KEY_RSA_KEY_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_KEY_RSA_KEY_VALUE = extern struct {
    Modulus: CRYPT_XML_DATA_BLOB,
    Exponent: CRYPT_XML_DATA_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_XML_KEY_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_KEY_VALUE = extern struct {
    dwType: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CRYPT_XML_ISSUER_SERIAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_ISSUER_SERIAL = extern struct {
    wszIssuer: ?*u16,
    wszSerial: ?*u16,
};
// --------------------------------------------------------
// Type: CRYPT_XML_X509DATA_ITEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_X509DATA_ITEM = extern struct {
    dwType: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CRYPT_XML_X509DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_X509DATA = extern struct {
    cX509Data: u32,
    rgX509Data: ?*CRYPT_XML_X509DATA_ITEM,
};
// --------------------------------------------------------
// Type: CRYPT_XML_KEY_INFO_ITEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_KEY_INFO_ITEM = extern struct {
    dwType: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CRYPT_XML_KEY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_KEY_INFO = extern struct {
    cbSize: u32,
    wszId: ?*u16,
    cKeyInfo: u32,
    rgKeyInfo: ?*CRYPT_XML_KEY_INFO_ITEM,
    hVerifyKey: ?*opaque{},
};
// --------------------------------------------------------
// Type: CRYPT_XML_REFERENCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_REFERENCE = extern struct {
    cbSize: u32,
    hReference: ?*opaque{},
    wszId: ?*u16,
    wszUri: ?*u16,
    wszType: ?*u16,
    DigestMethod: CRYPT_XML_ALGORITHM,
    DigestValue: CRYPTOAPI_BLOB,
    cTransform: u32,
    rgTransform: ?*CRYPT_XML_ALGORITHM,
};
// --------------------------------------------------------
// Type: CRYPT_XML_REFERENCES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_REFERENCES = extern struct {
    cReference: u32,
    rgpReference: ?*?*CRYPT_XML_REFERENCE,
};
// --------------------------------------------------------
// Type: CRYPT_XML_SIGNED_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_SIGNED_INFO = extern struct {
    cbSize: u32,
    wszId: ?*u16,
    Canonicalization: CRYPT_XML_ALGORITHM,
    SignatureMethod: CRYPT_XML_ALGORITHM,
    cReference: u32,
    rgpReference: ?*?*CRYPT_XML_REFERENCE,
    Encoded: CRYPT_XML_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_XML_OBJECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_OBJECT = extern struct {
    cbSize: u32,
    hObject: ?*opaque{},
    wszId: ?*u16,
    wszMimeType: ?*u16,
    wszEncoding: ?*u16,
    Manifest: CRYPT_XML_REFERENCES,
    Encoded: CRYPT_XML_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_XML_SIGNATURE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_SIGNATURE = extern struct {
    cbSize: u32,
    hSignature: ?*opaque{},
    wszId: ?*u16,
    SignedInfo: CRYPT_XML_SIGNED_INFO,
    SignatureValue: CRYPTOAPI_BLOB,
    pKeyInfo: ?*CRYPT_XML_KEY_INFO,
    cObject: u32,
    rgpObject: ?*?*CRYPT_XML_OBJECT,
};
// --------------------------------------------------------
// Type: CRYPT_XML_DOC_CTXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_DOC_CTXT = extern struct {
    cbSize: u32,
    hDocCtxt: ?*opaque{},
    pTransformsConfig: ?*CRYPT_XML_TRANSFORM_CHAIN_CONFIG,
    cSignature: u32,
    rgpSignature: ?*?*CRYPT_XML_SIGNATURE,
};
// --------------------------------------------------------
// Type: CRYPT_XML_KEYINFO_PARAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_KEYINFO_PARAM = extern struct {
    wszId: ?*u16,
    wszKeyName: ?*u16,
    SKI: CRYPTOAPI_BLOB,
    wszSubjectName: ?*u16,
    cCertificate: u32,
    rgCertificate: ?*CRYPTOAPI_BLOB,
    cCRL: u32,
    rgCRL: ?*CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CRYPT_XML_KEYINFO_SPEC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CRYPT_XML_KEYINFO_SPEC = *opaque{
};
// --------------------------------------------------------
// Type: CRYPT_XML_ALGORITHM_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_ALGORITHM_INFO = extern struct {
    cbSize: u32,
    wszAlgorithmURI: ?*u16,
    wszName: ?*u16,
    dwGroupId: u32,
    wszCNGAlgid: ?*u16,
    wszCNGExtraAlgid: ?*u16,
    dwSignFlags: u32,
    dwVerifyFlags: u32,
    pvPaddingInfo: ?*opaque{},
    pvExtraInfo: ?*opaque{},
};
// --------------------------------------------------------
// Type: PFN_CRYPT_XML_ENUM_ALG_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CRYPT_XML_ENUM_ALG_INFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CryptXmlDllGetInterface
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CryptXmlDllGetInterface = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CryptXmlDllEncodeAlgorithm
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CryptXmlDllEncodeAlgorithm = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CryptXmlDllCreateDigest
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CryptXmlDllCreateDigest = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CryptXmlDllDigestData
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CryptXmlDllDigestData = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CryptXmlDllFinalizeDigest
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CryptXmlDllFinalizeDigest = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CryptXmlDllCloseDigest
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CryptXmlDllCloseDigest = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CryptXmlDllSignData
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CryptXmlDllSignData = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CryptXmlDllVerifySignature
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CryptXmlDllVerifySignature = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CryptXmlDllGetAlgorithmInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CryptXmlDllGetAlgorithmInfo = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_XML_CRYPTOGRAPHIC_INTERFACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_XML_CRYPTOGRAPHIC_INTERFACE = extern struct {
    cbSize: u32,
    fpCryptXmlEncodeAlgorithm: CryptXmlDllEncodeAlgorithm,
    fpCryptXmlCreateDigest: CryptXmlDllCreateDigest,
    fpCryptXmlDigestData: CryptXmlDllDigestData,
    fpCryptXmlFinalizeDigest: CryptXmlDllFinalizeDigest,
    fpCryptXmlCloseDigest: CryptXmlDllCloseDigest,
    fpCryptXmlSignData: CryptXmlDllSignData,
    fpCryptXmlVerifySignature: CryptXmlDllVerifySignature,
    fpCryptXmlGetAlgorithmInfo: CryptXmlDllGetAlgorithmInfo,
};
// --------------------------------------------------------
// Type: CryptXmlDllEncodeKeyValue
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CryptXmlDllEncodeKeyValue = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CryptXmlDllCreateKey
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CryptXmlDllCreateKey = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CCertSrvSetupKeyInformation
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertSrvSetupKeyInformation = opaque {
};
// --------------------------------------------------------
// Type: CCertSrvSetup
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertSrvSetup = opaque {
};
// --------------------------------------------------------
// Type: CMSCEPSetup
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CMSCEPSetup = opaque {
};
// --------------------------------------------------------
// Type: CCertificateEnrollmentServerSetup
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertificateEnrollmentServerSetup = opaque {
};
// --------------------------------------------------------
// Type: CCertificateEnrollmentPolicyServerSetup
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertificateEnrollmentPolicyServerSetup = opaque {
};
// --------------------------------------------------------
// Type: ICertSrvSetupKeyInformation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertSrvSetupKeyInformation = *opaque{
    // TODO: Method 'get_ProviderName'
    // TODO: Method 'put_ProviderName'
    // TODO: Method 'get_Length'
    // TODO: Method 'put_Length'
    // TODO: Method 'get_Existing'
    // TODO: Method 'put_Existing'
    // TODO: Method 'get_ContainerName'
    // TODO: Method 'put_ContainerName'
    // TODO: Method 'get_HashAlgorithm'
    // TODO: Method 'put_HashAlgorithm'
    // TODO: Method 'get_ExistingCACertificate'
    // TODO: Method 'put_ExistingCACertificate'
};
// --------------------------------------------------------
// Type: ICertSrvSetupKeyInformationCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertSrvSetupKeyInformationCollection = *opaque{
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'get_Item'
    // TODO: Method 'get_Count'
    // TODO: Method 'Add'
};
// --------------------------------------------------------
// Type: CASetupProperty
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CASetupProperty = *opaque{
};
// --------------------------------------------------------
// Type: ICertSrvSetup
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertSrvSetup = *opaque{
    // TODO: Method 'get_CAErrorId'
    // TODO: Method 'get_CAErrorString'
    // TODO: Method 'InitializeDefaults'
    // TODO: Method 'GetCASetupProperty'
    // TODO: Method 'SetCASetupProperty'
    // TODO: Method 'IsPropertyEditable'
    // TODO: Method 'GetSupportedCATypes'
    // TODO: Method 'GetProviderNameList'
    // TODO: Method 'GetKeyLengthList'
    // TODO: Method 'GetHashAlgorithmList'
    // TODO: Method 'GetPrivateKeyContainerList'
    // TODO: Method 'GetExistingCACertificates'
    // TODO: Method 'CAImportPFX'
    // TODO: Method 'SetCADistinguishedName'
    // TODO: Method 'SetDatabaseInformation'
    // TODO: Method 'SetParentCAInformation'
    // TODO: Method 'SetWebCAInformation'
    // TODO: Method 'Install'
    // TODO: Method 'PreUnInstall'
    // TODO: Method 'PostUnInstall'
};
// --------------------------------------------------------
// Type: MSCEPSetupProperty
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSCEPSetupProperty = *opaque{
};
// --------------------------------------------------------
// Type: IMSCEPSetup
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMSCEPSetup = *opaque{
    // TODO: Method 'get_MSCEPErrorId'
    // TODO: Method 'get_MSCEPErrorString'
    // TODO: Method 'InitializeDefaults'
    // TODO: Method 'GetMSCEPSetupProperty'
    // TODO: Method 'SetMSCEPSetupProperty'
    // TODO: Method 'SetAccountInformation'
    // TODO: Method 'IsMSCEPStoreEmpty'
    // TODO: Method 'GetProviderNameList'
    // TODO: Method 'GetKeyLengthList'
    // TODO: Method 'Install'
    // TODO: Method 'PreUnInstall'
    // TODO: Method 'PostUnInstall'
};
// --------------------------------------------------------
// Type: CESSetupProperty
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CESSetupProperty = *opaque{
};
// --------------------------------------------------------
// Type: ICertificateEnrollmentServerSetup
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertificateEnrollmentServerSetup = *opaque{
    // TODO: Method 'get_ErrorString'
    // TODO: Method 'InitializeInstallDefaults'
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'SetApplicationPoolCredentials'
    // TODO: Method 'Install'
    // TODO: Method 'UnInstall'
};
// --------------------------------------------------------
// Type: CEPSetupProperty
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CEPSetupProperty = *opaque{
};
// --------------------------------------------------------
// Type: ICertificateEnrollmentPolicyServerSetup
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertificateEnrollmentPolicyServerSetup = *opaque{
    // TODO: Method 'get_ErrorString'
    // TODO: Method 'InitializeInstallDefaults'
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'Install'
    // TODO: Method 'UnInstall'
};
// --------------------------------------------------------
// Type: CCertAdmin
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertAdmin = opaque {
};
// --------------------------------------------------------
// Type: CCertView
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertView = opaque {
};
// --------------------------------------------------------
// Type: OCSPPropertyCollection
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const OCSPPropertyCollection = opaque {
};
// --------------------------------------------------------
// Type: OCSPAdmin
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const OCSPAdmin = opaque {
};
// --------------------------------------------------------
// Type: IEnumCERTVIEWCOLUMN
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumCERTVIEWCOLUMN = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'GetName'
    // TODO: Method 'GetDisplayName'
    // TODO: Method 'GetType'
    // TODO: Method 'IsIndexed'
    // TODO: Method 'GetMaxLength'
    // TODO: Method 'GetValue'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IEnumCERTVIEWATTRIBUTE
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumCERTVIEWATTRIBUTE = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'GetName'
    // TODO: Method 'GetValue'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IEnumCERTVIEWEXTENSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumCERTVIEWEXTENSION = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'GetName'
    // TODO: Method 'GetFlags'
    // TODO: Method 'GetValue'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IEnumCERTVIEWROW
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumCERTVIEWROW = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'EnumCertViewColumn'
    // TODO: Method 'EnumCertViewAttribute'
    // TODO: Method 'EnumCertViewExtension'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
    // TODO: Method 'GetMaxIndex'
};
// --------------------------------------------------------
// Type: ICertView
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertView = *opaque{
    // TODO: Method 'OpenConnection'
    // TODO: Method 'EnumCertViewColumn'
    // TODO: Method 'GetColumnCount'
    // TODO: Method 'GetColumnIndex'
    // TODO: Method 'SetResultColumnCount'
    // TODO: Method 'SetResultColumn'
    // TODO: Method 'SetRestriction'
    // TODO: Method 'OpenView'
};
// --------------------------------------------------------
// Type: ICertView2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertView2 = *opaque{
    // TODO: Method 'SetTable'
};
// --------------------------------------------------------
// Type: ICertAdmin
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertAdmin = *opaque{
    // TODO: Method 'IsValidCertificate'
    // TODO: Method 'GetRevocationReason'
    // TODO: Method 'RevokeCertificate'
    // TODO: Method 'SetRequestAttributes'
    // TODO: Method 'SetCertificateExtension'
    // TODO: Method 'DenyRequest'
    // TODO: Method 'ResubmitRequest'
    // TODO: Method 'PublishCRL'
    // TODO: Method 'GetCRL'
    // TODO: Method 'ImportCertificate'
};
// --------------------------------------------------------
// Type: ICertAdmin2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertAdmin2 = *opaque{
    // TODO: Method 'PublishCRLs'
    // TODO: Method 'GetCAProperty'
    // TODO: Method 'SetCAProperty'
    // TODO: Method 'GetCAPropertyFlags'
    // TODO: Method 'GetCAPropertyDisplayName'
    // TODO: Method 'GetArchivedKey'
    // TODO: Method 'GetConfigEntry'
    // TODO: Method 'SetConfigEntry'
    // TODO: Method 'ImportKey'
    // TODO: Method 'GetMyRoles'
    // TODO: Method 'DeleteRow'
};
// --------------------------------------------------------
// Type: IOCSPProperty
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOCSPProperty = *opaque{
    // TODO: Method 'get_Name'
    // TODO: Method 'get_Value'
    // TODO: Method 'put_Value'
    // TODO: Method 'get_Modified'
};
// --------------------------------------------------------
// Type: IOCSPPropertyCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOCSPPropertyCollection = *opaque{
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'get_Item'
    // TODO: Method 'get_Count'
    // TODO: Method 'get_ItemByName'
    // TODO: Method 'CreateProperty'
    // TODO: Method 'DeleteProperty'
    // TODO: Method 'InitializeFromProperties'
    // TODO: Method 'GetAllProperties'
};
// --------------------------------------------------------
// Type: IOCSPCAConfiguration
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOCSPCAConfiguration = *opaque{
    // TODO: Method 'get_Identifier'
    // TODO: Method 'get_CACertificate'
    // TODO: Method 'get_HashAlgorithm'
    // TODO: Method 'put_HashAlgorithm'
    // TODO: Method 'get_SigningFlags'
    // TODO: Method 'put_SigningFlags'
    // TODO: Method 'get_SigningCertificate'
    // TODO: Method 'put_SigningCertificate'
    // TODO: Method 'get_ReminderDuration'
    // TODO: Method 'put_ReminderDuration'
    // TODO: Method 'get_ErrorCode'
    // TODO: Method 'get_CSPName'
    // TODO: Method 'get_KeySpec'
    // TODO: Method 'get_ProviderCLSID'
    // TODO: Method 'put_ProviderCLSID'
    // TODO: Method 'get_ProviderProperties'
    // TODO: Method 'put_ProviderProperties'
    // TODO: Method 'get_Modified'
    // TODO: Method 'get_LocalRevocationInformation'
    // TODO: Method 'put_LocalRevocationInformation'
    // TODO: Method 'get_SigningCertificateTemplate'
    // TODO: Method 'put_SigningCertificateTemplate'
    // TODO: Method 'get_CAConfig'
    // TODO: Method 'put_CAConfig'
};
// --------------------------------------------------------
// Type: IOCSPCAConfigurationCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOCSPCAConfigurationCollection = *opaque{
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'get_Item'
    // TODO: Method 'get_Count'
    // TODO: Method 'get_ItemByName'
    // TODO: Method 'CreateCAConfiguration'
    // TODO: Method 'DeleteCAConfiguration'
};
// --------------------------------------------------------
// Type: IOCSPAdmin
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IOCSPAdmin = *opaque{
    // TODO: Method 'get_OCSPServiceProperties'
    // TODO: Method 'get_OCSPCAConfigurationCollection'
    // TODO: Method 'GetConfiguration'
    // TODO: Method 'SetConfiguration'
    // TODO: Method 'GetMyRoles'
    // TODO: Method 'Ping'
    // TODO: Method 'SetSecurity'
    // TODO: Method 'GetSecurity'
    // TODO: Method 'GetSigningCertificates'
    // TODO: Method 'GetHashAlgorithms'
};
// --------------------------------------------------------
// Type: OCSPSigningFlag
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OCSPSigningFlag = *opaque{
};
// --------------------------------------------------------
// Type: OCSPRequestFlag
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OCSPRequestFlag = *opaque{
};
// --------------------------------------------------------
// Type: CCertEncodeStringArray
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertEncodeStringArray = opaque {
};
// --------------------------------------------------------
// Type: CCertEncodeLongArray
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertEncodeLongArray = opaque {
};
// --------------------------------------------------------
// Type: CCertEncodeDateArray
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertEncodeDateArray = opaque {
};
// --------------------------------------------------------
// Type: CCertEncodeCRLDistInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertEncodeCRLDistInfo = opaque {
};
// --------------------------------------------------------
// Type: CCertEncodeAltName
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertEncodeAltName = opaque {
};
// --------------------------------------------------------
// Type: CCertEncodeBitString
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CCertEncodeBitString = opaque {
};
// --------------------------------------------------------
// Type: ICertEncodeStringArray
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertEncodeStringArray = *opaque{
    // TODO: Method 'Decode'
    // TODO: Method 'GetStringType'
    // TODO: Method 'GetCount'
    // TODO: Method 'GetValue'
    // TODO: Method 'Reset'
    // TODO: Method 'SetValue'
    // TODO: Method 'Encode'
};
// --------------------------------------------------------
// Type: ICertEncodeStringArray2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertEncodeStringArray2 = *opaque{
    // TODO: Method 'DecodeBlob'
    // TODO: Method 'EncodeBlob'
};
// --------------------------------------------------------
// Type: ICertEncodeLongArray
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertEncodeLongArray = *opaque{
    // TODO: Method 'Decode'
    // TODO: Method 'GetCount'
    // TODO: Method 'GetValue'
    // TODO: Method 'Reset'
    // TODO: Method 'SetValue'
    // TODO: Method 'Encode'
};
// --------------------------------------------------------
// Type: ICertEncodeLongArray2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertEncodeLongArray2 = *opaque{
    // TODO: Method 'DecodeBlob'
    // TODO: Method 'EncodeBlob'
};
// --------------------------------------------------------
// Type: ICertEncodeDateArray
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertEncodeDateArray = *opaque{
    // TODO: Method 'Decode'
    // TODO: Method 'GetCount'
    // TODO: Method 'GetValue'
    // TODO: Method 'Reset'
    // TODO: Method 'SetValue'
    // TODO: Method 'Encode'
};
// --------------------------------------------------------
// Type: ICertEncodeDateArray2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertEncodeDateArray2 = *opaque{
    // TODO: Method 'DecodeBlob'
    // TODO: Method 'EncodeBlob'
};
// --------------------------------------------------------
// Type: ICertEncodeCRLDistInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertEncodeCRLDistInfo = *opaque{
    // TODO: Method 'Decode'
    // TODO: Method 'GetDistPointCount'
    // TODO: Method 'GetNameCount'
    // TODO: Method 'GetNameChoice'
    // TODO: Method 'GetName'
    // TODO: Method 'Reset'
    // TODO: Method 'SetNameCount'
    // TODO: Method 'SetNameEntry'
    // TODO: Method 'Encode'
};
// --------------------------------------------------------
// Type: ICertEncodeCRLDistInfo2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertEncodeCRLDistInfo2 = *opaque{
    // TODO: Method 'DecodeBlob'
    // TODO: Method 'EncodeBlob'
};
// --------------------------------------------------------
// Type: ICertEncodeAltName
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertEncodeAltName = *opaque{
    // TODO: Method 'Decode'
    // TODO: Method 'GetNameCount'
    // TODO: Method 'GetNameChoice'
    // TODO: Method 'GetName'
    // TODO: Method 'Reset'
    // TODO: Method 'SetNameEntry'
    // TODO: Method 'Encode'
};
// --------------------------------------------------------
// Type: ICertEncodeAltName2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertEncodeAltName2 = *opaque{
    // TODO: Method 'DecodeBlob'
    // TODO: Method 'EncodeBlob'
    // TODO: Method 'GetNameBlob'
    // TODO: Method 'SetNameEntryBlob'
};
// --------------------------------------------------------
// Type: ICertEncodeBitString
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertEncodeBitString = *opaque{
    // TODO: Method 'Decode'
    // TODO: Method 'GetBitCount'
    // TODO: Method 'GetBitString'
    // TODO: Method 'Encode'
};
// --------------------------------------------------------
// Type: ICertEncodeBitString2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertEncodeBitString2 = *opaque{
    // TODO: Method 'DecodeBlob'
    // TODO: Method 'EncodeBlob'
    // TODO: Method 'GetBitStringBlob'
};
// --------------------------------------------------------
// Type: ICertExit
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertExit = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'Notify'
    // TODO: Method 'GetDescription'
};
// --------------------------------------------------------
// Type: ICertExit2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICertExit2 = *opaque{
    // TODO: Method 'GetManageModule'
};
// --------------------------------------------------------
// Type: ENUM_CATYPES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ENUM_CATYPES = *opaque{
};
// --------------------------------------------------------
// Type: CAINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CAINFO = extern struct {
    cbSize: u32,
    CAType: ENUM_CATYPES,
    cCASignatureCerts: u32,
    cCAExchangeCerts: u32,
    cExitModules: u32,
    lPropIdMax: i32,
    lRoleSeparationEnabled: i32,
    cKRACertUsedCount: u32,
    cKRACertCount: u32,
    fAdvancedServer: u32,
};
// --------------------------------------------------------
// Type: ENUM_PERIOD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ENUM_PERIOD = *opaque{
};
// --------------------------------------------------------
// Type: LLFILETIME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LLFILETIME = extern struct {
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PFNCMFILTERPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNCMFILTERPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNCMHOOKPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNCMHOOKPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CERT_SELECT_STRUCT_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_SELECT_STRUCT_A = extern struct {
    dwSize: u32,
    hwndParent: HWND,
    hInstance: HINSTANCE,
    pTemplateName: ?*i8,
    dwFlags: u32,
    szTitle: ?*i8,
    cCertStore: u32,
    arrayCertStore: ?*?*opaque{},
    szPurposeOid: ?*i8,
    cCertContext: u32,
    arrayCertContext: ?*?*CERT_CONTEXT,
    lCustData: LPARAM,
    pfnHook: PFNCMHOOKPROC,
    pfnFilter: PFNCMFILTERPROC,
    szHelpFileName: ?*i8,
    dwHelpId: u32,
    hprov: ?*opaque{},
};
// --------------------------------------------------------
// Type: CERT_SELECT_STRUCT_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_SELECT_STRUCT_W = extern struct {
    dwSize: u32,
    hwndParent: HWND,
    hInstance: HINSTANCE,
    pTemplateName: ?*u16,
    dwFlags: u32,
    szTitle: ?*u16,
    cCertStore: u32,
    arrayCertStore: ?*?*opaque{},
    szPurposeOid: ?*i8,
    cCertContext: u32,
    arrayCertContext: ?*?*CERT_CONTEXT,
    lCustData: LPARAM,
    pfnHook: PFNCMHOOKPROC,
    pfnFilter: PFNCMFILTERPROC,
    szHelpFileName: ?*u16,
    dwHelpId: u32,
    hprov: ?*opaque{},
};
// --------------------------------------------------------
// Type: CERT_VIEWPROPERTIES_STRUCT_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_VIEWPROPERTIES_STRUCT_A = extern struct {
    dwSize: u32,
    hwndParent: HWND,
    hInstance: HINSTANCE,
    dwFlags: u32,
    szTitle: ?*i8,
    pCertContext: ?*CERT_CONTEXT,
    arrayPurposes: ?*?*i8,
    cArrayPurposes: u32,
    cRootStores: u32,
    rghstoreRoots: ?*?*opaque{},
    cStores: u32,
    rghstoreCAs: ?*?*opaque{},
    cTrustStores: u32,
    rghstoreTrust: ?*?*opaque{},
    hprov: ?*opaque{},
    lCustData: LPARAM,
    dwPad: u32,
    szHelpFileName: ?*i8,
    dwHelpId: u32,
    nStartPage: u32,
    cArrayPropSheetPages: u32,
    arrayPropSheetPages: ?*PROPSHEETPAGEA,
};
// --------------------------------------------------------
// Type: CERT_VIEWPROPERTIES_STRUCT_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_VIEWPROPERTIES_STRUCT_W = extern struct {
    dwSize: u32,
    hwndParent: HWND,
    hInstance: HINSTANCE,
    dwFlags: u32,
    szTitle: ?*u16,
    pCertContext: ?*CERT_CONTEXT,
    arrayPurposes: ?*?*i8,
    cArrayPurposes: u32,
    cRootStores: u32,
    rghstoreRoots: ?*?*opaque{},
    cStores: u32,
    rghstoreCAs: ?*?*opaque{},
    cTrustStores: u32,
    rghstoreTrust: ?*?*opaque{},
    hprov: ?*opaque{},
    lCustData: LPARAM,
    dwPad: u32,
    szHelpFileName: ?*u16,
    dwHelpId: u32,
    nStartPage: u32,
    cArrayPropSheetPages: u32,
    arrayPropSheetPages: ?*PROPSHEETPAGEA,
};
// --------------------------------------------------------
// Type: tagCMOID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagCMOID = extern struct {
    szExtensionOID: ?*i8,
    dwTestOperation: u32,
    pbTestData: ?*u8,
    cbTestData: u32,
};
// --------------------------------------------------------
// Type: tagCMFLTR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagCMFLTR = extern struct {
    dwSize: u32,
    cExtensionChecks: u32,
    arrayExtensionChecks: ?*tagCMOID,
    dwCheckingFlags: u32,
};
// --------------------------------------------------------
// Type: PFNTRUSTHELPER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNTRUSTHELPER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CERT_VERIFY_CERTIFICATE_TRUST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_VERIFY_CERTIFICATE_TRUST = extern struct {
    cbSize: u32,
    pccert: ?*CERT_CONTEXT,
    dwFlags: u32,
    dwIgnoreErr: u32,
    pdwErrors: ?*u32,
    pszUsageOid: ?*i8,
    hprov: ?*opaque{},
    cRootStores: u32,
    rghstoreRoots: ?*?*opaque{},
    cStores: u32,
    rghstoreCAs: ?*?*opaque{},
    cTrustStores: u32,
    rghstoreTrust: ?*?*opaque{},
    lCustData: LPARAM,
    pfnTrustHelper: PFNTRUSTHELPER,
    pcChain: ?*u32,
    prgChain: ?*?*?*CERT_CONTEXT,
    prgdwErrors: ?*?*u32,
    prgpbTrustInfo: ?*?*CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CTL_MODIFY_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CTL_MODIFY_REQUEST = extern struct {
    pccert: ?*CERT_CONTEXT,
    dwOperation: u32,
    dwError: u32,
};
// --------------------------------------------------------
// Type: WINTRUST_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WINTRUST_DATA = extern struct {
    cbStruct: u32,
    pPolicyCallbackData: ?*opaque{},
    pSIPClientData: ?*opaque{},
    dwUIChoice: u32,
    fdwRevocationChecks: u32,
    dwUnionChoice: u32,
    Anonymous: _Anonymous_e__Union,
    dwStateAction: u32,
    hWVTStateData: HANDLE,
    pwszURLReference: ?*u16,
    dwProvFlags: u32,
    dwUIContext: u32,
    pSignatureSettings: ?*WINTRUST_SIGNATURE_SETTINGS,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: WINTRUST_SIGNATURE_SETTINGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WINTRUST_SIGNATURE_SETTINGS = extern struct {
    cbStruct: u32,
    dwIndex: u32,
    dwFlags: u32,
    cSecondarySigs: u32,
    dwVerifiedSigIndex: u32,
    pCryptoPolicy: ?*CERT_STRONG_SIGN_PARA,
};
// --------------------------------------------------------
// Type: WINTRUST_FILE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WINTRUST_FILE_INFO = extern struct {
    cbStruct: u32,
    pcwszFilePath: ?*u16,
    hFile: HANDLE,
    pgKnownSubject: ?*Guid,
};
// --------------------------------------------------------
// Type: WINTRUST_CATALOG_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WINTRUST_CATALOG_INFO = extern struct {
    cbStruct: u32,
    dwCatalogVersion: u32,
    pcwszCatalogFilePath: ?*u16,
    pcwszMemberTag: ?*u16,
    pcwszMemberFilePath: ?*u16,
    hMemberFile: HANDLE,
    pbCalculatedFileHash: ?*u8,
    cbCalculatedFileHash: u32,
    pcCatalogContext: ?*CTL_CONTEXT,
    hCatAdmin: ?*opaque{},
};
// --------------------------------------------------------
// Type: WINTRUST_BLOB_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WINTRUST_BLOB_INFO = extern struct {
    cbStruct: u32,
    gSubject: Guid,
    pcwszDisplayName: ?*u16,
    cbMemObject: u32,
    pbMemObject: ?*u8,
    cbMemSignedMsg: u32,
    pbMemSignedMsg: ?*u8,
};
// --------------------------------------------------------
// Type: WINTRUST_SGNR_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WINTRUST_SGNR_INFO = extern struct {
    cbStruct: u32,
    pcwszDisplayName: ?*u16,
    psSignerInfo: ?*CMSG_SIGNER_INFO,
    chStores: u32,
    pahStores: ?*?*opaque{},
};
// --------------------------------------------------------
// Type: WINTRUST_CERT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WINTRUST_CERT_INFO = extern struct {
    cbStruct: u32,
    pcwszDisplayName: ?*u16,
    psCertContext: ?*CERT_CONTEXT,
    chStores: u32,
    pahStores: ?*?*opaque{},
    dwFlags: u32,
    psftVerifyAsOf: ?*FILETIME,
};
// --------------------------------------------------------
// Type: PFN_CPD_MEM_ALLOC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CPD_MEM_ALLOC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CPD_MEM_FREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CPD_MEM_FREE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CPD_ADD_STORE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CPD_ADD_STORE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CPD_ADD_SGNR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CPD_ADD_SGNR = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CPD_ADD_CERT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CPD_ADD_CERT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_CPD_ADD_PRIVDATA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CPD_ADD_PRIVDATA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_PROVIDER_INIT_CALL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_PROVIDER_INIT_CALL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_PROVIDER_OBJTRUST_CALL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_PROVIDER_OBJTRUST_CALL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_PROVIDER_SIGTRUST_CALL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_PROVIDER_SIGTRUST_CALL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_PROVIDER_CERTTRUST_CALL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_PROVIDER_CERTTRUST_CALL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_PROVIDER_FINALPOLICY_CALL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_PROVIDER_FINALPOLICY_CALL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_PROVIDER_TESTFINALPOLICY_CALL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_PROVIDER_TESTFINALPOLICY_CALL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_PROVIDER_CLEANUP_CALL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_PROVIDER_CLEANUP_CALL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_PROVIDER_CERTCHKPOLICY_CALL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_PROVIDER_CERTCHKPOLICY_CALL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_PROVIDER_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROVIDER_DATA = extern struct {
    cbStruct: u32,
    pWintrustData: ?*WINTRUST_DATA,
    fOpenedFile: BOOL,
    hWndParent: HWND,
    pgActionID: ?*Guid,
    hProv: ?*opaque{},
    dwError: u32,
    dwRegSecuritySettings: u32,
    dwRegPolicySettings: u32,
    psPfns: ?*CRYPT_PROVIDER_FUNCTIONS,
    cdwTrustStepErrors: u32,
    padwTrustStepErrors: ?*u32,
    chStores: u32,
    pahStores: ?*?*opaque{},
    dwEncoding: u32,
    hMsg: ?*opaque{},
    csSigners: u32,
    pasSigners: ?*CRYPT_PROVIDER_SGNR,
    csProvPrivData: u32,
    pasProvPrivData: ?*CRYPT_PROVIDER_PRIVDATA,
    dwSubjectChoice: u32,
    Anonymous: _Anonymous_e__Union,
    pszUsageOID: ?*i8,
    fRecallWithState: BOOL,
    sftSystemTime: FILETIME,
    pszCTLSignerUsageOID: ?*i8,
    dwProvFlags: u32,
    dwFinalError: u32,
    pRequestUsage: ?*CERT_USAGE_MATCH,
    dwTrustPubSettings: u32,
    dwUIStateFlags: u32,
    pSigState: ?*CRYPT_PROVIDER_SIGSTATE,
    pSigSettings: ?*WINTRUST_SIGNATURE_SETTINGS,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CRYPT_PROVIDER_SIGSTATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROVIDER_SIGSTATE = extern struct {
    cbStruct: u32,
    rhSecondarySigs: ?*?*opaque{},
    hPrimarySig: ?*opaque{},
    fFirstAttemptMade: BOOL,
    fNoMoreSigs: BOOL,
    cSecondarySigs: u32,
    dwCurrentIndex: u32,
    fSupportMultiSig: BOOL,
    dwCryptoPolicySupport: u32,
    iAttemptCount: u32,
    fCheckedSealing: BOOL,
    pSealingSignature: ?*SEALING_SIGNATURE_ATTRIBUTE,
};
// --------------------------------------------------------
// Type: CRYPT_PROVIDER_FUNCTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROVIDER_FUNCTIONS = extern struct {
    cbStruct: u32,
    pfnAlloc: PFN_CPD_MEM_ALLOC,
    pfnFree: PFN_CPD_MEM_FREE,
    pfnAddStore2Chain: PFN_CPD_ADD_STORE,
    pfnAddSgnr2Chain: PFN_CPD_ADD_SGNR,
    pfnAddCert2Chain: PFN_CPD_ADD_CERT,
    pfnAddPrivData2Chain: PFN_CPD_ADD_PRIVDATA,
    pfnInitialize: PFN_PROVIDER_INIT_CALL,
    pfnObjectTrust: PFN_PROVIDER_OBJTRUST_CALL,
    pfnSignatureTrust: PFN_PROVIDER_SIGTRUST_CALL,
    pfnCertificateTrust: PFN_PROVIDER_CERTTRUST_CALL,
    pfnFinalPolicy: PFN_PROVIDER_FINALPOLICY_CALL,
    pfnCertCheckPolicy: PFN_PROVIDER_CERTCHKPOLICY_CALL,
    pfnTestFinalPolicy: PFN_PROVIDER_TESTFINALPOLICY_CALL,
    psUIpfns: ?*CRYPT_PROVUI_FUNCS,
    pfnCleanupPolicy: PFN_PROVIDER_CLEANUP_CALL,
};
// --------------------------------------------------------
// Type: PFN_PROVUI_CALL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_PROVUI_CALL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_PROVUI_FUNCS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROVUI_FUNCS = extern struct {
    cbStruct: u32,
    psUIData: ?*CRYPT_PROVUI_DATA,
    pfnOnMoreInfoClick: PFN_PROVUI_CALL,
    pfnOnMoreInfoClickDefault: PFN_PROVUI_CALL,
    pfnOnAdvancedClick: PFN_PROVUI_CALL,
    pfnOnAdvancedClickDefault: PFN_PROVUI_CALL,
};
// --------------------------------------------------------
// Type: CRYPT_PROVUI_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROVUI_DATA = extern struct {
    cbStruct: u32,
    dwFinalError: u32,
    pYesButtonText: ?*u16,
    pNoButtonText: ?*u16,
    pMoreInfoButtonText: ?*u16,
    pAdvancedLinkText: ?*u16,
    pCopyActionText: ?*u16,
    pCopyActionTextNoTS: ?*u16,
    pCopyActionTextNotSigned: ?*u16,
};
// --------------------------------------------------------
// Type: CRYPT_PROVIDER_SGNR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROVIDER_SGNR = extern struct {
    cbStruct: u32,
    sftVerifyAsOf: FILETIME,
    csCertChain: u32,
    pasCertChain: ?*CRYPT_PROVIDER_CERT,
    dwSignerType: u32,
    psSigner: ?*CMSG_SIGNER_INFO,
    dwError: u32,
    csCounterSigners: u32,
    pasCounterSigners: ?*CRYPT_PROVIDER_SGNR,
    pChainContext: ?*CERT_CHAIN_CONTEXT,
};
// --------------------------------------------------------
// Type: CRYPT_PROVIDER_CERT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROVIDER_CERT = extern struct {
    cbStruct: u32,
    pCert: ?*CERT_CONTEXT,
    fCommercial: BOOL,
    fTrustedRoot: BOOL,
    fSelfSigned: BOOL,
    fTestCert: BOOL,
    dwRevokedReason: u32,
    dwConfidence: u32,
    dwError: u32,
    pTrustListContext: ?*CTL_CONTEXT,
    fTrustListSignerCert: BOOL,
    pCtlContext: ?*CTL_CONTEXT,
    dwCtlError: u32,
    fIsCyclic: BOOL,
    pChainElement: ?*CERT_CHAIN_ELEMENT,
};
// --------------------------------------------------------
// Type: CRYPT_PROVIDER_PRIVDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROVIDER_PRIVDATA = extern struct {
    cbStruct: u32,
    gProviderID: Guid,
    cbProvData: u32,
    pvProvData: ?*opaque{},
};
// --------------------------------------------------------
// Type: PROVDATA_SIP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROVDATA_SIP = extern struct {
    cbStruct: u32,
    gSubject: Guid,
    pSip: ?*SIP_DISPATCH_INFO,
    pCATSip: ?*SIP_DISPATCH_INFO,
    psSipSubjectInfo: ?*SIP_SUBJECTINFO,
    psSipCATSubjectInfo: ?*SIP_SUBJECTINFO,
    psIndirectData: ?*SIP_INDIRECT_DATA,
};
// --------------------------------------------------------
// Type: CRYPT_TRUST_REG_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_TRUST_REG_ENTRY = extern struct {
    cbStruct: u32,
    pwszDLLName: ?*u16,
    pwszFunctionName: ?*u16,
};
// --------------------------------------------------------
// Type: CRYPT_REGISTER_ACTIONID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_REGISTER_ACTIONID = extern struct {
    cbStruct: u32,
    sInitProvider: CRYPT_TRUST_REG_ENTRY,
    sObjectProvider: CRYPT_TRUST_REG_ENTRY,
    sSignatureProvider: CRYPT_TRUST_REG_ENTRY,
    sCertificateProvider: CRYPT_TRUST_REG_ENTRY,
    sCertificatePolicyProvider: CRYPT_TRUST_REG_ENTRY,
    sFinalPolicyProvider: CRYPT_TRUST_REG_ENTRY,
    sTestPolicyProvider: CRYPT_TRUST_REG_ENTRY,
    sCleanupProvider: CRYPT_TRUST_REG_ENTRY,
};
// --------------------------------------------------------
// Type: PFN_ALLOCANDFILLDEFUSAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_ALLOCANDFILLDEFUSAGE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_FREEDEFUSAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_FREEDEFUSAGE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPT_PROVIDER_REGDEFUSAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROVIDER_REGDEFUSAGE = extern struct {
    cbStruct: u32,
    pgActionID: ?*Guid,
    pwszDllName: ?*u16,
    pwszLoadCallbackDataFunctionName: ?*i8,
    pwszFreeCallbackDataFunctionName: ?*i8,
};
// --------------------------------------------------------
// Type: CRYPT_PROVIDER_DEFUSAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPT_PROVIDER_DEFUSAGE = extern struct {
    cbStruct: u32,
    gActionID: Guid,
    pDefPolicyCallbackData: ?*opaque{},
    pDefSIPClientData: ?*opaque{},
};
// --------------------------------------------------------
// Type: SPC_SERIALIZED_OBJECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SPC_SERIALIZED_OBJECT = extern struct {
    ClassId: ?[*]u8,
    SerializedData: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: SPC_SIGINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SPC_SIGINFO = extern struct {
    dwSipVersion: u32,
    gSIPGuid: Guid,
    dwReserved1: u32,
    dwReserved2: u32,
    dwReserved3: u32,
    dwReserved4: u32,
    dwReserved5: u32,
};
// --------------------------------------------------------
// Type: SPC_LINK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SPC_LINK = extern struct {
    dwLinkChoice: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: SPC_PE_IMAGE_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SPC_PE_IMAGE_DATA = extern struct {
    Flags: CRYPT_BIT_BLOB,
    pFile: ?*SPC_LINK,
};
// --------------------------------------------------------
// Type: SPC_INDIRECT_DATA_CONTENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SPC_INDIRECT_DATA_CONTENT = extern struct {
    Data: CRYPT_ATTRIBUTE_TYPE_VALUE,
    DigestAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    Digest: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: SPC_FINANCIAL_CRITERIA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SPC_FINANCIAL_CRITERIA = extern struct {
    fFinancialInfoAvailable: BOOL,
    fMeetsCriteria: BOOL,
};
// --------------------------------------------------------
// Type: SPC_IMAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SPC_IMAGE = extern struct {
    pImageLink: ?*SPC_LINK,
    Bitmap: CRYPTOAPI_BLOB,
    Metafile: CRYPTOAPI_BLOB,
    EnhancedMetafile: CRYPTOAPI_BLOB,
    GifFile: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: SPC_SP_AGENCY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SPC_SP_AGENCY_INFO = extern struct {
    pPolicyInformation: ?*SPC_LINK,
    pwszPolicyDisplayText: ?*u16,
    pLogoImage: ?*SPC_IMAGE,
    pLogoLink: ?*SPC_LINK,
};
// --------------------------------------------------------
// Type: SPC_STATEMENT_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SPC_STATEMENT_TYPE = extern struct {
    cKeyPurposeId: u32,
    rgpszKeyPurposeId: ?*?*i8,
};
// --------------------------------------------------------
// Type: SPC_SP_OPUS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SPC_SP_OPUS_INFO = extern struct {
    pwszProgramName: ?*u16,
    pMoreInfo: ?*SPC_LINK,
    pPublisherInfo: ?*SPC_LINK,
};
// --------------------------------------------------------
// Type: CAT_NAMEVALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CAT_NAMEVALUE = extern struct {
    pwszTag: ?*u16,
    fdwFlags: u32,
    Value: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CAT_MEMBERINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CAT_MEMBERINFO = extern struct {
    pwszSubjGuid: ?*u16,
    dwCertVersion: u32,
};
// --------------------------------------------------------
// Type: CAT_MEMBERINFO2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CAT_MEMBERINFO2 = extern struct {
    SubjectGuid: Guid,
    dwCertVersion: u32,
};
// --------------------------------------------------------
// Type: INTENT_TO_SEAL_ATTRIBUTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTENT_TO_SEAL_ATTRIBUTE = extern struct {
    version: u32,
    seal: u8,
};
// --------------------------------------------------------
// Type: SEALING_SIGNATURE_ATTRIBUTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEALING_SIGNATURE_ATTRIBUTE = extern struct {
    version: u32,
    signerIndex: u32,
    signatureAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    encryptedDigest: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: SEALING_TIMESTAMP_ATTRIBUTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEALING_TIMESTAMP_ATTRIBUTE = extern struct {
    version: u32,
    signerIndex: u32,
    sealTimeStampToken: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: WIN_CERTIFICATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WIN_CERTIFICATE = extern struct {
    dwLength: u32,
    wRevision: u16,
    wCertificateType: u16,
    bCertificate: ?[*]u8,
};
// --------------------------------------------------------
// Type: WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT = extern struct {
    hClientToken: HANDLE,
    SubjectType: ?*Guid,
    Subject: ?*opaque{},
};
// --------------------------------------------------------
// Type: WIN_TRUST_ACTDATA_SUBJECT_ONLY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WIN_TRUST_ACTDATA_SUBJECT_ONLY = extern struct {
    SubjectType: ?*Guid,
    Subject: ?*opaque{},
};
// --------------------------------------------------------
// Type: WIN_TRUST_SUBJECT_FILE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WIN_TRUST_SUBJECT_FILE = extern struct {
    hFile: HANDLE,
    lpPath: ?*u16,
};
// --------------------------------------------------------
// Type: WIN_TRUST_SUBJECT_FILE_AND_DISPLAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WIN_TRUST_SUBJECT_FILE_AND_DISPLAY = extern struct {
    hFile: HANDLE,
    lpPath: ?*u16,
    lpDisplayName: ?*u16,
};
// --------------------------------------------------------
// Type: WIN_SPUB_TRUSTED_PUBLISHER_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WIN_SPUB_TRUSTED_PUBLISHER_DATA = extern struct {
    hClientToken: HANDLE,
    lpCertificate: ?*WIN_CERTIFICATE,
};
// --------------------------------------------------------
// Type: PFNCFILTERPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNCFILTERPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CERT_SELECTUI_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CERT_SELECTUI_INPUT = extern struct {
    hStore: ?*opaque{},
    prgpChain: ?*?*CERT_CHAIN_CONTEXT,
    cChain: u32,
};
// --------------------------------------------------------
// Type: CRYPTUI_CERT_MGR_STRUCT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTUI_CERT_MGR_STRUCT = extern struct {
    dwSize: u32,
    hwndParent: HWND,
    dwFlags: u32,
    pwszTitle: ?*u16,
    pszInitUsageOID: ?*i8,
};
// --------------------------------------------------------
// Type: CRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO = extern struct {
    dwSize: u32,
    pGuidSubject: ?*Guid,
    cbBlob: u32,
    pbBlob: ?*u8,
    pwszDisplayName: ?*u16,
};
// --------------------------------------------------------
// Type: CRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO = extern struct {
    dwSize: u32,
    cCertStore: u32,
    rghCertStore: ?*?*opaque{},
    pFilterCallback: PFNCFILTERPROC,
    pvCallbackData: ?*opaque{},
};
// --------------------------------------------------------
// Type: CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO = extern struct {
    dwSize: u32,
    pwszPvkFileName: ?*u16,
    pwszProvName: ?*u16,
    dwProvType: u32,
};
// --------------------------------------------------------
// Type: CRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO = extern struct {
    dwSize: u32,
    pwszSigningCertFileName: ?*u16,
    dwPvkChoice: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO = extern struct {
    dwSize: u32,
    dwAttrFlags: u32,
    pwszDescription: ?*u16,
    pwszMoreInfoLocation: ?*u16,
    pszHashAlg: ?*i8,
    pwszSigningCertDisplayString: ?*u16,
    hAdditionalCertStore: ?*opaque{},
    psAuthenticated: ?*CRYPT_ATTRIBUTES,
    psUnauthenticated: ?*CRYPT_ATTRIBUTES,
};
// --------------------------------------------------------
// Type: CRYPTUI_WIZ_DIGITAL_SIGN_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTUI_WIZ_DIGITAL_SIGN_INFO = extern struct {
    dwSize: u32,
    dwSubjectChoice: u32,
    Anonymous1: _Anonymous1_e__Union,
    dwSigningCertChoice: u32,
    Anonymous2: _Anonymous2_e__Union,
    pwszTimestampURL: ?*u16,
    dwAdditionalCertChoice: u32,
    pSignExtInfo: ?*CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO,
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT = extern struct {
    dwSize: u32,
    cbBlob: u32,
    pbBlob: ?*u8,
};
// --------------------------------------------------------
// Type: CRYPTUI_INITDIALOG_STRUCT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTUI_INITDIALOG_STRUCT = extern struct {
    lParam: LPARAM,
    pCertContext: ?*CERT_CONTEXT,
};
// --------------------------------------------------------
// Type: CRYPTUI_VIEWCERTIFICATE_STRUCTW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTUI_VIEWCERTIFICATE_STRUCTW = extern struct {
    dwSize: u32,
    hwndParent: HWND,
    dwFlags: u32,
    szTitle: ?*u16,
    pCertContext: ?*CERT_CONTEXT,
    rgszPurposes: ?*?*i8,
    cPurposes: u32,
    Anonymous: _Anonymous_e__Union,
    fpCryptProviderDataTrustedUsage: BOOL,
    idxSigner: u32,
    idxCert: u32,
    fCounterSigner: BOOL,
    idxCounterSigner: u32,
    cStores: u32,
    rghStores: ?*?*opaque{},
    cPropSheetPages: u32,
    rgPropSheetPages: ?*PROPSHEETPAGEW,
    nStartPage: u32,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CRYPTUI_VIEWCERTIFICATE_STRUCTA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTUI_VIEWCERTIFICATE_STRUCTA = extern struct {
    dwSize: u32,
    hwndParent: HWND,
    dwFlags: u32,
    szTitle: ?*i8,
    pCertContext: ?*CERT_CONTEXT,
    rgszPurposes: ?*?*i8,
    cPurposes: u32,
    Anonymous: _Anonymous_e__Union,
    fpCryptProviderDataTrustedUsage: BOOL,
    idxSigner: u32,
    idxCert: u32,
    fCounterSigner: BOOL,
    idxCounterSigner: u32,
    cStores: u32,
    rghStores: ?*?*opaque{},
    cPropSheetPages: u32,
    rgPropSheetPages: ?*PROPSHEETPAGEA,
    nStartPage: u32,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CRYPTUI_WIZ_EXPORT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTUI_WIZ_EXPORT_INFO = extern struct {
    dwSize: u32,
    pwszExportFileName: ?*u16,
    dwSubjectChoice: u32,
    Anonymous: _Anonymous_e__Union,
    cStores: u32,
    rghStores: ?*?*opaque{},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO = extern struct {
    dwSize: u32,
    dwExportFormat: u32,
    fExportChain: BOOL,
    fExportPrivateKeys: BOOL,
    pwszPassword: ?*u16,
    fStrongEncryption: BOOL,
};
// --------------------------------------------------------
// Type: CRYPTUI_WIZ_IMPORT_SRC_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTUI_WIZ_IMPORT_SRC_INFO = extern struct {
    dwSize: u32,
    dwSubjectChoice: u32,
    Anonymous: _Anonymous_e__Union,
    dwFlags: u32,
    pwszPassword: ?*u16,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: SIP_SUBJECTINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SIP_SUBJECTINFO = extern struct {
    cbSize: u32,
    pgSubjectType: ?*Guid,
    hFile: HANDLE,
    pwsFileName: ?*u16,
    pwsDisplayName: ?*u16,
    dwReserved1: u32,
    dwIntVersion: u32,
    hProv: ?*opaque{},
    DigestAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    dwFlags: u32,
    dwEncodingType: u32,
    dwReserved2: u32,
    fdwCAPISettings: u32,
    fdwSecuritySettings: u32,
    dwIndex: u32,
    dwUnionChoice: u32,
    Anonymous: _Anonymous_e__Union,
    pClientData: ?*opaque{},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: MS_ADDINFO_FLAT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MS_ADDINFO_FLAT = extern struct {
    cbStruct: u32,
    pIndirectData: ?*SIP_INDIRECT_DATA,
};
// --------------------------------------------------------
// Type: MS_ADDINFO_CATALOGMEMBER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MS_ADDINFO_CATALOGMEMBER = extern struct {
    cbStruct: u32,
    pStore: ?*CRYPTCATSTORE,
    pMember: ?*CRYPTCATMEMBER,
};
// --------------------------------------------------------
// Type: MS_ADDINFO_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MS_ADDINFO_BLOB = extern struct {
    cbStruct: u32,
    cbMemObject: u32,
    pbMemObject: ?*u8,
    cbMemSignedMsg: u32,
    pbMemSignedMsg: ?*u8,
};
// --------------------------------------------------------
// Type: SIP_CAP_SET_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SIP_CAP_SET_V2 = extern struct {
    cbSize: u32,
    dwVersion: u32,
    isMultiSign: BOOL,
    dwReserved: u32,
};
// --------------------------------------------------------
// Type: SIP_CAP_SET_V3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SIP_CAP_SET_V3 = extern struct {
    cbSize: u32,
    dwVersion: u32,
    isMultiSign: BOOL,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: SIP_INDIRECT_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SIP_INDIRECT_DATA = extern struct {
    Data: CRYPT_ATTRIBUTE_TYPE_VALUE,
    DigestAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    Digest: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: pCryptSIPGetSignedDataMsg
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const pCryptSIPGetSignedDataMsg = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: pCryptSIPPutSignedDataMsg
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const pCryptSIPPutSignedDataMsg = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: pCryptSIPCreateIndirectData
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const pCryptSIPCreateIndirectData = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: pCryptSIPVerifyIndirectData
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const pCryptSIPVerifyIndirectData = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: pCryptSIPRemoveSignedDataMsg
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const pCryptSIPRemoveSignedDataMsg = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SIP_DISPATCH_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SIP_DISPATCH_INFO = extern struct {
    cbSize: u32,
    hSIP: HANDLE,
    pfGet: pCryptSIPGetSignedDataMsg,
    pfPut: pCryptSIPPutSignedDataMsg,
    pfCreate: pCryptSIPCreateIndirectData,
    pfVerify: pCryptSIPVerifyIndirectData,
    pfRemove: pCryptSIPRemoveSignedDataMsg,
};
// --------------------------------------------------------
// Type: pfnIsFileSupported
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const pfnIsFileSupported = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: pfnIsFileSupportedName
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const pfnIsFileSupportedName = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SIP_ADD_NEWPROVIDER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SIP_ADD_NEWPROVIDER = extern struct {
    cbStruct: u32,
    pgSubject: ?*Guid,
    pwszDLLFileName: ?*u16,
    pwszMagicNumber: ?*u16,
    pwszIsFunctionName: ?*u16,
    pwszGetFuncName: ?*u16,
    pwszPutFuncName: ?*u16,
    pwszCreateFuncName: ?*u16,
    pwszVerifyFuncName: ?*u16,
    pwszRemoveFuncName: ?*u16,
    pwszIsFunctionNameFmt2: ?*u16,
    pwszGetCapFuncName: ?*u16,
};
// --------------------------------------------------------
// Type: pCryptSIPGetCaps
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const pCryptSIPGetCaps = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: pCryptSIPGetSealedDigest
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const pCryptSIPGetSealedDigest = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CRYPTCATSTORE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTCATSTORE = extern struct {
    cbStruct: u32,
    dwPublicVersion: u32,
    pwszP7File: ?*u16,
    hProv: ?*opaque{},
    dwEncodingType: u32,
    fdwStoreFlags: u32,
    hReserved: HANDLE,
    hAttrs: HANDLE,
    hCryptMsg: ?*opaque{},
    hSorted: HANDLE,
};
// --------------------------------------------------------
// Type: CRYPTCATMEMBER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTCATMEMBER = extern struct {
    cbStruct: u32,
    pwszReferenceTag: ?*u16,
    pwszFileName: ?*u16,
    gSubjectType: Guid,
    fdwMemberFlags: u32,
    pIndirectData: ?*SIP_INDIRECT_DATA,
    dwCertVersion: u32,
    dwReserved: u32,
    hReserved: HANDLE,
    sEncodedIndirectData: CRYPTOAPI_BLOB,
    sEncodedMemberInfo: CRYPTOAPI_BLOB,
};
// --------------------------------------------------------
// Type: CRYPTCATATTRIBUTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTCATATTRIBUTE = extern struct {
    cbStruct: u32,
    pwszReferenceTag: ?*u16,
    dwAttrTypeAndAction: u32,
    cbValue: u32,
    pbValue: ?*u8,
    dwReserved: u32,
};
// --------------------------------------------------------
// Type: CRYPTCATCDF
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CRYPTCATCDF = extern struct {
    cbStruct: u32,
    hFile: HANDLE,
    dwCurFilePos: u32,
    dwLastMemberOffset: u32,
    fEOF: BOOL,
    pwszResultDir: ?*u16,
    hCATStore: HANDLE,
};
// --------------------------------------------------------
// Type: CATALOG_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CATALOG_INFO = extern struct {
    cbStruct: u32,
    wszCatalogFile: ?[*]u16,
};
// --------------------------------------------------------
// Type: PFN_CDF_PARSE_ERROR_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_CDF_PARSE_ERROR_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CEnroll2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CEnroll2 = opaque {
};
// --------------------------------------------------------
// Type: CEnroll
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CEnroll = opaque {
};
// --------------------------------------------------------
// Type: ICEnroll
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICEnroll = *opaque{
    // TODO: Method 'createFilePKCS10'
    // TODO: Method 'acceptFilePKCS7'
    // TODO: Method 'createPKCS10'
    // TODO: Method 'acceptPKCS7'
    // TODO: Method 'getCertFromPKCS7'
    // TODO: Method 'enumProviders'
    // TODO: Method 'enumContainers'
    // TODO: Method 'freeRequestInfo'
    // TODO: Method 'get_MyStoreName'
    // TODO: Method 'put_MyStoreName'
    // TODO: Method 'get_MyStoreType'
    // TODO: Method 'put_MyStoreType'
    // TODO: Method 'get_MyStoreFlags'
    // TODO: Method 'put_MyStoreFlags'
    // TODO: Method 'get_CAStoreName'
    // TODO: Method 'put_CAStoreName'
    // TODO: Method 'get_CAStoreType'
    // TODO: Method 'put_CAStoreType'
    // TODO: Method 'get_CAStoreFlags'
    // TODO: Method 'put_CAStoreFlags'
    // TODO: Method 'get_RootStoreName'
    // TODO: Method 'put_RootStoreName'
    // TODO: Method 'get_RootStoreType'
    // TODO: Method 'put_RootStoreType'
    // TODO: Method 'get_RootStoreFlags'
    // TODO: Method 'put_RootStoreFlags'
    // TODO: Method 'get_RequestStoreName'
    // TODO: Method 'put_RequestStoreName'
    // TODO: Method 'get_RequestStoreType'
    // TODO: Method 'put_RequestStoreType'
    // TODO: Method 'get_RequestStoreFlags'
    // TODO: Method 'put_RequestStoreFlags'
    // TODO: Method 'get_ContainerName'
    // TODO: Method 'put_ContainerName'
    // TODO: Method 'get_ProviderName'
    // TODO: Method 'put_ProviderName'
    // TODO: Method 'get_ProviderType'
    // TODO: Method 'put_ProviderType'
    // TODO: Method 'get_KeySpec'
    // TODO: Method 'put_KeySpec'
    // TODO: Method 'get_ProviderFlags'
    // TODO: Method 'put_ProviderFlags'
    // TODO: Method 'get_UseExistingKeySet'
    // TODO: Method 'put_UseExistingKeySet'
    // TODO: Method 'get_GenKeyFlags'
    // TODO: Method 'put_GenKeyFlags'
    // TODO: Method 'get_DeleteRequestCert'
    // TODO: Method 'put_DeleteRequestCert'
    // TODO: Method 'get_WriteCertToCSP'
    // TODO: Method 'put_WriteCertToCSP'
    // TODO: Method 'get_SPCFileName'
    // TODO: Method 'put_SPCFileName'
    // TODO: Method 'get_PVKFileName'
    // TODO: Method 'put_PVKFileName'
    // TODO: Method 'get_HashAlgorithm'
    // TODO: Method 'put_HashAlgorithm'
};
// --------------------------------------------------------
// Type: ICEnroll2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICEnroll2 = *opaque{
    // TODO: Method 'addCertTypeToRequest'
    // TODO: Method 'addNameValuePairToSignature'
    // TODO: Method 'get_WriteCertToUserDS'
    // TODO: Method 'put_WriteCertToUserDS'
    // TODO: Method 'get_EnableT61DNEncoding'
    // TODO: Method 'put_EnableT61DNEncoding'
};
// --------------------------------------------------------
// Type: ICEnroll3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICEnroll3 = *opaque{
    // TODO: Method 'InstallPKCS7'
    // TODO: Method 'Reset'
    // TODO: Method 'GetSupportedKeySpec'
    // TODO: Method 'GetKeyLen'
    // TODO: Method 'EnumAlgs'
    // TODO: Method 'GetAlgName'
    // TODO: Method 'put_ReuseHardwareKeyIfUnableToGenNew'
    // TODO: Method 'get_ReuseHardwareKeyIfUnableToGenNew'
    // TODO: Method 'put_HashAlgID'
    // TODO: Method 'get_HashAlgID'
    // TODO: Method 'put_LimitExchangeKeyToEncipherment'
    // TODO: Method 'get_LimitExchangeKeyToEncipherment'
    // TODO: Method 'put_EnableSMIMECapabilities'
    // TODO: Method 'get_EnableSMIMECapabilities'
};
// --------------------------------------------------------
// Type: ICEnroll4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICEnroll4 = *opaque{
    // TODO: Method 'put_PrivateKeyArchiveCertificate'
    // TODO: Method 'get_PrivateKeyArchiveCertificate'
    // TODO: Method 'put_ThumbPrint'
    // TODO: Method 'get_ThumbPrint'
    // TODO: Method 'binaryToString'
    // TODO: Method 'stringToBinary'
    // TODO: Method 'addExtensionToRequest'
    // TODO: Method 'addAttributeToRequest'
    // TODO: Method 'addNameValuePairToRequest'
    // TODO: Method 'resetExtensions'
    // TODO: Method 'resetAttributes'
    // TODO: Method 'createRequest'
    // TODO: Method 'createFileRequest'
    // TODO: Method 'acceptResponse'
    // TODO: Method 'acceptFileResponse'
    // TODO: Method 'getCertFromResponse'
    // TODO: Method 'getCertFromFileResponse'
    // TODO: Method 'createPFX'
    // TODO: Method 'createFilePFX'
    // TODO: Method 'setPendingRequestInfo'
    // TODO: Method 'enumPendingRequest'
    // TODO: Method 'removePendingRequest'
    // TODO: Method 'GetKeyLenEx'
    // TODO: Method 'InstallPKCS7Ex'
    // TODO: Method 'addCertTypeToRequestEx'
    // TODO: Method 'getProviderType'
    // TODO: Method 'put_SignerCertificate'
    // TODO: Method 'put_ClientId'
    // TODO: Method 'get_ClientId'
    // TODO: Method 'addBlobPropertyToCertificate'
    // TODO: Method 'resetBlobProperties'
    // TODO: Method 'put_IncludeSubjectKeyID'
    // TODO: Method 'get_IncludeSubjectKeyID'
};
// --------------------------------------------------------
// Type: IEnroll
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnroll = *opaque{
    // TODO: Method 'createFilePKCS10WStr'
    // TODO: Method 'acceptFilePKCS7WStr'
    // TODO: Method 'createPKCS10WStr'
    // TODO: Method 'acceptPKCS7Blob'
    // TODO: Method 'getCertContextFromPKCS7'
    // TODO: Method 'getMyStore'
    // TODO: Method 'getCAStore'
    // TODO: Method 'getROOTHStore'
    // TODO: Method 'enumProvidersWStr'
    // TODO: Method 'enumContainersWStr'
    // TODO: Method 'freeRequestInfoBlob'
    // TODO: Method 'get_MyStoreNameWStr'
    // TODO: Method 'put_MyStoreNameWStr'
    // TODO: Method 'get_MyStoreTypeWStr'
    // TODO: Method 'put_MyStoreTypeWStr'
    // TODO: Method 'get_MyStoreFlags'
    // TODO: Method 'put_MyStoreFlags'
    // TODO: Method 'get_CAStoreNameWStr'
    // TODO: Method 'put_CAStoreNameWStr'
    // TODO: Method 'get_CAStoreTypeWStr'
    // TODO: Method 'put_CAStoreTypeWStr'
    // TODO: Method 'get_CAStoreFlags'
    // TODO: Method 'put_CAStoreFlags'
    // TODO: Method 'get_RootStoreNameWStr'
    // TODO: Method 'put_RootStoreNameWStr'
    // TODO: Method 'get_RootStoreTypeWStr'
    // TODO: Method 'put_RootStoreTypeWStr'
    // TODO: Method 'get_RootStoreFlags'
    // TODO: Method 'put_RootStoreFlags'
    // TODO: Method 'get_RequestStoreNameWStr'
    // TODO: Method 'put_RequestStoreNameWStr'
    // TODO: Method 'get_RequestStoreTypeWStr'
    // TODO: Method 'put_RequestStoreTypeWStr'
    // TODO: Method 'get_RequestStoreFlags'
    // TODO: Method 'put_RequestStoreFlags'
    // TODO: Method 'get_ContainerNameWStr'
    // TODO: Method 'put_ContainerNameWStr'
    // TODO: Method 'get_ProviderNameWStr'
    // TODO: Method 'put_ProviderNameWStr'
    // TODO: Method 'get_ProviderType'
    // TODO: Method 'put_ProviderType'
    // TODO: Method 'get_KeySpec'
    // TODO: Method 'put_KeySpec'
    // TODO: Method 'get_ProviderFlags'
    // TODO: Method 'put_ProviderFlags'
    // TODO: Method 'get_UseExistingKeySet'
    // TODO: Method 'put_UseExistingKeySet'
    // TODO: Method 'get_GenKeyFlags'
    // TODO: Method 'put_GenKeyFlags'
    // TODO: Method 'get_DeleteRequestCert'
    // TODO: Method 'put_DeleteRequestCert'
    // TODO: Method 'get_WriteCertToUserDS'
    // TODO: Method 'put_WriteCertToUserDS'
    // TODO: Method 'get_EnableT61DNEncoding'
    // TODO: Method 'put_EnableT61DNEncoding'
    // TODO: Method 'get_WriteCertToCSP'
    // TODO: Method 'put_WriteCertToCSP'
    // TODO: Method 'get_SPCFileNameWStr'
    // TODO: Method 'put_SPCFileNameWStr'
    // TODO: Method 'get_PVKFileNameWStr'
    // TODO: Method 'put_PVKFileNameWStr'
    // TODO: Method 'get_HashAlgorithmWStr'
    // TODO: Method 'put_HashAlgorithmWStr'
    // TODO: Method 'get_RenewalCertificate'
    // TODO: Method 'put_RenewalCertificate'
    // TODO: Method 'AddCertTypeToRequestWStr'
    // TODO: Method 'AddNameValuePairToSignatureWStr'
    // TODO: Method 'AddExtensionsToRequest'
    // TODO: Method 'AddAuthenticatedAttributesToPKCS7Request'
    // TODO: Method 'CreatePKCS7RequestFromRequest'
};
// --------------------------------------------------------
// Type: IEnroll2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnroll2 = *opaque{
    // TODO: Method 'InstallPKCS7Blob'
    // TODO: Method 'Reset'
    // TODO: Method 'GetSupportedKeySpec'
    // TODO: Method 'GetKeyLen'
    // TODO: Method 'EnumAlgs'
    // TODO: Method 'GetAlgNameWStr'
    // TODO: Method 'put_ReuseHardwareKeyIfUnableToGenNew'
    // TODO: Method 'get_ReuseHardwareKeyIfUnableToGenNew'
    // TODO: Method 'put_HashAlgID'
    // TODO: Method 'get_HashAlgID'
    // TODO: Method 'SetHStoreMy'
    // TODO: Method 'SetHStoreCA'
    // TODO: Method 'SetHStoreROOT'
    // TODO: Method 'SetHStoreRequest'
    // TODO: Method 'put_LimitExchangeKeyToEncipherment'
    // TODO: Method 'get_LimitExchangeKeyToEncipherment'
    // TODO: Method 'put_EnableSMIMECapabilities'
    // TODO: Method 'get_EnableSMIMECapabilities'
};
// --------------------------------------------------------
// Type: IEnroll4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnroll4 = *opaque{
    // TODO: Method 'put_ThumbPrintWStr'
    // TODO: Method 'get_ThumbPrintWStr'
    // TODO: Method 'SetPrivateKeyArchiveCertificate'
    // TODO: Method 'GetPrivateKeyArchiveCertificate'
    // TODO: Method 'binaryBlobToString'
    // TODO: Method 'stringToBinaryBlob'
    // TODO: Method 'addExtensionToRequestWStr'
    // TODO: Method 'addAttributeToRequestWStr'
    // TODO: Method 'addNameValuePairToRequestWStr'
    // TODO: Method 'resetExtensions'
    // TODO: Method 'resetAttributes'
    // TODO: Method 'createRequestWStr'
    // TODO: Method 'createFileRequestWStr'
    // TODO: Method 'acceptResponseBlob'
    // TODO: Method 'acceptFileResponseWStr'
    // TODO: Method 'getCertContextFromResponseBlob'
    // TODO: Method 'getCertContextFromFileResponseWStr'
    // TODO: Method 'createPFXWStr'
    // TODO: Method 'createFilePFXWStr'
    // TODO: Method 'setPendingRequestInfoWStr'
    // TODO: Method 'enumPendingRequestWStr'
    // TODO: Method 'removePendingRequestWStr'
    // TODO: Method 'GetKeyLenEx'
    // TODO: Method 'InstallPKCS7BlobEx'
    // TODO: Method 'AddCertTypeToRequestWStrEx'
    // TODO: Method 'getProviderTypeWStr'
    // TODO: Method 'addBlobPropertyToCertificateWStr'
    // TODO: Method 'SetSignerCertificate'
    // TODO: Method 'put_ClientId'
    // TODO: Method 'get_ClientId'
    // TODO: Method 'put_IncludeSubjectKeyID'
    // TODO: Method 'get_IncludeSubjectKeyID'
};
// --------------------------------------------------------
// Type: SCESVC_CONFIGURATION_LINE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCESVC_CONFIGURATION_LINE = extern struct {
    Key: ?*i8,
    Value: ?*i8,
    ValueLen: u32,
};
// --------------------------------------------------------
// Type: SCESVC_CONFIGURATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCESVC_CONFIGURATION_INFO = extern struct {
    Count: u32,
    Lines: ?*SCESVC_CONFIGURATION_LINE,
};
// --------------------------------------------------------
// Type: SCESVC_INFO_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SCESVC_INFO_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SCESVC_ANALYSIS_LINE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCESVC_ANALYSIS_LINE = extern struct {
    Key: ?*i8,
    Value: ?*u8,
    ValueLen: u32,
};
// --------------------------------------------------------
// Type: SCESVC_ANALYSIS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCESVC_ANALYSIS_INFO = extern struct {
    Count: u32,
    Lines: ?*SCESVC_ANALYSIS_LINE,
};
// --------------------------------------------------------
// Type: PFSCE_QUERY_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFSCE_QUERY_INFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFSCE_SET_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFSCE_SET_INFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFSCE_FREE_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFSCE_FREE_INFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFSCE_LOG_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFSCE_LOG_INFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SCESVC_CALLBACK_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCESVC_CALLBACK_INFO = extern struct {
    sceHandle: ?*opaque{},
    pfQueryInfo: PFSCE_QUERY_INFO,
    pfSetInfo: PFSCE_SET_INFO,
    pfFreeInfo: PFSCE_FREE_INFO,
    pfLogInfo: PFSCE_LOG_INFO,
};
// --------------------------------------------------------
// Type: PF_ConfigAnalyzeService
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_ConfigAnalyzeService = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PF_UpdateService
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PF_UpdateService = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ISceSvcAttachmentPersistInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISceSvcAttachmentPersistInfo = *opaque{
    // TODO: Method 'Save'
    // TODO: Method 'IsDirty'
    // TODO: Method 'FreeBuffer'
};
// --------------------------------------------------------
// Type: ISceSvcAttachmentData
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISceSvcAttachmentData = *opaque{
    // TODO: Method 'GetData'
    // TODO: Method 'Initialize'
    // TODO: Method 'FreeBuffer'
    // TODO: Method 'CloseHandle'
};
// --------------------------------------------------------
// Type: SAFER_LEVEL_HANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SAFER_LEVEL_HANDLE__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: SAFER_CODE_PROPERTIES_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SAFER_CODE_PROPERTIES_V1 = extern struct {
    cbSize: u32,
    dwCheckFlags: u32,
    ImagePath: ?*u16,
    hImageFileHandle: HANDLE,
    UrlZoneId: u32,
    ImageHash: ?[*]u8,
    dwImageHashSize: u32,
    ImageSize: LARGE_INTEGER,
    HashAlgorithm: u32,
    pByteBlock: ?*u8,
    hWndParent: HWND,
    dwWVTUIChoice: u32,
};
// --------------------------------------------------------
// Type: SAFER_CODE_PROPERTIES_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SAFER_CODE_PROPERTIES_V2 = extern struct {
    cbSize: u32,
    dwCheckFlags: u32,
    ImagePath: ?*u16,
    hImageFileHandle: HANDLE,
    UrlZoneId: u32,
    ImageHash: ?[*]u8,
    dwImageHashSize: u32,
    ImageSize: LARGE_INTEGER,
    HashAlgorithm: u32,
    pByteBlock: ?*u8,
    hWndParent: HWND,
    dwWVTUIChoice: u32,
    PackageMoniker: ?*u16,
    PackagePublisher: ?*u16,
    PackageName: ?*u16,
    PackageVersion: u64,
    PackageIsFramework: BOOL,
};
// --------------------------------------------------------
// Type: SAFER_POLICY_INFO_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SAFER_POLICY_INFO_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: SAFER_OBJECT_INFO_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SAFER_OBJECT_INFO_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: SAFER_IDENTIFICATION_TYPES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SAFER_IDENTIFICATION_TYPES = *opaque{
};
// --------------------------------------------------------
// Type: SAFER_IDENTIFICATION_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SAFER_IDENTIFICATION_HEADER = extern struct {
    dwIdentificationType: SAFER_IDENTIFICATION_TYPES,
    cbStructSize: u32,
    IdentificationGuid: Guid,
    lastModified: FILETIME,
};
// --------------------------------------------------------
// Type: SAFER_PATHNAME_IDENTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SAFER_PATHNAME_IDENTIFICATION = extern struct {
    header: SAFER_IDENTIFICATION_HEADER,
    Description: ?[*]u16,
    ImageName: ?*u16,
    dwSaferFlags: u32,
};
// --------------------------------------------------------
// Type: SAFER_HASH_IDENTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SAFER_HASH_IDENTIFICATION = extern struct {
    header: SAFER_IDENTIFICATION_HEADER,
    Description: ?[*]u16,
    FriendlyName: ?[*]u16,
    HashSize: u32,
    ImageHash: ?[*]u8,
    HashAlgorithm: u32,
    ImageSize: LARGE_INTEGER,
    dwSaferFlags: u32,
};
// --------------------------------------------------------
// Type: SAFER_HASH_IDENTIFICATION2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SAFER_HASH_IDENTIFICATION2 = extern struct {
    hashIdentification: SAFER_HASH_IDENTIFICATION,
    HashSize: u32,
    ImageHash: ?[*]u8,
    HashAlgorithm: u32,
};
// --------------------------------------------------------
// Type: SAFER_URLZONE_IDENTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SAFER_URLZONE_IDENTIFICATION = extern struct {
    header: SAFER_IDENTIFICATION_HEADER,
    UrlZoneId: u32,
    dwSaferFlags: u32,
};
// --------------------------------------------------------
// Type: SLDATATYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SLDATATYPE = *opaque{
};
// --------------------------------------------------------
// Type: SLIDTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SLIDTYPE = *opaque{
};
// --------------------------------------------------------
// Type: SLLICENSINGSTATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SLLICENSINGSTATUS = *opaque{
};
// --------------------------------------------------------
// Type: SL_LICENSING_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SL_LICENSING_STATUS = extern struct {
    SkuId: Guid,
    eStatus: SLLICENSINGSTATUS,
    dwGraceTime: u32,
    dwTotalGraceDays: u32,
    hrReason: HRESULT,
    qwValidityExpiration: u64,
};
// --------------------------------------------------------
// Type: SL_ACTIVATION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SL_ACTIVATION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SL_ACTIVATION_INFO_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SL_ACTIVATION_INFO_HEADER = extern struct {
    cbSize: u32,
    type: SL_ACTIVATION_TYPE,
};
// --------------------------------------------------------
// Type: SL_AD_ACTIVATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SL_AD_ACTIVATION_INFO = extern struct {
    header: SL_ACTIVATION_INFO_HEADER,
    pwszProductKey: ?*u16,
    pwszActivationObjectName: ?*u16,
};
// --------------------------------------------------------
// Type: SLREFERRALTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SLREFERRALTYPE = *opaque{
};
// --------------------------------------------------------
// Type: SL_GENUINE_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SL_GENUINE_STATE = *opaque{
};
// --------------------------------------------------------
// Type: SL_NONGENUINE_UI_OPTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SL_NONGENUINE_UI_OPTIONS = extern struct {
    cbSize: u32,
    pComponentId: ?*Guid,
    hResultUI: HRESULT,
};
// --------------------------------------------------------
// Type: SL_SYSTEM_POLICY_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SL_SYSTEM_POLICY_INFORMATION = extern struct {
    Reserved1: ?[*]?*opaque{},
    Reserved2: ?[*]u32,
};
// --------------------------------------------------------
// Type: DdqAccessLevel
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DdqAccessLevel = *opaque{
};
// --------------------------------------------------------
// Type: DIAGNOSTIC_DATA_RECORD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIAGNOSTIC_DATA_RECORD = extern struct {
    rowId: i64,
    timestamp: u64,
    eventKeywords: u64,
    fullEventName: ?*u16,
    providerGroupGuid: ?*u16,
    producerName: ?*u16,
    privacyTags: ?*i32,
    privacyTagCount: u32,
    categoryIds: ?*i32,
    categoryIdCount: u32,
    isCoreData: BOOL,
    extra1: ?*u16,
    extra2: ?*u16,
    extra3: ?*u16,
};
// --------------------------------------------------------
// Type: DIAGNOSTIC_DATA_SEARCH_CRITERIA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIAGNOSTIC_DATA_SEARCH_CRITERIA = extern struct {
    producerNames: ?*?*u16,
    producerNameCount: u32,
    textToMatch: ?*u16,
    categoryIds: ?*i32,
    categoryIdCount: u32,
    privacyTags: ?*i32,
    privacyTagCount: u32,
    coreDataOnly: BOOL,
};
// --------------------------------------------------------
// Type: DIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION = extern struct {
    privacyTag: i32,
    name: ?*u16,
    description: ?*u16,
};
// --------------------------------------------------------
// Type: DIAGNOSTIC_DATA_EVENT_PRODUCER_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIAGNOSTIC_DATA_EVENT_PRODUCER_DESCRIPTION = extern struct {
    name: ?*u16,
};
// --------------------------------------------------------
// Type: DIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION = extern struct {
    id: i32,
    name: ?*u16,
};
// --------------------------------------------------------
// Type: DIAGNOSTIC_DATA_EVENT_TAG_STATS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIAGNOSTIC_DATA_EVENT_TAG_STATS = extern struct {
    privacyTag: i32,
    eventCount: u32,
};
// --------------------------------------------------------
// Type: DIAGNOSTIC_DATA_EVENT_BINARY_STATS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIAGNOSTIC_DATA_EVENT_BINARY_STATS = extern struct {
    moduleName: ?*u16,
    friendlyModuleName: ?*u16,
    eventCount: u32,
    uploadSizeBytes: u64,
};
// --------------------------------------------------------
// Type: DIAGNOSTIC_DATA_GENERAL_STATS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIAGNOSTIC_DATA_GENERAL_STATS = extern struct {
    optInLevel: u32,
    transcriptSizeBytes: u64,
    oldestEventTimestamp: u64,
    totalEventCountLast24Hours: u32,
    averageDailyEvents: f32,
};
// --------------------------------------------------------
// Type: DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION = extern struct {
    hoursOfHistoryToKeep: u32,
    maxStoreMegabytes: u32,
    requestedMaxStoreMegabytes: u32,
};
// --------------------------------------------------------
// Type: DIAGNOSTIC_REPORT_PARAMETER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIAGNOSTIC_REPORT_PARAMETER = extern struct {
    name: ?[*]u16,
    value: ?[*]u16,
};
// --------------------------------------------------------
// Type: DIAGNOSTIC_REPORT_SIGNATURE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIAGNOSTIC_REPORT_SIGNATURE = extern struct {
    eventName: ?[*]u16,
    parameters: ?[*]DIAGNOSTIC_REPORT_PARAMETER,
};
// --------------------------------------------------------
// Type: DIAGNOSTIC_REPORT_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIAGNOSTIC_REPORT_DATA = extern struct {
    signature: DIAGNOSTIC_REPORT_SIGNATURE,
    bucketId: Guid,
    reportId: Guid,
    creationTime: FILETIME,
    sizeInBytes: u64,
    cabId: ?*u16,
    reportStatus: u32,
    reportIntegratorId: Guid,
    fileNames: ?*?*u16,
    fileCount: u32,
    friendlyEventName: ?*u16,
    applicationName: ?*u16,
    applicationPath: ?*u16,
    description: ?*u16,
    bucketIdString: ?*u16,
    legacyBucketId: u64,
    reportKey: ?*u16,
};
// --------------------------------------------------------
// Type: HDIAGNOSTIC_DATA_QUERY_SESSION__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HDIAGNOSTIC_DATA_QUERY_SESSION__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: HDIAGNOSTIC_REPORT__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HDIAGNOSTIC_REPORT__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: HDIAGNOSTIC_EVENT_TAG_DESCRIPTION__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HDIAGNOSTIC_EVENT_TAG_DESCRIPTION__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: HDIAGNOSTIC_RECORD__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HDIAGNOSTIC_RECORD__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: UNICODE_STRING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UNICODE_STRING = extern struct {
    Length: u16,
    MaximumLength: u16,
    Buffer: ?*u16,
};
// --------------------------------------------------------
// Type: SEC_WINNT_AUTH_IDENTITY_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_WINNT_AUTH_IDENTITY_W = extern struct {
    User: ?*u16,
    UserLength: u32,
    Domain: ?*u16,
    DomainLength: u32,
    Password: ?*u16,
    PasswordLength: u32,
    Flags: u32,
};
// --------------------------------------------------------
// Type: SEC_WINNT_AUTH_IDENTITY_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SEC_WINNT_AUTH_IDENTITY_A = extern struct {
    User: ?*u8,
    UserLength: u32,
    Domain: ?*u8,
    DomainLength: u32,
    Password: ?*u8,
    PasswordLength: u32,
    Flags: u32,
};
// --------------------------------------------------------
// Type: PROCESS_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROCESS_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: NETRESOURCEA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETRESOURCEA = extern struct {
    dwScope: u32,
    dwType: u32,
    dwDisplayType: u32,
    dwUsage: u32,
    lpLocalName: ?*i8,
    lpRemoteName: ?*i8,
    lpComment: ?*i8,
    lpProvider: ?*i8,
};
// --------------------------------------------------------
// Type: NETRESOURCEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETRESOURCEW = extern struct {
    dwScope: u32,
    dwType: u32,
    dwDisplayType: u32,
    dwUsage: u32,
    lpLocalName: ?*u16,
    lpRemoteName: ?*u16,
    lpComment: ?*u16,
    lpProvider: ?*u16,
};
// --------------------------------------------------------
// Type: UNIVERSAL_NAME_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UNIVERSAL_NAME_INFOA = extern struct {
    lpUniversalName: ?*i8,
};
// --------------------------------------------------------
// Type: UNIVERSAL_NAME_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UNIVERSAL_NAME_INFOW = extern struct {
    lpUniversalName: ?*u16,
};
// --------------------------------------------------------
// Type: REMOTE_NAME_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REMOTE_NAME_INFOA = extern struct {
    lpUniversalName: ?*i8,
    lpConnectionName: ?*i8,
    lpRemainingPath: ?*i8,
};
// --------------------------------------------------------
// Type: REMOTE_NAME_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REMOTE_NAME_INFOW = extern struct {
    lpUniversalName: ?*u16,
    lpConnectionName: ?*u16,
    lpRemainingPath: ?*u16,
};
// --------------------------------------------------------
// Type: NETCONNECTINFOSTRUCT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETCONNECTINFOSTRUCT = extern struct {
    cbStructure: u32,
    dwFlags: u32,
    dwSpeed: u32,
    dwDelay: u32,
    dwOptDataSize: u32,
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn NetAddServiceAccount(
    ServerName: ?*u16,
    AccountName: ?*u16,
    Password: ?*u16,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn NetRemoveServiceAccount(
    ServerName: ?*u16,
    AccountName: ?*u16,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn NetEnumerateServiceAccounts(
    ServerName: ?*u16,
    Flags: u32,
    AccountsCount: ?*u32,
    Accounts: ?*?*?*u16,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn NetIsServiceAccount(
    ServerName: ?*u16,
    AccountName: ?*u16,
    IsService: ?*i32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn NetQueryServiceAccount(
    ServerName: ?*u16,
    AccountName: ?*u16,
    InfoLevel: u32,
    Buffer: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetServiceBits(
    hServiceStatus: ?*SERVICE_STATUS_HANDLE__,
    dwServiceBits: u32,
    bSetBitsOn: BOOL,
    bUpdateImmediately: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn SetUserObjectSecurity(
    hObj: HANDLE,
    pSIRequested: ?*u32,
    pSID: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn GetUserObjectSecurity(
    hObj: HANDLE,
    pSIRequested: ?*u32,
    pSID: ?*opaque{},
    nLength: u32,
    lpnLengthNeeded: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ImpersonateNamedPipeClient(
    hNamedPipe: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AccessCheck(
    pSecurityDescriptor: ?*opaque{},
    ClientToken: HANDLE,
    DesiredAccess: u32,
    GenericMapping: ?*GENERIC_MAPPING,
    PrivilegeSet: ?*PRIVILEGE_SET,
    PrivilegeSetLength: ?*u32,
    GrantedAccess: ?*u32,
    AccessStatus: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn AccessCheckAndAuditAlarmW(
    SubsystemName: ?*u16,
    HandleId: ?*opaque{},
    ObjectTypeName: ?*u16,
    ObjectName: ?*u16,
    SecurityDescriptor: ?*opaque{},
    DesiredAccess: u32,
    GenericMapping: ?*GENERIC_MAPPING,
    ObjectCreation: BOOL,
    GrantedAccess: ?*u32,
    AccessStatus: ?*i32,
    pfGenerateOnClose: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AccessCheckByType(
    pSecurityDescriptor: ?*opaque{},
    PrincipalSelfSid: ?*opaque{},
    ClientToken: HANDLE,
    DesiredAccess: u32,
    ObjectTypeList: ?*OBJECT_TYPE_LIST,
    ObjectTypeListLength: u32,
    GenericMapping: ?*GENERIC_MAPPING,
    PrivilegeSet: ?*PRIVILEGE_SET,
    PrivilegeSetLength: ?*u32,
    GrantedAccess: ?*u32,
    AccessStatus: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AccessCheckByTypeResultList(
    pSecurityDescriptor: ?*opaque{},
    PrincipalSelfSid: ?*opaque{},
    ClientToken: HANDLE,
    DesiredAccess: u32,
    ObjectTypeList: ?*OBJECT_TYPE_LIST,
    ObjectTypeListLength: u32,
    GenericMapping: ?*GENERIC_MAPPING,
    PrivilegeSet: ?*PRIVILEGE_SET,
    PrivilegeSetLength: ?*u32,
    GrantedAccessList: ?*u32,
    AccessStatusList: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn AccessCheckByTypeAndAuditAlarmW(
    SubsystemName: ?*u16,
    HandleId: ?*opaque{},
    ObjectTypeName: ?*u16,
    ObjectName: ?*u16,
    SecurityDescriptor: ?*opaque{},
    PrincipalSelfSid: ?*opaque{},
    DesiredAccess: u32,
    AuditType: AUDIT_EVENT_TYPE,
    Flags: u32,
    ObjectTypeList: ?*OBJECT_TYPE_LIST,
    ObjectTypeListLength: u32,
    GenericMapping: ?*GENERIC_MAPPING,
    ObjectCreation: BOOL,
    GrantedAccess: ?*u32,
    AccessStatus: ?*i32,
    pfGenerateOnClose: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn AccessCheckByTypeResultListAndAuditAlarmW(
    SubsystemName: ?*u16,
    HandleId: ?*opaque{},
    ObjectTypeName: ?*u16,
    ObjectName: ?*u16,
    SecurityDescriptor: ?*opaque{},
    PrincipalSelfSid: ?*opaque{},
    DesiredAccess: u32,
    AuditType: AUDIT_EVENT_TYPE,
    Flags: u32,
    ObjectTypeList: ?*OBJECT_TYPE_LIST,
    ObjectTypeListLength: u32,
    GenericMapping: ?*GENERIC_MAPPING,
    ObjectCreation: BOOL,
    GrantedAccessList: ?*u32,
    AccessStatusList: ?*u32,
    pfGenerateOnClose: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn AccessCheckByTypeResultListAndAuditAlarmByHandleW(
    SubsystemName: ?*u16,
    HandleId: ?*opaque{},
    ClientToken: HANDLE,
    ObjectTypeName: ?*u16,
    ObjectName: ?*u16,
    SecurityDescriptor: ?*opaque{},
    PrincipalSelfSid: ?*opaque{},
    DesiredAccess: u32,
    AuditType: AUDIT_EVENT_TYPE,
    Flags: u32,
    ObjectTypeList: ?*OBJECT_TYPE_LIST,
    ObjectTypeListLength: u32,
    GenericMapping: ?*GENERIC_MAPPING,
    ObjectCreation: BOOL,
    GrantedAccessList: ?*u32,
    AccessStatusList: ?*u32,
    pfGenerateOnClose: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AddAccessAllowedAce(
    pAcl: ?*ACL,
    dwAceRevision: u32,
    AccessMask: u32,
    pSid: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AddAccessAllowedAceEx(
    pAcl: ?*ACL,
    dwAceRevision: u32,
    AceFlags: u32,
    AccessMask: u32,
    pSid: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AddAccessAllowedObjectAce(
    pAcl: ?*ACL,
    dwAceRevision: u32,
    AceFlags: u32,
    AccessMask: u32,
    ObjectTypeGuid: ?*Guid,
    InheritedObjectTypeGuid: ?*Guid,
    pSid: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AddAccessDeniedAce(
    pAcl: ?*ACL,
    dwAceRevision: u32,
    AccessMask: u32,
    pSid: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AddAccessDeniedAceEx(
    pAcl: ?*ACL,
    dwAceRevision: u32,
    AceFlags: u32,
    AccessMask: u32,
    pSid: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AddAccessDeniedObjectAce(
    pAcl: ?*ACL,
    dwAceRevision: u32,
    AceFlags: u32,
    AccessMask: u32,
    ObjectTypeGuid: ?*Guid,
    InheritedObjectTypeGuid: ?*Guid,
    pSid: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AddAce(
    pAcl: ?*ACL,
    dwAceRevision: u32,
    dwStartingAceIndex: u32,
    pAceList: ?*opaque{},
    nAceListLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AddAuditAccessAce(
    pAcl: ?*ACL,
    dwAceRevision: u32,
    dwAccessMask: u32,
    pSid: ?*opaque{},
    bAuditSuccess: BOOL,
    bAuditFailure: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AddAuditAccessAceEx(
    pAcl: ?*ACL,
    dwAceRevision: u32,
    AceFlags: u32,
    dwAccessMask: u32,
    pSid: ?*opaque{},
    bAuditSuccess: BOOL,
    bAuditFailure: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AddAuditAccessObjectAce(
    pAcl: ?*ACL,
    dwAceRevision: u32,
    AceFlags: u32,
    AccessMask: u32,
    ObjectTypeGuid: ?*Guid,
    InheritedObjectTypeGuid: ?*Guid,
    pSid: ?*opaque{},
    bAuditSuccess: BOOL,
    bAuditFailure: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AddMandatoryAce(
    pAcl: ?*ACL,
    dwAceRevision: u32,
    AceFlags: u32,
    MandatoryPolicy: u32,
    pLabelSid: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn AddResourceAttributeAce(
    pAcl: ?*ACL,
    dwAceRevision: u32,
    AceFlags: u32,
    AccessMask: u32,
    pSid: ?*opaque{},
    pAttributeInfo: ?*CLAIM_SECURITY_ATTRIBUTES_INFORMATION,
    pReturnLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn AddScopedPolicyIDAce(
    pAcl: ?*ACL,
    dwAceRevision: u32,
    AceFlags: u32,
    AccessMask: u32,
    pSid: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AdjustTokenGroups(
    TokenHandle: HANDLE,
    ResetToDefault: BOOL,
    NewState: ?*TOKEN_GROUPS,
    BufferLength: u32,
    PreviousState: ?*TOKEN_GROUPS,
    ReturnLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AdjustTokenPrivileges(
    TokenHandle: HANDLE,
    DisableAllPrivileges: BOOL,
    NewState: ?*TOKEN_PRIVILEGES,
    BufferLength: u32,
    PreviousState: ?*TOKEN_PRIVILEGES,
    ReturnLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AllocateAndInitializeSid(
    pIdentifierAuthority: ?*SID_IDENTIFIER_AUTHORITY,
    nSubAuthorityCount: u8,
    nSubAuthority0: u32,
    nSubAuthority1: u32,
    nSubAuthority2: u32,
    nSubAuthority3: u32,
    nSubAuthority4: u32,
    nSubAuthority5: u32,
    nSubAuthority6: u32,
    nSubAuthority7: u32,
    pSid: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AllocateLocallyUniqueId(
    Luid: ?*LUID,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn AreAllAccessesGranted(
    GrantedAccess: u32,
    DesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn AreAnyAccessesGranted(
    GrantedAccess: u32,
    DesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CheckTokenMembership(
    TokenHandle: HANDLE,
    SidToCheck: ?*opaque{},
    IsMember: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CheckTokenCapability(
    TokenHandle: HANDLE,
    CapabilitySidToCheck: ?*opaque{},
    HasCapability: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetAppContainerAce(
    Acl: ?*ACL,
    StartingAceIndex: u32,
    AppContainerAce: ?*?*opaque{},
    AppContainerAceIndex: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CheckTokenMembershipEx(
    TokenHandle: HANDLE,
    SidToCheck: ?*opaque{},
    Flags: u32,
    IsMember: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ConvertToAutoInheritPrivateObjectSecurity(
    ParentDescriptor: ?*opaque{},
    CurrentSecurityDescriptor: ?*opaque{},
    NewSecurityDescriptor: ?*?*opaque{},
    ObjectType: ?*Guid,
    IsDirectoryObject: u8,
    GenericMapping: ?*GENERIC_MAPPING,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CopySid(
    nDestinationSidLength: u32,
    pDestinationSid: ?*opaque{},
    pSourceSid: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CreatePrivateObjectSecurity(
    ParentDescriptor: ?*opaque{},
    CreatorDescriptor: ?*opaque{},
    NewDescriptor: ?*?*opaque{},
    IsDirectoryObject: BOOL,
    Token: HANDLE,
    GenericMapping: ?*GENERIC_MAPPING,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CreatePrivateObjectSecurityEx(
    ParentDescriptor: ?*opaque{},
    CreatorDescriptor: ?*opaque{},
    NewDescriptor: ?*?*opaque{},
    ObjectType: ?*Guid,
    IsContainerObject: BOOL,
    AutoInheritFlags: u32,
    Token: HANDLE,
    GenericMapping: ?*GENERIC_MAPPING,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CreatePrivateObjectSecurityWithMultipleInheritance(
    ParentDescriptor: ?*opaque{},
    CreatorDescriptor: ?*opaque{},
    NewDescriptor: ?*?*opaque{},
    ObjectTypes: ?*?*Guid,
    GuidCount: u32,
    IsContainerObject: BOOL,
    AutoInheritFlags: u32,
    Token: HANDLE,
    GenericMapping: ?*GENERIC_MAPPING,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CreateRestrictedToken(
    ExistingTokenHandle: HANDLE,
    Flags: u32,
    DisableSidCount: u32,
    SidsToDisable: ?*SID_AND_ATTRIBUTES,
    DeletePrivilegeCount: u32,
    PrivilegesToDelete: ?*LUID_AND_ATTRIBUTES,
    RestrictedSidCount: u32,
    SidsToRestrict: ?*SID_AND_ATTRIBUTES,
    NewTokenHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CreateWellKnownSid(
    WellKnownSidType: WELL_KNOWN_SID_TYPE,
    DomainSid: ?*opaque{},
    pSid: ?*opaque{},
    cbSid: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn EqualDomainSid(
    pSid1: ?*opaque{},
    pSid2: ?*opaque{},
    pfEqual: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn DeleteAce(
    pAcl: ?*ACL,
    dwAceIndex: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn DestroyPrivateObjectSecurity(
    ObjectDescriptor: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn DuplicateToken(
    ExistingTokenHandle: HANDLE,
    ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
    DuplicateTokenHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn DuplicateTokenEx(
    hExistingToken: HANDLE,
    dwDesiredAccess: u32,
    lpTokenAttributes: ?*SECURITY_ATTRIBUTES,
    ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
    TokenType: TOKEN_TYPE,
    phNewToken: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn EqualPrefixSid(
    pSid1: ?*opaque{},
    pSid2: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn EqualSid(
    pSid1: ?*opaque{},
    pSid2: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn FindFirstFreeAce(
    pAcl: ?*ACL,
    pAce: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn FreeSid(
    pSid: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetAce(
    pAcl: ?*ACL,
    dwAceIndex: u32,
    pAce: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetAclInformation(
    pAcl: ?*ACL,
    pAclInformation: ?*opaque{},
    nAclInformationLength: u32,
    dwAclInformationClass: ACL_INFORMATION_CLASS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetFileSecurityW(
    lpFileName: ?*u16,
    RequestedInformation: u32,
    pSecurityDescriptor: ?*opaque{},
    nLength: u32,
    lpnLengthNeeded: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetKernelObjectSecurity(
    Handle: HANDLE,
    RequestedInformation: u32,
    pSecurityDescriptor: ?*opaque{},
    nLength: u32,
    lpnLengthNeeded: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetLengthSid(
    pSid: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetPrivateObjectSecurity(
    ObjectDescriptor: ?*opaque{},
    SecurityInformation: u32,
    ResultantDescriptor: ?*opaque{},
    DescriptorLength: u32,
    ReturnLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetSecurityDescriptorControl(
    pSecurityDescriptor: ?*opaque{},
    pControl: ?*u16,
    lpdwRevision: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetSecurityDescriptorDacl(
    pSecurityDescriptor: ?*opaque{},
    lpbDaclPresent: ?*i32,
    pDacl: ?*?*ACL,
    lpbDaclDefaulted: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetSecurityDescriptorGroup(
    pSecurityDescriptor: ?*opaque{},
    pGroup: ?*?*opaque{},
    lpbGroupDefaulted: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetSecurityDescriptorLength(
    pSecurityDescriptor: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetSecurityDescriptorOwner(
    pSecurityDescriptor: ?*opaque{},
    pOwner: ?*?*opaque{},
    lpbOwnerDefaulted: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetSecurityDescriptorRMControl(
    SecurityDescriptor: ?*opaque{},
    RMControl: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetSecurityDescriptorSacl(
    pSecurityDescriptor: ?*opaque{},
    lpbSaclPresent: ?*i32,
    pSacl: ?*?*ACL,
    lpbSaclDefaulted: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetSidIdentifierAuthority(
    pSid: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*SID_IDENTIFIER_AUTHORITY;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetSidLengthRequired(
    nSubAuthorityCount: u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetSidSubAuthority(
    pSid: ?*opaque{},
    nSubAuthority: u32,
) callconv(@import("std").os.windows.WINAPI) ?*u32;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetSidSubAuthorityCount(
    pSid: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetTokenInformation(
    TokenHandle: HANDLE,
    TokenInformationClass: TOKEN_INFORMATION_CLASS,
    TokenInformation: ?*opaque{},
    TokenInformationLength: u32,
    ReturnLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetWindowsAccountDomainSid(
    pSid: ?*opaque{},
    pDomainSid: ?*opaque{},
    cbDomainSid: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ImpersonateAnonymousToken(
    ThreadHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ImpersonateLoggedOnUser(
    hToken: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ImpersonateSelf(
    ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn InitializeAcl(
    pAcl: ?*ACL,
    nAclLength: u32,
    dwAclRevision: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn InitializeSecurityDescriptor(
    pSecurityDescriptor: ?*opaque{},
    dwRevision: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn InitializeSid(
    Sid: ?*opaque{},
    pIdentifierAuthority: ?*SID_IDENTIFIER_AUTHORITY,
    nSubAuthorityCount: u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn IsTokenRestricted(
    TokenHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn IsValidAcl(
    pAcl: ?*ACL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn IsValidSecurityDescriptor(
    pSecurityDescriptor: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn IsValidSid(
    pSid: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn IsWellKnownSid(
    pSid: ?*opaque{},
    WellKnownSidType: WELL_KNOWN_SID_TYPE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn MakeAbsoluteSD(
    pSelfRelativeSecurityDescriptor: ?*opaque{},
    pAbsoluteSecurityDescriptor: ?*opaque{},
    lpdwAbsoluteSecurityDescriptorSize: ?*u32,
    pDacl: ?*ACL,
    lpdwDaclSize: ?*u32,
    pSacl: ?*ACL,
    lpdwSaclSize: ?*u32,
    pOwner: ?*opaque{},
    lpdwOwnerSize: ?*u32,
    pPrimaryGroup: ?*opaque{},
    lpdwPrimaryGroupSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn MakeSelfRelativeSD(
    pAbsoluteSecurityDescriptor: ?*opaque{},
    pSelfRelativeSecurityDescriptor: ?*opaque{},
    lpdwBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn MapGenericMask(
    AccessMask: ?*u32,
    GenericMapping: ?*GENERIC_MAPPING,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn ObjectCloseAuditAlarmW(
    SubsystemName: ?*u16,
    HandleId: ?*opaque{},
    GenerateOnClose: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn ObjectDeleteAuditAlarmW(
    SubsystemName: ?*u16,
    HandleId: ?*opaque{},
    GenerateOnClose: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn ObjectOpenAuditAlarmW(
    SubsystemName: ?*u16,
    HandleId: ?*opaque{},
    ObjectTypeName: ?*u16,
    ObjectName: ?*u16,
    pSecurityDescriptor: ?*opaque{},
    ClientToken: HANDLE,
    DesiredAccess: u32,
    GrantedAccess: u32,
    Privileges: ?*PRIVILEGE_SET,
    ObjectCreation: BOOL,
    AccessGranted: BOOL,
    GenerateOnClose: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn ObjectPrivilegeAuditAlarmW(
    SubsystemName: ?*u16,
    HandleId: ?*opaque{},
    ClientToken: HANDLE,
    DesiredAccess: u32,
    Privileges: ?*PRIVILEGE_SET,
    AccessGranted: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn PrivilegeCheck(
    ClientToken: HANDLE,
    RequiredPrivileges: ?*PRIVILEGE_SET,
    pfResult: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn PrivilegedServiceAuditAlarmW(
    SubsystemName: ?*u16,
    ServiceName: ?*u16,
    ClientToken: HANDLE,
    Privileges: ?*PRIVILEGE_SET,
    AccessGranted: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn QuerySecurityAccessMask(
    SecurityInformation: u32,
    DesiredAccess: ?*u32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn RevertToSelf(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetAclInformation(
    pAcl: ?*ACL,
    pAclInformation: ?*opaque{},
    nAclInformationLength: u32,
    dwAclInformationClass: ACL_INFORMATION_CLASS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn SetFileSecurityW(
    lpFileName: ?*u16,
    SecurityInformation: u32,
    pSecurityDescriptor: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetKernelObjectSecurity(
    Handle: HANDLE,
    SecurityInformation: u32,
    SecurityDescriptor: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetPrivateObjectSecurity(
    SecurityInformation: u32,
    ModificationDescriptor: ?*opaque{},
    ObjectsSecurityDescriptor: ?*?*opaque{},
    GenericMapping: ?*GENERIC_MAPPING,
    Token: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetPrivateObjectSecurityEx(
    SecurityInformation: u32,
    ModificationDescriptor: ?*opaque{},
    ObjectsSecurityDescriptor: ?*?*opaque{},
    AutoInheritFlags: u32,
    GenericMapping: ?*GENERIC_MAPPING,
    Token: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn SetSecurityAccessMask(
    SecurityInformation: u32,
    DesiredAccess: ?*u32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetSecurityDescriptorControl(
    pSecurityDescriptor: ?*opaque{},
    ControlBitsOfInterest: u16,
    ControlBitsToSet: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetSecurityDescriptorDacl(
    pSecurityDescriptor: ?*opaque{},
    bDaclPresent: BOOL,
    pDacl: ?*ACL,
    bDaclDefaulted: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetSecurityDescriptorGroup(
    pSecurityDescriptor: ?*opaque{},
    pGroup: ?*opaque{},
    bGroupDefaulted: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetSecurityDescriptorOwner(
    pSecurityDescriptor: ?*opaque{},
    pOwner: ?*opaque{},
    bOwnerDefaulted: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn SetSecurityDescriptorRMControl(
    SecurityDescriptor: ?*opaque{},
    RMControl: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetSecurityDescriptorSacl(
    pSecurityDescriptor: ?*opaque{},
    bSaclPresent: BOOL,
    pSacl: ?*ACL,
    bSaclDefaulted: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetTokenInformation(
    TokenHandle: HANDLE,
    TokenInformationClass: TOKEN_INFORMATION_CLASS,
    TokenInformation: ?*opaque{},
    TokenInformationLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetCachedSigningLevel(
    SourceFiles: ?*?*opaque{},
    SourceFileCount: u32,
    Flags: u32,
    TargetFile: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetCachedSigningLevel(
    File: HANDLE,
    Flags: ?*u32,
    SigningLevel: ?*u32,
    Thumbprint: ?*u8,
    ThumbprintSize: ?*u32,
    ThumbprintAlgorithm: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "api-ms-win-security-base-l1-2-2" fn DeriveCapabilitySidsFromName(
    CapName: ?*u16,
    CapabilityGroupSids: ?*?*?*opaque{},
    CapabilityGroupSidCount: ?*u32,
    CapabilitySids: ?*?*?*opaque{},
    CapabilitySidCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetAppContainerNamedObjectPath(
    Token: HANDLE,
    AppContainerSid: ?*opaque{},
    ObjectPathLength: u32,
    ObjectPath: ?*u16,
    ReturnLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptAcquireContextA(
    phProv: ?*?*opaque{},
    szContainer: ?*i8,
    szProvider: ?*i8,
    dwProvType: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptAcquireContextW(
    phProv: ?*?*opaque{},
    szContainer: ?*u16,
    szProvider: ?*u16,
    dwProvType: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptReleaseContext(
    hProv: ?*opaque{},
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptGenKey(
    hProv: ?*opaque{},
    Algid: u32,
    dwFlags: u32,
    phKey: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptDeriveKey(
    hProv: ?*opaque{},
    Algid: u32,
    hBaseData: ?*opaque{},
    dwFlags: u32,
    phKey: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptDestroyKey(
    hKey: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptSetKeyParam(
    hKey: ?*opaque{},
    dwParam: u32,
    pbData: ?*u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptGetKeyParam(
    hKey: ?*opaque{},
    dwParam: u32,
    pbData: ?*u8,
    pdwDataLen: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptSetHashParam(
    hHash: ?*opaque{},
    dwParam: u32,
    pbData: ?*u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptGetHashParam(
    hHash: ?*opaque{},
    dwParam: u32,
    pbData: ?*u8,
    pdwDataLen: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptSetProvParam(
    hProv: ?*opaque{},
    dwParam: u32,
    pbData: ?*u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptGetProvParam(
    hProv: ?*opaque{},
    dwParam: u32,
    pbData: ?*u8,
    pdwDataLen: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptGenRandom(
    hProv: ?*opaque{},
    dwLen: u32,
    pbBuffer: ?*u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptGetUserKey(
    hProv: ?*opaque{},
    dwKeySpec: u32,
    phUserKey: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptExportKey(
    hKey: ?*opaque{},
    hExpKey: ?*opaque{},
    dwBlobType: u32,
    dwFlags: u32,
    pbData: ?*u8,
    pdwDataLen: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptImportKey(
    hProv: ?*opaque{},
    pbData: ?*u8,
    dwDataLen: u32,
    hPubKey: ?*opaque{},
    dwFlags: u32,
    phKey: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptEncrypt(
    hKey: ?*opaque{},
    hHash: ?*opaque{},
    Final: BOOL,
    dwFlags: u32,
    pbData: ?*u8,
    pdwDataLen: ?*u32,
    dwBufLen: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptDecrypt(
    hKey: ?*opaque{},
    hHash: ?*opaque{},
    Final: BOOL,
    dwFlags: u32,
    pbData: ?*u8,
    pdwDataLen: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptCreateHash(
    hProv: ?*opaque{},
    Algid: u32,
    hKey: ?*opaque{},
    dwFlags: u32,
    phHash: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptHashData(
    hHash: ?*opaque{},
    pbData: ?*u8,
    dwDataLen: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptHashSessionKey(
    hHash: ?*opaque{},
    hKey: ?*opaque{},
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptDestroyHash(
    hHash: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptSignHashA(
    hHash: ?*opaque{},
    dwKeySpec: u32,
    szDescription: ?*i8,
    dwFlags: u32,
    pbSignature: ?*u8,
    pdwSigLen: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptSignHashW(
    hHash: ?*opaque{},
    dwKeySpec: u32,
    szDescription: ?*u16,
    dwFlags: u32,
    pbSignature: ?*u8,
    pdwSigLen: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptVerifySignatureA(
    hHash: ?*opaque{},
    pbSignature: ?*u8,
    dwSigLen: u32,
    hPubKey: ?*opaque{},
    szDescription: ?*i8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptVerifySignatureW(
    hHash: ?*opaque{},
    pbSignature: ?*u8,
    dwSigLen: u32,
    hPubKey: ?*opaque{},
    szDescription: ?*u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptSetProviderA(
    pszProvName: ?*i8,
    dwProvType: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptSetProviderW(
    pszProvName: ?*u16,
    dwProvType: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptSetProviderExA(
    pszProvName: ?*i8,
    dwProvType: u32,
    pdwReserved: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptSetProviderExW(
    pszProvName: ?*u16,
    dwProvType: u32,
    pdwReserved: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptGetDefaultProviderA(
    dwProvType: u32,
    pdwReserved: ?*u32,
    dwFlags: u32,
    pszProvName: ?*i8,
    pcbProvName: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptGetDefaultProviderW(
    dwProvType: u32,
    pdwReserved: ?*u32,
    dwFlags: u32,
    pszProvName: ?*u16,
    pcbProvName: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptEnumProviderTypesA(
    dwIndex: u32,
    pdwReserved: ?*u32,
    dwFlags: u32,
    pdwProvType: ?*u32,
    szTypeName: ?*i8,
    pcbTypeName: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptEnumProviderTypesW(
    dwIndex: u32,
    pdwReserved: ?*u32,
    dwFlags: u32,
    pdwProvType: ?*u32,
    szTypeName: ?*u16,
    pcbTypeName: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptEnumProvidersA(
    dwIndex: u32,
    pdwReserved: ?*u32,
    dwFlags: u32,
    pdwProvType: ?*u32,
    szProvName: ?*i8,
    pcbProvName: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptEnumProvidersW(
    dwIndex: u32,
    pdwReserved: ?*u32,
    dwFlags: u32,
    pdwProvType: ?*u32,
    szProvName: ?*u16,
    pcbProvName: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptContextAddRef(
    hProv: ?*opaque{},
    pdwReserved: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptDuplicateKey(
    hKey: ?*opaque{},
    pdwReserved: ?*u32,
    dwFlags: u32,
    phKey: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CryptDuplicateHash(
    hHash: ?*opaque{},
    pdwReserved: ?*u32,
    dwFlags: u32,
    phHash: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptOpenAlgorithmProvider(
    phAlgorithm: ?*?*opaque{},
    pszAlgId: ?*u16,
    pszImplementation: ?*u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptEnumAlgorithms(
    dwAlgOperations: u32,
    pAlgCount: ?*u32,
    ppAlgList: ?*?*BCRYPT_ALGORITHM_IDENTIFIER,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptEnumProviders(
    pszAlgId: ?*u16,
    pImplCount: ?*u32,
    ppImplList: ?*?*BCRYPT_PROVIDER_NAME,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptGetProperty(
    hObject: ?*opaque{},
    pszProperty: ?*u16,
    pbOutput: ?*u8,
    cbOutput: u32,
    pcbResult: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptSetProperty(
    hObject: ?*opaque{},
    pszProperty: ?*u16,
    pbInput: ?*u8,
    cbInput: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptCloseAlgorithmProvider(
    hAlgorithm: ?*opaque{},
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptFreeBuffer(
    pvBuffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptGenerateSymmetricKey(
    hAlgorithm: ?*opaque{},
    phKey: ?*?*opaque{},
    pbKeyObject: ?*u8,
    cbKeyObject: u32,
    pbSecret: ?*u8,
    cbSecret: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptGenerateKeyPair(
    hAlgorithm: ?*opaque{},
    phKey: ?*?*opaque{},
    dwLength: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptEncrypt(
    hKey: ?*opaque{},
    pbInput: ?*u8,
    cbInput: u32,
    pPaddingInfo: ?*opaque{},
    pbIV: ?*u8,
    cbIV: u32,
    pbOutput: ?*u8,
    cbOutput: u32,
    pcbResult: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptDecrypt(
    hKey: ?*opaque{},
    pbInput: ?*u8,
    cbInput: u32,
    pPaddingInfo: ?*opaque{},
    pbIV: ?*u8,
    cbIV: u32,
    pbOutput: ?*u8,
    cbOutput: u32,
    pcbResult: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptExportKey(
    hKey: ?*opaque{},
    hExportKey: ?*opaque{},
    pszBlobType: ?*u16,
    pbOutput: ?*u8,
    cbOutput: u32,
    pcbResult: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptImportKey(
    hAlgorithm: ?*opaque{},
    hImportKey: ?*opaque{},
    pszBlobType: ?*u16,
    phKey: ?*?*opaque{},
    pbKeyObject: ?*u8,
    cbKeyObject: u32,
    pbInput: ?*u8,
    cbInput: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptImportKeyPair(
    hAlgorithm: ?*opaque{},
    hImportKey: ?*opaque{},
    pszBlobType: ?*u16,
    phKey: ?*?*opaque{},
    pbInput: ?*u8,
    cbInput: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptDuplicateKey(
    hKey: ?*opaque{},
    phNewKey: ?*?*opaque{},
    pbKeyObject: ?*u8,
    cbKeyObject: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptFinalizeKeyPair(
    hKey: ?*opaque{},
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptDestroyKey(
    hKey: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptDestroySecret(
    hSecret: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptSignHash(
    hKey: ?*opaque{},
    pPaddingInfo: ?*opaque{},
    pbInput: ?*u8,
    cbInput: u32,
    pbOutput: ?*u8,
    cbOutput: u32,
    pcbResult: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptVerifySignature(
    hKey: ?*opaque{},
    pPaddingInfo: ?*opaque{},
    pbHash: ?*u8,
    cbHash: u32,
    pbSignature: ?*u8,
    cbSignature: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptSecretAgreement(
    hPrivKey: ?*opaque{},
    hPubKey: ?*opaque{},
    phAgreedSecret: ?*?*opaque{},
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptDeriveKey(
    hSharedSecret: ?*opaque{},
    pwszKDF: ?*u16,
    pParameterList: ?*BCryptBufferDesc,
    pbDerivedKey: ?*u8,
    cbDerivedKey: u32,
    pcbResult: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptKeyDerivation(
    hKey: ?*opaque{},
    pParameterList: ?*BCryptBufferDesc,
    pbDerivedKey: ?*u8,
    cbDerivedKey: u32,
    pcbResult: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptCreateHash(
    hAlgorithm: ?*opaque{},
    phHash: ?*?*opaque{},
    pbHashObject: ?*u8,
    cbHashObject: u32,
    pbSecret: ?*u8,
    cbSecret: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptHashData(
    hHash: ?*opaque{},
    pbInput: ?*u8,
    cbInput: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptFinishHash(
    hHash: ?*opaque{},
    pbOutput: ?*u8,
    cbOutput: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptCreateMultiHash(
    hAlgorithm: ?*opaque{},
    phHash: ?*?*opaque{},
    nHashes: u32,
    pbHashObject: ?*u8,
    cbHashObject: u32,
    pbSecret: ?*u8,
    cbSecret: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptProcessMultiOperations(
    hObject: ?*opaque{},
    operationType: BCRYPT_MULTI_OPERATION_TYPE,
    pOperations: ?*opaque{},
    cbOperations: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptDuplicateHash(
    hHash: ?*opaque{},
    phNewHash: ?*?*opaque{},
    pbHashObject: ?*u8,
    cbHashObject: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptDestroyHash(
    hHash: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptHash(
    hAlgorithm: ?*opaque{},
    pbSecret: ?*u8,
    cbSecret: u32,
    pbInput: ?*u8,
    cbInput: u32,
    pbOutput: ?*u8,
    cbOutput: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptGenRandom(
    hAlgorithm: ?*opaque{},
    pbBuffer: ?*u8,
    cbBuffer: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptDeriveKeyCapi(
    hHash: ?*opaque{},
    hTargetAlg: ?*opaque{},
    pbDerivedKey: ?*u8,
    cbDerivedKey: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptDeriveKeyPBKDF2(
    hPrf: ?*opaque{},
    pbPassword: ?*u8,
    cbPassword: u32,
    pbSalt: ?*u8,
    cbSalt: u32,
    cIterations: u64,
    pbDerivedKey: ?*u8,
    cbDerivedKey: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptQueryProviderRegistration(
    pszProvider: ?*u16,
    dwMode: u32,
    dwInterface: u32,
    pcbBuffer: ?*u32,
    ppBuffer: ?*?*CRYPT_PROVIDER_REG,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptEnumRegisteredProviders(
    pcbBuffer: ?*u32,
    ppBuffer: ?*?*CRYPT_PROVIDERS,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptCreateContext(
    dwTable: u32,
    pszContext: ?*u16,
    pConfig: ?*CRYPT_CONTEXT_CONFIG,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptDeleteContext(
    dwTable: u32,
    pszContext: ?*u16,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptEnumContexts(
    dwTable: u32,
    pcbBuffer: ?*u32,
    ppBuffer: ?*?*CRYPT_CONTEXTS,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptConfigureContext(
    dwTable: u32,
    pszContext: ?*u16,
    pConfig: ?*CRYPT_CONTEXT_CONFIG,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptQueryContextConfiguration(
    dwTable: u32,
    pszContext: ?*u16,
    pcbBuffer: ?*u32,
    ppBuffer: ?*?*CRYPT_CONTEXT_CONFIG,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptAddContextFunction(
    dwTable: u32,
    pszContext: ?*u16,
    dwInterface: u32,
    pszFunction: ?*u16,
    dwPosition: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptRemoveContextFunction(
    dwTable: u32,
    pszContext: ?*u16,
    dwInterface: u32,
    pszFunction: ?*u16,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptEnumContextFunctions(
    dwTable: u32,
    pszContext: ?*u16,
    dwInterface: u32,
    pcbBuffer: ?*u32,
    ppBuffer: ?*?*CRYPT_CONTEXT_FUNCTIONS,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptConfigureContextFunction(
    dwTable: u32,
    pszContext: ?*u16,
    dwInterface: u32,
    pszFunction: ?*u16,
    pConfig: ?*CRYPT_CONTEXT_FUNCTION_CONFIG,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptQueryContextFunctionConfiguration(
    dwTable: u32,
    pszContext: ?*u16,
    dwInterface: u32,
    pszFunction: ?*u16,
    pcbBuffer: ?*u32,
    ppBuffer: ?*?*CRYPT_CONTEXT_FUNCTION_CONFIG,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptEnumContextFunctionProviders(
    dwTable: u32,
    pszContext: ?*u16,
    dwInterface: u32,
    pszFunction: ?*u16,
    pcbBuffer: ?*u32,
    ppBuffer: ?*?*CRYPT_CONTEXT_FUNCTION_PROVIDERS,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptSetContextFunctionProperty(
    dwTable: u32,
    pszContext: ?*u16,
    dwInterface: u32,
    pszFunction: ?*u16,
    pszProperty: ?*u16,
    cbValue: u32,
    pbValue: ?*u8,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptQueryContextFunctionProperty(
    dwTable: u32,
    pszContext: ?*u16,
    dwInterface: u32,
    pszFunction: ?*u16,
    pszProperty: ?*u16,
    pcbValue: ?*u32,
    ppbValue: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptRegisterConfigChangeNotify(
    phEvent: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptUnregisterConfigChangeNotify(
    hEvent: HANDLE,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptResolveProviders(
    pszContext: ?*u16,
    dwInterface: u32,
    pszFunction: ?*u16,
    pszProvider: ?*u16,
    dwMode: u32,
    dwFlags: u32,
    pcbBuffer: ?*u32,
    ppBuffer: ?*?*CRYPT_PROVIDER_REFS,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "bcrypt" fn BCryptGetFipsAlgorithmMode(
    pfEnabled: ?*u8,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptOpenStorageProvider(
    phProvider: ?*?*opaque{},
    pszProviderName: ?*u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptEnumAlgorithms(
    hProvider: ?*opaque{},
    dwAlgOperations: u32,
    pdwAlgCount: ?*u32,
    ppAlgList: ?*?*NCryptAlgorithmName,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptIsAlgSupported(
    hProvider: ?*opaque{},
    pszAlgId: ?*u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptEnumKeys(
    hProvider: ?*opaque{},
    pszScope: ?*u16,
    ppKeyName: ?*?*NCryptKeyName,
    ppEnumState: ?*?*opaque{},
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptEnumStorageProviders(
    pdwProviderCount: ?*u32,
    ppProviderList: ?*?*NCryptProviderName,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptFreeBuffer(
    pvInput: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptOpenKey(
    hProvider: ?*opaque{},
    phKey: ?*?*opaque{},
    pszKeyName: ?*u16,
    dwLegacyKeySpec: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptCreatePersistedKey(
    hProvider: ?*opaque{},
    phKey: ?*?*opaque{},
    pszAlgId: ?*u16,
    pszKeyName: ?*u16,
    dwLegacyKeySpec: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptGetProperty(
    hObject: ?*opaque{},
    pszProperty: ?*u16,
    pbOutput: ?*u8,
    cbOutput: u32,
    pcbResult: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptSetProperty(
    hObject: ?*opaque{},
    pszProperty: ?*u16,
    pbInput: ?*u8,
    cbInput: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptFinalizeKey(
    hKey: ?*opaque{},
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptEncrypt(
    hKey: ?*opaque{},
    pbInput: ?*u8,
    cbInput: u32,
    pPaddingInfo: ?*opaque{},
    pbOutput: ?*u8,
    cbOutput: u32,
    pcbResult: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptDecrypt(
    hKey: ?*opaque{},
    pbInput: ?*u8,
    cbInput: u32,
    pPaddingInfo: ?*opaque{},
    pbOutput: ?*u8,
    cbOutput: u32,
    pcbResult: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptImportKey(
    hProvider: ?*opaque{},
    hImportKey: ?*opaque{},
    pszBlobType: ?*u16,
    pParameterList: ?*BCryptBufferDesc,
    phKey: ?*?*opaque{},
    pbData: ?*u8,
    cbData: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptExportKey(
    hKey: ?*opaque{},
    hExportKey: ?*opaque{},
    pszBlobType: ?*u16,
    pParameterList: ?*BCryptBufferDesc,
    pbOutput: ?*u8,
    cbOutput: u32,
    pcbResult: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptSignHash(
    hKey: ?*opaque{},
    pPaddingInfo: ?*opaque{},
    pbHashValue: ?*u8,
    cbHashValue: u32,
    pbSignature: ?*u8,
    cbSignature: u32,
    pcbResult: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptVerifySignature(
    hKey: ?*opaque{},
    pPaddingInfo: ?*opaque{},
    pbHashValue: ?*u8,
    cbHashValue: u32,
    pbSignature: ?*u8,
    cbSignature: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptDeleteKey(
    hKey: ?*opaque{},
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptFreeObject(
    hObject: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptIsKeyHandle(
    hKey: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptTranslateHandle(
    phProvider: ?*?*opaque{},
    phKey: ?*?*opaque{},
    hLegacyProv: ?*opaque{},
    hLegacyKey: ?*opaque{},
    dwLegacyKeySpec: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptNotifyChangeKey(
    hProvider: ?*opaque{},
    phEvent: ?*HANDLE,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptSecretAgreement(
    hPrivKey: ?*opaque{},
    hPubKey: ?*opaque{},
    phAgreedSecret: ?*?*opaque{},
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptDeriveKey(
    hSharedSecret: ?*opaque{},
    pwszKDF: ?*u16,
    pParameterList: ?*BCryptBufferDesc,
    pbDerivedKey: ?*u8,
    cbDerivedKey: u32,
    pcbResult: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptKeyDerivation(
    hKey: ?*opaque{},
    pParameterList: ?*BCryptBufferDesc,
    pbDerivedKey: ?*u8,
    cbDerivedKey: u32,
    pcbResult: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptCreateClaim(
    hSubjectKey: ?*opaque{},
    hAuthorityKey: ?*opaque{},
    dwClaimType: u32,
    pParameterList: ?*BCryptBufferDesc,
    pbClaimBlob: ?*u8,
    cbClaimBlob: u32,
    pcbResult: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptVerifyClaim(
    hSubjectKey: ?*opaque{},
    hAuthorityKey: ?*opaque{},
    dwClaimType: u32,
    pParameterList: ?*BCryptBufferDesc,
    pbClaimBlob: ?*u8,
    cbClaimBlob: u32,
    pOutput: ?*BCryptBufferDesc,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptFormatObject(
    dwCertEncodingType: u32,
    dwFormatType: u32,
    dwFormatStrType: u32,
    pFormatStruct: ?*opaque{},
    lpszStructType: ?*i8,
    pbEncoded: ?*u8,
    cbEncoded: u32,
    pbFormat: ?*opaque{},
    pcbFormat: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptEncodeObjectEx(
    dwCertEncodingType: u32,
    lpszStructType: ?*i8,
    pvStructInfo: ?*opaque{},
    dwFlags: u32,
    pEncodePara: ?*CRYPT_ENCODE_PARA,
    pvEncoded: ?*opaque{},
    pcbEncoded: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptEncodeObject(
    dwCertEncodingType: u32,
    lpszStructType: ?*i8,
    pvStructInfo: ?*opaque{},
    pbEncoded: ?*u8,
    pcbEncoded: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptDecodeObjectEx(
    dwCertEncodingType: u32,
    lpszStructType: ?*i8,
    pbEncoded: ?*u8,
    cbEncoded: u32,
    dwFlags: u32,
    pDecodePara: ?*CRYPT_DECODE_PARA,
    pvStructInfo: ?*opaque{},
    pcbStructInfo: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptDecodeObject(
    dwCertEncodingType: u32,
    lpszStructType: ?*i8,
    pbEncoded: ?*u8,
    cbEncoded: u32,
    dwFlags: u32,
    pvStructInfo: ?*opaque{},
    pcbStructInfo: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptInstallOIDFunctionAddress(
    hModule: ?*opaque{},
    dwEncodingType: u32,
    pszFuncName: ?*i8,
    cFuncEntry: u32,
    rgFuncEntry: ?*CRYPT_OID_FUNC_ENTRY,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptInitOIDFunctionSet(
    pszFuncName: ?*i8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptGetOIDFunctionAddress(
    hFuncSet: ?*opaque{},
    dwEncodingType: u32,
    pszOID: ?*i8,
    dwFlags: u32,
    ppvFuncAddr: ?*?*opaque{},
    phFuncAddr: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptGetDefaultOIDDllList(
    hFuncSet: ?*opaque{},
    dwEncodingType: u32,
    pwszDllList: ?*u16,
    pcchDllList: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptGetDefaultOIDFunctionAddress(
    hFuncSet: ?*opaque{},
    dwEncodingType: u32,
    pwszDll: ?*u16,
    dwFlags: u32,
    ppvFuncAddr: ?*?*opaque{},
    phFuncAddr: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptFreeOIDFunctionAddress(
    hFuncAddr: ?*opaque{},
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptRegisterOIDFunction(
    dwEncodingType: u32,
    pszFuncName: ?*i8,
    pszOID: ?*i8,
    pwszDll: ?*u16,
    pszOverrideFuncName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptUnregisterOIDFunction(
    dwEncodingType: u32,
    pszFuncName: ?*i8,
    pszOID: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptRegisterDefaultOIDFunction(
    dwEncodingType: u32,
    pszFuncName: ?*i8,
    dwIndex: u32,
    pwszDll: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptUnregisterDefaultOIDFunction(
    dwEncodingType: u32,
    pszFuncName: ?*i8,
    pwszDll: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptSetOIDFunctionValue(
    dwEncodingType: u32,
    pszFuncName: ?*i8,
    pszOID: ?*i8,
    pwszValueName: ?*u16,
    dwValueType: u32,
    pbValueData: ?*u8,
    cbValueData: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptGetOIDFunctionValue(
    dwEncodingType: u32,
    pszFuncName: ?*i8,
    pszOID: ?*i8,
    pwszValueName: ?*u16,
    pdwValueType: ?*u32,
    pbValueData: ?*u8,
    pcbValueData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptEnumOIDFunction(
    dwEncodingType: u32,
    pszFuncName: ?*i8,
    pszOID: ?*i8,
    dwFlags: u32,
    pvArg: ?*opaque{},
    pfnEnumOIDFunc: PFN_CRYPT_ENUM_OID_FUNC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptFindOIDInfo(
    dwKeyType: u32,
    pvKey: ?*opaque{},
    dwGroupId: u32,
) callconv(@import("std").os.windows.WINAPI) ?*CRYPT_OID_INFO;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptRegisterOIDInfo(
    pInfo: ?*CRYPT_OID_INFO,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptUnregisterOIDInfo(
    pInfo: ?*CRYPT_OID_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptEnumOIDInfo(
    dwGroupId: u32,
    dwFlags: u32,
    pvArg: ?*opaque{},
    pfnEnumOIDInfo: PFN_CRYPT_ENUM_OID_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptFindLocalizedName(
    pwszCryptName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) ?*u16;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgOpenToEncode(
    dwMsgEncodingType: u32,
    dwFlags: u32,
    dwMsgType: u32,
    pvMsgEncodeInfo: ?*opaque{},
    pszInnerContentObjID: ?*i8,
    pStreamInfo: ?*CMSG_STREAM_INFO,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgCalculateEncodedLength(
    dwMsgEncodingType: u32,
    dwFlags: u32,
    dwMsgType: u32,
    pvMsgEncodeInfo: ?*opaque{},
    pszInnerContentObjID: ?*i8,
    cbData: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgOpenToDecode(
    dwMsgEncodingType: u32,
    dwFlags: u32,
    dwMsgType: u32,
    hCryptProv: ?*opaque{},
    pRecipientInfo: ?*CERT_INFO,
    pStreamInfo: ?*CMSG_STREAM_INFO,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgDuplicate(
    hCryptMsg: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgClose(
    hCryptMsg: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgUpdate(
    hCryptMsg: ?*opaque{},
    pbData: ?*u8,
    cbData: u32,
    fFinal: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgGetParam(
    hCryptMsg: ?*opaque{},
    dwParamType: u32,
    dwIndex: u32,
    pvData: ?*opaque{},
    pcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgControl(
    hCryptMsg: ?*opaque{},
    dwFlags: u32,
    dwCtrlType: u32,
    pvCtrlPara: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgVerifyCountersignatureEncoded(
    hCryptProv: ?*opaque{},
    dwEncodingType: u32,
    pbSignerInfo: ?*u8,
    cbSignerInfo: u32,
    pbSignerInfoCountersignature: ?*u8,
    cbSignerInfoCountersignature: u32,
    pciCountersigner: ?*CERT_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgVerifyCountersignatureEncodedEx(
    hCryptProv: ?*opaque{},
    dwEncodingType: u32,
    pbSignerInfo: ?*u8,
    cbSignerInfo: u32,
    pbSignerInfoCountersignature: ?*u8,
    cbSignerInfoCountersignature: u32,
    dwSignerType: u32,
    pvSigner: ?*opaque{},
    dwFlags: u32,
    pvExtra: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgCountersign(
    hCryptMsg: ?*opaque{},
    dwIndex: u32,
    cCountersigners: u32,
    rgCountersigners: ?*CMSG_SIGNER_ENCODE_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgCountersignEncoded(
    dwEncodingType: u32,
    pbSignerInfo: ?*u8,
    cbSignerInfo: u32,
    cCountersigners: u32,
    rgCountersigners: ?*CMSG_SIGNER_ENCODE_INFO,
    pbCountersignature: ?*u8,
    pcbCountersignature: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertOpenStore(
    lpszStoreProvider: ?*i8,
    dwEncodingType: u32,
    hCryptProv: ?*opaque{},
    dwFlags: u32,
    pvPara: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertDuplicateStore(
    hCertStore: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertSaveStore(
    hCertStore: ?*opaque{},
    dwEncodingType: u32,
    dwSaveAs: u32,
    dwSaveTo: u32,
    pvSaveToPara: ?*opaque{},
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertCloseStore(
    hCertStore: ?*opaque{},
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertGetSubjectCertificateFromStore(
    hCertStore: ?*opaque{},
    dwCertEncodingType: u32,
    pCertId: ?*CERT_INFO,
) callconv(@import("std").os.windows.WINAPI) ?*CERT_CONTEXT;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertEnumCertificatesInStore(
    hCertStore: ?*opaque{},
    pPrevCertContext: ?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) ?*CERT_CONTEXT;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertFindCertificateInStore(
    hCertStore: ?*opaque{},
    dwCertEncodingType: u32,
    dwFindFlags: u32,
    dwFindType: u32,
    pvFindPara: ?*opaque{},
    pPrevCertContext: ?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) ?*CERT_CONTEXT;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertGetIssuerCertificateFromStore(
    hCertStore: ?*opaque{},
    pSubjectContext: ?*CERT_CONTEXT,
    pPrevIssuerContext: ?*CERT_CONTEXT,
    pdwFlags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) ?*CERT_CONTEXT;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertVerifySubjectCertificateContext(
    pSubject: ?*CERT_CONTEXT,
    pIssuer: ?*CERT_CONTEXT,
    pdwFlags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertDuplicateCertificateContext(
    pCertContext: ?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) ?*CERT_CONTEXT;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertCreateCertificateContext(
    dwCertEncodingType: u32,
    pbCertEncoded: ?*u8,
    cbCertEncoded: u32,
) callconv(@import("std").os.windows.WINAPI) ?*CERT_CONTEXT;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertFreeCertificateContext(
    pCertContext: ?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertSetCertificateContextProperty(
    pCertContext: ?*CERT_CONTEXT,
    dwPropId: u32,
    dwFlags: u32,
    pvData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertGetCertificateContextProperty(
    pCertContext: ?*CERT_CONTEXT,
    dwPropId: u32,
    pvData: ?*opaque{},
    pcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertEnumCertificateContextProperties(
    pCertContext: ?*CERT_CONTEXT,
    dwPropId: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertCreateCTLEntryFromCertificateContextProperties(
    pCertContext: ?*CERT_CONTEXT,
    cOptAttr: u32,
    rgOptAttr: ?*CRYPT_ATTRIBUTE,
    dwFlags: u32,
    pvReserved: ?*opaque{},
    pCtlEntry: ?*CTL_ENTRY,
    pcbCtlEntry: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertSetCertificateContextPropertiesFromCTLEntry(
    pCertContext: ?*CERT_CONTEXT,
    pCtlEntry: ?*CTL_ENTRY,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertGetCRLFromStore(
    hCertStore: ?*opaque{},
    pIssuerContext: ?*CERT_CONTEXT,
    pPrevCrlContext: ?*CRL_CONTEXT,
    pdwFlags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) ?*CRL_CONTEXT;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertEnumCRLsInStore(
    hCertStore: ?*opaque{},
    pPrevCrlContext: ?*CRL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) ?*CRL_CONTEXT;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertFindCRLInStore(
    hCertStore: ?*opaque{},
    dwCertEncodingType: u32,
    dwFindFlags: u32,
    dwFindType: u32,
    pvFindPara: ?*opaque{},
    pPrevCrlContext: ?*CRL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) ?*CRL_CONTEXT;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertDuplicateCRLContext(
    pCrlContext: ?*CRL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) ?*CRL_CONTEXT;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertCreateCRLContext(
    dwCertEncodingType: u32,
    pbCrlEncoded: ?*u8,
    cbCrlEncoded: u32,
) callconv(@import("std").os.windows.WINAPI) ?*CRL_CONTEXT;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertFreeCRLContext(
    pCrlContext: ?*CRL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertSetCRLContextProperty(
    pCrlContext: ?*CRL_CONTEXT,
    dwPropId: u32,
    dwFlags: u32,
    pvData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertGetCRLContextProperty(
    pCrlContext: ?*CRL_CONTEXT,
    dwPropId: u32,
    pvData: ?*opaque{},
    pcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertEnumCRLContextProperties(
    pCrlContext: ?*CRL_CONTEXT,
    dwPropId: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertFindCertificateInCRL(
    pCert: ?*CERT_CONTEXT,
    pCrlContext: ?*CRL_CONTEXT,
    dwFlags: u32,
    pvReserved: ?*opaque{},
    ppCrlEntry: ?*?*CRL_ENTRY,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertIsValidCRLForCertificate(
    pCert: ?*CERT_CONTEXT,
    pCrl: ?*CRL_CONTEXT,
    dwFlags: u32,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertAddEncodedCertificateToStore(
    hCertStore: ?*opaque{},
    dwCertEncodingType: u32,
    pbCertEncoded: ?*u8,
    cbCertEncoded: u32,
    dwAddDisposition: u32,
    ppCertContext: ?*?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertAddCertificateContextToStore(
    hCertStore: ?*opaque{},
    pCertContext: ?*CERT_CONTEXT,
    dwAddDisposition: u32,
    ppStoreContext: ?*?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertAddSerializedElementToStore(
    hCertStore: ?*opaque{},
    pbElement: ?*u8,
    cbElement: u32,
    dwAddDisposition: u32,
    dwFlags: u32,
    dwContextTypeFlags: u32,
    pdwContextType: ?*u32,
    ppvContext: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertDeleteCertificateFromStore(
    pCertContext: ?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertAddEncodedCRLToStore(
    hCertStore: ?*opaque{},
    dwCertEncodingType: u32,
    pbCrlEncoded: ?*u8,
    cbCrlEncoded: u32,
    dwAddDisposition: u32,
    ppCrlContext: ?*?*CRL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertAddCRLContextToStore(
    hCertStore: ?*opaque{},
    pCrlContext: ?*CRL_CONTEXT,
    dwAddDisposition: u32,
    ppStoreContext: ?*?*CRL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertDeleteCRLFromStore(
    pCrlContext: ?*CRL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertSerializeCertificateStoreElement(
    pCertContext: ?*CERT_CONTEXT,
    dwFlags: u32,
    pbElement: ?*u8,
    pcbElement: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertSerializeCRLStoreElement(
    pCrlContext: ?*CRL_CONTEXT,
    dwFlags: u32,
    pbElement: ?*u8,
    pcbElement: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertDuplicateCTLContext(
    pCtlContext: ?*CTL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) ?*CTL_CONTEXT;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertCreateCTLContext(
    dwMsgAndCertEncodingType: u32,
    pbCtlEncoded: ?*u8,
    cbCtlEncoded: u32,
) callconv(@import("std").os.windows.WINAPI) ?*CTL_CONTEXT;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertFreeCTLContext(
    pCtlContext: ?*CTL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertSetCTLContextProperty(
    pCtlContext: ?*CTL_CONTEXT,
    dwPropId: u32,
    dwFlags: u32,
    pvData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertGetCTLContextProperty(
    pCtlContext: ?*CTL_CONTEXT,
    dwPropId: u32,
    pvData: ?*opaque{},
    pcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertEnumCTLContextProperties(
    pCtlContext: ?*CTL_CONTEXT,
    dwPropId: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertEnumCTLsInStore(
    hCertStore: ?*opaque{},
    pPrevCtlContext: ?*CTL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) ?*CTL_CONTEXT;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertFindSubjectInCTL(
    dwEncodingType: u32,
    dwSubjectType: u32,
    pvSubject: ?*opaque{},
    pCtlContext: ?*CTL_CONTEXT,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*CTL_ENTRY;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertFindCTLInStore(
    hCertStore: ?*opaque{},
    dwMsgAndCertEncodingType: u32,
    dwFindFlags: u32,
    dwFindType: u32,
    pvFindPara: ?*opaque{},
    pPrevCtlContext: ?*CTL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) ?*CTL_CONTEXT;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertAddEncodedCTLToStore(
    hCertStore: ?*opaque{},
    dwMsgAndCertEncodingType: u32,
    pbCtlEncoded: ?*u8,
    cbCtlEncoded: u32,
    dwAddDisposition: u32,
    ppCtlContext: ?*?*CTL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertAddCTLContextToStore(
    hCertStore: ?*opaque{},
    pCtlContext: ?*CTL_CONTEXT,
    dwAddDisposition: u32,
    ppStoreContext: ?*?*CTL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertSerializeCTLStoreElement(
    pCtlContext: ?*CTL_CONTEXT,
    dwFlags: u32,
    pbElement: ?*u8,
    pcbElement: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertDeleteCTLFromStore(
    pCtlContext: ?*CTL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertAddCertificateLinkToStore(
    hCertStore: ?*opaque{},
    pCertContext: ?*CERT_CONTEXT,
    dwAddDisposition: u32,
    ppStoreContext: ?*?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertAddCRLLinkToStore(
    hCertStore: ?*opaque{},
    pCrlContext: ?*CRL_CONTEXT,
    dwAddDisposition: u32,
    ppStoreContext: ?*?*CRL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertAddCTLLinkToStore(
    hCertStore: ?*opaque{},
    pCtlContext: ?*CTL_CONTEXT,
    dwAddDisposition: u32,
    ppStoreContext: ?*?*CTL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertAddStoreToCollection(
    hCollectionStore: ?*opaque{},
    hSiblingStore: ?*opaque{},
    dwUpdateFlags: u32,
    dwPriority: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertRemoveStoreFromCollection(
    hCollectionStore: ?*opaque{},
    hSiblingStore: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertControlStore(
    hCertStore: ?*opaque{},
    dwFlags: u32,
    dwCtrlType: u32,
    pvCtrlPara: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertSetStoreProperty(
    hCertStore: ?*opaque{},
    dwPropId: u32,
    dwFlags: u32,
    pvData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertGetStoreProperty(
    hCertStore: ?*opaque{},
    dwPropId: u32,
    pvData: ?*opaque{},
    pcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertCreateContext(
    dwContextType: u32,
    dwEncodingType: u32,
    pbEncoded: ?*u8,
    cbEncoded: u32,
    dwFlags: u32,
    pCreatePara: ?*CERT_CREATE_CONTEXT_PARA,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertRegisterSystemStore(
    pvSystemStore: ?*opaque{},
    dwFlags: u32,
    pStoreInfo: ?*CERT_SYSTEM_STORE_INFO,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertRegisterPhysicalStore(
    pvSystemStore: ?*opaque{},
    dwFlags: u32,
    pwszStoreName: ?*u16,
    pStoreInfo: ?*CERT_PHYSICAL_STORE_INFO,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertUnregisterSystemStore(
    pvSystemStore: ?*opaque{},
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertUnregisterPhysicalStore(
    pvSystemStore: ?*opaque{},
    dwFlags: u32,
    pwszStoreName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertEnumSystemStoreLocation(
    dwFlags: u32,
    pvArg: ?*opaque{},
    pfnEnum: PFN_CERT_ENUM_SYSTEM_STORE_LOCATION,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertEnumSystemStore(
    dwFlags: u32,
    pvSystemStoreLocationPara: ?*opaque{},
    pvArg: ?*opaque{},
    pfnEnum: PFN_CERT_ENUM_SYSTEM_STORE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertEnumPhysicalStore(
    pvSystemStore: ?*opaque{},
    dwFlags: u32,
    pvArg: ?*opaque{},
    pfnEnum: PFN_CERT_ENUM_PHYSICAL_STORE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertGetEnhancedKeyUsage(
    pCertContext: ?*CERT_CONTEXT,
    dwFlags: u32,
    pUsage: ?*CTL_USAGE,
    pcbUsage: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertSetEnhancedKeyUsage(
    pCertContext: ?*CERT_CONTEXT,
    pUsage: ?*CTL_USAGE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertAddEnhancedKeyUsageIdentifier(
    pCertContext: ?*CERT_CONTEXT,
    pszUsageIdentifier: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertRemoveEnhancedKeyUsageIdentifier(
    pCertContext: ?*CERT_CONTEXT,
    pszUsageIdentifier: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertGetValidUsages(
    cCerts: u32,
    rghCerts: ?*?*CERT_CONTEXT,
    cNumOIDs: ?*i32,
    rghOIDs: ?*?*i8,
    pcbOIDs: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgGetAndVerifySigner(
    hCryptMsg: ?*opaque{},
    cSignerStore: u32,
    rghSignerStore: ?*?*opaque{},
    dwFlags: u32,
    ppSigner: ?*?*CERT_CONTEXT,
    pdwSignerIndex: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgSignCTL(
    dwMsgEncodingType: u32,
    pbCtlContent: ?*u8,
    cbCtlContent: u32,
    pSignInfo: ?*CMSG_SIGNED_ENCODE_INFO,
    dwFlags: u32,
    pbEncoded: ?*u8,
    pcbEncoded: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptMsgEncodeAndSignCTL(
    dwMsgEncodingType: u32,
    pCtlInfo: ?*CTL_INFO,
    pSignInfo: ?*CMSG_SIGNED_ENCODE_INFO,
    dwFlags: u32,
    pbEncoded: ?*u8,
    pcbEncoded: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertFindSubjectInSortedCTL(
    pSubjectIdentifier: ?*CRYPTOAPI_BLOB,
    pCtlContext: ?*CTL_CONTEXT,
    dwFlags: u32,
    pvReserved: ?*opaque{},
    pEncodedAttributes: ?*CRYPTOAPI_BLOB,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertEnumSubjectInSortedCTL(
    pCtlContext: ?*CTL_CONTEXT,
    ppvNextSubject: ?*?*opaque{},
    pSubjectIdentifier: ?*CRYPTOAPI_BLOB,
    pEncodedAttributes: ?*CRYPTOAPI_BLOB,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertVerifyCTLUsage(
    dwEncodingType: u32,
    dwSubjectType: u32,
    pvSubject: ?*opaque{},
    pSubjectUsage: ?*CTL_USAGE,
    dwFlags: u32,
    pVerifyUsagePara: ?*CTL_VERIFY_USAGE_PARA,
    pVerifyUsageStatus: ?*CTL_VERIFY_USAGE_STATUS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertVerifyRevocation(
    dwEncodingType: u32,
    dwRevType: u32,
    cContext: u32,
    rgpvContext: ?*?*opaque{},
    dwFlags: u32,
    pRevPara: ?*CERT_REVOCATION_PARA,
    pRevStatus: ?*CERT_REVOCATION_STATUS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertCompareIntegerBlob(
    pInt1: ?*CRYPTOAPI_BLOB,
    pInt2: ?*CRYPTOAPI_BLOB,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertCompareCertificate(
    dwCertEncodingType: u32,
    pCertId1: ?*CERT_INFO,
    pCertId2: ?*CERT_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertCompareCertificateName(
    dwCertEncodingType: u32,
    pCertName1: ?*CRYPTOAPI_BLOB,
    pCertName2: ?*CRYPTOAPI_BLOB,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertIsRDNAttrsInCertificateName(
    dwCertEncodingType: u32,
    dwFlags: u32,
    pCertName: ?*CRYPTOAPI_BLOB,
    pRDN: ?*CERT_RDN,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertComparePublicKeyInfo(
    dwCertEncodingType: u32,
    pPublicKey1: ?*CERT_PUBLIC_KEY_INFO,
    pPublicKey2: ?*CERT_PUBLIC_KEY_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertGetPublicKeyLength(
    dwCertEncodingType: u32,
    pPublicKey: ?*CERT_PUBLIC_KEY_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptVerifyCertificateSignature(
    hCryptProv: ?*opaque{},
    dwCertEncodingType: u32,
    pbEncoded: ?*u8,
    cbEncoded: u32,
    pPublicKey: ?*CERT_PUBLIC_KEY_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptVerifyCertificateSignatureEx(
    hCryptProv: ?*opaque{},
    dwCertEncodingType: u32,
    dwSubjectType: u32,
    pvSubject: ?*opaque{},
    dwIssuerType: u32,
    pvIssuer: ?*opaque{},
    dwFlags: u32,
    pvExtra: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertIsStrongHashToSign(
    pStrongSignPara: ?*CERT_STRONG_SIGN_PARA,
    pwszCNGHashAlgid: ?*u16,
    pSigningCert: ?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptHashToBeSigned(
    hCryptProv: ?*opaque{},
    dwCertEncodingType: u32,
    pbEncoded: ?*u8,
    cbEncoded: u32,
    pbComputedHash: ?*u8,
    pcbComputedHash: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptHashCertificate(
    hCryptProv: ?*opaque{},
    Algid: u32,
    dwFlags: u32,
    pbEncoded: ?*u8,
    cbEncoded: u32,
    pbComputedHash: ?*u8,
    pcbComputedHash: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptHashCertificate2(
    pwszCNGHashAlgid: ?*u16,
    dwFlags: u32,
    pvReserved: ?*opaque{},
    pbEncoded: ?*u8,
    cbEncoded: u32,
    pbComputedHash: ?*u8,
    pcbComputedHash: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSignCertificate(
    hCryptProvOrNCryptKey: ?*opaque{},
    dwKeySpec: u32,
    dwCertEncodingType: u32,
    pbEncodedToBeSigned: ?*u8,
    cbEncodedToBeSigned: u32,
    pSignatureAlgorithm: ?*CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: ?*opaque{},
    pbSignature: ?*u8,
    pcbSignature: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSignAndEncodeCertificate(
    hCryptProvOrNCryptKey: ?*opaque{},
    dwKeySpec: u32,
    dwCertEncodingType: u32,
    lpszStructType: ?*i8,
    pvStructInfo: ?*opaque{},
    pSignatureAlgorithm: ?*CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: ?*opaque{},
    pbEncoded: ?*u8,
    pcbEncoded: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertVerifyTimeValidity(
    pTimeToVerify: ?*FILETIME,
    pCertInfo: ?*CERT_INFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertVerifyCRLTimeValidity(
    pTimeToVerify: ?*FILETIME,
    pCrlInfo: ?*CRL_INFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertVerifyValidityNesting(
    pSubjectInfo: ?*CERT_INFO,
    pIssuerInfo: ?*CERT_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertVerifyCRLRevocation(
    dwCertEncodingType: u32,
    pCertId: ?*CERT_INFO,
    cCrlInfo: u32,
    rgpCrlInfo: ?*?*CRL_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertAlgIdToOID(
    dwAlgId: u32,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertOIDToAlgId(
    pszObjId: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertFindExtension(
    pszObjId: ?*i8,
    cExtensions: u32,
    rgExtensions: ?*CERT_EXTENSION,
) callconv(@import("std").os.windows.WINAPI) ?*CERT_EXTENSION;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertFindAttribute(
    pszObjId: ?*i8,
    cAttr: u32,
    rgAttr: ?*CRYPT_ATTRIBUTE,
) callconv(@import("std").os.windows.WINAPI) ?*CRYPT_ATTRIBUTE;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertFindRDNAttr(
    pszObjId: ?*i8,
    pName: ?*CERT_NAME_INFO,
) callconv(@import("std").os.windows.WINAPI) ?*CERT_RDN_ATTR;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertGetIntendedKeyUsage(
    dwCertEncodingType: u32,
    pCertInfo: ?*CERT_INFO,
    pbKeyUsage: ?*u8,
    cbKeyUsage: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptInstallDefaultContext(
    hCryptProv: ?*opaque{},
    dwDefaultType: u32,
    pvDefaultPara: ?*opaque{},
    dwFlags: u32,
    pvReserved: ?*opaque{},
    phDefaultContext: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptUninstallDefaultContext(
    hDefaultContext: ?*opaque{},
    dwFlags: u32,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptExportPublicKeyInfo(
    hCryptProvOrNCryptKey: ?*opaque{},
    dwKeySpec: u32,
    dwCertEncodingType: u32,
    pInfo: ?*CERT_PUBLIC_KEY_INFO,
    pcbInfo: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptExportPublicKeyInfoEx(
    hCryptProvOrNCryptKey: ?*opaque{},
    dwKeySpec: u32,
    dwCertEncodingType: u32,
    pszPublicKeyObjId: ?*i8,
    dwFlags: u32,
    pvAuxInfo: ?*opaque{},
    pInfo: ?*CERT_PUBLIC_KEY_INFO,
    pcbInfo: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptExportPublicKeyInfoFromBCryptKeyHandle(
    hBCryptKey: ?*opaque{},
    dwCertEncodingType: u32,
    pszPublicKeyObjId: ?*i8,
    dwFlags: u32,
    pvAuxInfo: ?*opaque{},
    pInfo: ?*CERT_PUBLIC_KEY_INFO,
    pcbInfo: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptImportPublicKeyInfo(
    hCryptProv: ?*opaque{},
    dwCertEncodingType: u32,
    pInfo: ?*CERT_PUBLIC_KEY_INFO,
    phKey: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptImportPublicKeyInfoEx(
    hCryptProv: ?*opaque{},
    dwCertEncodingType: u32,
    pInfo: ?*CERT_PUBLIC_KEY_INFO,
    aiKeyAlg: u32,
    dwFlags: u32,
    pvAuxInfo: ?*opaque{},
    phKey: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptImportPublicKeyInfoEx2(
    dwCertEncodingType: u32,
    pInfo: ?*CERT_PUBLIC_KEY_INFO,
    dwFlags: u32,
    pvAuxInfo: ?*opaque{},
    phKey: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptAcquireCertificatePrivateKey(
    pCert: ?*CERT_CONTEXT,
    dwFlags: u32,
    pvParameters: ?*opaque{},
    phCryptProvOrNCryptKey: ?*?*opaque{},
    pdwKeySpec: ?*u32,
    pfCallerFreeProvOrNCryptKey: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptFindCertificateKeyProvInfo(
    pCert: ?*CERT_CONTEXT,
    dwFlags: u32,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptImportPKCS8(
    sPrivateKeyAndParams: CRYPT_PKCS8_IMPORT_PARAMS,
    dwFlags: u32,
    phCryptProv: ?*?*opaque{},
    pvAuxInfo: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptExportPKCS8(
    hCryptProv: ?*opaque{},
    dwKeySpec: u32,
    pszPrivateKeyObjId: ?*i8,
    dwFlags: u32,
    pvAuxInfo: ?*opaque{},
    pbPrivateKeyBlob: ?*u8,
    pcbPrivateKeyBlob: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptHashPublicKeyInfo(
    hCryptProv: ?*opaque{},
    Algid: u32,
    dwFlags: u32,
    dwCertEncodingType: u32,
    pInfo: ?*CERT_PUBLIC_KEY_INFO,
    pbComputedHash: ?*u8,
    pcbComputedHash: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertRDNValueToStrA(
    dwValueType: u32,
    pValue: ?*CRYPTOAPI_BLOB,
    psz: ?*i8,
    csz: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertRDNValueToStrW(
    dwValueType: u32,
    pValue: ?*CRYPTOAPI_BLOB,
    psz: ?*u16,
    csz: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertNameToStrA(
    dwCertEncodingType: u32,
    pName: ?*CRYPTOAPI_BLOB,
    dwStrType: u32,
    psz: ?*i8,
    csz: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertNameToStrW(
    dwCertEncodingType: u32,
    pName: ?*CRYPTOAPI_BLOB,
    dwStrType: u32,
    psz: ?*u16,
    csz: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertStrToNameA(
    dwCertEncodingType: u32,
    pszX500: ?*i8,
    dwStrType: u32,
    pvReserved: ?*opaque{},
    pbEncoded: ?*u8,
    pcbEncoded: ?*u32,
    ppszError: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertStrToNameW(
    dwCertEncodingType: u32,
    pszX500: ?*u16,
    dwStrType: u32,
    pvReserved: ?*opaque{},
    pbEncoded: ?*u8,
    pcbEncoded: ?*u32,
    ppszError: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertGetNameStringA(
    pCertContext: ?*CERT_CONTEXT,
    dwType: u32,
    dwFlags: u32,
    pvTypePara: ?*opaque{},
    pszNameString: ?*i8,
    cchNameString: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertGetNameStringW(
    pCertContext: ?*CERT_CONTEXT,
    dwType: u32,
    dwFlags: u32,
    pvTypePara: ?*opaque{},
    pszNameString: ?*u16,
    cchNameString: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSignMessage(
    pSignPara: ?*CRYPT_SIGN_MESSAGE_PARA,
    fDetachedSignature: BOOL,
    cToBeSigned: u32,
    rgpbToBeSigned: ?*?*u8,
    rgcbToBeSigned: ?*u32,
    pbSignedBlob: ?*u8,
    pcbSignedBlob: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptVerifyMessageSignature(
    pVerifyPara: ?*CRYPT_VERIFY_MESSAGE_PARA,
    dwSignerIndex: u32,
    pbSignedBlob: ?*u8,
    cbSignedBlob: u32,
    pbDecoded: ?*u8,
    pcbDecoded: ?*u32,
    ppSignerCert: ?*?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptGetMessageSignerCount(
    dwMsgEncodingType: u32,
    pbSignedBlob: ?*u8,
    cbSignedBlob: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptGetMessageCertificates(
    dwMsgAndCertEncodingType: u32,
    hCryptProv: ?*opaque{},
    dwFlags: u32,
    pbSignedBlob: ?*u8,
    cbSignedBlob: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptVerifyDetachedMessageSignature(
    pVerifyPara: ?*CRYPT_VERIFY_MESSAGE_PARA,
    dwSignerIndex: u32,
    pbDetachedSignBlob: ?*u8,
    cbDetachedSignBlob: u32,
    cToBeSigned: u32,
    rgpbToBeSigned: ?*?*u8,
    rgcbToBeSigned: ?*u32,
    ppSignerCert: ?*?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptEncryptMessage(
    pEncryptPara: ?*CRYPT_ENCRYPT_MESSAGE_PARA,
    cRecipientCert: u32,
    rgpRecipientCert: ?*?*CERT_CONTEXT,
    pbToBeEncrypted: ?*u8,
    cbToBeEncrypted: u32,
    pbEncryptedBlob: ?*u8,
    pcbEncryptedBlob: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptDecryptMessage(
    pDecryptPara: ?*CRYPT_DECRYPT_MESSAGE_PARA,
    pbEncryptedBlob: ?*u8,
    cbEncryptedBlob: u32,
    pbDecrypted: ?*u8,
    pcbDecrypted: ?*u32,
    ppXchgCert: ?*?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSignAndEncryptMessage(
    pSignPara: ?*CRYPT_SIGN_MESSAGE_PARA,
    pEncryptPara: ?*CRYPT_ENCRYPT_MESSAGE_PARA,
    cRecipientCert: u32,
    rgpRecipientCert: ?*?*CERT_CONTEXT,
    pbToBeSignedAndEncrypted: ?*u8,
    cbToBeSignedAndEncrypted: u32,
    pbSignedAndEncryptedBlob: ?*u8,
    pcbSignedAndEncryptedBlob: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptDecryptAndVerifyMessageSignature(
    pDecryptPara: ?*CRYPT_DECRYPT_MESSAGE_PARA,
    pVerifyPara: ?*CRYPT_VERIFY_MESSAGE_PARA,
    dwSignerIndex: u32,
    pbEncryptedBlob: ?*u8,
    cbEncryptedBlob: u32,
    pbDecrypted: ?*u8,
    pcbDecrypted: ?*u32,
    ppXchgCert: ?*?*CERT_CONTEXT,
    ppSignerCert: ?*?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptDecodeMessage(
    dwMsgTypeFlags: u32,
    pDecryptPara: ?*CRYPT_DECRYPT_MESSAGE_PARA,
    pVerifyPara: ?*CRYPT_VERIFY_MESSAGE_PARA,
    dwSignerIndex: u32,
    pbEncodedBlob: ?*u8,
    cbEncodedBlob: u32,
    dwPrevInnerContentType: u32,
    pdwMsgType: ?*u32,
    pdwInnerContentType: ?*u32,
    pbDecoded: ?*u8,
    pcbDecoded: ?*u32,
    ppXchgCert: ?*?*CERT_CONTEXT,
    ppSignerCert: ?*?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptHashMessage(
    pHashPara: ?*CRYPT_HASH_MESSAGE_PARA,
    fDetachedHash: BOOL,
    cToBeHashed: u32,
    rgpbToBeHashed: ?*?*u8,
    rgcbToBeHashed: ?*u32,
    pbHashedBlob: ?*u8,
    pcbHashedBlob: ?*u32,
    pbComputedHash: ?*u8,
    pcbComputedHash: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptVerifyMessageHash(
    pHashPara: ?*CRYPT_HASH_MESSAGE_PARA,
    pbHashedBlob: ?*u8,
    cbHashedBlob: u32,
    pbToBeHashed: ?*u8,
    pcbToBeHashed: ?*u32,
    pbComputedHash: ?*u8,
    pcbComputedHash: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptVerifyDetachedMessageHash(
    pHashPara: ?*CRYPT_HASH_MESSAGE_PARA,
    pbDetachedHashBlob: ?*u8,
    cbDetachedHashBlob: u32,
    cToBeHashed: u32,
    rgpbToBeHashed: ?*?*u8,
    rgcbToBeHashed: ?*u32,
    pbComputedHash: ?*u8,
    pcbComputedHash: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSignMessageWithKey(
    pSignPara: ?*CRYPT_KEY_SIGN_MESSAGE_PARA,
    pbToBeSigned: ?*u8,
    cbToBeSigned: u32,
    pbSignedBlob: ?*u8,
    pcbSignedBlob: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptVerifyMessageSignatureWithKey(
    pVerifyPara: ?*CRYPT_KEY_VERIFY_MESSAGE_PARA,
    pPublicKeyInfo: ?*CERT_PUBLIC_KEY_INFO,
    pbSignedBlob: ?*u8,
    cbSignedBlob: u32,
    pbDecoded: ?*u8,
    pcbDecoded: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertOpenSystemStoreA(
    hProv: ?*opaque{},
    szSubsystemProtocol: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertOpenSystemStoreW(
    hProv: ?*opaque{},
    szSubsystemProtocol: ?*u16,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertAddEncodedCertificateToSystemStoreA(
    szCertStoreName: ?*i8,
    pbCertEncoded: ?*u8,
    cbCertEncoded: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertAddEncodedCertificateToSystemStoreW(
    szCertStoreName: ?*u16,
    pbCertEncoded: ?*u8,
    cbCertEncoded: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn FindCertsByIssuer(
    pCertChains: ?*CERT_CHAIN,
    pcbCertChains: ?*u32,
    pcCertChains: ?*u32,
    pbEncodedIssuerName: ?*u8,
    cbEncodedIssuerName: u32,
    pwszPurpose: ?*u16,
    dwKeySpec: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptQueryObject(
    dwObjectType: u32,
    pvObject: ?*opaque{},
    dwExpectedContentTypeFlags: u32,
    dwExpectedFormatTypeFlags: u32,
    dwFlags: u32,
    pdwMsgAndCertEncodingType: ?*u32,
    pdwContentType: ?*u32,
    pdwFormatType: ?*u32,
    phCertStore: ?*?*opaque{},
    phMsg: ?*?*opaque{},
    ppvContext: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptMemAlloc(
    cbSize: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptMemRealloc(
    pv: ?*opaque{},
    cbSize: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptMemFree(
    pv: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptCreateAsyncHandle(
    dwFlags: u32,
    phAsync: ?*HCRYPTASYNC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptSetAsyncParam(
    hAsync: HCRYPTASYNC,
    pszParamOid: ?*i8,
    pvParam: ?*opaque{},
    pfnFree: PFN_CRYPT_ASYNC_PARAM_FREE_FUNC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptGetAsyncParam(
    hAsync: HCRYPTASYNC,
    pszParamOid: ?*i8,
    ppvParam: ?*?*opaque{},
    ppfnFree: ?*PFN_CRYPT_ASYNC_PARAM_FREE_FUNC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptCloseAsyncHandle(
    hAsync: HCRYPTASYNC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTNET" fn CryptRetrieveObjectByUrlA(
    pszUrl: ?*i8,
    pszObjectOid: ?*i8,
    dwRetrievalFlags: u32,
    dwTimeout: u32,
    ppvObject: ?*?*opaque{},
    hAsyncRetrieve: HCRYPTASYNC,
    pCredentials: ?*CRYPT_CREDENTIALS,
    pvVerify: ?*opaque{},
    pAuxInfo: ?*CRYPT_RETRIEVE_AUX_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTNET" fn CryptRetrieveObjectByUrlW(
    pszUrl: ?*u16,
    pszObjectOid: ?*i8,
    dwRetrievalFlags: u32,
    dwTimeout: u32,
    ppvObject: ?*?*opaque{},
    hAsyncRetrieve: HCRYPTASYNC,
    pCredentials: ?*CRYPT_CREDENTIALS,
    pvVerify: ?*opaque{},
    pAuxInfo: ?*CRYPT_RETRIEVE_AUX_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTNET" fn CryptInstallCancelRetrieval(
    pfnCancel: PFN_CRYPT_CANCEL_RETRIEVAL,
    pvArg: ?*opaque{},
    dwFlags: u32,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTNET" fn CryptUninstallCancelRetrieval(
    dwFlags: u32,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPTNET" fn CryptGetObjectUrl(
    pszUrlOid: ?*i8,
    pvPara: ?*opaque{},
    dwFlags: u32,
    pUrlArray: ?*CRYPT_URL_ARRAY,
    pcbUrlArray: ?*u32,
    pUrlInfo: ?*CRYPT_URL_INFO,
    pcbUrlInfo: ?*u32,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertCreateSelfSignCertificate(
    hCryptProvOrNCryptKey: ?*opaque{},
    pSubjectIssuerBlob: ?*CRYPTOAPI_BLOB,
    dwFlags: u32,
    pKeyProvInfo: ?*CRYPT_KEY_PROV_INFO,
    pSignatureAlgorithm: ?*CRYPT_ALGORITHM_IDENTIFIER,
    pStartTime: ?*SYSTEMTIME,
    pEndTime: ?*SYSTEMTIME,
    pExtensions: ?*CERT_EXTENSIONS,
) callconv(@import("std").os.windows.WINAPI) ?*CERT_CONTEXT;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptGetKeyIdentifierProperty(
    pKeyIdentifier: ?*CRYPTOAPI_BLOB,
    dwPropId: u32,
    dwFlags: u32,
    pwszComputerName: ?*u16,
    pvReserved: ?*opaque{},
    pvData: ?*opaque{},
    pcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSetKeyIdentifierProperty(
    pKeyIdentifier: ?*CRYPTOAPI_BLOB,
    dwPropId: u32,
    dwFlags: u32,
    pwszComputerName: ?*u16,
    pvReserved: ?*opaque{},
    pvData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptEnumKeyIdentifierProperties(
    pKeyIdentifier: ?*CRYPTOAPI_BLOB,
    dwPropId: u32,
    dwFlags: u32,
    pwszComputerName: ?*u16,
    pvReserved: ?*opaque{},
    pvArg: ?*opaque{},
    pfnEnum: PFN_CRYPT_ENUM_KEYID_PROP,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptCreateKeyIdentifierFromCSP(
    dwCertEncodingType: u32,
    pszPubKeyOID: ?*i8,
    pPubKeyStruc: ?*PUBLICKEYSTRUC,
    cbPubKeyStruc: u32,
    dwFlags: u32,
    pvReserved: ?*opaque{},
    pbHash: ?*u8,
    pcbHash: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertCreateCertificateChainEngine(
    pConfig: ?*CERT_CHAIN_ENGINE_CONFIG,
    phChainEngine: ?*HCERTCHAINENGINE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertFreeCertificateChainEngine(
    hChainEngine: HCERTCHAINENGINE,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertResyncCertificateChainEngine(
    hChainEngine: HCERTCHAINENGINE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertGetCertificateChain(
    hChainEngine: HCERTCHAINENGINE,
    pCertContext: ?*CERT_CONTEXT,
    pTime: ?*FILETIME,
    hAdditionalStore: ?*opaque{},
    pChainPara: ?*CERT_CHAIN_PARA,
    dwFlags: u32,
    pvReserved: ?*opaque{},
    ppChainContext: ?*?*CERT_CHAIN_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertFreeCertificateChain(
    pChainContext: ?*CERT_CHAIN_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertDuplicateCertificateChain(
    pChainContext: ?*CERT_CHAIN_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) ?*CERT_CHAIN_CONTEXT;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertFindChainInStore(
    hCertStore: ?*opaque{},
    dwCertEncodingType: u32,
    dwFindFlags: u32,
    dwFindType: u32,
    pvFindPara: ?*opaque{},
    pPrevChainContext: ?*CERT_CHAIN_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) ?*CERT_CHAIN_CONTEXT;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertVerifyCertificateChainPolicy(
    pszPolicyOID: ?*i8,
    pChainContext: ?*CERT_CHAIN_CONTEXT,
    pPolicyPara: ?*CERT_CHAIN_POLICY_PARA,
    pPolicyStatus: ?*CERT_CHAIN_POLICY_STATUS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptStringToBinaryA(
    pszString: ?*i8,
    cchString: u32,
    dwFlags: u32,
    pbBinary: ?*u8,
    pcbBinary: ?*u32,
    pdwSkip: ?*u32,
    pdwFlags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptStringToBinaryW(
    pszString: ?*u16,
    cchString: u32,
    dwFlags: u32,
    pbBinary: ?*u8,
    pcbBinary: ?*u32,
    pdwSkip: ?*u32,
    pdwFlags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptBinaryToStringA(
    pbBinary: ?*u8,
    cbBinary: u32,
    dwFlags: u32,
    pszString: ?*i8,
    pcchString: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptBinaryToStringW(
    pbBinary: ?*u8,
    cbBinary: u32,
    dwFlags: u32,
    pszString: ?*u16,
    pcchString: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn PFXImportCertStore(
    pPFX: ?*CRYPTOAPI_BLOB,
    szPassword: ?*u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn PFXIsPFXBlob(
    pPFX: ?*CRYPTOAPI_BLOB,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn PFXVerifyPassword(
    pPFX: ?*CRYPTOAPI_BLOB,
    szPassword: ?*u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn PFXExportCertStoreEx(
    hStore: ?*opaque{},
    pPFX: ?*CRYPTOAPI_BLOB,
    szPassword: ?*u16,
    pvPara: ?*opaque{},
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn PFXExportCertStore(
    hStore: ?*opaque{},
    pPFX: ?*CRYPTOAPI_BLOB,
    szPassword: ?*u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertOpenServerOcspResponse(
    pChainContext: ?*CERT_CHAIN_CONTEXT,
    dwFlags: u32,
    pOpenPara: ?*CERT_SERVER_OCSP_RESPONSE_OPEN_PARA,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertAddRefServerOcspResponse(
    hServerOcspResponse: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertCloseServerOcspResponse(
    hServerOcspResponse: ?*opaque{},
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertGetServerOcspResponseContext(
    hServerOcspResponse: ?*opaque{},
    dwFlags: u32,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*CERT_SERVER_OCSP_RESPONSE_CONTEXT;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertAddRefServerOcspResponseContext(
    pServerOcspResponseContext: ?*CERT_SERVER_OCSP_RESPONSE_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertFreeServerOcspResponseContext(
    pServerOcspResponseContext: ?*CERT_SERVER_OCSP_RESPONSE_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertRetrieveLogoOrBiometricInfo(
    pCertContext: ?*CERT_CONTEXT,
    lpszLogoOrBiometricType: ?*i8,
    dwRetrievalFlags: u32,
    dwTimeout: u32,
    dwFlags: u32,
    pvReserved: ?*opaque{},
    ppbData: ?*?*u8,
    pcbData: ?*u32,
    ppwszMimeType: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CertSelectCertificateChains(
    pSelectionContext: ?*Guid,
    dwFlags: u32,
    pChainParameters: ?*CERT_SELECT_CHAIN_PARA,
    cCriteria: u32,
    rgpCriteria: ?*CERT_SELECT_CRITERIA,
    hStore: ?*opaque{},
    pcSelection: ?*u32,
    pprgpSelection: ?*?*?*CERT_CHAIN_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertFreeCertificateChainList(
    prgpSelection: ?*?*CERT_CHAIN_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptRetrieveTimeStamp(
    wszUrl: ?*u16,
    dwRetrievalFlags: u32,
    dwTimeout: u32,
    pszHashId: ?*i8,
    pPara: ?*CRYPT_TIMESTAMP_PARA,
    pbData: ?*u8,
    cbData: u32,
    ppTsContext: ?*?*CRYPT_TIMESTAMP_CONTEXT,
    ppTsSigner: ?*?*CERT_CONTEXT,
    phStore: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptVerifyTimeStampSignature(
    pbTSContentInfo: ?*u8,
    cbTSContentInfo: u32,
    pbData: ?*u8,
    cbData: u32,
    hAdditionalStore: ?*opaque{},
    ppTsContext: ?*?*CRYPT_TIMESTAMP_CONTEXT,
    ppTsSigner: ?*?*CERT_CONTEXT,
    phStore: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CertIsWeakHash(
    dwHashUseType: u32,
    pwszCNGHashAlgid: ?*u16,
    dwChainFlags: u32,
    pSignerChainContext: ?*CERT_CHAIN_CONTEXT,
    pTimeStamp: ?*FILETIME,
    pwszFileName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptProtectData(
    pDataIn: ?*CRYPTOAPI_BLOB,
    szDataDescr: ?*u16,
    pOptionalEntropy: ?*CRYPTOAPI_BLOB,
    pvReserved: ?*opaque{},
    pPromptStruct: ?*CRYPTPROTECT_PROMPTSTRUCT,
    dwFlags: u32,
    pDataOut: ?*CRYPTOAPI_BLOB,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptUnprotectData(
    pDataIn: ?*CRYPTOAPI_BLOB,
    ppszDataDescr: ?*?*u16,
    pOptionalEntropy: ?*CRYPTOAPI_BLOB,
    pvReserved: ?*opaque{},
    pPromptStruct: ?*CRYPTPROTECT_PROMPTSTRUCT,
    dwFlags: u32,
    pDataOut: ?*CRYPTOAPI_BLOB,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptUpdateProtectedState(
    pOldSid: ?*opaque{},
    pwszOldPassword: ?*u16,
    dwFlags: u32,
    pdwSuccessCount: ?*u32,
    pdwFailureCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptProtectMemory(
    pDataIn: ?*opaque{},
    cbDataIn: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptUnprotectMemory(
    pDataIn: ?*opaque{},
    cbDataIn: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardEstablishContext(
    dwScope: u32,
    pvReserved1: ?*opaque{},
    pvReserved2: ?*opaque{},
    phContext: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardReleaseContext(
    hContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardIsValidContext(
    hContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardListReaderGroupsA(
    hContext: ?*opaque{},
    mszGroups: ?*i8,
    pcchGroups: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardListReaderGroupsW(
    hContext: ?*opaque{},
    mszGroups: ?*u16,
    pcchGroups: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardListReadersA(
    hContext: ?*opaque{},
    mszGroups: ?*i8,
    mszReaders: ?*i8,
    pcchReaders: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardListReadersW(
    hContext: ?*opaque{},
    mszGroups: ?*u16,
    mszReaders: ?*u16,
    pcchReaders: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardListCardsA(
    hContext: ?*opaque{},
    pbAtr: ?*u8,
    rgquidInterfaces: ?*Guid,
    cguidInterfaceCount: u32,
    mszCards: ?*i8,
    pcchCards: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardListCardsW(
    hContext: ?*opaque{},
    pbAtr: ?*u8,
    rgquidInterfaces: ?*Guid,
    cguidInterfaceCount: u32,
    mszCards: ?*u16,
    pcchCards: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardListInterfacesA(
    hContext: ?*opaque{},
    szCard: ?*i8,
    pguidInterfaces: ?*Guid,
    pcguidInterfaces: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardListInterfacesW(
    hContext: ?*opaque{},
    szCard: ?*u16,
    pguidInterfaces: ?*Guid,
    pcguidInterfaces: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardGetProviderIdA(
    hContext: ?*opaque{},
    szCard: ?*i8,
    pguidProviderId: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardGetProviderIdW(
    hContext: ?*opaque{},
    szCard: ?*u16,
    pguidProviderId: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardGetCardTypeProviderNameA(
    hContext: ?*opaque{},
    szCardName: ?*i8,
    dwProviderId: u32,
    szProvider: ?*i8,
    pcchProvider: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardGetCardTypeProviderNameW(
    hContext: ?*opaque{},
    szCardName: ?*u16,
    dwProviderId: u32,
    szProvider: ?*u16,
    pcchProvider: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardIntroduceReaderGroupA(
    hContext: ?*opaque{},
    szGroupName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardIntroduceReaderGroupW(
    hContext: ?*opaque{},
    szGroupName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardForgetReaderGroupA(
    hContext: ?*opaque{},
    szGroupName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardForgetReaderGroupW(
    hContext: ?*opaque{},
    szGroupName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardIntroduceReaderA(
    hContext: ?*opaque{},
    szReaderName: ?*i8,
    szDeviceName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardIntroduceReaderW(
    hContext: ?*opaque{},
    szReaderName: ?*u16,
    szDeviceName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardForgetReaderA(
    hContext: ?*opaque{},
    szReaderName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardForgetReaderW(
    hContext: ?*opaque{},
    szReaderName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardAddReaderToGroupA(
    hContext: ?*opaque{},
    szReaderName: ?*i8,
    szGroupName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardAddReaderToGroupW(
    hContext: ?*opaque{},
    szReaderName: ?*u16,
    szGroupName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardRemoveReaderFromGroupA(
    hContext: ?*opaque{},
    szReaderName: ?*i8,
    szGroupName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardRemoveReaderFromGroupW(
    hContext: ?*opaque{},
    szReaderName: ?*u16,
    szGroupName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardIntroduceCardTypeA(
    hContext: ?*opaque{},
    szCardName: ?*i8,
    pguidPrimaryProvider: ?*Guid,
    rgguidInterfaces: ?*Guid,
    dwInterfaceCount: u32,
    pbAtr: ?*u8,
    pbAtrMask: ?*u8,
    cbAtrLen: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardIntroduceCardTypeW(
    hContext: ?*opaque{},
    szCardName: ?*u16,
    pguidPrimaryProvider: ?*Guid,
    rgguidInterfaces: ?*Guid,
    dwInterfaceCount: u32,
    pbAtr: ?*u8,
    pbAtrMask: ?*u8,
    cbAtrLen: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardSetCardTypeProviderNameA(
    hContext: ?*opaque{},
    szCardName: ?*i8,
    dwProviderId: u32,
    szProvider: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardSetCardTypeProviderNameW(
    hContext: ?*opaque{},
    szCardName: ?*u16,
    dwProviderId: u32,
    szProvider: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardForgetCardTypeA(
    hContext: ?*opaque{},
    szCardName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardForgetCardTypeW(
    hContext: ?*opaque{},
    szCardName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardFreeMemory(
    hContext: ?*opaque{},
    pvMem: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "WinSCard" fn SCardAccessStartedEvent(
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardReleaseStartedEvent(
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardLocateCardsA(
    hContext: ?*opaque{},
    mszCards: ?*i8,
    rgReaderStates: ?*SCARD_READERSTATEA,
    cReaders: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardLocateCardsW(
    hContext: ?*opaque{},
    mszCards: ?*u16,
    rgReaderStates: ?*SCARD_READERSTATEW,
    cReaders: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardLocateCardsByATRA(
    hContext: ?*opaque{},
    rgAtrMasks: ?*SCARD_ATRMASK,
    cAtrs: u32,
    rgReaderStates: ?*SCARD_READERSTATEA,
    cReaders: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardLocateCardsByATRW(
    hContext: ?*opaque{},
    rgAtrMasks: ?*SCARD_ATRMASK,
    cAtrs: u32,
    rgReaderStates: ?*SCARD_READERSTATEW,
    cReaders: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardGetStatusChangeA(
    hContext: ?*opaque{},
    dwTimeout: u32,
    rgReaderStates: ?*SCARD_READERSTATEA,
    cReaders: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardGetStatusChangeW(
    hContext: ?*opaque{},
    dwTimeout: u32,
    rgReaderStates: ?*SCARD_READERSTATEW,
    cReaders: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardCancel(
    hContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardConnectA(
    hContext: ?*opaque{},
    szReader: ?*i8,
    dwShareMode: u32,
    dwPreferredProtocols: u32,
    phCard: ?*?*opaque{},
    pdwActiveProtocol: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardConnectW(
    hContext: ?*opaque{},
    szReader: ?*u16,
    dwShareMode: u32,
    dwPreferredProtocols: u32,
    phCard: ?*?*opaque{},
    pdwActiveProtocol: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardReconnect(
    hCard: ?*opaque{},
    dwShareMode: u32,
    dwPreferredProtocols: u32,
    dwInitialization: u32,
    pdwActiveProtocol: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardDisconnect(
    hCard: ?*opaque{},
    dwDisposition: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardBeginTransaction(
    hCard: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardEndTransaction(
    hCard: ?*opaque{},
    dwDisposition: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardState(
    hCard: ?*opaque{},
    pdwState: ?*u32,
    pdwProtocol: ?*u32,
    pbAtr: ?*u8,
    pcbAtrLen: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardStatusA(
    hCard: ?*opaque{},
    mszReaderNames: ?*i8,
    pcchReaderLen: ?*u32,
    pdwState: ?*u32,
    pdwProtocol: ?*u32,
    pbAtr: ?*u8,
    pcbAtrLen: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardStatusW(
    hCard: ?*opaque{},
    mszReaderNames: ?*u16,
    pcchReaderLen: ?*u32,
    pdwState: ?*u32,
    pdwProtocol: ?*u32,
    pbAtr: ?*u8,
    pcbAtrLen: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardTransmit(
    hCard: ?*opaque{},
    pioSendPci: ?*SCARD_IO_REQUEST,
    pbSendBuffer: ?*u8,
    cbSendLength: u32,
    pioRecvPci: ?*SCARD_IO_REQUEST,
    pbRecvBuffer: ?*u8,
    pcbRecvLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardGetTransmitCount(
    hCard: ?*opaque{},
    pcTransmitCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardControl(
    hCard: ?*opaque{},
    dwControlCode: u32,
    lpInBuffer: ?*opaque{},
    cbInBufferSize: u32,
    lpOutBuffer: ?*opaque{},
    cbOutBufferSize: u32,
    lpBytesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardGetAttrib(
    hCard: ?*opaque{},
    dwAttrId: u32,
    pbAttr: ?*u8,
    pcbAttrLen: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardSetAttrib(
    hCard: ?*opaque{},
    dwAttrId: u32,
    pbAttr: ?*u8,
    cbAttrLen: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SCARDDLG" fn SCardUIDlgSelectCardA(
    param0: ?*OPENCARDNAME_EXA,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SCARDDLG" fn SCardUIDlgSelectCardW(
    param0: ?*OPENCARDNAME_EXW,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SCARDDLG" fn GetOpenCardNameA(
    param0: ?*OPENCARDNAMEA,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SCARDDLG" fn GetOpenCardNameW(
    param0: ?*OPENCARDNAMEW,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SCARDDLG" fn SCardDlgExtendedError(
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardReadCacheA(
    hContext: ?*opaque{},
    CardIdentifier: ?*Guid,
    FreshnessCounter: u32,
    LookupName: ?*i8,
    Data: ?*u8,
    DataLen: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardReadCacheW(
    hContext: ?*opaque{},
    CardIdentifier: ?*Guid,
    FreshnessCounter: u32,
    LookupName: ?*u16,
    Data: ?*u8,
    DataLen: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardWriteCacheA(
    hContext: ?*opaque{},
    CardIdentifier: ?*Guid,
    FreshnessCounter: u32,
    LookupName: ?*i8,
    Data: ?*u8,
    DataLen: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardWriteCacheW(
    hContext: ?*opaque{},
    CardIdentifier: ?*Guid,
    FreshnessCounter: u32,
    LookupName: ?*u16,
    Data: ?*u8,
    DataLen: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardGetReaderIconA(
    hContext: ?*opaque{},
    szReaderName: ?*i8,
    pbIcon: ?*u8,
    pcbIcon: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardGetReaderIconW(
    hContext: ?*opaque{},
    szReaderName: ?*u16,
    pbIcon: ?*u8,
    pcbIcon: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardGetDeviceTypeIdA(
    hContext: ?*opaque{},
    szReaderName: ?*i8,
    pdwDeviceTypeId: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardGetDeviceTypeIdW(
    hContext: ?*opaque{},
    szReaderName: ?*u16,
    pdwDeviceTypeId: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardGetReaderDeviceInstanceIdA(
    hContext: ?*opaque{},
    szReaderName: ?*i8,
    szDeviceInstanceId: ?*i8,
    pcchDeviceInstanceId: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardGetReaderDeviceInstanceIdW(
    hContext: ?*opaque{},
    szReaderName: ?*u16,
    szDeviceInstanceId: ?*u16,
    pcchDeviceInstanceId: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardListReadersWithDeviceInstanceIdA(
    hContext: ?*opaque{},
    szDeviceInstanceId: ?*i8,
    mszReaders: ?*i8,
    pcchReaders: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardListReadersWithDeviceInstanceIdW(
    hContext: ?*opaque{},
    szDeviceInstanceId: ?*u16,
    mszReaders: ?*u16,
    pcchReaders: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WinSCard" fn SCardAudit(
    hContext: ?*opaque{},
    dwEvent: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ChangeServiceConfig2A(
    hService: ?*SC_HANDLE__,
    dwInfoLevel: u32,
    lpInfo: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ChangeServiceConfig2W(
    hService: ?*SC_HANDLE__,
    dwInfoLevel: u32,
    lpInfo: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CloseServiceHandle(
    hSCObject: ?*SC_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ControlService(
    hService: ?*SC_HANDLE__,
    dwControl: u32,
    lpServiceStatus: ?*SERVICE_STATUS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn DeleteService(
    hService: ?*SC_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn EnumDependentServicesA(
    hService: ?*SC_HANDLE__,
    dwServiceState: u32,
    lpServices: ?*ENUM_SERVICE_STATUSA,
    cbBufSize: u32,
    pcbBytesNeeded: ?*u32,
    lpServicesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn EnumDependentServicesW(
    hService: ?*SC_HANDLE__,
    dwServiceState: u32,
    lpServices: ?*ENUM_SERVICE_STATUSW,
    cbBufSize: u32,
    pcbBytesNeeded: ?*u32,
    lpServicesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn EnumServicesStatusA(
    hSCManager: ?*SC_HANDLE__,
    dwServiceType: u32,
    dwServiceState: u32,
    lpServices: ?*ENUM_SERVICE_STATUSA,
    cbBufSize: u32,
    pcbBytesNeeded: ?*u32,
    lpServicesReturned: ?*u32,
    lpResumeHandle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn EnumServicesStatusW(
    hSCManager: ?*SC_HANDLE__,
    dwServiceType: u32,
    dwServiceState: u32,
    lpServices: ?*ENUM_SERVICE_STATUSW,
    cbBufSize: u32,
    pcbBytesNeeded: ?*u32,
    lpServicesReturned: ?*u32,
    lpResumeHandle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn EnumServicesStatusExA(
    hSCManager: ?*SC_HANDLE__,
    InfoLevel: SC_ENUM_TYPE,
    dwServiceType: u32,
    dwServiceState: u32,
    lpServices: ?*u8,
    cbBufSize: u32,
    pcbBytesNeeded: ?*u32,
    lpServicesReturned: ?*u32,
    lpResumeHandle: ?*u32,
    pszGroupName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn EnumServicesStatusExW(
    hSCManager: ?*SC_HANDLE__,
    InfoLevel: SC_ENUM_TYPE,
    dwServiceType: u32,
    dwServiceState: u32,
    lpServices: ?*u8,
    cbBufSize: u32,
    pcbBytesNeeded: ?*u32,
    lpServicesReturned: ?*u32,
    lpResumeHandle: ?*u32,
    pszGroupName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetServiceKeyNameA(
    hSCManager: ?*SC_HANDLE__,
    lpDisplayName: ?*i8,
    lpServiceName: ?*i8,
    lpcchBuffer: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetServiceKeyNameW(
    hSCManager: ?*SC_HANDLE__,
    lpDisplayName: ?*u16,
    lpServiceName: ?*u16,
    lpcchBuffer: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetServiceDisplayNameA(
    hSCManager: ?*SC_HANDLE__,
    lpServiceName: ?*i8,
    lpDisplayName: ?*i8,
    lpcchBuffer: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetServiceDisplayNameW(
    hSCManager: ?*SC_HANDLE__,
    lpServiceName: ?*u16,
    lpDisplayName: ?*u16,
    lpcchBuffer: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LockServiceDatabase(
    hSCManager: ?*SC_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn NotifyBootConfigStatus(
    BootAcceptable: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn OpenSCManagerA(
    lpMachineName: ?*i8,
    lpDatabaseName: ?*i8,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) ?*SC_HANDLE__;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn OpenSCManagerW(
    lpMachineName: ?*u16,
    lpDatabaseName: ?*u16,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) ?*SC_HANDLE__;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn OpenServiceA(
    hSCManager: ?*SC_HANDLE__,
    lpServiceName: ?*i8,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) ?*SC_HANDLE__;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn OpenServiceW(
    hSCManager: ?*SC_HANDLE__,
    lpServiceName: ?*u16,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) ?*SC_HANDLE__;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn QueryServiceConfigA(
    hService: ?*SC_HANDLE__,
    lpServiceConfig: ?*QUERY_SERVICE_CONFIGA,
    cbBufSize: u32,
    pcbBytesNeeded: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn QueryServiceConfigW(
    hService: ?*SC_HANDLE__,
    lpServiceConfig: ?*QUERY_SERVICE_CONFIGW,
    cbBufSize: u32,
    pcbBytesNeeded: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn QueryServiceConfig2A(
    hService: ?*SC_HANDLE__,
    dwInfoLevel: u32,
    lpBuffer: ?*u8,
    cbBufSize: u32,
    pcbBytesNeeded: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn QueryServiceConfig2W(
    hService: ?*SC_HANDLE__,
    dwInfoLevel: u32,
    lpBuffer: ?*u8,
    cbBufSize: u32,
    pcbBytesNeeded: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn QueryServiceLockStatusA(
    hSCManager: ?*SC_HANDLE__,
    lpLockStatus: ?*QUERY_SERVICE_LOCK_STATUSA,
    cbBufSize: u32,
    pcbBytesNeeded: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn QueryServiceLockStatusW(
    hSCManager: ?*SC_HANDLE__,
    lpLockStatus: ?*QUERY_SERVICE_LOCK_STATUSW,
    cbBufSize: u32,
    pcbBytesNeeded: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn QueryServiceObjectSecurity(
    hService: ?*SC_HANDLE__,
    dwSecurityInformation: u32,
    lpSecurityDescriptor: ?*opaque{},
    cbBufSize: u32,
    pcbBytesNeeded: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn QueryServiceStatus(
    hService: ?*SC_HANDLE__,
    lpServiceStatus: ?*SERVICE_STATUS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn QueryServiceStatusEx(
    hService: ?*SC_HANDLE__,
    InfoLevel: SC_STATUS_TYPE,
    lpBuffer: ?*u8,
    cbBufSize: u32,
    pcbBytesNeeded: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn RegisterServiceCtrlHandlerA(
    lpServiceName: ?*i8,
    lpHandlerProc: LPHANDLER_FUNCTION,
) callconv(@import("std").os.windows.WINAPI) ?*SERVICE_STATUS_HANDLE__;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn RegisterServiceCtrlHandlerW(
    lpServiceName: ?*u16,
    lpHandlerProc: LPHANDLER_FUNCTION,
) callconv(@import("std").os.windows.WINAPI) ?*SERVICE_STATUS_HANDLE__;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn RegisterServiceCtrlHandlerExA(
    lpServiceName: ?*i8,
    lpHandlerProc: LPHANDLER_FUNCTION_EX,
    lpContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*SERVICE_STATUS_HANDLE__;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn RegisterServiceCtrlHandlerExW(
    lpServiceName: ?*u16,
    lpHandlerProc: LPHANDLER_FUNCTION_EX,
    lpContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*SERVICE_STATUS_HANDLE__;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetServiceObjectSecurity(
    hService: ?*SC_HANDLE__,
    dwSecurityInformation: u32,
    lpSecurityDescriptor: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetServiceStatus(
    hServiceStatus: ?*SERVICE_STATUS_HANDLE__,
    lpServiceStatus: ?*SERVICE_STATUS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn StartServiceCtrlDispatcherA(
    lpServiceStartTable: ?*SERVICE_TABLE_ENTRYA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn StartServiceCtrlDispatcherW(
    lpServiceStartTable: ?*SERVICE_TABLE_ENTRYW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn StartServiceA(
    hService: ?*SC_HANDLE__,
    dwNumServiceArgs: u32,
    lpServiceArgVectors: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn StartServiceW(
    hService: ?*SC_HANDLE__,
    dwNumServiceArgs: u32,
    lpServiceArgVectors: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn UnlockServiceDatabase(
    ScLock: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn NotifyServiceStatusChangeA(
    hService: ?*SC_HANDLE__,
    dwNotifyMask: u32,
    pNotifyBuffer: ?*SERVICE_NOTIFY_2A,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn NotifyServiceStatusChangeW(
    hService: ?*SC_HANDLE__,
    dwNotifyMask: u32,
    pNotifyBuffer: ?*SERVICE_NOTIFY_2W,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ControlServiceExA(
    hService: ?*SC_HANDLE__,
    dwControl: u32,
    dwInfoLevel: u32,
    pControlParams: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ControlServiceExW(
    hService: ?*SC_HANDLE__,
    dwControl: u32,
    dwInfoLevel: u32,
    pControlParams: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn QueryServiceDynamicInformation(
    hServiceStatus: ?*SERVICE_STATUS_HANDLE__,
    dwInfoLevel: u32,
    ppDynamicInfo: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn WaitServiceState(
    hService: ?*SC_HANDLE__,
    dwNotify: u32,
    dwTimeout: u32,
    hCancelEvent: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-service-core-l1-1-3" fn GetServiceRegistryStateKey(
    ServiceStatusHandle: ?*SERVICE_STATUS_HANDLE__,
    StateType: SERVICE_REGISTRY_STATE_TYPE,
    AccessMask: u32,
    ServiceStateKey: ?*HKEY,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-service-core-l1-1-4" fn GetServiceDirectory(
    hServiceStatus: ?*SERVICE_STATUS_HANDLE__,
    eDirectoryType: SERVICE_DIRECTORY_TYPE,
    lpPathBuffer: ?*u16,
    cchPathBufferLength: u32,
    lpcchRequiredBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn LsaRegisterLogonProcess(
    LogonProcessName: ?*STRING,
    LsaHandle: ?*LsaHandle,
    SecurityMode: ?*u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn LsaLogonUser(
    LsaHandle: HANDLE,
    OriginName: ?*STRING,
    LogonType: SECURITY_LOGON_TYPE,
    AuthenticationPackage: u32,
    AuthenticationInformation: ?*opaque{},
    AuthenticationInformationLength: u32,
    LocalGroups: ?*TOKEN_GROUPS,
    SourceContext: ?*TOKEN_SOURCE,
    ProfileBuffer: ?*?*opaque{},
    ProfileBufferLength: ?*u32,
    LogonId: ?*LUID,
    Token: ?*?*opaque{},
    Quotas: ?*QUOTA_LIMITS,
    SubStatus: ?*i32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn LsaLookupAuthenticationPackage(
    LsaHandle: HANDLE,
    PackageName: ?*STRING,
    AuthenticationPackage: ?*u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn LsaFreeReturnBuffer(
    Buffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn LsaCallAuthenticationPackage(
    LsaHandle: HANDLE,
    AuthenticationPackage: u32,
    ProtocolSubmitBuffer: ?*opaque{},
    SubmitBufferLength: u32,
    ProtocolReturnBuffer: ?*?*opaque{},
    ReturnBufferLength: ?*u32,
    ProtocolStatus: ?*i32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn LsaDeregisterLogonProcess(
    LsaHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn LsaConnectUntrusted(
    LsaHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaFreeMemory(
    Buffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaClose(
    ObjectHandle: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn LsaEnumerateLogonSessions(
    LogonSessionCount: ?*u32,
    LogonSessionList: ?*?*LUID,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn LsaGetLogonSessionData(
    LogonId: ?*LUID,
    ppLogonSessionData: ?*?*SECURITY_LOGON_SESSION_DATA,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaOpenPolicy(
    SystemName: ?*UNICODE_STRING,
    ObjectAttributes: ?*OBJECT_ATTRIBUTES,
    DesiredAccess: u32,
    PolicyHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaSetCAPs(
    CAPDNs: ?*UNICODE_STRING,
    CAPDNCount: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaGetAppliedCAPIDs(
    SystemName: ?*UNICODE_STRING,
    CAPIDs: ?*?*?*opaque{},
    CAPIDCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaQueryCAPs(
    CAPIDs: ?*?*opaque{},
    CAPIDCount: u32,
    CAPs: ?*?*CENTRAL_ACCESS_POLICY,
    CAPCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaQueryInformationPolicy(
    PolicyHandle: ?*opaque{},
    InformationClass: POLICY_INFORMATION_CLASS,
    Buffer: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaSetInformationPolicy(
    PolicyHandle: ?*opaque{},
    InformationClass: POLICY_INFORMATION_CLASS,
    Buffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaQueryDomainInformationPolicy(
    PolicyHandle: ?*opaque{},
    InformationClass: POLICY_DOMAIN_INFORMATION_CLASS,
    Buffer: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaSetDomainInformationPolicy(
    PolicyHandle: ?*opaque{},
    InformationClass: POLICY_DOMAIN_INFORMATION_CLASS,
    Buffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn LsaRegisterPolicyChangeNotification(
    InformationClass: POLICY_NOTIFICATION_INFORMATION_CLASS,
    NotificationEventHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn LsaUnregisterPolicyChangeNotification(
    InformationClass: POLICY_NOTIFICATION_INFORMATION_CLASS,
    NotificationEventHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaEnumerateTrustedDomains(
    PolicyHandle: ?*opaque{},
    EnumerationContext: ?*u32,
    Buffer: ?*?*opaque{},
    PreferedMaximumLength: u32,
    CountReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaLookupNames(
    PolicyHandle: ?*opaque{},
    Count: u32,
    Names: ?*UNICODE_STRING,
    ReferencedDomains: ?*?*LSA_REFERENCED_DOMAIN_LIST,
    Sids: ?*?*LSA_TRANSLATED_SID,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaLookupNames2(
    PolicyHandle: ?*opaque{},
    Flags: u32,
    Count: u32,
    Names: ?*UNICODE_STRING,
    ReferencedDomains: ?*?*LSA_REFERENCED_DOMAIN_LIST,
    Sids: ?*?*LSA_TRANSLATED_SID2,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaLookupSids(
    PolicyHandle: ?*opaque{},
    Count: u32,
    Sids: ?*?*opaque{},
    ReferencedDomains: ?*?*LSA_REFERENCED_DOMAIN_LIST,
    Names: ?*?*LSA_TRANSLATED_NAME,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaLookupSids2(
    PolicyHandle: ?*opaque{},
    LookupOptions: u32,
    Count: u32,
    Sids: ?*?*opaque{},
    ReferencedDomains: ?*?*LSA_REFERENCED_DOMAIN_LIST,
    Names: ?*?*LSA_TRANSLATED_NAME,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaEnumerateAccountsWithUserRight(
    PolicyHandle: ?*opaque{},
    UserRight: ?*UNICODE_STRING,
    Buffer: ?*?*opaque{},
    CountReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaEnumerateAccountRights(
    PolicyHandle: ?*opaque{},
    AccountSid: ?*opaque{},
    UserRights: ?*?*UNICODE_STRING,
    CountOfRights: ?*u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaAddAccountRights(
    PolicyHandle: ?*opaque{},
    AccountSid: ?*opaque{},
    UserRights: ?*UNICODE_STRING,
    CountOfRights: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaRemoveAccountRights(
    PolicyHandle: ?*opaque{},
    AccountSid: ?*opaque{},
    AllRights: u8,
    UserRights: ?*UNICODE_STRING,
    CountOfRights: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaOpenTrustedDomainByName(
    PolicyHandle: ?*opaque{},
    TrustedDomainName: ?*UNICODE_STRING,
    DesiredAccess: u32,
    TrustedDomainHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaQueryTrustedDomainInfo(
    PolicyHandle: ?*opaque{},
    TrustedDomainSid: ?*opaque{},
    InformationClass: TRUSTED_INFORMATION_CLASS,
    Buffer: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaSetTrustedDomainInformation(
    PolicyHandle: ?*opaque{},
    TrustedDomainSid: ?*opaque{},
    InformationClass: TRUSTED_INFORMATION_CLASS,
    Buffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaDeleteTrustedDomain(
    PolicyHandle: ?*opaque{},
    TrustedDomainSid: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaQueryTrustedDomainInfoByName(
    PolicyHandle: ?*opaque{},
    TrustedDomainName: ?*UNICODE_STRING,
    InformationClass: TRUSTED_INFORMATION_CLASS,
    Buffer: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaSetTrustedDomainInfoByName(
    PolicyHandle: ?*opaque{},
    TrustedDomainName: ?*UNICODE_STRING,
    InformationClass: TRUSTED_INFORMATION_CLASS,
    Buffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaEnumerateTrustedDomainsEx(
    PolicyHandle: ?*opaque{},
    EnumerationContext: ?*u32,
    Buffer: ?*?*opaque{},
    PreferedMaximumLength: u32,
    CountReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaCreateTrustedDomainEx(
    PolicyHandle: ?*opaque{},
    TrustedDomainInformation: ?*TRUSTED_DOMAIN_INFORMATION_EX,
    AuthenticationInformation: ?*TRUSTED_DOMAIN_AUTH_INFORMATION,
    DesiredAccess: u32,
    TrustedDomainHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaQueryForestTrustInformation(
    PolicyHandle: ?*opaque{},
    TrustedDomainName: ?*UNICODE_STRING,
    ForestTrustInfo: ?*?*LSA_FOREST_TRUST_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaSetForestTrustInformation(
    PolicyHandle: ?*opaque{},
    TrustedDomainName: ?*UNICODE_STRING,
    ForestTrustInfo: ?*LSA_FOREST_TRUST_INFORMATION,
    CheckOnly: u8,
    CollisionInfo: ?*?*LSA_FOREST_TRUST_COLLISION_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaStorePrivateData(
    PolicyHandle: ?*opaque{},
    KeyName: ?*UNICODE_STRING,
    PrivateData: ?*UNICODE_STRING,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaRetrievePrivateData(
    PolicyHandle: ?*opaque{},
    KeyName: ?*UNICODE_STRING,
    PrivateData: ?*?*UNICODE_STRING,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LsaNtStatusToWinError(
    Status: NTSTATUS,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn SystemFunction036(
    RandomBuffer: ?*opaque{},
    RandomBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn SystemFunction040(
    Memory: ?*opaque{},
    MemorySize: u32,
    OptionFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn SystemFunction041(
    Memory: ?*opaque{},
    MemorySize: u32,
    OptionFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditSetSystemPolicy(
    pAuditPolicy: ?*AUDIT_POLICY_INFORMATION,
    dwPolicyCount: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditSetPerUserPolicy(
    pSid: ?*opaque{},
    pAuditPolicy: ?*AUDIT_POLICY_INFORMATION,
    dwPolicyCount: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditQuerySystemPolicy(
    pSubCategoryGuids: ?*Guid,
    dwPolicyCount: u32,
    ppAuditPolicy: ?*?*AUDIT_POLICY_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditQueryPerUserPolicy(
    pSid: ?*opaque{},
    pSubCategoryGuids: ?*Guid,
    dwPolicyCount: u32,
    ppAuditPolicy: ?*?*AUDIT_POLICY_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditEnumeratePerUserPolicy(
    ppAuditSidArray: ?*?*POLICY_AUDIT_SID_ARRAY,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditComputeEffectivePolicyBySid(
    pSid: ?*opaque{},
    pSubCategoryGuids: ?*Guid,
    dwPolicyCount: u32,
    ppAuditPolicy: ?*?*AUDIT_POLICY_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditComputeEffectivePolicyByToken(
    hTokenHandle: HANDLE,
    pSubCategoryGuids: ?*Guid,
    dwPolicyCount: u32,
    ppAuditPolicy: ?*?*AUDIT_POLICY_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditEnumerateCategories(
    ppAuditCategoriesArray: ?*?*Guid,
    pdwCountReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditEnumerateSubCategories(
    pAuditCategoryGuid: ?*Guid,
    bRetrieveAllSubCategories: u8,
    ppAuditSubCategoriesArray: ?*?*Guid,
    pdwCountReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditLookupCategoryNameW(
    pAuditCategoryGuid: ?*Guid,
    ppszCategoryName: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditLookupCategoryNameA(
    pAuditCategoryGuid: ?*Guid,
    ppszCategoryName: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditLookupSubCategoryNameW(
    pAuditSubCategoryGuid: ?*Guid,
    ppszSubCategoryName: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditLookupSubCategoryNameA(
    pAuditSubCategoryGuid: ?*Guid,
    ppszSubCategoryName: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditLookupCategoryIdFromCategoryGuid(
    pAuditCategoryGuid: ?*Guid,
    pAuditCategoryId: ?*POLICY_AUDIT_EVENT_TYPE,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditLookupCategoryGuidFromCategoryId(
    AuditCategoryId: POLICY_AUDIT_EVENT_TYPE,
    pAuditCategoryGuid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditSetSecurity(
    SecurityInformation: u32,
    pSecurityDescriptor: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditQuerySecurity(
    SecurityInformation: u32,
    ppSecurityDescriptor: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditSetGlobalSaclW(
    ObjectTypeName: ?*u16,
    Acl: ?*ACL,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditSetGlobalSaclA(
    ObjectTypeName: ?*i8,
    Acl: ?*ACL,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditQueryGlobalSaclW(
    ObjectTypeName: ?*u16,
    Acl: ?*?*ACL,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AuditQueryGlobalSaclA(
    ObjectTypeName: ?*i8,
    Acl: ?*?*ACL,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn AuditFree(
    Buffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn AcquireCredentialsHandleW(
    pszPrincipal: ?*u16,
    pszPackage: ?*u16,
    fCredentialUse: u32,
    pvLogonId: ?*opaque{},
    pAuthData: ?*opaque{},
    pGetKeyFn: SEC_GET_KEY_FN,
    pvGetKeyArgument: ?*opaque{},
    phCredential: ?*SecHandle,
    ptsExpiry: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn AcquireCredentialsHandleA(
    pszPrincipal: ?*i8,
    pszPackage: ?*i8,
    fCredentialUse: u32,
    pvLogonId: ?*opaque{},
    pAuthData: ?*opaque{},
    pGetKeyFn: SEC_GET_KEY_FN,
    pvGetKeyArgument: ?*opaque{},
    phCredential: ?*SecHandle,
    ptsExpiry: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn FreeCredentialsHandle(
    phCredential: ?*SecHandle,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn AddCredentialsW(
    hCredentials: ?*SecHandle,
    pszPrincipal: ?*u16,
    pszPackage: ?*u16,
    fCredentialUse: u32,
    pAuthData: ?*opaque{},
    pGetKeyFn: SEC_GET_KEY_FN,
    pvGetKeyArgument: ?*opaque{},
    ptsExpiry: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn AddCredentialsA(
    hCredentials: ?*SecHandle,
    pszPrincipal: ?*i8,
    pszPackage: ?*i8,
    fCredentialUse: u32,
    pAuthData: ?*opaque{},
    pGetKeyFn: SEC_GET_KEY_FN,
    pvGetKeyArgument: ?*opaque{},
    ptsExpiry: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn ChangeAccountPasswordW(
    pszPackageName: ?*u16,
    pszDomainName: ?*u16,
    pszAccountName: ?*u16,
    pszOldPassword: ?*u16,
    pszNewPassword: ?*u16,
    bImpersonating: u8,
    dwReserved: u32,
    pOutput: ?*SecBufferDesc,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn ChangeAccountPasswordA(
    pszPackageName: ?*i8,
    pszDomainName: ?*i8,
    pszAccountName: ?*i8,
    pszOldPassword: ?*i8,
    pszNewPassword: ?*i8,
    bImpersonating: u8,
    dwReserved: u32,
    pOutput: ?*SecBufferDesc,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn InitializeSecurityContextW(
    phCredential: ?*SecHandle,
    phContext: ?*SecHandle,
    pszTargetName: ?*u16,
    fContextReq: u32,
    Reserved1: u32,
    TargetDataRep: u32,
    pInput: ?*SecBufferDesc,
    Reserved2: u32,
    phNewContext: ?*SecHandle,
    pOutput: ?*SecBufferDesc,
    pfContextAttr: ?*u32,
    ptsExpiry: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn InitializeSecurityContextA(
    phCredential: ?*SecHandle,
    phContext: ?*SecHandle,
    pszTargetName: ?*i8,
    fContextReq: u32,
    Reserved1: u32,
    TargetDataRep: u32,
    pInput: ?*SecBufferDesc,
    Reserved2: u32,
    phNewContext: ?*SecHandle,
    pOutput: ?*SecBufferDesc,
    pfContextAttr: ?*u32,
    ptsExpiry: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn AcceptSecurityContext(
    phCredential: ?*SecHandle,
    phContext: ?*SecHandle,
    pInput: ?*SecBufferDesc,
    fContextReq: u32,
    TargetDataRep: u32,
    phNewContext: ?*SecHandle,
    pOutput: ?*SecBufferDesc,
    pfContextAttr: ?*u32,
    ptsExpiry: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn CompleteAuthToken(
    phContext: ?*SecHandle,
    pToken: ?*SecBufferDesc,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn ImpersonateSecurityContext(
    phContext: ?*SecHandle,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn RevertSecurityContext(
    phContext: ?*SecHandle,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn QuerySecurityContextToken(
    phContext: ?*SecHandle,
    Token: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn DeleteSecurityContext(
    phContext: ?*SecHandle,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn ApplyControlToken(
    phContext: ?*SecHandle,
    pInput: ?*SecBufferDesc,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn QueryContextAttributesW(
    phContext: ?*SecHandle,
    ulAttribute: u32,
    pBuffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn QueryContextAttributesExW(
    phContext: ?*SecHandle,
    ulAttribute: u32,
    pBuffer: ?*opaque{},
    cbBuffer: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn QueryContextAttributesA(
    phContext: ?*SecHandle,
    ulAttribute: u32,
    pBuffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn QueryContextAttributesExA(
    phContext: ?*SecHandle,
    ulAttribute: u32,
    pBuffer: ?*opaque{},
    cbBuffer: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SetContextAttributesW(
    phContext: ?*SecHandle,
    ulAttribute: u32,
    pBuffer: ?*opaque{},
    cbBuffer: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SetContextAttributesA(
    phContext: ?*SecHandle,
    ulAttribute: u32,
    pBuffer: ?*opaque{},
    cbBuffer: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn QueryCredentialsAttributesW(
    phCredential: ?*SecHandle,
    ulAttribute: u32,
    pBuffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn QueryCredentialsAttributesExW(
    phCredential: ?*SecHandle,
    ulAttribute: u32,
    pBuffer: ?*opaque{},
    cbBuffer: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn QueryCredentialsAttributesA(
    phCredential: ?*SecHandle,
    ulAttribute: u32,
    pBuffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn QueryCredentialsAttributesExA(
    phCredential: ?*SecHandle,
    ulAttribute: u32,
    pBuffer: ?*opaque{},
    cbBuffer: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SetCredentialsAttributesW(
    phCredential: ?*SecHandle,
    ulAttribute: u32,
    pBuffer: ?*opaque{},
    cbBuffer: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SetCredentialsAttributesA(
    phCredential: ?*SecHandle,
    ulAttribute: u32,
    pBuffer: ?*opaque{},
    cbBuffer: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn FreeContextBuffer(
    pvContextBuffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn MakeSignature(
    phContext: ?*SecHandle,
    fQOP: u32,
    pMessage: ?*SecBufferDesc,
    MessageSeqNo: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn VerifySignature(
    phContext: ?*SecHandle,
    pMessage: ?*SecBufferDesc,
    MessageSeqNo: u32,
    pfQOP: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn EncryptMessage(
    phContext: ?*SecHandle,
    fQOP: u32,
    pMessage: ?*SecBufferDesc,
    MessageSeqNo: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn DecryptMessage(
    phContext: ?*SecHandle,
    pMessage: ?*SecBufferDesc,
    MessageSeqNo: u32,
    pfQOP: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn EnumerateSecurityPackagesW(
    pcPackages: ?*u32,
    ppPackageInfo: ?*?*SecPkgInfoW,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn EnumerateSecurityPackagesA(
    pcPackages: ?*u32,
    ppPackageInfo: ?*?*SecPkgInfoA,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn QuerySecurityPackageInfoW(
    pszPackageName: ?*u16,
    ppPackageInfo: ?*?*SecPkgInfoW,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn QuerySecurityPackageInfoA(
    pszPackageName: ?*i8,
    ppPackageInfo: ?*?*SecPkgInfoA,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn ExportSecurityContext(
    phContext: ?*SecHandle,
    fFlags: u32,
    pPackedContext: ?*SecBuffer,
    pToken: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn ImportSecurityContextW(
    pszPackage: ?*u16,
    pPackedContext: ?*SecBuffer,
    Token: ?*opaque{},
    phContext: ?*SecHandle,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn ImportSecurityContextA(
    pszPackage: ?*i8,
    pPackedContext: ?*SecBuffer,
    Token: ?*opaque{},
    phContext: ?*SecHandle,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn InitSecurityInterfaceA(
) callconv(@import("std").os.windows.WINAPI) ?*SecurityFunctionTableA;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn InitSecurityInterfaceW(
) callconv(@import("std").os.windows.WINAPI) ?*SecurityFunctionTableW;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SaslEnumerateProfilesA(
    ProfileList: ?*?*i8,
    ProfileCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SaslEnumerateProfilesW(
    ProfileList: ?*?*u16,
    ProfileCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SaslGetProfilePackageA(
    ProfileName: ?*i8,
    PackageInfo: ?*?*SecPkgInfoA,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SaslGetProfilePackageW(
    ProfileName: ?*u16,
    PackageInfo: ?*?*SecPkgInfoW,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SaslIdentifyPackageA(
    pInput: ?*SecBufferDesc,
    PackageInfo: ?*?*SecPkgInfoA,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SaslIdentifyPackageW(
    pInput: ?*SecBufferDesc,
    PackageInfo: ?*?*SecPkgInfoW,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SaslInitializeSecurityContextW(
    phCredential: ?*SecHandle,
    phContext: ?*SecHandle,
    pszTargetName: ?*u16,
    fContextReq: u32,
    Reserved1: u32,
    TargetDataRep: u32,
    pInput: ?*SecBufferDesc,
    Reserved2: u32,
    phNewContext: ?*SecHandle,
    pOutput: ?*SecBufferDesc,
    pfContextAttr: ?*u32,
    ptsExpiry: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SaslInitializeSecurityContextA(
    phCredential: ?*SecHandle,
    phContext: ?*SecHandle,
    pszTargetName: ?*i8,
    fContextReq: u32,
    Reserved1: u32,
    TargetDataRep: u32,
    pInput: ?*SecBufferDesc,
    Reserved2: u32,
    phNewContext: ?*SecHandle,
    pOutput: ?*SecBufferDesc,
    pfContextAttr: ?*u32,
    ptsExpiry: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SaslAcceptSecurityContext(
    phCredential: ?*SecHandle,
    phContext: ?*SecHandle,
    pInput: ?*SecBufferDesc,
    fContextReq: u32,
    TargetDataRep: u32,
    phNewContext: ?*SecHandle,
    pOutput: ?*SecBufferDesc,
    pfContextAttr: ?*u32,
    ptsExpiry: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SaslSetContextOption(
    ContextHandle: ?*SecHandle,
    Option: u32,
    Value: ?*opaque{},
    Size: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SaslGetContextOption(
    ContextHandle: ?*SecHandle,
    Option: u32,
    Value: ?*opaque{},
    Size: u32,
    Needed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn SspiPromptForCredentialsW(
    pszTargetName: ?*u16,
    pUiInfo: ?*opaque{},
    dwAuthError: u32,
    pszPackage: ?*u16,
    pInputAuthIdentity: ?*opaque{},
    ppAuthIdentity: ?*?*opaque{},
    pfSave: ?*i32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn SspiPromptForCredentialsA(
    pszTargetName: ?*i8,
    pUiInfo: ?*opaque{},
    dwAuthError: u32,
    pszPackage: ?*i8,
    pInputAuthIdentity: ?*opaque{},
    ppAuthIdentity: ?*?*opaque{},
    pfSave: ?*i32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiPrepareForCredRead(
    AuthIdentity: ?*opaque{},
    pszTargetName: ?*u16,
    pCredmanCredentialType: ?*u32,
    ppszCredmanTargetName: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiPrepareForCredWrite(
    AuthIdentity: ?*opaque{},
    pszTargetName: ?*u16,
    pCredmanCredentialType: ?*u32,
    ppszCredmanTargetName: ?*?*u16,
    ppszCredmanUserName: ?*?*u16,
    ppCredentialBlob: ?*?*u8,
    pCredentialBlobSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiEncryptAuthIdentity(
    AuthData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiEncryptAuthIdentityEx(
    Options: u32,
    AuthData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiDecryptAuthIdentity(
    EncryptedAuthData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiDecryptAuthIdentityEx(
    Options: u32,
    EncryptedAuthData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiIsAuthIdentityEncrypted(
    EncryptedAuthData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiEncodeAuthIdentityAsStrings(
    pAuthIdentity: ?*opaque{},
    ppszUserName: ?*?*u16,
    ppszDomainName: ?*?*u16,
    ppszPackedCredentialsString: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiValidateAuthIdentity(
    AuthData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiCopyAuthIdentity(
    AuthData: ?*opaque{},
    AuthDataCopy: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiFreeAuthIdentity(
    AuthData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiZeroAuthIdentity(
    AuthData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiLocalFree(
    DataBuffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiEncodeStringsAsAuthIdentity(
    pszUserName: ?*u16,
    pszDomainName: ?*u16,
    pszPackedCredentialsString: ?*u16,
    ppAuthIdentity: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiCompareAuthIdentities(
    AuthIdentity1: ?*opaque{},
    AuthIdentity2: ?*opaque{},
    SameSuppliedUser: ?*u8,
    SameSuppliedIdentity: ?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiMarshalAuthIdentity(
    AuthIdentity: ?*opaque{},
    AuthIdentityLength: ?*u32,
    AuthIdentityByteArray: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiUnmarshalAuthIdentity(
    AuthIdentityLength: u32,
    AuthIdentityByteArray: ?*i8,
    ppAuthIdentity: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn SspiIsPromptingNeeded(
    ErrorOrNtStatus: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiGetTargetHostName(
    pszTargetName: ?*u16,
    pszHostName: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn SspiExcludePackage(
    AuthIdentity: ?*opaque{},
    pszPackageName: ?*u16,
    ppNewAuthIdentity: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn AddSecurityPackageA(
    pszPackageName: ?*i8,
    pOptions: ?*SECURITY_PACKAGE_OPTIONS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn AddSecurityPackageW(
    pszPackageName: ?*u16,
    pOptions: ?*SECURITY_PACKAGE_OPTIONS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn DeleteSecurityPackageA(
    pszPackageName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SspiCli" fn DeleteSecurityPackageW(
    pszPackageName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredWriteW(
    Credential: ?*CREDENTIALW,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredWriteA(
    Credential: ?*CREDENTIALA,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredReadW(
    TargetName: ?*u16,
    Type: u32,
    Flags: u32,
    Credential: ?*?*CREDENTIALW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredReadA(
    TargetName: ?*i8,
    Type: u32,
    Flags: u32,
    Credential: ?*?*CREDENTIALA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredEnumerateW(
    Filter: ?*u16,
    Flags: u32,
    Count: ?*u32,
    Credential: ?*?*?*CREDENTIALW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredEnumerateA(
    Filter: ?*i8,
    Flags: u32,
    Count: ?*u32,
    Credential: ?*?*?*CREDENTIALA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredWriteDomainCredentialsW(
    TargetInfo: ?*CREDENTIAL_TARGET_INFORMATIONW,
    Credential: ?*CREDENTIALW,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredWriteDomainCredentialsA(
    TargetInfo: ?*CREDENTIAL_TARGET_INFORMATIONA,
    Credential: ?*CREDENTIALA,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredReadDomainCredentialsW(
    TargetInfo: ?*CREDENTIAL_TARGET_INFORMATIONW,
    Flags: u32,
    Count: ?*u32,
    Credential: ?*?*?*CREDENTIALW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredReadDomainCredentialsA(
    TargetInfo: ?*CREDENTIAL_TARGET_INFORMATIONA,
    Flags: u32,
    Count: ?*u32,
    Credential: ?*?*?*CREDENTIALA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredDeleteW(
    TargetName: ?*u16,
    Type: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredDeleteA(
    TargetName: ?*i8,
    Type: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredRenameW(
    OldTargetName: ?*u16,
    NewTargetName: ?*u16,
    Type: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredRenameA(
    OldTargetName: ?*i8,
    NewTargetName: ?*i8,
    Type: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredGetTargetInfoW(
    TargetName: ?*u16,
    Flags: u32,
    TargetInfo: ?*?*CREDENTIAL_TARGET_INFORMATIONW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredGetTargetInfoA(
    TargetName: ?*i8,
    Flags: u32,
    TargetInfo: ?*?*CREDENTIAL_TARGET_INFORMATIONA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredMarshalCredentialW(
    CredType: CRED_MARSHAL_TYPE,
    Credential: ?*opaque{},
    MarshaledCredential: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredMarshalCredentialA(
    CredType: CRED_MARSHAL_TYPE,
    Credential: ?*opaque{},
    MarshaledCredential: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredUnmarshalCredentialW(
    MarshaledCredential: ?*u16,
    CredType: ?*CRED_MARSHAL_TYPE,
    Credential: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredUnmarshalCredentialA(
    MarshaledCredential: ?*i8,
    CredType: ?*CRED_MARSHAL_TYPE,
    Credential: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn CredIsMarshaledCredentialW(
    MarshaledCredential: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn CredIsMarshaledCredentialA(
    MarshaledCredential: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "credui" fn CredUnPackAuthenticationBufferW(
    dwFlags: u32,
    pAuthBuffer: ?*opaque{},
    cbAuthBuffer: u32,
    pszUserName: ?*u16,
    pcchMaxUserName: ?*u32,
    pszDomainName: ?*u16,
    pcchMaxDomainName: ?*u32,
    pszPassword: ?*u16,
    pcchMaxPassword: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "credui" fn CredUnPackAuthenticationBufferA(
    dwFlags: u32,
    pAuthBuffer: ?*opaque{},
    cbAuthBuffer: u32,
    pszUserName: ?*i8,
    pcchlMaxUserName: ?*u32,
    pszDomainName: ?*i8,
    pcchMaxDomainName: ?*u32,
    pszPassword: ?*i8,
    pcchMaxPassword: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "credui" fn CredPackAuthenticationBufferW(
    dwFlags: u32,
    pszUserName: ?*u16,
    pszPassword: ?*u16,
    pPackedCredentials: ?*u8,
    pcbPackedCredentials: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "credui" fn CredPackAuthenticationBufferA(
    dwFlags: u32,
    pszUserName: ?*i8,
    pszPassword: ?*i8,
    pPackedCredentials: ?*u8,
    pcbPackedCredentials: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredProtectW(
    fAsSelf: BOOL,
    pszCredentials: ?*u16,
    cchCredentials: u32,
    pszProtectedCredentials: ?*u16,
    pcchMaxChars: ?*u32,
    ProtectionType: ?*CRED_PROTECTION_TYPE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredProtectA(
    fAsSelf: BOOL,
    pszCredentials: ?*i8,
    cchCredentials: u32,
    pszProtectedCredentials: ?*i8,
    pcchMaxChars: ?*u32,
    ProtectionType: ?*CRED_PROTECTION_TYPE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredUnprotectW(
    fAsSelf: BOOL,
    pszProtectedCredentials: ?*u16,
    cchProtectedCredentials: u32,
    pszCredentials: ?*u16,
    pcchMaxChars: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredUnprotectA(
    fAsSelf: BOOL,
    pszProtectedCredentials: ?*i8,
    cchProtectedCredentials: u32,
    pszCredentials: ?*i8,
    pcchMaxChars: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredIsProtectedW(
    pszProtectedCredentials: ?*u16,
    pProtectionType: ?*CRED_PROTECTION_TYPE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredIsProtectedA(
    pszProtectedCredentials: ?*i8,
    pProtectionType: ?*CRED_PROTECTION_TYPE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredFindBestCredentialW(
    TargetName: ?*u16,
    Type: u32,
    Flags: u32,
    Credential: ?*?*CREDENTIALW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredFindBestCredentialA(
    TargetName: ?*i8,
    Type: u32,
    Flags: u32,
    Credential: ?*?*CREDENTIALA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn CredGetSessionTypes(
    MaximumPersistCount: u32,
    MaximumPersist: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn CredFree(
    Buffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn CredUIPromptForCredentialsW(
    pUiInfo: ?*CREDUI_INFOW,
    pszTargetName: ?*u16,
    pContext: ?*SecHandle,
    dwAuthError: u32,
    pszUserName: ?*u16,
    ulUserNameBufferSize: u32,
    pszPassword: ?*u16,
    ulPasswordBufferSize: u32,
    save: ?*i32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn CredUIPromptForCredentialsA(
    pUiInfo: ?*CREDUI_INFOA,
    pszTargetName: ?*i8,
    pContext: ?*SecHandle,
    dwAuthError: u32,
    pszUserName: ?*i8,
    ulUserNameBufferSize: u32,
    pszPassword: ?*i8,
    ulPasswordBufferSize: u32,
    save: ?*i32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn CredUIPromptForWindowsCredentialsW(
    pUiInfo: ?*CREDUI_INFOW,
    dwAuthError: u32,
    pulAuthPackage: ?*u32,
    pvInAuthBuffer: ?*opaque{},
    ulInAuthBufferSize: u32,
    ppvOutAuthBuffer: ?*?*opaque{},
    pulOutAuthBufferSize: ?*u32,
    pfSave: ?*i32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn CredUIPromptForWindowsCredentialsA(
    pUiInfo: ?*CREDUI_INFOA,
    dwAuthError: u32,
    pulAuthPackage: ?*u32,
    pvInAuthBuffer: ?*opaque{},
    ulInAuthBufferSize: u32,
    ppvOutAuthBuffer: ?*?*opaque{},
    pulOutAuthBufferSize: ?*u32,
    pfSave: ?*i32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn CredUIParseUserNameW(
    UserName: ?*u16,
    user: ?*u16,
    userBufferSize: u32,
    domain: ?*u16,
    domainBufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn CredUIParseUserNameA(
    userName: ?*i8,
    user: ?*i8,
    userBufferSize: u32,
    domain: ?*i8,
    domainBufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn CredUICmdLinePromptForCredentialsW(
    pszTargetName: ?*u16,
    pContext: ?*SecHandle,
    dwAuthError: u32,
    UserName: ?*u16,
    ulUserBufferSize: u32,
    pszPassword: ?*u16,
    ulPasswordBufferSize: u32,
    pfSave: ?*i32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn CredUICmdLinePromptForCredentialsA(
    pszTargetName: ?*i8,
    pContext: ?*SecHandle,
    dwAuthError: u32,
    UserName: ?*i8,
    ulUserBufferSize: u32,
    pszPassword: ?*i8,
    ulPasswordBufferSize: u32,
    pfSave: ?*i32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn CredUIConfirmCredentialsW(
    pszTargetName: ?*u16,
    bConfirm: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn CredUIConfirmCredentialsA(
    pszTargetName: ?*i8,
    bConfirm: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn CredUIStoreSSOCredW(
    pszRealm: ?*u16,
    pszUsername: ?*u16,
    pszPassword: ?*u16,
    bPersist: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "credui" fn CredUIReadSSOCredW(
    pszRealm: ?*u16,
    ppszUsername: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SECUR32" fn CredMarshalTargetInfo(
    InTargetInfo: ?*CREDENTIAL_TARGET_INFORMATIONW,
    Buffer: ?*?*u16,
    BufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "SECUR32" fn CredUnmarshalTargetInfo(
    Buffer: ?*u16,
    BufferSize: u32,
    RetTargetInfo: ?*?*CREDENTIAL_TARGET_INFORMATIONW,
    RetActualSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "SCHANNEL" fn SslEmptyCacheA(
    pszTargetName: ?*i8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "SCHANNEL" fn SslEmptyCacheW(
    pszTargetName: ?*u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "SCHANNEL" fn SslGenerateRandomBits(
    pRandomData: ?*u8,
    cRandomData: i32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "SCHANNEL" fn SslCrackCertificate(
    pbCertificate: ?*u8,
    cbCertificate: u32,
    dwFlags: u32,
    ppCertificate: ?*?*X509Certificate,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "SCHANNEL" fn SslFreeCertificate(
    pCertificate: ?*X509Certificate,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "SCHANNEL" fn SslGetMaximumKeySize(
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "SCHANNEL" fn SslGetServerIdentity(
    ClientHello: ?*u8,
    ClientHelloSize: u32,
    ServerIdentity: ?*?*u8,
    ServerIdentitySize: ?*u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SCHANNEL" fn SslGetExtensions(
    clientHello: ?*u8,
    clientHelloByteSize: u32,
    genericExtensions: ?*SCH_EXTENSION_DATA,
    genericExtensionsCount: u8,
    bytesToRead: ?*u32,
    flags: SchGetExtensionsOptions,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "KeyCredMgr" fn KeyCredentialManagerGetOperationErrorStates(
    keyCredentialManagerOperationType: KeyCredentialManagerOperationType,
    isReady: ?*i32,
    keyCredentialManagerOperationErrorStates: ?*KeyCredentialManagerOperationErrorStates,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "KeyCredMgr" fn KeyCredentialManagerShowUIOperation(
    hWndOwner: HWND,
    keyCredentialManagerOperationType: KeyCredentialManagerOperationType,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "KeyCredMgr" fn KeyCredentialManagerGetInformation(
    keyCredentialManagerInfo: ?*?*KeyCredentialManagerInfo,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "KeyCredMgr" fn KeyCredentialManagerFreeInformation(
    keyCredentialManagerInfo: ?*KeyCredentialManagerInfo,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn NPAddConnection(
    lpNetResource: ?*NETRESOURCEW,
    lpPassword: ?*u16,
    lpUserName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn NPAddConnection3(
    hwndOwner: HWND,
    lpNetResource: ?*NETRESOURCEW,
    lpPassword: ?*u16,
    lpUserName: ?*u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTLANMAN" fn NPAddConnection4(
    hwndOwner: HWND,
    lpNetResource: ?*NETRESOURCEW,
    lpAuthBuffer: ?*opaque{},
    cbAuthBuffer: u32,
    dwFlags: u32,
    lpUseOptions: ?*u8,
    cbUseOptions: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn NPCancelConnection(
    lpName: ?*u16,
    fForce: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn NPGetConnection(
    lpLocalName: ?*u16,
    lpRemoteName: ?*u16,
    lpnBufferLen: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTLANMAN" fn NPGetConnection3(
    lpLocalName: ?*u16,
    dwLevel: u32,
    lpBuffer: ?*opaque{},
    lpBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn NPGetUniversalName(
    lpLocalPath: ?*u16,
    dwInfoLevel: u32,
    lpBuffer: ?*opaque{},
    lpBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTLANMAN" fn NPGetConnectionPerformance(
    lpRemoteName: ?*u16,
    lpNetConnectInfo: ?*NETCONNECTINFOSTRUCT,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn NPOpenEnum(
    dwScope: u32,
    dwType: u32,
    dwUsage: u32,
    lpNetResource: ?*NETRESOURCEW,
    lphEnum: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn NPEnumResource(
    hEnum: HANDLE,
    lpcCount: ?*u32,
    lpBuffer: ?*opaque{},
    lpBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn NPCloseEnum(
    hEnum: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn NPGetCaps(
    ndex: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn NPGetUser(
    lpName: ?*u16,
    lpUserName: ?*u16,
    lpnBufferLen: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NTLANMAN" fn NPGetPersistentUseOptionsForConnection(
    lpRemotePath: ?*u16,
    lpReadUseOptions: ?*u8,
    cbReadUseOptions: u32,
    lpWriteUseOptions: ?*u8,
    lpSizeWriteUseOptions: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn NPGetResourceParent(
    lpNetResource: ?*NETRESOURCEW,
    lpBuffer: ?*opaque{},
    lpBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn NPGetResourceInformation(
    lpNetResource: ?*NETRESOURCEW,
    lpBuffer: ?*opaque{},
    lpBufferSize: ?*u32,
    lplpSystem: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn NPFormatNetworkName(
    lpRemoteName: ?*u16,
    lpFormattedName: ?*u16,
    lpnLength: ?*u32,
    dwFlags: u32,
    dwAveCharPerLine: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "MPR" fn WNetSetLastErrorA(
    err: u32,
    lpError: ?*i8,
    lpProviders: ?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MPR" fn WNetSetLastErrorW(
    err: u32,
    lpError: ?*u16,
    lpProviders: ?*u16,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "certpoleng" fn PstGetTrustAnchors(
    pTargetName: ?*UNICODE_STRING,
    cCriteria: u32,
    rgpCriteria: ?*CERT_SELECT_CRITERIA,
    ppTrustedIssuers: ?*?*SecPkgContext_IssuerListInfoEx,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "certpoleng" fn PstGetTrustAnchorsEx(
    pTargetName: ?*UNICODE_STRING,
    cCriteria: u32,
    rgpCriteria: ?*CERT_SELECT_CRITERIA,
    pCertContext: ?*CERT_CONTEXT,
    ppTrustedIssuers: ?*?*SecPkgContext_IssuerListInfoEx,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "certpoleng" fn PstGetCertificateChain(
    pCert: ?*CERT_CONTEXT,
    pTrustedIssuers: ?*SecPkgContext_IssuerListInfoEx,
    ppCertChainContext: ?*?*CERT_CHAIN_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "certpoleng" fn PstGetCertificates(
    pTargetName: ?*UNICODE_STRING,
    cCriteria: u32,
    rgpCriteria: ?*CERT_SELECT_CRITERIA,
    bIsClient: BOOL,
    pdwCertChainContextCount: ?*u32,
    ppCertChainContexts: ?*?*?*CERT_CHAIN_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "certpoleng" fn PstAcquirePrivateKey(
    pCert: ?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "certpoleng" fn PstValidate(
    pTargetName: ?*UNICODE_STRING,
    bIsClient: BOOL,
    pRequestedIssuancePolicy: ?*CERT_USAGE_MATCH,
    phAdditionalCertStore: ?*?*opaque{},
    pCert: ?*CERT_CONTEXT,
    pProvGUID: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "certpoleng" fn PstMapCertificate(
    pCert: ?*CERT_CONTEXT,
    pTokenInformationType: ?*LSA_TOKEN_INFORMATION_TYPE,
    ppTokenInformation: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "certpoleng" fn PstGetUserNameForCertificate(
    pCertContext: ?*CERT_CONTEXT,
    UserName: ?*UNICODE_STRING,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "SAS" fn SendSAS(
    AsUser: BOOL,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzAccessCheck(
    Flags: u32,
    hAuthzClientContext: ?*AUTHZ_CLIENT_CONTEXT_HANDLE__,
    pRequest: ?*AUTHZ_ACCESS_REQUEST,
    hAuditEvent: ?*AUTHZ_AUDIT_EVENT_HANDLE__,
    pSecurityDescriptor: ?*opaque{},
    OptionalSecurityDescriptorArray: ?*?*opaque{},
    OptionalSecurityDescriptorCount: u32,
    pReply: ?*AUTHZ_ACCESS_REPLY,
    phAccessCheckResults: ?*?*AUTHZ_ACCESS_CHECK_RESULTS_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzCachedAccessCheck(
    Flags: u32,
    hAccessCheckResults: ?*AUTHZ_ACCESS_CHECK_RESULTS_HANDLE__,
    pRequest: ?*AUTHZ_ACCESS_REQUEST,
    hAuditEvent: ?*AUTHZ_AUDIT_EVENT_HANDLE__,
    pReply: ?*AUTHZ_ACCESS_REPLY,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzOpenObjectAudit(
    Flags: u32,
    hAuthzClientContext: ?*AUTHZ_CLIENT_CONTEXT_HANDLE__,
    pRequest: ?*AUTHZ_ACCESS_REQUEST,
    hAuditEvent: ?*AUTHZ_AUDIT_EVENT_HANDLE__,
    pSecurityDescriptor: ?*opaque{},
    OptionalSecurityDescriptorArray: ?*?*opaque{},
    OptionalSecurityDescriptorCount: u32,
    pReply: ?*AUTHZ_ACCESS_REPLY,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzFreeHandle(
    hAccessCheckResults: ?*AUTHZ_ACCESS_CHECK_RESULTS_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzInitializeResourceManager(
    Flags: u32,
    pfnDynamicAccessCheck: PFN_AUTHZ_DYNAMIC_ACCESS_CHECK,
    pfnComputeDynamicGroups: PFN_AUTHZ_COMPUTE_DYNAMIC_GROUPS,
    pfnFreeDynamicGroups: PFN_AUTHZ_FREE_DYNAMIC_GROUPS,
    szResourceManagerName: ?*u16,
    phAuthzResourceManager: ?*?*AUTHZ_RESOURCE_MANAGER_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzInitializeResourceManagerEx(
    Flags: u32,
    pAuthzInitInfo: ?*AUTHZ_INIT_INFO,
    phAuthzResourceManager: ?*?*AUTHZ_RESOURCE_MANAGER_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzInitializeRemoteResourceManager(
    pRpcInitInfo: ?*AUTHZ_RPC_INIT_INFO_CLIENT,
    phAuthzResourceManager: ?*?*AUTHZ_RESOURCE_MANAGER_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzFreeResourceManager(
    hAuthzResourceManager: ?*AUTHZ_RESOURCE_MANAGER_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzInitializeContextFromToken(
    Flags: u32,
    TokenHandle: HANDLE,
    hAuthzResourceManager: ?*AUTHZ_RESOURCE_MANAGER_HANDLE__,
    pExpirationTime: ?*LARGE_INTEGER,
    Identifier: LUID,
    DynamicGroupArgs: ?*opaque{},
    phAuthzClientContext: ?*?*AUTHZ_CLIENT_CONTEXT_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzInitializeContextFromSid(
    Flags: u32,
    UserSid: ?*opaque{},
    hAuthzResourceManager: ?*AUTHZ_RESOURCE_MANAGER_HANDLE__,
    pExpirationTime: ?*LARGE_INTEGER,
    Identifier: LUID,
    DynamicGroupArgs: ?*opaque{},
    phAuthzClientContext: ?*?*AUTHZ_CLIENT_CONTEXT_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzInitializeContextFromAuthzContext(
    Flags: u32,
    hAuthzClientContext: ?*AUTHZ_CLIENT_CONTEXT_HANDLE__,
    pExpirationTime: ?*LARGE_INTEGER,
    Identifier: LUID,
    DynamicGroupArgs: ?*opaque{},
    phNewAuthzClientContext: ?*?*AUTHZ_CLIENT_CONTEXT_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzInitializeCompoundContext(
    UserContext: ?*AUTHZ_CLIENT_CONTEXT_HANDLE__,
    DeviceContext: ?*AUTHZ_CLIENT_CONTEXT_HANDLE__,
    phCompoundContext: ?*?*AUTHZ_CLIENT_CONTEXT_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzAddSidsToContext(
    hAuthzClientContext: ?*AUTHZ_CLIENT_CONTEXT_HANDLE__,
    Sids: ?*SID_AND_ATTRIBUTES,
    SidCount: u32,
    RestrictedSids: ?*SID_AND_ATTRIBUTES,
    RestrictedSidCount: u32,
    phNewAuthzClientContext: ?*?*AUTHZ_CLIENT_CONTEXT_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzModifySecurityAttributes(
    hAuthzClientContext: ?*AUTHZ_CLIENT_CONTEXT_HANDLE__,
    pOperations: ?*AUTHZ_SECURITY_ATTRIBUTE_OPERATION,
    pAttributes: ?*AUTHZ_SECURITY_ATTRIBUTES_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzModifyClaims(
    hAuthzClientContext: ?*AUTHZ_CLIENT_CONTEXT_HANDLE__,
    ClaimClass: AUTHZ_CONTEXT_INFORMATION_CLASS,
    pClaimOperations: ?*AUTHZ_SECURITY_ATTRIBUTE_OPERATION,
    pClaims: ?*AUTHZ_SECURITY_ATTRIBUTES_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzModifySids(
    hAuthzClientContext: ?*AUTHZ_CLIENT_CONTEXT_HANDLE__,
    SidClass: AUTHZ_CONTEXT_INFORMATION_CLASS,
    pSidOperations: ?*AUTHZ_SID_OPERATION,
    pSids: ?*TOKEN_GROUPS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzSetAppContainerInformation(
    hAuthzClientContext: ?*AUTHZ_CLIENT_CONTEXT_HANDLE__,
    pAppContainerSid: ?*opaque{},
    CapabilityCount: u32,
    pCapabilitySids: ?*SID_AND_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzGetInformationFromContext(
    hAuthzClientContext: ?*AUTHZ_CLIENT_CONTEXT_HANDLE__,
    InfoClass: AUTHZ_CONTEXT_INFORMATION_CLASS,
    BufferSize: u32,
    pSizeRequired: ?*u32,
    Buffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzFreeContext(
    hAuthzClientContext: ?*AUTHZ_CLIENT_CONTEXT_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzInitializeObjectAccessAuditEvent(
    Flags: u32,
    hAuditEventType: ?*AUTHZ_AUDIT_EVENT_TYPE_HANDLE__,
    szOperationType: ?*u16,
    szObjectType: ?*u16,
    szObjectName: ?*u16,
    szAdditionalInfo: ?*u16,
    phAuditEvent: ?*?*AUTHZ_AUDIT_EVENT_HANDLE__,
    dwAdditionalParameterCount: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzInitializeObjectAccessAuditEvent2(
    Flags: u32,
    hAuditEventType: ?*AUTHZ_AUDIT_EVENT_TYPE_HANDLE__,
    szOperationType: ?*u16,
    szObjectType: ?*u16,
    szObjectName: ?*u16,
    szAdditionalInfo: ?*u16,
    szAdditionalInfo2: ?*u16,
    phAuditEvent: ?*?*AUTHZ_AUDIT_EVENT_HANDLE__,
    dwAdditionalParameterCount: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzFreeAuditEvent(
    hAuditEvent: ?*AUTHZ_AUDIT_EVENT_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "AUTHZ" fn AuthzEvaluateSacl(
    AuthzClientContext: ?*AUTHZ_CLIENT_CONTEXT_HANDLE__,
    pRequest: ?*AUTHZ_ACCESS_REQUEST,
    Sacl: ?*ACL,
    GrantedAccess: u32,
    AccessGranted: BOOL,
    pbGenerateAudit: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzInstallSecurityEventSource(
    dwFlags: u32,
    pRegistration: ?*AUTHZ_SOURCE_SCHEMA_REGISTRATION,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzUninstallSecurityEventSource(
    dwFlags: u32,
    szEventSourceName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzEnumerateSecurityEventSources(
    dwFlags: u32,
    Buffer: ?*AUTHZ_SOURCE_SCHEMA_REGISTRATION,
    pdwCount: ?*u32,
    pdwLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzRegisterSecurityEventSource(
    dwFlags: u32,
    szEventSourceName: ?*u16,
    phEventProvider: ?*?*AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzUnregisterSecurityEventSource(
    dwFlags: u32,
    phEventProvider: ?*?*AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzReportSecurityEvent(
    dwFlags: u32,
    hEventProvider: ?*AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE__,
    dwAuditId: u32,
    pUserSid: ?*opaque{},
    dwCount: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzReportSecurityEventFromParams(
    dwFlags: u32,
    hEventProvider: ?*AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE__,
    dwAuditId: u32,
    pUserSid: ?*opaque{},
    pParams: ?*AUDIT_PARAMS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzRegisterCapChangeNotification(
    phCapChangeSubscription: ?*?*AUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__,
    pfnCapChangeCallback: LPTHREAD_START_ROUTINE,
    pCallbackContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzUnregisterCapChangeNotification(
    hCapChangeSubscription: ?*AUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "AUTHZ" fn AuthzFreeCentralAccessPolicyCache(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ACLUI" fn CreateSecurityPage(
    psi: ISecurityInformation,
) callconv(@import("std").os.windows.WINAPI) HPROPSHEETPAGE;

// set_last_errror=True (can and should we use this?)
pub extern "ACLUI" fn EditSecurity(
    hwndOwner: HWND,
    psi: ISecurityInformation,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ACLUI" fn EditSecurityAdvanced(
    hwndOwner: HWND,
    psi: ISecurityInformation,
    uSIPage: SI_PAGE_TYPE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn SetEntriesInAclA(
    cCountOfExplicitEntries: u32,
    pListOfExplicitEntries: ?*EXPLICIT_ACCESS_A,
    OldAcl: ?*ACL,
    NewAcl: ?*?*ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn SetEntriesInAclW(
    cCountOfExplicitEntries: u32,
    pListOfExplicitEntries: ?*EXPLICIT_ACCESS_W,
    OldAcl: ?*ACL,
    NewAcl: ?*?*ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetExplicitEntriesFromAclA(
    pacl: ?*ACL,
    pcCountOfExplicitEntries: ?*u32,
    pListOfExplicitEntries: ?*?*EXPLICIT_ACCESS_A,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetExplicitEntriesFromAclW(
    pacl: ?*ACL,
    pcCountOfExplicitEntries: ?*u32,
    pListOfExplicitEntries: ?*?*EXPLICIT_ACCESS_W,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetEffectiveRightsFromAclA(
    pacl: ?*ACL,
    pTrustee: ?*TRUSTEE_A,
    pAccessRights: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetEffectiveRightsFromAclW(
    pacl: ?*ACL,
    pTrustee: ?*TRUSTEE_W,
    pAccessRights: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetAuditedPermissionsFromAclA(
    pacl: ?*ACL,
    pTrustee: ?*TRUSTEE_A,
    pSuccessfulAuditedRights: ?*u32,
    pFailedAuditRights: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetAuditedPermissionsFromAclW(
    pacl: ?*ACL,
    pTrustee: ?*TRUSTEE_W,
    pSuccessfulAuditedRights: ?*u32,
    pFailedAuditRights: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetNamedSecurityInfoA(
    pObjectName: ?*i8,
    ObjectType: SE_OBJECT_TYPE,
    SecurityInfo: u32,
    ppsidOwner: ?*?*opaque{},
    ppsidGroup: ?*?*opaque{},
    ppDacl: ?*?*ACL,
    ppSacl: ?*?*ACL,
    ppSecurityDescriptor: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetNamedSecurityInfoW(
    pObjectName: ?*u16,
    ObjectType: SE_OBJECT_TYPE,
    SecurityInfo: u32,
    ppsidOwner: ?*?*opaque{},
    ppsidGroup: ?*?*opaque{},
    ppDacl: ?*?*ACL,
    ppSacl: ?*?*ACL,
    ppSecurityDescriptor: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetSecurityInfo(
    handle: HANDLE,
    ObjectType: SE_OBJECT_TYPE,
    SecurityInfo: u32,
    ppsidOwner: ?*?*opaque{},
    ppsidGroup: ?*?*opaque{},
    ppDacl: ?*?*ACL,
    ppSacl: ?*?*ACL,
    ppSecurityDescriptor: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn SetNamedSecurityInfoA(
    pObjectName: ?*i8,
    ObjectType: SE_OBJECT_TYPE,
    SecurityInfo: u32,
    psidOwner: ?*opaque{},
    psidGroup: ?*opaque{},
    pDacl: ?*ACL,
    pSacl: ?*ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn SetNamedSecurityInfoW(
    pObjectName: ?*u16,
    ObjectType: SE_OBJECT_TYPE,
    SecurityInfo: u32,
    psidOwner: ?*opaque{},
    psidGroup: ?*opaque{},
    pDacl: ?*ACL,
    pSacl: ?*ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn SetSecurityInfo(
    handle: HANDLE,
    ObjectType: SE_OBJECT_TYPE,
    SecurityInfo: u32,
    psidOwner: ?*opaque{},
    psidGroup: ?*opaque{},
    pDacl: ?*ACL,
    pSacl: ?*ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetInheritanceSourceA(
    pObjectName: ?*i8,
    ObjectType: SE_OBJECT_TYPE,
    SecurityInfo: u32,
    Container: BOOL,
    pObjectClassGuids: ?*?*Guid,
    GuidCount: u32,
    pAcl: ?*ACL,
    pfnArray: ?*_FN_OBJECT_MGR_FUNCTIONS,
    pGenericMapping: ?*GENERIC_MAPPING,
    pInheritArray: ?*INHERITED_FROMA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetInheritanceSourceW(
    pObjectName: ?*u16,
    ObjectType: SE_OBJECT_TYPE,
    SecurityInfo: u32,
    Container: BOOL,
    pObjectClassGuids: ?*?*Guid,
    GuidCount: u32,
    pAcl: ?*ACL,
    pfnArray: ?*_FN_OBJECT_MGR_FUNCTIONS,
    pGenericMapping: ?*GENERIC_MAPPING,
    pInheritArray: ?*INHERITED_FROMW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn FreeInheritedFromArray(
    pInheritArray: ?*INHERITED_FROMW,
    AceCnt: u16,
    pfnArray: ?*_FN_OBJECT_MGR_FUNCTIONS,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn TreeResetNamedSecurityInfoA(
    pObjectName: ?*i8,
    ObjectType: SE_OBJECT_TYPE,
    SecurityInfo: u32,
    pOwner: ?*opaque{},
    pGroup: ?*opaque{},
    pDacl: ?*ACL,
    pSacl: ?*ACL,
    KeepExplicit: BOOL,
    fnProgress: FN_PROGRESS,
    ProgressInvokeSetting: PROG_INVOKE_SETTING,
    Args: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn TreeResetNamedSecurityInfoW(
    pObjectName: ?*u16,
    ObjectType: SE_OBJECT_TYPE,
    SecurityInfo: u32,
    pOwner: ?*opaque{},
    pGroup: ?*opaque{},
    pDacl: ?*ACL,
    pSacl: ?*ACL,
    KeepExplicit: BOOL,
    fnProgress: FN_PROGRESS,
    ProgressInvokeSetting: PROG_INVOKE_SETTING,
    Args: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn TreeSetNamedSecurityInfoA(
    pObjectName: ?*i8,
    ObjectType: SE_OBJECT_TYPE,
    SecurityInfo: u32,
    pOwner: ?*opaque{},
    pGroup: ?*opaque{},
    pDacl: ?*ACL,
    pSacl: ?*ACL,
    dwAction: u32,
    fnProgress: FN_PROGRESS,
    ProgressInvokeSetting: PROG_INVOKE_SETTING,
    Args: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn TreeSetNamedSecurityInfoW(
    pObjectName: ?*u16,
    ObjectType: SE_OBJECT_TYPE,
    SecurityInfo: u32,
    pOwner: ?*opaque{},
    pGroup: ?*opaque{},
    pDacl: ?*ACL,
    pSacl: ?*ACL,
    dwAction: u32,
    fnProgress: FN_PROGRESS,
    ProgressInvokeSetting: PROG_INVOKE_SETTING,
    Args: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildSecurityDescriptorA(
    pOwner: ?*TRUSTEE_A,
    pGroup: ?*TRUSTEE_A,
    cCountOfAccessEntries: u32,
    pListOfAccessEntries: ?*EXPLICIT_ACCESS_A,
    cCountOfAuditEntries: u32,
    pListOfAuditEntries: ?*EXPLICIT_ACCESS_A,
    pOldSD: ?*opaque{},
    pSizeNewSD: ?*u32,
    pNewSD: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildSecurityDescriptorW(
    pOwner: ?*TRUSTEE_W,
    pGroup: ?*TRUSTEE_W,
    cCountOfAccessEntries: u32,
    pListOfAccessEntries: ?*EXPLICIT_ACCESS_W,
    cCountOfAuditEntries: u32,
    pListOfAuditEntries: ?*EXPLICIT_ACCESS_W,
    pOldSD: ?*opaque{},
    pSizeNewSD: ?*u32,
    pNewSD: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LookupSecurityDescriptorPartsA(
    ppOwner: ?*?*TRUSTEE_A,
    ppGroup: ?*?*TRUSTEE_A,
    pcCountOfAccessEntries: ?*u32,
    ppListOfAccessEntries: ?*?*EXPLICIT_ACCESS_A,
    pcCountOfAuditEntries: ?*u32,
    ppListOfAuditEntries: ?*?*EXPLICIT_ACCESS_A,
    pSD: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn LookupSecurityDescriptorPartsW(
    ppOwner: ?*?*TRUSTEE_W,
    ppGroup: ?*?*TRUSTEE_W,
    pcCountOfAccessEntries: ?*u32,
    ppListOfAccessEntries: ?*?*EXPLICIT_ACCESS_W,
    pcCountOfAuditEntries: ?*u32,
    ppListOfAuditEntries: ?*?*EXPLICIT_ACCESS_W,
    pSD: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildExplicitAccessWithNameA(
    pExplicitAccess: ?*EXPLICIT_ACCESS_A,
    pTrusteeName: ?*i8,
    AccessPermissions: u32,
    AccessMode: ACCESS_MODE,
    Inheritance: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildExplicitAccessWithNameW(
    pExplicitAccess: ?*EXPLICIT_ACCESS_W,
    pTrusteeName: ?*u16,
    AccessPermissions: u32,
    AccessMode: ACCESS_MODE,
    Inheritance: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildImpersonateExplicitAccessWithNameA(
    pExplicitAccess: ?*EXPLICIT_ACCESS_A,
    pTrusteeName: ?*i8,
    pTrustee: ?*TRUSTEE_A,
    AccessPermissions: u32,
    AccessMode: ACCESS_MODE,
    Inheritance: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildImpersonateExplicitAccessWithNameW(
    pExplicitAccess: ?*EXPLICIT_ACCESS_W,
    pTrusteeName: ?*u16,
    pTrustee: ?*TRUSTEE_W,
    AccessPermissions: u32,
    AccessMode: ACCESS_MODE,
    Inheritance: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildTrusteeWithNameA(
    pTrustee: ?*TRUSTEE_A,
    pName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildTrusteeWithNameW(
    pTrustee: ?*TRUSTEE_W,
    pName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildImpersonateTrusteeA(
    pTrustee: ?*TRUSTEE_A,
    pImpersonateTrustee: ?*TRUSTEE_A,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildImpersonateTrusteeW(
    pTrustee: ?*TRUSTEE_W,
    pImpersonateTrustee: ?*TRUSTEE_W,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildTrusteeWithSidA(
    pTrustee: ?*TRUSTEE_A,
    pSid: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildTrusteeWithSidW(
    pTrustee: ?*TRUSTEE_W,
    pSid: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildTrusteeWithObjectsAndSidA(
    pTrustee: ?*TRUSTEE_A,
    pObjSid: ?*OBJECTS_AND_SID,
    pObjectGuid: ?*Guid,
    pInheritedObjectGuid: ?*Guid,
    pSid: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildTrusteeWithObjectsAndSidW(
    pTrustee: ?*TRUSTEE_W,
    pObjSid: ?*OBJECTS_AND_SID,
    pObjectGuid: ?*Guid,
    pInheritedObjectGuid: ?*Guid,
    pSid: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildTrusteeWithObjectsAndNameA(
    pTrustee: ?*TRUSTEE_A,
    pObjName: ?*OBJECTS_AND_NAME_A,
    ObjectType: SE_OBJECT_TYPE,
    ObjectTypeName: ?*i8,
    InheritedObjectTypeName: ?*i8,
    Name: ?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn BuildTrusteeWithObjectsAndNameW(
    pTrustee: ?*TRUSTEE_W,
    pObjName: ?*OBJECTS_AND_NAME_W,
    ObjectType: SE_OBJECT_TYPE,
    ObjectTypeName: ?*u16,
    InheritedObjectTypeName: ?*u16,
    Name: ?*u16,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetTrusteeNameA(
    pTrustee: ?*TRUSTEE_A,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetTrusteeNameW(
    pTrustee: ?*TRUSTEE_W,
) callconv(@import("std").os.windows.WINAPI) ?*u16;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetTrusteeTypeA(
    pTrustee: ?*TRUSTEE_A,
) callconv(@import("std").os.windows.WINAPI) TRUSTEE_TYPE;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetTrusteeTypeW(
    pTrustee: ?*TRUSTEE_W,
) callconv(@import("std").os.windows.WINAPI) TRUSTEE_TYPE;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetTrusteeFormA(
    pTrustee: ?*TRUSTEE_A,
) callconv(@import("std").os.windows.WINAPI) TRUSTEE_FORM;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetTrusteeFormW(
    pTrustee: ?*TRUSTEE_W,
) callconv(@import("std").os.windows.WINAPI) TRUSTEE_FORM;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetMultipleTrusteeOperationA(
    pTrustee: ?*TRUSTEE_A,
) callconv(@import("std").os.windows.WINAPI) MULTIPLE_TRUSTEE_OPERATION;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetMultipleTrusteeOperationW(
    pTrustee: ?*TRUSTEE_W,
) callconv(@import("std").os.windows.WINAPI) MULTIPLE_TRUSTEE_OPERATION;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetMultipleTrusteeA(
    pTrustee: ?*TRUSTEE_A,
) callconv(@import("std").os.windows.WINAPI) ?*TRUSTEE_A;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetMultipleTrusteeW(
    pTrustee: ?*TRUSTEE_W,
) callconv(@import("std").os.windows.WINAPI) ?*TRUSTEE_W;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ConvertSidToStringSidA(
    Sid: ?*opaque{},
    StringSid: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ConvertSidToStringSidW(
    Sid: ?*opaque{},
    StringSid: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ConvertStringSidToSidA(
    StringSid: ?*i8,
    Sid: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ConvertStringSidToSidW(
    StringSid: ?*u16,
    Sid: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ConvertStringSecurityDescriptorToSecurityDescriptorA(
    StringSecurityDescriptor: ?*i8,
    StringSDRevision: u32,
    SecurityDescriptor: ?*?*opaque{},
    SecurityDescriptorSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ConvertStringSecurityDescriptorToSecurityDescriptorW(
    StringSecurityDescriptor: ?*u16,
    StringSDRevision: u32,
    SecurityDescriptor: ?*?*opaque{},
    SecurityDescriptorSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ConvertSecurityDescriptorToStringSecurityDescriptorA(
    SecurityDescriptor: ?*opaque{},
    RequestedStringSDRevision: u32,
    SecurityInformation: u32,
    StringSecurityDescriptor: ?*?*i8,
    StringSecurityDescriptorLen: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ConvertSecurityDescriptorToStringSecurityDescriptorW(
    SecurityDescriptor: ?*opaque{},
    RequestedStringSDRevision: u32,
    SecurityInformation: u32,
    StringSecurityDescriptor: ?*?*u16,
    StringSecurityDescriptorLen: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "DSSEC" fn DSCreateISecurityInfoObject(
    pwszObjectPath: ?*u16,
    pwszObjectClass: ?*u16,
    dwFlags: u32,
    ppSI: ?*ISecurityInformation,
    pfnReadSD: PFNREADOBJECTSECURITY,
    pfnWriteSD: PFNWRITEOBJECTSECURITY,
    lpContext: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DSSEC" fn DSCreateISecurityInfoObjectEx(
    pwszObjectPath: ?*u16,
    pwszObjectClass: ?*u16,
    pwszServer: ?*u16,
    pwszUserName: ?*u16,
    pwszPassword: ?*u16,
    dwFlags: u32,
    ppSI: ?*ISecurityInformation,
    pfnReadSD: PFNREADOBJECTSECURITY,
    pfnWriteSD: PFNWRITEOBJECTSECURITY,
    lpContext: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DSSEC" fn DSCreateSecurityPage(
    pwszObjectPath: ?*u16,
    pwszObjectClass: ?*u16,
    dwFlags: u32,
    phPage: ?*HPROPSHEETPAGE,
    pfnReadSD: PFNREADOBJECTSECURITY,
    pfnWriteSD: PFNWRITEOBJECTSECURITY,
    lpContext: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DSSEC" fn DSEditSecurity(
    hwndOwner: HWND,
    pwszObjectPath: ?*u16,
    pwszObjectClass: ?*u16,
    dwFlags: u32,
    pwszCaption: ?*u16,
    pfnReadSD: PFNREADOBJECTSECURITY,
    pfnWriteSD: PFNWRITEOBJECTSECURITY,
    lpContext: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvIsServerOnlineW(
    pwszServerName: ?*u16,
    pfServerOnline: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvBackupGetDynamicFileListW(
    hbc: ?*opaque{},
    ppwszzFileList: ?*?*u16,
    pcbSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvBackupPrepareW(
    pwszServerName: ?*u16,
    grbitJet: u32,
    dwBackupFlags: u32,
    phbc: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvBackupGetDatabaseNamesW(
    hbc: ?*opaque{},
    ppwszzAttachmentInformation: ?*?*u16,
    pcbSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvBackupOpenFileW(
    hbc: ?*opaque{},
    pwszAttachmentName: ?*u16,
    cbReadHintSize: u32,
    pliFileSize: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvBackupRead(
    hbc: ?*opaque{},
    pvBuffer: ?*opaque{},
    cbBuffer: u32,
    pcbRead: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvBackupClose(
    hbc: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvBackupGetBackupLogsW(
    hbc: ?*opaque{},
    ppwszzBackupLogFiles: ?*?*u16,
    pcbSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvBackupTruncateLogs(
    hbc: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvBackupEnd(
    hbc: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvBackupFree(
    pv: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvRestoreGetDatabaseLocationsW(
    hbc: ?*opaque{},
    ppwszzDatabaseLocationList: ?*?*u16,
    pcbSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvRestorePrepareW(
    pwszServerName: ?*u16,
    dwRestoreFlags: u32,
    phbc: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvRestoreRegisterW(
    hbc: ?*opaque{},
    pwszCheckPointFilePath: ?*u16,
    pwszLogPath: ?*u16,
    rgrstmap: ?*CSEDB_RSTMAPW,
    crstmap: i32,
    pwszBackupLogPath: ?*u16,
    genLow: u32,
    genHigh: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvRestoreRegisterThroughFile(
    hbc: ?*opaque{},
    pwszCheckPointFilePath: ?*u16,
    pwszLogPath: ?*u16,
    rgrstmap: ?*CSEDB_RSTMAPW,
    crstmap: i32,
    pwszBackupLogPath: ?*u16,
    genLow: u32,
    genHigh: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvRestoreRegisterComplete(
    hbc: ?*opaque{},
    hrRestoreState: HRESULT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvRestoreEnd(
    hbc: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "certadm" fn CertSrvServerControlW(
    pwszServerName: ?*u16,
    dwControlFlags: u32,
    pcbOut: ?*u32,
    ppbOut: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptRegisterProtectionDescriptorName(
    pwszName: ?*u16,
    pwszDescriptorString: ?*u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptQueryProtectionDescriptorName(
    pwszName: ?*u16,
    pwszDescriptorString: ?*u16,
    pcDescriptorString: ?*?*opaque{},
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptCreateProtectionDescriptor(
    pwszDescriptorString: ?*u16,
    dwFlags: u32,
    phDescriptor: ?*?*NCRYPT_DESCRIPTOR_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptCloseProtectionDescriptor(
    hDescriptor: ?*NCRYPT_DESCRIPTOR_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptGetProtectionDescriptorInfo(
    hDescriptor: ?*NCRYPT_DESCRIPTOR_HANDLE__,
    pMemPara: ?*NCRYPT_ALLOC_PARA,
    dwInfoType: u32,
    ppvInfo: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptProtectSecret(
    hDescriptor: ?*NCRYPT_DESCRIPTOR_HANDLE__,
    dwFlags: u32,
    pbData: ?*u8,
    cbData: u32,
    pMemPara: ?*NCRYPT_ALLOC_PARA,
    hWnd: HWND,
    ppbProtectedBlob: ?*?*u8,
    pcbProtectedBlob: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptUnprotectSecret(
    phDescriptor: ?*?*NCRYPT_DESCRIPTOR_HANDLE__,
    dwFlags: u32,
    pbProtectedBlob: ?*u8,
    cbProtectedBlob: u32,
    pMemPara: ?*NCRYPT_ALLOC_PARA,
    hWnd: HWND,
    ppbData: ?*?*u8,
    pcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptStreamOpenToProtect(
    hDescriptor: ?*NCRYPT_DESCRIPTOR_HANDLE__,
    dwFlags: u32,
    hWnd: HWND,
    pStreamInfo: ?*NCRYPT_PROTECT_STREAM_INFO,
    phStream: ?*?*NCRYPT_STREAM_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptStreamOpenToUnprotect(
    pStreamInfo: ?*NCRYPT_PROTECT_STREAM_INFO,
    dwFlags: u32,
    hWnd: HWND,
    phStream: ?*?*NCRYPT_STREAM_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptStreamOpenToUnprotectEx(
    pStreamInfo: ?*NCRYPT_PROTECT_STREAM_INFO_EX,
    dwFlags: u32,
    hWnd: HWND,
    phStream: ?*?*NCRYPT_STREAM_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptStreamUpdate(
    hStream: ?*NCRYPT_STREAM_HANDLE__,
    pbData: ?*u8,
    cbData: ?*opaque{},
    fFinal: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ncrypt" fn NCryptStreamClose(
    hStream: ?*NCRYPT_STREAM_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TOKENBINDING" fn TokenBindingGenerateBinding(
    keyType: TOKENBINDING_KEY_PARAMETERS_TYPE,
    targetURL: ?*u16,
    bindingType: TOKENBINDING_TYPE,
    tlsEKM: ?*opaque{},
    tlsEKMSize: u32,
    extensionFormat: TOKENBINDING_EXTENSION_FORMAT,
    extensionData: ?*opaque{},
    tokenBinding: ?*?*opaque{},
    tokenBindingSize: ?*u32,
    resultData: ?*?*TOKENBINDING_RESULT_DATA,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TOKENBINDING" fn TokenBindingGenerateMessage(
    tokenBindings: ?*?*opaque{},
    tokenBindingsSize: ?*u32,
    tokenBindingsCount: u32,
    tokenBindingMessage: ?*?*opaque{},
    tokenBindingMessageSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TOKENBINDING" fn TokenBindingVerifyMessage(
    tokenBindingMessage: ?*opaque{},
    tokenBindingMessageSize: u32,
    keyType: TOKENBINDING_KEY_PARAMETERS_TYPE,
    tlsEKM: ?*opaque{},
    tlsEKMSize: u32,
    resultList: ?*?*TOKENBINDING_RESULT_LIST,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TOKENBINDING" fn TokenBindingGetKeyTypesClient(
    keyTypes: ?*?*TOKENBINDING_KEY_TYPES,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TOKENBINDING" fn TokenBindingGetKeyTypesServer(
    keyTypes: ?*?*TOKENBINDING_KEY_TYPES,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TOKENBINDING" fn TokenBindingDeleteBinding(
    targetURL: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TOKENBINDING" fn TokenBindingDeleteAllBindings(
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TOKENBINDING" fn TokenBindingGenerateID(
    keyType: TOKENBINDING_KEY_PARAMETERS_TYPE,
    publicKey: ?*opaque{},
    publicKeySize: u32,
    resultData: ?*?*TOKENBINDING_RESULT_DATA,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TOKENBINDING" fn TokenBindingGenerateIDForUri(
    keyType: TOKENBINDING_KEY_PARAMETERS_TYPE,
    targetUri: ?*u16,
    resultData: ?*?*TOKENBINDING_RESULT_DATA,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TOKENBINDING" fn TokenBindingGetHighestSupportedVersion(
    majorVersion: ?*u8,
    minorVersion: ?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlClose(
    hCryptXml: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlGetTransforms(
    ppConfig: ?*?*CRYPT_XML_TRANSFORM_CHAIN_CONFIG,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlOpenToEncode(
    pConfig: ?*CRYPT_XML_TRANSFORM_CHAIN_CONFIG,
    dwFlags: u32,
    wszId: ?*u16,
    rgProperty: ?*CRYPT_XML_PROPERTY,
    cProperty: u32,
    pEncoded: ?*CRYPT_XML_BLOB,
    phSignature: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlOpenToDecode(
    pConfig: ?*CRYPT_XML_TRANSFORM_CHAIN_CONFIG,
    dwFlags: u32,
    rgProperty: ?*CRYPT_XML_PROPERTY,
    cProperty: u32,
    pEncoded: ?*CRYPT_XML_BLOB,
    phCryptXml: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlAddObject(
    hSignatureOrObject: ?*opaque{},
    dwFlags: u32,
    rgProperty: ?*CRYPT_XML_PROPERTY,
    cProperty: u32,
    pEncoded: ?*CRYPT_XML_BLOB,
    ppObject: ?*?*CRYPT_XML_OBJECT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlCreateReference(
    hCryptXml: ?*opaque{},
    dwFlags: u32,
    wszId: ?*u16,
    wszURI: ?*u16,
    wszType: ?*u16,
    pDigestMethod: ?*CRYPT_XML_ALGORITHM,
    cTransform: u32,
    rgTransform: ?*CRYPT_XML_ALGORITHM,
    phReference: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlDigestReference(
    hReference: ?*opaque{},
    dwFlags: u32,
    pDataProviderIn: ?*CRYPT_XML_DATA_PROVIDER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlSetHMACSecret(
    hSignature: ?*opaque{},
    pbSecret: ?*u8,
    cbSecret: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlSign(
    hSignature: ?*opaque{},
    hKey: ?*opaque{},
    dwKeySpec: u32,
    dwFlags: u32,
    dwKeyInfoSpec: CRYPT_XML_KEYINFO_SPEC,
    pvKeyInfoSpec: ?*opaque{},
    pSignatureMethod: ?*CRYPT_XML_ALGORITHM,
    pCanonicalization: ?*CRYPT_XML_ALGORITHM,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlImportPublicKey(
    dwFlags: u32,
    pKeyValue: ?*CRYPT_XML_KEY_VALUE,
    phKey: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlVerifySignature(
    hSignature: ?*opaque{},
    hKey: ?*opaque{},
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlGetDocContext(
    hCryptXml: ?*opaque{},
    ppStruct: ?*?*CRYPT_XML_DOC_CTXT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlGetSignature(
    hCryptXml: ?*opaque{},
    ppStruct: ?*?*CRYPT_XML_SIGNATURE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlGetReference(
    hCryptXml: ?*opaque{},
    ppStruct: ?*?*CRYPT_XML_REFERENCE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlGetStatus(
    hCryptXml: ?*opaque{},
    pStatus: ?*CRYPT_XML_STATUS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlEncode(
    hCryptXml: ?*opaque{},
    dwCharset: CRYPT_XML_CHARSET,
    rgProperty: ?*CRYPT_XML_PROPERTY,
    cProperty: u32,
    pvCallbackState: ?*opaque{},
    pfnWrite: PFN_CRYPT_XML_WRITE_CALLBACK,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlGetAlgorithmInfo(
    pXmlAlgorithm: ?*CRYPT_XML_ALGORITHM,
    dwFlags: u32,
    ppAlgInfo: ?*?*CRYPT_XML_ALGORITHM_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlFindAlgorithmInfo(
    dwFindByType: u32,
    pvFindBy: ?*opaque{},
    dwGroupId: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*CRYPT_XML_ALGORITHM_INFO;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTXML" fn CryptXmlEnumAlgorithmInfo(
    dwGroupId: u32,
    dwFlags: u32,
    pvArg: ?*opaque{},
    pfnEnumAlgInfo: PFN_CRYPT_XML_ENUM_ALG_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn WinVerifyTrust(
    hwnd: HWND,
    pgActionID: ?*Guid,
    pWVTData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn WinVerifyTrustEx(
    hwnd: HWND,
    pgActionID: ?*Guid,
    pWinTrustData: ?*WINTRUST_DATA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn WintrustGetRegPolicyFlags(
    pdwPolicyFlags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn WintrustSetRegPolicyFlags(
    dwPolicyFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn WintrustAddActionID(
    pgActionID: ?*Guid,
    fdwFlags: u32,
    psProvInfo: ?*CRYPT_REGISTER_ACTIONID,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn WintrustRemoveActionID(
    pgActionID: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn WintrustLoadFunctionPointers(
    pgActionID: ?*Guid,
    pPfns: ?*CRYPT_PROVIDER_FUNCTIONS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn WintrustAddDefaultForUsage(
    pszUsageOID: ?*i8,
    psDefUsage: ?*CRYPT_PROVIDER_REGDEFUSAGE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn WintrustGetDefaultForUsage(
    dwAction: u32,
    pszUsageOID: ?*i8,
    psUsage: ?*CRYPT_PROVIDER_DEFUSAGE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn WTHelperGetProvSignerFromChain(
    pProvData: ?*CRYPT_PROVIDER_DATA,
    idxSigner: u32,
    fCounterSigner: BOOL,
    idxCounterSigner: u32,
) callconv(@import("std").os.windows.WINAPI) ?*CRYPT_PROVIDER_SGNR;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn WTHelperGetProvCertFromChain(
    pSgnr: ?*CRYPT_PROVIDER_SGNR,
    idxCert: u32,
) callconv(@import("std").os.windows.WINAPI) ?*CRYPT_PROVIDER_CERT;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn WTHelperProvDataFromStateData(
    hStateData: HANDLE,
) callconv(@import("std").os.windows.WINAPI) ?*CRYPT_PROVIDER_DATA;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn WTHelperGetProvPrivateDataFromChain(
    pProvData: ?*CRYPT_PROVIDER_DATA,
    pgProviderID: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) ?*CRYPT_PROVIDER_PRIVDATA;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn WTHelperCertIsSelfSigned(
    dwEncoding: u32,
    pCert: ?*CERT_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn WTHelperCertCheckValidSignature(
    pProvData: ?*CRYPT_PROVIDER_DATA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn OpenPersonalTrustDBDialogEx(
    hwndParent: HWND,
    dwFlags: u32,
    pvReserved: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn OpenPersonalTrustDBDialog(
    hwndParent: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn WintrustSetDefaultIncludePEPageHashes(
    fIncludePEPageHashes: BOOL,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTUI" fn CryptUIDlgViewContext(
    dwContextType: u32,
    pvContext: ?*opaque{},
    hwnd: HWND,
    pwszTitle: ?*u16,
    dwFlags: u32,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTUI" fn CryptUIDlgSelectCertificateFromStore(
    hCertStore: ?*opaque{},
    hwnd: HWND,
    pwszTitle: ?*u16,
    pwszDisplayString: ?*u16,
    dwDontUseColumn: u32,
    dwFlags: u32,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*CERT_CONTEXT;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTUI" fn CertSelectionGetSerializedBlob(
    pcsi: ?*CERT_SELECTUI_INPUT,
    ppOutBuffer: ?*?*opaque{},
    pulOutBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTUI" fn CryptUIDlgCertMgr(
    pCryptUICertMgr: ?*CRYPTUI_CERT_MGR_STRUCT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTUI" fn CryptUIWizDigitalSign(
    dwFlags: u32,
    hwndParent: HWND,
    pwszWizardTitle: ?*u16,
    pDigitalSignInfo: ?*CRYPTUI_WIZ_DIGITAL_SIGN_INFO,
    ppSignContext: ?*?*CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPTUI" fn CryptUIWizFreeDigitalSignContext(
    pSignContext: ?*CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPTUI" fn CryptUIDlgViewCertificateW(
    pCertViewInfo: ?*CRYPTUI_VIEWCERTIFICATE_STRUCTW,
    pfPropertiesChanged: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPTUI" fn CryptUIDlgViewCertificateA(
    pCertViewInfo: ?*CRYPTUI_VIEWCERTIFICATE_STRUCTA,
    pfPropertiesChanged: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPTUI" fn CryptUIWizExport(
    dwFlags: u32,
    hwndParent: HWND,
    pwszWizardTitle: ?*u16,
    pExportInfo: ?*CRYPTUI_WIZ_EXPORT_INFO,
    pvoid: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPTUI" fn CryptUIWizImport(
    dwFlags: u32,
    hwndParent: HWND,
    pwszWizardTitle: ?*u16,
    pImportSrc: ?*CRYPTUI_WIZ_IMPORT_SRC_INFO,
    hDestCertStore: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSIPGetSignedDataMsg(
    pSubjectInfo: ?*SIP_SUBJECTINFO,
    pdwEncodingType: ?*u32,
    dwIndex: u32,
    pcbSignedDataMsg: ?*u32,
    pbSignedDataMsg: ?*u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSIPPutSignedDataMsg(
    pSubjectInfo: ?*SIP_SUBJECTINFO,
    dwEncodingType: u32,
    pdwIndex: ?*u32,
    cbSignedDataMsg: u32,
    pbSignedDataMsg: ?*u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSIPCreateIndirectData(
    pSubjectInfo: ?*SIP_SUBJECTINFO,
    pcbIndirectData: ?*u32,
    pIndirectData: ?*SIP_INDIRECT_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSIPVerifyIndirectData(
    pSubjectInfo: ?*SIP_SUBJECTINFO,
    pIndirectData: ?*SIP_INDIRECT_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSIPRemoveSignedDataMsg(
    pSubjectInfo: ?*SIP_SUBJECTINFO,
    dwIndex: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSIPLoad(
    pgSubject: ?*Guid,
    dwFlags: u32,
    pSipDispatch: ?*SIP_DISPATCH_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSIPRetrieveSubjectGuid(
    FileName: ?*u16,
    hFileIn: HANDLE,
    pgSubject: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSIPRetrieveSubjectGuidForCatalogFile(
    FileName: ?*u16,
    hFileIn: HANDLE,
    pgSubject: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSIPAddProvider(
    psNewProv: ?*SIP_ADD_NEWPROVIDER,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "CRYPT32" fn CryptSIPRemoveProvider(
    pgProv: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptSIPGetCaps(
    pSubjInfo: ?*SIP_SUBJECTINFO,
    pCaps: ?*SIP_CAP_SET_V3,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "CRYPT32" fn CryptSIPGetSealedDigest(
    pSubjectInfo: ?*SIP_SUBJECTINFO,
    pSig: ?*u8,
    dwSig: u32,
    pbDigest: ?*u8,
    pcbDigest: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATOpen(
    pwszFileName: ?*u16,
    fdwOpenFlags: u32,
    hProv: ?*opaque{},
    dwPublicVersion: u32,
    dwEncodingType: u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATClose(
    hCatalog: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATStoreFromHandle(
    hCatalog: HANDLE,
) callconv(@import("std").os.windows.WINAPI) ?*CRYPTCATSTORE;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATHandleFromStore(
    pCatStore: ?*CRYPTCATSTORE,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn CryptCATPersistStore(
    hCatalog: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATGetCatAttrInfo(
    hCatalog: HANDLE,
    pwszReferenceTag: ?*u16,
) callconv(@import("std").os.windows.WINAPI) ?*CRYPTCATATTRIBUTE;

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn CryptCATPutCatAttrInfo(
    hCatalog: HANDLE,
    pwszReferenceTag: ?*u16,
    dwAttrTypeAndAction: u32,
    cbData: u32,
    pbData: ?*u8,
) callconv(@import("std").os.windows.WINAPI) ?*CRYPTCATATTRIBUTE;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATEnumerateCatAttr(
    hCatalog: HANDLE,
    pPrevAttr: ?*CRYPTCATATTRIBUTE,
) callconv(@import("std").os.windows.WINAPI) ?*CRYPTCATATTRIBUTE;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATGetMemberInfo(
    hCatalog: HANDLE,
    pwszReferenceTag: ?*u16,
) callconv(@import("std").os.windows.WINAPI) ?*CRYPTCATMEMBER;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATAllocSortedMemberInfo(
    hCatalog: HANDLE,
    pwszReferenceTag: ?*u16,
) callconv(@import("std").os.windows.WINAPI) ?*CRYPTCATMEMBER;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATFreeSortedMemberInfo(
    hCatalog: HANDLE,
    pCatMember: ?*CRYPTCATMEMBER,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn CryptCATGetAttrInfo(
    hCatalog: HANDLE,
    pCatMember: ?*CRYPTCATMEMBER,
    pwszReferenceTag: ?*u16,
) callconv(@import("std").os.windows.WINAPI) ?*CRYPTCATATTRIBUTE;

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn CryptCATPutMemberInfo(
    hCatalog: HANDLE,
    pwszFileName: ?*u16,
    pwszReferenceTag: ?*u16,
    pgSubjectType: ?*Guid,
    dwCertVersion: u32,
    cbSIPIndirectData: u32,
    pbSIPIndirectData: ?*u8,
) callconv(@import("std").os.windows.WINAPI) ?*CRYPTCATMEMBER;

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn CryptCATPutAttrInfo(
    hCatalog: HANDLE,
    pCatMember: ?*CRYPTCATMEMBER,
    pwszReferenceTag: ?*u16,
    dwAttrTypeAndAction: u32,
    cbData: u32,
    pbData: ?*u8,
) callconv(@import("std").os.windows.WINAPI) ?*CRYPTCATATTRIBUTE;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATEnumerateMember(
    hCatalog: HANDLE,
    pPrevMember: ?*CRYPTCATMEMBER,
) callconv(@import("std").os.windows.WINAPI) ?*CRYPTCATMEMBER;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATEnumerateAttr(
    hCatalog: HANDLE,
    pCatMember: ?*CRYPTCATMEMBER,
    pPrevAttr: ?*CRYPTCATATTRIBUTE,
) callconv(@import("std").os.windows.WINAPI) ?*CRYPTCATATTRIBUTE;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATCDFOpen(
    pwszFilePath: ?*u16,
    pfnParseError: PFN_CDF_PARSE_ERROR_CALLBACK,
) callconv(@import("std").os.windows.WINAPI) ?*CRYPTCATCDF;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATCDFClose(
    pCDF: ?*CRYPTCATCDF,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATCDFEnumCatAttributes(
    pCDF: ?*CRYPTCATCDF,
    pPrevAttr: ?*CRYPTCATATTRIBUTE,
    pfnParseError: PFN_CDF_PARSE_ERROR_CALLBACK,
) callconv(@import("std").os.windows.WINAPI) ?*CRYPTCATATTRIBUTE;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATCDFEnumMembers(
    pCDF: ?*CRYPTCATCDF,
    pPrevMember: ?*CRYPTCATMEMBER,
    pfnParseError: PFN_CDF_PARSE_ERROR_CALLBACK,
) callconv(@import("std").os.windows.WINAPI) ?*CRYPTCATMEMBER;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATCDFEnumAttributes(
    pCDF: ?*CRYPTCATCDF,
    pMember: ?*CRYPTCATMEMBER,
    pPrevAttr: ?*CRYPTCATATTRIBUTE,
    pfnParseError: PFN_CDF_PARSE_ERROR_CALLBACK,
) callconv(@import("std").os.windows.WINAPI) ?*CRYPTCATATTRIBUTE;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn IsCatalogFile(
    hFile: HANDLE,
    pwszFileName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn CryptCATAdminAcquireContext(
    phCatAdmin: ?*?*opaque{},
    pgSubsystem: ?*Guid,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn CryptCATAdminAcquireContext2(
    phCatAdmin: ?*?*opaque{},
    pgSubsystem: ?*Guid,
    pwszHashAlgorithm: ?*u16,
    pStrongHashPolicy: ?*CERT_STRONG_SIGN_PARA,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATAdminReleaseContext(
    hCatAdmin: ?*opaque{},
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATAdminReleaseCatalogContext(
    hCatAdmin: ?*opaque{},
    hCatInfo: ?*opaque{},
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn CryptCATAdminEnumCatalogFromHash(
    hCatAdmin: ?*opaque{},
    pbHash: ?*u8,
    cbHash: u32,
    dwFlags: u32,
    phPrevCatInfo: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATAdminCalcHashFromFileHandle(
    hFile: HANDLE,
    pcbHash: ?*u32,
    pbHash: ?*u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn CryptCATAdminCalcHashFromFileHandle2(
    hCatAdmin: ?*opaque{},
    hFile: HANDLE,
    pcbHash: ?*u32,
    pbHash: ?*u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn CryptCATAdminAddCatalog(
    hCatAdmin: ?*opaque{},
    pwszCatalogFile: ?*u16,
    pwszSelectBaseName: ?*u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn CryptCATAdminRemoveCatalog(
    hCatAdmin: ?*opaque{},
    pwszCatalogFile: ?*u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn CryptCATCatalogInfoFromContext(
    hCatInfo: ?*opaque{},
    psCatInfo: ?*CATALOG_INFO,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WINTRUST" fn CryptCATAdminResolveCatalogPath(
    hCatAdmin: ?*opaque{},
    pwszCatalogFile: ?*u16,
    psCatInfo: ?*CATALOG_INFO,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WINTRUST" fn CryptCATAdminPauseServiceForBackup(
    dwFlags: u32,
    fResume: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SaferGetPolicyInformation(
    dwScopeId: u32,
    SaferPolicyInfoClass: SAFER_POLICY_INFO_CLASS,
    InfoBufferSize: u32,
    InfoBuffer: ?*opaque{},
    InfoBufferRetSize: ?*u32,
    lpReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SaferSetPolicyInformation(
    dwScopeId: u32,
    SaferPolicyInfoClass: SAFER_POLICY_INFO_CLASS,
    InfoBufferSize: u32,
    InfoBuffer: ?*opaque{},
    lpReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SaferCreateLevel(
    dwScopeId: u32,
    dwLevelId: u32,
    OpenFlags: u32,
    pLevelHandle: ?*?*SAFER_LEVEL_HANDLE__,
    lpReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SaferCloseLevel(
    hLevelHandle: ?*SAFER_LEVEL_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SaferIdentifyLevel(
    dwNumProperties: u32,
    pCodeProperties: ?*SAFER_CODE_PROPERTIES_V2,
    pLevelHandle: ?*?*SAFER_LEVEL_HANDLE__,
    lpReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SaferComputeTokenFromLevel(
    LevelHandle: ?*SAFER_LEVEL_HANDLE__,
    InAccessToken: HANDLE,
    OutAccessToken: ?*?*opaque{},
    dwFlags: u32,
    lpReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SaferGetLevelInformation(
    LevelHandle: ?*SAFER_LEVEL_HANDLE__,
    dwInfoType: SAFER_OBJECT_INFO_CLASS,
    lpQueryBuffer: ?*opaque{},
    dwInBufferSize: u32,
    lpdwOutBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SaferSetLevelInformation(
    LevelHandle: ?*SAFER_LEVEL_HANDLE__,
    dwInfoType: SAFER_OBJECT_INFO_CLASS,
    lpQueryBuffer: ?*opaque{},
    dwInBufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SaferRecordEventLogEntry(
    hLevel: ?*SAFER_LEVEL_HANDLE__,
    szTargetPath: ?*u16,
    lpReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn SaferiIsExecutableFileType(
    szFullPathname: ?*u16,
    bFromShellExecute: u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLOpen(
    phSLC: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLClose(
    hSLC: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLInstallProofOfPurchase(
    hSLC: ?*opaque{},
    pwszPKeyAlgorithm: ?*u16,
    pwszPKeyString: ?*u16,
    cbPKeySpecificData: u32,
    pbPKeySpecificData: ?*u8,
    pPkeyId: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLUninstallProofOfPurchase(
    hSLC: ?*opaque{},
    pPKeyId: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLInstallLicense(
    hSLC: ?*opaque{},
    cbLicenseBlob: u32,
    pbLicenseBlob: ?*u8,
    pLicenseFileId: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLUninstallLicense(
    hSLC: ?*opaque{},
    pLicenseFileId: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLConsumeRight(
    hSLC: ?*opaque{},
    pAppId: ?*Guid,
    pProductSkuId: ?*Guid,
    pwszRightName: ?*u16,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetProductSkuInformation(
    hSLC: ?*opaque{},
    pProductSkuId: ?*Guid,
    pwszValueName: ?*u16,
    peDataType: ?*SLDATATYPE,
    pcbValue: ?*u32,
    ppbValue: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetPKeyInformation(
    hSLC: ?*opaque{},
    pPKeyId: ?*Guid,
    pwszValueName: ?*u16,
    peDataType: ?*SLDATATYPE,
    pcbValue: ?*u32,
    ppbValue: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetLicenseInformation(
    hSLC: ?*opaque{},
    pSLLicenseId: ?*Guid,
    pwszValueName: ?*u16,
    peDataType: ?*SLDATATYPE,
    pcbValue: ?*u32,
    ppbValue: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetLicensingStatusInformation(
    hSLC: ?*opaque{},
    pAppID: ?*Guid,
    pProductSkuId: ?*Guid,
    pwszRightName: ?*u16,
    pnStatusCount: ?*u32,
    ppLicensingStatus: ?*?*SL_LICENSING_STATUS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetPolicyInformation(
    hSLC: ?*opaque{},
    pwszValueName: ?*u16,
    peDataType: ?*SLDATATYPE,
    pcbValue: ?*u32,
    ppbValue: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetPolicyInformationDWORD(
    hSLC: ?*opaque{},
    pwszValueName: ?*u16,
    pdwValue: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetServiceInformation(
    hSLC: ?*opaque{},
    pwszValueName: ?*u16,
    peDataType: ?*SLDATATYPE,
    pcbValue: ?*u32,
    ppbValue: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetApplicationInformation(
    hSLC: ?*opaque{},
    pApplicationId: ?*Guid,
    pwszValueName: ?*u16,
    peDataType: ?*SLDATATYPE,
    pcbValue: ?*u32,
    ppbValue: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "slcext" fn SLActivateProduct(
    hSLC: ?*opaque{},
    pProductSkuId: ?*Guid,
    cbAppSpecificData: u32,
    pvAppSpecificData: ?*opaque{},
    pActivationInfo: ?*SL_ACTIVATION_INFO_HEADER,
    pwszProxyServer: ?*u16,
    wProxyPort: u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "slcext" fn SLGetServerStatus(
    pwszServerURL: ?*u16,
    pwszAcquisitionType: ?*u16,
    pwszProxyServer: ?*u16,
    wProxyPort: u16,
    phrStatus: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGenerateOfflineInstallationId(
    hSLC: ?*opaque{},
    pProductSkuId: ?*Guid,
    ppwszInstallationId: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGenerateOfflineInstallationIdEx(
    hSLC: ?*opaque{},
    pProductSkuId: ?*Guid,
    pActivationInfo: ?*SL_ACTIVATION_INFO_HEADER,
    ppwszInstallationId: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLDepositOfflineConfirmationId(
    hSLC: ?*opaque{},
    pProductSkuId: ?*Guid,
    pwszInstallationId: ?*u16,
    pwszConfirmationId: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLDepositOfflineConfirmationIdEx(
    hSLC: ?*opaque{},
    pProductSkuId: ?*Guid,
    pActivationInfo: ?*SL_ACTIVATION_INFO_HEADER,
    pwszInstallationId: ?*u16,
    pwszConfirmationId: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetPKeyId(
    hSLC: ?*opaque{},
    pwszPKeyAlgorithm: ?*u16,
    pwszPKeyString: ?*u16,
    cbPKeySpecificData: u32,
    pbPKeySpecificData: ?*u8,
    pPKeyId: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetInstalledProductKeyIds(
    hSLC: ?*opaque{},
    pProductSkuId: ?*Guid,
    pnProductKeyIds: ?*u32,
    ppProductKeyIds: ?*?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLSetCurrentProductKey(
    hSLC: ?*opaque{},
    pProductSkuId: ?*Guid,
    pProductKeyId: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetSLIDList(
    hSLC: ?*opaque{},
    eQueryIdType: SLIDTYPE,
    pQueryId: ?*Guid,
    eReturnIdType: SLIDTYPE,
    pnReturnIds: ?*u32,
    ppReturnIds: ?*?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetLicenseFileId(
    hSLC: ?*opaque{},
    cbLicenseBlob: u32,
    pbLicenseBlob: ?*u8,
    pLicenseFileId: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetLicense(
    hSLC: ?*opaque{},
    pLicenseFileId: ?*Guid,
    pcbLicenseFile: ?*u32,
    ppbLicenseFile: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLFireEvent(
    hSLC: ?*opaque{},
    pwszEventId: ?*u16,
    pApplicationId: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLRegisterEvent(
    hSLC: ?*opaque{},
    pwszEventId: ?*u16,
    pApplicationId: ?*Guid,
    hEvent: HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLUnregisterEvent(
    hSLC: ?*opaque{},
    pwszEventId: ?*u16,
    pApplicationId: ?*Guid,
    hEvent: HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetWindowsInformation(
    pwszValueName: ?*u16,
    peDataType: ?*SLDATATYPE,
    pcbValue: ?*u32,
    ppbValue: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetWindowsInformationDWORD(
    pwszValueName: ?*u16,
    pdwValue: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLWGA" fn SLIsGenuineLocal(
    pAppId: ?*Guid,
    pGenuineState: ?*SL_GENUINE_STATE,
    pUIOptions: ?*SL_NONGENUINE_UI_OPTIONS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "slcext" fn SLAcquireGenuineTicket(
    ppTicketBlob: ?*?*opaque{},
    pcbTicketBlob: ?*u32,
    pwszTemplateId: ?*u16,
    pwszServerUrl: ?*u16,
    pwszClientToken: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLSetGenuineInformation(
    pQueryId: ?*Guid,
    pwszValueName: ?*u16,
    eDataType: SLDATATYPE,
    cbValue: u32,
    pbValue: ?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "slcext" fn SLGetReferralInformation(
    hSLC: ?*opaque{},
    eReferralType: SLREFERRALTYPE,
    pSkuOrAppId: ?*Guid,
    pwszValueName: ?*u16,
    ppwszValue: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SLC" fn SLGetGenuineInformation(
    pQueryId: ?*Guid,
    pwszValueName: ?*u16,
    peDataType: ?*SLDATATYPE,
    pcbValue: ?*u32,
    ppbValue: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-slapi-l1-1-0" fn SLQueryLicenseValueFromApp(
    valueName: ?*u16,
    valueType: ?*u32,
    dataBuffer: ?*opaque{},
    dataSize: u32,
    resultDataSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqCreateSession(
    accessLevel: DdqAccessLevel,
    hSession: ?*?*HDIAGNOSTIC_DATA_QUERY_SESSION__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqCloseSession(
    hSession: ?*HDIAGNOSTIC_DATA_QUERY_SESSION__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetSessionAccessLevel(
    hSession: ?*HDIAGNOSTIC_DATA_QUERY_SESSION__,
    accessLevel: ?*DdqAccessLevel,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticDataAccessLevelAllowed(
    accessLevel: ?*DdqAccessLevel,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordStats(
    hSession: ?*HDIAGNOSTIC_DATA_QUERY_SESSION__,
    searchCriteria: ?*DIAGNOSTIC_DATA_SEARCH_CRITERIA,
    recordCount: ?*u32,
    minRowId: ?*i64,
    maxRowId: ?*i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordPayload(
    hSession: ?*HDIAGNOSTIC_DATA_QUERY_SESSION__,
    rowId: i64,
    payload: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordLocaleTags(
    hSession: ?*HDIAGNOSTIC_DATA_QUERY_SESSION__,
    locale: ?*u16,
    hTagDescription: ?*?*HDIAGNOSTIC_EVENT_TAG_DESCRIPTION__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqFreeDiagnosticRecordLocaleTags(
    hTagDescription: ?*HDIAGNOSTIC_EVENT_TAG_DESCRIPTION__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordLocaleTagAtIndex(
    hTagDescription: ?*HDIAGNOSTIC_EVENT_TAG_DESCRIPTION__,
    index: u32,
    tagDescription: ?*DIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordLocaleTagCount(
    hTagDescription: ?*HDIAGNOSTIC_EVENT_TAG_DESCRIPTION__,
    tagDescriptionCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordProducers(
    hSession: ?*HDIAGNOSTIC_DATA_QUERY_SESSION__,
    hProducerDescription: ?*?*HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqFreeDiagnosticRecordProducers(
    hProducerDescription: ?*HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordProducerAtIndex(
    hProducerDescription: ?*HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION__,
    index: u32,
    producerDescription: ?*DIAGNOSTIC_DATA_EVENT_PRODUCER_DESCRIPTION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordProducerCount(
    hProducerDescription: ?*HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION__,
    producerDescriptionCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordProducerCategories(
    hSession: ?*HDIAGNOSTIC_DATA_QUERY_SESSION__,
    producerName: ?*u16,
    hCategoryDescription: ?*?*HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqFreeDiagnosticRecordProducerCategories(
    hCategoryDescription: ?*HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordCategoryAtIndex(
    hCategoryDescription: ?*HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION__,
    index: u32,
    categoryDescription: ?*DIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordCategoryCount(
    hCategoryDescription: ?*HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION__,
    categoryDescriptionCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqIsDiagnosticRecordSampledIn(
    hSession: ?*HDIAGNOSTIC_DATA_QUERY_SESSION__,
    providerGroup: ?*Guid,
    providerId: ?*Guid,
    providerName: ?*u16,
    eventId: ?*u32,
    eventName: ?*u16,
    eventVersion: ?*u32,
    eventKeywords: ?*u64,
    isSampledIn: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordPage(
    hSession: ?*HDIAGNOSTIC_DATA_QUERY_SESSION__,
    searchCriteria: ?*DIAGNOSTIC_DATA_SEARCH_CRITERIA,
    offset: u32,
    pageRecordCount: u32,
    baseRowId: i64,
    hRecord: ?*?*HDIAGNOSTIC_RECORD__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqFreeDiagnosticRecordPage(
    hRecord: ?*HDIAGNOSTIC_RECORD__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordAtIndex(
    hRecord: ?*HDIAGNOSTIC_RECORD__,
    index: u32,
    record: ?*DIAGNOSTIC_DATA_RECORD,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordCount(
    hRecord: ?*HDIAGNOSTIC_RECORD__,
    recordCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticReportStoreReportCount(
    hSession: ?*HDIAGNOSTIC_DATA_QUERY_SESSION__,
    reportStoreType: u32,
    reportCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqCancelDiagnosticRecordOperation(
    hSession: ?*HDIAGNOSTIC_DATA_QUERY_SESSION__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticReport(
    hSession: ?*HDIAGNOSTIC_DATA_QUERY_SESSION__,
    reportStoreType: u32,
    hReport: ?*?*HDIAGNOSTIC_REPORT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqFreeDiagnosticReport(
    hReport: ?*HDIAGNOSTIC_REPORT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticReportAtIndex(
    hReport: ?*HDIAGNOSTIC_REPORT__,
    index: u32,
    report: ?*DIAGNOSTIC_REPORT_DATA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticReportCount(
    hReport: ?*HDIAGNOSTIC_REPORT__,
    reportCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqExtractDiagnosticReport(
    hSession: ?*HDIAGNOSTIC_DATA_QUERY_SESSION__,
    reportStoreType: u32,
    reportKey: ?*u16,
    destinationPath: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordTagDistribution(
    hSession: ?*HDIAGNOSTIC_DATA_QUERY_SESSION__,
    producerNames: ?*?*u16,
    producerNameCount: u32,
    tagStats: ?*?*DIAGNOSTIC_DATA_EVENT_TAG_STATS,
    statCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordBinaryDistribution(
    hSession: ?*HDIAGNOSTIC_DATA_QUERY_SESSION__,
    producerNames: ?*?*u16,
    producerNameCount: u32,
    topNBinaries: u32,
    binaryStats: ?*?*DIAGNOSTIC_DATA_EVENT_BINARY_STATS,
    statCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordSummary(
    hSession: ?*HDIAGNOSTIC_DATA_QUERY_SESSION__,
    producerNames: ?*?*u16,
    producerNameCount: u32,
    generalStats: ?*DIAGNOSTIC_DATA_GENERAL_STATS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqSetTranscriptConfiguration(
    hSession: ?*HDIAGNOSTIC_DATA_QUERY_SESSION__,
    desiredConfig: ?*DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DiagnosticDataQuery" fn DdqGetTranscriptConfiguration(
    hSession: ?*HDIAGNOSTIC_DATA_QUERY_SESSION__,
    currentConfig: ?*DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetThreadToken(
    Thread: ?*?*opaque{},
    Token: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn OpenProcessToken(
    ProcessHandle: HANDLE,
    DesiredAccess: u32,
    TokenHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn OpenThreadToken(
    ThreadHandle: HANDLE,
    DesiredAccess: u32,
    OpenAsSelf: BOOL,
    TokenHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn InstallELAMCertificateInfo(
    ELAMFile: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AccessCheckAndAuditAlarmA(
    SubsystemName: ?*i8,
    HandleId: ?*opaque{},
    ObjectTypeName: ?*i8,
    ObjectName: ?*i8,
    SecurityDescriptor: ?*opaque{},
    DesiredAccess: u32,
    GenericMapping: ?*GENERIC_MAPPING,
    ObjectCreation: BOOL,
    GrantedAccess: ?*u32,
    AccessStatus: ?*i32,
    pfGenerateOnClose: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AccessCheckByTypeAndAuditAlarmA(
    SubsystemName: ?*i8,
    HandleId: ?*opaque{},
    ObjectTypeName: ?*i8,
    ObjectName: ?*i8,
    SecurityDescriptor: ?*opaque{},
    PrincipalSelfSid: ?*opaque{},
    DesiredAccess: u32,
    AuditType: AUDIT_EVENT_TYPE,
    Flags: u32,
    ObjectTypeList: ?*OBJECT_TYPE_LIST,
    ObjectTypeListLength: u32,
    GenericMapping: ?*GENERIC_MAPPING,
    ObjectCreation: BOOL,
    GrantedAccess: ?*u32,
    AccessStatus: ?*i32,
    pfGenerateOnClose: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AccessCheckByTypeResultListAndAuditAlarmA(
    SubsystemName: ?*i8,
    HandleId: ?*opaque{},
    ObjectTypeName: ?*i8,
    ObjectName: ?*i8,
    SecurityDescriptor: ?*opaque{},
    PrincipalSelfSid: ?*opaque{},
    DesiredAccess: u32,
    AuditType: AUDIT_EVENT_TYPE,
    Flags: u32,
    ObjectTypeList: ?*OBJECT_TYPE_LIST,
    ObjectTypeListLength: u32,
    GenericMapping: ?*GENERIC_MAPPING,
    ObjectCreation: BOOL,
    GrantedAccess: ?*u32,
    AccessStatusList: ?*u32,
    pfGenerateOnClose: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AccessCheckByTypeResultListAndAuditAlarmByHandleA(
    SubsystemName: ?*i8,
    HandleId: ?*opaque{},
    ClientToken: HANDLE,
    ObjectTypeName: ?*i8,
    ObjectName: ?*i8,
    SecurityDescriptor: ?*opaque{},
    PrincipalSelfSid: ?*opaque{},
    DesiredAccess: u32,
    AuditType: AUDIT_EVENT_TYPE,
    Flags: u32,
    ObjectTypeList: ?*OBJECT_TYPE_LIST,
    ObjectTypeListLength: u32,
    GenericMapping: ?*GENERIC_MAPPING,
    ObjectCreation: BOOL,
    GrantedAccess: ?*u32,
    AccessStatusList: ?*u32,
    pfGenerateOnClose: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ObjectOpenAuditAlarmA(
    SubsystemName: ?*i8,
    HandleId: ?*opaque{},
    ObjectTypeName: ?*i8,
    ObjectName: ?*i8,
    pSecurityDescriptor: ?*opaque{},
    ClientToken: HANDLE,
    DesiredAccess: u32,
    GrantedAccess: u32,
    Privileges: ?*PRIVILEGE_SET,
    ObjectCreation: BOOL,
    AccessGranted: BOOL,
    GenerateOnClose: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ObjectPrivilegeAuditAlarmA(
    SubsystemName: ?*i8,
    HandleId: ?*opaque{},
    ClientToken: HANDLE,
    DesiredAccess: u32,
    Privileges: ?*PRIVILEGE_SET,
    AccessGranted: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ObjectCloseAuditAlarmA(
    SubsystemName: ?*i8,
    HandleId: ?*opaque{},
    GenerateOnClose: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn ObjectDeleteAuditAlarmA(
    SubsystemName: ?*i8,
    HandleId: ?*opaque{},
    GenerateOnClose: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn PrivilegedServiceAuditAlarmA(
    SubsystemName: ?*i8,
    ServiceName: ?*i8,
    ClientToken: HANDLE,
    Privileges: ?*PRIVILEGE_SET,
    AccessGranted: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn AddConditionalAce(
    pAcl: ?*ACL,
    dwAceRevision: u32,
    AceFlags: u32,
    AceType: u8,
    AccessMask: u32,
    pSid: ?*opaque{},
    ConditionStr: ?*u16,
    ReturnLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn SetFileSecurityA(
    lpFileName: ?*i8,
    SecurityInformation: u32,
    pSecurityDescriptor: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetFileSecurityA(
    lpFileName: ?*i8,
    RequestedInformation: u32,
    pSecurityDescriptor: ?*opaque{},
    nLength: u32,
    lpnLengthNeeded: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LookupAccountSidA(
    lpSystemName: ?*i8,
    Sid: ?*opaque{},
    Name: ?*i8,
    cchName: ?*u32,
    ReferencedDomainName: ?*i8,
    cchReferencedDomainName: ?*u32,
    peUse: ?*SID_NAME_USE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LookupAccountSidW(
    lpSystemName: ?*u16,
    Sid: ?*opaque{},
    Name: ?*u16,
    cchName: ?*u32,
    ReferencedDomainName: ?*u16,
    cchReferencedDomainName: ?*u32,
    peUse: ?*SID_NAME_USE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LookupAccountNameA(
    lpSystemName: ?*i8,
    lpAccountName: ?*i8,
    Sid: ?*opaque{},
    cbSid: ?*u32,
    ReferencedDomainName: ?*i8,
    cchReferencedDomainName: ?*u32,
    peUse: ?*SID_NAME_USE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LookupAccountNameW(
    lpSystemName: ?*u16,
    lpAccountName: ?*u16,
    Sid: ?*opaque{},
    cbSid: ?*u32,
    ReferencedDomainName: ?*u16,
    cchReferencedDomainName: ?*u32,
    peUse: ?*SID_NAME_USE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LookupPrivilegeValueA(
    lpSystemName: ?*i8,
    lpName: ?*i8,
    lpLuid: ?*LUID,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LookupPrivilegeValueW(
    lpSystemName: ?*u16,
    lpName: ?*u16,
    lpLuid: ?*LUID,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LookupPrivilegeNameA(
    lpSystemName: ?*i8,
    lpLuid: ?*LUID,
    lpName: ?*i8,
    cchName: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LookupPrivilegeNameW(
    lpSystemName: ?*u16,
    lpLuid: ?*LUID,
    lpName: ?*u16,
    cchName: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LookupPrivilegeDisplayNameA(
    lpSystemName: ?*i8,
    lpName: ?*i8,
    lpDisplayName: ?*i8,
    cchDisplayName: ?*u32,
    lpLanguageId: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LookupPrivilegeDisplayNameW(
    lpSystemName: ?*u16,
    lpName: ?*u16,
    lpDisplayName: ?*u16,
    cchDisplayName: ?*u32,
    lpLanguageId: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LogonUserA(
    lpszUsername: ?*i8,
    lpszDomain: ?*i8,
    lpszPassword: ?*i8,
    dwLogonType: u32,
    dwLogonProvider: u32,
    phToken: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LogonUserW(
    lpszUsername: ?*u16,
    lpszDomain: ?*u16,
    lpszPassword: ?*u16,
    dwLogonType: u32,
    dwLogonProvider: u32,
    phToken: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LogonUserExA(
    lpszUsername: ?*i8,
    lpszDomain: ?*i8,
    lpszPassword: ?*i8,
    dwLogonType: u32,
    dwLogonProvider: u32,
    phToken: ?*?*opaque{},
    ppLogonSid: ?*?*opaque{},
    ppProfileBuffer: ?*?*opaque{},
    pdwProfileLength: ?*u32,
    pQuotaLimits: ?*QUOTA_LIMITS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn LogonUserExW(
    lpszUsername: ?*u16,
    lpszDomain: ?*u16,
    lpszPassword: ?*u16,
    dwLogonType: u32,
    dwLogonProvider: u32,
    phToken: ?*?*opaque{},
    ppLogonSid: ?*?*opaque{},
    ppProfileBuffer: ?*?*opaque{},
    pdwProfileLength: ?*u32,
    pQuotaLimits: ?*QUOTA_LIMITS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegGetKeySecurity(
    hKey: HKEY,
    SecurityInformation: u32,
    pSecurityDescriptor: ?*opaque{},
    lpcbSecurityDescriptor: ?*u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegSetKeySecurity(
    hKey: HKEY,
    SecurityInformation: u32,
    pSecurityDescriptor: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlConvertSidToUnicodeString(
    UnicodeString: ?*UNICODE_STRING,
    Sid: ?*opaque{},
    AllocateDestinationString: u8,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const CRYPT_PASSWORD_CREDENTIALS = CRYPT_PASSWORD_CREDENTIALSA;
        pub const SCARD_READERSTATE = SCARD_READERSTATEA;
        pub const LPOCNCONNPROC = LPOCNCONNPROCA;
        pub const OPENCARD_SEARCH_CRITERIA = OPENCARD_SEARCH_CRITERIAA;
        pub const OPENCARDNAME_EX = OPENCARDNAME_EXA;
        pub const OPENCARDNAME = OPENCARDNAMEA;
        pub const SERVICE_DESCRIPTION = SERVICE_DESCRIPTIONA;
        pub const SERVICE_FAILURE_ACTIONS = SERVICE_FAILURE_ACTIONSA;
        pub const SERVICE_REQUIRED_PRIVILEGES_INFO = SERVICE_REQUIRED_PRIVILEGES_INFOA;
        pub const ENUM_SERVICE_STATUS = ENUM_SERVICE_STATUSA;
        pub const ENUM_SERVICE_STATUS_PROCESS = ENUM_SERVICE_STATUS_PROCESSA;
        pub const QUERY_SERVICE_LOCK_STATUS = QUERY_SERVICE_LOCK_STATUSA;
        pub const QUERY_SERVICE_CONFIG = QUERY_SERVICE_CONFIGA;
        pub const SERVICE_MAIN_FUNCTION = SERVICE_MAIN_FUNCTIONA;
        pub const LPSERVICE_MAIN_FUNCTION = LPSERVICE_MAIN_FUNCTIONA;
        pub const SERVICE_TABLE_ENTRY = SERVICE_TABLE_ENTRYA;
        pub const SERVICE_NOTIFY_2 = SERVICE_NOTIFY_2A;
        pub const SERVICE_CONTROL_STATUS_REASON_PARAMS = SERVICE_CONTROL_STATUS_REASON_PARAMSA;
        pub const SecPkgInfo = SecPkgInfoA;
        pub const SecPkgCredentials_Names = SecPkgCredentials_NamesA;
        pub const SecPkgCredentials_SSIProvider = SecPkgCredentials_SSIProviderA;
        pub const SecPkgContext_Names = SecPkgContext_NamesA;
        pub const SecPkgContext_KeyInfo = SecPkgContext_KeyInfoA;
        pub const SecPkgContext_Authority = SecPkgContext_AuthorityA;
        pub const SecPkgContext_ProtoInfo = SecPkgContext_ProtoInfoA;
        pub const SecPkgContext_PackageInfo = SecPkgContext_PackageInfoA;
        pub const SecPkgContext_NegotiationInfo = SecPkgContext_NegotiationInfoA;
        pub const SecPkgContext_NativeNames = SecPkgContext_NativeNamesA;
        pub const SecPkgContext_CredentialName = SecPkgContext_CredentialNameA;
        pub const ACQUIRE_CREDENTIALS_HANDLE_FN_ = ACQUIRE_CREDENTIALS_HANDLE_FN_A;
        pub const ADD_CREDENTIALS_FN_ = ADD_CREDENTIALS_FN_A;
        pub const CHANGE_PASSWORD_FN_ = CHANGE_PASSWORD_FN_A;
        pub const INITIALIZE_SECURITY_CONTEXT_FN_ = INITIALIZE_SECURITY_CONTEXT_FN_A;
        pub const QUERY_CONTEXT_ATTRIBUTES_FN_ = QUERY_CONTEXT_ATTRIBUTES_FN_A;
        pub const QUERY_CONTEXT_ATTRIBUTES_EX_FN_ = QUERY_CONTEXT_ATTRIBUTES_EX_FN_A;
        pub const SET_CONTEXT_ATTRIBUTES_FN_ = SET_CONTEXT_ATTRIBUTES_FN_A;
        pub const QUERY_CREDENTIALS_ATTRIBUTES_FN_ = QUERY_CREDENTIALS_ATTRIBUTES_FN_A;
        pub const QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_ = QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_A;
        pub const SET_CREDENTIALS_ATTRIBUTES_FN_ = SET_CREDENTIALS_ATTRIBUTES_FN_A;
        pub const ENUMERATE_SECURITY_PACKAGES_FN_ = ENUMERATE_SECURITY_PACKAGES_FN_A;
        pub const QUERY_SECURITY_PACKAGE_INFO_FN_ = QUERY_SECURITY_PACKAGE_INFO_FN_A;
        pub const IMPORT_SECURITY_CONTEXT_FN_ = IMPORT_SECURITY_CONTEXT_FN_A;
        pub const SecurityFunctionTable = SecurityFunctionTableA;
        pub const INIT_SECURITY_INTERFACE_ = INIT_SECURITY_INTERFACE_A;
        pub const SEC_WINNT_AUTH_IDENTITY_EX = SEC_WINNT_AUTH_IDENTITY_EXA;
        pub const CREDENTIAL_ATTRIBUTE = CREDENTIAL_ATTRIBUTEA;
        pub const CREDENTIAL = CREDENTIALA;
        pub const CREDENTIAL_TARGET_INFORMATION = CREDENTIAL_TARGET_INFORMATIONA;
        pub const CREDUI_INFO = CREDUI_INFOA;
        pub const SSL_EMPTY_CACHE_FN_ = SSL_EMPTY_CACHE_FN_A;
        pub const OBJECTS_AND_NAME_ = OBJECTS_AND_NAME_A;
        pub const TRUSTEE_ = TRUSTEE_A;
        pub const EXPLICIT_ACCESS_ = EXPLICIT_ACCESS_A;
        pub const TRUSTEE_ACCESS = TRUSTEE_ACCESSA;
        pub const ACTRL_ACCESS_INFO = ACTRL_ACCESS_INFOA;
        pub const ACTRL_CONTROL_INFO = ACTRL_CONTROL_INFOA;
        pub const INHERITED_FROM = INHERITED_FROMA;
        pub const CERT_SELECT_STRUCT_ = CERT_SELECT_STRUCT_A;
        pub const CERT_VIEWPROPERTIES_STRUCT_ = CERT_VIEWPROPERTIES_STRUCT_A;
        pub const CRYPTUI_VIEWCERTIFICATE_STRUCT = CRYPTUI_VIEWCERTIFICATE_STRUCTA;
        pub const SEC_WINNT_AUTH_IDENTITY_ = SEC_WINNT_AUTH_IDENTITY_A;
        pub const NETRESOURCE = NETRESOURCEA;
        pub const UNIVERSAL_NAME_INFO = UNIVERSAL_NAME_INFOA;
        pub const REMOTE_NAME_INFO = REMOTE_NAME_INFOA;
        pub const AccessCheckAndAuditAlarm = AccessCheckAndAuditAlarmA;
        pub const AccessCheckByTypeAndAuditAlarm = AccessCheckByTypeAndAuditAlarmA;
        pub const AccessCheckByTypeResultListAndAuditAlarm = AccessCheckByTypeResultListAndAuditAlarmA;
        pub const AccessCheckByTypeResultListAndAuditAlarmByHandle = AccessCheckByTypeResultListAndAuditAlarmByHandleA;
        pub const GetFileSecurity = GetFileSecurityA;
        pub const ObjectCloseAuditAlarm = ObjectCloseAuditAlarmA;
        pub const ObjectDeleteAuditAlarm = ObjectDeleteAuditAlarmA;
        pub const ObjectOpenAuditAlarm = ObjectOpenAuditAlarmA;
        pub const ObjectPrivilegeAuditAlarm = ObjectPrivilegeAuditAlarmA;
        pub const PrivilegedServiceAuditAlarm = PrivilegedServiceAuditAlarmA;
        pub const SetFileSecurity = SetFileSecurityA;
        pub const CryptAcquireContext = CryptAcquireContextA;
        pub const CryptSignHash = CryptSignHashA;
        pub const CryptVerifySignature = CryptVerifySignatureA;
        pub const CryptSetProvider = CryptSetProviderA;
        pub const CryptSetProviderEx = CryptSetProviderExA;
        pub const CryptGetDefaultProvider = CryptGetDefaultProviderA;
        pub const CryptEnumProviderTypes = CryptEnumProviderTypesA;
        pub const CryptEnumProviders = CryptEnumProvidersA;
        pub const CertRDNValueToStr = CertRDNValueToStrA;
        pub const CertNameToStr = CertNameToStrA;
        pub const CertStrToName = CertStrToNameA;
        pub const CertGetNameString = CertGetNameStringA;
        pub const CertOpenSystemStore = CertOpenSystemStoreA;
        pub const CertAddEncodedCertificateToSystemStore = CertAddEncodedCertificateToSystemStoreA;
        pub const CryptRetrieveObjectByUrl = CryptRetrieveObjectByUrlA;
        pub const CryptStringToBinary = CryptStringToBinaryA;
        pub const CryptBinaryToString = CryptBinaryToStringA;
        pub const SCardListReaderGroups = SCardListReaderGroupsA;
        pub const SCardListReaders = SCardListReadersA;
        pub const SCardListCards = SCardListCardsA;
        pub const SCardListInterfaces = SCardListInterfacesA;
        pub const SCardGetProviderId = SCardGetProviderIdA;
        pub const SCardGetCardTypeProviderName = SCardGetCardTypeProviderNameA;
        pub const SCardIntroduceReaderGroup = SCardIntroduceReaderGroupA;
        pub const SCardForgetReaderGroup = SCardForgetReaderGroupA;
        pub const SCardIntroduceReader = SCardIntroduceReaderA;
        pub const SCardForgetReader = SCardForgetReaderA;
        pub const SCardAddReaderToGroup = SCardAddReaderToGroupA;
        pub const SCardRemoveReaderFromGroup = SCardRemoveReaderFromGroupA;
        pub const SCardIntroduceCardType = SCardIntroduceCardTypeA;
        pub const SCardSetCardTypeProviderName = SCardSetCardTypeProviderNameA;
        pub const SCardForgetCardType = SCardForgetCardTypeA;
        pub const SCardLocateCards = SCardLocateCardsA;
        pub const SCardLocateCardsByATR = SCardLocateCardsByATRA;
        pub const SCardGetStatusChange = SCardGetStatusChangeA;
        pub const SCardConnect = SCardConnectA;
        pub const SCardStatus = SCardStatusA;
        pub const SCardUIDlgSelectCard = SCardUIDlgSelectCardA;
        pub const GetOpenCardName = GetOpenCardNameA;
        pub const SCardReadCache = SCardReadCacheA;
        pub const SCardWriteCache = SCardWriteCacheA;
        pub const SCardGetReaderIcon = SCardGetReaderIconA;
        pub const SCardGetDeviceTypeId = SCardGetDeviceTypeIdA;
        pub const SCardGetReaderDeviceInstanceId = SCardGetReaderDeviceInstanceIdA;
        pub const SCardListReadersWithDeviceInstanceId = SCardListReadersWithDeviceInstanceIdA;
        pub const ChangeServiceConfig2 = ChangeServiceConfig2A;
        pub const EnumDependentServices = EnumDependentServicesA;
        pub const EnumServicesStatus = EnumServicesStatusA;
        pub const EnumServicesStatusEx = EnumServicesStatusExA;
        pub const GetServiceKeyName = GetServiceKeyNameA;
        pub const GetServiceDisplayName = GetServiceDisplayNameA;
        pub const OpenSCManager = OpenSCManagerA;
        pub const OpenService = OpenServiceA;
        pub const QueryServiceConfig = QueryServiceConfigA;
        pub const QueryServiceConfig2 = QueryServiceConfig2A;
        pub const QueryServiceLockStatus = QueryServiceLockStatusA;
        pub const RegisterServiceCtrlHandler = RegisterServiceCtrlHandlerA;
        pub const RegisterServiceCtrlHandlerEx = RegisterServiceCtrlHandlerExA;
        pub const StartServiceCtrlDispatcher = StartServiceCtrlDispatcherA;
        pub const StartService = StartServiceA;
        pub const NotifyServiceStatusChange = NotifyServiceStatusChangeA;
        pub const ControlServiceEx = ControlServiceExA;
        pub const AuditLookupCategoryName = AuditLookupCategoryNameA;
        pub const AuditLookupSubCategoryName = AuditLookupSubCategoryNameA;
        pub const AuditSetGlobalSacl = AuditSetGlobalSaclA;
        pub const AuditQueryGlobalSacl = AuditQueryGlobalSaclA;
        pub const AcquireCredentialsHandle = AcquireCredentialsHandleA;
        pub const AddCredentials = AddCredentialsA;
        pub const ChangeAccountPassword = ChangeAccountPasswordA;
        pub const InitializeSecurityContext = InitializeSecurityContextA;
        pub const QueryContextAttributes = QueryContextAttributesA;
        pub const QueryContextAttributesEx = QueryContextAttributesExA;
        pub const SetContextAttributes = SetContextAttributesA;
        pub const QueryCredentialsAttributes = QueryCredentialsAttributesA;
        pub const QueryCredentialsAttributesEx = QueryCredentialsAttributesExA;
        pub const SetCredentialsAttributes = SetCredentialsAttributesA;
        pub const EnumerateSecurityPackages = EnumerateSecurityPackagesA;
        pub const QuerySecurityPackageInfo = QuerySecurityPackageInfoA;
        pub const ImportSecurityContext = ImportSecurityContextA;
        pub const InitSecurityInterface = InitSecurityInterfaceA;
        pub const SaslEnumerateProfiles = SaslEnumerateProfilesA;
        pub const SaslGetProfilePackage = SaslGetProfilePackageA;
        pub const SaslIdentifyPackage = SaslIdentifyPackageA;
        pub const SaslInitializeSecurityContext = SaslInitializeSecurityContextA;
        pub const SspiPromptForCredentials = SspiPromptForCredentialsA;
        pub const AddSecurityPackage = AddSecurityPackageA;
        pub const DeleteSecurityPackage = DeleteSecurityPackageA;
        pub const CredWrite = CredWriteA;
        pub const CredRead = CredReadA;
        pub const CredEnumerate = CredEnumerateA;
        pub const CredWriteDomainCredentials = CredWriteDomainCredentialsA;
        pub const CredReadDomainCredentials = CredReadDomainCredentialsA;
        pub const CredDelete = CredDeleteA;
        pub const CredRename = CredRenameA;
        pub const CredGetTargetInfo = CredGetTargetInfoA;
        pub const CredMarshalCredential = CredMarshalCredentialA;
        pub const CredUnmarshalCredential = CredUnmarshalCredentialA;
        pub const CredIsMarshaledCredential = CredIsMarshaledCredentialA;
        pub const CredUnPackAuthenticationBuffer = CredUnPackAuthenticationBufferA;
        pub const CredPackAuthenticationBuffer = CredPackAuthenticationBufferA;
        pub const CredProtect = CredProtectA;
        pub const CredUnprotect = CredUnprotectA;
        pub const CredIsProtected = CredIsProtectedA;
        pub const CredFindBestCredential = CredFindBestCredentialA;
        pub const CredUIPromptForCredentials = CredUIPromptForCredentialsA;
        pub const CredUIPromptForWindowsCredentials = CredUIPromptForWindowsCredentialsA;
        pub const CredUIParseUserName = CredUIParseUserNameA;
        pub const CredUICmdLinePromptForCredentials = CredUICmdLinePromptForCredentialsA;
        pub const CredUIConfirmCredentials = CredUIConfirmCredentialsA;
        pub const SslEmptyCache = SslEmptyCacheA;
        pub const WNetSetLastError = WNetSetLastErrorA;
        pub const SetEntriesInAcl = SetEntriesInAclA;
        pub const GetExplicitEntriesFromAcl = GetExplicitEntriesFromAclA;
        pub const GetEffectiveRightsFromAcl = GetEffectiveRightsFromAclA;
        pub const GetAuditedPermissionsFromAcl = GetAuditedPermissionsFromAclA;
        pub const GetNamedSecurityInfo = GetNamedSecurityInfoA;
        pub const SetNamedSecurityInfo = SetNamedSecurityInfoA;
        pub const GetInheritanceSource = GetInheritanceSourceA;
        pub const TreeResetNamedSecurityInfo = TreeResetNamedSecurityInfoA;
        pub const TreeSetNamedSecurityInfo = TreeSetNamedSecurityInfoA;
        pub const BuildSecurityDescriptor = BuildSecurityDescriptorA;
        pub const LookupSecurityDescriptorParts = LookupSecurityDescriptorPartsA;
        pub const BuildExplicitAccessWithName = BuildExplicitAccessWithNameA;
        pub const BuildImpersonateExplicitAccessWithName = BuildImpersonateExplicitAccessWithNameA;
        pub const BuildTrusteeWithName = BuildTrusteeWithNameA;
        pub const BuildImpersonateTrustee = BuildImpersonateTrusteeA;
        pub const BuildTrusteeWithSid = BuildTrusteeWithSidA;
        pub const BuildTrusteeWithObjectsAndSid = BuildTrusteeWithObjectsAndSidA;
        pub const BuildTrusteeWithObjectsAndName = BuildTrusteeWithObjectsAndNameA;
        pub const GetTrusteeName = GetTrusteeNameA;
        pub const GetTrusteeType = GetTrusteeTypeA;
        pub const GetTrusteeForm = GetTrusteeFormA;
        pub const GetMultipleTrusteeOperation = GetMultipleTrusteeOperationA;
        pub const GetMultipleTrustee = GetMultipleTrusteeA;
        pub const ConvertSidToStringSid = ConvertSidToStringSidA;
        pub const ConvertStringSidToSid = ConvertStringSidToSidA;
        pub const ConvertStringSecurityDescriptorToSecurityDescriptor = ConvertStringSecurityDescriptorToSecurityDescriptorA;
        pub const ConvertSecurityDescriptorToStringSecurityDescriptor = ConvertSecurityDescriptorToStringSecurityDescriptorA;
        pub const CryptUIDlgViewCertificate = CryptUIDlgViewCertificateA;
        pub const LookupAccountSid = LookupAccountSidA;
        pub const LookupAccountName = LookupAccountNameA;
        pub const LookupPrivilegeValue = LookupPrivilegeValueA;
        pub const LookupPrivilegeName = LookupPrivilegeNameA;
        pub const LookupPrivilegeDisplayName = LookupPrivilegeDisplayNameA;
        pub const LogonUser = LogonUserA;
        pub const LogonUserEx = LogonUserExA;
    },
    .wide => struct {
        pub const CRYPT_PASSWORD_CREDENTIALS = CRYPT_PASSWORD_CREDENTIALSW;
        pub const SCARD_READERSTATE = SCARD_READERSTATEW;
        pub const LPOCNCONNPROC = LPOCNCONNPROCW;
        pub const OPENCARD_SEARCH_CRITERIA = OPENCARD_SEARCH_CRITERIAW;
        pub const OPENCARDNAME_EX = OPENCARDNAME_EXW;
        pub const OPENCARDNAME = OPENCARDNAMEW;
        pub const SERVICE_DESCRIPTION = SERVICE_DESCRIPTIONW;
        pub const SERVICE_FAILURE_ACTIONS = SERVICE_FAILURE_ACTIONSW;
        pub const SERVICE_REQUIRED_PRIVILEGES_INFO = SERVICE_REQUIRED_PRIVILEGES_INFOW;
        pub const ENUM_SERVICE_STATUS = ENUM_SERVICE_STATUSW;
        pub const ENUM_SERVICE_STATUS_PROCESS = ENUM_SERVICE_STATUS_PROCESSW;
        pub const QUERY_SERVICE_LOCK_STATUS = QUERY_SERVICE_LOCK_STATUSW;
        pub const QUERY_SERVICE_CONFIG = QUERY_SERVICE_CONFIGW;
        pub const SERVICE_MAIN_FUNCTION = SERVICE_MAIN_FUNCTIONW;
        pub const LPSERVICE_MAIN_FUNCTION = LPSERVICE_MAIN_FUNCTIONW;
        pub const SERVICE_TABLE_ENTRY = SERVICE_TABLE_ENTRYW;
        pub const SERVICE_NOTIFY_2 = SERVICE_NOTIFY_2W;
        pub const SERVICE_CONTROL_STATUS_REASON_PARAMS = SERVICE_CONTROL_STATUS_REASON_PARAMSW;
        pub const SecPkgInfo = SecPkgInfoW;
        pub const SecPkgCredentials_Names = SecPkgCredentials_NamesW;
        pub const SecPkgCredentials_SSIProvider = SecPkgCredentials_SSIProviderW;
        pub const SecPkgContext_Names = SecPkgContext_NamesW;
        pub const SecPkgContext_KeyInfo = SecPkgContext_KeyInfoW;
        pub const SecPkgContext_Authority = SecPkgContext_AuthorityW;
        pub const SecPkgContext_ProtoInfo = SecPkgContext_ProtoInfoW;
        pub const SecPkgContext_PackageInfo = SecPkgContext_PackageInfoW;
        pub const SecPkgContext_NegotiationInfo = SecPkgContext_NegotiationInfoW;
        pub const SecPkgContext_NativeNames = SecPkgContext_NativeNamesW;
        pub const SecPkgContext_CredentialName = SecPkgContext_CredentialNameW;
        pub const ACQUIRE_CREDENTIALS_HANDLE_FN_ = ACQUIRE_CREDENTIALS_HANDLE_FN_W;
        pub const ADD_CREDENTIALS_FN_ = ADD_CREDENTIALS_FN_W;
        pub const CHANGE_PASSWORD_FN_ = CHANGE_PASSWORD_FN_W;
        pub const INITIALIZE_SECURITY_CONTEXT_FN_ = INITIALIZE_SECURITY_CONTEXT_FN_W;
        pub const QUERY_CONTEXT_ATTRIBUTES_FN_ = QUERY_CONTEXT_ATTRIBUTES_FN_W;
        pub const QUERY_CONTEXT_ATTRIBUTES_EX_FN_ = QUERY_CONTEXT_ATTRIBUTES_EX_FN_W;
        pub const SET_CONTEXT_ATTRIBUTES_FN_ = SET_CONTEXT_ATTRIBUTES_FN_W;
        pub const QUERY_CREDENTIALS_ATTRIBUTES_FN_ = QUERY_CREDENTIALS_ATTRIBUTES_FN_W;
        pub const QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_ = QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_W;
        pub const SET_CREDENTIALS_ATTRIBUTES_FN_ = SET_CREDENTIALS_ATTRIBUTES_FN_W;
        pub const ENUMERATE_SECURITY_PACKAGES_FN_ = ENUMERATE_SECURITY_PACKAGES_FN_W;
        pub const QUERY_SECURITY_PACKAGE_INFO_FN_ = QUERY_SECURITY_PACKAGE_INFO_FN_W;
        pub const IMPORT_SECURITY_CONTEXT_FN_ = IMPORT_SECURITY_CONTEXT_FN_W;
        pub const SecurityFunctionTable = SecurityFunctionTableW;
        pub const INIT_SECURITY_INTERFACE_ = INIT_SECURITY_INTERFACE_W;
        pub const SEC_WINNT_AUTH_IDENTITY_EX = SEC_WINNT_AUTH_IDENTITY_EXW;
        pub const CREDENTIAL_ATTRIBUTE = CREDENTIAL_ATTRIBUTEW;
        pub const CREDENTIAL = CREDENTIALW;
        pub const CREDENTIAL_TARGET_INFORMATION = CREDENTIAL_TARGET_INFORMATIONW;
        pub const CREDUI_INFO = CREDUI_INFOW;
        pub const SSL_EMPTY_CACHE_FN_ = SSL_EMPTY_CACHE_FN_W;
        pub const OBJECTS_AND_NAME_ = OBJECTS_AND_NAME_W;
        pub const TRUSTEE_ = TRUSTEE_W;
        pub const EXPLICIT_ACCESS_ = EXPLICIT_ACCESS_W;
        pub const TRUSTEE_ACCESS = TRUSTEE_ACCESSW;
        pub const ACTRL_ACCESS_INFO = ACTRL_ACCESS_INFOW;
        pub const ACTRL_CONTROL_INFO = ACTRL_CONTROL_INFOW;
        pub const INHERITED_FROM = INHERITED_FROMW;
        pub const CERT_SELECT_STRUCT_ = CERT_SELECT_STRUCT_W;
        pub const CERT_VIEWPROPERTIES_STRUCT_ = CERT_VIEWPROPERTIES_STRUCT_W;
        pub const CRYPTUI_VIEWCERTIFICATE_STRUCT = CRYPTUI_VIEWCERTIFICATE_STRUCTW;
        pub const SEC_WINNT_AUTH_IDENTITY_ = SEC_WINNT_AUTH_IDENTITY_W;
        pub const NETRESOURCE = NETRESOURCEW;
        pub const UNIVERSAL_NAME_INFO = UNIVERSAL_NAME_INFOW;
        pub const REMOTE_NAME_INFO = REMOTE_NAME_INFOW;
        pub const AccessCheckAndAuditAlarm = AccessCheckAndAuditAlarmW;
        pub const AccessCheckByTypeAndAuditAlarm = AccessCheckByTypeAndAuditAlarmW;
        pub const AccessCheckByTypeResultListAndAuditAlarm = AccessCheckByTypeResultListAndAuditAlarmW;
        pub const AccessCheckByTypeResultListAndAuditAlarmByHandle = AccessCheckByTypeResultListAndAuditAlarmByHandleW;
        pub const GetFileSecurity = GetFileSecurityW;
        pub const ObjectCloseAuditAlarm = ObjectCloseAuditAlarmW;
        pub const ObjectDeleteAuditAlarm = ObjectDeleteAuditAlarmW;
        pub const ObjectOpenAuditAlarm = ObjectOpenAuditAlarmW;
        pub const ObjectPrivilegeAuditAlarm = ObjectPrivilegeAuditAlarmW;
        pub const PrivilegedServiceAuditAlarm = PrivilegedServiceAuditAlarmW;
        pub const SetFileSecurity = SetFileSecurityW;
        pub const CryptAcquireContext = CryptAcquireContextW;
        pub const CryptSignHash = CryptSignHashW;
        pub const CryptVerifySignature = CryptVerifySignatureW;
        pub const CryptSetProvider = CryptSetProviderW;
        pub const CryptSetProviderEx = CryptSetProviderExW;
        pub const CryptGetDefaultProvider = CryptGetDefaultProviderW;
        pub const CryptEnumProviderTypes = CryptEnumProviderTypesW;
        pub const CryptEnumProviders = CryptEnumProvidersW;
        pub const CertRDNValueToStr = CertRDNValueToStrW;
        pub const CertNameToStr = CertNameToStrW;
        pub const CertStrToName = CertStrToNameW;
        pub const CertGetNameString = CertGetNameStringW;
        pub const CertOpenSystemStore = CertOpenSystemStoreW;
        pub const CertAddEncodedCertificateToSystemStore = CertAddEncodedCertificateToSystemStoreW;
        pub const CryptRetrieveObjectByUrl = CryptRetrieveObjectByUrlW;
        pub const CryptStringToBinary = CryptStringToBinaryW;
        pub const CryptBinaryToString = CryptBinaryToStringW;
        pub const SCardListReaderGroups = SCardListReaderGroupsW;
        pub const SCardListReaders = SCardListReadersW;
        pub const SCardListCards = SCardListCardsW;
        pub const SCardListInterfaces = SCardListInterfacesW;
        pub const SCardGetProviderId = SCardGetProviderIdW;
        pub const SCardGetCardTypeProviderName = SCardGetCardTypeProviderNameW;
        pub const SCardIntroduceReaderGroup = SCardIntroduceReaderGroupW;
        pub const SCardForgetReaderGroup = SCardForgetReaderGroupW;
        pub const SCardIntroduceReader = SCardIntroduceReaderW;
        pub const SCardForgetReader = SCardForgetReaderW;
        pub const SCardAddReaderToGroup = SCardAddReaderToGroupW;
        pub const SCardRemoveReaderFromGroup = SCardRemoveReaderFromGroupW;
        pub const SCardIntroduceCardType = SCardIntroduceCardTypeW;
        pub const SCardSetCardTypeProviderName = SCardSetCardTypeProviderNameW;
        pub const SCardForgetCardType = SCardForgetCardTypeW;
        pub const SCardLocateCards = SCardLocateCardsW;
        pub const SCardLocateCardsByATR = SCardLocateCardsByATRW;
        pub const SCardGetStatusChange = SCardGetStatusChangeW;
        pub const SCardConnect = SCardConnectW;
        pub const SCardStatus = SCardStatusW;
        pub const SCardUIDlgSelectCard = SCardUIDlgSelectCardW;
        pub const GetOpenCardName = GetOpenCardNameW;
        pub const SCardReadCache = SCardReadCacheW;
        pub const SCardWriteCache = SCardWriteCacheW;
        pub const SCardGetReaderIcon = SCardGetReaderIconW;
        pub const SCardGetDeviceTypeId = SCardGetDeviceTypeIdW;
        pub const SCardGetReaderDeviceInstanceId = SCardGetReaderDeviceInstanceIdW;
        pub const SCardListReadersWithDeviceInstanceId = SCardListReadersWithDeviceInstanceIdW;
        pub const ChangeServiceConfig2 = ChangeServiceConfig2W;
        pub const EnumDependentServices = EnumDependentServicesW;
        pub const EnumServicesStatus = EnumServicesStatusW;
        pub const EnumServicesStatusEx = EnumServicesStatusExW;
        pub const GetServiceKeyName = GetServiceKeyNameW;
        pub const GetServiceDisplayName = GetServiceDisplayNameW;
        pub const OpenSCManager = OpenSCManagerW;
        pub const OpenService = OpenServiceW;
        pub const QueryServiceConfig = QueryServiceConfigW;
        pub const QueryServiceConfig2 = QueryServiceConfig2W;
        pub const QueryServiceLockStatus = QueryServiceLockStatusW;
        pub const RegisterServiceCtrlHandler = RegisterServiceCtrlHandlerW;
        pub const RegisterServiceCtrlHandlerEx = RegisterServiceCtrlHandlerExW;
        pub const StartServiceCtrlDispatcher = StartServiceCtrlDispatcherW;
        pub const StartService = StartServiceW;
        pub const NotifyServiceStatusChange = NotifyServiceStatusChangeW;
        pub const ControlServiceEx = ControlServiceExW;
        pub const AuditLookupCategoryName = AuditLookupCategoryNameW;
        pub const AuditLookupSubCategoryName = AuditLookupSubCategoryNameW;
        pub const AuditSetGlobalSacl = AuditSetGlobalSaclW;
        pub const AuditQueryGlobalSacl = AuditQueryGlobalSaclW;
        pub const AcquireCredentialsHandle = AcquireCredentialsHandleW;
        pub const AddCredentials = AddCredentialsW;
        pub const ChangeAccountPassword = ChangeAccountPasswordW;
        pub const InitializeSecurityContext = InitializeSecurityContextW;
        pub const QueryContextAttributes = QueryContextAttributesW;
        pub const QueryContextAttributesEx = QueryContextAttributesExW;
        pub const SetContextAttributes = SetContextAttributesW;
        pub const QueryCredentialsAttributes = QueryCredentialsAttributesW;
        pub const QueryCredentialsAttributesEx = QueryCredentialsAttributesExW;
        pub const SetCredentialsAttributes = SetCredentialsAttributesW;
        pub const EnumerateSecurityPackages = EnumerateSecurityPackagesW;
        pub const QuerySecurityPackageInfo = QuerySecurityPackageInfoW;
        pub const ImportSecurityContext = ImportSecurityContextW;
        pub const InitSecurityInterface = InitSecurityInterfaceW;
        pub const SaslEnumerateProfiles = SaslEnumerateProfilesW;
        pub const SaslGetProfilePackage = SaslGetProfilePackageW;
        pub const SaslIdentifyPackage = SaslIdentifyPackageW;
        pub const SaslInitializeSecurityContext = SaslInitializeSecurityContextW;
        pub const SspiPromptForCredentials = SspiPromptForCredentialsW;
        pub const AddSecurityPackage = AddSecurityPackageW;
        pub const DeleteSecurityPackage = DeleteSecurityPackageW;
        pub const CredWrite = CredWriteW;
        pub const CredRead = CredReadW;
        pub const CredEnumerate = CredEnumerateW;
        pub const CredWriteDomainCredentials = CredWriteDomainCredentialsW;
        pub const CredReadDomainCredentials = CredReadDomainCredentialsW;
        pub const CredDelete = CredDeleteW;
        pub const CredRename = CredRenameW;
        pub const CredGetTargetInfo = CredGetTargetInfoW;
        pub const CredMarshalCredential = CredMarshalCredentialW;
        pub const CredUnmarshalCredential = CredUnmarshalCredentialW;
        pub const CredIsMarshaledCredential = CredIsMarshaledCredentialW;
        pub const CredUnPackAuthenticationBuffer = CredUnPackAuthenticationBufferW;
        pub const CredPackAuthenticationBuffer = CredPackAuthenticationBufferW;
        pub const CredProtect = CredProtectW;
        pub const CredUnprotect = CredUnprotectW;
        pub const CredIsProtected = CredIsProtectedW;
        pub const CredFindBestCredential = CredFindBestCredentialW;
        pub const CredUIPromptForCredentials = CredUIPromptForCredentialsW;
        pub const CredUIPromptForWindowsCredentials = CredUIPromptForWindowsCredentialsW;
        pub const CredUIParseUserName = CredUIParseUserNameW;
        pub const CredUICmdLinePromptForCredentials = CredUICmdLinePromptForCredentialsW;
        pub const CredUIConfirmCredentials = CredUIConfirmCredentialsW;
        pub const SslEmptyCache = SslEmptyCacheW;
        pub const WNetSetLastError = WNetSetLastErrorW;
        pub const SetEntriesInAcl = SetEntriesInAclW;
        pub const GetExplicitEntriesFromAcl = GetExplicitEntriesFromAclW;
        pub const GetEffectiveRightsFromAcl = GetEffectiveRightsFromAclW;
        pub const GetAuditedPermissionsFromAcl = GetAuditedPermissionsFromAclW;
        pub const GetNamedSecurityInfo = GetNamedSecurityInfoW;
        pub const SetNamedSecurityInfo = SetNamedSecurityInfoW;
        pub const GetInheritanceSource = GetInheritanceSourceW;
        pub const TreeResetNamedSecurityInfo = TreeResetNamedSecurityInfoW;
        pub const TreeSetNamedSecurityInfo = TreeSetNamedSecurityInfoW;
        pub const BuildSecurityDescriptor = BuildSecurityDescriptorW;
        pub const LookupSecurityDescriptorParts = LookupSecurityDescriptorPartsW;
        pub const BuildExplicitAccessWithName = BuildExplicitAccessWithNameW;
        pub const BuildImpersonateExplicitAccessWithName = BuildImpersonateExplicitAccessWithNameW;
        pub const BuildTrusteeWithName = BuildTrusteeWithNameW;
        pub const BuildImpersonateTrustee = BuildImpersonateTrusteeW;
        pub const BuildTrusteeWithSid = BuildTrusteeWithSidW;
        pub const BuildTrusteeWithObjectsAndSid = BuildTrusteeWithObjectsAndSidW;
        pub const BuildTrusteeWithObjectsAndName = BuildTrusteeWithObjectsAndNameW;
        pub const GetTrusteeName = GetTrusteeNameW;
        pub const GetTrusteeType = GetTrusteeTypeW;
        pub const GetTrusteeForm = GetTrusteeFormW;
        pub const GetMultipleTrusteeOperation = GetMultipleTrusteeOperationW;
        pub const GetMultipleTrustee = GetMultipleTrusteeW;
        pub const ConvertSidToStringSid = ConvertSidToStringSidW;
        pub const ConvertStringSidToSid = ConvertStringSidToSidW;
        pub const ConvertStringSecurityDescriptorToSecurityDescriptor = ConvertStringSecurityDescriptorToSecurityDescriptorW;
        pub const ConvertSecurityDescriptorToStringSecurityDescriptor = ConvertSecurityDescriptorToStringSecurityDescriptorW;
        pub const CryptUIDlgViewCertificate = CryptUIDlgViewCertificateW;
        pub const LookupAccountSid = LookupAccountSidW;
        pub const LookupAccountName = LookupAccountNameW;
        pub const LookupPrivilegeValue = LookupPrivilegeValueW;
        pub const LookupPrivilegeName = LookupPrivilegeNameW;
        pub const LookupPrivilegeDisplayName = LookupPrivilegeDisplayNameW;
        pub const LogonUser = LogonUserW;
        pub const LogonUserEx = LogonUserExW;
    },
    else => if (@import("builtin").is_test) struct {
        pub const CRYPT_PASSWORD_CREDENTIALS = *opaque{};
        pub const SCARD_READERSTATE = *opaque{};
        pub const LPOCNCONNPROC = *opaque{};
        pub const OPENCARD_SEARCH_CRITERIA = *opaque{};
        pub const OPENCARDNAME_EX = *opaque{};
        pub const OPENCARDNAME = *opaque{};
        pub const SERVICE_DESCRIPTION = *opaque{};
        pub const SERVICE_FAILURE_ACTIONS = *opaque{};
        pub const SERVICE_REQUIRED_PRIVILEGES_INFO = *opaque{};
        pub const ENUM_SERVICE_STATUS = *opaque{};
        pub const ENUM_SERVICE_STATUS_PROCESS = *opaque{};
        pub const QUERY_SERVICE_LOCK_STATUS = *opaque{};
        pub const QUERY_SERVICE_CONFIG = *opaque{};
        pub const SERVICE_MAIN_FUNCTION = *opaque{};
        pub const LPSERVICE_MAIN_FUNCTION = *opaque{};
        pub const SERVICE_TABLE_ENTRY = *opaque{};
        pub const SERVICE_NOTIFY_2 = *opaque{};
        pub const SERVICE_CONTROL_STATUS_REASON_PARAMS = *opaque{};
        pub const SecPkgInfo = *opaque{};
        pub const SecPkgCredentials_Names = *opaque{};
        pub const SecPkgCredentials_SSIProvider = *opaque{};
        pub const SecPkgContext_Names = *opaque{};
        pub const SecPkgContext_KeyInfo = *opaque{};
        pub const SecPkgContext_Authority = *opaque{};
        pub const SecPkgContext_ProtoInfo = *opaque{};
        pub const SecPkgContext_PackageInfo = *opaque{};
        pub const SecPkgContext_NegotiationInfo = *opaque{};
        pub const SecPkgContext_NativeNames = *opaque{};
        pub const SecPkgContext_CredentialName = *opaque{};
        pub const ACQUIRE_CREDENTIALS_HANDLE_FN_ = *opaque{};
        pub const ADD_CREDENTIALS_FN_ = *opaque{};
        pub const CHANGE_PASSWORD_FN_ = *opaque{};
        pub const INITIALIZE_SECURITY_CONTEXT_FN_ = *opaque{};
        pub const QUERY_CONTEXT_ATTRIBUTES_FN_ = *opaque{};
        pub const QUERY_CONTEXT_ATTRIBUTES_EX_FN_ = *opaque{};
        pub const SET_CONTEXT_ATTRIBUTES_FN_ = *opaque{};
        pub const QUERY_CREDENTIALS_ATTRIBUTES_FN_ = *opaque{};
        pub const QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_ = *opaque{};
        pub const SET_CREDENTIALS_ATTRIBUTES_FN_ = *opaque{};
        pub const ENUMERATE_SECURITY_PACKAGES_FN_ = *opaque{};
        pub const QUERY_SECURITY_PACKAGE_INFO_FN_ = *opaque{};
        pub const IMPORT_SECURITY_CONTEXT_FN_ = *opaque{};
        pub const SecurityFunctionTable = *opaque{};
        pub const INIT_SECURITY_INTERFACE_ = *opaque{};
        pub const SEC_WINNT_AUTH_IDENTITY_EX = *opaque{};
        pub const CREDENTIAL_ATTRIBUTE = *opaque{};
        pub const CREDENTIAL = *opaque{};
        pub const CREDENTIAL_TARGET_INFORMATION = *opaque{};
        pub const CREDUI_INFO = *opaque{};
        pub const SSL_EMPTY_CACHE_FN_ = *opaque{};
        pub const OBJECTS_AND_NAME_ = *opaque{};
        pub const TRUSTEE_ = *opaque{};
        pub const EXPLICIT_ACCESS_ = *opaque{};
        pub const TRUSTEE_ACCESS = *opaque{};
        pub const ACTRL_ACCESS_INFO = *opaque{};
        pub const ACTRL_CONTROL_INFO = *opaque{};
        pub const INHERITED_FROM = *opaque{};
        pub const CERT_SELECT_STRUCT_ = *opaque{};
        pub const CERT_VIEWPROPERTIES_STRUCT_ = *opaque{};
        pub const CRYPTUI_VIEWCERTIFICATE_STRUCT = *opaque{};
        pub const SEC_WINNT_AUTH_IDENTITY_ = *opaque{};
        pub const NETRESOURCE = *opaque{};
        pub const UNIVERSAL_NAME_INFO = *opaque{};
        pub const REMOTE_NAME_INFO = *opaque{};
        pub const AccessCheckAndAuditAlarm = *opaque{};
        pub const AccessCheckByTypeAndAuditAlarm = *opaque{};
        pub const AccessCheckByTypeResultListAndAuditAlarm = *opaque{};
        pub const AccessCheckByTypeResultListAndAuditAlarmByHandle = *opaque{};
        pub const GetFileSecurity = *opaque{};
        pub const ObjectCloseAuditAlarm = *opaque{};
        pub const ObjectDeleteAuditAlarm = *opaque{};
        pub const ObjectOpenAuditAlarm = *opaque{};
        pub const ObjectPrivilegeAuditAlarm = *opaque{};
        pub const PrivilegedServiceAuditAlarm = *opaque{};
        pub const SetFileSecurity = *opaque{};
        pub const CryptAcquireContext = *opaque{};
        pub const CryptSignHash = *opaque{};
        pub const CryptVerifySignature = *opaque{};
        pub const CryptSetProvider = *opaque{};
        pub const CryptSetProviderEx = *opaque{};
        pub const CryptGetDefaultProvider = *opaque{};
        pub const CryptEnumProviderTypes = *opaque{};
        pub const CryptEnumProviders = *opaque{};
        pub const CertRDNValueToStr = *opaque{};
        pub const CertNameToStr = *opaque{};
        pub const CertStrToName = *opaque{};
        pub const CertGetNameString = *opaque{};
        pub const CertOpenSystemStore = *opaque{};
        pub const CertAddEncodedCertificateToSystemStore = *opaque{};
        pub const CryptRetrieveObjectByUrl = *opaque{};
        pub const CryptStringToBinary = *opaque{};
        pub const CryptBinaryToString = *opaque{};
        pub const SCardListReaderGroups = *opaque{};
        pub const SCardListReaders = *opaque{};
        pub const SCardListCards = *opaque{};
        pub const SCardListInterfaces = *opaque{};
        pub const SCardGetProviderId = *opaque{};
        pub const SCardGetCardTypeProviderName = *opaque{};
        pub const SCardIntroduceReaderGroup = *opaque{};
        pub const SCardForgetReaderGroup = *opaque{};
        pub const SCardIntroduceReader = *opaque{};
        pub const SCardForgetReader = *opaque{};
        pub const SCardAddReaderToGroup = *opaque{};
        pub const SCardRemoveReaderFromGroup = *opaque{};
        pub const SCardIntroduceCardType = *opaque{};
        pub const SCardSetCardTypeProviderName = *opaque{};
        pub const SCardForgetCardType = *opaque{};
        pub const SCardLocateCards = *opaque{};
        pub const SCardLocateCardsByATR = *opaque{};
        pub const SCardGetStatusChange = *opaque{};
        pub const SCardConnect = *opaque{};
        pub const SCardStatus = *opaque{};
        pub const SCardUIDlgSelectCard = *opaque{};
        pub const GetOpenCardName = *opaque{};
        pub const SCardReadCache = *opaque{};
        pub const SCardWriteCache = *opaque{};
        pub const SCardGetReaderIcon = *opaque{};
        pub const SCardGetDeviceTypeId = *opaque{};
        pub const SCardGetReaderDeviceInstanceId = *opaque{};
        pub const SCardListReadersWithDeviceInstanceId = *opaque{};
        pub const ChangeServiceConfig2 = *opaque{};
        pub const EnumDependentServices = *opaque{};
        pub const EnumServicesStatus = *opaque{};
        pub const EnumServicesStatusEx = *opaque{};
        pub const GetServiceKeyName = *opaque{};
        pub const GetServiceDisplayName = *opaque{};
        pub const OpenSCManager = *opaque{};
        pub const OpenService = *opaque{};
        pub const QueryServiceConfig = *opaque{};
        pub const QueryServiceConfig2 = *opaque{};
        pub const QueryServiceLockStatus = *opaque{};
        pub const RegisterServiceCtrlHandler = *opaque{};
        pub const RegisterServiceCtrlHandlerEx = *opaque{};
        pub const StartServiceCtrlDispatcher = *opaque{};
        pub const StartService = *opaque{};
        pub const NotifyServiceStatusChange = *opaque{};
        pub const ControlServiceEx = *opaque{};
        pub const AuditLookupCategoryName = *opaque{};
        pub const AuditLookupSubCategoryName = *opaque{};
        pub const AuditSetGlobalSacl = *opaque{};
        pub const AuditQueryGlobalSacl = *opaque{};
        pub const AcquireCredentialsHandle = *opaque{};
        pub const AddCredentials = *opaque{};
        pub const ChangeAccountPassword = *opaque{};
        pub const InitializeSecurityContext = *opaque{};
        pub const QueryContextAttributes = *opaque{};
        pub const QueryContextAttributesEx = *opaque{};
        pub const SetContextAttributes = *opaque{};
        pub const QueryCredentialsAttributes = *opaque{};
        pub const QueryCredentialsAttributesEx = *opaque{};
        pub const SetCredentialsAttributes = *opaque{};
        pub const EnumerateSecurityPackages = *opaque{};
        pub const QuerySecurityPackageInfo = *opaque{};
        pub const ImportSecurityContext = *opaque{};
        pub const InitSecurityInterface = *opaque{};
        pub const SaslEnumerateProfiles = *opaque{};
        pub const SaslGetProfilePackage = *opaque{};
        pub const SaslIdentifyPackage = *opaque{};
        pub const SaslInitializeSecurityContext = *opaque{};
        pub const SspiPromptForCredentials = *opaque{};
        pub const AddSecurityPackage = *opaque{};
        pub const DeleteSecurityPackage = *opaque{};
        pub const CredWrite = *opaque{};
        pub const CredRead = *opaque{};
        pub const CredEnumerate = *opaque{};
        pub const CredWriteDomainCredentials = *opaque{};
        pub const CredReadDomainCredentials = *opaque{};
        pub const CredDelete = *opaque{};
        pub const CredRename = *opaque{};
        pub const CredGetTargetInfo = *opaque{};
        pub const CredMarshalCredential = *opaque{};
        pub const CredUnmarshalCredential = *opaque{};
        pub const CredIsMarshaledCredential = *opaque{};
        pub const CredUnPackAuthenticationBuffer = *opaque{};
        pub const CredPackAuthenticationBuffer = *opaque{};
        pub const CredProtect = *opaque{};
        pub const CredUnprotect = *opaque{};
        pub const CredIsProtected = *opaque{};
        pub const CredFindBestCredential = *opaque{};
        pub const CredUIPromptForCredentials = *opaque{};
        pub const CredUIPromptForWindowsCredentials = *opaque{};
        pub const CredUIParseUserName = *opaque{};
        pub const CredUICmdLinePromptForCredentials = *opaque{};
        pub const CredUIConfirmCredentials = *opaque{};
        pub const SslEmptyCache = *opaque{};
        pub const WNetSetLastError = *opaque{};
        pub const SetEntriesInAcl = *opaque{};
        pub const GetExplicitEntriesFromAcl = *opaque{};
        pub const GetEffectiveRightsFromAcl = *opaque{};
        pub const GetAuditedPermissionsFromAcl = *opaque{};
        pub const GetNamedSecurityInfo = *opaque{};
        pub const SetNamedSecurityInfo = *opaque{};
        pub const GetInheritanceSource = *opaque{};
        pub const TreeResetNamedSecurityInfo = *opaque{};
        pub const TreeSetNamedSecurityInfo = *opaque{};
        pub const BuildSecurityDescriptor = *opaque{};
        pub const LookupSecurityDescriptorParts = *opaque{};
        pub const BuildExplicitAccessWithName = *opaque{};
        pub const BuildImpersonateExplicitAccessWithName = *opaque{};
        pub const BuildTrusteeWithName = *opaque{};
        pub const BuildImpersonateTrustee = *opaque{};
        pub const BuildTrusteeWithSid = *opaque{};
        pub const BuildTrusteeWithObjectsAndSid = *opaque{};
        pub const BuildTrusteeWithObjectsAndName = *opaque{};
        pub const GetTrusteeName = *opaque{};
        pub const GetTrusteeType = *opaque{};
        pub const GetTrusteeForm = *opaque{};
        pub const GetMultipleTrusteeOperation = *opaque{};
        pub const GetMultipleTrustee = *opaque{};
        pub const ConvertSidToStringSid = *opaque{};
        pub const ConvertStringSidToSid = *opaque{};
        pub const ConvertStringSecurityDescriptorToSecurityDescriptor = *opaque{};
        pub const ConvertSecurityDescriptorToStringSecurityDescriptor = *opaque{};
        pub const CryptUIDlgViewCertificate = *opaque{};
        pub const LookupAccountSid = *opaque{};
        pub const LookupAccountName = *opaque{};
        pub const LookupPrivilegeValue = *opaque{};
        pub const LookupPrivilegeName = *opaque{};
        pub const LookupPrivilegeDisplayName = *opaque{};
        pub const LogonUser = *opaque{};
        pub const LogonUserEx = *opaque{};
    } else struct {
        pub const CRYPT_PASSWORD_CREDENTIALS = @compileError("'CRYPT_PASSWORD_CREDENTIALS' requires that UNICODE be set to true or false in the root module");
        pub const SCARD_READERSTATE = @compileError("'SCARD_READERSTATE' requires that UNICODE be set to true or false in the root module");
        pub const LPOCNCONNPROC = @compileError("'LPOCNCONNPROC' requires that UNICODE be set to true or false in the root module");
        pub const OPENCARD_SEARCH_CRITERIA = @compileError("'OPENCARD_SEARCH_CRITERIA' requires that UNICODE be set to true or false in the root module");
        pub const OPENCARDNAME_EX = @compileError("'OPENCARDNAME_EX' requires that UNICODE be set to true or false in the root module");
        pub const OPENCARDNAME = @compileError("'OPENCARDNAME' requires that UNICODE be set to true or false in the root module");
        pub const SERVICE_DESCRIPTION = @compileError("'SERVICE_DESCRIPTION' requires that UNICODE be set to true or false in the root module");
        pub const SERVICE_FAILURE_ACTIONS = @compileError("'SERVICE_FAILURE_ACTIONS' requires that UNICODE be set to true or false in the root module");
        pub const SERVICE_REQUIRED_PRIVILEGES_INFO = @compileError("'SERVICE_REQUIRED_PRIVILEGES_INFO' requires that UNICODE be set to true or false in the root module");
        pub const ENUM_SERVICE_STATUS = @compileError("'ENUM_SERVICE_STATUS' requires that UNICODE be set to true or false in the root module");
        pub const ENUM_SERVICE_STATUS_PROCESS = @compileError("'ENUM_SERVICE_STATUS_PROCESS' requires that UNICODE be set to true or false in the root module");
        pub const QUERY_SERVICE_LOCK_STATUS = @compileError("'QUERY_SERVICE_LOCK_STATUS' requires that UNICODE be set to true or false in the root module");
        pub const QUERY_SERVICE_CONFIG = @compileError("'QUERY_SERVICE_CONFIG' requires that UNICODE be set to true or false in the root module");
        pub const SERVICE_MAIN_FUNCTION = @compileError("'SERVICE_MAIN_FUNCTION' requires that UNICODE be set to true or false in the root module");
        pub const LPSERVICE_MAIN_FUNCTION = @compileError("'LPSERVICE_MAIN_FUNCTION' requires that UNICODE be set to true or false in the root module");
        pub const SERVICE_TABLE_ENTRY = @compileError("'SERVICE_TABLE_ENTRY' requires that UNICODE be set to true or false in the root module");
        pub const SERVICE_NOTIFY_2 = @compileError("'SERVICE_NOTIFY_2' requires that UNICODE be set to true or false in the root module");
        pub const SERVICE_CONTROL_STATUS_REASON_PARAMS = @compileError("'SERVICE_CONTROL_STATUS_REASON_PARAMS' requires that UNICODE be set to true or false in the root module");
        pub const SecPkgInfo = @compileError("'SecPkgInfo' requires that UNICODE be set to true or false in the root module");
        pub const SecPkgCredentials_Names = @compileError("'SecPkgCredentials_Names' requires that UNICODE be set to true or false in the root module");
        pub const SecPkgCredentials_SSIProvider = @compileError("'SecPkgCredentials_SSIProvider' requires that UNICODE be set to true or false in the root module");
        pub const SecPkgContext_Names = @compileError("'SecPkgContext_Names' requires that UNICODE be set to true or false in the root module");
        pub const SecPkgContext_KeyInfo = @compileError("'SecPkgContext_KeyInfo' requires that UNICODE be set to true or false in the root module");
        pub const SecPkgContext_Authority = @compileError("'SecPkgContext_Authority' requires that UNICODE be set to true or false in the root module");
        pub const SecPkgContext_ProtoInfo = @compileError("'SecPkgContext_ProtoInfo' requires that UNICODE be set to true or false in the root module");
        pub const SecPkgContext_PackageInfo = @compileError("'SecPkgContext_PackageInfo' requires that UNICODE be set to true or false in the root module");
        pub const SecPkgContext_NegotiationInfo = @compileError("'SecPkgContext_NegotiationInfo' requires that UNICODE be set to true or false in the root module");
        pub const SecPkgContext_NativeNames = @compileError("'SecPkgContext_NativeNames' requires that UNICODE be set to true or false in the root module");
        pub const SecPkgContext_CredentialName = @compileError("'SecPkgContext_CredentialName' requires that UNICODE be set to true or false in the root module");
        pub const ACQUIRE_CREDENTIALS_HANDLE_FN_ = @compileError("'ACQUIRE_CREDENTIALS_HANDLE_FN_' requires that UNICODE be set to true or false in the root module");
        pub const ADD_CREDENTIALS_FN_ = @compileError("'ADD_CREDENTIALS_FN_' requires that UNICODE be set to true or false in the root module");
        pub const CHANGE_PASSWORD_FN_ = @compileError("'CHANGE_PASSWORD_FN_' requires that UNICODE be set to true or false in the root module");
        pub const INITIALIZE_SECURITY_CONTEXT_FN_ = @compileError("'INITIALIZE_SECURITY_CONTEXT_FN_' requires that UNICODE be set to true or false in the root module");
        pub const QUERY_CONTEXT_ATTRIBUTES_FN_ = @compileError("'QUERY_CONTEXT_ATTRIBUTES_FN_' requires that UNICODE be set to true or false in the root module");
        pub const QUERY_CONTEXT_ATTRIBUTES_EX_FN_ = @compileError("'QUERY_CONTEXT_ATTRIBUTES_EX_FN_' requires that UNICODE be set to true or false in the root module");
        pub const SET_CONTEXT_ATTRIBUTES_FN_ = @compileError("'SET_CONTEXT_ATTRIBUTES_FN_' requires that UNICODE be set to true or false in the root module");
        pub const QUERY_CREDENTIALS_ATTRIBUTES_FN_ = @compileError("'QUERY_CREDENTIALS_ATTRIBUTES_FN_' requires that UNICODE be set to true or false in the root module");
        pub const QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_ = @compileError("'QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_' requires that UNICODE be set to true or false in the root module");
        pub const SET_CREDENTIALS_ATTRIBUTES_FN_ = @compileError("'SET_CREDENTIALS_ATTRIBUTES_FN_' requires that UNICODE be set to true or false in the root module");
        pub const ENUMERATE_SECURITY_PACKAGES_FN_ = @compileError("'ENUMERATE_SECURITY_PACKAGES_FN_' requires that UNICODE be set to true or false in the root module");
        pub const QUERY_SECURITY_PACKAGE_INFO_FN_ = @compileError("'QUERY_SECURITY_PACKAGE_INFO_FN_' requires that UNICODE be set to true or false in the root module");
        pub const IMPORT_SECURITY_CONTEXT_FN_ = @compileError("'IMPORT_SECURITY_CONTEXT_FN_' requires that UNICODE be set to true or false in the root module");
        pub const SecurityFunctionTable = @compileError("'SecurityFunctionTable' requires that UNICODE be set to true or false in the root module");
        pub const INIT_SECURITY_INTERFACE_ = @compileError("'INIT_SECURITY_INTERFACE_' requires that UNICODE be set to true or false in the root module");
        pub const SEC_WINNT_AUTH_IDENTITY_EX = @compileError("'SEC_WINNT_AUTH_IDENTITY_EX' requires that UNICODE be set to true or false in the root module");
        pub const CREDENTIAL_ATTRIBUTE = @compileError("'CREDENTIAL_ATTRIBUTE' requires that UNICODE be set to true or false in the root module");
        pub const CREDENTIAL = @compileError("'CREDENTIAL' requires that UNICODE be set to true or false in the root module");
        pub const CREDENTIAL_TARGET_INFORMATION = @compileError("'CREDENTIAL_TARGET_INFORMATION' requires that UNICODE be set to true or false in the root module");
        pub const CREDUI_INFO = @compileError("'CREDUI_INFO' requires that UNICODE be set to true or false in the root module");
        pub const SSL_EMPTY_CACHE_FN_ = @compileError("'SSL_EMPTY_CACHE_FN_' requires that UNICODE be set to true or false in the root module");
        pub const OBJECTS_AND_NAME_ = @compileError("'OBJECTS_AND_NAME_' requires that UNICODE be set to true or false in the root module");
        pub const TRUSTEE_ = @compileError("'TRUSTEE_' requires that UNICODE be set to true or false in the root module");
        pub const EXPLICIT_ACCESS_ = @compileError("'EXPLICIT_ACCESS_' requires that UNICODE be set to true or false in the root module");
        pub const TRUSTEE_ACCESS = @compileError("'TRUSTEE_ACCESS' requires that UNICODE be set to true or false in the root module");
        pub const ACTRL_ACCESS_INFO = @compileError("'ACTRL_ACCESS_INFO' requires that UNICODE be set to true or false in the root module");
        pub const ACTRL_CONTROL_INFO = @compileError("'ACTRL_CONTROL_INFO' requires that UNICODE be set to true or false in the root module");
        pub const INHERITED_FROM = @compileError("'INHERITED_FROM' requires that UNICODE be set to true or false in the root module");
        pub const CERT_SELECT_STRUCT_ = @compileError("'CERT_SELECT_STRUCT_' requires that UNICODE be set to true or false in the root module");
        pub const CERT_VIEWPROPERTIES_STRUCT_ = @compileError("'CERT_VIEWPROPERTIES_STRUCT_' requires that UNICODE be set to true or false in the root module");
        pub const CRYPTUI_VIEWCERTIFICATE_STRUCT = @compileError("'CRYPTUI_VIEWCERTIFICATE_STRUCT' requires that UNICODE be set to true or false in the root module");
        pub const SEC_WINNT_AUTH_IDENTITY_ = @compileError("'SEC_WINNT_AUTH_IDENTITY_' requires that UNICODE be set to true or false in the root module");
        pub const NETRESOURCE = @compileError("'NETRESOURCE' requires that UNICODE be set to true or false in the root module");
        pub const UNIVERSAL_NAME_INFO = @compileError("'UNIVERSAL_NAME_INFO' requires that UNICODE be set to true or false in the root module");
        pub const REMOTE_NAME_INFO = @compileError("'REMOTE_NAME_INFO' requires that UNICODE be set to true or false in the root module");
        pub const AccessCheckAndAuditAlarm = @compileError("'AccessCheckAndAuditAlarm' requires that UNICODE be set to true or false in the root module");
        pub const AccessCheckByTypeAndAuditAlarm = @compileError("'AccessCheckByTypeAndAuditAlarm' requires that UNICODE be set to true or false in the root module");
        pub const AccessCheckByTypeResultListAndAuditAlarm = @compileError("'AccessCheckByTypeResultListAndAuditAlarm' requires that UNICODE be set to true or false in the root module");
        pub const AccessCheckByTypeResultListAndAuditAlarmByHandle = @compileError("'AccessCheckByTypeResultListAndAuditAlarmByHandle' requires that UNICODE be set to true or false in the root module");
        pub const GetFileSecurity = @compileError("'GetFileSecurity' requires that UNICODE be set to true or false in the root module");
        pub const ObjectCloseAuditAlarm = @compileError("'ObjectCloseAuditAlarm' requires that UNICODE be set to true or false in the root module");
        pub const ObjectDeleteAuditAlarm = @compileError("'ObjectDeleteAuditAlarm' requires that UNICODE be set to true or false in the root module");
        pub const ObjectOpenAuditAlarm = @compileError("'ObjectOpenAuditAlarm' requires that UNICODE be set to true or false in the root module");
        pub const ObjectPrivilegeAuditAlarm = @compileError("'ObjectPrivilegeAuditAlarm' requires that UNICODE be set to true or false in the root module");
        pub const PrivilegedServiceAuditAlarm = @compileError("'PrivilegedServiceAuditAlarm' requires that UNICODE be set to true or false in the root module");
        pub const SetFileSecurity = @compileError("'SetFileSecurity' requires that UNICODE be set to true or false in the root module");
        pub const CryptAcquireContext = @compileError("'CryptAcquireContext' requires that UNICODE be set to true or false in the root module");
        pub const CryptSignHash = @compileError("'CryptSignHash' requires that UNICODE be set to true or false in the root module");
        pub const CryptVerifySignature = @compileError("'CryptVerifySignature' requires that UNICODE be set to true or false in the root module");
        pub const CryptSetProvider = @compileError("'CryptSetProvider' requires that UNICODE be set to true or false in the root module");
        pub const CryptSetProviderEx = @compileError("'CryptSetProviderEx' requires that UNICODE be set to true or false in the root module");
        pub const CryptGetDefaultProvider = @compileError("'CryptGetDefaultProvider' requires that UNICODE be set to true or false in the root module");
        pub const CryptEnumProviderTypes = @compileError("'CryptEnumProviderTypes' requires that UNICODE be set to true or false in the root module");
        pub const CryptEnumProviders = @compileError("'CryptEnumProviders' requires that UNICODE be set to true or false in the root module");
        pub const CertRDNValueToStr = @compileError("'CertRDNValueToStr' requires that UNICODE be set to true or false in the root module");
        pub const CertNameToStr = @compileError("'CertNameToStr' requires that UNICODE be set to true or false in the root module");
        pub const CertStrToName = @compileError("'CertStrToName' requires that UNICODE be set to true or false in the root module");
        pub const CertGetNameString = @compileError("'CertGetNameString' requires that UNICODE be set to true or false in the root module");
        pub const CertOpenSystemStore = @compileError("'CertOpenSystemStore' requires that UNICODE be set to true or false in the root module");
        pub const CertAddEncodedCertificateToSystemStore = @compileError("'CertAddEncodedCertificateToSystemStore' requires that UNICODE be set to true or false in the root module");
        pub const CryptRetrieveObjectByUrl = @compileError("'CryptRetrieveObjectByUrl' requires that UNICODE be set to true or false in the root module");
        pub const CryptStringToBinary = @compileError("'CryptStringToBinary' requires that UNICODE be set to true or false in the root module");
        pub const CryptBinaryToString = @compileError("'CryptBinaryToString' requires that UNICODE be set to true or false in the root module");
        pub const SCardListReaderGroups = @compileError("'SCardListReaderGroups' requires that UNICODE be set to true or false in the root module");
        pub const SCardListReaders = @compileError("'SCardListReaders' requires that UNICODE be set to true or false in the root module");
        pub const SCardListCards = @compileError("'SCardListCards' requires that UNICODE be set to true or false in the root module");
        pub const SCardListInterfaces = @compileError("'SCardListInterfaces' requires that UNICODE be set to true or false in the root module");
        pub const SCardGetProviderId = @compileError("'SCardGetProviderId' requires that UNICODE be set to true or false in the root module");
        pub const SCardGetCardTypeProviderName = @compileError("'SCardGetCardTypeProviderName' requires that UNICODE be set to true or false in the root module");
        pub const SCardIntroduceReaderGroup = @compileError("'SCardIntroduceReaderGroup' requires that UNICODE be set to true or false in the root module");
        pub const SCardForgetReaderGroup = @compileError("'SCardForgetReaderGroup' requires that UNICODE be set to true or false in the root module");
        pub const SCardIntroduceReader = @compileError("'SCardIntroduceReader' requires that UNICODE be set to true or false in the root module");
        pub const SCardForgetReader = @compileError("'SCardForgetReader' requires that UNICODE be set to true or false in the root module");
        pub const SCardAddReaderToGroup = @compileError("'SCardAddReaderToGroup' requires that UNICODE be set to true or false in the root module");
        pub const SCardRemoveReaderFromGroup = @compileError("'SCardRemoveReaderFromGroup' requires that UNICODE be set to true or false in the root module");
        pub const SCardIntroduceCardType = @compileError("'SCardIntroduceCardType' requires that UNICODE be set to true or false in the root module");
        pub const SCardSetCardTypeProviderName = @compileError("'SCardSetCardTypeProviderName' requires that UNICODE be set to true or false in the root module");
        pub const SCardForgetCardType = @compileError("'SCardForgetCardType' requires that UNICODE be set to true or false in the root module");
        pub const SCardLocateCards = @compileError("'SCardLocateCards' requires that UNICODE be set to true or false in the root module");
        pub const SCardLocateCardsByATR = @compileError("'SCardLocateCardsByATR' requires that UNICODE be set to true or false in the root module");
        pub const SCardGetStatusChange = @compileError("'SCardGetStatusChange' requires that UNICODE be set to true or false in the root module");
        pub const SCardConnect = @compileError("'SCardConnect' requires that UNICODE be set to true or false in the root module");
        pub const SCardStatus = @compileError("'SCardStatus' requires that UNICODE be set to true or false in the root module");
        pub const SCardUIDlgSelectCard = @compileError("'SCardUIDlgSelectCard' requires that UNICODE be set to true or false in the root module");
        pub const GetOpenCardName = @compileError("'GetOpenCardName' requires that UNICODE be set to true or false in the root module");
        pub const SCardReadCache = @compileError("'SCardReadCache' requires that UNICODE be set to true or false in the root module");
        pub const SCardWriteCache = @compileError("'SCardWriteCache' requires that UNICODE be set to true or false in the root module");
        pub const SCardGetReaderIcon = @compileError("'SCardGetReaderIcon' requires that UNICODE be set to true or false in the root module");
        pub const SCardGetDeviceTypeId = @compileError("'SCardGetDeviceTypeId' requires that UNICODE be set to true or false in the root module");
        pub const SCardGetReaderDeviceInstanceId = @compileError("'SCardGetReaderDeviceInstanceId' requires that UNICODE be set to true or false in the root module");
        pub const SCardListReadersWithDeviceInstanceId = @compileError("'SCardListReadersWithDeviceInstanceId' requires that UNICODE be set to true or false in the root module");
        pub const ChangeServiceConfig2 = @compileError("'ChangeServiceConfig2' requires that UNICODE be set to true or false in the root module");
        pub const EnumDependentServices = @compileError("'EnumDependentServices' requires that UNICODE be set to true or false in the root module");
        pub const EnumServicesStatus = @compileError("'EnumServicesStatus' requires that UNICODE be set to true or false in the root module");
        pub const EnumServicesStatusEx = @compileError("'EnumServicesStatusEx' requires that UNICODE be set to true or false in the root module");
        pub const GetServiceKeyName = @compileError("'GetServiceKeyName' requires that UNICODE be set to true or false in the root module");
        pub const GetServiceDisplayName = @compileError("'GetServiceDisplayName' requires that UNICODE be set to true or false in the root module");
        pub const OpenSCManager = @compileError("'OpenSCManager' requires that UNICODE be set to true or false in the root module");
        pub const OpenService = @compileError("'OpenService' requires that UNICODE be set to true or false in the root module");
        pub const QueryServiceConfig = @compileError("'QueryServiceConfig' requires that UNICODE be set to true or false in the root module");
        pub const QueryServiceConfig2 = @compileError("'QueryServiceConfig2' requires that UNICODE be set to true or false in the root module");
        pub const QueryServiceLockStatus = @compileError("'QueryServiceLockStatus' requires that UNICODE be set to true or false in the root module");
        pub const RegisterServiceCtrlHandler = @compileError("'RegisterServiceCtrlHandler' requires that UNICODE be set to true or false in the root module");
        pub const RegisterServiceCtrlHandlerEx = @compileError("'RegisterServiceCtrlHandlerEx' requires that UNICODE be set to true or false in the root module");
        pub const StartServiceCtrlDispatcher = @compileError("'StartServiceCtrlDispatcher' requires that UNICODE be set to true or false in the root module");
        pub const StartService = @compileError("'StartService' requires that UNICODE be set to true or false in the root module");
        pub const NotifyServiceStatusChange = @compileError("'NotifyServiceStatusChange' requires that UNICODE be set to true or false in the root module");
        pub const ControlServiceEx = @compileError("'ControlServiceEx' requires that UNICODE be set to true or false in the root module");
        pub const AuditLookupCategoryName = @compileError("'AuditLookupCategoryName' requires that UNICODE be set to true or false in the root module");
        pub const AuditLookupSubCategoryName = @compileError("'AuditLookupSubCategoryName' requires that UNICODE be set to true or false in the root module");
        pub const AuditSetGlobalSacl = @compileError("'AuditSetGlobalSacl' requires that UNICODE be set to true or false in the root module");
        pub const AuditQueryGlobalSacl = @compileError("'AuditQueryGlobalSacl' requires that UNICODE be set to true or false in the root module");
        pub const AcquireCredentialsHandle = @compileError("'AcquireCredentialsHandle' requires that UNICODE be set to true or false in the root module");
        pub const AddCredentials = @compileError("'AddCredentials' requires that UNICODE be set to true or false in the root module");
        pub const ChangeAccountPassword = @compileError("'ChangeAccountPassword' requires that UNICODE be set to true or false in the root module");
        pub const InitializeSecurityContext = @compileError("'InitializeSecurityContext' requires that UNICODE be set to true or false in the root module");
        pub const QueryContextAttributes = @compileError("'QueryContextAttributes' requires that UNICODE be set to true or false in the root module");
        pub const QueryContextAttributesEx = @compileError("'QueryContextAttributesEx' requires that UNICODE be set to true or false in the root module");
        pub const SetContextAttributes = @compileError("'SetContextAttributes' requires that UNICODE be set to true or false in the root module");
        pub const QueryCredentialsAttributes = @compileError("'QueryCredentialsAttributes' requires that UNICODE be set to true or false in the root module");
        pub const QueryCredentialsAttributesEx = @compileError("'QueryCredentialsAttributesEx' requires that UNICODE be set to true or false in the root module");
        pub const SetCredentialsAttributes = @compileError("'SetCredentialsAttributes' requires that UNICODE be set to true or false in the root module");
        pub const EnumerateSecurityPackages = @compileError("'EnumerateSecurityPackages' requires that UNICODE be set to true or false in the root module");
        pub const QuerySecurityPackageInfo = @compileError("'QuerySecurityPackageInfo' requires that UNICODE be set to true or false in the root module");
        pub const ImportSecurityContext = @compileError("'ImportSecurityContext' requires that UNICODE be set to true or false in the root module");
        pub const InitSecurityInterface = @compileError("'InitSecurityInterface' requires that UNICODE be set to true or false in the root module");
        pub const SaslEnumerateProfiles = @compileError("'SaslEnumerateProfiles' requires that UNICODE be set to true or false in the root module");
        pub const SaslGetProfilePackage = @compileError("'SaslGetProfilePackage' requires that UNICODE be set to true or false in the root module");
        pub const SaslIdentifyPackage = @compileError("'SaslIdentifyPackage' requires that UNICODE be set to true or false in the root module");
        pub const SaslInitializeSecurityContext = @compileError("'SaslInitializeSecurityContext' requires that UNICODE be set to true or false in the root module");
        pub const SspiPromptForCredentials = @compileError("'SspiPromptForCredentials' requires that UNICODE be set to true or false in the root module");
        pub const AddSecurityPackage = @compileError("'AddSecurityPackage' requires that UNICODE be set to true or false in the root module");
        pub const DeleteSecurityPackage = @compileError("'DeleteSecurityPackage' requires that UNICODE be set to true or false in the root module");
        pub const CredWrite = @compileError("'CredWrite' requires that UNICODE be set to true or false in the root module");
        pub const CredRead = @compileError("'CredRead' requires that UNICODE be set to true or false in the root module");
        pub const CredEnumerate = @compileError("'CredEnumerate' requires that UNICODE be set to true or false in the root module");
        pub const CredWriteDomainCredentials = @compileError("'CredWriteDomainCredentials' requires that UNICODE be set to true or false in the root module");
        pub const CredReadDomainCredentials = @compileError("'CredReadDomainCredentials' requires that UNICODE be set to true or false in the root module");
        pub const CredDelete = @compileError("'CredDelete' requires that UNICODE be set to true or false in the root module");
        pub const CredRename = @compileError("'CredRename' requires that UNICODE be set to true or false in the root module");
        pub const CredGetTargetInfo = @compileError("'CredGetTargetInfo' requires that UNICODE be set to true or false in the root module");
        pub const CredMarshalCredential = @compileError("'CredMarshalCredential' requires that UNICODE be set to true or false in the root module");
        pub const CredUnmarshalCredential = @compileError("'CredUnmarshalCredential' requires that UNICODE be set to true or false in the root module");
        pub const CredIsMarshaledCredential = @compileError("'CredIsMarshaledCredential' requires that UNICODE be set to true or false in the root module");
        pub const CredUnPackAuthenticationBuffer = @compileError("'CredUnPackAuthenticationBuffer' requires that UNICODE be set to true or false in the root module");
        pub const CredPackAuthenticationBuffer = @compileError("'CredPackAuthenticationBuffer' requires that UNICODE be set to true or false in the root module");
        pub const CredProtect = @compileError("'CredProtect' requires that UNICODE be set to true or false in the root module");
        pub const CredUnprotect = @compileError("'CredUnprotect' requires that UNICODE be set to true or false in the root module");
        pub const CredIsProtected = @compileError("'CredIsProtected' requires that UNICODE be set to true or false in the root module");
        pub const CredFindBestCredential = @compileError("'CredFindBestCredential' requires that UNICODE be set to true or false in the root module");
        pub const CredUIPromptForCredentials = @compileError("'CredUIPromptForCredentials' requires that UNICODE be set to true or false in the root module");
        pub const CredUIPromptForWindowsCredentials = @compileError("'CredUIPromptForWindowsCredentials' requires that UNICODE be set to true or false in the root module");
        pub const CredUIParseUserName = @compileError("'CredUIParseUserName' requires that UNICODE be set to true or false in the root module");
        pub const CredUICmdLinePromptForCredentials = @compileError("'CredUICmdLinePromptForCredentials' requires that UNICODE be set to true or false in the root module");
        pub const CredUIConfirmCredentials = @compileError("'CredUIConfirmCredentials' requires that UNICODE be set to true or false in the root module");
        pub const SslEmptyCache = @compileError("'SslEmptyCache' requires that UNICODE be set to true or false in the root module");
        pub const WNetSetLastError = @compileError("'WNetSetLastError' requires that UNICODE be set to true or false in the root module");
        pub const SetEntriesInAcl = @compileError("'SetEntriesInAcl' requires that UNICODE be set to true or false in the root module");
        pub const GetExplicitEntriesFromAcl = @compileError("'GetExplicitEntriesFromAcl' requires that UNICODE be set to true or false in the root module");
        pub const GetEffectiveRightsFromAcl = @compileError("'GetEffectiveRightsFromAcl' requires that UNICODE be set to true or false in the root module");
        pub const GetAuditedPermissionsFromAcl = @compileError("'GetAuditedPermissionsFromAcl' requires that UNICODE be set to true or false in the root module");
        pub const GetNamedSecurityInfo = @compileError("'GetNamedSecurityInfo' requires that UNICODE be set to true or false in the root module");
        pub const SetNamedSecurityInfo = @compileError("'SetNamedSecurityInfo' requires that UNICODE be set to true or false in the root module");
        pub const GetInheritanceSource = @compileError("'GetInheritanceSource' requires that UNICODE be set to true or false in the root module");
        pub const TreeResetNamedSecurityInfo = @compileError("'TreeResetNamedSecurityInfo' requires that UNICODE be set to true or false in the root module");
        pub const TreeSetNamedSecurityInfo = @compileError("'TreeSetNamedSecurityInfo' requires that UNICODE be set to true or false in the root module");
        pub const BuildSecurityDescriptor = @compileError("'BuildSecurityDescriptor' requires that UNICODE be set to true or false in the root module");
        pub const LookupSecurityDescriptorParts = @compileError("'LookupSecurityDescriptorParts' requires that UNICODE be set to true or false in the root module");
        pub const BuildExplicitAccessWithName = @compileError("'BuildExplicitAccessWithName' requires that UNICODE be set to true or false in the root module");
        pub const BuildImpersonateExplicitAccessWithName = @compileError("'BuildImpersonateExplicitAccessWithName' requires that UNICODE be set to true or false in the root module");
        pub const BuildTrusteeWithName = @compileError("'BuildTrusteeWithName' requires that UNICODE be set to true or false in the root module");
        pub const BuildImpersonateTrustee = @compileError("'BuildImpersonateTrustee' requires that UNICODE be set to true or false in the root module");
        pub const BuildTrusteeWithSid = @compileError("'BuildTrusteeWithSid' requires that UNICODE be set to true or false in the root module");
        pub const BuildTrusteeWithObjectsAndSid = @compileError("'BuildTrusteeWithObjectsAndSid' requires that UNICODE be set to true or false in the root module");
        pub const BuildTrusteeWithObjectsAndName = @compileError("'BuildTrusteeWithObjectsAndName' requires that UNICODE be set to true or false in the root module");
        pub const GetTrusteeName = @compileError("'GetTrusteeName' requires that UNICODE be set to true or false in the root module");
        pub const GetTrusteeType = @compileError("'GetTrusteeType' requires that UNICODE be set to true or false in the root module");
        pub const GetTrusteeForm = @compileError("'GetTrusteeForm' requires that UNICODE be set to true or false in the root module");
        pub const GetMultipleTrusteeOperation = @compileError("'GetMultipleTrusteeOperation' requires that UNICODE be set to true or false in the root module");
        pub const GetMultipleTrustee = @compileError("'GetMultipleTrustee' requires that UNICODE be set to true or false in the root module");
        pub const ConvertSidToStringSid = @compileError("'ConvertSidToStringSid' requires that UNICODE be set to true or false in the root module");
        pub const ConvertStringSidToSid = @compileError("'ConvertStringSidToSid' requires that UNICODE be set to true or false in the root module");
        pub const ConvertStringSecurityDescriptorToSecurityDescriptor = @compileError("'ConvertStringSecurityDescriptorToSecurityDescriptor' requires that UNICODE be set to true or false in the root module");
        pub const ConvertSecurityDescriptorToStringSecurityDescriptor = @compileError("'ConvertSecurityDescriptorToStringSecurityDescriptor' requires that UNICODE be set to true or false in the root module");
        pub const CryptUIDlgViewCertificate = @compileError("'CryptUIDlgViewCertificate' requires that UNICODE be set to true or false in the root module");
        pub const LookupAccountSid = @compileError("'LookupAccountSid' requires that UNICODE be set to true or false in the root module");
        pub const LookupAccountName = @compileError("'LookupAccountName' requires that UNICODE be set to true or false in the root module");
        pub const LookupPrivilegeValue = @compileError("'LookupPrivilegeValue' requires that UNICODE be set to true or false in the root module");
        pub const LookupPrivilegeName = @compileError("'LookupPrivilegeName' requires that UNICODE be set to true or false in the root module");
        pub const LookupPrivilegeDisplayName = @compileError("'LookupPrivilegeDisplayName' requires that UNICODE be set to true or false in the root module");
        pub const LogonUser = @compileError("'LogonUser' requires that UNICODE be set to true or false in the root module");
        pub const LogonUserEx = @compileError("'LogonUserEx' requires that UNICODE be set to true or false in the root module");
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const LUID = @import("kernel.zig").LUID;
const HANDLE = @import("systemservices.zig").HANDLE;
const LARGE_INTEGER = @import("systemservices.zig").LARGE_INTEGER;
const BOOL = @import("systemservices.zig").BOOL;
const FILETIME = @import("windowsprogramming.zig").FILETIME;
const HKEY = @import("windowsprogramming.zig").HKEY;
const HWND = @import("windowsandmessaging.zig").HWND;
const HICON = @import("gdi.zig").HICON;
const STRING = @import("windowsprogramming.zig").STRING;
const NTSTATUS = @import("systemservices.zig").NTSTATUS;
const HBITMAP = @import("gdi.zig").HBITMAP;
const LIST_ENTRY = @import("kernel.zig").LIST_ENTRY;
const HRESULT = @import("com.zig").HRESULT;
const HDESK = @import("windowsstationsanddesktops.zig").HDESK;
const CYPHER_BLOCK = @import("passwordmanagement.zig").CYPHER_BLOCK;
const LM_OWF_PASSWORD = @import("passwordmanagement.zig").LM_OWF_PASSWORD;
const HINSTANCE = @import("systemservices.zig").HINSTANCE;
const LPARAM = @import("windowsandmessaging.zig").LPARAM;
const PROPSHEETPAGEA = @import("controls.zig").PROPSHEETPAGEA;
const PROPSHEETPAGEW = @import("controls.zig").PROPSHEETPAGEW;
const SECURITY_ATTRIBUTES = @import("systemservices.zig").SECURITY_ATTRIBUTES;
const SYSTEMTIME = @import("windowsprogramming.zig").SYSTEMTIME;
const SCARD_IO_REQUEST = @import("systemservices.zig").SCARD_IO_REQUEST;
const OBJECT_ATTRIBUTES = @import("windowsprogramming.zig").OBJECT_ATTRIBUTES;
const LPTHREAD_START_ROUTINE = @import("systemservices.zig").LPTHREAD_START_ROUTINE;
const HPROPSHEETPAGE = @import("controls.zig").HPROPSHEETPAGE;
const LSTATUS = @import("systemservices.zig").LSTATUS;

test "" {
    const constant_export_count = 7;
    const type_export_count = 2017;
    const func_count = 1169;
    const unicode_alias_count = 221;
    const type_import_count = 28;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
