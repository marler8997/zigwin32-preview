//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//
pub const JS_SOURCE_CONTEXT_NONE : u64 = 18446744073709551615;
pub const JsRuntimeVersionEdge : i32 = -1;

//
// types
//
// --------------------------------------------------------
// Type: JsRuntimeVersion
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const JsRuntimeVersion = *opaque{
};
// --------------------------------------------------------
// Type: JsErrorCode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const JsErrorCode = *opaque{
};
// --------------------------------------------------------
// Type: JsRuntimeAttributes
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const JsRuntimeAttributes = *opaque{
};
// --------------------------------------------------------
// Type: JsMemoryEventType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const JsMemoryEventType = *opaque{
};
// --------------------------------------------------------
// Type: JsMemoryAllocationCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const JsMemoryAllocationCallback = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: JsBeforeCollectCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const JsBeforeCollectCallback = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: JsBackgroundWorkItemCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const JsBackgroundWorkItemCallback = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: JsThreadServiceCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const JsThreadServiceCallback = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: JsValueType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const JsValueType = *opaque{
};
// --------------------------------------------------------
// Type: JsFinalizeCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const JsFinalizeCallback = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: JsNativeFunction
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const JsNativeFunction = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsCreateRuntime(
    attributes: JsRuntimeAttributes,
    runtimeVersion: JsRuntimeVersion,
    threadService: JsThreadServiceCallback,
    runtime: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsCollectGarbage(
    runtime: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsDisposeRuntime(
    runtime: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsGetRuntimeMemoryUsage(
    runtime: ?*opaque{},
    memoryUsage: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsGetRuntimeMemoryLimit(
    runtime: ?*opaque{},
    memoryLimit: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsSetRuntimeMemoryLimit(
    runtime: ?*opaque{},
    memoryLimit: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsSetRuntimeMemoryAllocationCallback(
    runtime: ?*opaque{},
    callbackState: ?*opaque{},
    allocationCallback: JsMemoryAllocationCallback,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsSetRuntimeBeforeCollectCallback(
    runtime: ?*opaque{},
    callbackState: ?*opaque{},
    beforeCollectCallback: JsBeforeCollectCallback,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsAddRef(
    ref: ?*opaque{},
    count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsRelease(
    ref: ?*opaque{},
    count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsCreateContext(
    runtime: ?*opaque{},
    debugApplication: IDebugApplication32,
    newContext: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsGetCurrentContext(
    currentContext: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsSetCurrentContext(
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsGetRuntime(
    context: ?*opaque{},
    runtime: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsStartDebugging(
    debugApplication: IDebugApplication32,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsIdle(
    nextIdleTick: ?*u32,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsParseScript(
    script: ?*u16,
    sourceContext: ?*opaque{},
    sourceUrl: ?*u16,
    result: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsRunScript(
    script: ?*u16,
    sourceContext: ?*opaque{},
    sourceUrl: ?*u16,
    result: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsSerializeScript(
    script: ?*u16,
    buffer: ?*u8,
    bufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsParseSerializedScript(
    script: ?*u16,
    buffer: ?*u8,
    sourceContext: ?*opaque{},
    sourceUrl: ?*u16,
    result: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsRunSerializedScript(
    script: ?*u16,
    buffer: ?*u8,
    sourceContext: ?*opaque{},
    sourceUrl: ?*u16,
    result: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsGetPropertyIdFromName(
    name: ?*u16,
    propertyId: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsGetPropertyNameFromId(
    propertyId: ?*opaque{},
    name: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsGetUndefinedValue(
    undefinedValue: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsGetNullValue(
    nullValue: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsGetTrueValue(
    trueValue: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsGetFalseValue(
    falseValue: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsBoolToBoolean(
    value: u8,
    booleanValue: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsBooleanToBool(
    value: ?*opaque{},
    boolValue: ?*bool,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsConvertValueToBoolean(
    value: ?*opaque{},
    booleanValue: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsGetValueType(
    value: ?*opaque{},
    type: ?*JsValueType,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsDoubleToNumber(
    doubleValue: f64,
    value: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsIntToNumber(
    intValue: i32,
    value: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsNumberToDouble(
    value: ?*opaque{},
    doubleValue: ?*f64,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsConvertValueToNumber(
    value: ?*opaque{},
    numberValue: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsGetStringLength(
    stringValue: ?*opaque{},
    length: ?*i32,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsPointerToString(
    stringValue: ?*u16,
    stringLength: ?*opaque{},
    value: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsStringToPointer(
    value: ?*opaque{},
    stringValue: ?*?*u16,
    stringLength: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsConvertValueToString(
    value: ?*opaque{},
    stringValue: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsVariantToValue(
    variant: ?*VARIANT,
    value: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsValueToVariant(
    object: ?*opaque{},
    variant: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsGetGlobalObject(
    globalObject: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsCreateObject(
    object: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsCreateExternalObject(
    data: ?*opaque{},
    finalizeCallback: JsFinalizeCallback,
    object: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsConvertValueToObject(
    value: ?*opaque{},
    object: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsGetPrototype(
    object: ?*opaque{},
    prototypeObject: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsSetPrototype(
    object: ?*opaque{},
    prototypeObject: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsGetExtensionAllowed(
    object: ?*opaque{},
    value: ?*bool,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsPreventExtension(
    object: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsGetProperty(
    object: ?*opaque{},
    propertyId: ?*opaque{},
    value: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsGetOwnPropertyDescriptor(
    object: ?*opaque{},
    propertyId: ?*opaque{},
    propertyDescriptor: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsGetOwnPropertyNames(
    object: ?*opaque{},
    propertyNames: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsSetProperty(
    object: ?*opaque{},
    propertyId: ?*opaque{},
    value: ?*opaque{},
    useStrictRules: u8,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsHasProperty(
    object: ?*opaque{},
    propertyId: ?*opaque{},
    hasProperty: ?*bool,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsDeleteProperty(
    object: ?*opaque{},
    propertyId: ?*opaque{},
    useStrictRules: u8,
    result: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsDefineProperty(
    object: ?*opaque{},
    propertyId: ?*opaque{},
    propertyDescriptor: ?*opaque{},
    result: ?*bool,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsHasIndexedProperty(
    object: ?*opaque{},
    index: ?*opaque{},
    result: ?*bool,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsGetIndexedProperty(
    object: ?*opaque{},
    index: ?*opaque{},
    result: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsSetIndexedProperty(
    object: ?*opaque{},
    index: ?*opaque{},
    value: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsDeleteIndexedProperty(
    object: ?*opaque{},
    index: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsEquals(
    object1: ?*opaque{},
    object2: ?*opaque{},
    result: ?*bool,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsStrictEquals(
    object1: ?*opaque{},
    object2: ?*opaque{},
    result: ?*bool,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsHasExternalData(
    object: ?*opaque{},
    value: ?*bool,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsGetExternalData(
    object: ?*opaque{},
    externalData: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsSetExternalData(
    object: ?*opaque{},
    externalData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsCreateArray(
    length: u32,
    result: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsCallFunction(
    function: ?*opaque{},
    arguments: ?*?*opaque{},
    argumentCount: u16,
    result: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsConstructObject(
    function: ?*opaque{},
    arguments: ?*?*opaque{},
    argumentCount: u16,
    result: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsCreateFunction(
    nativeFunction: JsNativeFunction,
    callbackState: ?*opaque{},
    function: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsCreateError(
    message: ?*opaque{},
    @"error": ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsCreateRangeError(
    message: ?*opaque{},
    @"error": ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsCreateReferenceError(
    message: ?*opaque{},
    @"error": ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsCreateSyntaxError(
    message: ?*opaque{},
    @"error": ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsCreateTypeError(
    message: ?*opaque{},
    @"error": ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsCreateURIError(
    message: ?*opaque{},
    @"error": ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsHasException(
    hasException: ?*bool,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsGetAndClearException(
    exception: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsSetException(
    exception: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsDisableRuntimeExecution(
    runtime: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsEnableRuntimeExecution(
    runtime: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsIsRuntimeExecutionDisabled(
    runtime: ?*opaque{},
    isDisabled: ?*bool,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsStartProfiling(
    callback: IActiveScriptProfilerCallback,
    eventMask: __MIDL___MIDL_itf_activprof_0000_0000_0002,
    context: u32,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsStopProfiling(
    reason: HRESULT,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsEnumerateHeap(
    enumerator: ?*IActiveScriptProfilerHeapEnum,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

// set_last_errror=False (can and should we use this?)
pub extern "chakra" fn JsIsEnumeratingHeap(
    isEnumeratingHeap: ?*bool,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const IDebugApplication32 = @import("debug.zig").IDebugApplication32;
const VARIANT = @import("automation.zig").VARIANT;
const IActiveScriptProfilerCallback = @import("debug.zig").IActiveScriptProfilerCallback;
const __MIDL___MIDL_itf_activprof_0000_0000_0002 = @import("debug.zig").__MIDL___MIDL_itf_activprof_0000_0000_0002;
const HRESULT = @import("com.zig").HRESULT;
const IActiveScriptProfilerHeapEnum = @import("debug.zig").IActiveScriptProfilerHeapEnum;

test "" {
    const constant_export_count = 2;
    const type_export_count = 11;
    const func_count = 85;
    const unicode_alias_count = 0;
    const type_import_count = 6;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
