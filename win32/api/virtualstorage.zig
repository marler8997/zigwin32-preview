//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: VIRTUAL_STORAGE_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIRTUAL_STORAGE_TYPE = extern struct {
    DeviceId: u32,
    VendorId: Guid,
};
// --------------------------------------------------------
// Type: OPEN_VIRTUAL_DISK_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OPEN_VIRTUAL_DISK_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: OPEN_VIRTUAL_DISK_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OPEN_VIRTUAL_DISK_PARAMETERS = extern struct {
    Version: OPEN_VIRTUAL_DISK_VERSION,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Version2_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Version2_e__Struct = extern struct {
            GetInfoOnly: BOOL,
            ReadOnly: BOOL,
            ResiliencyGuid: Guid,
        };
        // --------------------------------------------------------
        // Type: _Version3_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Version3_e__Struct = extern struct {
            GetInfoOnly: BOOL,
            ReadOnly: BOOL,
            ResiliencyGuid: Guid,
            SnapshotId: Guid,
        };
        // --------------------------------------------------------
        // Type: _Version1_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Version1_e__Struct = extern struct {
            RWDepth: u32,
        };
    };
};
// --------------------------------------------------------
// Type: VIRTUAL_DISK_ACCESS_MASK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VIRTUAL_DISK_ACCESS_MASK = *opaque{
};
// --------------------------------------------------------
// Type: OPEN_VIRTUAL_DISK_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OPEN_VIRTUAL_DISK_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: CREATE_VIRTUAL_DISK_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CREATE_VIRTUAL_DISK_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: CREATE_VIRTUAL_DISK_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CREATE_VIRTUAL_DISK_PARAMETERS = extern struct {
    Version: CREATE_VIRTUAL_DISK_VERSION,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Version3_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Version3_e__Struct = extern struct {
            UniqueId: Guid,
            MaximumSize: u64,
            BlockSizeInBytes: u32,
            SectorSizeInBytes: u32,
            PhysicalSectorSizeInBytes: u32,
            ParentPath: ?*u16,
            SourcePath: ?*u16,
            OpenFlags: OPEN_VIRTUAL_DISK_FLAG,
            ParentVirtualStorageType: VIRTUAL_STORAGE_TYPE,
            SourceVirtualStorageType: VIRTUAL_STORAGE_TYPE,
            ResiliencyGuid: Guid,
            SourceLimitPath: ?*u16,
            BackingStorageType: VIRTUAL_STORAGE_TYPE,
        };
        // --------------------------------------------------------
        // Type: _Version1_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Version1_e__Struct = extern struct {
            UniqueId: Guid,
            MaximumSize: u64,
            BlockSizeInBytes: u32,
            SectorSizeInBytes: u32,
            ParentPath: ?*u16,
            SourcePath: ?*u16,
        };
        // --------------------------------------------------------
        // Type: _Version4_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Version4_e__Struct = extern struct {
            UniqueId: Guid,
            MaximumSize: u64,
            BlockSizeInBytes: u32,
            SectorSizeInBytes: u32,
            PhysicalSectorSizeInBytes: u32,
            ParentPath: ?*u16,
            SourcePath: ?*u16,
            OpenFlags: OPEN_VIRTUAL_DISK_FLAG,
            ParentVirtualStorageType: VIRTUAL_STORAGE_TYPE,
            SourceVirtualStorageType: VIRTUAL_STORAGE_TYPE,
            ResiliencyGuid: Guid,
            SourceLimitPath: ?*u16,
            BackingStorageType: VIRTUAL_STORAGE_TYPE,
            PmemAddressAbstractionType: Guid,
            DataAlignment: u64,
        };
        // --------------------------------------------------------
        // Type: _Version2_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Version2_e__Struct = extern struct {
            UniqueId: Guid,
            MaximumSize: u64,
            BlockSizeInBytes: u32,
            SectorSizeInBytes: u32,
            PhysicalSectorSizeInBytes: u32,
            ParentPath: ?*u16,
            SourcePath: ?*u16,
            OpenFlags: OPEN_VIRTUAL_DISK_FLAG,
            ParentVirtualStorageType: VIRTUAL_STORAGE_TYPE,
            SourceVirtualStorageType: VIRTUAL_STORAGE_TYPE,
            ResiliencyGuid: Guid,
        };
    };
};
// --------------------------------------------------------
// Type: CREATE_VIRTUAL_DISK_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CREATE_VIRTUAL_DISK_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: ATTACH_VIRTUAL_DISK_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ATTACH_VIRTUAL_DISK_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: ATTACH_VIRTUAL_DISK_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ATTACH_VIRTUAL_DISK_PARAMETERS = extern struct {
    Version: ATTACH_VIRTUAL_DISK_VERSION,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Version1_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Version1_e__Struct = extern struct {
            Reserved: u32,
        };
        // --------------------------------------------------------
        // Type: _Version2_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Version2_e__Struct = extern struct {
            RestrictedOffset: u64,
            RestrictedLength: u64,
        };
    };
};
// --------------------------------------------------------
// Type: ATTACH_VIRTUAL_DISK_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ATTACH_VIRTUAL_DISK_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: DETACH_VIRTUAL_DISK_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DETACH_VIRTUAL_DISK_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: DEPENDENT_DISK_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DEPENDENT_DISK_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_DEPENDENCY_INFO_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_DEPENDENCY_INFO_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_DEPENDENCY_INFO_TYPE_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_DEPENDENCY_INFO_TYPE_1 = extern struct {
    DependencyTypeFlags: DEPENDENT_DISK_FLAG,
    ProviderSpecificFlags: u32,
    VirtualStorageType: VIRTUAL_STORAGE_TYPE,
};
// --------------------------------------------------------
// Type: STORAGE_DEPENDENCY_INFO_TYPE_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_DEPENDENCY_INFO_TYPE_2 = extern struct {
    DependencyTypeFlags: DEPENDENT_DISK_FLAG,
    ProviderSpecificFlags: u32,
    VirtualStorageType: VIRTUAL_STORAGE_TYPE,
    AncestorLevel: u32,
    DependencyDeviceName: ?*u16,
    HostVolumeName: ?*u16,
    DependentVolumeName: ?*u16,
    DependentVolumeRelativePath: ?*u16,
};
// --------------------------------------------------------
// Type: STORAGE_DEPENDENCY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_DEPENDENCY_INFO = extern struct {
    Version: STORAGE_DEPENDENCY_INFO_VERSION,
    NumberEntries: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: GET_STORAGE_DEPENDENCY_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const GET_STORAGE_DEPENDENCY_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: GET_VIRTUAL_DISK_INFO_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const GET_VIRTUAL_DISK_INFO_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: GET_VIRTUAL_DISK_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GET_VIRTUAL_DISK_INFO = extern struct {
    Version: GET_VIRTUAL_DISK_INFO_VERSION,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _ChangeTrackingState_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _ChangeTrackingState_e__Struct = extern struct {
            Enabled: BOOL,
            NewerChanges: BOOL,
            MostRecentId: ?[*]u16,
        };
        // --------------------------------------------------------
        // Type: _ParentLocation_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _ParentLocation_e__Struct = extern struct {
            ParentResolved: BOOL,
            ParentLocationBuffer: ?[*]u16,
        };
        // --------------------------------------------------------
        // Type: _Size_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Size_e__Struct = extern struct {
            VirtualSize: u64,
            PhysicalSize: u64,
            BlockSize: u32,
            SectorSize: u32,
        };
        // --------------------------------------------------------
        // Type: _PhysicalDisk_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _PhysicalDisk_e__Struct = extern struct {
            LogicalSectorSize: u32,
            PhysicalSectorSize: u32,
            IsRemote: BOOL,
        };
    };
};
// --------------------------------------------------------
// Type: SET_VIRTUAL_DISK_INFO_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SET_VIRTUAL_DISK_INFO_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: SET_VIRTUAL_DISK_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SET_VIRTUAL_DISK_INFO = extern struct {
    Version: SET_VIRTUAL_DISK_INFO_VERSION,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _ParentLocator_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _ParentLocator_e__Struct = extern struct {
            LinkageId: Guid,
            ParentFilePath: ?*u16,
        };
        // --------------------------------------------------------
        // Type: _ParentPathWithDepthInfo_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _ParentPathWithDepthInfo_e__Struct = extern struct {
            ChildDepth: u32,
            ParentFilePath: ?*u16,
        };
    };
};
// --------------------------------------------------------
// Type: VIRTUAL_DISK_PROGRESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIRTUAL_DISK_PROGRESS = extern struct {
    OperationStatus: u32,
    CurrentValue: u64,
    CompletionValue: u64,
};
// --------------------------------------------------------
// Type: COMPACT_VIRTUAL_DISK_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const COMPACT_VIRTUAL_DISK_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: COMPACT_VIRTUAL_DISK_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COMPACT_VIRTUAL_DISK_PARAMETERS = extern struct {
    Version: COMPACT_VIRTUAL_DISK_VERSION,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Version1_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Version1_e__Struct = extern struct {
            Reserved: u32,
        };
    };
};
// --------------------------------------------------------
// Type: COMPACT_VIRTUAL_DISK_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const COMPACT_VIRTUAL_DISK_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: MERGE_VIRTUAL_DISK_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MERGE_VIRTUAL_DISK_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: MERGE_VIRTUAL_DISK_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MERGE_VIRTUAL_DISK_PARAMETERS = extern struct {
    Version: MERGE_VIRTUAL_DISK_VERSION,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Version1_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Version1_e__Struct = extern struct {
            MergeDepth: u32,
        };
        // --------------------------------------------------------
        // Type: _Version2_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Version2_e__Struct = extern struct {
            MergeSourceDepth: u32,
            MergeTargetDepth: u32,
        };
    };
};
// --------------------------------------------------------
// Type: MERGE_VIRTUAL_DISK_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MERGE_VIRTUAL_DISK_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: EXPAND_VIRTUAL_DISK_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EXPAND_VIRTUAL_DISK_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: EXPAND_VIRTUAL_DISK_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EXPAND_VIRTUAL_DISK_PARAMETERS = extern struct {
    Version: EXPAND_VIRTUAL_DISK_VERSION,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Version1_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Version1_e__Struct = extern struct {
            NewSize: u64,
        };
    };
};
// --------------------------------------------------------
// Type: EXPAND_VIRTUAL_DISK_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EXPAND_VIRTUAL_DISK_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: RESIZE_VIRTUAL_DISK_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RESIZE_VIRTUAL_DISK_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: RESIZE_VIRTUAL_DISK_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RESIZE_VIRTUAL_DISK_PARAMETERS = extern struct {
    Version: RESIZE_VIRTUAL_DISK_VERSION,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Version1_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Version1_e__Struct = extern struct {
            NewSize: u64,
        };
    };
};
// --------------------------------------------------------
// Type: RESIZE_VIRTUAL_DISK_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RESIZE_VIRTUAL_DISK_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: MIRROR_VIRTUAL_DISK_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MIRROR_VIRTUAL_DISK_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: MIRROR_VIRTUAL_DISK_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MIRROR_VIRTUAL_DISK_PARAMETERS = extern struct {
    Version: MIRROR_VIRTUAL_DISK_VERSION,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Version1_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Version1_e__Struct = extern struct {
            MirrorVirtualDiskPath: ?*u16,
        };
    };
};
// --------------------------------------------------------
// Type: MIRROR_VIRTUAL_DISK_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MIRROR_VIRTUAL_DISK_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: QUERY_CHANGES_VIRTUAL_DISK_RANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QUERY_CHANGES_VIRTUAL_DISK_RANGE = extern struct {
    ByteOffset: u64,
    ByteLength: u64,
    Reserved: u64,
};
// --------------------------------------------------------
// Type: QUERY_CHANGES_VIRTUAL_DISK_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QUERY_CHANGES_VIRTUAL_DISK_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: TAKE_SNAPSHOT_VHDSET_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TAKE_SNAPSHOT_VHDSET_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: TAKE_SNAPSHOT_VHDSET_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TAKE_SNAPSHOT_VHDSET_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: TAKE_SNAPSHOT_VHDSET_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TAKE_SNAPSHOT_VHDSET_PARAMETERS = extern struct {
    Version: TAKE_SNAPSHOT_VHDSET_VERSION,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Version1_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Version1_e__Struct = extern struct {
            SnapshotId: Guid,
        };
    };
};
// --------------------------------------------------------
// Type: DELETE_SNAPSHOT_VHDSET_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DELETE_SNAPSHOT_VHDSET_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: DELETE_SNAPSHOT_VHDSET_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DELETE_SNAPSHOT_VHDSET_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: DELETE_SNAPSHOT_VHDSET_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DELETE_SNAPSHOT_VHDSET_PARAMETERS = extern struct {
    Version: DELETE_SNAPSHOT_VHDSET_VERSION,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Version1_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Version1_e__Struct = extern struct {
            SnapshotId: Guid,
        };
    };
};
// --------------------------------------------------------
// Type: MODIFY_VHDSET_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MODIFY_VHDSET_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: MODIFY_VHDSET_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MODIFY_VHDSET_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: MODIFY_VHDSET_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MODIFY_VHDSET_PARAMETERS = extern struct {
    Version: MODIFY_VHDSET_VERSION,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _SnapshotPath_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _SnapshotPath_e__Struct = extern struct {
            SnapshotId: Guid,
            SnapshotFilePath: ?*u16,
        };
    };
};
// --------------------------------------------------------
// Type: APPLY_SNAPSHOT_VHDSET_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const APPLY_SNAPSHOT_VHDSET_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: APPLY_SNAPSHOT_VHDSET_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const APPLY_SNAPSHOT_VHDSET_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: APPLY_SNAPSHOT_VHDSET_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const APPLY_SNAPSHOT_VHDSET_PARAMETERS = extern struct {
    Version: APPLY_SNAPSHOT_VHDSET_VERSION,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Version1_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Version1_e__Struct = extern struct {
            SnapshotId: Guid,
            LeafSnapshotId: Guid,
        };
    };
};
// --------------------------------------------------------
// Type: RAW_SCSI_VIRTUAL_DISK_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RAW_SCSI_VIRTUAL_DISK_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: RAW_SCSI_VIRTUAL_DISK_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RAW_SCSI_VIRTUAL_DISK_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: RAW_SCSI_VIRTUAL_DISK_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RAW_SCSI_VIRTUAL_DISK_PARAMETERS = extern struct {
    Version: RAW_SCSI_VIRTUAL_DISK_VERSION,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Version1_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Version1_e__Struct = extern struct {
            RSVDHandle: BOOL,
            DataIn: u8,
            CdbLength: u8,
            SenseInfoLength: u8,
            SrbFlags: u32,
            DataTransferLength: u32,
            DataBuffer: ?*opaque{},
            SenseInfo: ?*u8,
            Cdb: ?*u8,
        };
    };
};
// --------------------------------------------------------
// Type: RAW_SCSI_VIRTUAL_DISK_RESPONSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RAW_SCSI_VIRTUAL_DISK_RESPONSE = extern struct {
    Version: RAW_SCSI_VIRTUAL_DISK_VERSION,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Version1_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Version1_e__Struct = extern struct {
            ScsiStatus: u8,
            SenseInfoLength: u8,
            DataTransferLength: u32,
        };
    };
};
// --------------------------------------------------------
// Type: FORK_VIRTUAL_DISK_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FORK_VIRTUAL_DISK_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: FORK_VIRTUAL_DISK_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FORK_VIRTUAL_DISK_PARAMETERS = extern struct {
    Version: FORK_VIRTUAL_DISK_VERSION,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Version1_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Version1_e__Struct = extern struct {
            ForkedVirtualDiskPath: ?*u16,
        };
    };
};
// --------------------------------------------------------
// Type: FORK_VIRTUAL_DISK_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FORK_VIRTUAL_DISK_FLAG = *opaque{
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "VirtDisk" fn OpenVirtualDisk(
    VirtualStorageType: ?*VIRTUAL_STORAGE_TYPE,
    Path: ?*u16,
    VirtualDiskAccessMask: VIRTUAL_DISK_ACCESS_MASK,
    Flags: OPEN_VIRTUAL_DISK_FLAG,
    Parameters: ?*OPEN_VIRTUAL_DISK_PARAMETERS,
    Handle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "VirtDisk" fn CreateVirtualDisk(
    VirtualStorageType: ?*VIRTUAL_STORAGE_TYPE,
    Path: ?*u16,
    VirtualDiskAccessMask: VIRTUAL_DISK_ACCESS_MASK,
    SecurityDescriptor: ?*opaque{},
    Flags: CREATE_VIRTUAL_DISK_FLAG,
    ProviderSpecificFlags: u32,
    Parameters: ?*CREATE_VIRTUAL_DISK_PARAMETERS,
    Overlapped: ?*OVERLAPPED,
    Handle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "VirtDisk" fn AttachVirtualDisk(
    VirtualDiskHandle: HANDLE,
    SecurityDescriptor: ?*opaque{},
    Flags: ATTACH_VIRTUAL_DISK_FLAG,
    ProviderSpecificFlags: u32,
    Parameters: ?*ATTACH_VIRTUAL_DISK_PARAMETERS,
    Overlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "VirtDisk" fn DetachVirtualDisk(
    VirtualDiskHandle: HANDLE,
    Flags: DETACH_VIRTUAL_DISK_FLAG,
    ProviderSpecificFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "VirtDisk" fn GetVirtualDiskPhysicalPath(
    VirtualDiskHandle: HANDLE,
    DiskPathSizeInBytes: ?*u32,
    DiskPath: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "VirtDisk" fn GetAllAttachedVirtualDiskPhysicalPaths(
    PathsBufferSizeInBytes: ?*u32,
    PathsBuffer: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "VirtDisk" fn GetStorageDependencyInformation(
    ObjectHandle: HANDLE,
    Flags: GET_STORAGE_DEPENDENCY_FLAG,
    StorageDependencyInfoSize: u32,
    StorageDependencyInfo: ?*STORAGE_DEPENDENCY_INFO,
    SizeUsed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "VirtDisk" fn GetVirtualDiskInformation(
    VirtualDiskHandle: HANDLE,
    VirtualDiskInfoSize: ?*u32,
    VirtualDiskInfo: ?*GET_VIRTUAL_DISK_INFO,
    SizeUsed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "VirtDisk" fn SetVirtualDiskInformation(
    VirtualDiskHandle: HANDLE,
    VirtualDiskInfo: ?*SET_VIRTUAL_DISK_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "VirtDisk" fn EnumerateVirtualDiskMetadata(
    VirtualDiskHandle: HANDLE,
    NumberOfItems: ?*u32,
    Items: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "VirtDisk" fn GetVirtualDiskMetadata(
    VirtualDiskHandle: HANDLE,
    Item: ?*Guid,
    MetaDataSize: ?*u32,
    MetaData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "VirtDisk" fn SetVirtualDiskMetadata(
    VirtualDiskHandle: HANDLE,
    Item: ?*Guid,
    MetaDataSize: u32,
    MetaData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "VirtDisk" fn DeleteVirtualDiskMetadata(
    VirtualDiskHandle: HANDLE,
    Item: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "VirtDisk" fn GetVirtualDiskOperationProgress(
    VirtualDiskHandle: HANDLE,
    Overlapped: ?*OVERLAPPED,
    Progress: ?*VIRTUAL_DISK_PROGRESS,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "VirtDisk" fn CompactVirtualDisk(
    VirtualDiskHandle: HANDLE,
    Flags: COMPACT_VIRTUAL_DISK_FLAG,
    Parameters: ?*COMPACT_VIRTUAL_DISK_PARAMETERS,
    Overlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "VirtDisk" fn MergeVirtualDisk(
    VirtualDiskHandle: HANDLE,
    Flags: MERGE_VIRTUAL_DISK_FLAG,
    Parameters: ?*MERGE_VIRTUAL_DISK_PARAMETERS,
    Overlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "VirtDisk" fn ExpandVirtualDisk(
    VirtualDiskHandle: HANDLE,
    Flags: EXPAND_VIRTUAL_DISK_FLAG,
    Parameters: ?*EXPAND_VIRTUAL_DISK_PARAMETERS,
    Overlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "VirtDisk" fn ResizeVirtualDisk(
    VirtualDiskHandle: HANDLE,
    Flags: RESIZE_VIRTUAL_DISK_FLAG,
    Parameters: ?*RESIZE_VIRTUAL_DISK_PARAMETERS,
    Overlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "VirtDisk" fn MirrorVirtualDisk(
    VirtualDiskHandle: HANDLE,
    Flags: MIRROR_VIRTUAL_DISK_FLAG,
    Parameters: ?*MIRROR_VIRTUAL_DISK_PARAMETERS,
    Overlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "VirtDisk" fn BreakMirrorVirtualDisk(
    VirtualDiskHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "VirtDisk" fn AddVirtualDiskParent(
    VirtualDiskHandle: HANDLE,
    ParentPath: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "VirtDisk" fn QueryChangesVirtualDisk(
    VirtualDiskHandle: HANDLE,
    ChangeTrackingId: ?*u16,
    ByteOffset: u64,
    ByteLength: u64,
    Flags: QUERY_CHANGES_VIRTUAL_DISK_FLAG,
    Ranges: ?*QUERY_CHANGES_VIRTUAL_DISK_RANGE,
    RangeCount: ?*u32,
    ProcessedLength: ?*u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "VirtDisk" fn TakeSnapshotVhdSet(
    VirtualDiskHandle: HANDLE,
    Parameters: ?*TAKE_SNAPSHOT_VHDSET_PARAMETERS,
    Flags: TAKE_SNAPSHOT_VHDSET_FLAG,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "VirtDisk" fn DeleteSnapshotVhdSet(
    VirtualDiskHandle: HANDLE,
    Parameters: ?*DELETE_SNAPSHOT_VHDSET_PARAMETERS,
    Flags: DELETE_SNAPSHOT_VHDSET_FLAG,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "VirtDisk" fn ModifyVhdSet(
    VirtualDiskHandle: HANDLE,
    Parameters: ?*MODIFY_VHDSET_PARAMETERS,
    Flags: MODIFY_VHDSET_FLAG,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "VirtDisk" fn ApplySnapshotVhdSet(
    VirtualDiskHandle: HANDLE,
    Parameters: ?*APPLY_SNAPSHOT_VHDSET_PARAMETERS,
    Flags: APPLY_SNAPSHOT_VHDSET_FLAG,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "VirtDisk" fn RawSCSIVirtualDisk(
    VirtualDiskHandle: HANDLE,
    Parameters: ?*RAW_SCSI_VIRTUAL_DISK_PARAMETERS,
    Flags: RAW_SCSI_VIRTUAL_DISK_FLAG,
    Response: ?*RAW_SCSI_VIRTUAL_DISK_RESPONSE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "VirtDisk" fn ForkVirtualDisk(
    VirtualDiskHandle: HANDLE,
    Flags: FORK_VIRTUAL_DISK_FLAG,
    Parameters: ?*FORK_VIRTUAL_DISK_PARAMETERS,
    Overlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "VirtDisk" fn CompleteForkVirtualDisk(
    VirtualDiskHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("systemservices.zig").BOOL;
const OVERLAPPED = @import("systemservices.zig").OVERLAPPED;
const HANDLE = @import("systemservices.zig").HANDLE;

test "" {
    const constant_export_count = 0;
    const type_export_count = 59;
    const func_count = 29;
    const unicode_alias_count = 0;
    const type_import_count = 4;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
