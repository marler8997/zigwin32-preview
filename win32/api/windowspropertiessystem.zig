//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: SYNC_TRANSFER_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYNC_TRANSFER_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: PLACEHOLDER_STATES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLACEHOLDER_STATES = *opaque{
};
// --------------------------------------------------------
// Type: _PROPERTYUI_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _PROPERTYUI_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IPropertyUI
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPropertyUI = *opaque{
    // TODO: Method 'ParsePropertyName'
    // TODO: Method 'GetCannonicalName'
    // TODO: Method 'GetDisplayName'
    // TODO: Method 'GetPropertyDescription'
    // TODO: Method 'GetDefaultWidth'
    // TODO: Method 'GetFlags'
    // TODO: Method 'FormatForDisplay'
    // TODO: Method 'GetHelpInfo'
};
// --------------------------------------------------------
// Type: PDOPSTATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDOPSTATUS = *opaque{
};
// --------------------------------------------------------
// Type: SYNC_ENGINE_STATE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SYNC_ENGINE_STATE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: PROPPRG
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const PROPPRG = *opaque{
};
// --------------------------------------------------------
// Type: PROPERTYKEY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROPERTYKEY = extern struct {
    fmtid: Guid,
    pid: u32,
};
// --------------------------------------------------------
// Type: InMemoryPropertyStore
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const InMemoryPropertyStore = opaque {
};
// --------------------------------------------------------
// Type: InMemoryPropertyStoreMarshalByValue
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const InMemoryPropertyStoreMarshalByValue = opaque {
};
// --------------------------------------------------------
// Type: PropertySystem
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const PropertySystem = opaque {
};
// --------------------------------------------------------
// Type: GETPROPERTYSTOREFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const GETPROPERTYSTOREFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: PKA_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PKA_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IPropertyChange
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPropertyChange = *opaque{
    // TODO: Method 'ApplyToPropVariant'
};
// --------------------------------------------------------
// Type: IPropertyChangeArray
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPropertyChangeArray = *opaque{
    // TODO: Method 'GetCount'
    // TODO: Method 'GetAt'
    // TODO: Method 'InsertAt'
    // TODO: Method 'Append'
    // TODO: Method 'AppendOrReplace'
    // TODO: Method 'RemoveAt'
    // TODO: Method 'IsKeyInArray'
};
// --------------------------------------------------------
// Type: IPropertyStoreCapabilities
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPropertyStoreCapabilities = *opaque{
    // TODO: Method 'IsPropertyWritable'
};
// --------------------------------------------------------
// Type: PSC_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PSC_STATE = *opaque{
};
// --------------------------------------------------------
// Type: IPropertyStoreCache
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPropertyStoreCache = *opaque{
    // TODO: Method 'GetState'
    // TODO: Method 'GetValueAndState'
    // TODO: Method 'SetState'
    // TODO: Method 'SetValueAndState'
};
// --------------------------------------------------------
// Type: PROPENUMTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROPENUMTYPE = *opaque{
};
// --------------------------------------------------------
// Type: IPropertyEnumType
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPropertyEnumType = *opaque{
    // TODO: Method 'GetEnumType'
    // TODO: Method 'GetValue'
    // TODO: Method 'GetRangeMinValue'
    // TODO: Method 'GetRangeSetValue'
    // TODO: Method 'GetDisplayText'
};
// --------------------------------------------------------
// Type: IPropertyEnumType2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPropertyEnumType2 = *opaque{
    // TODO: Method 'GetImageReference'
};
// --------------------------------------------------------
// Type: IPropertyEnumTypeList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPropertyEnumTypeList = *opaque{
    // TODO: Method 'GetCount'
    // TODO: Method 'GetAt'
    // TODO: Method 'GetConditionAt'
    // TODO: Method 'FindMatchingIndex'
};
// --------------------------------------------------------
// Type: PROPDESC_TYPE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROPDESC_TYPE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: PROPDESC_VIEW_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROPDESC_VIEW_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: PROPDESC_DISPLAYTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROPDESC_DISPLAYTYPE = *opaque{
};
// --------------------------------------------------------
// Type: PROPDESC_GROUPING_RANGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROPDESC_GROUPING_RANGE = *opaque{
};
// --------------------------------------------------------
// Type: PROPDESC_FORMAT_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROPDESC_FORMAT_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: PROPDESC_SORTDESCRIPTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROPDESC_SORTDESCRIPTION = *opaque{
};
// --------------------------------------------------------
// Type: PROPDESC_RELATIVEDESCRIPTION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROPDESC_RELATIVEDESCRIPTION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: PROPDESC_AGGREGATION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROPDESC_AGGREGATION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: PROPDESC_CONDITION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROPDESC_CONDITION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IPropertyDescription
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPropertyDescription = *opaque{
    // TODO: Method 'GetPropertyKey'
    // TODO: Method 'GetCanonicalName'
    // TODO: Method 'GetPropertyType'
    // TODO: Method 'GetDisplayName'
    // TODO: Method 'GetEditInvitation'
    // TODO: Method 'GetTypeFlags'
    // TODO: Method 'GetViewFlags'
    // TODO: Method 'GetDefaultColumnWidth'
    // TODO: Method 'GetDisplayType'
    // TODO: Method 'GetColumnState'
    // TODO: Method 'GetGroupingRange'
    // TODO: Method 'GetRelativeDescriptionType'
    // TODO: Method 'GetRelativeDescription'
    // TODO: Method 'GetSortDescription'
    // TODO: Method 'GetSortDescriptionLabel'
    // TODO: Method 'GetAggregationType'
    // TODO: Method 'GetConditionType'
    // TODO: Method 'GetEnumTypeList'
    // TODO: Method 'CoerceToCanonicalValue'
    // TODO: Method 'FormatForDisplay'
    // TODO: Method 'IsValueCanonical'
};
// --------------------------------------------------------
// Type: IPropertyDescription2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPropertyDescription2 = *opaque{
    // TODO: Method 'GetImageReferenceForValue'
};
// --------------------------------------------------------
// Type: IPropertyDescriptionAliasInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPropertyDescriptionAliasInfo = *opaque{
    // TODO: Method 'GetSortByAlias'
    // TODO: Method 'GetAdditionalSortByAliases'
};
// --------------------------------------------------------
// Type: PROPDESC_SEARCHINFO_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROPDESC_SEARCHINFO_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: PROPDESC_COLUMNINDEX_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROPDESC_COLUMNINDEX_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IPropertyDescriptionSearchInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPropertyDescriptionSearchInfo = *opaque{
    // TODO: Method 'GetSearchInfoFlags'
    // TODO: Method 'GetColumnIndexType'
    // TODO: Method 'GetProjectionString'
    // TODO: Method 'GetMaxSize'
};
// --------------------------------------------------------
// Type: IPropertyDescriptionRelatedPropertyInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPropertyDescriptionRelatedPropertyInfo = *opaque{
    // TODO: Method 'GetRelatedProperty'
};
// --------------------------------------------------------
// Type: PROPDESC_ENUMFILTER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROPDESC_ENUMFILTER = *opaque{
};
// --------------------------------------------------------
// Type: IPropertySystem
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPropertySystem = *opaque{
    // TODO: Method 'GetPropertyDescription'
    // TODO: Method 'GetPropertyDescriptionByName'
    // TODO: Method 'GetPropertyDescriptionListFromString'
    // TODO: Method 'EnumeratePropertyDescriptions'
    // TODO: Method 'FormatForDisplay'
    // TODO: Method 'FormatForDisplayAlloc'
    // TODO: Method 'RegisterPropertySchema'
    // TODO: Method 'UnregisterPropertySchema'
    // TODO: Method 'RefreshPropertySchema'
};
// --------------------------------------------------------
// Type: IPropertyDescriptionList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPropertyDescriptionList = *opaque{
    // TODO: Method 'GetCount'
    // TODO: Method 'GetAt'
};
// --------------------------------------------------------
// Type: IPropertyStoreFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPropertyStoreFactory = *opaque{
    // TODO: Method 'GetPropertyStore'
    // TODO: Method 'GetPropertyStoreForKeys'
};
// --------------------------------------------------------
// Type: _PERSIST_SPROPSTORE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _PERSIST_SPROPSTORE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: SERIALIZEDPROPSTORAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SERIALIZEDPROPSTORAGE = opaque {
};
// --------------------------------------------------------
// Type: IPropertySystemChangeNotify
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPropertySystemChangeNotify = *opaque{
    // TODO: Method 'SchemaRefreshed'
};
// --------------------------------------------------------
// Type: tagPSTIME_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const tagPSTIME_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: PROPVAR_COMPARE_UNIT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROPVAR_COMPARE_UNIT = *opaque{
};
// --------------------------------------------------------
// Type: tagPROPVAR_COMPARE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const tagPROPVAR_COMPARE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: tagPROPVAR_CHANGE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const tagPROPVAR_CHANGE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: DRAWPROGRESSFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DRAWPROGRESSFLAGS = *opaque{
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetPropertyStoreForWindow(
    hwnd: HWND,
    riid: ?*Guid,
    ppv: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetPropertyStoreFromIDList(
    pidl: ?*ITEMIDLIST,
    flags: GETPROPERTYSTOREFLAGS,
    riid: ?*Guid,
    ppv: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHGetPropertyStoreFromParsingName(
    pszPath: ?*u16,
    pbc: IBindCtx,
    flags: GETPROPERTYSTOREFLAGS,
    riid: ?*Guid,
    ppv: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHAddDefaultPropertiesByExt(
    pszExt: ?*u16,
    pPropStore: IPropertyStore,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn PifMgr_OpenProperties(
    pszApp: ?*u16,
    pszPIF: ?*u16,
    hInf: u32,
    flOpt: u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn PifMgr_GetProperties(
    hProps: HANDLE,
    pszGroup: ?*i8,
    lpProps: ?*opaque{},
    cbProps: i32,
    flOpt: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn PifMgr_SetProperties(
    hProps: HANDLE,
    pszGroup: ?*i8,
    lpProps: ?*opaque{},
    cbProps: i32,
    flOpt: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn PifMgr_CloseProperties(
    hProps: HANDLE,
    flOpt: u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHPropStgCreate(
    psstg: IPropertySetStorage,
    fmtid: ?*Guid,
    pclsid: ?*Guid,
    grfFlags: u32,
    grfMode: u32,
    dwDisposition: u32,
    ppstg: ?*IPropertyStorage,
    puCodePage: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHPropStgReadMultiple(
    pps: IPropertyStorage,
    uCodePage: u32,
    cpspec: u32,
    rgpspec: ?*PROPSPEC,
    rgvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "SHELL32" fn SHPropStgWriteMultiple(
    pps: IPropertyStorage,
    puCodePage: ?*u32,
    cpspec: u32,
    rgpspec: ?*PROPSPEC,
    rgvar: ?*PROPVARIANT,
    propidNameFirst: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToWinRTPropertyValue(
    propvar: ?*PROPVARIANT,
    riid: ?*Guid,
    ppv: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn WinRTPropertyValueToPropVariant(
    punkPropertyValue: IUnknown,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSFormatForDisplay(
    propkey: ?*PROPERTYKEY,
    propvar: ?*PROPVARIANT,
    pdfFlags: PROPDESC_FORMAT_FLAGS,
    pwszText: ?*u16,
    cchText: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSFormatForDisplayAlloc(
    key: ?*PROPERTYKEY,
    propvar: ?*PROPVARIANT,
    pdff: PROPDESC_FORMAT_FLAGS,
    ppszDisplay: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSFormatPropertyValue(
    pps: IPropertyStore,
    ppd: IPropertyDescription,
    pdff: PROPDESC_FORMAT_FLAGS,
    ppszDisplay: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSGetImageReferenceForValue(
    propkey: ?*PROPERTYKEY,
    propvar: ?*PROPVARIANT,
    ppszImageRes: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSStringFromPropertyKey(
    pkey: ?*PROPERTYKEY,
    psz: ?*u16,
    cch: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyKeyFromString(
    pszString: ?*u16,
    pkey: ?*PROPERTYKEY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSCreateMemoryPropertyStore(
    riid: ?*Guid,
    ppv: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSCreateDelayedMultiplexPropertyStore(
    flags: GETPROPERTYSTOREFLAGS,
    pdpsf: IDelayedPropertyStoreFactory,
    rgStoreIds: ?*u32,
    cStores: u32,
    riid: ?*Guid,
    ppv: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSCreateMultiplexPropertyStore(
    prgpunkStores: ?*IUnknown,
    cStores: u32,
    riid: ?*Guid,
    ppv: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSCreatePropertyChangeArray(
    rgpropkey: ?*PROPERTYKEY,
    rgflags: ?*PKA_FLAGS,
    rgpropvar: ?*PROPVARIANT,
    cChanges: u32,
    riid: ?*Guid,
    ppv: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSCreateSimplePropertyChange(
    flags: PKA_FLAGS,
    key: ?*PROPERTYKEY,
    propvar: ?*PROPVARIANT,
    riid: ?*Guid,
    ppv: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSGetPropertyDescription(
    propkey: ?*PROPERTYKEY,
    riid: ?*Guid,
    ppv: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSGetPropertyDescriptionByName(
    pszCanonicalName: ?*u16,
    riid: ?*Guid,
    ppv: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSLookupPropertyHandlerCLSID(
    pszFilePath: ?*u16,
    pclsid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSGetItemPropertyHandler(
    punkItem: IUnknown,
    fReadWrite: BOOL,
    riid: ?*Guid,
    ppv: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSGetItemPropertyHandlerWithCreateObject(
    punkItem: IUnknown,
    fReadWrite: BOOL,
    punkCreateObject: IUnknown,
    riid: ?*Guid,
    ppv: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSGetPropertyValue(
    pps: IPropertyStore,
    ppd: IPropertyDescription,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSSetPropertyValue(
    pps: IPropertyStore,
    ppd: IPropertyDescription,
    propvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSRegisterPropertySchema(
    pszPath: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSUnregisterPropertySchema(
    pszPath: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSRefreshPropertySchema(
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSEnumeratePropertyDescriptions(
    filterOn: PROPDESC_ENUMFILTER,
    riid: ?*Guid,
    ppv: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSGetPropertyKeyFromName(
    pszName: ?*u16,
    ppropkey: ?*PROPERTYKEY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSGetNameFromPropertyKey(
    propkey: ?*PROPERTYKEY,
    ppszCanonicalName: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSCoerceToCanonicalValue(
    key: ?*PROPERTYKEY,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSGetPropertyDescriptionListFromString(
    pszPropList: ?*u16,
    riid: ?*Guid,
    ppv: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSCreatePropertyStoreFromPropertySetStorage(
    ppss: IPropertySetStorage,
    grfMode: u32,
    riid: ?*Guid,
    ppv: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSCreatePropertyStoreFromObject(
    punk: IUnknown,
    grfMode: u32,
    riid: ?*Guid,
    ppv: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSCreateAdapterFromPropertyStore(
    pps: IPropertyStore,
    riid: ?*Guid,
    ppv: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSGetPropertySystem(
    riid: ?*Guid,
    ppv: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSGetPropertyFromPropertyStorage(
    psps: ?*SERIALIZEDPROPSTORAGE,
    cb: u32,
    rpkey: ?*PROPERTYKEY,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSGetNamedPropertyFromPropertyStorage(
    psps: ?*SERIALIZEDPROPSTORAGE,
    cb: u32,
    pszName: ?*u16,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_ReadType(
    propBag: IPropertyBag,
    propName: ?*u16,
    @"var": ?*VARIANT,
    type: u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_ReadStr(
    propBag: IPropertyBag,
    propName: ?*u16,
    value: ?*u16,
    characterCount: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_ReadStrAlloc(
    propBag: IPropertyBag,
    propName: ?*u16,
    value: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_ReadBSTR(
    propBag: IPropertyBag,
    propName: ?*u16,
    value: ?*BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_WriteStr(
    propBag: IPropertyBag,
    propName: ?*u16,
    value: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_WriteBSTR(
    propBag: IPropertyBag,
    propName: ?*u16,
    value: BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_ReadInt(
    propBag: IPropertyBag,
    propName: ?*u16,
    value: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_WriteInt(
    propBag: IPropertyBag,
    propName: ?*u16,
    value: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_ReadSHORT(
    propBag: IPropertyBag,
    propName: ?*u16,
    value: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_WriteSHORT(
    propBag: IPropertyBag,
    propName: ?*u16,
    value: i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_ReadLONG(
    propBag: IPropertyBag,
    propName: ?*u16,
    value: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_WriteLONG(
    propBag: IPropertyBag,
    propName: ?*u16,
    value: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_ReadDWORD(
    propBag: IPropertyBag,
    propName: ?*u16,
    value: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_WriteDWORD(
    propBag: IPropertyBag,
    propName: ?*u16,
    value: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_ReadBOOL(
    propBag: IPropertyBag,
    propName: ?*u16,
    value: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_WriteBOOL(
    propBag: IPropertyBag,
    propName: ?*u16,
    value: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_ReadPOINTL(
    propBag: IPropertyBag,
    propName: ?*u16,
    value: ?*POINTL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_WritePOINTL(
    propBag: IPropertyBag,
    propName: ?*u16,
    value: ?*POINTL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_ReadPOINTS(
    propBag: IPropertyBag,
    propName: ?*u16,
    value: ?*POINTS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_WritePOINTS(
    propBag: IPropertyBag,
    propName: ?*u16,
    value: ?*POINTS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_ReadRECTL(
    propBag: IPropertyBag,
    propName: ?*u16,
    value: ?*RECTL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_WriteRECTL(
    propBag: IPropertyBag,
    propName: ?*u16,
    value: ?*RECTL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_ReadStream(
    propBag: IPropertyBag,
    propName: ?*u16,
    value: ?*IStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_WriteStream(
    propBag: IPropertyBag,
    propName: ?*u16,
    value: IStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_Delete(
    propBag: IPropertyBag,
    propName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_ReadULONGLONG(
    propBag: IPropertyBag,
    propName: ?*u16,
    value: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_WriteULONGLONG(
    propBag: IPropertyBag,
    propName: ?*u16,
    value: u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_ReadUnknown(
    propBag: IPropertyBag,
    propName: ?*u16,
    riid: ?*Guid,
    ppv: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_WriteUnknown(
    propBag: IPropertyBag,
    propName: ?*u16,
    punk: IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_ReadGUID(
    propBag: IPropertyBag,
    propName: ?*u16,
    value: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_WriteGUID(
    propBag: IPropertyBag,
    propName: ?*u16,
    value: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_ReadPropertyKey(
    propBag: IPropertyBag,
    propName: ?*u16,
    value: ?*PROPERTYKEY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PSPropertyBag_WritePropertyKey(
    propBag: IPropertyBag,
    propName: ?*u16,
    value: ?*PROPERTYKEY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitPropVariantFromResource(
    hinst: HINSTANCE,
    id: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitPropVariantFromBuffer(
    pv: ?*opaque{},
    cb: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitPropVariantFromCLSID(
    clsid: ?*Guid,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitPropVariantFromGUIDAsString(
    guid: ?*Guid,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitPropVariantFromFileTime(
    pftIn: ?*FILETIME,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitPropVariantFromPropVariantVectorElem(
    propvarIn: ?*PROPVARIANT,
    iElem: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitPropVariantVectorFromPropVariant(
    propvarSingle: ?*PROPVARIANT,
    ppropvarVector: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitPropVariantFromStrRet(
    pstrret: ?*STRRET,
    pidl: ?*ITEMIDLIST,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitPropVariantFromBooleanVector(
    prgf: ?*i32,
    cElems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitPropVariantFromInt16Vector(
    prgn: ?*i16,
    cElems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitPropVariantFromUInt16Vector(
    prgn: ?*u16,
    cElems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitPropVariantFromInt32Vector(
    prgn: ?*i32,
    cElems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitPropVariantFromUInt32Vector(
    prgn: ?*u32,
    cElems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitPropVariantFromInt64Vector(
    prgn: ?*i64,
    cElems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitPropVariantFromUInt64Vector(
    prgn: ?*u64,
    cElems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitPropVariantFromDoubleVector(
    prgn: ?*f64,
    cElems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitPropVariantFromFileTimeVector(
    prgft: ?*FILETIME,
    cElems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitPropVariantFromStringVector(
    prgsz: ?*?*u16,
    cElems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitPropVariantFromStringAsVector(
    psz: ?*u16,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToBooleanWithDefault(
    propvarIn: ?*PROPVARIANT,
    fDefault: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToInt16WithDefault(
    propvarIn: ?*PROPVARIANT,
    iDefault: i16,
) callconv(@import("std").os.windows.WINAPI) i16;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToUInt16WithDefault(
    propvarIn: ?*PROPVARIANT,
    uiDefault: u16,
) callconv(@import("std").os.windows.WINAPI) u16;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToInt32WithDefault(
    propvarIn: ?*PROPVARIANT,
    lDefault: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToUInt32WithDefault(
    propvarIn: ?*PROPVARIANT,
    ulDefault: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToInt64WithDefault(
    propvarIn: ?*PROPVARIANT,
    llDefault: i64,
) callconv(@import("std").os.windows.WINAPI) i64;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToUInt64WithDefault(
    propvarIn: ?*PROPVARIANT,
    ullDefault: u64,
) callconv(@import("std").os.windows.WINAPI) u64;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToDoubleWithDefault(
    propvarIn: ?*PROPVARIANT,
    dblDefault: f64,
) callconv(@import("std").os.windows.WINAPI) f64;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToStringWithDefault(
    propvarIn: ?*PROPVARIANT,
    pszDefault: ?*u16,
) callconv(@import("std").os.windows.WINAPI) ?*u16;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToBoolean(
    propvarIn: ?*PROPVARIANT,
    pfRet: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToInt16(
    propvarIn: ?*PROPVARIANT,
    piRet: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToUInt16(
    propvarIn: ?*PROPVARIANT,
    puiRet: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToInt32(
    propvarIn: ?*PROPVARIANT,
    plRet: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToUInt32(
    propvarIn: ?*PROPVARIANT,
    pulRet: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToInt64(
    propvarIn: ?*PROPVARIANT,
    pllRet: ?*i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToUInt64(
    propvarIn: ?*PROPVARIANT,
    pullRet: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToDouble(
    propvarIn: ?*PROPVARIANT,
    pdblRet: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToBuffer(
    propvar: ?*PROPVARIANT,
    pv: ?*opaque{},
    cb: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToString(
    propvar: ?*PROPVARIANT,
    psz: ?*u16,
    cch: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToGUID(
    propvar: ?*PROPVARIANT,
    pguid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToStringAlloc(
    propvar: ?*PROPVARIANT,
    ppszOut: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToBSTR(
    propvar: ?*PROPVARIANT,
    pbstrOut: ?*BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToStrRet(
    propvar: ?*PROPVARIANT,
    pstrret: ?*STRRET,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToFileTime(
    propvar: ?*PROPVARIANT,
    pstfOut: i32,
    pftOut: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantGetElementCount(
    propvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToBooleanVector(
    propvar: ?*PROPVARIANT,
    prgf: ?*i32,
    crgf: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToInt16Vector(
    propvar: ?*PROPVARIANT,
    prgn: ?*i16,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToUInt16Vector(
    propvar: ?*PROPVARIANT,
    prgn: ?*u16,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToInt32Vector(
    propvar: ?*PROPVARIANT,
    prgn: ?*i32,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToUInt32Vector(
    propvar: ?*PROPVARIANT,
    prgn: ?*u32,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToInt64Vector(
    propvar: ?*PROPVARIANT,
    prgn: ?*i64,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToUInt64Vector(
    propvar: ?*PROPVARIANT,
    prgn: ?*u64,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToDoubleVector(
    propvar: ?*PROPVARIANT,
    prgn: ?*f64,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToFileTimeVector(
    propvar: ?*PROPVARIANT,
    prgft: ?*FILETIME,
    crgft: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToStringVector(
    propvar: ?*PROPVARIANT,
    prgsz: ?*?*u16,
    crgsz: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToBooleanVectorAlloc(
    propvar: ?*PROPVARIANT,
    pprgf: ?*?*i32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToInt16VectorAlloc(
    propvar: ?*PROPVARIANT,
    pprgn: ?*?*i16,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToUInt16VectorAlloc(
    propvar: ?*PROPVARIANT,
    pprgn: ?*?*u16,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToInt32VectorAlloc(
    propvar: ?*PROPVARIANT,
    pprgn: ?*?*i32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToUInt32VectorAlloc(
    propvar: ?*PROPVARIANT,
    pprgn: ?*?*u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToInt64VectorAlloc(
    propvar: ?*PROPVARIANT,
    pprgn: ?*?*i64,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToUInt64VectorAlloc(
    propvar: ?*PROPVARIANT,
    pprgn: ?*?*u64,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToDoubleVectorAlloc(
    propvar: ?*PROPVARIANT,
    pprgn: ?*?*f64,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToFileTimeVectorAlloc(
    propvar: ?*PROPVARIANT,
    pprgft: ?*?*FILETIME,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToStringVectorAlloc(
    propvar: ?*PROPVARIANT,
    pprgsz: ?*?*?*u16,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantGetBooleanElem(
    propvar: ?*PROPVARIANT,
    iElem: u32,
    pfVal: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantGetInt16Elem(
    propvar: ?*PROPVARIANT,
    iElem: u32,
    pnVal: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantGetUInt16Elem(
    propvar: ?*PROPVARIANT,
    iElem: u32,
    pnVal: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantGetInt32Elem(
    propvar: ?*PROPVARIANT,
    iElem: u32,
    pnVal: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantGetUInt32Elem(
    propvar: ?*PROPVARIANT,
    iElem: u32,
    pnVal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantGetInt64Elem(
    propvar: ?*PROPVARIANT,
    iElem: u32,
    pnVal: ?*i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantGetUInt64Elem(
    propvar: ?*PROPVARIANT,
    iElem: u32,
    pnVal: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantGetDoubleElem(
    propvar: ?*PROPVARIANT,
    iElem: u32,
    pnVal: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantGetFileTimeElem(
    propvar: ?*PROPVARIANT,
    iElem: u32,
    pftVal: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantGetStringElem(
    propvar: ?*PROPVARIANT,
    iElem: u32,
    ppszVal: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn ClearPropVariantArray(
    rgPropVar: ?*PROPVARIANT,
    cVars: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantCompareEx(
    propvar1: ?*PROPVARIANT,
    propvar2: ?*PROPVARIANT,
    unit: PROPVAR_COMPARE_UNIT,
    flags: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantChangeType(
    ppropvarDest: ?*PROPVARIANT,
    propvarSrc: ?*PROPVARIANT,
    flags: i32,
    vt: u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn PropVariantToVariant(
    pPropVar: ?*PROPVARIANT,
    pVar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToPropVariant(
    pVar: ?*VARIANT,
    pPropVar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitVariantFromResource(
    hinst: HINSTANCE,
    id: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitVariantFromBuffer(
    pv: ?*opaque{},
    cb: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitVariantFromGUIDAsString(
    guid: ?*Guid,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitVariantFromFileTime(
    pft: ?*FILETIME,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitVariantFromFileTimeArray(
    prgft: ?*FILETIME,
    cElems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitVariantFromStrRet(
    pstrret: ?*STRRET,
    pidl: ?*ITEMIDLIST,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitVariantFromVariantArrayElem(
    varIn: ?*VARIANT,
    iElem: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitVariantFromBooleanArray(
    prgf: ?*i32,
    cElems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitVariantFromInt16Array(
    prgn: ?*i16,
    cElems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitVariantFromUInt16Array(
    prgn: ?*u16,
    cElems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitVariantFromInt32Array(
    prgn: ?*i32,
    cElems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitVariantFromUInt32Array(
    prgn: ?*u32,
    cElems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitVariantFromInt64Array(
    prgn: ?*i64,
    cElems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitVariantFromUInt64Array(
    prgn: ?*u64,
    cElems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitVariantFromDoubleArray(
    prgn: ?*f64,
    cElems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn InitVariantFromStringArray(
    prgsz: ?*?*u16,
    cElems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToBooleanWithDefault(
    varIn: ?*VARIANT,
    fDefault: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToInt16WithDefault(
    varIn: ?*VARIANT,
    iDefault: i16,
) callconv(@import("std").os.windows.WINAPI) i16;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToUInt16WithDefault(
    varIn: ?*VARIANT,
    uiDefault: u16,
) callconv(@import("std").os.windows.WINAPI) u16;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToInt32WithDefault(
    varIn: ?*VARIANT,
    lDefault: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToUInt32WithDefault(
    varIn: ?*VARIANT,
    ulDefault: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToInt64WithDefault(
    varIn: ?*VARIANT,
    llDefault: i64,
) callconv(@import("std").os.windows.WINAPI) i64;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToUInt64WithDefault(
    varIn: ?*VARIANT,
    ullDefault: u64,
) callconv(@import("std").os.windows.WINAPI) u64;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToDoubleWithDefault(
    varIn: ?*VARIANT,
    dblDefault: f64,
) callconv(@import("std").os.windows.WINAPI) f64;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToStringWithDefault(
    varIn: ?*VARIANT,
    pszDefault: ?*u16,
) callconv(@import("std").os.windows.WINAPI) ?*u16;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToBoolean(
    varIn: ?*VARIANT,
    pfRet: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToInt16(
    varIn: ?*VARIANT,
    piRet: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToUInt16(
    varIn: ?*VARIANT,
    puiRet: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToInt32(
    varIn: ?*VARIANT,
    plRet: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToUInt32(
    varIn: ?*VARIANT,
    pulRet: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToInt64(
    varIn: ?*VARIANT,
    pllRet: ?*i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToUInt64(
    varIn: ?*VARIANT,
    pullRet: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToDouble(
    varIn: ?*VARIANT,
    pdblRet: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToBuffer(
    varIn: ?*VARIANT,
    pv: ?*opaque{},
    cb: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToGUID(
    varIn: ?*VARIANT,
    pguid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToString(
    varIn: ?*VARIANT,
    pszBuf: ?*u16,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToStringAlloc(
    varIn: ?*VARIANT,
    ppszBuf: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToDosDateTime(
    varIn: ?*VARIANT,
    pwDate: ?*u16,
    pwTime: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToStrRet(
    varIn: ?*VARIANT,
    pstrret: ?*STRRET,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToFileTime(
    varIn: ?*VARIANT,
    stfOut: i32,
    pftOut: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantGetElementCount(
    varIn: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToBooleanArray(
    @"var": ?*VARIANT,
    prgf: ?*i32,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToInt16Array(
    @"var": ?*VARIANT,
    prgn: ?*i16,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToUInt16Array(
    @"var": ?*VARIANT,
    prgn: ?*u16,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToInt32Array(
    @"var": ?*VARIANT,
    prgn: ?*i32,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToUInt32Array(
    @"var": ?*VARIANT,
    prgn: ?*u32,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToInt64Array(
    @"var": ?*VARIANT,
    prgn: ?*i64,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToUInt64Array(
    @"var": ?*VARIANT,
    prgn: ?*u64,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToDoubleArray(
    @"var": ?*VARIANT,
    prgn: ?*f64,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToStringArray(
    @"var": ?*VARIANT,
    prgsz: ?*?*u16,
    crgsz: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToBooleanArrayAlloc(
    @"var": ?*VARIANT,
    pprgf: ?*?*i32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToInt16ArrayAlloc(
    @"var": ?*VARIANT,
    pprgn: ?*?*i16,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToUInt16ArrayAlloc(
    @"var": ?*VARIANT,
    pprgn: ?*?*u16,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToInt32ArrayAlloc(
    @"var": ?*VARIANT,
    pprgn: ?*?*i32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToUInt32ArrayAlloc(
    @"var": ?*VARIANT,
    pprgn: ?*?*u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToInt64ArrayAlloc(
    @"var": ?*VARIANT,
    pprgn: ?*?*i64,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToUInt64ArrayAlloc(
    @"var": ?*VARIANT,
    pprgn: ?*?*u64,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToDoubleArrayAlloc(
    @"var": ?*VARIANT,
    pprgn: ?*?*f64,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantToStringArrayAlloc(
    @"var": ?*VARIANT,
    pprgsz: ?*?*?*u16,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantGetBooleanElem(
    @"var": ?*VARIANT,
    iElem: u32,
    pfVal: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantGetInt16Elem(
    @"var": ?*VARIANT,
    iElem: u32,
    pnVal: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantGetUInt16Elem(
    @"var": ?*VARIANT,
    iElem: u32,
    pnVal: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantGetInt32Elem(
    @"var": ?*VARIANT,
    iElem: u32,
    pnVal: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantGetUInt32Elem(
    @"var": ?*VARIANT,
    iElem: u32,
    pnVal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantGetInt64Elem(
    @"var": ?*VARIANT,
    iElem: u32,
    pnVal: ?*i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantGetUInt64Elem(
    @"var": ?*VARIANT,
    iElem: u32,
    pnVal: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantGetDoubleElem(
    @"var": ?*VARIANT,
    iElem: u32,
    pnVal: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantGetStringElem(
    @"var": ?*VARIANT,
    iElem: u32,
    ppszVal: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn ClearVariantArray(
    pvars: ?*VARIANT,
    cvars: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "PROPSYS" fn VariantCompare(
    var1: ?*VARIANT,
    var2: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) i32;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const HWND = @import("windowsandmessaging.zig").HWND;
const HRESULT = @import("com.zig").HRESULT;
const ITEMIDLIST = @import("shell.zig").ITEMIDLIST;
const IBindCtx = @import("com.zig").IBindCtx;
const IPropertyStore = @import("audio.zig").IPropertyStore;
const HANDLE = @import("systemservices.zig").HANDLE;
const IPropertySetStorage = @import("structuredstorage.zig").IPropertySetStorage;
const IPropertyStorage = @import("structuredstorage.zig").IPropertyStorage;
const PROPSPEC = @import("structuredstorage.zig").PROPSPEC;
const PROPVARIANT = @import("structuredstorage.zig").PROPVARIANT;
const IUnknown = @import("com.zig").IUnknown;
const IDelayedPropertyStoreFactory = @import("shell.zig").IDelayedPropertyStoreFactory;
const BOOL = @import("systemservices.zig").BOOL;
const IPropertyBag = @import("automation.zig").IPropertyBag;
const VARIANT = @import("automation.zig").VARIANT;
const BSTR = @import("automation.zig").BSTR;
const POINTL = @import("displaydevices.zig").POINTL;
const POINTS = @import("displaydevices.zig").POINTS;
const RECTL = @import("displaydevices.zig").RECTL;
const IStream = @import("structuredstorage.zig").IStream;
const HINSTANCE = @import("systemservices.zig").HINSTANCE;
const FILETIME = @import("windowsprogramming.zig").FILETIME;
const STRRET = @import("shell.zig").STRRET;

test "" {
    const constant_export_count = 0;
    const type_export_count = 50;
    const func_count = 227;
    const unicode_alias_count = 0;
    const type_import_count = 24;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
