//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//
pub const WdsCliFlagEnumFilterVersion : i32 = 1;
pub const WdsCliFlagEnumFilterFirmware : i32 = 2;
pub const WDS_LOG_TYPE_CLIENT_ERROR : i32 = 1;
pub const WDS_LOG_TYPE_CLIENT_STARTED : i32 = 2;
pub const WDS_LOG_TYPE_CLIENT_FINISHED : i32 = 3;
pub const WDS_LOG_TYPE_CLIENT_IMAGE_SELECTED : i32 = 4;
pub const WDS_LOG_TYPE_CLIENT_APPLY_STARTED : i32 = 5;
pub const WDS_LOG_TYPE_CLIENT_APPLY_FINISHED : i32 = 6;
pub const WDS_LOG_TYPE_CLIENT_GENERIC_MESSAGE : i32 = 7;
pub const WDS_LOG_TYPE_CLIENT_UNATTEND_MODE : i32 = 8;
pub const WDS_LOG_TYPE_CLIENT_TRANSFER_START : i32 = 9;
pub const WDS_LOG_TYPE_CLIENT_TRANSFER_END : i32 = 10;
pub const WDS_LOG_TYPE_CLIENT_TRANSFER_DOWNGRADE : i32 = 11;
pub const WDS_LOG_TYPE_CLIENT_DOMAINJOINERROR : i32 = 12;
pub const WDS_LOG_TYPE_CLIENT_POST_ACTIONS_START : i32 = 13;
pub const WDS_LOG_TYPE_CLIENT_POST_ACTIONS_END : i32 = 14;
pub const WDS_LOG_TYPE_CLIENT_APPLY_STARTED_2 : i32 = 15;
pub const WDS_LOG_TYPE_CLIENT_APPLY_FINISHED_2 : i32 = 16;
pub const WDS_LOG_TYPE_CLIENT_DOMAINJOINERROR_2 : i32 = 17;
pub const WDS_LOG_TYPE_CLIENT_DRIVER_PACKAGE_NOT_ACCESSIBLE : i32 = 18;
pub const WDS_LOG_TYPE_CLIENT_OFFLINE_DRIVER_INJECTION_START : i32 = 19;
pub const WDS_LOG_TYPE_CLIENT_OFFLINE_DRIVER_INJECTION_END : i32 = 20;
pub const WDS_LOG_TYPE_CLIENT_OFFLINE_DRIVER_INJECTION_FAILURE : i32 = 21;
pub const WDS_LOG_TYPE_CLIENT_IMAGE_SELECTED2 : i32 = 22;
pub const WDS_LOG_TYPE_CLIENT_IMAGE_SELECTED3 : i32 = 23;
pub const WDS_LOG_TYPE_CLIENT_MAX_CODE : i32 = 24;
pub const WDS_LOG_LEVEL_DISABLED : i32 = 0;
pub const WDS_LOG_LEVEL_ERROR : i32 = 1;
pub const WDS_LOG_LEVEL_WARNING : i32 = 2;
pub const WDS_LOG_LEVEL_INFO : i32 = 3;
pub const WDS_CLI_MSG_START : i32 = 0;
pub const WDS_CLI_MSG_COMPLETE : i32 = 1;
pub const WDS_CLI_MSG_PROGRESS : i32 = 2;
pub const WDS_CLI_MSG_TEXT : i32 = 3;

//
// types
//
// --------------------------------------------------------
// Type: WDS_CLI_CRED
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WDS_CLI_CRED = extern struct {
    pwszUserName: ?*u16,
    pwszDomain: ?*u16,
    pwszPassword: ?*u16,
};
// --------------------------------------------------------
// Type: PFN_WdsCliTraceFunction
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_WdsCliTraceFunction = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WDS_CLI_IMAGE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WDS_CLI_IMAGE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WDS_CLI_FIRMWARE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WDS_CLI_FIRMWARE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WDS_CLI_IMAGE_PARAM_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WDS_CLI_IMAGE_PARAM_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: PFN_WdsCliCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_WdsCliCallback = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PXE_DHCP_OPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PXE_DHCP_OPTION = extern struct {
    OptionType: u8,
    OptionLength: u8,
    OptionValue: ?[*]u8,
};
// --------------------------------------------------------
// Type: PXE_DHCP_MESSAGE
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const PXE_DHCP_MESSAGE = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PXE_DHCPV6_OPTION
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const PXE_DHCPV6_OPTION = *opaque{
};
// --------------------------------------------------------
// Type: PXE_DHCPV6_MESSAGE_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PXE_DHCPV6_MESSAGE_HEADER = extern struct {
    MessageType: u8,
    Message: ?[*]u8,
};
// --------------------------------------------------------
// Type: PXE_DHCPV6_MESSAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PXE_DHCPV6_MESSAGE = extern struct {
    MessageType: u8,
    TransactionIDByte1: u8,
    TransactionIDByte2: u8,
    TransactionIDByte3: u8,
    Options: ?[*]PXE_DHCPV6_OPTION,
};
// --------------------------------------------------------
// Type: PXE_DHCPV6_RELAY_MESSAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PXE_DHCPV6_RELAY_MESSAGE = extern struct {
    MessageType: u8,
    HopCount: u8,
    LinkAddress: ?[*]u8,
    PeerAddress: ?[*]u8,
    Options: ?[*]PXE_DHCPV6_OPTION,
};
// --------------------------------------------------------
// Type: PXE_PROVIDER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PXE_PROVIDER = extern struct {
    uSizeOfStruct: u32,
    pwszName: ?*u16,
    pwszFilePath: ?*u16,
    bIsCritical: BOOL,
    uIndex: u32,
};
// --------------------------------------------------------
// Type: PXE_ADDRESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PXE_ADDRESS = extern struct {
    uFlags: u32,
    Anonymous: _Anonymous_e__Union,
    uAddrLen: u32,
    uPort: u16,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PXE_DHCPV6_NESTED_RELAY_MESSAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PXE_DHCPV6_NESTED_RELAY_MESSAGE = extern struct {
    pRelayMessage: ?*PXE_DHCPV6_RELAY_MESSAGE,
    cbRelayMessage: u32,
    pInterfaceIdOption: ?*opaque{},
    cbInterfaceIdOption: u16,
};
// --------------------------------------------------------
// Type: TRANSPORTPROVIDER_CALLBACK_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TRANSPORTPROVIDER_CALLBACK_ID = *opaque{
};
// --------------------------------------------------------
// Type: WDS_TRANSPORTPROVIDER_INIT_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WDS_TRANSPORTPROVIDER_INIT_PARAMS = extern struct {
    ulLength: u32,
    ulMcServerVersion: u32,
    hRegistryKey: HKEY,
    hProvider: HANDLE,
};
// --------------------------------------------------------
// Type: WDS_TRANSPORTPROVIDER_SETTINGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WDS_TRANSPORTPROVIDER_SETTINGS = extern struct {
    ulLength: u32,
    ulProviderVersion: u32,
};
// --------------------------------------------------------
// Type: TRANSPORTCLIENT_CALLBACK_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TRANSPORTCLIENT_CALLBACK_ID = *opaque{
};
// --------------------------------------------------------
// Type: TRANSPORTCLIENT_SESSION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRANSPORTCLIENT_SESSION_INFO = extern struct {
    ulStructureLength: u32,
    ullFileSize: ULARGE_INTEGER,
    ulBlockSize: u32,
};
// --------------------------------------------------------
// Type: PFN_WdsTransportClientSessionStart
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_WdsTransportClientSessionStart = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_WdsTransportClientSessionStartEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_WdsTransportClientSessionStartEx = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_WdsTransportClientReceiveMetadata
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_WdsTransportClientReceiveMetadata = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_WdsTransportClientReceiveContents
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_WdsTransportClientReceiveContents = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_WdsTransportClientSessionComplete
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_WdsTransportClientSessionComplete = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_WdsTransportClientSessionNegotiate
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_WdsTransportClientSessionNegotiate = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WDS_TRANSPORTCLIENT_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WDS_TRANSPORTCLIENT_REQUEST = extern struct {
    ulLength: u32,
    ulApiVersion: u32,
    ulAuthLevel: u32,
    pwszServer: ?*u16,
    pwszNamespace: ?*u16,
    pwszObjectName: ?*u16,
    ulCacheSize: u32,
    ulProtocol: u32,
    pvProtocolData: ?*opaque{},
    ulProtocolDataLength: u32,
};
// --------------------------------------------------------
// Type: WDS_TRANSPORTCLIENT_CALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WDS_TRANSPORTCLIENT_CALLBACKS = extern struct {
    SessionStart: PFN_WdsTransportClientSessionStart,
    SessionStartEx: PFN_WdsTransportClientSessionStartEx,
    ReceiveContents: PFN_WdsTransportClientReceiveContents,
    ReceiveMetadata: PFN_WdsTransportClientReceiveMetadata,
    SessionComplete: PFN_WdsTransportClientSessionComplete,
    SessionNegotiate: PFN_WdsTransportClientSessionNegotiate,
};
// --------------------------------------------------------
// Type: WdsTransportCacheable
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WdsTransportCacheable = opaque {
};
// --------------------------------------------------------
// Type: WdsTransportCollection
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WdsTransportCollection = opaque {
};
// --------------------------------------------------------
// Type: WdsTransportManager
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WdsTransportManager = opaque {
};
// --------------------------------------------------------
// Type: WdsTransportServer
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WdsTransportServer = opaque {
};
// --------------------------------------------------------
// Type: WdsTransportSetupManager
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WdsTransportSetupManager = opaque {
};
// --------------------------------------------------------
// Type: WdsTransportConfigurationManager
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WdsTransportConfigurationManager = opaque {
};
// --------------------------------------------------------
// Type: WdsTransportNamespaceManager
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WdsTransportNamespaceManager = opaque {
};
// --------------------------------------------------------
// Type: WdsTransportServicePolicy
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WdsTransportServicePolicy = opaque {
};
// --------------------------------------------------------
// Type: WdsTransportDiagnosticsPolicy
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WdsTransportDiagnosticsPolicy = opaque {
};
// --------------------------------------------------------
// Type: WdsTransportMulticastSessionPolicy
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WdsTransportMulticastSessionPolicy = opaque {
};
// --------------------------------------------------------
// Type: WdsTransportNamespace
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WdsTransportNamespace = opaque {
};
// --------------------------------------------------------
// Type: WdsTransportNamespaceAutoCast
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WdsTransportNamespaceAutoCast = opaque {
};
// --------------------------------------------------------
// Type: WdsTransportNamespaceScheduledCast
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WdsTransportNamespaceScheduledCast = opaque {
};
// --------------------------------------------------------
// Type: WdsTransportNamespaceScheduledCastManualStart
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WdsTransportNamespaceScheduledCastManualStart = opaque {
};
// --------------------------------------------------------
// Type: WdsTransportNamespaceScheduledCastAutoStart
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WdsTransportNamespaceScheduledCastAutoStart = opaque {
};
// --------------------------------------------------------
// Type: WdsTransportContent
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WdsTransportContent = opaque {
};
// --------------------------------------------------------
// Type: WdsTransportSession
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WdsTransportSession = opaque {
};
// --------------------------------------------------------
// Type: WdsTransportClient
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WdsTransportClient = opaque {
};
// --------------------------------------------------------
// Type: WdsTransportTftpClient
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WdsTransportTftpClient = opaque {
};
// --------------------------------------------------------
// Type: WdsTransportTftpManager
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WdsTransportTftpManager = opaque {
};
// --------------------------------------------------------
// Type: WdsTransportContentProvider
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WdsTransportContentProvider = opaque {
};
// --------------------------------------------------------
// Type: WDSTRANSPORT_FEATURE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WDSTRANSPORT_FEATURE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: WDSTRANSPORT_PROTOCOL_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WDSTRANSPORT_PROTOCOL_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: WDSTRANSPORT_NAMESPACE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WDSTRANSPORT_NAMESPACE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WDSTRANSPORT_DISCONNECT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WDSTRANSPORT_DISCONNECT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WDSTRANSPORT_SERVICE_NOTIFICATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WDSTRANSPORT_SERVICE_NOTIFICATION = *opaque{
};
// --------------------------------------------------------
// Type: WDSTRANSPORT_IP_ADDRESS_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WDSTRANSPORT_IP_ADDRESS_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WDSTRANSPORT_IP_ADDRESS_SOURCE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WDSTRANSPORT_IP_ADDRESS_SOURCE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WDSTRANSPORT_NETWORK_PROFILE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WDSTRANSPORT_NETWORK_PROFILE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WDSTRANSPORT_DIAGNOSTICS_COMPONENT_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WDSTRANSPORT_DIAGNOSTICS_COMPONENT_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: WDSTRANSPORT_SLOW_CLIENT_HANDLING_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WDSTRANSPORT_SLOW_CLIENT_HANDLING_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WDSTRANSPORT_UDP_PORT_POLICY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WDSTRANSPORT_UDP_PORT_POLICY = *opaque{
};
// --------------------------------------------------------
// Type: WDSTRANSPORT_TFTP_CAPABILITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WDSTRANSPORT_TFTP_CAPABILITY = *opaque{
};
// --------------------------------------------------------
// Type: IWdsTransportCacheable
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWdsTransportCacheable = *opaque{
    // TODO: Method 'get_Dirty'
    // TODO: Method 'Discard'
    // TODO: Method 'Refresh'
    // TODO: Method 'Commit'
};
// --------------------------------------------------------
// Type: IWdsTransportCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWdsTransportCollection = *opaque{
    // TODO: Method 'get_Count'
    // TODO: Method 'get_Item'
    // TODO: Method 'get__NewEnum'
};
// --------------------------------------------------------
// Type: IWdsTransportManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWdsTransportManager = *opaque{
    // TODO: Method 'GetWdsTransportServer'
};
// --------------------------------------------------------
// Type: IWdsTransportServer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWdsTransportServer = *opaque{
    // TODO: Method 'get_Name'
    // TODO: Method 'get_SetupManager'
    // TODO: Method 'get_ConfigurationManager'
    // TODO: Method 'get_NamespaceManager'
    // TODO: Method 'DisconnectClient'
};
// --------------------------------------------------------
// Type: IWdsTransportServer2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWdsTransportServer2 = *opaque{
    // TODO: Method 'get_TftpManager'
};
// --------------------------------------------------------
// Type: IWdsTransportSetupManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWdsTransportSetupManager = *opaque{
    // TODO: Method 'get_Version'
    // TODO: Method 'get_InstalledFeatures'
    // TODO: Method 'get_Protocols'
    // TODO: Method 'RegisterContentProvider'
    // TODO: Method 'DeregisterContentProvider'
};
// --------------------------------------------------------
// Type: IWdsTransportSetupManager2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWdsTransportSetupManager2 = *opaque{
    // TODO: Method 'get_TftpCapabilities'
    // TODO: Method 'get_ContentProviders'
};
// --------------------------------------------------------
// Type: IWdsTransportConfigurationManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWdsTransportConfigurationManager = *opaque{
    // TODO: Method 'get_ServicePolicy'
    // TODO: Method 'get_DiagnosticsPolicy'
    // TODO: Method 'get_WdsTransportServicesRunning'
    // TODO: Method 'EnableWdsTransportServices'
    // TODO: Method 'DisableWdsTransportServices'
    // TODO: Method 'StartWdsTransportServices'
    // TODO: Method 'StopWdsTransportServices'
    // TODO: Method 'RestartWdsTransportServices'
    // TODO: Method 'NotifyWdsTransportServices'
};
// --------------------------------------------------------
// Type: IWdsTransportConfigurationManager2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWdsTransportConfigurationManager2 = *opaque{
    // TODO: Method 'get_MulticastSessionPolicy'
};
// --------------------------------------------------------
// Type: IWdsTransportNamespaceManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWdsTransportNamespaceManager = *opaque{
    // TODO: Method 'CreateNamespace'
    // TODO: Method 'RetrieveNamespace'
    // TODO: Method 'RetrieveNamespaces'
};
// --------------------------------------------------------
// Type: IWdsTransportTftpManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWdsTransportTftpManager = *opaque{
    // TODO: Method 'RetrieveTftpClients'
};
// --------------------------------------------------------
// Type: IWdsTransportServicePolicy
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWdsTransportServicePolicy = *opaque{
    // TODO: Method 'get_IpAddressSource'
    // TODO: Method 'put_IpAddressSource'
    // TODO: Method 'get_StartIpAddress'
    // TODO: Method 'put_StartIpAddress'
    // TODO: Method 'get_EndIpAddress'
    // TODO: Method 'put_EndIpAddress'
    // TODO: Method 'get_StartPort'
    // TODO: Method 'put_StartPort'
    // TODO: Method 'get_EndPort'
    // TODO: Method 'put_EndPort'
    // TODO: Method 'get_NetworkProfile'
    // TODO: Method 'put_NetworkProfile'
};
// --------------------------------------------------------
// Type: IWdsTransportServicePolicy2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWdsTransportServicePolicy2 = *opaque{
    // TODO: Method 'get_UdpPortPolicy'
    // TODO: Method 'put_UdpPortPolicy'
    // TODO: Method 'get_TftpMaximumBlockSize'
    // TODO: Method 'put_TftpMaximumBlockSize'
    // TODO: Method 'get_EnableTftpVariableWindowExtension'
    // TODO: Method 'put_EnableTftpVariableWindowExtension'
};
// --------------------------------------------------------
// Type: IWdsTransportDiagnosticsPolicy
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWdsTransportDiagnosticsPolicy = *opaque{
    // TODO: Method 'get_Enabled'
    // TODO: Method 'put_Enabled'
    // TODO: Method 'get_Components'
    // TODO: Method 'put_Components'
};
// --------------------------------------------------------
// Type: IWdsTransportMulticastSessionPolicy
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWdsTransportMulticastSessionPolicy = *opaque{
    // TODO: Method 'get_SlowClientHandling'
    // TODO: Method 'put_SlowClientHandling'
    // TODO: Method 'get_AutoDisconnectThreshold'
    // TODO: Method 'put_AutoDisconnectThreshold'
    // TODO: Method 'get_MultistreamStreamCount'
    // TODO: Method 'put_MultistreamStreamCount'
    // TODO: Method 'get_SlowClientFallback'
    // TODO: Method 'put_SlowClientFallback'
};
// --------------------------------------------------------
// Type: IWdsTransportNamespace
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWdsTransportNamespace = *opaque{
    // TODO: Method 'get_Type'
    // TODO: Method 'get_Id'
    // TODO: Method 'get_Name'
    // TODO: Method 'put_Name'
    // TODO: Method 'get_FriendlyName'
    // TODO: Method 'put_FriendlyName'
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
    // TODO: Method 'get_ContentProvider'
    // TODO: Method 'put_ContentProvider'
    // TODO: Method 'get_Configuration'
    // TODO: Method 'put_Configuration'
    // TODO: Method 'get_Registered'
    // TODO: Method 'get_Tombstoned'
    // TODO: Method 'get_TombstoneTime'
    // TODO: Method 'get_TransmissionStarted'
    // TODO: Method 'Register'
    // TODO: Method 'Deregister'
    // TODO: Method 'Clone'
    // TODO: Method 'Refresh'
    // TODO: Method 'RetrieveContents'
};
// --------------------------------------------------------
// Type: IWdsTransportNamespaceAutoCast
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWdsTransportNamespaceAutoCast = *opaque{
};
// --------------------------------------------------------
// Type: IWdsTransportNamespaceScheduledCast
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWdsTransportNamespaceScheduledCast = *opaque{
    // TODO: Method 'StartTransmission'
};
// --------------------------------------------------------
// Type: IWdsTransportNamespaceScheduledCastManualStart
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWdsTransportNamespaceScheduledCastManualStart = *opaque{
};
// --------------------------------------------------------
// Type: IWdsTransportNamespaceScheduledCastAutoStart
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWdsTransportNamespaceScheduledCastAutoStart = *opaque{
    // TODO: Method 'get_MinimumClients'
    // TODO: Method 'put_MinimumClients'
    // TODO: Method 'get_StartTime'
    // TODO: Method 'put_StartTime'
};
// --------------------------------------------------------
// Type: IWdsTransportContent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWdsTransportContent = *opaque{
    // TODO: Method 'get_Namespace'
    // TODO: Method 'get_Id'
    // TODO: Method 'get_Name'
    // TODO: Method 'RetrieveSessions'
    // TODO: Method 'Terminate'
};
// --------------------------------------------------------
// Type: IWdsTransportSession
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWdsTransportSession = *opaque{
    // TODO: Method 'get_Content'
    // TODO: Method 'get_Id'
    // TODO: Method 'get_NetworkInterfaceName'
    // TODO: Method 'get_NetworkInterfaceAddress'
    // TODO: Method 'get_TransferRate'
    // TODO: Method 'get_MasterClientId'
    // TODO: Method 'RetrieveClients'
    // TODO: Method 'Terminate'
};
// --------------------------------------------------------
// Type: IWdsTransportClient
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWdsTransportClient = *opaque{
    // TODO: Method 'get_Session'
    // TODO: Method 'get_Id'
    // TODO: Method 'get_Name'
    // TODO: Method 'get_MacAddress'
    // TODO: Method 'get_IpAddress'
    // TODO: Method 'get_PercentCompletion'
    // TODO: Method 'get_JoinDuration'
    // TODO: Method 'get_CpuUtilization'
    // TODO: Method 'get_MemoryUtilization'
    // TODO: Method 'get_NetworkUtilization'
    // TODO: Method 'get_UserIdentity'
    // TODO: Method 'Disconnect'
};
// --------------------------------------------------------
// Type: IWdsTransportTftpClient
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWdsTransportTftpClient = *opaque{
    // TODO: Method 'get_FileName'
    // TODO: Method 'get_IpAddress'
    // TODO: Method 'get_Timeout'
    // TODO: Method 'get_CurrentFileOffset'
    // TODO: Method 'get_FileSize'
    // TODO: Method 'get_BlockSize'
    // TODO: Method 'get_WindowSize'
};
// --------------------------------------------------------
// Type: IWdsTransportContentProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWdsTransportContentProvider = *opaque{
    // TODO: Method 'get_Name'
    // TODO: Method 'get_Description'
    // TODO: Method 'get_FilePath'
    // TODO: Method 'get_InitializationRoutine'
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliClose(
    Handle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliRegisterTrace(
    pfn: PFN_WdsCliTraceFunction,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliFreeStringArray(
    ppwszArray: ?*?*u16,
    ulCount: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliFindFirstImage(
    hSession: HANDLE,
    phFindHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliFindNextImage(
    Handle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliGetEnumerationFlags(
    Handle: HANDLE,
    pdwFlags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliGetImageHandleFromFindHandle(
    FindHandle: HANDLE,
    phImageHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliGetImageHandleFromTransferHandle(
    hTransfer: HANDLE,
    phImageHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=True (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliCreateSession(
    pwszServer: ?*u16,
    pCred: ?*WDS_CLI_CRED,
    phSession: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliAuthorizeSession(
    hSession: HANDLE,
    pCred: ?*WDS_CLI_CRED,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliInitializeLog(
    hSession: HANDLE,
    ulClientArchitecture: u32,
    pwszClientId: ?*u16,
    pwszClientAddress: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliLog(
    hSession: HANDLE,
    ulLogLevel: u32,
    ulMessageCode: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliGetImageName(
    hIfh: HANDLE,
    ppwszValue: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliGetImageDescription(
    hIfh: HANDLE,
    ppwszValue: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliGetImageType(
    hIfh: HANDLE,
    pImageType: ?*WDS_CLI_IMAGE_TYPE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliGetImageFiles(
    hIfh: HANDLE,
    pppwszFiles: ?*?*?*u16,
    pdwCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliGetImageLanguage(
    hIfh: HANDLE,
    ppwszValue: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliGetImageLanguages(
    hIfh: HANDLE,
    pppszValues: ?*?*?*i8,
    pdwNumValues: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliGetImageVersion(
    hIfh: HANDLE,
    ppwszValue: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliGetImagePath(
    hIfh: HANDLE,
    ppwszValue: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliGetImageIndex(
    hIfh: HANDLE,
    pdwValue: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliGetImageArchitecture(
    hIfh: HANDLE,
    pdwValue: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliGetImageLastModifiedTime(
    hIfh: HANDLE,
    ppSysTimeValue: ?*?*SYSTEMTIME,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliGetImageSize(
    hIfh: HANDLE,
    pullValue: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliGetImageHalName(
    hIfh: HANDLE,
    ppwszValue: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliGetImageGroup(
    hIfh: HANDLE,
    ppwszValue: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliGetImageNamespace(
    hIfh: HANDLE,
    ppwszValue: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliGetImageParameter(
    hIfh: HANDLE,
    ParamType: WDS_CLI_IMAGE_PARAM_TYPE,
    pResponse: ?*opaque{},
    uResponseLen: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliGetTransferSize(
    hIfh: HANDLE,
    pullValue: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliSetTransferBufferSize(
    ulSizeInBytes: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliTransferImage(
    hImage: HANDLE,
    pwszLocalPath: ?*u16,
    dwFlags: u32,
    dwReserved: u32,
    pfnWdsCliCallback: PFN_WdsCliCallback,
    pvUserData: ?*opaque{},
    phTransfer: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliTransferFile(
    pwszServer: ?*u16,
    pwszNamespace: ?*u16,
    pwszRemoteFilePath: ?*u16,
    pwszLocalFilePath: ?*u16,
    dwFlags: u32,
    dwReserved: u32,
    pfnWdsCliCallback: PFN_WdsCliCallback,
    pvUserData: ?*opaque{},
    phTransfer: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliCancelTransfer(
    hTransfer: HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliWaitForTransfer(
    hTransfer: HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliObtainDriverPackages(
    hImage: HANDLE,
    ppwszServerName: ?*?*u16,
    pppwszDriverPackages: ?*?*?*u16,
    pulCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliObtainDriverPackagesEx(
    hSession: HANDLE,
    pwszMachineInfo: ?*u16,
    ppwszServerName: ?*?*u16,
    pppwszDriverPackages: ?*?*?*u16,
    pulCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSCLIENTAPI" fn WdsCliGetDriverQueryXml(
    pwszWinDirPath: ?*u16,
    ppwszDriverQuery: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxeProviderRegister(
    pszProviderName: ?*u16,
    pszModulePath: ?*u16,
    Index: u32,
    bIsCritical: BOOL,
    phProviderKey: ?*HKEY,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxeProviderUnRegister(
    pszProviderName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxeProviderQueryIndex(
    pszProviderName: ?*u16,
    puIndex: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxeProviderEnumFirst(
    phEnum: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxeProviderEnumNext(
    hEnum: HANDLE,
    ppProvider: ?*?*PXE_PROVIDER,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxeProviderEnumClose(
    hEnum: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxeProviderFreeInfo(
    pProvider: ?*PXE_PROVIDER,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxeRegisterCallback(
    hProvider: HANDLE,
    CallbackType: u32,
    pCallbackFunction: ?*opaque{},
    pContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxeSendReply(
    hClientRequest: HANDLE,
    pPacket: ?*opaque{},
    uPacketLen: u32,
    pAddress: ?*PXE_ADDRESS,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxeAsyncRecvDone(
    hClientRequest: HANDLE,
    Action: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxeTrace(
    hProvider: HANDLE,
    Severity: u32,
    pszFormat: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxeTraceV(
    hProvider: HANDLE,
    Severity: u32,
    pszFormat: ?*u16,
    Params: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "WDSPXE" fn PxePacketAllocate(
    hProvider: HANDLE,
    hClientRequest: HANDLE,
    uSize: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxePacketFree(
    hProvider: HANDLE,
    hClientRequest: HANDLE,
    pPacket: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxeProviderSetAttribute(
    hProvider: HANDLE,
    Attribute: u32,
    pParameterBuffer: ?*opaque{},
    uParamLen: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxeDhcpInitialize(
    pRecvPacket: ?*opaque{},
    uRecvPacketLen: u32,
    pReplyPacket: ?*opaque{},
    uMaxReplyPacketLen: u32,
    puReplyPacketLen: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxeDhcpv6Initialize(
    pRequest: ?*opaque{},
    cbRequest: u32,
    pReply: ?*opaque{},
    cbReply: u32,
    pcbReplyUsed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxeDhcpAppendOption(
    pReplyPacket: ?*opaque{},
    uMaxReplyPacketLen: u32,
    puReplyPacketLen: ?*u32,
    bOption: u8,
    bOptionLen: u8,
    pValue: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxeDhcpv6AppendOption(
    pReply: ?*opaque{},
    cbReply: u32,
    pcbReplyUsed: ?*u32,
    wOptionType: u16,
    cbOption: u16,
    pOption: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxeDhcpAppendOptionRaw(
    pReplyPacket: ?*opaque{},
    uMaxReplyPacketLen: u32,
    puReplyPacketLen: ?*u32,
    uBufferLen: u16,
    pBuffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxeDhcpv6AppendOptionRaw(
    pReply: ?*opaque{},
    cbReply: u32,
    pcbReplyUsed: ?*u32,
    cbBuffer: u16,
    pBuffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxeDhcpIsValid(
    pPacket: ?*opaque{},
    uPacketLen: u32,
    bRequestPacket: BOOL,
    pbPxeOptionPresent: ?*i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxeDhcpv6IsValid(
    pPacket: ?*opaque{},
    uPacketLen: u32,
    bRequestPacket: BOOL,
    pbPxeOptionPresent: ?*i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxeDhcpGetOptionValue(
    pPacket: ?*opaque{},
    uPacketLen: u32,
    uInstance: u32,
    bOption: u8,
    pbOptionLen: ?*u8,
    ppOptionValue: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxeDhcpv6GetOptionValue(
    pPacket: ?*opaque{},
    uPacketLen: u32,
    uInstance: u32,
    wOption: u16,
    pwOptionLen: ?*u16,
    ppOptionValue: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxeDhcpGetVendorOptionValue(
    pPacket: ?*opaque{},
    uPacketLen: u32,
    bOption: u8,
    uInstance: u32,
    pbOptionLen: ?*u8,
    ppOptionValue: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxeDhcpv6GetVendorOptionValue(
    pPacket: ?*opaque{},
    uPacketLen: u32,
    dwEnterpriseNumber: u32,
    wOption: u16,
    uInstance: u32,
    pwOptionLen: ?*u16,
    ppOptionValue: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxeDhcpv6ParseRelayForw(
    pRelayForwPacket: ?*opaque{},
    uRelayForwPacketLen: u32,
    pRelayMessages: ?*PXE_DHCPV6_NESTED_RELAY_MESSAGE,
    nRelayMessages: u32,
    pnRelayMessages: ?*u32,
    ppInnerPacket: ?*?*u8,
    pcbInnerPacket: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxeDhcpv6CreateRelayRepl(
    pRelayMessages: ?*PXE_DHCPV6_NESTED_RELAY_MESSAGE,
    nRelayMessages: u32,
    pInnerPacket: ?*u8,
    cbInnerPacket: u32,
    pReplyBuffer: ?*opaque{},
    cbReplyBuffer: u32,
    pcbReplyBuffer: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxeGetServerInfo(
    uInfoType: u32,
    pBuffer: ?*opaque{},
    uBufferLen: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSPXE" fn PxeGetServerInfoEx(
    uInfoType: u32,
    pBuffer: ?*opaque{},
    uBufferLen: u32,
    puBufferUsed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSMC" fn WdsTransportServerRegisterCallback(
    hProvider: HANDLE,
    CallbackId: TRANSPORTPROVIDER_CALLBACK_ID,
    pfnCallback: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSMC" fn WdsTransportServerCompleteRead(
    hProvider: HANDLE,
    ulBytesRead: u32,
    pvUserData: ?*opaque{},
    hReadResult: HRESULT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSMC" fn WdsTransportServerTrace(
    hProvider: HANDLE,
    Severity: u32,
    pwszFormat: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSMC" fn WdsTransportServerTraceV(
    hProvider: HANDLE,
    Severity: u32,
    pwszFormat: ?*u16,
    Params: ?*i8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSMC" fn WdsTransportServerAllocateBuffer(
    hProvider: HANDLE,
    ulBufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "WDSMC" fn WdsTransportServerFreeBuffer(
    hProvider: HANDLE,
    pvBuffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WDSTPTC" fn WdsTransportClientInitialize(
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSTPTC" fn WdsTransportClientInitializeSession(
    pSessionRequest: ?*WDS_TRANSPORTCLIENT_REQUEST,
    pCallerData: ?*opaque{},
    hSessionKey: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSTPTC" fn WdsTransportClientRegisterCallback(
    hSessionKey: HANDLE,
    CallbackId: TRANSPORTCLIENT_CALLBACK_ID,
    pfnCallback: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSTPTC" fn WdsTransportClientStartSession(
    hSessionKey: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSTPTC" fn WdsTransportClientCompleteReceive(
    hSessionKey: HANDLE,
    ulSize: u32,
    pullOffset: ?*ULARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSTPTC" fn WdsTransportClientCancelSession(
    hSessionKey: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSTPTC" fn WdsTransportClientCancelSessionEx(
    hSessionKey: HANDLE,
    dwErrorCode: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSTPTC" fn WdsTransportClientWaitForCompletion(
    hSessionKey: HANDLE,
    uTimeout: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSTPTC" fn WdsTransportClientQueryStatus(
    hSessionKey: HANDLE,
    puStatus: ?*u32,
    puErrorCode: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSTPTC" fn WdsTransportClientCloseSession(
    hSessionKey: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSTPTC" fn WdsTransportClientAddRefBuffer(
    pvBuffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSTPTC" fn WdsTransportClientReleaseBuffer(
    pvBuffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSTPTC" fn WdsTransportClientShutdown(
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSBP" fn WdsBpParseInitialize(
    pPacket: ?*opaque{},
    uPacketLen: u32,
    pbPacketType: ?*u8,
    phHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSBP" fn WdsBpParseInitializev6(
    pPacket: ?*opaque{},
    uPacketLen: u32,
    pbPacketType: ?*u8,
    phHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSBP" fn WdsBpInitialize(
    bPacketType: u8,
    phHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSBP" fn WdsBpCloseHandle(
    hHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSBP" fn WdsBpQueryOption(
    hHandle: HANDLE,
    uOption: u32,
    uValueLen: u32,
    pValue: ?*opaque{},
    puBytes: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSBP" fn WdsBpAddOption(
    hHandle: HANDLE,
    uOption: u32,
    uValueLen: u32,
    pValue: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WDSBP" fn WdsBpGetOptionBuffer(
    hHandle: HANDLE,
    uBufferLen: u32,
    pBuffer: ?*opaque{},
    puBytes: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const BOOL = @import("systemservices.zig").BOOL;
const HKEY = @import("windowsprogramming.zig").HKEY;
const HANDLE = @import("systemservices.zig").HANDLE;
const ULARGE_INTEGER = @import("systemservices.zig").ULARGE_INTEGER;
const HRESULT = @import("com.zig").HRESULT;
const SYSTEMTIME = @import("windowsprogramming.zig").SYSTEMTIME;

test "" {
    const constant_export_count = 34;
    const type_export_count = 86;
    const func_count = 94;
    const unicode_alias_count = 0;
    const type_import_count = 6;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
