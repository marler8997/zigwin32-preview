//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: WSMAN_DATA_TEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_DATA_TEXT = extern struct {
    bufferLength: u32,
    buffer: ?*u16,
};
// --------------------------------------------------------
// Type: WSMAN_DATA_BINARY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_DATA_BINARY = extern struct {
    dataLength: u32,
    data: ?*u8,
};
// --------------------------------------------------------
// Type: WSManDataType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSManDataType = *opaque{
};
// --------------------------------------------------------
// Type: WSMAN_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_DATA = extern struct {
    type: WSManDataType,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: WSMAN_ERROR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_ERROR = extern struct {
    code: u32,
    errorDetail: ?*u16,
    language: ?*u16,
    machineName: ?*u16,
    pluginName: ?*u16,
};
// --------------------------------------------------------
// Type: WSMAN_USERNAME_PASSWORD_CREDS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_USERNAME_PASSWORD_CREDS = extern struct {
    username: ?*u16,
    password: ?*u16,
};
// --------------------------------------------------------
// Type: WSManAuthenticationFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSManAuthenticationFlags = *opaque{
};
// --------------------------------------------------------
// Type: WSMAN_AUTHENTICATION_CREDENTIALS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_AUTHENTICATION_CREDENTIALS = extern struct {
    authenticationMechanism: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: WSMAN_OPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_OPTION = extern struct {
    name: ?*u16,
    value: ?*u16,
    mustComply: BOOL,
};
// --------------------------------------------------------
// Type: WSMAN_OPTION_SET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_OPTION_SET = extern struct {
    optionsCount: u32,
    options: ?*WSMAN_OPTION,
    optionsMustUnderstand: BOOL,
};
// --------------------------------------------------------
// Type: WSMAN_OPTION_SETEX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_OPTION_SETEX = extern struct {
    optionsCount: u32,
    options: ?*WSMAN_OPTION,
    optionsMustUnderstand: BOOL,
    optionTypes: ?*?*u16,
};
// --------------------------------------------------------
// Type: WSMAN_KEY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_KEY = extern struct {
    key: ?*u16,
    value: ?*u16,
};
// --------------------------------------------------------
// Type: WSMAN_SELECTOR_SET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_SELECTOR_SET = extern struct {
    numberKeys: u32,
    keys: ?*WSMAN_KEY,
};
// --------------------------------------------------------
// Type: WSMAN_FRAGMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_FRAGMENT = extern struct {
    path: ?*u16,
    dialect: ?*u16,
};
// --------------------------------------------------------
// Type: WSMAN_FILTER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_FILTER = extern struct {
    filter: ?*u16,
    dialect: ?*u16,
};
// --------------------------------------------------------
// Type: WSMAN_OPERATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_OPERATION_INFO = extern struct {
    fragment: WSMAN_FRAGMENT,
    filter: WSMAN_FILTER,
    selectorSet: WSMAN_SELECTOR_SET,
    optionSet: WSMAN_OPTION_SET,
    reserved: ?*opaque{},
    version: u32,
};
// --------------------------------------------------------
// Type: WSMAN_OPERATION_INFOEX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_OPERATION_INFOEX = extern struct {
    fragment: WSMAN_FRAGMENT,
    filter: WSMAN_FILTER,
    selectorSet: WSMAN_SELECTOR_SET,
    optionSet: WSMAN_OPTION_SETEX,
    version: u32,
    uiLocale: ?*u16,
    dataLocale: ?*u16,
};
// --------------------------------------------------------
// Type: WSMAN_API
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WSMAN_API = opaque {
};
// --------------------------------------------------------
// Type: WSManProxyAccessType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSManProxyAccessType = *opaque{
};
// --------------------------------------------------------
// Type: WSMAN_PROXY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_PROXY_INFO = extern struct {
    accessType: u32,
    authenticationCredentials: WSMAN_AUTHENTICATION_CREDENTIALS,
};
// --------------------------------------------------------
// Type: WSMAN_SESSION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WSMAN_SESSION = opaque {
};
// --------------------------------------------------------
// Type: WSManSessionOption
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSManSessionOption = *opaque{
};
// --------------------------------------------------------
// Type: WSMAN_OPERATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WSMAN_OPERATION = opaque {
};
// --------------------------------------------------------
// Type: WSManCallbackFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSManCallbackFlags = *opaque{
};
// --------------------------------------------------------
// Type: WSMAN_SHELL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WSMAN_SHELL = opaque {
};
// --------------------------------------------------------
// Type: WSMAN_COMMAND
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WSMAN_COMMAND = opaque {
};
// --------------------------------------------------------
// Type: WSMAN_STREAM_ID_SET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_STREAM_ID_SET = extern struct {
    streamIDsCount: u32,
    streamIDs: ?*?*u16,
};
// --------------------------------------------------------
// Type: WSMAN_ENVIRONMENT_VARIABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_ENVIRONMENT_VARIABLE = extern struct {
    name: ?*u16,
    value: ?*u16,
};
// --------------------------------------------------------
// Type: WSMAN_ENVIRONMENT_VARIABLE_SET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_ENVIRONMENT_VARIABLE_SET = extern struct {
    varsCount: u32,
    vars: ?*WSMAN_ENVIRONMENT_VARIABLE,
};
// --------------------------------------------------------
// Type: WSMAN_SHELL_STARTUP_INFO_V10
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_SHELL_STARTUP_INFO_V10 = extern struct {
    inputStreamSet: ?*WSMAN_STREAM_ID_SET,
    outputStreamSet: ?*WSMAN_STREAM_ID_SET,
    idleTimeoutMs: u32,
    workingDirectory: ?*u16,
    variableSet: ?*WSMAN_ENVIRONMENT_VARIABLE_SET,
};
// --------------------------------------------------------
// Type: WSMAN_SHELL_STARTUP_INFO_V11
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_SHELL_STARTUP_INFO_V11 = extern struct {
    __AnonymousBase_wsman_L665_C48: WSMAN_SHELL_STARTUP_INFO_V10,
    name: ?*u16,
};
// --------------------------------------------------------
// Type: WSMAN_SHELL_DISCONNECT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_SHELL_DISCONNECT_INFO = extern struct {
    idleTimeoutMs: u32,
};
// --------------------------------------------------------
// Type: WSManShellFlag
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSManShellFlag = *opaque{
};
// --------------------------------------------------------
// Type: WSMAN_RECEIVE_DATA_RESULT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_RECEIVE_DATA_RESULT = extern struct {
    streamId: ?*u16,
    streamData: WSMAN_DATA,
    commandState: ?*u16,
    exitCode: u32,
};
// --------------------------------------------------------
// Type: WSMAN_CONNECT_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_CONNECT_DATA = extern struct {
    data: WSMAN_DATA,
};
// --------------------------------------------------------
// Type: WSMAN_CREATE_SHELL_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_CREATE_SHELL_DATA = extern struct {
    data: WSMAN_DATA,
};
// --------------------------------------------------------
// Type: WSMAN_RESPONSE_DATA
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const WSMAN_RESPONSE_DATA = *opaque{
};
// --------------------------------------------------------
// Type: WSMAN_SHELL_COMPLETION_FUNCTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSMAN_SHELL_COMPLETION_FUNCTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WSMAN_SHELL_ASYNC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_SHELL_ASYNC = extern struct {
    operationContext: ?*opaque{},
    completionFunction: WSMAN_SHELL_COMPLETION_FUNCTION,
};
// --------------------------------------------------------
// Type: WSMAN_COMMAND_ARG_SET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_COMMAND_ARG_SET = extern struct {
    argsCount: u32,
    args: ?*?*u16,
};
// --------------------------------------------------------
// Type: WSMAN_CERTIFICATE_DETAILS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_CERTIFICATE_DETAILS = extern struct {
    subject: ?*u16,
    issuerName: ?*u16,
    issuerThumbprint: ?*u16,
    subjectName: ?*u16,
};
// --------------------------------------------------------
// Type: WSMAN_SENDER_DETAILS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_SENDER_DETAILS = extern struct {
    senderName: ?*u16,
    authenticationMechanism: ?*u16,
    certificateDetails: ?*WSMAN_CERTIFICATE_DETAILS,
    clientToken: HANDLE,
    httpURL: ?*u16,
};
// --------------------------------------------------------
// Type: WSMAN_PLUGIN_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_PLUGIN_REQUEST = extern struct {
    senderDetails: ?*WSMAN_SENDER_DETAILS,
    locale: ?*u16,
    resourceUri: ?*u16,
    operationInfo: ?*WSMAN_OPERATION_INFO,
    shutdownNotification: i32,
    shutdownNotificationHandle: HANDLE,
    dataLocale: ?*u16,
};
// --------------------------------------------------------
// Type: WSMAN_PLUGIN_RELEASE_SHELL_CONTEXT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSMAN_PLUGIN_RELEASE_SHELL_CONTEXT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WSMAN_PLUGIN_RELEASE_COMMAND_CONTEXT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSMAN_PLUGIN_RELEASE_COMMAND_CONTEXT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WSMAN_PLUGIN_STARTUP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSMAN_PLUGIN_STARTUP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WSMAN_PLUGIN_SHUTDOWN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSMAN_PLUGIN_SHUTDOWN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WSMAN_PLUGIN_SHELL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSMAN_PLUGIN_SHELL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WSMAN_PLUGIN_COMMAND
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSMAN_PLUGIN_COMMAND = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WSMAN_PLUGIN_SEND
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSMAN_PLUGIN_SEND = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WSMAN_PLUGIN_RECEIVE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSMAN_PLUGIN_RECEIVE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WSMAN_PLUGIN_SIGNAL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSMAN_PLUGIN_SIGNAL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WSMAN_PLUGIN_CONNECT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSMAN_PLUGIN_CONNECT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WSMAN_AUTHZ_QUOTA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSMAN_AUTHZ_QUOTA = extern struct {
    maxAllowedConcurrentShells: u32,
    maxAllowedConcurrentOperations: u32,
    timeslotSize: u32,
    maxAllowedOperationsPerTimeslot: u32,
};
// --------------------------------------------------------
// Type: WSMAN_PLUGIN_AUTHORIZE_USER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSMAN_PLUGIN_AUTHORIZE_USER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WSMAN_PLUGIN_AUTHORIZE_OPERATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSMAN_PLUGIN_AUTHORIZE_OPERATION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WSMAN_PLUGIN_AUTHORIZE_QUERY_QUOTA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSMAN_PLUGIN_AUTHORIZE_QUERY_QUOTA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WSMAN_PLUGIN_AUTHORIZE_RELEASE_CONTEXT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSMAN_PLUGIN_AUTHORIZE_RELEASE_CONTEXT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WSMan
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WSMan = opaque {
};
// --------------------------------------------------------
// Type: WSManInternal
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const WSManInternal = opaque {
};
// --------------------------------------------------------
// Type: WSManSessionFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSManSessionFlags = *opaque{
};
// --------------------------------------------------------
// Type: WSManEnumFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSManEnumFlags = *opaque{
};
// --------------------------------------------------------
// Type: WSManProxyAccessTypeFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSManProxyAccessTypeFlags = *opaque{
};
// --------------------------------------------------------
// Type: WSManProxyAuthenticationFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSManProxyAuthenticationFlags = *opaque{
};
// --------------------------------------------------------
// Type: IWSMan
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWSMan = *opaque{
    // TODO: Method 'CreateSession'
    // TODO: Method 'CreateConnectionOptions'
    // TODO: Method 'get_CommandLine'
    // TODO: Method 'get_Error'
};
// --------------------------------------------------------
// Type: IWSManEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWSManEx = *opaque{
    // TODO: Method 'CreateResourceLocator'
    // TODO: Method 'SessionFlagUTF8'
    // TODO: Method 'SessionFlagCredUsernamePassword'
    // TODO: Method 'SessionFlagSkipCACheck'
    // TODO: Method 'SessionFlagSkipCNCheck'
    // TODO: Method 'SessionFlagUseDigest'
    // TODO: Method 'SessionFlagUseNegotiate'
    // TODO: Method 'SessionFlagUseBasic'
    // TODO: Method 'SessionFlagUseKerberos'
    // TODO: Method 'SessionFlagNoEncryption'
    // TODO: Method 'SessionFlagEnableSPNServerPort'
    // TODO: Method 'SessionFlagUseNoAuthentication'
    // TODO: Method 'EnumerationFlagNonXmlText'
    // TODO: Method 'EnumerationFlagReturnEPR'
    // TODO: Method 'EnumerationFlagReturnObjectAndEPR'
    // TODO: Method 'GetErrorMessage'
    // TODO: Method 'EnumerationFlagHierarchyDeep'
    // TODO: Method 'EnumerationFlagHierarchyShallow'
    // TODO: Method 'EnumerationFlagHierarchyDeepBasePropsOnly'
    // TODO: Method 'EnumerationFlagReturnObject'
};
// --------------------------------------------------------
// Type: IWSManEx2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWSManEx2 = *opaque{
    // TODO: Method 'SessionFlagUseClientCertificate'
};
// --------------------------------------------------------
// Type: IWSManEx3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWSManEx3 = *opaque{
    // TODO: Method 'SessionFlagUTF16'
    // TODO: Method 'SessionFlagUseCredSsp'
    // TODO: Method 'EnumerationFlagAssociationInstance'
    // TODO: Method 'EnumerationFlagAssociatedInstance'
    // TODO: Method 'SessionFlagSkipRevocationCheck'
    // TODO: Method 'SessionFlagAllowNegotiateImplicitCredentials'
    // TODO: Method 'SessionFlagUseSsl'
};
// --------------------------------------------------------
// Type: IWSManConnectionOptions
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWSManConnectionOptions = *opaque{
    // TODO: Method 'get_UserName'
    // TODO: Method 'put_UserName'
    // TODO: Method 'put_Password'
};
// --------------------------------------------------------
// Type: IWSManConnectionOptionsEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWSManConnectionOptionsEx = *opaque{
    // TODO: Method 'get_CertificateThumbprint'
    // TODO: Method 'put_CertificateThumbprint'
};
// --------------------------------------------------------
// Type: IWSManConnectionOptionsEx2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWSManConnectionOptionsEx2 = *opaque{
    // TODO: Method 'SetProxy'
    // TODO: Method 'ProxyIEConfig'
    // TODO: Method 'ProxyWinHttpConfig'
    // TODO: Method 'ProxyAutoDetect'
    // TODO: Method 'ProxyNoProxyServer'
    // TODO: Method 'ProxyAuthenticationUseNegotiate'
    // TODO: Method 'ProxyAuthenticationUseBasic'
    // TODO: Method 'ProxyAuthenticationUseDigest'
};
// --------------------------------------------------------
// Type: IWSManSession
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWSManSession = *opaque{
    // TODO: Method 'Get'
    // TODO: Method 'Put'
    // TODO: Method 'Create'
    // TODO: Method 'Delete'
    // TODO: Method 'Invoke'
    // TODO: Method 'Enumerate'
    // TODO: Method 'Identify'
    // TODO: Method 'get_Error'
    // TODO: Method 'get_BatchItems'
    // TODO: Method 'put_BatchItems'
    // TODO: Method 'get_Timeout'
    // TODO: Method 'put_Timeout'
};
// --------------------------------------------------------
// Type: IWSManEnumerator
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWSManEnumerator = *opaque{
    // TODO: Method 'ReadItem'
    // TODO: Method 'get_AtEndOfStream'
    // TODO: Method 'get_Error'
};
// --------------------------------------------------------
// Type: IWSManResourceLocator
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWSManResourceLocator = *opaque{
    // TODO: Method 'put_ResourceURI'
    // TODO: Method 'get_ResourceURI'
    // TODO: Method 'AddSelector'
    // TODO: Method 'ClearSelectors'
    // TODO: Method 'get_FragmentPath'
    // TODO: Method 'put_FragmentPath'
    // TODO: Method 'get_FragmentDialect'
    // TODO: Method 'put_FragmentDialect'
    // TODO: Method 'AddOption'
    // TODO: Method 'put_MustUnderstandOptions'
    // TODO: Method 'get_MustUnderstandOptions'
    // TODO: Method 'ClearOptions'
    // TODO: Method 'get_Error'
};
// --------------------------------------------------------
// Type: IWSManResourceLocatorInternal
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWSManResourceLocatorInternal = *opaque{
};
// --------------------------------------------------------
// Type: IWSManInternal
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWSManInternal = *opaque{
    // TODO: Method 'ConfigSDDL'
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManInitialize(
    flags: u32,
    apiHandle: ?*?*WSMAN_API,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManDeinitialize(
    apiHandle: ?*WSMAN_API,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManGetErrorMessage(
    apiHandle: ?*WSMAN_API,
    flags: u32,
    languageCode: ?*u16,
    errorCode: u32,
    messageLength: u32,
    message: ?*u16,
    messageLengthUsed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManCreateSession(
    apiHandle: ?*WSMAN_API,
    connection: ?*u16,
    flags: u32,
    serverAuthenticationCredentials: ?*WSMAN_AUTHENTICATION_CREDENTIALS,
    proxyInfo: ?*WSMAN_PROXY_INFO,
    session: ?*?*WSMAN_SESSION,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManCloseSession(
    session: ?*WSMAN_SESSION,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManSetSessionOption(
    session: ?*WSMAN_SESSION,
    option: WSManSessionOption,
    data: ?*WSMAN_DATA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManGetSessionOptionAsDword(
    session: ?*WSMAN_SESSION,
    option: WSManSessionOption,
    value: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManGetSessionOptionAsString(
    session: ?*WSMAN_SESSION,
    option: WSManSessionOption,
    stringLength: u32,
    string: ?*u16,
    stringLengthUsed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManCloseOperation(
    operationHandle: ?*WSMAN_OPERATION,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManCreateShell(
    session: ?*WSMAN_SESSION,
    flags: u32,
    resourceUri: ?*u16,
    startupInfo: ?*WSMAN_SHELL_STARTUP_INFO_V11,
    options: ?*WSMAN_OPTION_SET,
    createXml: ?*WSMAN_DATA,
    @"async": ?*WSMAN_SHELL_ASYNC,
    shell: ?*?*WSMAN_SHELL,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManRunShellCommand(
    shell: ?*WSMAN_SHELL,
    flags: u32,
    commandLine: ?*u16,
    args: ?*WSMAN_COMMAND_ARG_SET,
    options: ?*WSMAN_OPTION_SET,
    @"async": ?*WSMAN_SHELL_ASYNC,
    command: ?*?*WSMAN_COMMAND,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManSignalShell(
    shell: ?*WSMAN_SHELL,
    command: ?*WSMAN_COMMAND,
    flags: u32,
    code: ?*u16,
    @"async": ?*WSMAN_SHELL_ASYNC,
    signalOperation: ?*?*WSMAN_OPERATION,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManReceiveShellOutput(
    shell: ?*WSMAN_SHELL,
    command: ?*WSMAN_COMMAND,
    flags: u32,
    desiredStreamSet: ?*WSMAN_STREAM_ID_SET,
    @"async": ?*WSMAN_SHELL_ASYNC,
    receiveOperation: ?*?*WSMAN_OPERATION,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManSendShellInput(
    shell: ?*WSMAN_SHELL,
    command: ?*WSMAN_COMMAND,
    flags: u32,
    streamId: ?*u16,
    streamData: ?*WSMAN_DATA,
    endOfStream: BOOL,
    @"async": ?*WSMAN_SHELL_ASYNC,
    sendOperation: ?*?*WSMAN_OPERATION,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManCloseCommand(
    commandHandle: ?*WSMAN_COMMAND,
    flags: u32,
    @"async": ?*WSMAN_SHELL_ASYNC,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManCloseShell(
    shellHandle: ?*WSMAN_SHELL,
    flags: u32,
    @"async": ?*WSMAN_SHELL_ASYNC,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManCreateShellEx(
    session: ?*WSMAN_SESSION,
    flags: u32,
    resourceUri: ?*u16,
    shellId: ?*u16,
    startupInfo: ?*WSMAN_SHELL_STARTUP_INFO_V11,
    options: ?*WSMAN_OPTION_SET,
    createXml: ?*WSMAN_DATA,
    @"async": ?*WSMAN_SHELL_ASYNC,
    shell: ?*?*WSMAN_SHELL,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManRunShellCommandEx(
    shell: ?*WSMAN_SHELL,
    flags: u32,
    commandId: ?*u16,
    commandLine: ?*u16,
    args: ?*WSMAN_COMMAND_ARG_SET,
    options: ?*WSMAN_OPTION_SET,
    @"async": ?*WSMAN_SHELL_ASYNC,
    command: ?*?*WSMAN_COMMAND,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManDisconnectShell(
    shell: ?*WSMAN_SHELL,
    flags: u32,
    disconnectInfo: ?*WSMAN_SHELL_DISCONNECT_INFO,
    @"async": ?*WSMAN_SHELL_ASYNC,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManReconnectShell(
    shell: ?*WSMAN_SHELL,
    flags: u32,
    @"async": ?*WSMAN_SHELL_ASYNC,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManReconnectShellCommand(
    commandHandle: ?*WSMAN_COMMAND,
    flags: u32,
    @"async": ?*WSMAN_SHELL_ASYNC,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManConnectShell(
    session: ?*WSMAN_SESSION,
    flags: u32,
    resourceUri: ?*u16,
    shellID: ?*u16,
    options: ?*WSMAN_OPTION_SET,
    connectXml: ?*WSMAN_DATA,
    @"async": ?*WSMAN_SHELL_ASYNC,
    shell: ?*?*WSMAN_SHELL,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManConnectShellCommand(
    shell: ?*WSMAN_SHELL,
    flags: u32,
    commandID: ?*u16,
    options: ?*WSMAN_OPTION_SET,
    connectXml: ?*WSMAN_DATA,
    @"async": ?*WSMAN_SHELL_ASYNC,
    command: ?*?*WSMAN_COMMAND,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManPluginReportContext(
    requestDetails: ?*WSMAN_PLUGIN_REQUEST,
    flags: u32,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManPluginReceiveResult(
    requestDetails: ?*WSMAN_PLUGIN_REQUEST,
    flags: u32,
    stream: ?*u16,
    streamResult: ?*WSMAN_DATA,
    commandState: ?*u16,
    exitCode: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManPluginOperationComplete(
    requestDetails: ?*WSMAN_PLUGIN_REQUEST,
    flags: u32,
    errorCode: u32,
    extendedInformation: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManPluginGetOperationParameters(
    requestDetails: ?*WSMAN_PLUGIN_REQUEST,
    flags: u32,
    data: ?*WSMAN_DATA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManPluginGetConfiguration(
    pluginContext: ?*opaque{},
    flags: u32,
    data: ?*WSMAN_DATA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManPluginReportCompletion(
    pluginContext: ?*opaque{},
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManPluginFreeRequestDetails(
    requestDetails: ?*WSMAN_PLUGIN_REQUEST,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManPluginAuthzUserComplete(
    senderDetails: ?*WSMAN_SENDER_DETAILS,
    flags: u32,
    userAuthorizationContext: ?*opaque{},
    impersonationToken: HANDLE,
    userIsAdministrator: BOOL,
    errorCode: u32,
    extendedErrorInformation: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManPluginAuthzOperationComplete(
    senderDetails: ?*WSMAN_SENDER_DETAILS,
    flags: u32,
    userAuthorizationContext: ?*opaque{},
    errorCode: u32,
    extendedErrorInformation: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WsmSvc" fn WSManPluginAuthzQueryQuotaComplete(
    senderDetails: ?*WSMAN_SENDER_DETAILS,
    flags: u32,
    quota: ?*WSMAN_AUTHZ_QUOTA,
    errorCode: u32,
    extendedErrorInformation: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const BOOL = @import("systemservices.zig").BOOL;
const HANDLE = @import("systemservices.zig").HANDLE;

test "" {
    const constant_export_count = 0;
    const type_export_count = 76;
    const func_count = 33;
    const unicode_alias_count = 0;
    const type_import_count = 2;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
