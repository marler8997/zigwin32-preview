//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//
pub const IS_GUAR_RSPEC : i32 = 130;
pub const GUAR_ADSPARM_C : i32 = 131;
pub const GUAR_ADSPARM_D : i32 = 132;
pub const GUAR_ADSPARM_Ctot : i32 = 133;
pub const GUAR_ADSPARM_Dtot : i32 = 134;
pub const GUAR_ADSPARM_Csum : i32 = 135;
pub const GUAR_ADSPARM_Dsum : i32 = 136;

//
// types
//
// --------------------------------------------------------
// Type: FLOWSPEC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FLOWSPEC = extern struct {
    TokenRate: u32,
    TokenBucketSize: u32,
    PeakBandwidth: u32,
    Latency: u32,
    DelayVariation: u32,
    ServiceType: u32,
    MaxSduSize: u32,
    MinimumPolicedSize: u32,
};
// --------------------------------------------------------
// Type: QOS_OBJECT_HDR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QOS_OBJECT_HDR = extern struct {
    ObjectType: u32,
    ObjectLength: u32,
};
// --------------------------------------------------------
// Type: QOS_SD_MODE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QOS_SD_MODE = extern struct {
    ObjectHdr: QOS_OBJECT_HDR,
    ShapeDiscardMode: u32,
};
// --------------------------------------------------------
// Type: QOS_SHAPING_RATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QOS_SHAPING_RATE = extern struct {
    ObjectHdr: QOS_OBJECT_HDR,
    ShapingRate: u32,
};
// --------------------------------------------------------
// Type: RsvpObjHdr
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RsvpObjHdr = extern struct {
    obj_length: u16,
    obj_class: u8,
    obj_ctype: u8,
};
// --------------------------------------------------------
// Type: Session_IPv4
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const Session_IPv4 = extern struct {
    sess_destaddr: in_addr,
    sess_protid: u8,
    sess_flags: u8,
    sess_destport: u16,
};
// --------------------------------------------------------
// Type: RSVP_SESSION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RSVP_SESSION = extern struct {
    sess_header: RsvpObjHdr,
    sess_u: _sess_u_e__Union,
    // --------------------------------------------------------
    // Type: _sess_u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _sess_u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: Rsvp_Hop_IPv4
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const Rsvp_Hop_IPv4 = extern struct {
    hop_ipaddr: in_addr,
    hop_LIH: u32,
};
// --------------------------------------------------------
// Type: RSVP_HOP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RSVP_HOP = extern struct {
    hop_header: RsvpObjHdr,
    hop_u: _hop_u_e__Union,
    // --------------------------------------------------------
    // Type: _hop_u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _hop_u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: RESV_STYLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RESV_STYLE = extern struct {
    style_header: RsvpObjHdr,
    style_word: u32,
};
// --------------------------------------------------------
// Type: Filter_Spec_IPv4
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const Filter_Spec_IPv4 = extern struct {
    filt_ipaddr: in_addr,
    filt_unused: u16,
    filt_port: u16,
};
// --------------------------------------------------------
// Type: Filter_Spec_IPv4GPI
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const Filter_Spec_IPv4GPI = extern struct {
    filt_ipaddr: in_addr,
    filt_gpi: u32,
};
// --------------------------------------------------------
// Type: FILTER_SPEC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILTER_SPEC = extern struct {
    filt_header: RsvpObjHdr,
    filt_u: _filt_u_e__Union,
    // --------------------------------------------------------
    // Type: _filt_u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _filt_u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: Scope_list_ipv4
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const Scope_list_ipv4 = extern struct {
    scopl_ipaddr: ?[*]in_addr,
};
// --------------------------------------------------------
// Type: RSVP_SCOPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RSVP_SCOPE = extern struct {
    scopl_header: RsvpObjHdr,
    scope_u: _scope_u_e__Union,
    // --------------------------------------------------------
    // Type: _scope_u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _scope_u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: Error_Spec_IPv4
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const Error_Spec_IPv4 = extern struct {
    errs_errnode: in_addr,
    errs_flags: u8,
    errs_code: u8,
    errs_value: u16,
};
// --------------------------------------------------------
// Type: ERROR_SPEC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ERROR_SPEC = extern struct {
    errs_header: RsvpObjHdr,
    errs_u: _errs_u_e__Union,
    // --------------------------------------------------------
    // Type: _errs_u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _errs_u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: POLICY_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_DATA = extern struct {
    PolicyObjHdr: RsvpObjHdr,
    usPeOffset: u16,
    usReserved: u16,
};
// --------------------------------------------------------
// Type: POLICY_ELEMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLICY_ELEMENT = extern struct {
    usPeLength: u16,
    usPeType: u16,
    ucPeData: ?[*]u8,
};
// --------------------------------------------------------
// Type: int_serv_wkp
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const int_serv_wkp = *opaque{
};
// --------------------------------------------------------
// Type: IntServMainHdr
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IntServMainHdr = extern struct {
    ismh_version: u8,
    ismh_unused: u8,
    ismh_len32b: u16,
};
// --------------------------------------------------------
// Type: IntServServiceHdr
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IntServServiceHdr = extern struct {
    issh_service: u8,
    issh_flags: u8,
    issh_len32b: u16,
};
// --------------------------------------------------------
// Type: IntServParmHdr
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IntServParmHdr = extern struct {
    isph_parm_num: u8,
    isph_flags: u8,
    isph_len32b: u16,
};
// --------------------------------------------------------
// Type: GenTspecParms
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GenTspecParms = extern struct {
    TB_Tspec_r: f32,
    TB_Tspec_b: f32,
    TB_Tspec_p: f32,
    TB_Tspec_m: u32,
    TB_Tspec_M: u32,
};
// --------------------------------------------------------
// Type: GenTspec
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GenTspec = extern struct {
    gen_Tspec_serv_hdr: IntServServiceHdr,
    gen_Tspec_parm_hdr: IntServParmHdr,
    gen_Tspec_parms: GenTspecParms,
};
// --------------------------------------------------------
// Type: QualTspecParms
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QualTspecParms = extern struct {
    TB_Tspec_M: u32,
};
// --------------------------------------------------------
// Type: QualTspec
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QualTspec = extern struct {
    qual_Tspec_serv_hdr: IntServServiceHdr,
    qual_Tspec_parm_hdr: IntServParmHdr,
    qual_Tspec_parms: QualTspecParms,
};
// --------------------------------------------------------
// Type: QualAppFlowSpec
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QualAppFlowSpec = extern struct {
    Q_spec_serv_hdr: IntServServiceHdr,
    Q_spec_parm_hdr: IntServParmHdr,
    Q_spec_parms: QualTspecParms,
};
// --------------------------------------------------------
// Type: IntServTspecBody
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IntServTspecBody = extern struct {
    st_mh: IntServMainHdr,
    tspec_u: _tspec_u_e__Union,
    // --------------------------------------------------------
    // Type: _tspec_u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _tspec_u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: SENDER_TSPEC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SENDER_TSPEC = extern struct {
    stspec_header: RsvpObjHdr,
    stspec_body: IntServTspecBody,
};
// --------------------------------------------------------
// Type: CtrlLoadFlowspec
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CtrlLoadFlowspec = extern struct {
    CL_spec_serv_hdr: IntServServiceHdr,
    CL_spec_parm_hdr: IntServParmHdr,
    CL_spec_parms: GenTspecParms,
};
// --------------------------------------------------------
// Type: GuarRspec
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GuarRspec = extern struct {
    Guar_R: f32,
    Guar_S: u32,
};
// --------------------------------------------------------
// Type: GuarFlowSpec
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GuarFlowSpec = extern struct {
    Guar_serv_hdr: IntServServiceHdr,
    Guar_Tspec_hdr: IntServParmHdr,
    Guar_Tspec_parms: GenTspecParms,
    Guar_Rspec_hdr: IntServParmHdr,
    Guar_Rspec: GuarRspec,
};
// --------------------------------------------------------
// Type: IntServFlowSpec
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IntServFlowSpec = extern struct {
    spec_mh: IntServMainHdr,
    spec_u: _spec_u_e__Union,
    // --------------------------------------------------------
    // Type: _spec_u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _spec_u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IS_FLOWSPEC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IS_FLOWSPEC = extern struct {
    flow_header: RsvpObjHdr,
    flow_body: IntServFlowSpec,
};
// --------------------------------------------------------
// Type: flow_desc
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const flow_desc = extern struct {
    u1: _u1_e__Union,
    u2: _u2_e__Union,
    // --------------------------------------------------------
    // Type: _u1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _u2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: Gads_parms_t
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const Gads_parms_t = extern struct {
    Gads_serv_hdr: IntServServiceHdr,
    Gads_Ctot_hdr: IntServParmHdr,
    Gads_Ctot: u32,
    Gads_Dtot_hdr: IntServParmHdr,
    Gads_Dtot: u32,
    Gads_Csum_hdr: IntServParmHdr,
    Gads_Csum: u32,
    Gads_Dsum_hdr: IntServParmHdr,
    Gads_Dsum: u32,
};
// --------------------------------------------------------
// Type: GenAdspecParams
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GenAdspecParams = extern struct {
    gen_parm_hdr: IntServServiceHdr,
    gen_parm_hopcnt_hdr: IntServParmHdr,
    gen_parm_hopcnt: u32,
    gen_parm_pathbw_hdr: IntServParmHdr,
    gen_parm_path_bw: f32,
    gen_parm_minlat_hdr: IntServParmHdr,
    gen_parm_min_latency: u32,
    gen_parm_compmtu_hdr: IntServParmHdr,
    gen_parm_composed_MTU: u32,
};
// --------------------------------------------------------
// Type: IS_ADSPEC_BODY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IS_ADSPEC_BODY = extern struct {
    adspec_mh: IntServMainHdr,
    adspec_genparms: GenAdspecParams,
};
// --------------------------------------------------------
// Type: ADSPEC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADSPEC = extern struct {
    adspec_header: RsvpObjHdr,
    adspec_body: IS_ADSPEC_BODY,
};
// --------------------------------------------------------
// Type: ID_ERROR_OBJECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ID_ERROR_OBJECT = extern struct {
    usIdErrLength: u16,
    ucAType: u8,
    ucSubType: u8,
    usReserved: u16,
    usIdErrorValue: u16,
    ucIdErrData: ?[*]u8,
};
// --------------------------------------------------------
// Type: LPM_HANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LPM_HANDLE__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: RHANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RHANDLE__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: RSVP_MSG_OBJS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RSVP_MSG_OBJS = extern struct {
    RsvpMsgType: i32,
    pRsvpSession: ?*RSVP_SESSION,
    pRsvpFromHop: ?*RSVP_HOP,
    pRsvpToHop: ?*RSVP_HOP,
    pResvStyle: ?*RESV_STYLE,
    pRsvpScope: ?*RSVP_SCOPE,
    FlowDescCount: i32,
    pFlowDescs: ?*flow_desc,
    PdObjectCount: i32,
    ppPdObjects: ?*?*POLICY_DATA,
    pErrorSpec: ?*ERROR_SPEC,
    pAdspec: ?*ADSPEC,
};
// --------------------------------------------------------
// Type: PALLOCMEM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PALLOCMEM = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFREEMEM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFREEMEM = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: policy_decision
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const policy_decision = extern struct {
    lpvResult: u32,
    wPolicyErrCode: u16,
    wPolicyErrValue: u16,
};
// --------------------------------------------------------
// Type: CBADMITRESULT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CBADMITRESULT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CBGETRSVPOBJECTS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CBGETRSVPOBJECTS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPM_INIT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LPM_INIT_INFO = extern struct {
    PcmVersionNumber: u32,
    ResultTimeLimit: u32,
    ConfiguredLpmCount: i32,
    AllocMemory: PALLOCMEM,
    FreeMemory: PFREEMEM,
    PcmAdmitResultCallback: CBADMITRESULT,
    GetRsvpObjectsCallback: CBGETRSVPOBJECTS,
};
// --------------------------------------------------------
// Type: lpmiptable
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const lpmiptable = extern struct {
    ulIfIndex: u32,
    MediaType: u32,
    IfIpAddr: in_addr,
    IfNetMask: in_addr,
};
// --------------------------------------------------------
// Type: QOS_TRAFFIC_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QOS_TRAFFIC_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: QOS_SET_FLOW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QOS_SET_FLOW = *opaque{
};
// --------------------------------------------------------
// Type: QOS_PACKET_PRIORITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QOS_PACKET_PRIORITY = extern struct {
    ConformantDSCPValue: u32,
    NonConformantDSCPValue: u32,
    ConformantL2Value: u32,
    NonConformantL2Value: u32,
};
// --------------------------------------------------------
// Type: QOS_FLOW_FUNDAMENTALS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QOS_FLOW_FUNDAMENTALS = extern struct {
    BottleneckBandwidthSet: BOOL,
    BottleneckBandwidth: u64,
    AvailableBandwidthSet: BOOL,
    AvailableBandwidth: u64,
    RTTSet: BOOL,
    RTT: u32,
};
// --------------------------------------------------------
// Type: QOS_FLOWRATE_REASON
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QOS_FLOWRATE_REASON = *opaque{
};
// --------------------------------------------------------
// Type: QOS_SHAPING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QOS_SHAPING = *opaque{
};
// --------------------------------------------------------
// Type: QOS_FLOWRATE_OUTGOING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QOS_FLOWRATE_OUTGOING = extern struct {
    Bandwidth: u64,
    ShapingBehavior: QOS_SHAPING,
    Reason: QOS_FLOWRATE_REASON,
};
// --------------------------------------------------------
// Type: QOS_QUERY_FLOW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QOS_QUERY_FLOW = *opaque{
};
// --------------------------------------------------------
// Type: QOS_NOTIFY_FLOW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QOS_NOTIFY_FLOW = *opaque{
};
// --------------------------------------------------------
// Type: QOS_VERSION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QOS_VERSION = extern struct {
    MajorVersion: u16,
    MinorVersion: u16,
};
// --------------------------------------------------------
// Type: QOS_FRIENDLY_NAME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QOS_FRIENDLY_NAME = extern struct {
    ObjectHdr: QOS_OBJECT_HDR,
    FriendlyName: ?[*]u16,
};
// --------------------------------------------------------
// Type: QOS_TRAFFIC_CLASS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QOS_TRAFFIC_CLASS = extern struct {
    ObjectHdr: QOS_OBJECT_HDR,
    TrafficClass: u32,
};
// --------------------------------------------------------
// Type: QOS_DS_CLASS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QOS_DS_CLASS = extern struct {
    ObjectHdr: QOS_OBJECT_HDR,
    DSField: u32,
};
// --------------------------------------------------------
// Type: QOS_DIFFSERV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QOS_DIFFSERV = extern struct {
    ObjectHdr: QOS_OBJECT_HDR,
    DSFieldCount: u32,
    DiffservRule: ?[*]u8,
};
// --------------------------------------------------------
// Type: QOS_DIFFSERV_RULE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QOS_DIFFSERV_RULE = extern struct {
    InboundDSField: u8,
    ConformingOutboundDSField: u8,
    NonConformingOutboundDSField: u8,
    ConformingUserPriority: u8,
    NonConformingUserPriority: u8,
};
// --------------------------------------------------------
// Type: QOS_TCP_TRAFFIC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QOS_TCP_TRAFFIC = extern struct {
    ObjectHdr: QOS_OBJECT_HDR,
};
// --------------------------------------------------------
// Type: TCI_NOTIFY_HANDLER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TCI_NOTIFY_HANDLER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: TCI_ADD_FLOW_COMPLETE_HANDLER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TCI_ADD_FLOW_COMPLETE_HANDLER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: TCI_MOD_FLOW_COMPLETE_HANDLER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TCI_MOD_FLOW_COMPLETE_HANDLER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: TCI_DEL_FLOW_COMPLETE_HANDLER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TCI_DEL_FLOW_COMPLETE_HANDLER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: TCI_CLIENT_FUNC_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TCI_CLIENT_FUNC_LIST = extern struct {
    ClNotifyHandler: TCI_NOTIFY_HANDLER,
    ClAddFlowCompleteHandler: TCI_ADD_FLOW_COMPLETE_HANDLER,
    ClModifyFlowCompleteHandler: TCI_MOD_FLOW_COMPLETE_HANDLER,
    ClDeleteFlowCompleteHandler: TCI_DEL_FLOW_COMPLETE_HANDLER,
};
// --------------------------------------------------------
// Type: ADDRESS_LIST_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADDRESS_LIST_DESCRIPTOR = extern struct {
    MediaType: u32,
    AddressList: NETWORK_ADDRESS_LIST,
};
// --------------------------------------------------------
// Type: TC_IFC_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TC_IFC_DESCRIPTOR = extern struct {
    Length: u32,
    pInterfaceName: ?*u16,
    pInterfaceID: ?*u16,
    AddressListDesc: ADDRESS_LIST_DESCRIPTOR,
};
// --------------------------------------------------------
// Type: TC_SUPPORTED_INFO_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TC_SUPPORTED_INFO_BUFFER = extern struct {
    InstanceIDLength: u16,
    InstanceID: ?[*]u16,
    InterfaceLuid: u64,
    AddrListDesc: ADDRESS_LIST_DESCRIPTOR,
};
// --------------------------------------------------------
// Type: TC_GEN_FILTER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TC_GEN_FILTER = extern struct {
    AddressType: u16,
    PatternSize: u32,
    Pattern: ?*opaque{},
    Mask: ?*opaque{},
};
// --------------------------------------------------------
// Type: TC_GEN_FLOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TC_GEN_FLOW = extern struct {
    SendingFlowspec: FLOWSPEC,
    ReceivingFlowspec: FLOWSPEC,
    TcObjectsLength: u32,
    TcObjects: ?[*]QOS_OBJECT_HDR,
};
// --------------------------------------------------------
// Type: IP_PATTERN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IP_PATTERN = extern struct {
    Reserved1: u32,
    Reserved2: u32,
    SrcAddr: u32,
    DstAddr: u32,
    S_un: _S_un_e__Union,
    ProtocolId: u8,
    Reserved3: ?[*]u8,
    // --------------------------------------------------------
    // Type: _S_un_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _S_un_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _S_un_ports_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _S_un_ports_e__Struct = extern struct {
            s_srcport: u16,
            s_dstport: u16,
        };
        // --------------------------------------------------------
        // Type: _S_un_icmp_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _S_un_icmp_e__Struct = extern struct {
            s_type: u8,
            s_code: u8,
            filler: u16,
        };
    };
};
// --------------------------------------------------------
// Type: IPX_PATTERN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPX_PATTERN = extern struct {
    Src: _Src_e__Struct,
    Dest: _Src_e__Struct,
    // --------------------------------------------------------
    // Type: _Src_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Src_e__Struct = extern struct {
        NetworkAddress: u32,
        NodeAddress: ?[*]u8,
        Socket: u16,
    };
};
// --------------------------------------------------------
// Type: ENUMERATION_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENUMERATION_BUFFER = extern struct {
    Length: u32,
    OwnerProcessId: u32,
    FlowNameLength: u16,
    FlowName: ?[*]u16,
    pFlow: ?*TC_GEN_FLOW,
    NumberOfFilters: u32,
    GenericFilter: ?[*]TC_GEN_FILTER,
};
// --------------------------------------------------------
// Type: QOS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const QOS = extern struct {
    SendingFlowspec: FLOWSPEC,
    ReceivingFlowspec: FLOWSPEC,
    ProviderSpecific: WSABUF,
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "qwave" fn QOSCreateHandle(
    Version: ?*QOS_VERSION,
    QOSHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "qwave" fn QOSCloseHandle(
    QOSHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "qwave" fn QOSStartTrackingClient(
    QOSHandle: HANDLE,
    DestAddr: ?*SOCKADDR,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "qwave" fn QOSStopTrackingClient(
    QOSHandle: HANDLE,
    DestAddr: ?*SOCKADDR,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "qwave" fn QOSEnumerateFlows(
    QOSHandle: HANDLE,
    Size: ?*u32,
    Buffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "qwave" fn QOSAddSocketToFlow(
    QOSHandle: HANDLE,
    Socket: ?*opaque{},
    DestAddr: ?*SOCKADDR,
    TrafficType: QOS_TRAFFIC_TYPE,
    Flags: u32,
    FlowId: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "qwave" fn QOSRemoveSocketFromFlow(
    QOSHandle: HANDLE,
    Socket: ?*opaque{},
    FlowId: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "qwave" fn QOSSetFlow(
    QOSHandle: HANDLE,
    FlowId: u32,
    Operation: QOS_SET_FLOW,
    Size: u32,
    Buffer: ?*opaque{},
    Flags: u32,
    Overlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "qwave" fn QOSQueryFlow(
    QOSHandle: HANDLE,
    FlowId: u32,
    Operation: QOS_QUERY_FLOW,
    Size: ?*u32,
    Buffer: ?*opaque{},
    Flags: u32,
    Overlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "qwave" fn QOSNotifyFlow(
    QOSHandle: HANDLE,
    FlowId: u32,
    Operation: QOS_NOTIFY_FLOW,
    Size: ?*u32,
    Buffer: ?*opaque{},
    Flags: u32,
    Overlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "qwave" fn QOSCancel(
    QOSHandle: HANDLE,
    Overlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "TRAFFIC" fn TcRegisterClient(
    TciVersion: u32,
    ClRegCtx: HANDLE,
    ClientHandlerList: ?*TCI_CLIENT_FUNC_LIST,
    pClientHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TRAFFIC" fn TcEnumerateInterfaces(
    ClientHandle: HANDLE,
    pBufferSize: ?*u32,
    InterfaceBuffer: ?*TC_IFC_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TRAFFIC" fn TcOpenInterfaceA(
    pInterfaceName: ?*i8,
    ClientHandle: HANDLE,
    ClIfcCtx: HANDLE,
    pIfcHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TRAFFIC" fn TcOpenInterfaceW(
    pInterfaceName: ?*u16,
    ClientHandle: HANDLE,
    ClIfcCtx: HANDLE,
    pIfcHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TRAFFIC" fn TcCloseInterface(
    IfcHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TRAFFIC" fn TcQueryInterface(
    IfcHandle: HANDLE,
    pGuidParam: ?*Guid,
    NotifyChange: u8,
    pBufferSize: ?*u32,
    Buffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TRAFFIC" fn TcSetInterface(
    IfcHandle: HANDLE,
    pGuidParam: ?*Guid,
    BufferSize: u32,
    Buffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TRAFFIC" fn TcQueryFlowA(
    pFlowName: ?*i8,
    pGuidParam: ?*Guid,
    pBufferSize: ?*u32,
    Buffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TRAFFIC" fn TcQueryFlowW(
    pFlowName: ?*u16,
    pGuidParam: ?*Guid,
    pBufferSize: ?*u32,
    Buffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TRAFFIC" fn TcSetFlowA(
    pFlowName: ?*i8,
    pGuidParam: ?*Guid,
    BufferSize: u32,
    Buffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TRAFFIC" fn TcSetFlowW(
    pFlowName: ?*u16,
    pGuidParam: ?*Guid,
    BufferSize: u32,
    Buffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TRAFFIC" fn TcAddFlow(
    IfcHandle: HANDLE,
    ClFlowCtx: HANDLE,
    Flags: u32,
    pGenericFlow: ?*TC_GEN_FLOW,
    pFlowHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TRAFFIC" fn TcGetFlowNameA(
    FlowHandle: HANDLE,
    StrSize: u32,
    pFlowName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TRAFFIC" fn TcGetFlowNameW(
    FlowHandle: HANDLE,
    StrSize: u32,
    pFlowName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TRAFFIC" fn TcModifyFlow(
    FlowHandle: HANDLE,
    pGenericFlow: ?*TC_GEN_FLOW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TRAFFIC" fn TcAddFilter(
    FlowHandle: HANDLE,
    pGenericFilter: ?*TC_GEN_FILTER,
    pFilterHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TRAFFIC" fn TcDeregisterClient(
    ClientHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TRAFFIC" fn TcDeleteFlow(
    FlowHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TRAFFIC" fn TcDeleteFilter(
    FilterHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TRAFFIC" fn TcEnumerateFlows(
    IfcHandle: HANDLE,
    pEnumHandle: ?*?*opaque{},
    pFlowCount: ?*u32,
    pBufSize: ?*u32,
    Buffer: ?*ENUMERATION_BUFFER,
) callconv(@import("std").os.windows.WINAPI) u32;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const TcOpenInterface = TcOpenInterfaceA;
        pub const TcQueryFlow = TcQueryFlowA;
        pub const TcSetFlow = TcSetFlowA;
        pub const TcGetFlowName = TcGetFlowNameA;
    },
    .wide => struct {
        pub const TcOpenInterface = TcOpenInterfaceW;
        pub const TcQueryFlow = TcQueryFlowW;
        pub const TcSetFlow = TcSetFlowW;
        pub const TcGetFlowName = TcGetFlowNameW;
    },
    else => if (@import("builtin").is_test) struct {
        pub const TcOpenInterface = *opaque{};
        pub const TcQueryFlow = *opaque{};
        pub const TcSetFlow = *opaque{};
        pub const TcGetFlowName = *opaque{};
    } else struct {
        pub const TcOpenInterface = @compileError("'TcOpenInterface' requires that UNICODE be set to true or false in the root module");
        pub const TcQueryFlow = @compileError("'TcQueryFlow' requires that UNICODE be set to true or false in the root module");
        pub const TcSetFlow = @compileError("'TcSetFlow' requires that UNICODE be set to true or false in the root module");
        pub const TcGetFlowName = @compileError("'TcGetFlowName' requires that UNICODE be set to true or false in the root module");
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const in_addr = @import("winsock.zig").in_addr;
const BOOL = @import("systemservices.zig").BOOL;
const NETWORK_ADDRESS_LIST = @import("nativewifi.zig").NETWORK_ADDRESS_LIST;
const WSABUF = @import("winsock.zig").WSABUF;
const HANDLE = @import("systemservices.zig").HANDLE;
const SOCKADDR = @import("winsock.zig").SOCKADDR;
const OVERLAPPED = @import("systemservices.zig").OVERLAPPED;

test "" {
    const constant_export_count = 7;
    const type_export_count = 81;
    const func_count = 31;
    const unicode_alias_count = 4;
    const type_import_count = 8;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
