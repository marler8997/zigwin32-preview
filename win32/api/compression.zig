//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: COMPRESSOR_HANDLE
// TypeLayoutAttr: sequential
// RAIIFree 'CloseDecompressor' (TODO: can we use this information?)
pub const COMPRESSOR_HANDLE = ?*opaque{};
// --------------------------------------------------------
// Type: PFN_COMPRESS_ALLOCATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_COMPRESS_ALLOCATE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_COMPRESS_FREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_COMPRESS_FREE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: COMPRESS_ALLOCATION_ROUTINES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COMPRESS_ALLOCATION_ROUTINES = extern struct {
    Allocate: PFN_COMPRESS_ALLOCATE,
    Free: PFN_COMPRESS_FREE,
    UserContext: ?*opaque{},
};
// --------------------------------------------------------
// Type: COMPRESS_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const COMPRESS_INFORMATION_CLASS = *opaque{
};

//
// functions
//

// set_last_errror=True (can and should we use this?)
pub extern "Cabinet" fn CreateCompressor(
    Algorithm: u32,
    AllocationRoutines: ?*COMPRESS_ALLOCATION_ROUTINES,
    CompressorHandle: ?*COMPRESSOR_HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "Cabinet" fn SetCompressorInformation(
    CompressorHandle: COMPRESSOR_HANDLE,
    CompressInformationClass: COMPRESS_INFORMATION_CLASS,
    CompressInformation: ?*opaque{},
    CompressInformationSize: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "Cabinet" fn QueryCompressorInformation(
    CompressorHandle: COMPRESSOR_HANDLE,
    CompressInformationClass: COMPRESS_INFORMATION_CLASS,
    CompressInformation: ?*opaque{},
    CompressInformationSize: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "Cabinet" fn Compress(
    CompressorHandle: COMPRESSOR_HANDLE,
    UncompressedData: ?*opaque{},
    UncompressedDataSize: ?*opaque{},
    CompressedBuffer: ?*opaque{},
    CompressedBufferSize: ?*opaque{},
    CompressedDataSize: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "Cabinet" fn ResetCompressor(
    CompressorHandle: COMPRESSOR_HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "Cabinet" fn CloseCompressor(
    CompressorHandle: COMPRESSOR_HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "Cabinet" fn CreateDecompressor(
    Algorithm: u32,
    AllocationRoutines: ?*COMPRESS_ALLOCATION_ROUTINES,
    DecompressorHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "Cabinet" fn SetDecompressorInformation(
    DecompressorHandle: ?*opaque{},
    CompressInformationClass: COMPRESS_INFORMATION_CLASS,
    CompressInformation: ?*opaque{},
    CompressInformationSize: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "Cabinet" fn QueryDecompressorInformation(
    DecompressorHandle: ?*opaque{},
    CompressInformationClass: COMPRESS_INFORMATION_CLASS,
    CompressInformation: ?*opaque{},
    CompressInformationSize: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "Cabinet" fn Decompress(
    DecompressorHandle: ?*opaque{},
    CompressedData: ?*opaque{},
    CompressedDataSize: ?*opaque{},
    UncompressedBuffer: ?*opaque{},
    UncompressedBufferSize: ?*opaque{},
    UncompressedDataSize: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "Cabinet" fn ResetDecompressor(
    DecompressorHandle: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "Cabinet" fn CloseDecompressor(
    DecompressorHandle: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const BOOL = @import("systemservices.zig").BOOL;

test "" {
    const constant_export_count = 0;
    const type_export_count = 5;
    const func_count = 12;
    const unicode_alias_count = 0;
    const type_import_count = 1;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
