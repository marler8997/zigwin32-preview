//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: DICONSTANTFORCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DICONSTANTFORCE = extern struct {
    lMagnitude: i32,
};
// --------------------------------------------------------
// Type: DIRAMPFORCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIRAMPFORCE = extern struct {
    lStart: i32,
    lEnd: i32,
};
// --------------------------------------------------------
// Type: DIPERIODIC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIPERIODIC = extern struct {
    dwMagnitude: u32,
    lOffset: i32,
    dwPhase: u32,
    dwPeriod: u32,
};
// --------------------------------------------------------
// Type: DICONDITION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DICONDITION = extern struct {
    lOffset: i32,
    lPositiveCoefficient: i32,
    lNegativeCoefficient: i32,
    dwPositiveSaturation: u32,
    dwNegativeSaturation: u32,
    lDeadBand: i32,
};
// --------------------------------------------------------
// Type: DICUSTOMFORCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DICUSTOMFORCE = extern struct {
    cChannels: u32,
    dwSamplePeriod: u32,
    cSamples: u32,
    rglForceData: ?*i32,
};
// --------------------------------------------------------
// Type: DIENVELOPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIENVELOPE = extern struct {
    dwSize: u32,
    dwAttackLevel: u32,
    dwAttackTime: u32,
    dwFadeLevel: u32,
    dwFadeTime: u32,
};
// --------------------------------------------------------
// Type: DIEFFECT_DX5
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIEFFECT_DX5 = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwDuration: u32,
    dwSamplePeriod: u32,
    dwGain: u32,
    dwTriggerButton: u32,
    dwTriggerRepeatInterval: u32,
    cAxes: u32,
    rgdwAxes: ?*u32,
    rglDirection: ?*i32,
    lpEnvelope: ?*DIENVELOPE,
    cbTypeSpecificParams: u32,
    lpvTypeSpecificParams: ?*opaque{},
};
// --------------------------------------------------------
// Type: DIEFFECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIEFFECT = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwDuration: u32,
    dwSamplePeriod: u32,
    dwGain: u32,
    dwTriggerButton: u32,
    dwTriggerRepeatInterval: u32,
    cAxes: u32,
    rgdwAxes: ?*u32,
    rglDirection: ?*i32,
    lpEnvelope: ?*DIENVELOPE,
    cbTypeSpecificParams: u32,
    lpvTypeSpecificParams: ?*opaque{},
    dwStartDelay: u32,
};
// --------------------------------------------------------
// Type: DIFILEEFFECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIFILEEFFECT = extern struct {
    dwSize: u32,
    GuidEffect: Guid,
    lpDiEffect: ?*DIEFFECT,
    szFriendlyName: ?[*]i8,
};
// --------------------------------------------------------
// Type: LPDIENUMEFFECTSINFILECALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDIENUMEFFECTSINFILECALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DIEFFESCAPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIEFFESCAPE = extern struct {
    dwSize: u32,
    dwCommand: u32,
    lpvInBuffer: ?*opaque{},
    cbInBuffer: u32,
    lpvOutBuffer: ?*opaque{},
    cbOutBuffer: u32,
};
// --------------------------------------------------------
// Type: IDirectInputEffect
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectInputEffect = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'GetEffectGuid'
    // TODO: Method 'GetParameters'
    // TODO: Method 'SetParameters'
    // TODO: Method 'Start'
    // TODO: Method 'Stop'
    // TODO: Method 'GetEffectStatus'
    // TODO: Method 'Download'
    // TODO: Method 'Unload'
    // TODO: Method 'Escape'
};
// --------------------------------------------------------
// Type: DIDEVCAPS_DX3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIDEVCAPS_DX3 = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwDevType: u32,
    dwAxes: u32,
    dwButtons: u32,
    dwPOVs: u32,
};
// --------------------------------------------------------
// Type: DIDEVCAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIDEVCAPS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwDevType: u32,
    dwAxes: u32,
    dwButtons: u32,
    dwPOVs: u32,
    dwFFSamplePeriod: u32,
    dwFFMinTimeResolution: u32,
    dwFirmwareRevision: u32,
    dwHardwareRevision: u32,
    dwFFDriverVersion: u32,
};
// --------------------------------------------------------
// Type: DIOBJECTDATAFORMAT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIOBJECTDATAFORMAT = extern struct {
    pguid: ?*Guid,
    dwOfs: u32,
    dwType: u32,
    dwFlags: u32,
};
// --------------------------------------------------------
// Type: DIDATAFORMAT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIDATAFORMAT = extern struct {
    dwSize: u32,
    dwObjSize: u32,
    dwFlags: u32,
    dwDataSize: u32,
    dwNumObjs: u32,
    rgodf: ?*DIOBJECTDATAFORMAT,
};
// --------------------------------------------------------
// Type: DIACTIONA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIACTIONA = extern struct {
    uAppData: ?*opaque{},
    dwSemantic: u32,
    dwFlags: u32,
    Anonymous: _Anonymous_e__Union,
    guidInstance: Guid,
    dwObjID: u32,
    dwHow: u32,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: DIACTIONW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIACTIONW = extern struct {
    uAppData: ?*opaque{},
    dwSemantic: u32,
    dwFlags: u32,
    Anonymous: _Anonymous_e__Union,
    guidInstance: Guid,
    dwObjID: u32,
    dwHow: u32,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: DIACTIONFORMATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIACTIONFORMATA = extern struct {
    dwSize: u32,
    dwActionSize: u32,
    dwDataSize: u32,
    dwNumActions: u32,
    rgoAction: ?*DIACTIONA,
    guidActionMap: Guid,
    dwGenre: u32,
    dwBufferSize: u32,
    lAxisMin: i32,
    lAxisMax: i32,
    hInstString: HINSTANCE,
    ftTimeStamp: FILETIME,
    dwCRC: u32,
    tszActionMap: ?[*]i8,
};
// --------------------------------------------------------
// Type: DIACTIONFORMATW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIACTIONFORMATW = extern struct {
    dwSize: u32,
    dwActionSize: u32,
    dwDataSize: u32,
    dwNumActions: u32,
    rgoAction: ?*DIACTIONW,
    guidActionMap: Guid,
    dwGenre: u32,
    dwBufferSize: u32,
    lAxisMin: i32,
    lAxisMax: i32,
    hInstString: HINSTANCE,
    ftTimeStamp: FILETIME,
    dwCRC: u32,
    tszActionMap: ?[*]u16,
};
// --------------------------------------------------------
// Type: DICOLORSET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DICOLORSET = extern struct {
    dwSize: u32,
    cTextFore: u32,
    cTextHighlight: u32,
    cCalloutLine: u32,
    cCalloutHighlight: u32,
    cBorder: u32,
    cControlFill: u32,
    cHighlightFill: u32,
    cAreaFill: u32,
};
// --------------------------------------------------------
// Type: DICONFIGUREDEVICESPARAMSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DICONFIGUREDEVICESPARAMSA = extern struct {
    dwSize: u32,
    dwcUsers: u32,
    lptszUserNames: ?*i8,
    dwcFormats: u32,
    lprgFormats: ?*DIACTIONFORMATA,
    hwnd: HWND,
    dics: DICOLORSET,
    lpUnkDDSTarget: IUnknown,
};
// --------------------------------------------------------
// Type: DICONFIGUREDEVICESPARAMSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DICONFIGUREDEVICESPARAMSW = extern struct {
    dwSize: u32,
    dwcUsers: u32,
    lptszUserNames: ?*u16,
    dwcFormats: u32,
    lprgFormats: ?*DIACTIONFORMATW,
    hwnd: HWND,
    dics: DICOLORSET,
    lpUnkDDSTarget: IUnknown,
};
// --------------------------------------------------------
// Type: DIDEVICEIMAGEINFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIDEVICEIMAGEINFOA = extern struct {
    tszImagePath: ?[*]i8,
    dwFlags: u32,
    dwViewID: u32,
    rcOverlay: RECT,
    dwObjID: u32,
    dwcValidPts: u32,
    rgptCalloutLine: ?[*]POINT,
    rcCalloutRect: RECT,
    dwTextAlign: u32,
};
// --------------------------------------------------------
// Type: DIDEVICEIMAGEINFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIDEVICEIMAGEINFOW = extern struct {
    tszImagePath: ?[*]u16,
    dwFlags: u32,
    dwViewID: u32,
    rcOverlay: RECT,
    dwObjID: u32,
    dwcValidPts: u32,
    rgptCalloutLine: ?[*]POINT,
    rcCalloutRect: RECT,
    dwTextAlign: u32,
};
// --------------------------------------------------------
// Type: DIDEVICEIMAGEINFOHEADERA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIDEVICEIMAGEINFOHEADERA = extern struct {
    dwSize: u32,
    dwSizeImageInfo: u32,
    dwcViews: u32,
    dwcButtons: u32,
    dwcAxes: u32,
    dwcPOVs: u32,
    dwBufferSize: u32,
    dwBufferUsed: u32,
    lprgImageInfoArray: ?*DIDEVICEIMAGEINFOA,
};
// --------------------------------------------------------
// Type: DIDEVICEIMAGEINFOHEADERW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIDEVICEIMAGEINFOHEADERW = extern struct {
    dwSize: u32,
    dwSizeImageInfo: u32,
    dwcViews: u32,
    dwcButtons: u32,
    dwcAxes: u32,
    dwcPOVs: u32,
    dwBufferSize: u32,
    dwBufferUsed: u32,
    lprgImageInfoArray: ?*DIDEVICEIMAGEINFOW,
};
// --------------------------------------------------------
// Type: DIDEVICEOBJECTINSTANCE_DX3A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIDEVICEOBJECTINSTANCE_DX3A = extern struct {
    dwSize: u32,
    guidType: Guid,
    dwOfs: u32,
    dwType: u32,
    dwFlags: u32,
    tszName: ?[*]i8,
};
// --------------------------------------------------------
// Type: DIDEVICEOBJECTINSTANCE_DX3W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIDEVICEOBJECTINSTANCE_DX3W = extern struct {
    dwSize: u32,
    guidType: Guid,
    dwOfs: u32,
    dwType: u32,
    dwFlags: u32,
    tszName: ?[*]u16,
};
// --------------------------------------------------------
// Type: DIDEVICEOBJECTINSTANCEA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIDEVICEOBJECTINSTANCEA = extern struct {
    dwSize: u32,
    guidType: Guid,
    dwOfs: u32,
    dwType: u32,
    dwFlags: u32,
    tszName: ?[*]i8,
    dwFFMaxForce: u32,
    dwFFForceResolution: u32,
    wCollectionNumber: u16,
    wDesignatorIndex: u16,
    wUsagePage: u16,
    wUsage: u16,
    dwDimension: u32,
    wExponent: u16,
    wReportId: u16,
};
// --------------------------------------------------------
// Type: DIDEVICEOBJECTINSTANCEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIDEVICEOBJECTINSTANCEW = extern struct {
    dwSize: u32,
    guidType: Guid,
    dwOfs: u32,
    dwType: u32,
    dwFlags: u32,
    tszName: ?[*]u16,
    dwFFMaxForce: u32,
    dwFFForceResolution: u32,
    wCollectionNumber: u16,
    wDesignatorIndex: u16,
    wUsagePage: u16,
    wUsage: u16,
    dwDimension: u32,
    wExponent: u16,
    wReportId: u16,
};
// --------------------------------------------------------
// Type: LPDIENUMDEVICEOBJECTSCALLBACKA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDIENUMDEVICEOBJECTSCALLBACKA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDIENUMDEVICEOBJECTSCALLBACKW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDIENUMDEVICEOBJECTSCALLBACKW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DIPROPHEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIPROPHEADER = extern struct {
    dwSize: u32,
    dwHeaderSize: u32,
    dwObj: u32,
    dwHow: u32,
};
// --------------------------------------------------------
// Type: DIPROPDWORD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIPROPDWORD = extern struct {
    diph: DIPROPHEADER,
    dwData: u32,
};
// --------------------------------------------------------
// Type: DIPROPPOINTER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIPROPPOINTER = extern struct {
    diph: DIPROPHEADER,
    uData: ?*opaque{},
};
// --------------------------------------------------------
// Type: DIPROPRANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIPROPRANGE = extern struct {
    diph: DIPROPHEADER,
    lMin: i32,
    lMax: i32,
};
// --------------------------------------------------------
// Type: DIPROPCAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIPROPCAL = extern struct {
    diph: DIPROPHEADER,
    lMin: i32,
    lCenter: i32,
    lMax: i32,
};
// --------------------------------------------------------
// Type: DIPROPCALPOV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIPROPCALPOV = extern struct {
    diph: DIPROPHEADER,
    lMin: ?[*]i32,
    lMax: ?[*]i32,
};
// --------------------------------------------------------
// Type: DIPROPGUIDANDPATH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIPROPGUIDANDPATH = extern struct {
    diph: DIPROPHEADER,
    guidClass: Guid,
    wszPath: ?[*]u16,
};
// --------------------------------------------------------
// Type: DIPROPSTRING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIPROPSTRING = extern struct {
    diph: DIPROPHEADER,
    wsz: ?[*]u16,
};
// --------------------------------------------------------
// Type: CPOINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CPOINT = extern struct {
    lP: i32,
    dwLog: u32,
};
// --------------------------------------------------------
// Type: DIPROPCPOINTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIPROPCPOINTS = extern struct {
    diph: DIPROPHEADER,
    dwCPointsNum: u32,
    cp: ?[*]CPOINT,
};
// --------------------------------------------------------
// Type: DIDEVICEOBJECTDATA_DX3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIDEVICEOBJECTDATA_DX3 = extern struct {
    dwOfs: u32,
    dwData: u32,
    dwTimeStamp: u32,
    dwSequence: u32,
};
// --------------------------------------------------------
// Type: DIDEVICEOBJECTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIDEVICEOBJECTDATA = extern struct {
    dwOfs: u32,
    dwData: u32,
    dwTimeStamp: u32,
    dwSequence: u32,
    uAppData: ?*opaque{},
};
// --------------------------------------------------------
// Type: DIDEVICEINSTANCE_DX3A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIDEVICEINSTANCE_DX3A = extern struct {
    dwSize: u32,
    guidInstance: Guid,
    guidProduct: Guid,
    dwDevType: u32,
    tszInstanceName: ?[*]i8,
    tszProductName: ?[*]i8,
};
// --------------------------------------------------------
// Type: DIDEVICEINSTANCE_DX3W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIDEVICEINSTANCE_DX3W = extern struct {
    dwSize: u32,
    guidInstance: Guid,
    guidProduct: Guid,
    dwDevType: u32,
    tszInstanceName: ?[*]u16,
    tszProductName: ?[*]u16,
};
// --------------------------------------------------------
// Type: DIDEVICEINSTANCEA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIDEVICEINSTANCEA = extern struct {
    dwSize: u32,
    guidInstance: Guid,
    guidProduct: Guid,
    dwDevType: u32,
    tszInstanceName: ?[*]i8,
    tszProductName: ?[*]i8,
    guidFFDriver: Guid,
    wUsagePage: u16,
    wUsage: u16,
};
// --------------------------------------------------------
// Type: DIDEVICEINSTANCEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIDEVICEINSTANCEW = extern struct {
    dwSize: u32,
    guidInstance: Guid,
    guidProduct: Guid,
    dwDevType: u32,
    tszInstanceName: ?[*]u16,
    tszProductName: ?[*]u16,
    guidFFDriver: Guid,
    wUsagePage: u16,
    wUsage: u16,
};
// --------------------------------------------------------
// Type: IDirectInputDeviceW
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectInputDeviceW = *opaque{
    // TODO: Method 'GetCapabilities'
    // TODO: Method 'EnumObjects'
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'Acquire'
    // TODO: Method 'Unacquire'
    // TODO: Method 'GetDeviceState'
    // TODO: Method 'GetDeviceData'
    // TODO: Method 'SetDataFormat'
    // TODO: Method 'SetEventNotification'
    // TODO: Method 'SetCooperativeLevel'
    // TODO: Method 'GetObjectInfo'
    // TODO: Method 'GetDeviceInfo'
    // TODO: Method 'RunControlPanel'
    // TODO: Method 'Initialize'
};
// --------------------------------------------------------
// Type: IDirectInputDeviceA
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectInputDeviceA = *opaque{
    // TODO: Method 'GetCapabilities'
    // TODO: Method 'EnumObjects'
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'Acquire'
    // TODO: Method 'Unacquire'
    // TODO: Method 'GetDeviceState'
    // TODO: Method 'GetDeviceData'
    // TODO: Method 'SetDataFormat'
    // TODO: Method 'SetEventNotification'
    // TODO: Method 'SetCooperativeLevel'
    // TODO: Method 'GetObjectInfo'
    // TODO: Method 'GetDeviceInfo'
    // TODO: Method 'RunControlPanel'
    // TODO: Method 'Initialize'
};
// --------------------------------------------------------
// Type: DIEFFECTINFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIEFFECTINFOA = extern struct {
    dwSize: u32,
    guid: Guid,
    dwEffType: u32,
    dwStaticParams: u32,
    dwDynamicParams: u32,
    tszName: ?[*]i8,
};
// --------------------------------------------------------
// Type: DIEFFECTINFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIEFFECTINFOW = extern struct {
    dwSize: u32,
    guid: Guid,
    dwEffType: u32,
    dwStaticParams: u32,
    dwDynamicParams: u32,
    tszName: ?[*]u16,
};
// --------------------------------------------------------
// Type: LPDIENUMEFFECTSCALLBACKA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDIENUMEFFECTSCALLBACKA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDIENUMEFFECTSCALLBACKW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDIENUMEFFECTSCALLBACKW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDIENUMCREATEDEFFECTOBJECTSCALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDIENUMCREATEDEFFECTOBJECTSCALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: IDirectInputDevice2W
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectInputDevice2W = *opaque{
    // TODO: Method 'CreateEffect'
    // TODO: Method 'EnumEffects'
    // TODO: Method 'GetEffectInfo'
    // TODO: Method 'GetForceFeedbackState'
    // TODO: Method 'SendForceFeedbackCommand'
    // TODO: Method 'EnumCreatedEffectObjects'
    // TODO: Method 'Escape'
    // TODO: Method 'Poll'
    // TODO: Method 'SendDeviceData'
};
// --------------------------------------------------------
// Type: IDirectInputDevice2A
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectInputDevice2A = *opaque{
    // TODO: Method 'CreateEffect'
    // TODO: Method 'EnumEffects'
    // TODO: Method 'GetEffectInfo'
    // TODO: Method 'GetForceFeedbackState'
    // TODO: Method 'SendForceFeedbackCommand'
    // TODO: Method 'EnumCreatedEffectObjects'
    // TODO: Method 'Escape'
    // TODO: Method 'Poll'
    // TODO: Method 'SendDeviceData'
};
// --------------------------------------------------------
// Type: IDirectInputDevice7W
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectInputDevice7W = *opaque{
    // TODO: Method 'EnumEffectsInFile'
    // TODO: Method 'WriteEffectToFile'
};
// --------------------------------------------------------
// Type: IDirectInputDevice7A
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectInputDevice7A = *opaque{
    // TODO: Method 'EnumEffectsInFile'
    // TODO: Method 'WriteEffectToFile'
};
// --------------------------------------------------------
// Type: IDirectInputDevice8W
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectInputDevice8W = *opaque{
    // TODO: Method 'GetCapabilities'
    // TODO: Method 'EnumObjects'
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'Acquire'
    // TODO: Method 'Unacquire'
    // TODO: Method 'GetDeviceState'
    // TODO: Method 'GetDeviceData'
    // TODO: Method 'SetDataFormat'
    // TODO: Method 'SetEventNotification'
    // TODO: Method 'SetCooperativeLevel'
    // TODO: Method 'GetObjectInfo'
    // TODO: Method 'GetDeviceInfo'
    // TODO: Method 'RunControlPanel'
    // TODO: Method 'Initialize'
    // TODO: Method 'CreateEffect'
    // TODO: Method 'EnumEffects'
    // TODO: Method 'GetEffectInfo'
    // TODO: Method 'GetForceFeedbackState'
    // TODO: Method 'SendForceFeedbackCommand'
    // TODO: Method 'EnumCreatedEffectObjects'
    // TODO: Method 'Escape'
    // TODO: Method 'Poll'
    // TODO: Method 'SendDeviceData'
    // TODO: Method 'EnumEffectsInFile'
    // TODO: Method 'WriteEffectToFile'
    // TODO: Method 'BuildActionMap'
    // TODO: Method 'SetActionMap'
    // TODO: Method 'GetImageInfo'
};
// --------------------------------------------------------
// Type: IDirectInputDevice8A
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectInputDevice8A = *opaque{
    // TODO: Method 'GetCapabilities'
    // TODO: Method 'EnumObjects'
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'Acquire'
    // TODO: Method 'Unacquire'
    // TODO: Method 'GetDeviceState'
    // TODO: Method 'GetDeviceData'
    // TODO: Method 'SetDataFormat'
    // TODO: Method 'SetEventNotification'
    // TODO: Method 'SetCooperativeLevel'
    // TODO: Method 'GetObjectInfo'
    // TODO: Method 'GetDeviceInfo'
    // TODO: Method 'RunControlPanel'
    // TODO: Method 'Initialize'
    // TODO: Method 'CreateEffect'
    // TODO: Method 'EnumEffects'
    // TODO: Method 'GetEffectInfo'
    // TODO: Method 'GetForceFeedbackState'
    // TODO: Method 'SendForceFeedbackCommand'
    // TODO: Method 'EnumCreatedEffectObjects'
    // TODO: Method 'Escape'
    // TODO: Method 'Poll'
    // TODO: Method 'SendDeviceData'
    // TODO: Method 'EnumEffectsInFile'
    // TODO: Method 'WriteEffectToFile'
    // TODO: Method 'BuildActionMap'
    // TODO: Method 'SetActionMap'
    // TODO: Method 'GetImageInfo'
};
// --------------------------------------------------------
// Type: DIMOUSESTATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIMOUSESTATE = extern struct {
    lX: i32,
    lY: i32,
    lZ: i32,
    rgbButtons: ?[*]u8,
};
// --------------------------------------------------------
// Type: DIMOUSESTATE2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIMOUSESTATE2 = extern struct {
    lX: i32,
    lY: i32,
    lZ: i32,
    rgbButtons: ?[*]u8,
};
// --------------------------------------------------------
// Type: DIJOYSTATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIJOYSTATE = extern struct {
    lX: i32,
    lY: i32,
    lZ: i32,
    lRx: i32,
    lRy: i32,
    lRz: i32,
    rglSlider: ?[*]i32,
    rgdwPOV: ?[*]u32,
    rgbButtons: ?[*]u8,
};
// --------------------------------------------------------
// Type: DIJOYSTATE2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIJOYSTATE2 = extern struct {
    lX: i32,
    lY: i32,
    lZ: i32,
    lRx: i32,
    lRy: i32,
    lRz: i32,
    rglSlider: ?[*]i32,
    rgdwPOV: ?[*]u32,
    rgbButtons: ?[*]u8,
    lVX: i32,
    lVY: i32,
    lVZ: i32,
    lVRx: i32,
    lVRy: i32,
    lVRz: i32,
    rglVSlider: ?[*]i32,
    lAX: i32,
    lAY: i32,
    lAZ: i32,
    lARx: i32,
    lARy: i32,
    lARz: i32,
    rglASlider: ?[*]i32,
    lFX: i32,
    lFY: i32,
    lFZ: i32,
    lFRx: i32,
    lFRy: i32,
    lFRz: i32,
    rglFSlider: ?[*]i32,
};
// --------------------------------------------------------
// Type: LPDIENUMDEVICESCALLBACKA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDIENUMDEVICESCALLBACKA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDIENUMDEVICESCALLBACKW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDIENUMDEVICESCALLBACKW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDICONFIGUREDEVICESCALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDICONFIGUREDEVICESCALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDIENUMDEVICESBYSEMANTICSCBA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDIENUMDEVICESBYSEMANTICSCBA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDIENUMDEVICESBYSEMANTICSCBW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDIENUMDEVICESBYSEMANTICSCBW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: IDirectInputW
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectInputW = *opaque{
    // TODO: Method 'CreateDevice'
    // TODO: Method 'EnumDevices'
    // TODO: Method 'GetDeviceStatus'
    // TODO: Method 'RunControlPanel'
    // TODO: Method 'Initialize'
};
// --------------------------------------------------------
// Type: IDirectInputA
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectInputA = *opaque{
    // TODO: Method 'CreateDevice'
    // TODO: Method 'EnumDevices'
    // TODO: Method 'GetDeviceStatus'
    // TODO: Method 'RunControlPanel'
    // TODO: Method 'Initialize'
};
// --------------------------------------------------------
// Type: IDirectInput2W
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectInput2W = *opaque{
    // TODO: Method 'FindDevice'
};
// --------------------------------------------------------
// Type: IDirectInput2A
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectInput2A = *opaque{
    // TODO: Method 'FindDevice'
};
// --------------------------------------------------------
// Type: IDirectInput7W
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectInput7W = *opaque{
    // TODO: Method 'CreateDeviceEx'
};
// --------------------------------------------------------
// Type: IDirectInput7A
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectInput7A = *opaque{
    // TODO: Method 'CreateDeviceEx'
};
// --------------------------------------------------------
// Type: IDirectInput8W
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectInput8W = *opaque{
    // TODO: Method 'CreateDevice'
    // TODO: Method 'EnumDevices'
    // TODO: Method 'GetDeviceStatus'
    // TODO: Method 'RunControlPanel'
    // TODO: Method 'Initialize'
    // TODO: Method 'FindDevice'
    // TODO: Method 'EnumDevicesBySemantics'
    // TODO: Method 'ConfigureDevices'
};
// --------------------------------------------------------
// Type: IDirectInput8A
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectInput8A = *opaque{
    // TODO: Method 'CreateDevice'
    // TODO: Method 'EnumDevices'
    // TODO: Method 'GetDeviceStatus'
    // TODO: Method 'RunControlPanel'
    // TODO: Method 'Initialize'
    // TODO: Method 'FindDevice'
    // TODO: Method 'EnumDevicesBySemantics'
    // TODO: Method 'ConfigureDevices'
};
// --------------------------------------------------------
// Type: LPFNSHOWJOYCPL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFNSHOWJOYCPL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DIOBJECTATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIOBJECTATTRIBUTES = extern struct {
    dwFlags: u32,
    wUsagePage: u16,
    wUsage: u16,
};
// --------------------------------------------------------
// Type: DIFFOBJECTATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIFFOBJECTATTRIBUTES = extern struct {
    dwFFMaxForce: u32,
    dwFFForceResolution: u32,
};
// --------------------------------------------------------
// Type: DIOBJECTCALIBRATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIOBJECTCALIBRATION = extern struct {
    lMin: i32,
    lCenter: i32,
    lMax: i32,
};
// --------------------------------------------------------
// Type: DIPOVCALIBRATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIPOVCALIBRATION = extern struct {
    lMin: ?[*]i32,
    lMax: ?[*]i32,
};
// --------------------------------------------------------
// Type: DIEFFECTATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIEFFECTATTRIBUTES = extern struct {
    dwEffectId: u32,
    dwEffType: u32,
    dwStaticParams: u32,
    dwDynamicParams: u32,
    dwCoords: u32,
};
// --------------------------------------------------------
// Type: DIFFDEVICEATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIFFDEVICEATTRIBUTES = extern struct {
    dwFlags: u32,
    dwFFSamplePeriod: u32,
    dwFFMinTimeResolution: u32,
};
// --------------------------------------------------------
// Type: DIDRIVERVERSIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIDRIVERVERSIONS = extern struct {
    dwSize: u32,
    dwFirmwareRevision: u32,
    dwHardwareRevision: u32,
    dwFFDriverVersion: u32,
};
// --------------------------------------------------------
// Type: DIDEVICESTATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIDEVICESTATE = extern struct {
    dwSize: u32,
    dwState: u32,
    dwLoad: u32,
};
// --------------------------------------------------------
// Type: DIHIDFFINITINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIHIDFFINITINFO = extern struct {
    dwSize: u32,
    pwszDeviceInterface: ?*u16,
    GuidInstance: Guid,
};
// --------------------------------------------------------
// Type: IDirectInputEffectDriver
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectInputEffectDriver = *opaque{
    // TODO: Method 'DeviceID'
    // TODO: Method 'GetVersions'
    // TODO: Method 'Escape'
    // TODO: Method 'SetGain'
    // TODO: Method 'SendForceFeedbackCommand'
    // TODO: Method 'GetForceFeedbackState'
    // TODO: Method 'DownloadEffect'
    // TODO: Method 'DestroyEffect'
    // TODO: Method 'StartEffect'
    // TODO: Method 'StopEffect'
    // TODO: Method 'GetEffectStatus'
};
// --------------------------------------------------------
// Type: LPDIJOYTYPECALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDIJOYTYPECALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DIJOYTYPEINFO_DX5
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIJOYTYPEINFO_DX5 = extern struct {
    dwSize: u32,
    hws: joyreghwsettings_tag,
    clsidConfig: Guid,
    wszDisplayName: ?[*]u16,
    wszCallout: ?[*]u16,
};
// --------------------------------------------------------
// Type: DIJOYTYPEINFO_DX6
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIJOYTYPEINFO_DX6 = extern struct {
    dwSize: u32,
    hws: joyreghwsettings_tag,
    clsidConfig: Guid,
    wszDisplayName: ?[*]u16,
    wszCallout: ?[*]u16,
    wszHardwareId: ?[*]u16,
    dwFlags1: u32,
};
// --------------------------------------------------------
// Type: DIJOYTYPEINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIJOYTYPEINFO = extern struct {
    dwSize: u32,
    hws: joyreghwsettings_tag,
    clsidConfig: Guid,
    wszDisplayName: ?[*]u16,
    wszCallout: ?[*]u16,
    wszHardwareId: ?[*]u16,
    dwFlags1: u32,
    dwFlags2: u32,
    wszMapFile: ?[*]u16,
};
// --------------------------------------------------------
// Type: DIJOYCONFIG_DX5
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIJOYCONFIG_DX5 = extern struct {
    dwSize: u32,
    guidInstance: Guid,
    hwc: joyreghwconfig_tag,
    dwGain: u32,
    wszType: ?[*]u16,
    wszCallout: ?[*]u16,
};
// --------------------------------------------------------
// Type: DIJOYCONFIG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIJOYCONFIG = extern struct {
    dwSize: u32,
    guidInstance: Guid,
    hwc: joyreghwconfig_tag,
    dwGain: u32,
    wszType: ?[*]u16,
    wszCallout: ?[*]u16,
    guidGameport: Guid,
};
// --------------------------------------------------------
// Type: DIJOYUSERVALUES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIJOYUSERVALUES = extern struct {
    dwSize: u32,
    ruv: joyreguservalues_tag,
    wszGlobalDriver: ?[*]u16,
    wszGameportEmulator: ?[*]u16,
};
// --------------------------------------------------------
// Type: IDirectInputJoyConfig
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectInputJoyConfig = *opaque{
    // TODO: Method 'Acquire'
    // TODO: Method 'Unacquire'
    // TODO: Method 'SetCooperativeLevel'
    // TODO: Method 'SendNotify'
    // TODO: Method 'EnumTypes'
    // TODO: Method 'GetTypeInfo'
    // TODO: Method 'SetTypeInfo'
    // TODO: Method 'DeleteType'
    // TODO: Method 'GetConfig'
    // TODO: Method 'SetConfig'
    // TODO: Method 'DeleteConfig'
    // TODO: Method 'GetUserValues'
    // TODO: Method 'SetUserValues'
    // TODO: Method 'AddNewHardware'
    // TODO: Method 'OpenTypeKey'
    // TODO: Method 'OpenConfigKey'
};
// --------------------------------------------------------
// Type: IDirectInputJoyConfig8
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectInputJoyConfig8 = *opaque{
    // TODO: Method 'Acquire'
    // TODO: Method 'Unacquire'
    // TODO: Method 'SetCooperativeLevel'
    // TODO: Method 'SendNotify'
    // TODO: Method 'EnumTypes'
    // TODO: Method 'GetTypeInfo'
    // TODO: Method 'SetTypeInfo'
    // TODO: Method 'DeleteType'
    // TODO: Method 'GetConfig'
    // TODO: Method 'SetConfig'
    // TODO: Method 'DeleteConfig'
    // TODO: Method 'GetUserValues'
    // TODO: Method 'SetUserValues'
    // TODO: Method 'AddNewHardware'
    // TODO: Method 'OpenTypeKey'
    // TODO: Method 'OpenAppStatusKey'
};
// --------------------------------------------------------
// Type: KEYBOARD_INPUT_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KEYBOARD_INPUT_DATA = extern struct {
    UnitId: u16,
    MakeCode: u16,
    Flags: u16,
    Reserved: u16,
    ExtraInformation: u32,
};
// --------------------------------------------------------
// Type: KEYBOARD_TYPEMATIC_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KEYBOARD_TYPEMATIC_PARAMETERS = extern struct {
    UnitId: u16,
    Rate: u16,
    Delay: u16,
};
// --------------------------------------------------------
// Type: KEYBOARD_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KEYBOARD_ID = extern struct {
    Type: u8,
    Subtype: u8,
};
// --------------------------------------------------------
// Type: KEYBOARD_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KEYBOARD_ATTRIBUTES = extern struct {
    KeyboardIdentifier: KEYBOARD_ID,
    KeyboardMode: u16,
    NumberOfFunctionKeys: u16,
    NumberOfIndicators: u16,
    NumberOfKeysTotal: u16,
    InputDataQueueLength: u32,
    KeyRepeatMinimum: KEYBOARD_TYPEMATIC_PARAMETERS,
    KeyRepeatMaximum: KEYBOARD_TYPEMATIC_PARAMETERS,
};
// --------------------------------------------------------
// Type: KEYBOARD_EXTENDED_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KEYBOARD_EXTENDED_ATTRIBUTES = extern struct {
    Version: u8,
    FormFactor: u8,
    KeyType: u8,
    PhysicalLayout: u8,
    VendorSpecificPhysicalLayout: u8,
    IETFLanguageTagIndex: u8,
    ImplementedInputAssistControls: u8,
};
// --------------------------------------------------------
// Type: KEYBOARD_INDICATOR_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KEYBOARD_INDICATOR_PARAMETERS = extern struct {
    UnitId: u16,
    LedFlags: u16,
};
// --------------------------------------------------------
// Type: INDICATOR_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INDICATOR_LIST = extern struct {
    MakeCode: u16,
    IndicatorFlags: u16,
};
// --------------------------------------------------------
// Type: KEYBOARD_INDICATOR_TRANSLATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KEYBOARD_INDICATOR_TRANSLATION = extern struct {
    NumberOfIndicatorKeys: u16,
    IndicatorList: ?[*]INDICATOR_LIST,
};
// --------------------------------------------------------
// Type: KEYBOARD_UNIT_ID_PARAMETER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KEYBOARD_UNIT_ID_PARAMETER = extern struct {
    UnitId: u16,
};
// --------------------------------------------------------
// Type: KEYBOARD_IME_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KEYBOARD_IME_STATUS = extern struct {
    UnitId: u16,
    ImeOpen: u32,
    ImeConvMode: u32,
};
// --------------------------------------------------------
// Type: MOUSE_INPUT_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MOUSE_INPUT_DATA = extern struct {
    UnitId: u16,
    Flags: u16,
    Anonymous: _Anonymous_e__Union,
    RawButtons: u32,
    LastX: i32,
    LastY: i32,
    ExtraInformation: u32,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            ButtonFlags: u16,
            ButtonData: u16,
        };
    };
};
// --------------------------------------------------------
// Type: MOUSE_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MOUSE_ATTRIBUTES = extern struct {
    MouseIdentifier: u16,
    NumberOfButtons: u16,
    SampleRate: u16,
    InputDataQueueLength: u32,
};
// --------------------------------------------------------
// Type: MOUSE_UNIT_ID_PARAMETER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MOUSE_UNIT_ID_PARAMETER = extern struct {
    UnitId: u16,
};
// --------------------------------------------------------
// Type: HIDP_REPORT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HIDP_REPORT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: USAGE_AND_PAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USAGE_AND_PAGE = extern struct {
    Usage: u16,
    UsagePage: u16,
};
// --------------------------------------------------------
// Type: HIDP_BUTTON_CAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HIDP_BUTTON_CAPS = extern struct {
    UsagePage: u16,
    ReportID: u8,
    IsAlias: u8,
    BitField: u16,
    LinkCollection: u16,
    LinkUsage: u16,
    LinkUsagePage: u16,
    IsRange: u8,
    IsStringRange: u8,
    IsDesignatorRange: u8,
    IsAbsolute: u8,
    Reserved: ?[*]u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Range_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Range_e__Struct = extern struct {
            UsageMin: u16,
            UsageMax: u16,
            StringMin: u16,
            StringMax: u16,
            DesignatorMin: u16,
            DesignatorMax: u16,
            DataIndexMin: u16,
            DataIndexMax: u16,
        };
        // --------------------------------------------------------
        // Type: _NotRange_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _NotRange_e__Struct = extern struct {
            Usage: u16,
            Reserved1: u16,
            StringIndex: u16,
            Reserved2: u16,
            DesignatorIndex: u16,
            Reserved3: u16,
            DataIndex: u16,
            Reserved4: u16,
        };
    };
};
// --------------------------------------------------------
// Type: HIDP_VALUE_CAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HIDP_VALUE_CAPS = extern struct {
    UsagePage: u16,
    ReportID: u8,
    IsAlias: u8,
    BitField: u16,
    LinkCollection: u16,
    LinkUsage: u16,
    LinkUsagePage: u16,
    IsRange: u8,
    IsStringRange: u8,
    IsDesignatorRange: u8,
    IsAbsolute: u8,
    HasNull: u8,
    Reserved: u8,
    BitSize: u16,
    ReportCount: u16,
    Reserved2: ?[*]u16,
    UnitsExp: u32,
    Units: u32,
    LogicalMin: i32,
    LogicalMax: i32,
    PhysicalMin: i32,
    PhysicalMax: i32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Range_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Range_e__Struct = extern struct {
            UsageMin: u16,
            UsageMax: u16,
            StringMin: u16,
            StringMax: u16,
            DesignatorMin: u16,
            DesignatorMax: u16,
            DataIndexMin: u16,
            DataIndexMax: u16,
        };
        // --------------------------------------------------------
        // Type: _NotRange_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _NotRange_e__Struct = extern struct {
            Usage: u16,
            Reserved1: u16,
            StringIndex: u16,
            Reserved2: u16,
            DesignatorIndex: u16,
            Reserved3: u16,
            DataIndex: u16,
            Reserved4: u16,
        };
    };
};
// --------------------------------------------------------
// Type: HIDP_LINK_COLLECTION_NODE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HIDP_LINK_COLLECTION_NODE = extern struct {
    LinkUsage: u16,
    LinkUsagePage: u16,
    Parent: u16,
    NumberOfChildren: u16,
    NextSibling: u16,
    FirstChild: u16,
    _bitfield: u32,
    UserContext: ?*opaque{},
};
// --------------------------------------------------------
// Type: _HIDP_PREPARSED_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _HIDP_PREPARSED_DATA = opaque {
};
// --------------------------------------------------------
// Type: HIDP_CAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HIDP_CAPS = extern struct {
    Usage: u16,
    UsagePage: u16,
    InputReportByteLength: u16,
    OutputReportByteLength: u16,
    FeatureReportByteLength: u16,
    Reserved: ?[*]u16,
    NumberLinkCollectionNodes: u16,
    NumberInputButtonCaps: u16,
    NumberInputValueCaps: u16,
    NumberInputDataIndices: u16,
    NumberOutputButtonCaps: u16,
    NumberOutputValueCaps: u16,
    NumberOutputDataIndices: u16,
    NumberFeatureButtonCaps: u16,
    NumberFeatureValueCaps: u16,
    NumberFeatureDataIndices: u16,
};
// --------------------------------------------------------
// Type: HIDP_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HIDP_DATA = extern struct {
    DataIndex: u16,
    Reserved: u16,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: HIDP_UNKNOWN_TOKEN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HIDP_UNKNOWN_TOKEN = extern struct {
    Token: u8,
    Reserved: ?[*]u8,
    BitField: u32,
};
// --------------------------------------------------------
// Type: HIDP_EXTENDED_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HIDP_EXTENDED_ATTRIBUTES = extern struct {
    NumGlobalUnknowns: u8,
    Reserved: ?[*]u8,
    GlobalUnknowns: ?*HIDP_UNKNOWN_TOKEN,
    Data: ?[*]u32,
};
// --------------------------------------------------------
// Type: HIDP_KEYBOARD_DIRECTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HIDP_KEYBOARD_DIRECTION = *opaque{
};
// --------------------------------------------------------
// Type: HIDP_KEYBOARD_MODIFIER_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HIDP_KEYBOARD_MODIFIER_STATE = extern struct {
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: u32,
        };
    };
};
// --------------------------------------------------------
// Type: PHIDP_INSERT_SCANCODES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PHIDP_INSERT_SCANCODES = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: HIDD_CONFIGURATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HIDD_CONFIGURATION = extern struct {
    cookie: ?*opaque{},
    size: u32,
    RingBufferSize: u32,
};
// --------------------------------------------------------
// Type: HIDD_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HIDD_ATTRIBUTES = extern struct {
    Size: u32,
    VendorID: u16,
    ProductID: u16,
    VersionNumber: u16,
};
// --------------------------------------------------------
// Type: JOYREGHWVALUES
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const JOYREGHWVALUES = *opaque{
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "DINPUT8" fn DirectInput8Create(
    hinst: HINSTANCE,
    dwVersion: u32,
    riidltf: ?*Guid,
    ppvOut: ?*?*opaque{},
    punkOuter: IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidP_GetCaps(
    PreparsedData: ?*opaque{},
    Capabilities: ?*HIDP_CAPS,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidP_GetLinkCollectionNodes(
    LinkCollectionNodes: ?*HIDP_LINK_COLLECTION_NODE,
    LinkCollectionNodesLength: ?*u32,
    PreparsedData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidP_GetSpecificButtonCaps(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    Usage: u16,
    ButtonCaps: ?*HIDP_BUTTON_CAPS,
    ButtonCapsLength: ?*u16,
    PreparsedData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidP_GetButtonCaps(
    ReportType: HIDP_REPORT_TYPE,
    ButtonCaps: ?*HIDP_BUTTON_CAPS,
    ButtonCapsLength: ?*u16,
    PreparsedData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidP_GetSpecificValueCaps(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    Usage: u16,
    ValueCaps: ?*HIDP_VALUE_CAPS,
    ValueCapsLength: ?*u16,
    PreparsedData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidP_GetValueCaps(
    ReportType: HIDP_REPORT_TYPE,
    ValueCaps: ?*HIDP_VALUE_CAPS,
    ValueCapsLength: ?*u16,
    PreparsedData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidP_GetExtendedAttributes(
    ReportType: HIDP_REPORT_TYPE,
    DataIndex: u16,
    PreparsedData: ?*opaque{},
    Attributes: ?*HIDP_EXTENDED_ATTRIBUTES,
    LengthAttributes: ?*u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidP_InitializeReportForID(
    ReportType: HIDP_REPORT_TYPE,
    ReportID: u8,
    PreparsedData: ?*opaque{},
    Report: ?*i8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidP_SetData(
    ReportType: HIDP_REPORT_TYPE,
    DataList: ?*HIDP_DATA,
    DataLength: ?*u32,
    PreparsedData: ?*opaque{},
    Report: ?*i8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidP_GetData(
    ReportType: HIDP_REPORT_TYPE,
    DataList: ?*HIDP_DATA,
    DataLength: ?*u32,
    PreparsedData: ?*opaque{},
    Report: ?*i8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidP_MaxDataListLength(
    ReportType: HIDP_REPORT_TYPE,
    PreparsedData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidP_SetUsages(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    UsageList: ?*u16,
    UsageLength: ?*u32,
    PreparsedData: ?*opaque{},
    Report: ?*i8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidP_UnsetUsages(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    UsageList: ?*u16,
    UsageLength: ?*u32,
    PreparsedData: ?*opaque{},
    Report: ?*i8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidP_GetUsages(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    UsageList: ?*u16,
    UsageLength: ?*u32,
    PreparsedData: ?*opaque{},
    Report: ?*i8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidP_GetUsagesEx(
    ReportType: HIDP_REPORT_TYPE,
    LinkCollection: u16,
    ButtonList: ?*USAGE_AND_PAGE,
    UsageLength: ?*u32,
    PreparsedData: ?*opaque{},
    Report: ?*i8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidP_MaxUsageListLength(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    PreparsedData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidP_SetUsageValue(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    Usage: u16,
    UsageValue: u32,
    PreparsedData: ?*opaque{},
    Report: ?*i8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidP_SetScaledUsageValue(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    Usage: u16,
    UsageValue: i32,
    PreparsedData: ?*opaque{},
    Report: ?*i8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidP_SetUsageValueArray(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    Usage: u16,
    UsageValue: ?*i8,
    UsageValueByteLength: u16,
    PreparsedData: ?*opaque{},
    Report: ?*i8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidP_GetUsageValue(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    Usage: u16,
    UsageValue: ?*u32,
    PreparsedData: ?*opaque{},
    Report: ?*i8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidP_GetScaledUsageValue(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    Usage: u16,
    UsageValue: ?*i32,
    PreparsedData: ?*opaque{},
    Report: ?*i8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidP_GetUsageValueArray(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    Usage: u16,
    UsageValue: ?*i8,
    UsageValueByteLength: u16,
    PreparsedData: ?*opaque{},
    Report: ?*i8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidP_UsageListDifference(
    PreviousUsageList: ?*u16,
    CurrentUsageList: ?*u16,
    BreakUsageList: ?*u16,
    MakeUsageList: ?*u16,
    UsageListLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidP_TranslateUsagesToI8042ScanCodes(
    ChangedUsageList: ?*u16,
    UsageListLength: u32,
    KeyAction: HIDP_KEYBOARD_DIRECTION,
    ModifierState: ?*HIDP_KEYBOARD_MODIFIER_STATE,
    InsertCodesProcedure: PHIDP_INSERT_SCANCODES,
    InsertCodesContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidD_GetAttributes(
    HidDeviceObject: HANDLE,
    Attributes: ?*HIDD_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidD_GetHidGuid(
    HidGuid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidD_GetPreparsedData(
    HidDeviceObject: HANDLE,
    PreparsedData: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidD_FreePreparsedData(
    PreparsedData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidD_FlushQueue(
    HidDeviceObject: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidD_GetConfiguration(
    HidDeviceObject: HANDLE,
    Configuration: ?*HIDD_CONFIGURATION,
    ConfigurationLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidD_SetConfiguration(
    HidDeviceObject: HANDLE,
    Configuration: ?*HIDD_CONFIGURATION,
    ConfigurationLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidD_GetFeature(
    HidDeviceObject: HANDLE,
    ReportBuffer: ?*opaque{},
    ReportBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidD_SetFeature(
    HidDeviceObject: HANDLE,
    ReportBuffer: ?*opaque{},
    ReportBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidD_GetInputReport(
    HidDeviceObject: HANDLE,
    ReportBuffer: ?*opaque{},
    ReportBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidD_SetOutputReport(
    HidDeviceObject: HANDLE,
    ReportBuffer: ?*opaque{},
    ReportBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidD_GetNumInputBuffers(
    HidDeviceObject: HANDLE,
    NumberBuffers: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidD_SetNumInputBuffers(
    HidDeviceObject: HANDLE,
    NumberBuffers: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidD_GetPhysicalDescriptor(
    HidDeviceObject: HANDLE,
    Buffer: ?*opaque{},
    BufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidD_GetManufacturerString(
    HidDeviceObject: HANDLE,
    Buffer: ?*opaque{},
    BufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidD_GetProductString(
    HidDeviceObject: HANDLE,
    Buffer: ?*opaque{},
    BufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidD_GetIndexedString(
    HidDeviceObject: HANDLE,
    StringIndex: u32,
    Buffer: ?*opaque{},
    BufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidD_GetSerialNumberString(
    HidDeviceObject: HANDLE,
    Buffer: ?*opaque{},
    BufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "HID" fn HidD_GetMsGenreDescriptor(
    HidDeviceObject: HANDLE,
    Buffer: ?*opaque{},
    BufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const DIACTION = DIACTIONA;
        pub const DIACTIONFORMAT = DIACTIONFORMATA;
        pub const DICONFIGUREDEVICESPARAMS = DICONFIGUREDEVICESPARAMSA;
        pub const DIDEVICEIMAGEINFO = DIDEVICEIMAGEINFOA;
        pub const DIDEVICEIMAGEINFOHEADER = DIDEVICEIMAGEINFOHEADERA;
        pub const DIDEVICEOBJECTINSTANCE_DX3 = DIDEVICEOBJECTINSTANCE_DX3A;
        pub const DIDEVICEOBJECTINSTANCE = DIDEVICEOBJECTINSTANCEA;
        pub const LPDIENUMDEVICEOBJECTSCALLBACK = LPDIENUMDEVICEOBJECTSCALLBACKA;
        pub const DIDEVICEINSTANCE_DX3 = DIDEVICEINSTANCE_DX3A;
        pub const DIDEVICEINSTANCE = DIDEVICEINSTANCEA;
        pub const IDirectInputDevice = IDirectInputDeviceA;
        pub const DIEFFECTINFO = DIEFFECTINFOA;
        pub const LPDIENUMEFFECTSCALLBACK = LPDIENUMEFFECTSCALLBACKA;
        pub const IDirectInputDevice2 = IDirectInputDevice2A;
        pub const IDirectInputDevice7 = IDirectInputDevice7A;
        pub const IDirectInputDevice8 = IDirectInputDevice8A;
        pub const LPDIENUMDEVICESCALLBACK = LPDIENUMDEVICESCALLBACKA;
        pub const LPDIENUMDEVICESBYSEMANTICSCB = LPDIENUMDEVICESBYSEMANTICSCBA;
        pub const IDirectInput = IDirectInputA;
        pub const IDirectInput2 = IDirectInput2A;
        pub const IDirectInput7 = IDirectInput7A;
        pub const IDirectInput8 = IDirectInput8A;
    },
    .wide => struct {
        pub const DIACTION = DIACTIONW;
        pub const DIACTIONFORMAT = DIACTIONFORMATW;
        pub const DICONFIGUREDEVICESPARAMS = DICONFIGUREDEVICESPARAMSW;
        pub const DIDEVICEIMAGEINFO = DIDEVICEIMAGEINFOW;
        pub const DIDEVICEIMAGEINFOHEADER = DIDEVICEIMAGEINFOHEADERW;
        pub const DIDEVICEOBJECTINSTANCE_DX3 = DIDEVICEOBJECTINSTANCE_DX3W;
        pub const DIDEVICEOBJECTINSTANCE = DIDEVICEOBJECTINSTANCEW;
        pub const LPDIENUMDEVICEOBJECTSCALLBACK = LPDIENUMDEVICEOBJECTSCALLBACKW;
        pub const DIDEVICEINSTANCE_DX3 = DIDEVICEINSTANCE_DX3W;
        pub const DIDEVICEINSTANCE = DIDEVICEINSTANCEW;
        pub const IDirectInputDevice = IDirectInputDeviceW;
        pub const DIEFFECTINFO = DIEFFECTINFOW;
        pub const LPDIENUMEFFECTSCALLBACK = LPDIENUMEFFECTSCALLBACKW;
        pub const IDirectInputDevice2 = IDirectInputDevice2W;
        pub const IDirectInputDevice7 = IDirectInputDevice7W;
        pub const IDirectInputDevice8 = IDirectInputDevice8W;
        pub const LPDIENUMDEVICESCALLBACK = LPDIENUMDEVICESCALLBACKW;
        pub const LPDIENUMDEVICESBYSEMANTICSCB = LPDIENUMDEVICESBYSEMANTICSCBW;
        pub const IDirectInput = IDirectInputW;
        pub const IDirectInput2 = IDirectInput2W;
        pub const IDirectInput7 = IDirectInput7W;
        pub const IDirectInput8 = IDirectInput8W;
    },
    else => if (@import("builtin").is_test) struct {
        pub const DIACTION = *opaque{};
        pub const DIACTIONFORMAT = *opaque{};
        pub const DICONFIGUREDEVICESPARAMS = *opaque{};
        pub const DIDEVICEIMAGEINFO = *opaque{};
        pub const DIDEVICEIMAGEINFOHEADER = *opaque{};
        pub const DIDEVICEOBJECTINSTANCE_DX3 = *opaque{};
        pub const DIDEVICEOBJECTINSTANCE = *opaque{};
        pub const LPDIENUMDEVICEOBJECTSCALLBACK = *opaque{};
        pub const DIDEVICEINSTANCE_DX3 = *opaque{};
        pub const DIDEVICEINSTANCE = *opaque{};
        pub const IDirectInputDevice = *opaque{};
        pub const DIEFFECTINFO = *opaque{};
        pub const LPDIENUMEFFECTSCALLBACK = *opaque{};
        pub const IDirectInputDevice2 = *opaque{};
        pub const IDirectInputDevice7 = *opaque{};
        pub const IDirectInputDevice8 = *opaque{};
        pub const LPDIENUMDEVICESCALLBACK = *opaque{};
        pub const LPDIENUMDEVICESBYSEMANTICSCB = *opaque{};
        pub const IDirectInput = *opaque{};
        pub const IDirectInput2 = *opaque{};
        pub const IDirectInput7 = *opaque{};
        pub const IDirectInput8 = *opaque{};
    } else struct {
        pub const DIACTION = @compileError("'DIACTION' requires that UNICODE be set to true or false in the root module");
        pub const DIACTIONFORMAT = @compileError("'DIACTIONFORMAT' requires that UNICODE be set to true or false in the root module");
        pub const DICONFIGUREDEVICESPARAMS = @compileError("'DICONFIGUREDEVICESPARAMS' requires that UNICODE be set to true or false in the root module");
        pub const DIDEVICEIMAGEINFO = @compileError("'DIDEVICEIMAGEINFO' requires that UNICODE be set to true or false in the root module");
        pub const DIDEVICEIMAGEINFOHEADER = @compileError("'DIDEVICEIMAGEINFOHEADER' requires that UNICODE be set to true or false in the root module");
        pub const DIDEVICEOBJECTINSTANCE_DX3 = @compileError("'DIDEVICEOBJECTINSTANCE_DX3' requires that UNICODE be set to true or false in the root module");
        pub const DIDEVICEOBJECTINSTANCE = @compileError("'DIDEVICEOBJECTINSTANCE' requires that UNICODE be set to true or false in the root module");
        pub const LPDIENUMDEVICEOBJECTSCALLBACK = @compileError("'LPDIENUMDEVICEOBJECTSCALLBACK' requires that UNICODE be set to true or false in the root module");
        pub const DIDEVICEINSTANCE_DX3 = @compileError("'DIDEVICEINSTANCE_DX3' requires that UNICODE be set to true or false in the root module");
        pub const DIDEVICEINSTANCE = @compileError("'DIDEVICEINSTANCE' requires that UNICODE be set to true or false in the root module");
        pub const IDirectInputDevice = @compileError("'IDirectInputDevice' requires that UNICODE be set to true or false in the root module");
        pub const DIEFFECTINFO = @compileError("'DIEFFECTINFO' requires that UNICODE be set to true or false in the root module");
        pub const LPDIENUMEFFECTSCALLBACK = @compileError("'LPDIENUMEFFECTSCALLBACK' requires that UNICODE be set to true or false in the root module");
        pub const IDirectInputDevice2 = @compileError("'IDirectInputDevice2' requires that UNICODE be set to true or false in the root module");
        pub const IDirectInputDevice7 = @compileError("'IDirectInputDevice7' requires that UNICODE be set to true or false in the root module");
        pub const IDirectInputDevice8 = @compileError("'IDirectInputDevice8' requires that UNICODE be set to true or false in the root module");
        pub const LPDIENUMDEVICESCALLBACK = @compileError("'LPDIENUMDEVICESCALLBACK' requires that UNICODE be set to true or false in the root module");
        pub const LPDIENUMDEVICESBYSEMANTICSCB = @compileError("'LPDIENUMDEVICESBYSEMANTICSCB' requires that UNICODE be set to true or false in the root module");
        pub const IDirectInput = @compileError("'IDirectInput' requires that UNICODE be set to true or false in the root module");
        pub const IDirectInput2 = @compileError("'IDirectInput2' requires that UNICODE be set to true or false in the root module");
        pub const IDirectInput7 = @compileError("'IDirectInput7' requires that UNICODE be set to true or false in the root module");
        pub const IDirectInput8 = @compileError("'IDirectInput8' requires that UNICODE be set to true or false in the root module");
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const HINSTANCE = @import("systemservices.zig").HINSTANCE;
const FILETIME = @import("windowsprogramming.zig").FILETIME;
const HWND = @import("windowsandmessaging.zig").HWND;
const IUnknown = @import("com.zig").IUnknown;
const RECT = @import("displaydevices.zig").RECT;
const POINT = @import("displaydevices.zig").POINT;
const joyreghwsettings_tag = @import("multimedia.zig").joyreghwsettings_tag;
const joyreghwconfig_tag = @import("multimedia.zig").joyreghwconfig_tag;
const joyreguservalues_tag = @import("multimedia.zig").joyreguservalues_tag;
const HRESULT = @import("com.zig").HRESULT;
const NTSTATUS = @import("systemservices.zig").NTSTATUS;
const HANDLE = @import("systemservices.zig").HANDLE;

test "" {
    const constant_export_count = 0;
    const type_export_count = 128;
    const func_count = 44;
    const unicode_alias_count = 22;
    const type_import_count = 13;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
