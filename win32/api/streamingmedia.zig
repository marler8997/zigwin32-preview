//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: IMFDeviceTransform
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFDeviceTransform = *opaque{
    // TODO: Method 'InitializeTransform'
    // TODO: Method 'GetInputAvailableType'
    // TODO: Method 'GetInputCurrentType'
    // TODO: Method 'GetInputStreamAttributes'
    // TODO: Method 'GetOutputAvailableType'
    // TODO: Method 'GetOutputCurrentType'
    // TODO: Method 'GetOutputStreamAttributes'
    // TODO: Method 'GetStreamCount'
    // TODO: Method 'GetStreamIDs'
    // TODO: Method 'ProcessEvent'
    // TODO: Method 'ProcessInput'
    // TODO: Method 'ProcessMessage'
    // TODO: Method 'ProcessOutput'
    // TODO: Method 'SetInputStreamState'
    // TODO: Method 'GetInputStreamState'
    // TODO: Method 'SetOutputStreamState'
    // TODO: Method 'GetOutputStreamState'
    // TODO: Method 'GetInputStreamPreferredState'
    // TODO: Method 'FlushInputStream'
    // TODO: Method 'FlushOutputStream'
};
// --------------------------------------------------------
// Type: IMFDeviceTransformCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMFDeviceTransformCallback = *opaque{
    // TODO: Method 'OnBufferSent'
};
// --------------------------------------------------------
// Type: MF_TRANSFER_VIDEO_FRAME_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_TRANSFER_VIDEO_FRAME_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: MF_MEDIASOURCE_STATUS_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MF_MEDIASOURCE_STATUS_INFO = *opaque{
};
// --------------------------------------------------------
// Type: FaceRectInfoBlobHeader
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FaceRectInfoBlobHeader = extern struct {
    Size: u32,
    Count: u32,
};
// --------------------------------------------------------
// Type: FaceRectInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FaceRectInfo = extern struct {
    Region: RECT,
    confidenceLevel: i32,
};
// --------------------------------------------------------
// Type: FaceCharacterizationBlobHeader
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FaceCharacterizationBlobHeader = extern struct {
    Size: u32,
    Count: u32,
};
// --------------------------------------------------------
// Type: FaceCharacterization
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FaceCharacterization = extern struct {
    BlinkScoreLeft: u32,
    BlinkScoreRight: u32,
    FacialExpression: u32,
    FacialExpressionScore: u32,
};
// --------------------------------------------------------
// Type: CapturedMetadataExposureCompensation
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CapturedMetadataExposureCompensation = extern struct {
    Flags: u64,
    Value: i32,
};
// --------------------------------------------------------
// Type: CapturedMetadataISOGains
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CapturedMetadataISOGains = extern struct {
    AnalogGain: f32,
    DigitalGain: f32,
};
// --------------------------------------------------------
// Type: CapturedMetadataWhiteBalanceGains
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CapturedMetadataWhiteBalanceGains = extern struct {
    R: f32,
    G: f32,
    B: f32,
};
// --------------------------------------------------------
// Type: MetadataTimeStamps
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MetadataTimeStamps = extern struct {
    Flags: u32,
    Device: i64,
    Presentation: i64,
};
// --------------------------------------------------------
// Type: HistogramGrid
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HistogramGrid = extern struct {
    Width: u32,
    Height: u32,
    Region: RECT,
};
// --------------------------------------------------------
// Type: HistogramBlobHeader
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HistogramBlobHeader = extern struct {
    Size: u32,
    Histograms: u32,
};
// --------------------------------------------------------
// Type: HistogramHeader
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HistogramHeader = extern struct {
    Size: u32,
    Bins: u32,
    FourCC: u32,
    ChannelMasks: u32,
    Grid: HistogramGrid,
};
// --------------------------------------------------------
// Type: HistogramDataHeader
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HistogramDataHeader = extern struct {
    Size: u32,
    ChannelMask: u32,
    Linear: u32,
};

//
// functions
//

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const RECT = @import("displaydevices.zig").RECT;

test "" {
    const constant_export_count = 0;
    const type_export_count = 16;
    const func_count = 0;
    const unicode_alias_count = 0;
    const type_import_count = 1;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
