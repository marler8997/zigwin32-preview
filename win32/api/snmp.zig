//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: AsnOctetString
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AsnOctetString = extern struct {
    stream: ?*u8,
    length: u32,
    dynamic: BOOL,
};
// --------------------------------------------------------
// Type: AsnObjectIdentifier
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AsnObjectIdentifier = extern struct {
    idLength: u32,
    ids: ?*u32,
};
// --------------------------------------------------------
// Type: AsnAny
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AsnAny = extern struct {
    asnType: u8,
    asnValue: _asnValue_e__Union,
    // --------------------------------------------------------
    // Type: _asnValue_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _asnValue_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: SnmpVarBind
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SnmpVarBind = extern struct {
    name: AsnObjectIdentifier,
    value: AsnAny,
};
// --------------------------------------------------------
// Type: SnmpVarBindList
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SnmpVarBindList = extern struct {
    list: ?*SnmpVarBind,
    len: u32,
};
// --------------------------------------------------------
// Type: PFNSNMPEXTENSIONINIT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNSNMPEXTENSIONINIT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNSNMPEXTENSIONINITEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNSNMPEXTENSIONINITEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNSNMPEXTENSIONMONITOR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNSNMPEXTENSIONMONITOR = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNSNMPEXTENSIONQUERY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNSNMPEXTENSIONQUERY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNSNMPEXTENSIONQUERYEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNSNMPEXTENSIONQUERYEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNSNMPEXTENSIONTRAP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNSNMPEXTENSIONTRAP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNSNMPEXTENSIONCLOSE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNSNMPEXTENSIONCLOSE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: smiOCTETS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const smiOCTETS = extern struct {
    len: u32,
    ptr: ?*u8,
};
// --------------------------------------------------------
// Type: smiOID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const smiOID = extern struct {
    len: u32,
    ptr: ?*u32,
};
// --------------------------------------------------------
// Type: smiCNTR64
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const smiCNTR64 = extern struct {
    hipart: u32,
    lopart: u32,
};
// --------------------------------------------------------
// Type: smiVALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const smiVALUE = extern struct {
    syntax: u32,
    value: _value_e__Union,
    // --------------------------------------------------------
    // Type: _value_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _value_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: smiVENDORINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const smiVENDORINFO = extern struct {
    vendorName: ?[*]i8,
    vendorContact: ?[*]i8,
    vendorVersionId: ?[*]i8,
    vendorVersionDate: ?[*]i8,
    vendorEnterprise: u32,
};
// --------------------------------------------------------
// Type: SNMPAPI_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SNMPAPI_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNSNMPSTARTUPEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNSNMPSTARTUPEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNSNMPCLEANUPEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNSNMPCLEANUPEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "snmpapi" fn SnmpUtilOidCpy(
    pOidDst: ?*AsnObjectIdentifier,
    pOidSrc: ?*AsnObjectIdentifier,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "snmpapi" fn SnmpUtilOidAppend(
    pOidDst: ?*AsnObjectIdentifier,
    pOidSrc: ?*AsnObjectIdentifier,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "snmpapi" fn SnmpUtilOidNCmp(
    pOid1: ?*AsnObjectIdentifier,
    pOid2: ?*AsnObjectIdentifier,
    nSubIds: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "snmpapi" fn SnmpUtilOidCmp(
    pOid1: ?*AsnObjectIdentifier,
    pOid2: ?*AsnObjectIdentifier,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "snmpapi" fn SnmpUtilOidFree(
    pOid: ?*AsnObjectIdentifier,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "snmpapi" fn SnmpUtilOctetsCmp(
    pOctets1: ?*AsnOctetString,
    pOctets2: ?*AsnOctetString,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "snmpapi" fn SnmpUtilOctetsNCmp(
    pOctets1: ?*AsnOctetString,
    pOctets2: ?*AsnOctetString,
    nChars: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "snmpapi" fn SnmpUtilOctetsCpy(
    pOctetsDst: ?*AsnOctetString,
    pOctetsSrc: ?*AsnOctetString,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "snmpapi" fn SnmpUtilOctetsFree(
    pOctets: ?*AsnOctetString,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "snmpapi" fn SnmpUtilAsnAnyCpy(
    pAnyDst: ?*AsnAny,
    pAnySrc: ?*AsnAny,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "snmpapi" fn SnmpUtilAsnAnyFree(
    pAny: ?*AsnAny,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "snmpapi" fn SnmpUtilVarBindCpy(
    pVbDst: ?*SnmpVarBind,
    pVbSrc: ?*SnmpVarBind,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "snmpapi" fn SnmpUtilVarBindFree(
    pVb: ?*SnmpVarBind,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "snmpapi" fn SnmpUtilVarBindListCpy(
    pVblDst: ?*SnmpVarBindList,
    pVblSrc: ?*SnmpVarBindList,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "snmpapi" fn SnmpUtilVarBindListFree(
    pVbl: ?*SnmpVarBindList,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "snmpapi" fn SnmpUtilMemFree(
    pMem: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "snmpapi" fn SnmpUtilMemAlloc(
    nBytes: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "snmpapi" fn SnmpUtilMemReAlloc(
    pMem: ?*opaque{},
    nBytes: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "snmpapi" fn SnmpUtilOidToA(
    Oid: ?*AsnObjectIdentifier,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "snmpapi" fn SnmpUtilIdsToA(
    Ids: ?*u32,
    IdLength: u32,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "snmpapi" fn SnmpUtilPrintOid(
    Oid: ?*AsnObjectIdentifier,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "snmpapi" fn SnmpUtilPrintAsnAny(
    pAny: ?*AsnAny,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "snmpapi" fn SnmpSvcGetUptime(
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "snmpapi" fn SnmpSvcSetLogLevel(
    nLogLevel: i32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "snmpapi" fn SnmpSvcSetLogType(
    nLogType: i32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "snmpapi" fn SnmpUtilDbgPrint(
    nLogLevel: i32,
    szFormat: ?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=True (can and should we use this?)
pub extern "mgmtapi" fn SnmpMgrOpen(
    lpAgentAddress: ?*i8,
    lpAgentCommunity: ?*i8,
    nTimeOut: i32,
    nRetries: i32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "mgmtapi" fn SnmpMgrCtl(
    session: ?*opaque{},
    dwCtlCode: u32,
    lpvInBuffer: ?*opaque{},
    cbInBuffer: u32,
    lpvOUTBuffer: ?*opaque{},
    cbOUTBuffer: u32,
    lpcbBytesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "mgmtapi" fn SnmpMgrClose(
    session: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "mgmtapi" fn SnmpMgrRequest(
    session: ?*opaque{},
    requestType: u8,
    variableBindings: ?*SnmpVarBindList,
    errorStatus: ?*i32,
    errorIndex: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "mgmtapi" fn SnmpMgrStrToOid(
    string: ?*i8,
    oid: ?*AsnObjectIdentifier,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "mgmtapi" fn SnmpMgrOidToStr(
    oid: ?*AsnObjectIdentifier,
    string: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "mgmtapi" fn SnmpMgrTrapListen(
    phTrapAvailable: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "mgmtapi" fn SnmpMgrGetTrap(
    enterprise: ?*AsnObjectIdentifier,
    IPAddress: ?*AsnOctetString,
    genericTrap: ?*i32,
    specificTrap: ?*i32,
    timeStamp: ?*u32,
    variableBindings: ?*SnmpVarBindList,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "mgmtapi" fn SnmpMgrGetTrapEx(
    enterprise: ?*AsnObjectIdentifier,
    agentAddress: ?*AsnOctetString,
    sourceAddress: ?*AsnOctetString,
    genericTrap: ?*i32,
    specificTrap: ?*i32,
    community: ?*AsnOctetString,
    timeStamp: ?*u32,
    variableBindings: ?*SnmpVarBindList,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpGetTranslateMode(
    nTranslateMode: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpSetTranslateMode(
    nTranslateMode: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpGetRetransmitMode(
    nRetransmitMode: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpSetRetransmitMode(
    nRetransmitMode: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpGetTimeout(
    hEntity: ?*opaque{},
    nPolicyTimeout: ?*u32,
    nActualTimeout: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpSetTimeout(
    hEntity: ?*opaque{},
    nPolicyTimeout: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpGetRetry(
    hEntity: ?*opaque{},
    nPolicyRetry: ?*u32,
    nActualRetry: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpSetRetry(
    hEntity: ?*opaque{},
    nPolicyRetry: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpGetVendorInfo(
    vendorInfo: ?*smiVENDORINFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpStartup(
    nMajorVersion: ?*u32,
    nMinorVersion: ?*u32,
    nLevel: ?*u32,
    nTranslateMode: ?*u32,
    nRetransmitMode: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpCleanup(
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpOpen(
    hWnd: HWND,
    wMsg: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpClose(
    session: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpSendMsg(
    session: ?*opaque{},
    srcEntity: ?*opaque{},
    dstEntity: ?*opaque{},
    context: ?*opaque{},
    PDU: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpRecvMsg(
    session: ?*opaque{},
    srcEntity: ?*?*opaque{},
    dstEntity: ?*?*opaque{},
    context: ?*?*opaque{},
    PDU: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpRegister(
    session: ?*opaque{},
    srcEntity: ?*opaque{},
    dstEntity: ?*opaque{},
    context: ?*opaque{},
    notification: ?*smiOID,
    state: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpCreateSession(
    hWnd: HWND,
    wMsg: u32,
    fCallBack: SNMPAPI_CALLBACK,
    lpClientData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpListen(
    hEntity: ?*opaque{},
    lStatus: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpListenEx(
    hEntity: ?*opaque{},
    lStatus: u32,
    nUseEntityAddr: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpCancelMsg(
    session: ?*opaque{},
    reqId: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpStartupEx(
    nMajorVersion: ?*u32,
    nMinorVersion: ?*u32,
    nLevel: ?*u32,
    nTranslateMode: ?*u32,
    nRetransmitMode: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpCleanupEx(
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpStrToEntity(
    session: ?*opaque{},
    string: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpEntityToStr(
    entity: ?*opaque{},
    size: u32,
    string: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpFreeEntity(
    entity: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpStrToContext(
    session: ?*opaque{},
    string: ?*smiOCTETS,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpContextToStr(
    context: ?*opaque{},
    string: ?*smiOCTETS,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpFreeContext(
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpSetPort(
    hEntity: ?*opaque{},
    nPort: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpCreatePdu(
    session: ?*opaque{},
    PDU_type: i32,
    request_id: i32,
    error_status: i32,
    error_index: i32,
    varbindlist: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpGetPduData(
    PDU: ?*opaque{},
    PDU_type: ?*i32,
    request_id: ?*i32,
    error_status: ?*i32,
    error_index: ?*i32,
    varbindlist: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpSetPduData(
    PDU: ?*opaque{},
    PDU_type: ?*i32,
    request_id: ?*i32,
    non_repeaters: ?*i32,
    max_repetitions: ?*i32,
    varbindlist: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpDuplicatePdu(
    session: ?*opaque{},
    PDU: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpFreePdu(
    PDU: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpCreateVbl(
    session: ?*opaque{},
    name: ?*smiOID,
    value: ?*smiVALUE,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpDuplicateVbl(
    session: ?*opaque{},
    vbl: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpFreeVbl(
    vbl: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpCountVbl(
    vbl: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpGetVb(
    vbl: ?*opaque{},
    index: u32,
    name: ?*smiOID,
    value: ?*smiVALUE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpSetVb(
    vbl: ?*opaque{},
    index: u32,
    name: ?*smiOID,
    value: ?*smiVALUE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpDeleteVb(
    vbl: ?*opaque{},
    index: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpGetLastError(
    session: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpStrToOid(
    string: ?*i8,
    dstOID: ?*smiOID,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpOidToStr(
    srcOID: ?*smiOID,
    size: u32,
    string: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpOidCopy(
    srcOID: ?*smiOID,
    dstOID: ?*smiOID,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpOidCompare(
    xOID: ?*smiOID,
    yOID: ?*smiOID,
    maxlen: u32,
    result: ?*i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpEncodeMsg(
    session: ?*opaque{},
    srcEntity: ?*opaque{},
    dstEntity: ?*opaque{},
    context: ?*opaque{},
    pdu: ?*opaque{},
    msgBufDesc: ?*smiOCTETS,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpDecodeMsg(
    session: ?*opaque{},
    srcEntity: ?*?*opaque{},
    dstEntity: ?*?*opaque{},
    context: ?*?*opaque{},
    pdu: ?*?*opaque{},
    msgBufDesc: ?*smiOCTETS,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wsnmp32" fn SnmpFreeDescriptor(
    syntax: u32,
    descriptor: ?*smiOCTETS,
) callconv(@import("std").os.windows.WINAPI) u32;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const BOOL = @import("systemservices.zig").BOOL;
const HANDLE = @import("systemservices.zig").HANDLE;
const HWND = @import("windowsandmessaging.zig").HWND;

test "" {
    const constant_export_count = 0;
    const type_export_count = 20;
    const func_count = 84;
    const unicode_alias_count = 0;
    const type_import_count = 3;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
