//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: LINECALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LINECALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PHONECALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PHONECALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LINEADDRESSCAPS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEADDRESSCAPS = *opaque{
};
// --------------------------------------------------------
// Type: LINEADDRESSSTATUS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEADDRESSSTATUS = *opaque{
};
// --------------------------------------------------------
// Type: LINEAGENTACTIVITYENTRY
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEAGENTACTIVITYENTRY = *opaque{
};
// --------------------------------------------------------
// Type: LINEAGENTACTIVITYLIST
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEAGENTACTIVITYLIST = *opaque{
};
// --------------------------------------------------------
// Type: LINEAGENTCAPS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEAGENTCAPS = *opaque{
};
// --------------------------------------------------------
// Type: LINEAGENTGROUPENTRY
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEAGENTGROUPENTRY = *opaque{
    // --------------------------------------------------------
    // Type: _GroupID_e__Struct
    // TypeLayoutAttr: sequential
    // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
    pub const _GroupID_e__Struct = *opaque{
    };
};
// --------------------------------------------------------
// Type: LINEAGENTGROUPLIST
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEAGENTGROUPLIST = *opaque{
};
// --------------------------------------------------------
// Type: LINEAGENTSTATUS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEAGENTSTATUS = *opaque{
};
// --------------------------------------------------------
// Type: LINEAPPINFO
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEAPPINFO = *opaque{
};
// --------------------------------------------------------
// Type: LINEAGENTENTRY
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEAGENTENTRY = *opaque{
};
// --------------------------------------------------------
// Type: LINEAGENTLIST
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEAGENTLIST = *opaque{
};
// --------------------------------------------------------
// Type: LINEAGENTINFO
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEAGENTINFO = *opaque{
};
// --------------------------------------------------------
// Type: LINEAGENTSESSIONENTRY
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEAGENTSESSIONENTRY = *opaque{
};
// --------------------------------------------------------
// Type: LINEAGENTSESSIONLIST
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEAGENTSESSIONLIST = *opaque{
};
// --------------------------------------------------------
// Type: LINEAGENTSESSIONINFO
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEAGENTSESSIONINFO = *opaque{
};
// --------------------------------------------------------
// Type: LINEQUEUEENTRY
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEQUEUEENTRY = *opaque{
};
// --------------------------------------------------------
// Type: LINEQUEUELIST
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEQUEUELIST = *opaque{
};
// --------------------------------------------------------
// Type: LINEQUEUEINFO
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEQUEUEINFO = *opaque{
};
// --------------------------------------------------------
// Type: LINEPROXYREQUESTLIST
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEPROXYREQUESTLIST = *opaque{
};
// --------------------------------------------------------
// Type: LINEDIALPARAMS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEDIALPARAMS = *opaque{
};
// --------------------------------------------------------
// Type: LINECALLINFO
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINECALLINFO = *opaque{
};
// --------------------------------------------------------
// Type: LINECALLLIST
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINECALLLIST = *opaque{
};
// --------------------------------------------------------
// Type: LINECALLPARAMS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINECALLPARAMS = *opaque{
};
// --------------------------------------------------------
// Type: LINECALLSTATUS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINECALLSTATUS = *opaque{
};
// --------------------------------------------------------
// Type: LINECALLTREATMENTENTRY
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINECALLTREATMENTENTRY = *opaque{
};
// --------------------------------------------------------
// Type: LINECARDENTRY
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINECARDENTRY = *opaque{
};
// --------------------------------------------------------
// Type: LINECOUNTRYENTRY
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINECOUNTRYENTRY = *opaque{
};
// --------------------------------------------------------
// Type: LINECOUNTRYLIST
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINECOUNTRYLIST = *opaque{
};
// --------------------------------------------------------
// Type: LINEDEVCAPS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEDEVCAPS = *opaque{
};
// --------------------------------------------------------
// Type: LINEDEVSTATUS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEDEVSTATUS = *opaque{
};
// --------------------------------------------------------
// Type: LINEEXTENSIONID
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEEXTENSIONID = *opaque{
};
// --------------------------------------------------------
// Type: LINEFORWARD
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEFORWARD = *opaque{
};
// --------------------------------------------------------
// Type: LINEFORWARDLIST
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEFORWARDLIST = *opaque{
};
// --------------------------------------------------------
// Type: LINEGENERATETONE
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEGENERATETONE = *opaque{
};
// --------------------------------------------------------
// Type: LINEINITIALIZEEXPARAMS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEINITIALIZEEXPARAMS = *opaque{
    // --------------------------------------------------------
    // Type: _Handles_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Handles_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: LINELOCATIONENTRY
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINELOCATIONENTRY = *opaque{
};
// --------------------------------------------------------
// Type: LINEMEDIACONTROLCALLSTATE
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEMEDIACONTROLCALLSTATE = *opaque{
};
// --------------------------------------------------------
// Type: LINEMEDIACONTROLDIGIT
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEMEDIACONTROLDIGIT = *opaque{
};
// --------------------------------------------------------
// Type: LINEMEDIACONTROLMEDIA
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEMEDIACONTROLMEDIA = *opaque{
};
// --------------------------------------------------------
// Type: LINEMEDIACONTROLTONE
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEMEDIACONTROLTONE = *opaque{
};
// --------------------------------------------------------
// Type: LINEMESSAGE
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEMESSAGE = *opaque{
};
// --------------------------------------------------------
// Type: LINEMONITORTONE
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEMONITORTONE = *opaque{
};
// --------------------------------------------------------
// Type: LINEPROVIDERENTRY
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEPROVIDERENTRY = *opaque{
};
// --------------------------------------------------------
// Type: LINEPROVIDERLIST
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEPROVIDERLIST = *opaque{
};
// --------------------------------------------------------
// Type: LINEPROXYREQUEST
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEPROXYREQUEST = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _GetGroupList_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _GetGroupList_e__Struct = extern struct {
            GroupList: LINEAGENTGROUPLIST,
        };
        // --------------------------------------------------------
        // Type: _SetQueueMeasurementPeriod_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _SetQueueMeasurementPeriod_e__Struct = *opaque{
        };
        // --------------------------------------------------------
        // Type: _SetAgentSessionState_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _SetAgentSessionState_e__Struct = *opaque{
        };
        // --------------------------------------------------------
        // Type: _GetAgentSessionList_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _GetAgentSessionList_e__Struct = *opaque{
        };
        // --------------------------------------------------------
        // Type: _GetAgentInfo_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _GetAgentInfo_e__Struct = *opaque{
        };
        // --------------------------------------------------------
        // Type: _SetAgentStateEx_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _SetAgentStateEx_e__Struct = *opaque{
        };
        // --------------------------------------------------------
        // Type: _GetAgentGroupList_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _GetAgentGroupList_e__Struct = *opaque{
        };
        // --------------------------------------------------------
        // Type: _AgentSpecific_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _AgentSpecific_e__Struct = *opaque{
        };
        // --------------------------------------------------------
        // Type: _GetAgentCaps_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _GetAgentCaps_e__Struct = *opaque{
        };
        // --------------------------------------------------------
        // Type: _SetAgentState_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _SetAgentState_e__Struct = *opaque{
        };
        // --------------------------------------------------------
        // Type: _GetQueueInfo_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _GetQueueInfo_e__Struct = *opaque{
        };
        // --------------------------------------------------------
        // Type: _GetAgentSessionInfo_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _GetAgentSessionInfo_e__Struct = *opaque{
        };
        // --------------------------------------------------------
        // Type: _SetAgentMeasurementPeriod_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _SetAgentMeasurementPeriod_e__Struct = *opaque{
        };
        // --------------------------------------------------------
        // Type: _GetAgentActivityList_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _GetAgentActivityList_e__Struct = *opaque{
        };
        // --------------------------------------------------------
        // Type: _SetAgentActivity_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _SetAgentActivity_e__Struct = *opaque{
        };
        // --------------------------------------------------------
        // Type: _GetQueueList_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _GetQueueList_e__Struct = *opaque{
        };
        // --------------------------------------------------------
        // Type: _CreateAgent_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _CreateAgent_e__Struct = *opaque{
        };
        // --------------------------------------------------------
        // Type: _SetAgentGroup_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _SetAgentGroup_e__Struct = *opaque{
        };
        // --------------------------------------------------------
        // Type: _GetAgentStatus_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _GetAgentStatus_e__Struct = *opaque{
        };
        // --------------------------------------------------------
        // Type: _CreateAgentSession_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _CreateAgentSession_e__Struct = *opaque{
        };
    };
};
// --------------------------------------------------------
// Type: LINEREQMAKECALL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LINEREQMAKECALL = extern struct {
    szDestAddress: ?[*]i8,
    szAppName: ?[*]i8,
    szCalledParty: ?[*]i8,
    szComment: ?[*]i8,
};
// --------------------------------------------------------
// Type: linereqmakecallW_tag
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const linereqmakecallW_tag = *opaque{
};
// --------------------------------------------------------
// Type: LINEREQMEDIACALL
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINEREQMEDIACALL = *opaque{
};
// --------------------------------------------------------
// Type: linereqmediacallW_tag
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const linereqmediacallW_tag = *opaque{
};
// --------------------------------------------------------
// Type: LINETERMCAPS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINETERMCAPS = *opaque{
};
// --------------------------------------------------------
// Type: LINETRANSLATECAPS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINETRANSLATECAPS = *opaque{
};
// --------------------------------------------------------
// Type: LINETRANSLATEOUTPUT
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const LINETRANSLATEOUTPUT = *opaque{
};
// --------------------------------------------------------
// Type: PHONEBUTTONINFO
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const PHONEBUTTONINFO = *opaque{
};
// --------------------------------------------------------
// Type: PHONECAPS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const PHONECAPS = *opaque{
};
// --------------------------------------------------------
// Type: PHONEEXTENSIONID
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const PHONEEXTENSIONID = *opaque{
};
// --------------------------------------------------------
// Type: PHONEINITIALIZEEXPARAMS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const PHONEINITIALIZEEXPARAMS = *opaque{
    // --------------------------------------------------------
    // Type: _Handles_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Handles_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PHONEMESSAGE
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const PHONEMESSAGE = *opaque{
};
// --------------------------------------------------------
// Type: PHONESTATUS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const PHONESTATUS = *opaque{
};
// --------------------------------------------------------
// Type: VARSTRING
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const VARSTRING = *opaque{
};
// --------------------------------------------------------
// Type: TAPI
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const TAPI = opaque {
};
// --------------------------------------------------------
// Type: DispatchMapper
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DispatchMapper = opaque {
};
// --------------------------------------------------------
// Type: RequestMakeCall
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const RequestMakeCall = opaque {
};
// --------------------------------------------------------
// Type: TAPI_TONEMODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TAPI_TONEMODE = *opaque{
};
// --------------------------------------------------------
// Type: TAPI_GATHERTERM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TAPI_GATHERTERM = *opaque{
};
// --------------------------------------------------------
// Type: TAPI_CUSTOMTONE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TAPI_CUSTOMTONE = extern struct {
    dwFrequency: u32,
    dwCadenceOn: u32,
    dwCadenceOff: u32,
    dwVolume: u32,
};
// --------------------------------------------------------
// Type: TAPI_DETECTTONE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TAPI_DETECTTONE = extern struct {
    dwAppSpecific: u32,
    dwDuration: u32,
    dwFrequency1: u32,
    dwFrequency2: u32,
    dwFrequency3: u32,
};
// --------------------------------------------------------
// Type: ADDRESS_EVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADDRESS_EVENT = *opaque{
};
// --------------------------------------------------------
// Type: ADDRESS_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADDRESS_STATE = *opaque{
};
// --------------------------------------------------------
// Type: CALL_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CALL_STATE = *opaque{
};
// --------------------------------------------------------
// Type: CALL_STATE_EVENT_CAUSE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CALL_STATE_EVENT_CAUSE = *opaque{
};
// --------------------------------------------------------
// Type: CALL_MEDIA_EVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CALL_MEDIA_EVENT = *opaque{
};
// --------------------------------------------------------
// Type: CALL_MEDIA_EVENT_CAUSE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CALL_MEDIA_EVENT_CAUSE = *opaque{
};
// --------------------------------------------------------
// Type: DISCONNECT_CODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DISCONNECT_CODE = *opaque{
};
// --------------------------------------------------------
// Type: TERMINAL_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TERMINAL_STATE = *opaque{
};
// --------------------------------------------------------
// Type: TERMINAL_DIRECTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TERMINAL_DIRECTION = *opaque{
};
// --------------------------------------------------------
// Type: TERMINAL_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TERMINAL_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: CALL_PRIVILEGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CALL_PRIVILEGE = *opaque{
};
// --------------------------------------------------------
// Type: TAPI_EVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TAPI_EVENT = *opaque{
};
// --------------------------------------------------------
// Type: CALL_NOTIFICATION_EVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CALL_NOTIFICATION_EVENT = *opaque{
};
// --------------------------------------------------------
// Type: CALLHUB_EVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CALLHUB_EVENT = *opaque{
};
// --------------------------------------------------------
// Type: CALLHUB_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CALLHUB_STATE = *opaque{
};
// --------------------------------------------------------
// Type: TAPIOBJECT_EVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TAPIOBJECT_EVENT = *opaque{
};
// --------------------------------------------------------
// Type: TAPI_OBJECT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TAPI_OBJECT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: QOS_SERVICE_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QOS_SERVICE_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: QOS_EVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QOS_EVENT = *opaque{
};
// --------------------------------------------------------
// Type: CALLINFOCHANGE_CAUSE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CALLINFOCHANGE_CAUSE = *opaque{
};
// --------------------------------------------------------
// Type: CALLINFO_LONG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CALLINFO_LONG = *opaque{
};
// --------------------------------------------------------
// Type: CALLINFO_STRING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CALLINFO_STRING = *opaque{
};
// --------------------------------------------------------
// Type: CALLINFO_BUFFER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CALLINFO_BUFFER = *opaque{
};
// --------------------------------------------------------
// Type: ADDRESS_CAPABILITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADDRESS_CAPABILITY = *opaque{
};
// --------------------------------------------------------
// Type: ADDRESS_CAPABILITY_STRING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADDRESS_CAPABILITY_STRING = *opaque{
};
// --------------------------------------------------------
// Type: FULLDUPLEX_SUPPORT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FULLDUPLEX_SUPPORT = *opaque{
};
// --------------------------------------------------------
// Type: FINISH_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FINISH_MODE = *opaque{
};
// --------------------------------------------------------
// Type: PHONE_PRIVILEGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PHONE_PRIVILEGE = *opaque{
};
// --------------------------------------------------------
// Type: PHONE_HOOK_SWITCH_DEVICE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PHONE_HOOK_SWITCH_DEVICE = *opaque{
};
// --------------------------------------------------------
// Type: PHONE_HOOK_SWITCH_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PHONE_HOOK_SWITCH_STATE = *opaque{
};
// --------------------------------------------------------
// Type: PHONE_LAMP_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PHONE_LAMP_MODE = *opaque{
};
// --------------------------------------------------------
// Type: PHONECAPS_LONG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PHONECAPS_LONG = *opaque{
};
// --------------------------------------------------------
// Type: PHONECAPS_STRING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PHONECAPS_STRING = *opaque{
};
// --------------------------------------------------------
// Type: PHONECAPS_BUFFER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PHONECAPS_BUFFER = *opaque{
};
// --------------------------------------------------------
// Type: PHONE_BUTTON_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PHONE_BUTTON_STATE = *opaque{
};
// --------------------------------------------------------
// Type: PHONE_BUTTON_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PHONE_BUTTON_MODE = *opaque{
};
// --------------------------------------------------------
// Type: PHONE_BUTTON_FUNCTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PHONE_BUTTON_FUNCTION = *opaque{
};
// --------------------------------------------------------
// Type: PHONE_TONE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PHONE_TONE = *opaque{
};
// --------------------------------------------------------
// Type: PHONE_EVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PHONE_EVENT = *opaque{
};
// --------------------------------------------------------
// Type: ITTAPI
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITTAPI = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'Shutdown'
    // TODO: Method 'get_Addresses'
    // TODO: Method 'EnumerateAddresses'
    // TODO: Method 'RegisterCallNotifications'
    // TODO: Method 'UnregisterNotifications'
    // TODO: Method 'get_CallHubs'
    // TODO: Method 'EnumerateCallHubs'
    // TODO: Method 'SetCallHubTracking'
    // TODO: Method 'EnumeratePrivateTAPIObjects'
    // TODO: Method 'get_PrivateTAPIObjects'
    // TODO: Method 'RegisterRequestRecipient'
    // TODO: Method 'SetAssistedTelephonyPriority'
    // TODO: Method 'SetApplicationPriority'
    // TODO: Method 'put_EventFilter'
    // TODO: Method 'get_EventFilter'
};
// --------------------------------------------------------
// Type: ITTAPI2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITTAPI2 = *opaque{
    // TODO: Method 'get_Phones'
    // TODO: Method 'EnumeratePhones'
    // TODO: Method 'CreateEmptyCollectionObject'
};
// --------------------------------------------------------
// Type: ITMediaSupport
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITMediaSupport = *opaque{
    // TODO: Method 'get_MediaTypes'
    // TODO: Method 'QueryMediaType'
};
// --------------------------------------------------------
// Type: ITPluggableTerminalClassInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITPluggableTerminalClassInfo = *opaque{
    // TODO: Method 'get_Name'
    // TODO: Method 'get_Company'
    // TODO: Method 'get_Version'
    // TODO: Method 'get_TerminalClass'
    // TODO: Method 'get_CLSID'
    // TODO: Method 'get_Direction'
    // TODO: Method 'get_MediaTypes'
};
// --------------------------------------------------------
// Type: ITPluggableTerminalSuperclassInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITPluggableTerminalSuperclassInfo = *opaque{
    // TODO: Method 'get_Name'
    // TODO: Method 'get_CLSID'
};
// --------------------------------------------------------
// Type: ITTerminalSupport
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITTerminalSupport = *opaque{
    // TODO: Method 'get_StaticTerminals'
    // TODO: Method 'EnumerateStaticTerminals'
    // TODO: Method 'get_DynamicTerminalClasses'
    // TODO: Method 'EnumerateDynamicTerminalClasses'
    // TODO: Method 'CreateTerminal'
    // TODO: Method 'GetDefaultStaticTerminal'
};
// --------------------------------------------------------
// Type: ITTerminalSupport2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITTerminalSupport2 = *opaque{
    // TODO: Method 'get_PluggableSuperclasses'
    // TODO: Method 'EnumeratePluggableSuperclasses'
    // TODO: Method 'get_PluggableTerminalClasses'
    // TODO: Method 'EnumeratePluggableTerminalClasses'
};
// --------------------------------------------------------
// Type: ITAddress
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITAddress = *opaque{
    // TODO: Method 'get_State'
    // TODO: Method 'get_AddressName'
    // TODO: Method 'get_ServiceProviderName'
    // TODO: Method 'get_TAPIObject'
    // TODO: Method 'CreateCall'
    // TODO: Method 'get_Calls'
    // TODO: Method 'EnumerateCalls'
    // TODO: Method 'get_DialableAddress'
    // TODO: Method 'CreateForwardInfoObject'
    // TODO: Method 'Forward'
    // TODO: Method 'get_CurrentForwardInfo'
    // TODO: Method 'put_MessageWaiting'
    // TODO: Method 'get_MessageWaiting'
    // TODO: Method 'put_DoNotDisturb'
    // TODO: Method 'get_DoNotDisturb'
};
// --------------------------------------------------------
// Type: ITAddress2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITAddress2 = *opaque{
    // TODO: Method 'get_Phones'
    // TODO: Method 'EnumeratePhones'
    // TODO: Method 'GetPhoneFromTerminal'
    // TODO: Method 'get_PreferredPhones'
    // TODO: Method 'EnumeratePreferredPhones'
    // TODO: Method 'get_EventFilter'
    // TODO: Method 'put_EventFilter'
    // TODO: Method 'DeviceSpecific'
    // TODO: Method 'DeviceSpecificVariant'
    // TODO: Method 'NegotiateExtVersion'
};
// --------------------------------------------------------
// Type: ITAddressCapabilities
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITAddressCapabilities = *opaque{
    // TODO: Method 'get_AddressCapability'
    // TODO: Method 'get_AddressCapabilityString'
    // TODO: Method 'get_CallTreatments'
    // TODO: Method 'EnumerateCallTreatments'
    // TODO: Method 'get_CompletionMessages'
    // TODO: Method 'EnumerateCompletionMessages'
    // TODO: Method 'get_DeviceClasses'
    // TODO: Method 'EnumerateDeviceClasses'
};
// --------------------------------------------------------
// Type: ITPhone
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITPhone = *opaque{
    // TODO: Method 'Open'
    // TODO: Method 'Close'
    // TODO: Method 'get_Addresses'
    // TODO: Method 'EnumerateAddresses'
    // TODO: Method 'get_PhoneCapsLong'
    // TODO: Method 'get_PhoneCapsString'
    // TODO: Method 'get_Terminals'
    // TODO: Method 'EnumerateTerminals'
    // TODO: Method 'get_ButtonMode'
    // TODO: Method 'put_ButtonMode'
    // TODO: Method 'get_ButtonFunction'
    // TODO: Method 'put_ButtonFunction'
    // TODO: Method 'get_ButtonText'
    // TODO: Method 'put_ButtonText'
    // TODO: Method 'get_ButtonState'
    // TODO: Method 'get_HookSwitchState'
    // TODO: Method 'put_HookSwitchState'
    // TODO: Method 'put_RingMode'
    // TODO: Method 'get_RingMode'
    // TODO: Method 'put_RingVolume'
    // TODO: Method 'get_RingVolume'
    // TODO: Method 'get_Privilege'
    // TODO: Method 'GetPhoneCapsBuffer'
    // TODO: Method 'get_PhoneCapsBuffer'
    // TODO: Method 'get_LampMode'
    // TODO: Method 'put_LampMode'
    // TODO: Method 'get_Display'
    // TODO: Method 'SetDisplay'
    // TODO: Method 'get_PreferredAddresses'
    // TODO: Method 'EnumeratePreferredAddresses'
    // TODO: Method 'DeviceSpecific'
    // TODO: Method 'DeviceSpecificVariant'
    // TODO: Method 'NegotiateExtVersion'
};
// --------------------------------------------------------
// Type: ITAutomatedPhoneControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITAutomatedPhoneControl = *opaque{
    // TODO: Method 'StartTone'
    // TODO: Method 'StopTone'
    // TODO: Method 'get_Tone'
    // TODO: Method 'StartRinger'
    // TODO: Method 'StopRinger'
    // TODO: Method 'get_Ringer'
    // TODO: Method 'put_PhoneHandlingEnabled'
    // TODO: Method 'get_PhoneHandlingEnabled'
    // TODO: Method 'put_AutoEndOfNumberTimeout'
    // TODO: Method 'get_AutoEndOfNumberTimeout'
    // TODO: Method 'put_AutoDialtone'
    // TODO: Method 'get_AutoDialtone'
    // TODO: Method 'put_AutoStopTonesOnOnHook'
    // TODO: Method 'get_AutoStopTonesOnOnHook'
    // TODO: Method 'put_AutoStopRingOnOffHook'
    // TODO: Method 'get_AutoStopRingOnOffHook'
    // TODO: Method 'put_AutoKeypadTones'
    // TODO: Method 'get_AutoKeypadTones'
    // TODO: Method 'put_AutoKeypadTonesMinimumDuration'
    // TODO: Method 'get_AutoKeypadTonesMinimumDuration'
    // TODO: Method 'put_AutoVolumeControl'
    // TODO: Method 'get_AutoVolumeControl'
    // TODO: Method 'put_AutoVolumeControlStep'
    // TODO: Method 'get_AutoVolumeControlStep'
    // TODO: Method 'put_AutoVolumeControlRepeatDelay'
    // TODO: Method 'get_AutoVolumeControlRepeatDelay'
    // TODO: Method 'put_AutoVolumeControlRepeatPeriod'
    // TODO: Method 'get_AutoVolumeControlRepeatPeriod'
    // TODO: Method 'SelectCall'
    // TODO: Method 'UnselectCall'
    // TODO: Method 'EnumerateSelectedCalls'
    // TODO: Method 'get_SelectedCalls'
};
// --------------------------------------------------------
// Type: ITBasicCallControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITBasicCallControl = *opaque{
    // TODO: Method 'Connect'
    // TODO: Method 'Answer'
    // TODO: Method 'Disconnect'
    // TODO: Method 'Hold'
    // TODO: Method 'HandoffDirect'
    // TODO: Method 'HandoffIndirect'
    // TODO: Method 'Conference'
    // TODO: Method 'Transfer'
    // TODO: Method 'BlindTransfer'
    // TODO: Method 'SwapHold'
    // TODO: Method 'ParkDirect'
    // TODO: Method 'ParkIndirect'
    // TODO: Method 'Unpark'
    // TODO: Method 'SetQOS'
    // TODO: Method 'Pickup'
    // TODO: Method 'Dial'
    // TODO: Method 'Finish'
    // TODO: Method 'RemoveFromConference'
};
// --------------------------------------------------------
// Type: ITCallInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITCallInfo = *opaque{
    // TODO: Method 'get_Address'
    // TODO: Method 'get_CallState'
    // TODO: Method 'get_Privilege'
    // TODO: Method 'get_CallHub'
    // TODO: Method 'get_CallInfoLong'
    // TODO: Method 'put_CallInfoLong'
    // TODO: Method 'get_CallInfoString'
    // TODO: Method 'put_CallInfoString'
    // TODO: Method 'get_CallInfoBuffer'
    // TODO: Method 'put_CallInfoBuffer'
    // TODO: Method 'GetCallInfoBuffer'
    // TODO: Method 'SetCallInfoBuffer'
    // TODO: Method 'ReleaseUserUserInfo'
};
// --------------------------------------------------------
// Type: ITCallInfo2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITCallInfo2 = *opaque{
    // TODO: Method 'get_EventFilter'
    // TODO: Method 'put_EventFilter'
};
// --------------------------------------------------------
// Type: ITTerminal
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITTerminal = *opaque{
    // TODO: Method 'get_Name'
    // TODO: Method 'get_State'
    // TODO: Method 'get_TerminalType'
    // TODO: Method 'get_TerminalClass'
    // TODO: Method 'get_MediaType'
    // TODO: Method 'get_Direction'
};
// --------------------------------------------------------
// Type: ITMultiTrackTerminal
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITMultiTrackTerminal = *opaque{
    // TODO: Method 'get_TrackTerminals'
    // TODO: Method 'EnumerateTrackTerminals'
    // TODO: Method 'CreateTrackTerminal'
    // TODO: Method 'get_MediaTypesInUse'
    // TODO: Method 'get_DirectionsInUse'
    // TODO: Method 'RemoveTrackTerminal'
};
// --------------------------------------------------------
// Type: TERMINAL_MEDIA_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TERMINAL_MEDIA_STATE = *opaque{
};
// --------------------------------------------------------
// Type: FT_STATE_EVENT_CAUSE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FT_STATE_EVENT_CAUSE = *opaque{
};
// --------------------------------------------------------
// Type: ITFileTrack
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITFileTrack = *opaque{
    // TODO: Method 'get_Format'
    // TODO: Method 'put_Format'
    // TODO: Method 'get_ControllingTerminal'
    // TODO: Method 'get_AudioFormatForScripting'
    // TODO: Method 'put_AudioFormatForScripting'
    // TODO: Method 'get_EmptyAudioFormatForScripting'
};
// --------------------------------------------------------
// Type: ITMediaPlayback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITMediaPlayback = *opaque{
    // TODO: Method 'put_PlayList'
    // TODO: Method 'get_PlayList'
};
// --------------------------------------------------------
// Type: ITMediaRecord
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITMediaRecord = *opaque{
    // TODO: Method 'put_FileName'
    // TODO: Method 'get_FileName'
};
// --------------------------------------------------------
// Type: ITMediaControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITMediaControl = *opaque{
    // TODO: Method 'Start'
    // TODO: Method 'Stop'
    // TODO: Method 'Pause'
    // TODO: Method 'get_MediaState'
};
// --------------------------------------------------------
// Type: ITBasicAudioTerminal
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITBasicAudioTerminal = *opaque{
    // TODO: Method 'put_Volume'
    // TODO: Method 'get_Volume'
    // TODO: Method 'put_Balance'
    // TODO: Method 'get_Balance'
};
// --------------------------------------------------------
// Type: ITStaticAudioTerminal
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITStaticAudioTerminal = *opaque{
    // TODO: Method 'get_WaveId'
};
// --------------------------------------------------------
// Type: ITCallHub
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITCallHub = *opaque{
    // TODO: Method 'Clear'
    // TODO: Method 'EnumerateCalls'
    // TODO: Method 'get_Calls'
    // TODO: Method 'get_NumCalls'
    // TODO: Method 'get_State'
};
// --------------------------------------------------------
// Type: ITLegacyAddressMediaControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITLegacyAddressMediaControl = *opaque{
    // TODO: Method 'GetID'
    // TODO: Method 'GetDevConfig'
    // TODO: Method 'SetDevConfig'
};
// --------------------------------------------------------
// Type: ITPrivateEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITPrivateEvent = *opaque{
    // TODO: Method 'get_Address'
    // TODO: Method 'get_Call'
    // TODO: Method 'get_CallHub'
    // TODO: Method 'get_EventCode'
    // TODO: Method 'get_EventInterface'
};
// --------------------------------------------------------
// Type: ITLegacyAddressMediaControl2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITLegacyAddressMediaControl2 = *opaque{
    // TODO: Method 'ConfigDialog'
    // TODO: Method 'ConfigDialogEdit'
};
// --------------------------------------------------------
// Type: ITLegacyCallMediaControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITLegacyCallMediaControl = *opaque{
    // TODO: Method 'DetectDigits'
    // TODO: Method 'GenerateDigits'
    // TODO: Method 'GetID'
    // TODO: Method 'SetMediaType'
    // TODO: Method 'MonitorMedia'
};
// --------------------------------------------------------
// Type: ITLegacyCallMediaControl2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITLegacyCallMediaControl2 = *opaque{
    // TODO: Method 'GenerateDigits2'
    // TODO: Method 'GatherDigits'
    // TODO: Method 'DetectTones'
    // TODO: Method 'DetectTonesByCollection'
    // TODO: Method 'GenerateTone'
    // TODO: Method 'GenerateCustomTones'
    // TODO: Method 'GenerateCustomTonesByCollection'
    // TODO: Method 'CreateDetectToneObject'
    // TODO: Method 'CreateCustomToneObject'
    // TODO: Method 'GetIDAsVariant'
};
// --------------------------------------------------------
// Type: ITDetectTone
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITDetectTone = *opaque{
    // TODO: Method 'get_AppSpecific'
    // TODO: Method 'put_AppSpecific'
    // TODO: Method 'get_Duration'
    // TODO: Method 'put_Duration'
    // TODO: Method 'get_Frequency'
    // TODO: Method 'put_Frequency'
};
// --------------------------------------------------------
// Type: ITCustomTone
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITCustomTone = *opaque{
    // TODO: Method 'get_Frequency'
    // TODO: Method 'put_Frequency'
    // TODO: Method 'get_CadenceOn'
    // TODO: Method 'put_CadenceOn'
    // TODO: Method 'get_CadenceOff'
    // TODO: Method 'put_CadenceOff'
    // TODO: Method 'get_Volume'
    // TODO: Method 'put_Volume'
};
// --------------------------------------------------------
// Type: IEnumPhone
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumPhone = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Reset'
    // TODO: Method 'Skip'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IEnumTerminal
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumTerminal = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Reset'
    // TODO: Method 'Skip'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IEnumTerminalClass
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumTerminalClass = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Reset'
    // TODO: Method 'Skip'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IEnumCall
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumCall = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Reset'
    // TODO: Method 'Skip'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IEnumAddress
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumAddress = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Reset'
    // TODO: Method 'Skip'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IEnumCallHub
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumCallHub = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Reset'
    // TODO: Method 'Skip'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IEnumBstr
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumBstr = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Reset'
    // TODO: Method 'Skip'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IEnumPluggableTerminalClassInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumPluggableTerminalClassInfo = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Reset'
    // TODO: Method 'Skip'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IEnumPluggableSuperclassInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumPluggableSuperclassInfo = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Reset'
    // TODO: Method 'Skip'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: ITPhoneEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITPhoneEvent = *opaque{
    // TODO: Method 'get_Phone'
    // TODO: Method 'get_Event'
    // TODO: Method 'get_ButtonState'
    // TODO: Method 'get_HookSwitchState'
    // TODO: Method 'get_HookSwitchDevice'
    // TODO: Method 'get_RingMode'
    // TODO: Method 'get_ButtonLampId'
    // TODO: Method 'get_NumberGathered'
    // TODO: Method 'get_Call'
};
// --------------------------------------------------------
// Type: ITCallStateEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITCallStateEvent = *opaque{
    // TODO: Method 'get_Call'
    // TODO: Method 'get_State'
    // TODO: Method 'get_Cause'
    // TODO: Method 'get_CallbackInstance'
};
// --------------------------------------------------------
// Type: ITPhoneDeviceSpecificEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITPhoneDeviceSpecificEvent = *opaque{
    // TODO: Method 'get_Phone'
    // TODO: Method 'get_lParam1'
    // TODO: Method 'get_lParam2'
    // TODO: Method 'get_lParam3'
};
// --------------------------------------------------------
// Type: ITCallMediaEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITCallMediaEvent = *opaque{
    // TODO: Method 'get_Call'
    // TODO: Method 'get_Event'
    // TODO: Method 'get_Error'
    // TODO: Method 'get_Terminal'
    // TODO: Method 'get_Stream'
    // TODO: Method 'get_Cause'
};
// --------------------------------------------------------
// Type: ITDigitDetectionEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITDigitDetectionEvent = *opaque{
    // TODO: Method 'get_Call'
    // TODO: Method 'get_Digit'
    // TODO: Method 'get_DigitMode'
    // TODO: Method 'get_TickCount'
    // TODO: Method 'get_CallbackInstance'
};
// --------------------------------------------------------
// Type: ITDigitGenerationEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITDigitGenerationEvent = *opaque{
    // TODO: Method 'get_Call'
    // TODO: Method 'get_GenerationTermination'
    // TODO: Method 'get_TickCount'
    // TODO: Method 'get_CallbackInstance'
};
// --------------------------------------------------------
// Type: ITDigitsGatheredEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITDigitsGatheredEvent = *opaque{
    // TODO: Method 'get_Call'
    // TODO: Method 'get_Digits'
    // TODO: Method 'get_GatherTermination'
    // TODO: Method 'get_TickCount'
    // TODO: Method 'get_CallbackInstance'
};
// --------------------------------------------------------
// Type: ITToneDetectionEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITToneDetectionEvent = *opaque{
    // TODO: Method 'get_Call'
    // TODO: Method 'get_AppSpecific'
    // TODO: Method 'get_TickCount'
    // TODO: Method 'get_CallbackInstance'
};
// --------------------------------------------------------
// Type: ITTAPIObjectEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITTAPIObjectEvent = *opaque{
    // TODO: Method 'get_TAPIObject'
    // TODO: Method 'get_Event'
    // TODO: Method 'get_Address'
    // TODO: Method 'get_CallbackInstance'
};
// --------------------------------------------------------
// Type: ITTAPIObjectEvent2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITTAPIObjectEvent2 = *opaque{
    // TODO: Method 'get_Phone'
};
// --------------------------------------------------------
// Type: ITTAPIEventNotification
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITTAPIEventNotification = *opaque{
    // TODO: Method 'Event'
};
// --------------------------------------------------------
// Type: ITCallHubEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITCallHubEvent = *opaque{
    // TODO: Method 'get_Event'
    // TODO: Method 'get_CallHub'
    // TODO: Method 'get_Call'
};
// --------------------------------------------------------
// Type: ITAddressEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITAddressEvent = *opaque{
    // TODO: Method 'get_Address'
    // TODO: Method 'get_Event'
    // TODO: Method 'get_Terminal'
};
// --------------------------------------------------------
// Type: ITAddressDeviceSpecificEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITAddressDeviceSpecificEvent = *opaque{
    // TODO: Method 'get_Address'
    // TODO: Method 'get_Call'
    // TODO: Method 'get_lParam1'
    // TODO: Method 'get_lParam2'
    // TODO: Method 'get_lParam3'
};
// --------------------------------------------------------
// Type: ITFileTerminalEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITFileTerminalEvent = *opaque{
    // TODO: Method 'get_Terminal'
    // TODO: Method 'get_Track'
    // TODO: Method 'get_Call'
    // TODO: Method 'get_State'
    // TODO: Method 'get_Cause'
    // TODO: Method 'get_Error'
};
// --------------------------------------------------------
// Type: ITTTSTerminalEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITTTSTerminalEvent = *opaque{
    // TODO: Method 'get_Terminal'
    // TODO: Method 'get_Call'
    // TODO: Method 'get_Error'
};
// --------------------------------------------------------
// Type: ITASRTerminalEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITASRTerminalEvent = *opaque{
    // TODO: Method 'get_Terminal'
    // TODO: Method 'get_Call'
    // TODO: Method 'get_Error'
};
// --------------------------------------------------------
// Type: ITToneTerminalEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITToneTerminalEvent = *opaque{
    // TODO: Method 'get_Terminal'
    // TODO: Method 'get_Call'
    // TODO: Method 'get_Error'
};
// --------------------------------------------------------
// Type: ITQOSEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITQOSEvent = *opaque{
    // TODO: Method 'get_Call'
    // TODO: Method 'get_Event'
    // TODO: Method 'get_MediaType'
};
// --------------------------------------------------------
// Type: ITCallInfoChangeEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITCallInfoChangeEvent = *opaque{
    // TODO: Method 'get_Call'
    // TODO: Method 'get_Cause'
    // TODO: Method 'get_CallbackInstance'
};
// --------------------------------------------------------
// Type: ITRequest
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITRequest = *opaque{
    // TODO: Method 'MakeCall'
};
// --------------------------------------------------------
// Type: ITRequestEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITRequestEvent = *opaque{
    // TODO: Method 'get_RegistrationInstance'
    // TODO: Method 'get_RequestMode'
    // TODO: Method 'get_DestAddress'
    // TODO: Method 'get_AppName'
    // TODO: Method 'get_CalledParty'
    // TODO: Method 'get_Comment'
};
// --------------------------------------------------------
// Type: ITCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITCollection = *opaque{
    // TODO: Method 'get_Count'
    // TODO: Method 'get_Item'
    // TODO: Method 'get__NewEnum'
};
// --------------------------------------------------------
// Type: ITCollection2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITCollection2 = *opaque{
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
};
// --------------------------------------------------------
// Type: ITForwardInformation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITForwardInformation = *opaque{
    // TODO: Method 'put_NumRingsNoAnswer'
    // TODO: Method 'get_NumRingsNoAnswer'
    // TODO: Method 'SetForwardType'
    // TODO: Method 'get_ForwardTypeDestination'
    // TODO: Method 'get_ForwardTypeCaller'
    // TODO: Method 'GetForwardType'
    // TODO: Method 'Clear'
};
// --------------------------------------------------------
// Type: ITForwardInformation2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITForwardInformation2 = *opaque{
    // TODO: Method 'SetForwardType2'
    // TODO: Method 'GetForwardType2'
    // TODO: Method 'get_ForwardTypeDestinationAddressType'
    // TODO: Method 'get_ForwardTypeCallerAddressType'
};
// --------------------------------------------------------
// Type: ITAddressTranslation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITAddressTranslation = *opaque{
    // TODO: Method 'TranslateAddress'
    // TODO: Method 'TranslateDialog'
    // TODO: Method 'EnumerateLocations'
    // TODO: Method 'get_Locations'
    // TODO: Method 'EnumerateCallingCards'
    // TODO: Method 'get_CallingCards'
};
// --------------------------------------------------------
// Type: ITAddressTranslationInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITAddressTranslationInfo = *opaque{
    // TODO: Method 'get_DialableString'
    // TODO: Method 'get_DisplayableString'
    // TODO: Method 'get_CurrentCountryCode'
    // TODO: Method 'get_DestinationCountryCode'
    // TODO: Method 'get_TranslationResults'
};
// --------------------------------------------------------
// Type: ITLocationInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITLocationInfo = *opaque{
    // TODO: Method 'get_PermanentLocationID'
    // TODO: Method 'get_CountryCode'
    // TODO: Method 'get_CountryID'
    // TODO: Method 'get_Options'
    // TODO: Method 'get_PreferredCardID'
    // TODO: Method 'get_LocationName'
    // TODO: Method 'get_CityCode'
    // TODO: Method 'get_LocalAccessCode'
    // TODO: Method 'get_LongDistanceAccessCode'
    // TODO: Method 'get_TollPrefixList'
    // TODO: Method 'get_CancelCallWaitingCode'
};
// --------------------------------------------------------
// Type: IEnumLocation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumLocation = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Reset'
    // TODO: Method 'Skip'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: ITCallingCard
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITCallingCard = *opaque{
    // TODO: Method 'get_PermanentCardID'
    // TODO: Method 'get_NumberOfDigits'
    // TODO: Method 'get_Options'
    // TODO: Method 'get_CardName'
    // TODO: Method 'get_SameAreaDialingRule'
    // TODO: Method 'get_LongDistanceDialingRule'
    // TODO: Method 'get_InternationalDialingRule'
};
// --------------------------------------------------------
// Type: IEnumCallingCard
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumCallingCard = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Reset'
    // TODO: Method 'Skip'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: ITCallNotificationEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITCallNotificationEvent = *opaque{
    // TODO: Method 'get_Call'
    // TODO: Method 'get_Event'
    // TODO: Method 'get_CallbackInstance'
};
// --------------------------------------------------------
// Type: ITDispatchMapper
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITDispatchMapper = *opaque{
    // TODO: Method 'QueryDispatchInterface'
};
// --------------------------------------------------------
// Type: ITStreamControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITStreamControl = *opaque{
    // TODO: Method 'CreateStream'
    // TODO: Method 'RemoveStream'
    // TODO: Method 'EnumerateStreams'
    // TODO: Method 'get_Streams'
};
// --------------------------------------------------------
// Type: ITStream
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITStream = *opaque{
    // TODO: Method 'get_MediaType'
    // TODO: Method 'get_Direction'
    // TODO: Method 'get_Name'
    // TODO: Method 'StartStream'
    // TODO: Method 'PauseStream'
    // TODO: Method 'StopStream'
    // TODO: Method 'SelectTerminal'
    // TODO: Method 'UnselectTerminal'
    // TODO: Method 'EnumerateTerminals'
    // TODO: Method 'get_Terminals'
};
// --------------------------------------------------------
// Type: IEnumStream
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumStream = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Reset'
    // TODO: Method 'Skip'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: ITSubStreamControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITSubStreamControl = *opaque{
    // TODO: Method 'CreateSubStream'
    // TODO: Method 'RemoveSubStream'
    // TODO: Method 'EnumerateSubStreams'
    // TODO: Method 'get_SubStreams'
};
// --------------------------------------------------------
// Type: ITSubStream
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITSubStream = *opaque{
    // TODO: Method 'StartSubStream'
    // TODO: Method 'PauseSubStream'
    // TODO: Method 'StopSubStream'
    // TODO: Method 'SelectTerminal'
    // TODO: Method 'UnselectTerminal'
    // TODO: Method 'EnumerateTerminals'
    // TODO: Method 'get_Terminals'
    // TODO: Method 'get_Stream'
};
// --------------------------------------------------------
// Type: IEnumSubStream
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumSubStream = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Reset'
    // TODO: Method 'Skip'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: ITLegacyWaveSupport
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITLegacyWaveSupport = *opaque{
    // TODO: Method 'IsFullDuplex'
};
// --------------------------------------------------------
// Type: ITBasicCallControl2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITBasicCallControl2 = *opaque{
    // TODO: Method 'RequestTerminal'
    // TODO: Method 'SelectTerminalOnCall'
    // TODO: Method 'UnselectTerminalOnCall'
};
// --------------------------------------------------------
// Type: ITScriptableAudioFormat
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITScriptableAudioFormat = *opaque{
    // TODO: Method 'get_Channels'
    // TODO: Method 'put_Channels'
    // TODO: Method 'get_SamplesPerSec'
    // TODO: Method 'put_SamplesPerSec'
    // TODO: Method 'get_AvgBytesPerSec'
    // TODO: Method 'put_AvgBytesPerSec'
    // TODO: Method 'get_BlockAlign'
    // TODO: Method 'put_BlockAlign'
    // TODO: Method 'get_BitsPerSample'
    // TODO: Method 'put_BitsPerSample'
    // TODO: Method 'get_FormatTag'
    // TODO: Method 'put_FormatTag'
};
// --------------------------------------------------------
// Type: AGENT_EVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AGENT_EVENT = *opaque{
};
// --------------------------------------------------------
// Type: AGENT_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AGENT_STATE = *opaque{
};
// --------------------------------------------------------
// Type: AGENT_SESSION_EVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AGENT_SESSION_EVENT = *opaque{
};
// --------------------------------------------------------
// Type: AGENT_SESSION_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AGENT_SESSION_STATE = *opaque{
};
// --------------------------------------------------------
// Type: AGENTHANDLER_EVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AGENTHANDLER_EVENT = *opaque{
};
// --------------------------------------------------------
// Type: ACDGROUP_EVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ACDGROUP_EVENT = *opaque{
};
// --------------------------------------------------------
// Type: ACDQUEUE_EVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ACDQUEUE_EVENT = *opaque{
};
// --------------------------------------------------------
// Type: ITAgent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITAgent = *opaque{
    // TODO: Method 'EnumerateAgentSessions'
    // TODO: Method 'CreateSession'
    // TODO: Method 'CreateSessionWithPIN'
    // TODO: Method 'get_ID'
    // TODO: Method 'get_User'
    // TODO: Method 'put_State'
    // TODO: Method 'get_State'
    // TODO: Method 'put_MeasurementPeriod'
    // TODO: Method 'get_MeasurementPeriod'
    // TODO: Method 'get_OverallCallRate'
    // TODO: Method 'get_NumberOfACDCalls'
    // TODO: Method 'get_NumberOfIncomingCalls'
    // TODO: Method 'get_NumberOfOutgoingCalls'
    // TODO: Method 'get_TotalACDTalkTime'
    // TODO: Method 'get_TotalACDCallTime'
    // TODO: Method 'get_TotalWrapUpTime'
    // TODO: Method 'get_AgentSessions'
};
// --------------------------------------------------------
// Type: ITAgentSession
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITAgentSession = *opaque{
    // TODO: Method 'get_Agent'
    // TODO: Method 'get_Address'
    // TODO: Method 'get_ACDGroup'
    // TODO: Method 'put_State'
    // TODO: Method 'get_State'
    // TODO: Method 'get_SessionStartTime'
    // TODO: Method 'get_SessionDuration'
    // TODO: Method 'get_NumberOfCalls'
    // TODO: Method 'get_TotalTalkTime'
    // TODO: Method 'get_AverageTalkTime'
    // TODO: Method 'get_TotalCallTime'
    // TODO: Method 'get_AverageCallTime'
    // TODO: Method 'get_TotalWrapUpTime'
    // TODO: Method 'get_AverageWrapUpTime'
    // TODO: Method 'get_ACDCallRate'
    // TODO: Method 'get_LongestTimeToAnswer'
    // TODO: Method 'get_AverageTimeToAnswer'
};
// --------------------------------------------------------
// Type: ITACDGroup
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITACDGroup = *opaque{
    // TODO: Method 'get_Name'
    // TODO: Method 'EnumerateQueues'
    // TODO: Method 'get_Queues'
};
// --------------------------------------------------------
// Type: ITQueue
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITQueue = *opaque{
    // TODO: Method 'put_MeasurementPeriod'
    // TODO: Method 'get_MeasurementPeriod'
    // TODO: Method 'get_TotalCallsQueued'
    // TODO: Method 'get_CurrentCallsQueued'
    // TODO: Method 'get_TotalCallsAbandoned'
    // TODO: Method 'get_TotalCallsFlowedIn'
    // TODO: Method 'get_TotalCallsFlowedOut'
    // TODO: Method 'get_LongestEverWaitTime'
    // TODO: Method 'get_CurrentLongestWaitTime'
    // TODO: Method 'get_AverageWaitTime'
    // TODO: Method 'get_FinalDisposition'
    // TODO: Method 'get_Name'
};
// --------------------------------------------------------
// Type: ITAgentEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITAgentEvent = *opaque{
    // TODO: Method 'get_Agent'
    // TODO: Method 'get_Event'
};
// --------------------------------------------------------
// Type: ITAgentSessionEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITAgentSessionEvent = *opaque{
    // TODO: Method 'get_Session'
    // TODO: Method 'get_Event'
};
// --------------------------------------------------------
// Type: ITACDGroupEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITACDGroupEvent = *opaque{
    // TODO: Method 'get_Group'
    // TODO: Method 'get_Event'
};
// --------------------------------------------------------
// Type: ITQueueEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITQueueEvent = *opaque{
    // TODO: Method 'get_Queue'
    // TODO: Method 'get_Event'
};
// --------------------------------------------------------
// Type: ITAgentHandlerEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITAgentHandlerEvent = *opaque{
    // TODO: Method 'get_AgentHandler'
    // TODO: Method 'get_Event'
};
// --------------------------------------------------------
// Type: ITTAPICallCenter
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITTAPICallCenter = *opaque{
    // TODO: Method 'EnumerateAgentHandlers'
    // TODO: Method 'get_AgentHandlers'
};
// --------------------------------------------------------
// Type: ITAgentHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITAgentHandler = *opaque{
    // TODO: Method 'get_Name'
    // TODO: Method 'CreateAgent'
    // TODO: Method 'CreateAgentWithID'
    // TODO: Method 'EnumerateACDGroups'
    // TODO: Method 'EnumerateUsableAddresses'
    // TODO: Method 'get_ACDGroups'
    // TODO: Method 'get_UsableAddresses'
};
// --------------------------------------------------------
// Type: IEnumAgent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumAgent = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Reset'
    // TODO: Method 'Skip'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IEnumAgentSession
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumAgentSession = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Reset'
    // TODO: Method 'Skip'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IEnumQueue
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumQueue = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Reset'
    // TODO: Method 'Skip'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IEnumACDGroup
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumACDGroup = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Reset'
    // TODO: Method 'Skip'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IEnumAgentHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumAgentHandler = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Reset'
    // TODO: Method 'Skip'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: ITAMMediaFormat
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITAMMediaFormat = *opaque{
    // TODO: Method 'get_MediaFormat'
    // TODO: Method 'put_MediaFormat'
};
// --------------------------------------------------------
// Type: ITAllocatorProperties
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITAllocatorProperties = *opaque{
    // TODO: Method 'SetAllocatorProperties'
    // TODO: Method 'GetAllocatorProperties'
    // TODO: Method 'SetAllocateBuffers'
    // TODO: Method 'GetAllocateBuffers'
    // TODO: Method 'SetBufferSize'
    // TODO: Method 'GetBufferSize'
};
// --------------------------------------------------------
// Type: MSP_ADDRESS_EVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSP_ADDRESS_EVENT = *opaque{
};
// --------------------------------------------------------
// Type: MSP_CALL_EVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSP_CALL_EVENT = *opaque{
};
// --------------------------------------------------------
// Type: MSP_CALL_EVENT_CAUSE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSP_CALL_EVENT_CAUSE = *opaque{
};
// --------------------------------------------------------
// Type: MSP_EVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSP_EVENT = *opaque{
};
// --------------------------------------------------------
// Type: MSP_EVENT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSP_EVENT_INFO = extern struct {
    dwSize: u32,
    Event: MSP_EVENT,
    hCall: ?*i32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _MSP_TTS_TERMINAL_EVENT_INFO_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _MSP_TTS_TERMINAL_EVENT_INFO_e__Struct = extern struct {
            pTTSTerminal: ITTerminal,
            hrErrorCode: HRESULT,
        };
        // --------------------------------------------------------
        // Type: _MSP_FILE_TERMINAL_EVENT_INFO_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _MSP_FILE_TERMINAL_EVENT_INFO_e__Struct = extern struct {
            pParentFileTerminal: ITTerminal,
            pFileTrack: ITFileTrack,
            TerminalMediaState: TERMINAL_MEDIA_STATE,
            ftecEventCause: FT_STATE_EVENT_CAUSE,
            hrErrorCode: HRESULT,
        };
        // --------------------------------------------------------
        // Type: _MSP_TSP_DATA_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _MSP_TSP_DATA_e__Struct = extern struct {
            dwBufferSize: u32,
            pBuffer: ?[*]u8,
        };
        // --------------------------------------------------------
        // Type: _MSP_ADDRESS_EVENT_INFO_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _MSP_ADDRESS_EVENT_INFO_e__Struct = extern struct {
            Type: MSP_ADDRESS_EVENT,
            pTerminal: ITTerminal,
        };
        // --------------------------------------------------------
        // Type: _MSP_ASR_TERMINAL_EVENT_INFO_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _MSP_ASR_TERMINAL_EVENT_INFO_e__Struct = extern struct {
            pASRTerminal: ITTerminal,
            hrErrorCode: HRESULT,
        };
        // --------------------------------------------------------
        // Type: _MSP_CALL_EVENT_INFO_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _MSP_CALL_EVENT_INFO_e__Struct = extern struct {
            Type: MSP_CALL_EVENT,
            Cause: MSP_CALL_EVENT_CAUSE,
            pStream: ITStream,
            pTerminal: ITTerminal,
            hrError: HRESULT,
        };
        // --------------------------------------------------------
        // Type: _MSP_PRIVATE_EVENT_INFO_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _MSP_PRIVATE_EVENT_INFO_e__Struct = extern struct {
            pEvent: IDispatch,
            lEventCode: i32,
        };
        // --------------------------------------------------------
        // Type: _MSP_TONE_TERMINAL_EVENT_INFO_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _MSP_TONE_TERMINAL_EVENT_INFO_e__Struct = extern struct {
            pToneTerminal: ITTerminal,
            hrErrorCode: HRESULT,
        };
    };
};
// --------------------------------------------------------
// Type: ITPluggableTerminalEventSink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITPluggableTerminalEventSink = *opaque{
    // TODO: Method 'FireEvent'
};
// --------------------------------------------------------
// Type: ITPluggableTerminalEventSinkRegistration
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITPluggableTerminalEventSinkRegistration = *opaque{
    // TODO: Method 'RegisterSink'
    // TODO: Method 'UnregisterSink'
};
// --------------------------------------------------------
// Type: ITMSPAddress
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITMSPAddress = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'Shutdown'
    // TODO: Method 'CreateMSPCall'
    // TODO: Method 'ShutdownMSPCall'
    // TODO: Method 'ReceiveTSPData'
    // TODO: Method 'GetEvent'
};
// --------------------------------------------------------
// Type: ITTAPIDispatchEventNotification
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITTAPIDispatchEventNotification = *opaque{
};
// --------------------------------------------------------
// Type: Rendezvous
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const Rendezvous = opaque {
};
// --------------------------------------------------------
// Type: DIRECTORY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DIRECTORY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DIRECTORY_OBJECT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DIRECTORY_OBJECT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: RND_ADVERTISING_SCOPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RND_ADVERTISING_SCOPE = *opaque{
};
// --------------------------------------------------------
// Type: ITDirectoryObjectConference
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITDirectoryObjectConference = *opaque{
    // TODO: Method 'get_Protocol'
    // TODO: Method 'get_Originator'
    // TODO: Method 'put_Originator'
    // TODO: Method 'get_AdvertisingScope'
    // TODO: Method 'put_AdvertisingScope'
    // TODO: Method 'get_Url'
    // TODO: Method 'put_Url'
    // TODO: Method 'get_Description'
    // TODO: Method 'put_Description'
    // TODO: Method 'get_IsEncrypted'
    // TODO: Method 'put_IsEncrypted'
    // TODO: Method 'get_StartTime'
    // TODO: Method 'put_StartTime'
    // TODO: Method 'get_StopTime'
    // TODO: Method 'put_StopTime'
};
// --------------------------------------------------------
// Type: ITDirectoryObjectUser
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITDirectoryObjectUser = *opaque{
    // TODO: Method 'get_IPPhonePrimary'
    // TODO: Method 'put_IPPhonePrimary'
};
// --------------------------------------------------------
// Type: IEnumDialableAddrs
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumDialableAddrs = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Reset'
    // TODO: Method 'Skip'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: ITDirectoryObject
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITDirectoryObject = *opaque{
    // TODO: Method 'get_ObjectType'
    // TODO: Method 'get_Name'
    // TODO: Method 'put_Name'
    // TODO: Method 'get_DialableAddrs'
    // TODO: Method 'EnumerateDialableAddrs'
    // TODO: Method 'get_SecurityDescriptor'
    // TODO: Method 'put_SecurityDescriptor'
};
// --------------------------------------------------------
// Type: IEnumDirectoryObject
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumDirectoryObject = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Reset'
    // TODO: Method 'Skip'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: ITILSConfig
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITILSConfig = *opaque{
    // TODO: Method 'get_Port'
    // TODO: Method 'put_Port'
};
// --------------------------------------------------------
// Type: ITDirectory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITDirectory = *opaque{
    // TODO: Method 'get_DirectoryType'
    // TODO: Method 'get_DisplayName'
    // TODO: Method 'get_IsDynamic'
    // TODO: Method 'get_DefaultObjectTTL'
    // TODO: Method 'put_DefaultObjectTTL'
    // TODO: Method 'EnableAutoRefresh'
    // TODO: Method 'Connect'
    // TODO: Method 'Bind'
    // TODO: Method 'AddDirectoryObject'
    // TODO: Method 'ModifyDirectoryObject'
    // TODO: Method 'RefreshDirectoryObject'
    // TODO: Method 'DeleteDirectoryObject'
    // TODO: Method 'get_DirectoryObjects'
    // TODO: Method 'EnumerateDirectoryObjects'
};
// --------------------------------------------------------
// Type: IEnumDirectory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumDirectory = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Reset'
    // TODO: Method 'Skip'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: ITRendezvous
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITRendezvous = *opaque{
    // TODO: Method 'get_DefaultDirectories'
    // TODO: Method 'EnumerateDefaultDirectories'
    // TODO: Method 'CreateDirectoryA'
    // TODO: Method 'CreateDirectoryObject'
};
// --------------------------------------------------------
// Type: McastAddressAllocation
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const McastAddressAllocation = opaque {
};
// --------------------------------------------------------
// Type: IMcastScope
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMcastScope = *opaque{
    // TODO: Method 'get_ScopeID'
    // TODO: Method 'get_ServerID'
    // TODO: Method 'get_InterfaceID'
    // TODO: Method 'get_ScopeDescription'
    // TODO: Method 'get_TTL'
};
// --------------------------------------------------------
// Type: IMcastLeaseInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMcastLeaseInfo = *opaque{
    // TODO: Method 'get_RequestID'
    // TODO: Method 'get_LeaseStartTime'
    // TODO: Method 'put_LeaseStartTime'
    // TODO: Method 'get_LeaseStopTime'
    // TODO: Method 'put_LeaseStopTime'
    // TODO: Method 'get_AddressCount'
    // TODO: Method 'get_ServerAddress'
    // TODO: Method 'get_TTL'
    // TODO: Method 'get_Addresses'
    // TODO: Method 'EnumerateAddresses'
};
// --------------------------------------------------------
// Type: IEnumMcastScope
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumMcastScope = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Reset'
    // TODO: Method 'Skip'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IMcastAddressAllocation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMcastAddressAllocation = *opaque{
    // TODO: Method 'get_Scopes'
    // TODO: Method 'EnumerateScopes'
    // TODO: Method 'RequestAddress'
    // TODO: Method 'RenewAddress'
    // TODO: Method 'ReleaseAddress'
    // TODO: Method 'CreateLeaseInfo'
    // TODO: Method 'CreateLeaseInfoFromVariant'
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineAccept(
    hCall: u32,
    lpsUserUserInfo: ?*i8,
    dwSize: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineAddProvider(
    lpszProviderFilename: ?*i8,
    hwndOwner: HWND,
    lpdwPermanentProviderID: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineAddProviderA(
    lpszProviderFilename: ?*i8,
    hwndOwner: HWND,
    lpdwPermanentProviderID: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineAddProviderW(
    lpszProviderFilename: ?*u16,
    hwndOwner: HWND,
    lpdwPermanentProviderID: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineAddToConference(
    hConfCall: u32,
    hConsultCall: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineAgentSpecific(
    hLine: u32,
    dwAddressID: u32,
    dwAgentExtensionIDIndex: u32,
    lpParams: ?*opaque{},
    dwSize: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineAnswer(
    hCall: u32,
    lpsUserUserInfo: ?*i8,
    dwSize: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineBlindTransfer(
    hCall: u32,
    lpszDestAddress: ?*i8,
    dwCountryCode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineBlindTransferA(
    hCall: u32,
    lpszDestAddress: ?*i8,
    dwCountryCode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineBlindTransferW(
    hCall: u32,
    lpszDestAddressW: ?*u16,
    dwCountryCode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineClose(
    hLine: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineCompleteCall(
    hCall: u32,
    lpdwCompletionID: ?*u32,
    dwCompletionMode: u32,
    dwMessageID: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineCompleteTransfer(
    hCall: u32,
    hConsultCall: u32,
    lphConfCall: ?*u32,
    dwTransferMode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineConfigDialog(
    dwDeviceID: u32,
    hwndOwner: HWND,
    lpszDeviceClass: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineConfigDialogA(
    dwDeviceID: u32,
    hwndOwner: HWND,
    lpszDeviceClass: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineConfigDialogW(
    dwDeviceID: u32,
    hwndOwner: HWND,
    lpszDeviceClass: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineConfigDialogEdit(
    dwDeviceID: u32,
    hwndOwner: HWND,
    lpszDeviceClass: ?*i8,
    lpDeviceConfigIn: ?*opaque{},
    dwSize: u32,
    lpDeviceConfigOut: ?*VARSTRING,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineConfigDialogEditA(
    dwDeviceID: u32,
    hwndOwner: HWND,
    lpszDeviceClass: ?*i8,
    lpDeviceConfigIn: ?*opaque{},
    dwSize: u32,
    lpDeviceConfigOut: ?*VARSTRING,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineConfigDialogEditW(
    dwDeviceID: u32,
    hwndOwner: HWND,
    lpszDeviceClass: ?*u16,
    lpDeviceConfigIn: ?*opaque{},
    dwSize: u32,
    lpDeviceConfigOut: ?*VARSTRING,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineConfigProvider(
    hwndOwner: HWND,
    dwPermanentProviderID: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineCreateAgentW(
    hLine: u32,
    lpszAgentID: ?*u16,
    lpszAgentPIN: ?*u16,
    lphAgent: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineCreateAgentA(
    hLine: u32,
    lpszAgentID: ?*i8,
    lpszAgentPIN: ?*i8,
    lphAgent: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineCreateAgentSessionW(
    hLine: u32,
    hAgent: u32,
    lpszAgentPIN: ?*u16,
    dwWorkingAddressID: u32,
    lpGroupID: ?*Guid,
    lphAgentSession: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineCreateAgentSessionA(
    hLine: u32,
    hAgent: u32,
    lpszAgentPIN: ?*i8,
    dwWorkingAddressID: u32,
    lpGroupID: ?*Guid,
    lphAgentSession: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineDeallocateCall(
    hCall: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineDevSpecific(
    hLine: u32,
    dwAddressID: u32,
    hCall: u32,
    lpParams: ?*opaque{},
    dwSize: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineDevSpecificFeature(
    hLine: u32,
    dwFeature: u32,
    lpParams: ?*opaque{},
    dwSize: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineDial(
    hCall: u32,
    lpszDestAddress: ?*i8,
    dwCountryCode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineDialA(
    hCall: u32,
    lpszDestAddress: ?*i8,
    dwCountryCode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineDialW(
    hCall: u32,
    lpszDestAddress: ?*u16,
    dwCountryCode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineDrop(
    hCall: u32,
    lpsUserUserInfo: ?*i8,
    dwSize: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineForward(
    hLine: u32,
    bAllAddresses: u32,
    dwAddressID: u32,
    lpForwardList: ?*LINEFORWARDLIST,
    dwNumRingsNoAnswer: u32,
    lphConsultCall: ?*u32,
    lpCallParams: ?*LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineForwardA(
    hLine: u32,
    bAllAddresses: u32,
    dwAddressID: u32,
    lpForwardList: ?*LINEFORWARDLIST,
    dwNumRingsNoAnswer: u32,
    lphConsultCall: ?*u32,
    lpCallParams: ?*LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineForwardW(
    hLine: u32,
    bAllAddresses: u32,
    dwAddressID: u32,
    lpForwardList: ?*LINEFORWARDLIST,
    dwNumRingsNoAnswer: u32,
    lphConsultCall: ?*u32,
    lpCallParams: ?*LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGatherDigits(
    hCall: u32,
    dwDigitModes: u32,
    lpsDigits: ?*i8,
    dwNumDigits: u32,
    lpszTerminationDigits: ?*i8,
    dwFirstDigitTimeout: u32,
    dwInterDigitTimeout: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGatherDigitsA(
    hCall: u32,
    dwDigitModes: u32,
    lpsDigits: ?*i8,
    dwNumDigits: u32,
    lpszTerminationDigits: ?*i8,
    dwFirstDigitTimeout: u32,
    dwInterDigitTimeout: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGatherDigitsW(
    hCall: u32,
    dwDigitModes: u32,
    lpsDigits: ?*u16,
    dwNumDigits: u32,
    lpszTerminationDigits: ?*u16,
    dwFirstDigitTimeout: u32,
    dwInterDigitTimeout: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGenerateDigits(
    hCall: u32,
    dwDigitMode: u32,
    lpszDigits: ?*i8,
    dwDuration: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGenerateDigitsA(
    hCall: u32,
    dwDigitMode: u32,
    lpszDigits: ?*i8,
    dwDuration: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGenerateDigitsW(
    hCall: u32,
    dwDigitMode: u32,
    lpszDigits: ?*u16,
    dwDuration: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGenerateTone(
    hCall: u32,
    dwToneMode: u32,
    dwDuration: u32,
    dwNumTones: u32,
    lpTones: ?*LINEGENERATETONE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetAddressCaps(
    hLineApp: u32,
    dwDeviceID: u32,
    dwAddressID: u32,
    dwAPIVersion: u32,
    dwExtVersion: u32,
    lpAddressCaps: ?*LINEADDRESSCAPS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetAddressCapsA(
    hLineApp: u32,
    dwDeviceID: u32,
    dwAddressID: u32,
    dwAPIVersion: u32,
    dwExtVersion: u32,
    lpAddressCaps: ?*LINEADDRESSCAPS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetAddressCapsW(
    hLineApp: u32,
    dwDeviceID: u32,
    dwAddressID: u32,
    dwAPIVersion: u32,
    dwExtVersion: u32,
    lpAddressCaps: ?*LINEADDRESSCAPS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetAddressID(
    hLine: u32,
    lpdwAddressID: ?*u32,
    dwAddressMode: u32,
    lpsAddress: ?*i8,
    dwSize: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetAddressIDA(
    hLine: u32,
    lpdwAddressID: ?*u32,
    dwAddressMode: u32,
    lpsAddress: ?*i8,
    dwSize: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetAddressIDW(
    hLine: u32,
    lpdwAddressID: ?*u32,
    dwAddressMode: u32,
    lpsAddress: ?*u16,
    dwSize: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetAddressStatus(
    hLine: u32,
    dwAddressID: u32,
    lpAddressStatus: ?*LINEADDRESSSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetAddressStatusA(
    hLine: u32,
    dwAddressID: u32,
    lpAddressStatus: ?*LINEADDRESSSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetAddressStatusW(
    hLine: u32,
    dwAddressID: u32,
    lpAddressStatus: ?*LINEADDRESSSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetAgentActivityListA(
    hLine: u32,
    dwAddressID: u32,
    lpAgentActivityList: ?*LINEAGENTACTIVITYLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetAgentActivityListW(
    hLine: u32,
    dwAddressID: u32,
    lpAgentActivityList: ?*LINEAGENTACTIVITYLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetAgentCapsA(
    hLineApp: u32,
    dwDeviceID: u32,
    dwAddressID: u32,
    dwAppAPIVersion: u32,
    lpAgentCaps: ?*LINEAGENTCAPS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetAgentCapsW(
    hLineApp: u32,
    dwDeviceID: u32,
    dwAddressID: u32,
    dwAppAPIVersion: u32,
    lpAgentCaps: ?*LINEAGENTCAPS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetAgentGroupListA(
    hLine: u32,
    dwAddressID: u32,
    lpAgentGroupList: ?*LINEAGENTGROUPLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetAgentGroupListW(
    hLine: u32,
    dwAddressID: u32,
    lpAgentGroupList: ?*LINEAGENTGROUPLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetAgentInfo(
    hLine: u32,
    hAgent: u32,
    lpAgentInfo: ?*LINEAGENTINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetAgentSessionInfo(
    hLine: u32,
    hAgentSession: u32,
    lpAgentSessionInfo: ?*LINEAGENTSESSIONINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetAgentSessionList(
    hLine: u32,
    hAgent: u32,
    lpAgentSessionList: ?*LINEAGENTSESSIONLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetAgentStatusA(
    hLine: u32,
    dwAddressID: u32,
    lpAgentStatus: ?*LINEAGENTSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetAgentStatusW(
    hLine: u32,
    dwAddressID: u32,
    lpAgentStatus: ?*LINEAGENTSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetAppPriority(
    lpszAppFilename: ?*i8,
    dwMediaMode: u32,
    lpExtensionID: ?*LINEEXTENSIONID,
    dwRequestMode: u32,
    lpExtensionName: ?*VARSTRING,
    lpdwPriority: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetAppPriorityA(
    lpszAppFilename: ?*i8,
    dwMediaMode: u32,
    lpExtensionID: ?*LINEEXTENSIONID,
    dwRequestMode: u32,
    lpExtensionName: ?*VARSTRING,
    lpdwPriority: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetAppPriorityW(
    lpszAppFilename: ?*u16,
    dwMediaMode: u32,
    lpExtensionID: ?*LINEEXTENSIONID,
    dwRequestMode: u32,
    lpExtensionName: ?*VARSTRING,
    lpdwPriority: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetCallInfo(
    hCall: u32,
    lpCallInfo: ?*LINECALLINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetCallInfoA(
    hCall: u32,
    lpCallInfo: ?*LINECALLINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetCallInfoW(
    hCall: u32,
    lpCallInfo: ?*LINECALLINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetCallStatus(
    hCall: u32,
    lpCallStatus: ?*LINECALLSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetConfRelatedCalls(
    hCall: u32,
    lpCallList: ?*LINECALLLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetCountry(
    dwCountryID: u32,
    dwAPIVersion: u32,
    lpLineCountryList: ?*LINECOUNTRYLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetCountryA(
    dwCountryID: u32,
    dwAPIVersion: u32,
    lpLineCountryList: ?*LINECOUNTRYLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetCountryW(
    dwCountryID: u32,
    dwAPIVersion: u32,
    lpLineCountryList: ?*LINECOUNTRYLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetDevCaps(
    hLineApp: u32,
    dwDeviceID: u32,
    dwAPIVersion: u32,
    dwExtVersion: u32,
    lpLineDevCaps: ?*LINEDEVCAPS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetDevCapsA(
    hLineApp: u32,
    dwDeviceID: u32,
    dwAPIVersion: u32,
    dwExtVersion: u32,
    lpLineDevCaps: ?*LINEDEVCAPS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetDevCapsW(
    hLineApp: u32,
    dwDeviceID: u32,
    dwAPIVersion: u32,
    dwExtVersion: u32,
    lpLineDevCaps: ?*LINEDEVCAPS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetDevConfig(
    dwDeviceID: u32,
    lpDeviceConfig: ?*VARSTRING,
    lpszDeviceClass: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetDevConfigA(
    dwDeviceID: u32,
    lpDeviceConfig: ?*VARSTRING,
    lpszDeviceClass: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetDevConfigW(
    dwDeviceID: u32,
    lpDeviceConfig: ?*VARSTRING,
    lpszDeviceClass: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetGroupListA(
    hLine: u32,
    lpGroupList: ?*LINEAGENTGROUPLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetGroupListW(
    hLine: u32,
    lpGroupList: ?*LINEAGENTGROUPLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetIcon(
    dwDeviceID: u32,
    lpszDeviceClass: ?*i8,
    lphIcon: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetIconA(
    dwDeviceID: u32,
    lpszDeviceClass: ?*i8,
    lphIcon: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetIconW(
    dwDeviceID: u32,
    lpszDeviceClass: ?*u16,
    lphIcon: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetID(
    hLine: u32,
    dwAddressID: u32,
    hCall: u32,
    dwSelect: u32,
    lpDeviceID: ?*VARSTRING,
    lpszDeviceClass: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetIDA(
    hLine: u32,
    dwAddressID: u32,
    hCall: u32,
    dwSelect: u32,
    lpDeviceID: ?*VARSTRING,
    lpszDeviceClass: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetIDW(
    hLine: u32,
    dwAddressID: u32,
    hCall: u32,
    dwSelect: u32,
    lpDeviceID: ?*VARSTRING,
    lpszDeviceClass: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetLineDevStatus(
    hLine: u32,
    lpLineDevStatus: ?*LINEDEVSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetLineDevStatusA(
    hLine: u32,
    lpLineDevStatus: ?*LINEDEVSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetLineDevStatusW(
    hLine: u32,
    lpLineDevStatus: ?*LINEDEVSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetMessage(
    hLineApp: u32,
    lpMessage: ?*LINEMESSAGE,
    dwTimeout: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetNewCalls(
    hLine: u32,
    dwAddressID: u32,
    dwSelect: u32,
    lpCallList: ?*LINECALLLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetNumRings(
    hLine: u32,
    dwAddressID: u32,
    lpdwNumRings: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetProviderList(
    dwAPIVersion: u32,
    lpProviderList: ?*LINEPROVIDERLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetProviderListA(
    dwAPIVersion: u32,
    lpProviderList: ?*LINEPROVIDERLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetProviderListW(
    dwAPIVersion: u32,
    lpProviderList: ?*LINEPROVIDERLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetProxyStatus(
    hLineApp: u32,
    dwDeviceID: u32,
    dwAppAPIVersion: u32,
    lpLineProxyReqestList: ?*LINEPROXYREQUESTLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetQueueInfo(
    hLine: u32,
    dwQueueID: u32,
    lpLineQueueInfo: ?*LINEQUEUEINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetQueueListA(
    hLine: u32,
    lpGroupID: ?*Guid,
    lpQueueList: ?*LINEQUEUELIST,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetQueueListW(
    hLine: u32,
    lpGroupID: ?*Guid,
    lpQueueList: ?*LINEQUEUELIST,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetRequest(
    hLineApp: u32,
    dwRequestMode: u32,
    lpRequestBuffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetRequestA(
    hLineApp: u32,
    dwRequestMode: u32,
    lpRequestBuffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetRequestW(
    hLineApp: u32,
    dwRequestMode: u32,
    lpRequestBuffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetStatusMessages(
    hLine: u32,
    lpdwLineStates: ?*u32,
    lpdwAddressStates: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetTranslateCaps(
    hLineApp: u32,
    dwAPIVersion: u32,
    lpTranslateCaps: ?*LINETRANSLATECAPS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetTranslateCapsA(
    hLineApp: u32,
    dwAPIVersion: u32,
    lpTranslateCaps: ?*LINETRANSLATECAPS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineGetTranslateCapsW(
    hLineApp: u32,
    dwAPIVersion: u32,
    lpTranslateCaps: ?*LINETRANSLATECAPS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineHandoff(
    hCall: u32,
    lpszFileName: ?*i8,
    dwMediaMode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineHandoffA(
    hCall: u32,
    lpszFileName: ?*i8,
    dwMediaMode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineHandoffW(
    hCall: u32,
    lpszFileName: ?*u16,
    dwMediaMode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineHold(
    hCall: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineInitialize(
    lphLineApp: ?*u32,
    hInstance: HINSTANCE,
    lpfnCallback: LINECALLBACK,
    lpszAppName: ?*i8,
    lpdwNumDevs: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineInitializeExA(
    lphLineApp: ?*u32,
    hInstance: HINSTANCE,
    lpfnCallback: LINECALLBACK,
    lpszFriendlyAppName: ?*i8,
    lpdwNumDevs: ?*u32,
    lpdwAPIVersion: ?*u32,
    lpLineInitializeExParams: ?*LINEINITIALIZEEXPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineInitializeExW(
    lphLineApp: ?*u32,
    hInstance: HINSTANCE,
    lpfnCallback: LINECALLBACK,
    lpszFriendlyAppName: ?*u16,
    lpdwNumDevs: ?*u32,
    lpdwAPIVersion: ?*u32,
    lpLineInitializeExParams: ?*LINEINITIALIZEEXPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineMakeCall(
    hLine: u32,
    lphCall: ?*u32,
    lpszDestAddress: ?*i8,
    dwCountryCode: u32,
    lpCallParams: ?*LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineMakeCallA(
    hLine: u32,
    lphCall: ?*u32,
    lpszDestAddress: ?*i8,
    dwCountryCode: u32,
    lpCallParams: ?*LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineMakeCallW(
    hLine: u32,
    lphCall: ?*u32,
    lpszDestAddress: ?*u16,
    dwCountryCode: u32,
    lpCallParams: ?*LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineMonitorDigits(
    hCall: u32,
    dwDigitModes: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineMonitorMedia(
    hCall: u32,
    dwMediaModes: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineMonitorTones(
    hCall: u32,
    lpToneList: ?*LINEMONITORTONE,
    dwNumEntries: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineNegotiateAPIVersion(
    hLineApp: u32,
    dwDeviceID: u32,
    dwAPILowVersion: u32,
    dwAPIHighVersion: u32,
    lpdwAPIVersion: ?*u32,
    lpExtensionID: ?*LINEEXTENSIONID,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineNegotiateExtVersion(
    hLineApp: u32,
    dwDeviceID: u32,
    dwAPIVersion: u32,
    dwExtLowVersion: u32,
    dwExtHighVersion: u32,
    lpdwExtVersion: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineOpen(
    hLineApp: u32,
    dwDeviceID: u32,
    lphLine: ?*u32,
    dwAPIVersion: u32,
    dwExtVersion: u32,
    dwCallbackInstance: ?*opaque{},
    dwPrivileges: u32,
    dwMediaModes: u32,
    lpCallParams: ?*LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineOpenA(
    hLineApp: u32,
    dwDeviceID: u32,
    lphLine: ?*u32,
    dwAPIVersion: u32,
    dwExtVersion: u32,
    dwCallbackInstance: ?*opaque{},
    dwPrivileges: u32,
    dwMediaModes: u32,
    lpCallParams: ?*LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineOpenW(
    hLineApp: u32,
    dwDeviceID: u32,
    lphLine: ?*u32,
    dwAPIVersion: u32,
    dwExtVersion: u32,
    dwCallbackInstance: ?*opaque{},
    dwPrivileges: u32,
    dwMediaModes: u32,
    lpCallParams: ?*LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn linePark(
    hCall: u32,
    dwParkMode: u32,
    lpszDirAddress: ?*i8,
    lpNonDirAddress: ?*VARSTRING,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineParkA(
    hCall: u32,
    dwParkMode: u32,
    lpszDirAddress: ?*i8,
    lpNonDirAddress: ?*VARSTRING,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineParkW(
    hCall: u32,
    dwParkMode: u32,
    lpszDirAddress: ?*u16,
    lpNonDirAddress: ?*VARSTRING,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn linePickup(
    hLine: u32,
    dwAddressID: u32,
    lphCall: ?*u32,
    lpszDestAddress: ?*i8,
    lpszGroupID: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn linePickupA(
    hLine: u32,
    dwAddressID: u32,
    lphCall: ?*u32,
    lpszDestAddress: ?*i8,
    lpszGroupID: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn linePickupW(
    hLine: u32,
    dwAddressID: u32,
    lphCall: ?*u32,
    lpszDestAddress: ?*u16,
    lpszGroupID: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn linePrepareAddToConference(
    hConfCall: u32,
    lphConsultCall: ?*u32,
    lpCallParams: ?*LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn linePrepareAddToConferenceA(
    hConfCall: u32,
    lphConsultCall: ?*u32,
    lpCallParams: ?*LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn linePrepareAddToConferenceW(
    hConfCall: u32,
    lphConsultCall: ?*u32,
    lpCallParams: ?*LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineProxyMessage(
    hLine: u32,
    hCall: u32,
    dwMsg: u32,
    dwParam1: u32,
    dwParam2: u32,
    dwParam3: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineProxyResponse(
    hLine: u32,
    lpProxyRequest: ?*LINEPROXYREQUEST,
    dwResult: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineRedirect(
    hCall: u32,
    lpszDestAddress: ?*i8,
    dwCountryCode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineRedirectA(
    hCall: u32,
    lpszDestAddress: ?*i8,
    dwCountryCode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineRedirectW(
    hCall: u32,
    lpszDestAddress: ?*u16,
    dwCountryCode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineRegisterRequestRecipient(
    hLineApp: u32,
    dwRegistrationInstance: u32,
    dwRequestMode: u32,
    bEnable: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineReleaseUserUserInfo(
    hCall: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineRemoveFromConference(
    hCall: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineRemoveProvider(
    dwPermanentProviderID: u32,
    hwndOwner: HWND,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSecureCall(
    hCall: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSendUserUserInfo(
    hCall: u32,
    lpsUserUserInfo: ?*i8,
    dwSize: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetAgentActivity(
    hLine: u32,
    dwAddressID: u32,
    dwActivityID: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetAgentGroup(
    hLine: u32,
    dwAddressID: u32,
    lpAgentGroupList: ?*LINEAGENTGROUPLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetAgentMeasurementPeriod(
    hLine: u32,
    hAgent: u32,
    dwMeasurementPeriod: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetAgentSessionState(
    hLine: u32,
    hAgentSession: u32,
    dwAgentSessionState: u32,
    dwNextAgentSessionState: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetAgentStateEx(
    hLine: u32,
    hAgent: u32,
    dwAgentState: u32,
    dwNextAgentState: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetAgentState(
    hLine: u32,
    dwAddressID: u32,
    dwAgentState: u32,
    dwNextAgentState: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetAppPriority(
    lpszAppFilename: ?*i8,
    dwMediaMode: u32,
    lpExtensionID: ?*LINEEXTENSIONID,
    dwRequestMode: u32,
    lpszExtensionName: ?*i8,
    dwPriority: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetAppPriorityA(
    lpszAppFilename: ?*i8,
    dwMediaMode: u32,
    lpExtensionID: ?*LINEEXTENSIONID,
    dwRequestMode: u32,
    lpszExtensionName: ?*i8,
    dwPriority: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetAppPriorityW(
    lpszAppFilename: ?*u16,
    dwMediaMode: u32,
    lpExtensionID: ?*LINEEXTENSIONID,
    dwRequestMode: u32,
    lpszExtensionName: ?*u16,
    dwPriority: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetAppSpecific(
    hCall: u32,
    dwAppSpecific: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetCallData(
    hCall: u32,
    lpCallData: ?*opaque{},
    dwSize: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetCallParams(
    hCall: u32,
    dwBearerMode: u32,
    dwMinRate: u32,
    dwMaxRate: u32,
    lpDialParams: ?*LINEDIALPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetCallPrivilege(
    hCall: u32,
    dwCallPrivilege: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetCallQualityOfService(
    hCall: u32,
    lpSendingFlowspec: ?*opaque{},
    dwSendingFlowspecSize: u32,
    lpReceivingFlowspec: ?*opaque{},
    dwReceivingFlowspecSize: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetCallTreatment(
    hCall: u32,
    dwTreatment: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetCurrentLocation(
    hLineApp: u32,
    dwLocation: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetDevConfig(
    dwDeviceID: u32,
    lpDeviceConfig: ?*opaque{},
    dwSize: u32,
    lpszDeviceClass: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetDevConfigA(
    dwDeviceID: u32,
    lpDeviceConfig: ?*opaque{},
    dwSize: u32,
    lpszDeviceClass: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetDevConfigW(
    dwDeviceID: u32,
    lpDeviceConfig: ?*opaque{},
    dwSize: u32,
    lpszDeviceClass: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetLineDevStatus(
    hLine: u32,
    dwStatusToChange: u32,
    fStatus: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetMediaControl(
    hLine: u32,
    dwAddressID: u32,
    hCall: u32,
    dwSelect: u32,
    lpDigitList: ?*LINEMEDIACONTROLDIGIT,
    dwDigitNumEntries: u32,
    lpMediaList: ?*LINEMEDIACONTROLMEDIA,
    dwMediaNumEntries: u32,
    lpToneList: ?*LINEMEDIACONTROLTONE,
    dwToneNumEntries: u32,
    lpCallStateList: ?*LINEMEDIACONTROLCALLSTATE,
    dwCallStateNumEntries: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetMediaMode(
    hCall: u32,
    dwMediaModes: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetQueueMeasurementPeriod(
    hLine: u32,
    dwQueueID: u32,
    dwMeasurementPeriod: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetNumRings(
    hLine: u32,
    dwAddressID: u32,
    dwNumRings: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetStatusMessages(
    hLine: u32,
    dwLineStates: u32,
    dwAddressStates: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetTerminal(
    hLine: u32,
    dwAddressID: u32,
    hCall: u32,
    dwSelect: u32,
    dwTerminalModes: u32,
    dwTerminalID: u32,
    bEnable: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetTollList(
    hLineApp: u32,
    dwDeviceID: u32,
    lpszAddressIn: ?*i8,
    dwTollListOption: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetTollListA(
    hLineApp: u32,
    dwDeviceID: u32,
    lpszAddressIn: ?*i8,
    dwTollListOption: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetTollListW(
    hLineApp: u32,
    dwDeviceID: u32,
    lpszAddressInW: ?*u16,
    dwTollListOption: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetupConference(
    hCall: u32,
    hLine: u32,
    lphConfCall: ?*u32,
    lphConsultCall: ?*u32,
    dwNumParties: u32,
    lpCallParams: ?*LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetupConferenceA(
    hCall: u32,
    hLine: u32,
    lphConfCall: ?*u32,
    lphConsultCall: ?*u32,
    dwNumParties: u32,
    lpCallParams: ?*LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetupConferenceW(
    hCall: u32,
    hLine: u32,
    lphConfCall: ?*u32,
    lphConsultCall: ?*u32,
    dwNumParties: u32,
    lpCallParams: ?*LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetupTransfer(
    hCall: u32,
    lphConsultCall: ?*u32,
    lpCallParams: ?*LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetupTransferA(
    hCall: u32,
    lphConsultCall: ?*u32,
    lpCallParams: ?*LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSetupTransferW(
    hCall: u32,
    lphConsultCall: ?*u32,
    lpCallParams: ?*LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineShutdown(
    hLineApp: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineSwapHold(
    hActiveCall: u32,
    hHeldCall: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineTranslateAddress(
    hLineApp: u32,
    dwDeviceID: u32,
    dwAPIVersion: u32,
    lpszAddressIn: ?*i8,
    dwCard: u32,
    dwTranslateOptions: u32,
    lpTranslateOutput: ?*LINETRANSLATEOUTPUT,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineTranslateAddressA(
    hLineApp: u32,
    dwDeviceID: u32,
    dwAPIVersion: u32,
    lpszAddressIn: ?*i8,
    dwCard: u32,
    dwTranslateOptions: u32,
    lpTranslateOutput: ?*LINETRANSLATEOUTPUT,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineTranslateAddressW(
    hLineApp: u32,
    dwDeviceID: u32,
    dwAPIVersion: u32,
    lpszAddressIn: ?*u16,
    dwCard: u32,
    dwTranslateOptions: u32,
    lpTranslateOutput: ?*LINETRANSLATEOUTPUT,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineTranslateDialog(
    hLineApp: u32,
    dwDeviceID: u32,
    dwAPIVersion: u32,
    hwndOwner: HWND,
    lpszAddressIn: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineTranslateDialogA(
    hLineApp: u32,
    dwDeviceID: u32,
    dwAPIVersion: u32,
    hwndOwner: HWND,
    lpszAddressIn: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineTranslateDialogW(
    hLineApp: u32,
    dwDeviceID: u32,
    dwAPIVersion: u32,
    hwndOwner: HWND,
    lpszAddressIn: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineUncompleteCall(
    hLine: u32,
    dwCompletionID: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineUnhold(
    hCall: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineUnpark(
    hLine: u32,
    dwAddressID: u32,
    lphCall: ?*u32,
    lpszDestAddress: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineUnparkA(
    hLine: u32,
    dwAddressID: u32,
    lphCall: ?*u32,
    lpszDestAddress: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn lineUnparkW(
    hLine: u32,
    dwAddressID: u32,
    lphCall: ?*u32,
    lpszDestAddress: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneClose(
    hPhone: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneConfigDialog(
    dwDeviceID: u32,
    hwndOwner: HWND,
    lpszDeviceClass: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneConfigDialogA(
    dwDeviceID: u32,
    hwndOwner: HWND,
    lpszDeviceClass: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneConfigDialogW(
    dwDeviceID: u32,
    hwndOwner: HWND,
    lpszDeviceClass: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneDevSpecific(
    hPhone: u32,
    lpParams: ?*opaque{},
    dwSize: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneGetButtonInfo(
    hPhone: u32,
    dwButtonLampID: u32,
    lpButtonInfo: ?*PHONEBUTTONINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneGetButtonInfoA(
    hPhone: u32,
    dwButtonLampID: u32,
    lpButtonInfo: ?*PHONEBUTTONINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneGetButtonInfoW(
    hPhone: u32,
    dwButtonLampID: u32,
    lpButtonInfo: ?*PHONEBUTTONINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneGetData(
    hPhone: u32,
    dwDataID: u32,
    lpData: ?*opaque{},
    dwSize: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneGetDevCaps(
    hPhoneApp: u32,
    dwDeviceID: u32,
    dwAPIVersion: u32,
    dwExtVersion: u32,
    lpPhoneCaps: ?*PHONECAPS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneGetDevCapsA(
    hPhoneApp: u32,
    dwDeviceID: u32,
    dwAPIVersion: u32,
    dwExtVersion: u32,
    lpPhoneCaps: ?*PHONECAPS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneGetDevCapsW(
    hPhoneApp: u32,
    dwDeviceID: u32,
    dwAPIVersion: u32,
    dwExtVersion: u32,
    lpPhoneCaps: ?*PHONECAPS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneGetDisplay(
    hPhone: u32,
    lpDisplay: ?*VARSTRING,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneGetGain(
    hPhone: u32,
    dwHookSwitchDev: u32,
    lpdwGain: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneGetHookSwitch(
    hPhone: u32,
    lpdwHookSwitchDevs: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneGetIcon(
    dwDeviceID: u32,
    lpszDeviceClass: ?*i8,
    lphIcon: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneGetIconA(
    dwDeviceID: u32,
    lpszDeviceClass: ?*i8,
    lphIcon: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneGetIconW(
    dwDeviceID: u32,
    lpszDeviceClass: ?*u16,
    lphIcon: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneGetID(
    hPhone: u32,
    lpDeviceID: ?*VARSTRING,
    lpszDeviceClass: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneGetIDA(
    hPhone: u32,
    lpDeviceID: ?*VARSTRING,
    lpszDeviceClass: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneGetIDW(
    hPhone: u32,
    lpDeviceID: ?*VARSTRING,
    lpszDeviceClass: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneGetLamp(
    hPhone: u32,
    dwButtonLampID: u32,
    lpdwLampMode: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneGetMessage(
    hPhoneApp: u32,
    lpMessage: ?*PHONEMESSAGE,
    dwTimeout: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneGetRing(
    hPhone: u32,
    lpdwRingMode: ?*u32,
    lpdwVolume: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneGetStatus(
    hPhone: u32,
    lpPhoneStatus: ?*PHONESTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneGetStatusA(
    hPhone: u32,
    lpPhoneStatus: ?*PHONESTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneGetStatusW(
    hPhone: u32,
    lpPhoneStatus: ?*PHONESTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneGetStatusMessages(
    hPhone: u32,
    lpdwPhoneStates: ?*u32,
    lpdwButtonModes: ?*u32,
    lpdwButtonStates: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneGetVolume(
    hPhone: u32,
    dwHookSwitchDev: u32,
    lpdwVolume: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneInitialize(
    lphPhoneApp: ?*u32,
    hInstance: HINSTANCE,
    lpfnCallback: PHONECALLBACK,
    lpszAppName: ?*i8,
    lpdwNumDevs: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneInitializeExA(
    lphPhoneApp: ?*u32,
    hInstance: HINSTANCE,
    lpfnCallback: PHONECALLBACK,
    lpszFriendlyAppName: ?*i8,
    lpdwNumDevs: ?*u32,
    lpdwAPIVersion: ?*u32,
    lpPhoneInitializeExParams: ?*PHONEINITIALIZEEXPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneInitializeExW(
    lphPhoneApp: ?*u32,
    hInstance: HINSTANCE,
    lpfnCallback: PHONECALLBACK,
    lpszFriendlyAppName: ?*u16,
    lpdwNumDevs: ?*u32,
    lpdwAPIVersion: ?*u32,
    lpPhoneInitializeExParams: ?*PHONEINITIALIZEEXPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneNegotiateAPIVersion(
    hPhoneApp: u32,
    dwDeviceID: u32,
    dwAPILowVersion: u32,
    dwAPIHighVersion: u32,
    lpdwAPIVersion: ?*u32,
    lpExtensionID: ?*PHONEEXTENSIONID,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneNegotiateExtVersion(
    hPhoneApp: u32,
    dwDeviceID: u32,
    dwAPIVersion: u32,
    dwExtLowVersion: u32,
    dwExtHighVersion: u32,
    lpdwExtVersion: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneOpen(
    hPhoneApp: u32,
    dwDeviceID: u32,
    lphPhone: ?*u32,
    dwAPIVersion: u32,
    dwExtVersion: u32,
    dwCallbackInstance: ?*opaque{},
    dwPrivilege: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneSetButtonInfo(
    hPhone: u32,
    dwButtonLampID: u32,
    lpButtonInfo: ?*PHONEBUTTONINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneSetButtonInfoA(
    hPhone: u32,
    dwButtonLampID: u32,
    lpButtonInfo: ?*PHONEBUTTONINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneSetButtonInfoW(
    hPhone: u32,
    dwButtonLampID: u32,
    lpButtonInfo: ?*PHONEBUTTONINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneSetData(
    hPhone: u32,
    dwDataID: u32,
    lpData: ?*opaque{},
    dwSize: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneSetDisplay(
    hPhone: u32,
    dwRow: u32,
    dwColumn: u32,
    lpsDisplay: ?*i8,
    dwSize: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneSetGain(
    hPhone: u32,
    dwHookSwitchDev: u32,
    dwGain: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneSetHookSwitch(
    hPhone: u32,
    dwHookSwitchDevs: u32,
    dwHookSwitchMode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneSetLamp(
    hPhone: u32,
    dwButtonLampID: u32,
    dwLampMode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneSetRing(
    hPhone: u32,
    dwRingMode: u32,
    dwVolume: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneSetStatusMessages(
    hPhone: u32,
    dwPhoneStates: u32,
    dwButtonModes: u32,
    dwButtonStates: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneSetVolume(
    hPhone: u32,
    dwHookSwitchDev: u32,
    dwVolume: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn phoneShutdown(
    hPhoneApp: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn tapiGetLocationInfo(
    lpszCountryCode: ?*i8,
    lpszCityCode: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn tapiGetLocationInfoA(
    lpszCountryCode: ?*i8,
    lpszCityCode: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn tapiGetLocationInfoW(
    lpszCountryCodeW: ?*u16,
    lpszCityCodeW: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn tapiRequestDrop(
    hwnd: HWND,
    wRequestID: WPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn tapiRequestMakeCall(
    lpszDestAddress: ?*i8,
    lpszAppName: ?*i8,
    lpszCalledParty: ?*i8,
    lpszComment: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn tapiRequestMakeCallA(
    lpszDestAddress: ?*i8,
    lpszAppName: ?*i8,
    lpszCalledParty: ?*i8,
    lpszComment: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn tapiRequestMakeCallW(
    lpszDestAddress: ?*u16,
    lpszAppName: ?*u16,
    lpszCalledParty: ?*u16,
    lpszComment: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn tapiRequestMediaCall(
    hwnd: HWND,
    wRequestID: WPARAM,
    lpszDeviceClass: ?*i8,
    lpDeviceID: ?*i8,
    dwSize: u32,
    dwSecure: u32,
    lpszDestAddress: ?*i8,
    lpszAppName: ?*i8,
    lpszCalledParty: ?*i8,
    lpszComment: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn tapiRequestMediaCallA(
    hwnd: HWND,
    wRequestID: WPARAM,
    lpszDeviceClass: ?*i8,
    lpDeviceID: ?*i8,
    dwSize: u32,
    dwSecure: u32,
    lpszDestAddress: ?*i8,
    lpszAppName: ?*i8,
    lpszCalledParty: ?*i8,
    lpszComment: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "TAPI32" fn tapiRequestMediaCallW(
    hwnd: HWND,
    wRequestID: WPARAM,
    lpszDeviceClass: ?*u16,
    lpDeviceID: ?*u16,
    dwSize: u32,
    dwSecure: u32,
    lpszDestAddress: ?*u16,
    lpszAppName: ?*u16,
    lpszCalledParty: ?*u16,
    lpszComment: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const lineCreateAgent = lineCreateAgentA;
        pub const lineCreateAgentSession = lineCreateAgentSessionA;
        pub const lineGetAgentActivityList = lineGetAgentActivityListA;
        pub const lineGetAgentCaps = lineGetAgentCapsA;
        pub const lineGetAgentGroupList = lineGetAgentGroupListA;
        pub const lineGetAgentStatus = lineGetAgentStatusA;
        pub const lineGetGroupList = lineGetGroupListA;
        pub const lineGetQueueList = lineGetQueueListA;
        pub const lineInitializeEx = lineInitializeExA;
        pub const phoneInitializeEx = phoneInitializeExA;
    },
    .wide => struct {
        pub const lineCreateAgent = lineCreateAgentW;
        pub const lineCreateAgentSession = lineCreateAgentSessionW;
        pub const lineGetAgentActivityList = lineGetAgentActivityListW;
        pub const lineGetAgentCaps = lineGetAgentCapsW;
        pub const lineGetAgentGroupList = lineGetAgentGroupListW;
        pub const lineGetAgentStatus = lineGetAgentStatusW;
        pub const lineGetGroupList = lineGetGroupListW;
        pub const lineGetQueueList = lineGetQueueListW;
        pub const lineInitializeEx = lineInitializeExW;
        pub const phoneInitializeEx = phoneInitializeExW;
    },
    else => if (@import("builtin").is_test) struct {
        pub const lineCreateAgent = *opaque{};
        pub const lineCreateAgentSession = *opaque{};
        pub const lineGetAgentActivityList = *opaque{};
        pub const lineGetAgentCaps = *opaque{};
        pub const lineGetAgentGroupList = *opaque{};
        pub const lineGetAgentStatus = *opaque{};
        pub const lineGetGroupList = *opaque{};
        pub const lineGetQueueList = *opaque{};
        pub const lineInitializeEx = *opaque{};
        pub const phoneInitializeEx = *opaque{};
    } else struct {
        pub const lineCreateAgent = @compileError("'lineCreateAgent' requires that UNICODE be set to true or false in the root module");
        pub const lineCreateAgentSession = @compileError("'lineCreateAgentSession' requires that UNICODE be set to true or false in the root module");
        pub const lineGetAgentActivityList = @compileError("'lineGetAgentActivityList' requires that UNICODE be set to true or false in the root module");
        pub const lineGetAgentCaps = @compileError("'lineGetAgentCaps' requires that UNICODE be set to true or false in the root module");
        pub const lineGetAgentGroupList = @compileError("'lineGetAgentGroupList' requires that UNICODE be set to true or false in the root module");
        pub const lineGetAgentStatus = @compileError("'lineGetAgentStatus' requires that UNICODE be set to true or false in the root module");
        pub const lineGetGroupList = @compileError("'lineGetGroupList' requires that UNICODE be set to true or false in the root module");
        pub const lineGetQueueList = @compileError("'lineGetQueueList' requires that UNICODE be set to true or false in the root module");
        pub const lineInitializeEx = @compileError("'lineInitializeEx' requires that UNICODE be set to true or false in the root module");
        pub const phoneInitializeEx = @compileError("'phoneInitializeEx' requires that UNICODE be set to true or false in the root module");
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const HRESULT = @import("com.zig").HRESULT;
const IDispatch = @import("automation.zig").IDispatch;
const HWND = @import("windowsandmessaging.zig").HWND;
const HINSTANCE = @import("systemservices.zig").HINSTANCE;
const WPARAM = @import("windowsandmessaging.zig").WPARAM;

test "" {
    const constant_export_count = 0;
    const type_export_count = 244;
    const func_count = 249;
    const unicode_alias_count = 10;
    const type_import_count = 6;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
