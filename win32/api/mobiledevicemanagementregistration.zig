//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: MANAGEMENT_SERVICE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MANAGEMENT_SERVICE_INFO = extern struct {
    pszMDMServiceUri: ?*u16,
    pszAuthenticationUri: ?*u16,
};
// --------------------------------------------------------
// Type: MANAGEMENT_REGISTRATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MANAGEMENT_REGISTRATION_INFO = extern struct {
    fDeviceRegisteredWithManagement: BOOL,
    dwDeviceRegistionKind: u32,
    pszUPN: ?*u16,
    pszMDMServiceUri: ?*u16,
};
// --------------------------------------------------------
// Type: REGISTRATION_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const REGISTRATION_INFORMATION_CLASS = *opaque{
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "MDMRegistration" fn GetDeviceRegistrationInfo(
    DeviceInformationClass: REGISTRATION_INFORMATION_CLASS,
    ppDeviceRegistrationInfo: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "MDMRegistration" fn IsDeviceRegisteredWithManagement(
    pfIsDeviceRegisteredWithManagement: ?*i32,
    cchUPN: u32,
    pszUPN: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "MDMRegistration" fn IsManagementRegistrationAllowed(
    pfIsManagementRegistrationAllowed: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "MDMRegistration" fn IsMdmUxWithoutAadAllowed(
    isEnrollmentAllowed: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "MDMRegistration" fn SetManagedExternally(
    IsManagedExternally: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "MDMRegistration" fn DiscoverManagementService(
    pszUPN: ?*u16,
    ppMgmtInfo: ?*?*MANAGEMENT_SERVICE_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "MDMRegistration" fn RegisterDeviceWithManagementUsingAADCredentials(
    UserToken: HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "MDMRegistration" fn RegisterDeviceWithManagementUsingAADDeviceCredentials(
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "MDMRegistration" fn RegisterDeviceWithManagement(
    pszUPN: ?*u16,
    ppszMDMServiceUri: ?*u16,
    ppzsAccessToken: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "MDMRegistration" fn UnregisterDeviceWithManagement(
    enrollmentID: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "MDMRegistration" fn GetManagementAppHyperlink(
    cchHyperlink: u32,
    pszHyperlink: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "MDMRegistration" fn DiscoverManagementServiceEx(
    pszUPN: ?*u16,
    pszDiscoveryServiceCandidate: ?*u16,
    ppMgmtInfo: ?*?*MANAGEMENT_SERVICE_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const BOOL = @import("systemservices.zig").BOOL;
const HRESULT = @import("com.zig").HRESULT;
const HANDLE = @import("systemservices.zig").HANDLE;

test "" {
    const constant_export_count = 0;
    const type_export_count = 3;
    const func_count = 12;
    const unicode_alias_count = 0;
    const type_import_count = 3;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
