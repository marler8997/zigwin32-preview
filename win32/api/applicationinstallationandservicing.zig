//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: ACTIVATION_CONTEXT_QUERY_INDEX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTIVATION_CONTEXT_QUERY_INDEX = extern struct {
    ulAssemblyIndex: u32,
    ulFileIndexInAssembly: u32,
};
// --------------------------------------------------------
// Type: ASSEMBLY_FILE_DETAILED_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ASSEMBLY_FILE_DETAILED_INFORMATION = extern struct {
    ulFlags: u32,
    ulFilenameLength: u32,
    ulPathLength: u32,
    lpFileName: ?*u16,
    lpFilePath: ?*u16,
};
// --------------------------------------------------------
// Type: ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = extern struct {
    ulFlags: u32,
    ulEncodedAssemblyIdentityLength: u32,
    ulManifestPathType: u32,
    ulManifestPathLength: u32,
    liManifestLastWriteTime: LARGE_INTEGER,
    ulPolicyPathType: u32,
    ulPolicyPathLength: u32,
    liPolicyLastWriteTime: LARGE_INTEGER,
    ulMetadataSatelliteRosterIndex: u32,
    ulManifestVersionMajor: u32,
    ulManifestVersionMinor: u32,
    ulPolicyVersionMajor: u32,
    ulPolicyVersionMinor: u32,
    ulAssemblyDirectoryNameLength: u32,
    lpAssemblyEncodedAssemblyIdentity: ?*u16,
    lpAssemblyManifestPath: ?*u16,
    lpAssemblyPolicyPath: ?*u16,
    lpAssemblyDirectoryName: ?*u16,
    ulFileCount: u32,
};
// --------------------------------------------------------
// Type: ACTCTX_REQUESTED_RUN_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ACTCTX_REQUESTED_RUN_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = extern struct {
    ulFlags: u32,
    RunLevel: ACTCTX_REQUESTED_RUN_LEVEL,
    UiAccess: u32,
};
// --------------------------------------------------------
// Type: ACTCTX_COMPATIBILITY_ELEMENT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ACTCTX_COMPATIBILITY_ELEMENT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: COMPATIBILITY_CONTEXT_ELEMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COMPATIBILITY_CONTEXT_ELEMENT = extern struct {
    Id: Guid,
    Type: ACTCTX_COMPATIBILITY_ELEMENT_TYPE,
    MaxVersionTested: u64,
};
// --------------------------------------------------------
// Type: ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = extern struct {
    ElementCount: u32,
    Elements: COMPATIBILITY_CONTEXT_ELEMENT,
};
// --------------------------------------------------------
// Type: ACTIVATION_CONTEXT_DETAILED_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTIVATION_CONTEXT_DETAILED_INFORMATION = extern struct {
    dwFlags: u32,
    ulFormatVersion: u32,
    ulAssemblyCount: u32,
    ulRootManifestPathType: u32,
    ulRootManifestPathChars: u32,
    ulRootConfigurationPathType: u32,
    ulRootConfigurationPathChars: u32,
    ulAppDirPathType: u32,
    ulAppDirPathChars: u32,
    lpRootManifestPath: ?*u16,
    lpRootConfigurationPath: ?*u16,
    lpAppDirPath: ?*u16,
};
// --------------------------------------------------------
// Type: RESULTTYPES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RESULTTYPES = *opaque{
};
// --------------------------------------------------------
// Type: STATUSTYPES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STATUSTYPES = *opaque{
};
// --------------------------------------------------------
// Type: LPDISPLAYVAL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDISPLAYVAL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPEVALCOMCALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPEVALCOMCALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: IValidate
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IValidate = *opaque{
    // TODO: Method 'OpenDatabase'
    // TODO: Method 'OpenCUB'
    // TODO: Method 'CloseDatabase'
    // TODO: Method 'CloseCUB'
    // TODO: Method 'SetDisplay'
    // TODO: Method 'SetStatus'
    // TODO: Method 'Validate'
};
// --------------------------------------------------------
// Type: MsmMerge
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MsmMerge = opaque {
};
// --------------------------------------------------------
// Type: msmErrorType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const msmErrorType = *opaque{
};
// --------------------------------------------------------
// Type: IEnumMsmString
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumMsmString = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IMsmStrings
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMsmStrings = *opaque{
    // TODO: Method 'get_Item'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
};
// --------------------------------------------------------
// Type: IMsmError
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMsmError = *opaque{
    // TODO: Method 'get_Type'
    // TODO: Method 'get_Path'
    // TODO: Method 'get_Language'
    // TODO: Method 'get_DatabaseTable'
    // TODO: Method 'get_DatabaseKeys'
    // TODO: Method 'get_ModuleTable'
    // TODO: Method 'get_ModuleKeys'
};
// --------------------------------------------------------
// Type: IEnumMsmError
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumMsmError = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IMsmErrors
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMsmErrors = *opaque{
    // TODO: Method 'get_Item'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
};
// --------------------------------------------------------
// Type: IMsmDependency
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMsmDependency = *opaque{
    // TODO: Method 'get_Module'
    // TODO: Method 'get_Language'
    // TODO: Method 'get_Version'
};
// --------------------------------------------------------
// Type: IEnumMsmDependency
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumMsmDependency = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IMsmDependencies
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMsmDependencies = *opaque{
    // TODO: Method 'get_Item'
    // TODO: Method 'get_Count'
    // TODO: Method 'get__NewEnum'
};
// --------------------------------------------------------
// Type: IMsmMerge
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMsmMerge = *opaque{
    // TODO: Method 'OpenDatabase'
    // TODO: Method 'OpenModule'
    // TODO: Method 'CloseDatabase'
    // TODO: Method 'CloseModule'
    // TODO: Method 'OpenLog'
    // TODO: Method 'CloseLog'
    // TODO: Method 'Log'
    // TODO: Method 'get_Errors'
    // TODO: Method 'get_Dependencies'
    // TODO: Method 'Merge'
    // TODO: Method 'Connect'
    // TODO: Method 'ExtractCAB'
    // TODO: Method 'ExtractFiles'
};
// --------------------------------------------------------
// Type: IMsmGetFiles
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMsmGetFiles = *opaque{
    // TODO: Method 'get_ModuleFiles'
};
// --------------------------------------------------------
// Type: PMSIHANDLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PMSIHANDLE = extern struct {
    m_h: u32,
};
// --------------------------------------------------------
// Type: INSTALLMESSAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const INSTALLMESSAGE = *opaque{
};
// --------------------------------------------------------
// Type: INSTALLUI_HANDLERA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const INSTALLUI_HANDLERA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: INSTALLUI_HANDLERW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const INSTALLUI_HANDLERW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: INSTALLUI_HANDLER_RECORD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const INSTALLUI_HANDLER_RECORD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PINSTALLUI_HANDLER_RECORD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PINSTALLUI_HANDLER_RECORD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: INSTALLUILEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const INSTALLUILEVEL = *opaque{
};
// --------------------------------------------------------
// Type: INSTALLSTATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const INSTALLSTATE = *opaque{
};
// --------------------------------------------------------
// Type: USERINFOSTATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const USERINFOSTATE = *opaque{
};
// --------------------------------------------------------
// Type: INSTALLLEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const INSTALLLEVEL = *opaque{
};
// --------------------------------------------------------
// Type: REINSTALLMODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const REINSTALLMODE = *opaque{
};
// --------------------------------------------------------
// Type: tagINSTALLOGMODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const tagINSTALLOGMODE = *opaque{
};
// --------------------------------------------------------
// Type: INSTALLLOGATTRIBUTES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const INSTALLLOGATTRIBUTES = *opaque{
};
// --------------------------------------------------------
// Type: INSTALLFEATUREATTRIBUTE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const INSTALLFEATUREATTRIBUTE = *opaque{
};
// --------------------------------------------------------
// Type: INSTALLMODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const INSTALLMODE = *opaque{
};
// --------------------------------------------------------
// Type: MSIPATCHSTATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSIPATCHSTATE = *opaque{
};
// --------------------------------------------------------
// Type: MSIINSTALLCONTEXT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSIINSTALLCONTEXT = *opaque{
};
// --------------------------------------------------------
// Type: MSIPATCHDATATYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSIPATCHDATATYPE = *opaque{
};
// --------------------------------------------------------
// Type: MSIPATCHSEQUENCEINFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSIPATCHSEQUENCEINFOA = extern struct {
    szPatchData: ?*i8,
    ePatchDataType: MSIPATCHDATATYPE,
    dwOrder: u32,
    uStatus: u32,
};
// --------------------------------------------------------
// Type: MSIPATCHSEQUENCEINFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSIPATCHSEQUENCEINFOW = extern struct {
    szPatchData: ?*u16,
    ePatchDataType: MSIPATCHDATATYPE,
    dwOrder: u32,
    uStatus: u32,
};
// --------------------------------------------------------
// Type: SCRIPTFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SCRIPTFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: ADVERTISEFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ADVERTISEFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: INSTALLTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const INSTALLTYPE = *opaque{
};
// --------------------------------------------------------
// Type: MSIFILEHASHINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSIFILEHASHINFO = extern struct {
    dwFileHashInfoSize: u32,
    dwData: ?[*]u32,
};
// --------------------------------------------------------
// Type: MSIARCHITECTUREFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSIARCHITECTUREFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: MSIOPENPACKAGEFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSIOPENPACKAGEFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: MSIADVERTISEOPTIONFLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSIADVERTISEOPTIONFLAGS = *opaque{
};
// --------------------------------------------------------
// Type: MSISOURCETYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSISOURCETYPE = *opaque{
};
// --------------------------------------------------------
// Type: MSICODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSICODE = *opaque{
};
// --------------------------------------------------------
// Type: MSITRANSACTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSITRANSACTION = *opaque{
};
// --------------------------------------------------------
// Type: MSITRANSACTIONSTATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSITRANSACTIONSTATE = *opaque{
};
// --------------------------------------------------------
// Type: MSIDBSTATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSIDBSTATE = *opaque{
};
// --------------------------------------------------------
// Type: MSIMODIFY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSIMODIFY = *opaque{
};
// --------------------------------------------------------
// Type: MSICOLINFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSICOLINFO = *opaque{
};
// --------------------------------------------------------
// Type: MSICONDITION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSICONDITION = *opaque{
};
// --------------------------------------------------------
// Type: MSICOSTTREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSICOSTTREE = *opaque{
};
// --------------------------------------------------------
// Type: MSIDBERROR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSIDBERROR = *opaque{
};
// --------------------------------------------------------
// Type: MSIRUNMODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSIRUNMODE = *opaque{
};
// --------------------------------------------------------
// Type: MSITRANSFORM_ERROR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSITRANSFORM_ERROR = *opaque{
};
// --------------------------------------------------------
// Type: MSITRANSFORM_VALIDATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MSITRANSFORM_VALIDATE = *opaque{
};
// --------------------------------------------------------
// Type: ASSEMBLY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ASSEMBLY_INFO = extern struct {
    cbAssemblyInfo: u32,
    dwAssemblyFlags: u32,
    uliAssemblySizeInKB: ULARGE_INTEGER,
    pszCurrentAssemblyPathBuf: ?*u16,
    cchBuf: u32,
};
// --------------------------------------------------------
// Type: FUSION_INSTALL_REFERENCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FUSION_INSTALL_REFERENCE = extern struct {
    cbSize: u32,
    dwFlags: u32,
    guidScheme: Guid,
    szIdentifier: ?*u16,
    szNonCannonicalData: ?*u16,
};
// --------------------------------------------------------
// Type: ASM_NAME
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ASM_NAME = *opaque{
};
// --------------------------------------------------------
// Type: __MIDL_IAssemblyName_0002
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const __MIDL_IAssemblyName_0002 = *opaque{
};
// --------------------------------------------------------
// Type: ASM_DISPLAY_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ASM_DISPLAY_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: ASM_CMP_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ASM_CMP_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IAssemblyName
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAssemblyName = *opaque{
    // TODO: Method 'SetProperty'
    // TODO: Method 'GetProperty'
    // TODO: Method 'Finalize'
    // TODO: Method 'GetDisplayName'
    // TODO: Method 'Reserved'
    // TODO: Method 'GetName'
    // TODO: Method 'GetVersion'
    // TODO: Method 'IsEqual'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IAssemblyCacheItem
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAssemblyCacheItem = *opaque{
    // TODO: Method 'CreateStream'
    // TODO: Method 'Commit'
    // TODO: Method 'AbortItem'
};
// --------------------------------------------------------
// Type: IAssemblyCache
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAssemblyCache = *opaque{
    // TODO: Method 'UninstallAssembly'
    // TODO: Method 'QueryAssemblyInfo'
    // TODO: Method 'CreateAssemblyCacheItem'
    // TODO: Method 'Reserved'
    // TODO: Method 'InstallAssembly'
};
// --------------------------------------------------------
// Type: CREATE_ASM_NAME_OBJ_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CREATE_ASM_NAME_OBJ_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: PROTECTED_FILE_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROTECTED_FILE_DATA = extern struct {
    FileName: ?[*]u16,
    FileNumber: u32,
};
// --------------------------------------------------------
// Type: INFCONTEXT
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const INFCONTEXT = *opaque{
};
// --------------------------------------------------------
// Type: SP_INF_INFORMATION
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_INF_INFORMATION = *opaque{
};
// --------------------------------------------------------
// Type: SP_ALTPLATFORM_INFO_V2
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_ALTPLATFORM_INFO_V2 = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: SP_ALTPLATFORM_INFO_V1
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_ALTPLATFORM_INFO_V1 = *opaque{
};
// --------------------------------------------------------
// Type: SP_ORIGINAL_FILE_INFO_A
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_ORIGINAL_FILE_INFO_A = *opaque{
};
// --------------------------------------------------------
// Type: SP_ORIGINAL_FILE_INFO_W
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_ORIGINAL_FILE_INFO_W = *opaque{
};
// --------------------------------------------------------
// Type: PSP_FILE_CALLBACK_A
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PSP_FILE_CALLBACK_A = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PSP_FILE_CALLBACK_W
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PSP_FILE_CALLBACK_W = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FILEPATHS_A
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const FILEPATHS_A = *opaque{
};
// --------------------------------------------------------
// Type: FILEPATHS_W
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const FILEPATHS_W = *opaque{
};
// --------------------------------------------------------
// Type: FILEPATHS_SIGNERINFO_A
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const FILEPATHS_SIGNERINFO_A = *opaque{
};
// --------------------------------------------------------
// Type: FILEPATHS_SIGNERINFO_W
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const FILEPATHS_SIGNERINFO_W = *opaque{
};
// --------------------------------------------------------
// Type: SOURCE_MEDIA_A
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SOURCE_MEDIA_A = *opaque{
};
// --------------------------------------------------------
// Type: SOURCE_MEDIA_W
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SOURCE_MEDIA_W = *opaque{
};
// --------------------------------------------------------
// Type: CABINET_INFO_A
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const CABINET_INFO_A = *opaque{
};
// --------------------------------------------------------
// Type: CABINET_INFO_W
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const CABINET_INFO_W = *opaque{
};
// --------------------------------------------------------
// Type: FILE_IN_CABINET_INFO_A
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const FILE_IN_CABINET_INFO_A = *opaque{
};
// --------------------------------------------------------
// Type: FILE_IN_CABINET_INFO_W
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const FILE_IN_CABINET_INFO_W = *opaque{
};
// --------------------------------------------------------
// Type: SP_REGISTER_CONTROL_STATUSA
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_REGISTER_CONTROL_STATUSA = *opaque{
};
// --------------------------------------------------------
// Type: SP_REGISTER_CONTROL_STATUSW
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_REGISTER_CONTROL_STATUSW = *opaque{
};
// --------------------------------------------------------
// Type: SP_FILE_COPY_PARAMS_A
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_FILE_COPY_PARAMS_A = *opaque{
};
// --------------------------------------------------------
// Type: SP_FILE_COPY_PARAMS_W
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_FILE_COPY_PARAMS_W = *opaque{
};
// --------------------------------------------------------
// Type: SP_INF_SIGNER_INFO_V1_A
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_INF_SIGNER_INFO_V1_A = *opaque{
};
// --------------------------------------------------------
// Type: SP_INF_SIGNER_INFO_V1_W
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_INF_SIGNER_INFO_V1_W = *opaque{
};
// --------------------------------------------------------
// Type: SP_INF_SIGNER_INFO_V2_A
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_INF_SIGNER_INFO_V2_A = *opaque{
};
// --------------------------------------------------------
// Type: SP_INF_SIGNER_INFO_V2_W
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const SP_INF_SIGNER_INFO_V2_W = *opaque{
};
// --------------------------------------------------------
// Type: ACTCTXA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTCTXA = extern struct {
    cbSize: u32,
    dwFlags: u32,
    lpSource: ?*i8,
    wProcessorArchitecture: u16,
    wLangId: u16,
    lpAssemblyDirectory: ?*i8,
    lpResourceName: ?*i8,
    lpApplicationName: ?*i8,
    hModule: ?*opaque{},
};
// --------------------------------------------------------
// Type: ACTCTXW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTCTXW = extern struct {
    cbSize: u32,
    dwFlags: u32,
    lpSource: ?*u16,
    wProcessorArchitecture: u16,
    wLangId: u16,
    lpAssemblyDirectory: ?*u16,
    lpResourceName: ?*u16,
    lpApplicationName: ?*u16,
    hModule: ?*opaque{},
};
// --------------------------------------------------------
// Type: ACTCTX_SECTION_KEYED_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACTCTX_SECTION_KEYED_DATA = extern struct {
    cbSize: u32,
    ulDataFormatVersion: u32,
    lpData: ?*opaque{},
    ulLength: u32,
    lpSectionGlobalData: ?*opaque{},
    ulSectionGlobalDataLength: u32,
    lpSectionBase: ?*opaque{},
    ulSectionTotalLength: u32,
    hActCtx: HANDLE,
    ulAssemblyRosterIndex: u32,
    ulFlags: u32,
    AssemblyMetadata: ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA,
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiCloseHandle(
    hAny: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiCloseAllHandles(
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSetInternalUI(
    dwUILevel: INSTALLUILEVEL,
    phWnd: ?*HWND,
) callconv(@import("std").os.windows.WINAPI) INSTALLUILEVEL;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSetExternalUIA(
    puiHandler: INSTALLUI_HANDLERA,
    dwMessageFilter: u32,
    pvContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) INSTALLUI_HANDLERA;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSetExternalUIW(
    puiHandler: INSTALLUI_HANDLERW,
    dwMessageFilter: u32,
    pvContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) INSTALLUI_HANDLERW;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSetExternalUIRecord(
    puiHandler: INSTALLUI_HANDLER_RECORD,
    dwMessageFilter: u32,
    pvContext: ?*opaque{},
    ppuiPrevHandler: PINSTALLUI_HANDLER_RECORD,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEnableLogA(
    dwLogMode: u32,
    szLogFile: ?*i8,
    dwLogAttributes: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEnableLogW(
    dwLogMode: u32,
    szLogFile: ?*u16,
    dwLogAttributes: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiQueryProductStateA(
    szProduct: ?*i8,
) callconv(@import("std").os.windows.WINAPI) INSTALLSTATE;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiQueryProductStateW(
    szProduct: ?*u16,
) callconv(@import("std").os.windows.WINAPI) INSTALLSTATE;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetProductInfoA(
    szProduct: ?*i8,
    szAttribute: ?*i8,
    lpValueBuf: ?*i8,
    pcchValueBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetProductInfoW(
    szProduct: ?*u16,
    szAttribute: ?*u16,
    lpValueBuf: ?*u16,
    pcchValueBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetProductInfoExA(
    szProductCode: ?*i8,
    szUserSid: ?*i8,
    dwContext: MSIINSTALLCONTEXT,
    szProperty: ?*i8,
    szValue: ?*i8,
    pcchValue: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetProductInfoExW(
    szProductCode: ?*u16,
    szUserSid: ?*u16,
    dwContext: MSIINSTALLCONTEXT,
    szProperty: ?*u16,
    szValue: ?*u16,
    pcchValue: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiInstallProductA(
    szPackagePath: ?*i8,
    szCommandLine: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiInstallProductW(
    szPackagePath: ?*u16,
    szCommandLine: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiConfigureProductA(
    szProduct: ?*i8,
    iInstallLevel: i32,
    eInstallState: INSTALLSTATE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiConfigureProductW(
    szProduct: ?*u16,
    iInstallLevel: i32,
    eInstallState: INSTALLSTATE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiConfigureProductExA(
    szProduct: ?*i8,
    iInstallLevel: i32,
    eInstallState: INSTALLSTATE,
    szCommandLine: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiConfigureProductExW(
    szProduct: ?*u16,
    iInstallLevel: i32,
    eInstallState: INSTALLSTATE,
    szCommandLine: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiReinstallProductA(
    szProduct: ?*i8,
    szReinstallMode: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiReinstallProductW(
    szProduct: ?*u16,
    szReinstallMode: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiAdvertiseProductExA(
    szPackagePath: ?*i8,
    szScriptfilePath: ?*i8,
    szTransforms: ?*i8,
    lgidLanguage: u16,
    dwPlatform: u32,
    dwOptions: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiAdvertiseProductExW(
    szPackagePath: ?*u16,
    szScriptfilePath: ?*u16,
    szTransforms: ?*u16,
    lgidLanguage: u16,
    dwPlatform: u32,
    dwOptions: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiAdvertiseProductA(
    szPackagePath: ?*i8,
    szScriptfilePath: ?*i8,
    szTransforms: ?*i8,
    lgidLanguage: u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiAdvertiseProductW(
    szPackagePath: ?*u16,
    szScriptfilePath: ?*u16,
    szTransforms: ?*u16,
    lgidLanguage: u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiProcessAdvertiseScriptA(
    szScriptFile: ?*i8,
    szIconFolder: ?*i8,
    hRegData: HKEY,
    fShortcuts: BOOL,
    fRemoveItems: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiProcessAdvertiseScriptW(
    szScriptFile: ?*u16,
    szIconFolder: ?*u16,
    hRegData: HKEY,
    fShortcuts: BOOL,
    fRemoveItems: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiAdvertiseScriptA(
    szScriptFile: ?*i8,
    dwFlags: u32,
    phRegData: ?*HKEY,
    fRemoveItems: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiAdvertiseScriptW(
    szScriptFile: ?*u16,
    dwFlags: u32,
    phRegData: ?*HKEY,
    fRemoveItems: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetProductInfoFromScriptA(
    szScriptFile: ?*i8,
    lpProductBuf39: ?*i8,
    plgidLanguage: ?*u16,
    pdwVersion: ?*u32,
    lpNameBuf: ?*i8,
    pcchNameBuf: ?*u32,
    lpPackageBuf: ?*i8,
    pcchPackageBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetProductInfoFromScriptW(
    szScriptFile: ?*u16,
    lpProductBuf39: ?*u16,
    plgidLanguage: ?*u16,
    pdwVersion: ?*u32,
    lpNameBuf: ?*u16,
    pcchNameBuf: ?*u32,
    lpPackageBuf: ?*u16,
    pcchPackageBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetProductCodeA(
    szComponent: ?*i8,
    lpBuf39: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetProductCodeW(
    szComponent: ?*u16,
    lpBuf39: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetUserInfoA(
    szProduct: ?*i8,
    lpUserNameBuf: ?*i8,
    pcchUserNameBuf: ?*u32,
    lpOrgNameBuf: ?*i8,
    pcchOrgNameBuf: ?*u32,
    lpSerialBuf: ?*i8,
    pcchSerialBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) USERINFOSTATE;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetUserInfoW(
    szProduct: ?*u16,
    lpUserNameBuf: ?*u16,
    pcchUserNameBuf: ?*u32,
    lpOrgNameBuf: ?*u16,
    pcchOrgNameBuf: ?*u32,
    lpSerialBuf: ?*u16,
    pcchSerialBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) USERINFOSTATE;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiCollectUserInfoA(
    szProduct: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiCollectUserInfoW(
    szProduct: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiApplyPatchA(
    szPatchPackage: ?*i8,
    szInstallPackage: ?*i8,
    eInstallType: INSTALLTYPE,
    szCommandLine: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiApplyPatchW(
    szPatchPackage: ?*u16,
    szInstallPackage: ?*u16,
    eInstallType: INSTALLTYPE,
    szCommandLine: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetPatchInfoA(
    szPatch: ?*i8,
    szAttribute: ?*i8,
    lpValueBuf: ?*i8,
    pcchValueBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetPatchInfoW(
    szPatch: ?*u16,
    szAttribute: ?*u16,
    lpValueBuf: ?*u16,
    pcchValueBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEnumPatchesA(
    szProduct: ?*i8,
    iPatchIndex: u32,
    lpPatchBuf: ?*i8,
    lpTransformsBuf: ?*i8,
    pcchTransformsBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEnumPatchesW(
    szProduct: ?*u16,
    iPatchIndex: u32,
    lpPatchBuf: ?*u16,
    lpTransformsBuf: ?*u16,
    pcchTransformsBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiRemovePatchesA(
    szPatchList: ?*i8,
    szProductCode: ?*i8,
    eUninstallType: INSTALLTYPE,
    szPropertyList: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiRemovePatchesW(
    szPatchList: ?*u16,
    szProductCode: ?*u16,
    eUninstallType: INSTALLTYPE,
    szPropertyList: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiExtractPatchXMLDataA(
    szPatchPath: ?*i8,
    dwReserved: u32,
    szXMLData: ?*i8,
    pcchXMLData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiExtractPatchXMLDataW(
    szPatchPath: ?*u16,
    dwReserved: u32,
    szXMLData: ?*u16,
    pcchXMLData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetPatchInfoExA(
    szPatchCode: ?*i8,
    szProductCode: ?*i8,
    szUserSid: ?*i8,
    dwContext: MSIINSTALLCONTEXT,
    szProperty: ?*i8,
    lpValue: ?*i8,
    pcchValue: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetPatchInfoExW(
    szPatchCode: ?*u16,
    szProductCode: ?*u16,
    szUserSid: ?*u16,
    dwContext: MSIINSTALLCONTEXT,
    szProperty: ?*u16,
    lpValue: ?*u16,
    pcchValue: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiApplyMultiplePatchesA(
    szPatchPackages: ?*i8,
    szProductCode: ?*i8,
    szPropertiesList: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiApplyMultiplePatchesW(
    szPatchPackages: ?*u16,
    szProductCode: ?*u16,
    szPropertiesList: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiDeterminePatchSequenceA(
    szProductCode: ?*i8,
    szUserSid: ?*i8,
    dwContext: MSIINSTALLCONTEXT,
    cPatchInfo: u32,
    pPatchInfo: ?*MSIPATCHSEQUENCEINFOA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiDeterminePatchSequenceW(
    szProductCode: ?*u16,
    szUserSid: ?*u16,
    dwContext: MSIINSTALLCONTEXT,
    cPatchInfo: u32,
    pPatchInfo: ?*MSIPATCHSEQUENCEINFOW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiDetermineApplicablePatchesA(
    szProductPackagePath: ?*i8,
    cPatchInfo: u32,
    pPatchInfo: ?*MSIPATCHSEQUENCEINFOA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiDetermineApplicablePatchesW(
    szProductPackagePath: ?*u16,
    cPatchInfo: u32,
    pPatchInfo: ?*MSIPATCHSEQUENCEINFOW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEnumPatchesExA(
    szProductCode: ?*i8,
    szUserSid: ?*i8,
    dwContext: u32,
    dwFilter: u32,
    dwIndex: u32,
    szPatchCode: ?*i8,
    szTargetProductCode: ?*i8,
    pdwTargetProductContext: ?*MSIINSTALLCONTEXT,
    szTargetUserSid: ?*i8,
    pcchTargetUserSid: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEnumPatchesExW(
    szProductCode: ?*u16,
    szUserSid: ?*u16,
    dwContext: u32,
    dwFilter: u32,
    dwIndex: u32,
    szPatchCode: ?*u16,
    szTargetProductCode: ?*u16,
    pdwTargetProductContext: ?*MSIINSTALLCONTEXT,
    szTargetUserSid: ?*u16,
    pcchTargetUserSid: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiQueryFeatureStateA(
    szProduct: ?*i8,
    szFeature: ?*i8,
) callconv(@import("std").os.windows.WINAPI) INSTALLSTATE;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiQueryFeatureStateW(
    szProduct: ?*u16,
    szFeature: ?*u16,
) callconv(@import("std").os.windows.WINAPI) INSTALLSTATE;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiQueryFeatureStateExA(
    szProductCode: ?*i8,
    szUserSid: ?*i8,
    dwContext: MSIINSTALLCONTEXT,
    szFeature: ?*i8,
    pdwState: ?*INSTALLSTATE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiQueryFeatureStateExW(
    szProductCode: ?*u16,
    szUserSid: ?*u16,
    dwContext: MSIINSTALLCONTEXT,
    szFeature: ?*u16,
    pdwState: ?*INSTALLSTATE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiUseFeatureA(
    szProduct: ?*i8,
    szFeature: ?*i8,
) callconv(@import("std").os.windows.WINAPI) INSTALLSTATE;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiUseFeatureW(
    szProduct: ?*u16,
    szFeature: ?*u16,
) callconv(@import("std").os.windows.WINAPI) INSTALLSTATE;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiUseFeatureExA(
    szProduct: ?*i8,
    szFeature: ?*i8,
    dwInstallMode: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) INSTALLSTATE;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiUseFeatureExW(
    szProduct: ?*u16,
    szFeature: ?*u16,
    dwInstallMode: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) INSTALLSTATE;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetFeatureUsageA(
    szProduct: ?*i8,
    szFeature: ?*i8,
    pdwUseCount: ?*u32,
    pwDateUsed: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetFeatureUsageW(
    szProduct: ?*u16,
    szFeature: ?*u16,
    pdwUseCount: ?*u32,
    pwDateUsed: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiConfigureFeatureA(
    szProduct: ?*i8,
    szFeature: ?*i8,
    eInstallState: INSTALLSTATE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiConfigureFeatureW(
    szProduct: ?*u16,
    szFeature: ?*u16,
    eInstallState: INSTALLSTATE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiReinstallFeatureA(
    szProduct: ?*i8,
    szFeature: ?*i8,
    dwReinstallMode: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiReinstallFeatureW(
    szProduct: ?*u16,
    szFeature: ?*u16,
    dwReinstallMode: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiProvideComponentA(
    szProduct: ?*i8,
    szFeature: ?*i8,
    szComponent: ?*i8,
    dwInstallMode: u32,
    lpPathBuf: ?*i8,
    pcchPathBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiProvideComponentW(
    szProduct: ?*u16,
    szFeature: ?*u16,
    szComponent: ?*u16,
    dwInstallMode: u32,
    lpPathBuf: ?*u16,
    pcchPathBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiProvideQualifiedComponentA(
    szCategory: ?*i8,
    szQualifier: ?*i8,
    dwInstallMode: u32,
    lpPathBuf: ?*i8,
    pcchPathBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiProvideQualifiedComponentW(
    szCategory: ?*u16,
    szQualifier: ?*u16,
    dwInstallMode: u32,
    lpPathBuf: ?*u16,
    pcchPathBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiProvideQualifiedComponentExA(
    szCategory: ?*i8,
    szQualifier: ?*i8,
    dwInstallMode: u32,
    szProduct: ?*i8,
    dwUnused1: u32,
    dwUnused2: u32,
    lpPathBuf: ?*i8,
    pcchPathBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiProvideQualifiedComponentExW(
    szCategory: ?*u16,
    szQualifier: ?*u16,
    dwInstallMode: u32,
    szProduct: ?*u16,
    dwUnused1: u32,
    dwUnused2: u32,
    lpPathBuf: ?*u16,
    pcchPathBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetComponentPathA(
    szProduct: ?*i8,
    szComponent: ?*i8,
    lpPathBuf: ?*i8,
    pcchBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) INSTALLSTATE;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetComponentPathW(
    szProduct: ?*u16,
    szComponent: ?*u16,
    lpPathBuf: ?*u16,
    pcchBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) INSTALLSTATE;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetComponentPathExA(
    szProductCode: ?*i8,
    szComponentCode: ?*i8,
    szUserSid: ?*i8,
    dwContext: MSIINSTALLCONTEXT,
    lpOutPathBuffer: ?*i8,
    pcchOutPathBuffer: ?*u32,
) callconv(@import("std").os.windows.WINAPI) INSTALLSTATE;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetComponentPathExW(
    szProductCode: ?*u16,
    szComponentCode: ?*u16,
    szUserSid: ?*u16,
    dwContext: MSIINSTALLCONTEXT,
    lpOutPathBuffer: ?*u16,
    pcchOutPathBuffer: ?*u32,
) callconv(@import("std").os.windows.WINAPI) INSTALLSTATE;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiProvideAssemblyA(
    szAssemblyName: ?*i8,
    szAppContext: ?*i8,
    dwInstallMode: u32,
    dwAssemblyInfo: u32,
    lpPathBuf: ?*i8,
    pcchPathBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiProvideAssemblyW(
    szAssemblyName: ?*u16,
    szAppContext: ?*u16,
    dwInstallMode: u32,
    dwAssemblyInfo: u32,
    lpPathBuf: ?*u16,
    pcchPathBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiQueryComponentStateA(
    szProductCode: ?*i8,
    szUserSid: ?*i8,
    dwContext: MSIINSTALLCONTEXT,
    szComponentCode: ?*i8,
    pdwState: ?*INSTALLSTATE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiQueryComponentStateW(
    szProductCode: ?*u16,
    szUserSid: ?*u16,
    dwContext: MSIINSTALLCONTEXT,
    szComponentCode: ?*u16,
    pdwState: ?*INSTALLSTATE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEnumProductsA(
    iProductIndex: u32,
    lpProductBuf: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEnumProductsW(
    iProductIndex: u32,
    lpProductBuf: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEnumProductsExA(
    szProductCode: ?*i8,
    szUserSid: ?*i8,
    dwContext: u32,
    dwIndex: u32,
    szInstalledProductCode: ?*i8,
    pdwInstalledContext: ?*MSIINSTALLCONTEXT,
    szSid: ?*i8,
    pcchSid: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEnumProductsExW(
    szProductCode: ?*u16,
    szUserSid: ?*u16,
    dwContext: u32,
    dwIndex: u32,
    szInstalledProductCode: ?*u16,
    pdwInstalledContext: ?*MSIINSTALLCONTEXT,
    szSid: ?*u16,
    pcchSid: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEnumRelatedProductsA(
    lpUpgradeCode: ?*i8,
    dwReserved: u32,
    iProductIndex: u32,
    lpProductBuf: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEnumRelatedProductsW(
    lpUpgradeCode: ?*u16,
    dwReserved: u32,
    iProductIndex: u32,
    lpProductBuf: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEnumFeaturesA(
    szProduct: ?*i8,
    iFeatureIndex: u32,
    lpFeatureBuf: ?*i8,
    lpParentBuf: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEnumFeaturesW(
    szProduct: ?*u16,
    iFeatureIndex: u32,
    lpFeatureBuf: ?*u16,
    lpParentBuf: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEnumComponentsA(
    iComponentIndex: u32,
    lpComponentBuf: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEnumComponentsW(
    iComponentIndex: u32,
    lpComponentBuf: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEnumComponentsExA(
    szUserSid: ?*i8,
    dwContext: u32,
    dwIndex: u32,
    szInstalledComponentCode: ?*i8,
    pdwInstalledContext: ?*MSIINSTALLCONTEXT,
    szSid: ?*i8,
    pcchSid: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEnumComponentsExW(
    szUserSid: ?*u16,
    dwContext: u32,
    dwIndex: u32,
    szInstalledComponentCode: ?*u16,
    pdwInstalledContext: ?*MSIINSTALLCONTEXT,
    szSid: ?*u16,
    pcchSid: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEnumClientsA(
    szComponent: ?*i8,
    iProductIndex: u32,
    lpProductBuf: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEnumClientsW(
    szComponent: ?*u16,
    iProductIndex: u32,
    lpProductBuf: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEnumClientsExA(
    szComponent: ?*i8,
    szUserSid: ?*i8,
    dwContext: u32,
    dwProductIndex: u32,
    szProductBuf: ?*i8,
    pdwInstalledContext: ?*MSIINSTALLCONTEXT,
    szSid: ?*i8,
    pcchSid: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEnumClientsExW(
    szComponent: ?*u16,
    szUserSid: ?*u16,
    dwContext: u32,
    dwProductIndex: u32,
    szProductBuf: ?*u16,
    pdwInstalledContext: ?*MSIINSTALLCONTEXT,
    szSid: ?*u16,
    pcchSid: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEnumComponentQualifiersA(
    szComponent: ?*i8,
    iIndex: u32,
    lpQualifierBuf: ?*i8,
    pcchQualifierBuf: ?*u32,
    lpApplicationDataBuf: ?*i8,
    pcchApplicationDataBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEnumComponentQualifiersW(
    szComponent: ?*u16,
    iIndex: u32,
    lpQualifierBuf: ?*u16,
    pcchQualifierBuf: ?*u32,
    lpApplicationDataBuf: ?*u16,
    pcchApplicationDataBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiOpenProductA(
    szProduct: ?*i8,
    hProduct: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiOpenProductW(
    szProduct: ?*u16,
    hProduct: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiOpenPackageA(
    szPackagePath: ?*i8,
    hProduct: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiOpenPackageW(
    szPackagePath: ?*u16,
    hProduct: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiOpenPackageExA(
    szPackagePath: ?*i8,
    dwOptions: u32,
    hProduct: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiOpenPackageExW(
    szPackagePath: ?*u16,
    dwOptions: u32,
    hProduct: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetPatchFileListA(
    szProductCode: ?*i8,
    szPatchPackages: ?*i8,
    pcFiles: ?*u32,
    pphFileRecords: ?*?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetPatchFileListW(
    szProductCode: ?*u16,
    szPatchPackages: ?*u16,
    pcFiles: ?*u32,
    pphFileRecords: ?*?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetProductPropertyA(
    hProduct: u32,
    szProperty: ?*i8,
    lpValueBuf: ?*i8,
    pcchValueBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetProductPropertyW(
    hProduct: u32,
    szProperty: ?*u16,
    lpValueBuf: ?*u16,
    pcchValueBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiVerifyPackageA(
    szPackagePath: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiVerifyPackageW(
    szPackagePath: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetFeatureInfoA(
    hProduct: u32,
    szFeature: ?*i8,
    lpAttributes: ?*u32,
    lpTitleBuf: ?*i8,
    pcchTitleBuf: ?*u32,
    lpHelpBuf: ?*i8,
    pcchHelpBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetFeatureInfoW(
    hProduct: u32,
    szFeature: ?*u16,
    lpAttributes: ?*u32,
    lpTitleBuf: ?*u16,
    pcchTitleBuf: ?*u32,
    lpHelpBuf: ?*u16,
    pcchHelpBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiInstallMissingComponentA(
    szProduct: ?*i8,
    szComponent: ?*i8,
    eInstallState: INSTALLSTATE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiInstallMissingComponentW(
    szProduct: ?*u16,
    szComponent: ?*u16,
    eInstallState: INSTALLSTATE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiInstallMissingFileA(
    szProduct: ?*i8,
    szFile: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiInstallMissingFileW(
    szProduct: ?*u16,
    szFile: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiLocateComponentA(
    szComponent: ?*i8,
    lpPathBuf: ?*i8,
    pcchBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) INSTALLSTATE;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiLocateComponentW(
    szComponent: ?*u16,
    lpPathBuf: ?*u16,
    pcchBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) INSTALLSTATE;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSourceListClearAllA(
    szProduct: ?*i8,
    szUserName: ?*i8,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSourceListClearAllW(
    szProduct: ?*u16,
    szUserName: ?*u16,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSourceListAddSourceA(
    szProduct: ?*i8,
    szUserName: ?*i8,
    dwReserved: u32,
    szSource: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSourceListAddSourceW(
    szProduct: ?*u16,
    szUserName: ?*u16,
    dwReserved: u32,
    szSource: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSourceListForceResolutionA(
    szProduct: ?*i8,
    szUserName: ?*i8,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSourceListForceResolutionW(
    szProduct: ?*u16,
    szUserName: ?*u16,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSourceListAddSourceExA(
    szProductCodeOrPatchCode: ?*i8,
    szUserSid: ?*i8,
    dwContext: MSIINSTALLCONTEXT,
    dwOptions: u32,
    szSource: ?*i8,
    dwIndex: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSourceListAddSourceExW(
    szProductCodeOrPatchCode: ?*u16,
    szUserSid: ?*u16,
    dwContext: MSIINSTALLCONTEXT,
    dwOptions: u32,
    szSource: ?*u16,
    dwIndex: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSourceListAddMediaDiskA(
    szProductCodeOrPatchCode: ?*i8,
    szUserSid: ?*i8,
    dwContext: MSIINSTALLCONTEXT,
    dwOptions: u32,
    dwDiskId: u32,
    szVolumeLabel: ?*i8,
    szDiskPrompt: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSourceListAddMediaDiskW(
    szProductCodeOrPatchCode: ?*u16,
    szUserSid: ?*u16,
    dwContext: MSIINSTALLCONTEXT,
    dwOptions: u32,
    dwDiskId: u32,
    szVolumeLabel: ?*u16,
    szDiskPrompt: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSourceListClearSourceA(
    szProductCodeOrPatchCode: ?*i8,
    szUserSid: ?*i8,
    dwContext: MSIINSTALLCONTEXT,
    dwOptions: u32,
    szSource: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSourceListClearSourceW(
    szProductCodeOrPatchCode: ?*u16,
    szUserSid: ?*u16,
    dwContext: MSIINSTALLCONTEXT,
    dwOptions: u32,
    szSource: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSourceListClearMediaDiskA(
    szProductCodeOrPatchCode: ?*i8,
    szUserSid: ?*i8,
    dwContext: MSIINSTALLCONTEXT,
    dwOptions: u32,
    dwDiskId: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSourceListClearMediaDiskW(
    szProductCodeOrPatchCode: ?*u16,
    szUserSid: ?*u16,
    dwContext: MSIINSTALLCONTEXT,
    dwOptions: u32,
    dwDiskId: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSourceListClearAllExA(
    szProductCodeOrPatchCode: ?*i8,
    szUserSid: ?*i8,
    dwContext: MSIINSTALLCONTEXT,
    dwOptions: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSourceListClearAllExW(
    szProductCodeOrPatchCode: ?*u16,
    szUserSid: ?*u16,
    dwContext: MSIINSTALLCONTEXT,
    dwOptions: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSourceListForceResolutionExA(
    szProductCodeOrPatchCode: ?*i8,
    szUserSid: ?*i8,
    dwContext: MSIINSTALLCONTEXT,
    dwOptions: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSourceListForceResolutionExW(
    szProductCodeOrPatchCode: ?*u16,
    szUserSid: ?*u16,
    dwContext: MSIINSTALLCONTEXT,
    dwOptions: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSourceListSetInfoA(
    szProductCodeOrPatchCode: ?*i8,
    szUserSid: ?*i8,
    dwContext: MSIINSTALLCONTEXT,
    dwOptions: u32,
    szProperty: ?*i8,
    szValue: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSourceListSetInfoW(
    szProductCodeOrPatchCode: ?*u16,
    szUserSid: ?*u16,
    dwContext: MSIINSTALLCONTEXT,
    dwOptions: u32,
    szProperty: ?*u16,
    szValue: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSourceListGetInfoA(
    szProductCodeOrPatchCode: ?*i8,
    szUserSid: ?*i8,
    dwContext: MSIINSTALLCONTEXT,
    dwOptions: u32,
    szProperty: ?*i8,
    szValue: ?*i8,
    pcchValue: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSourceListGetInfoW(
    szProductCodeOrPatchCode: ?*u16,
    szUserSid: ?*u16,
    dwContext: MSIINSTALLCONTEXT,
    dwOptions: u32,
    szProperty: ?*u16,
    szValue: ?*u16,
    pcchValue: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSourceListEnumSourcesA(
    szProductCodeOrPatchCode: ?*i8,
    szUserSid: ?*i8,
    dwContext: MSIINSTALLCONTEXT,
    dwOptions: u32,
    dwIndex: u32,
    szSource: ?*i8,
    pcchSource: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSourceListEnumSourcesW(
    szProductCodeOrPatchCode: ?*u16,
    szUserSid: ?*u16,
    dwContext: MSIINSTALLCONTEXT,
    dwOptions: u32,
    dwIndex: u32,
    szSource: ?*u16,
    pcchSource: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSourceListEnumMediaDisksA(
    szProductCodeOrPatchCode: ?*i8,
    szUserSid: ?*i8,
    dwContext: MSIINSTALLCONTEXT,
    dwOptions: u32,
    dwIndex: u32,
    pdwDiskId: ?*u32,
    szVolumeLabel: ?*i8,
    pcchVolumeLabel: ?*u32,
    szDiskPrompt: ?*i8,
    pcchDiskPrompt: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSourceListEnumMediaDisksW(
    szProductCodeOrPatchCode: ?*u16,
    szUserSid: ?*u16,
    dwContext: MSIINSTALLCONTEXT,
    dwOptions: u32,
    dwIndex: u32,
    pdwDiskId: ?*u32,
    szVolumeLabel: ?*u16,
    pcchVolumeLabel: ?*u32,
    szDiskPrompt: ?*u16,
    pcchDiskPrompt: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetFileVersionA(
    szFilePath: ?*i8,
    lpVersionBuf: ?*i8,
    pcchVersionBuf: ?*u32,
    lpLangBuf: ?*i8,
    pcchLangBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetFileVersionW(
    szFilePath: ?*u16,
    lpVersionBuf: ?*u16,
    pcchVersionBuf: ?*u32,
    lpLangBuf: ?*u16,
    pcchLangBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetFileHashA(
    szFilePath: ?*i8,
    dwOptions: u32,
    pHash: ?*MSIFILEHASHINFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetFileHashW(
    szFilePath: ?*u16,
    dwOptions: u32,
    pHash: ?*MSIFILEHASHINFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetFileSignatureInformationA(
    szSignedObjectPath: ?*i8,
    dwFlags: u32,
    ppcCertContext: ?*?*CERT_CONTEXT,
    pbHashData: ?*u8,
    pcbHashData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetFileSignatureInformationW(
    szSignedObjectPath: ?*u16,
    dwFlags: u32,
    ppcCertContext: ?*?*CERT_CONTEXT,
    pbHashData: ?*u8,
    pcbHashData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetShortcutTargetA(
    szShortcutPath: ?*i8,
    szProductCode: ?*i8,
    szFeatureId: ?*i8,
    szComponentCode: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetShortcutTargetW(
    szShortcutPath: ?*u16,
    szProductCode: ?*u16,
    szFeatureId: ?*u16,
    szComponentCode: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiIsProductElevatedA(
    szProduct: ?*i8,
    pfElevated: ?*i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiIsProductElevatedW(
    szProduct: ?*u16,
    pfElevated: ?*i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiNotifySidChangeA(
    pOldSid: ?*i8,
    pNewSid: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiNotifySidChangeW(
    pOldSid: ?*u16,
    pNewSid: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiBeginTransactionA(
    szName: ?*i8,
    dwTransactionAttributes: u32,
    phTransactionHandle: ?*u32,
    phChangeOfOwnerEvent: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiBeginTransactionW(
    szName: ?*u16,
    dwTransactionAttributes: u32,
    phTransactionHandle: ?*u32,
    phChangeOfOwnerEvent: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEndTransaction(
    dwTransactionState: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiJoinTransaction(
    hTransactionHandle: u32,
    dwTransactionAttributes: u32,
    phChangeOfOwnerEvent: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiDatabaseOpenViewA(
    hDatabase: u32,
    szQuery: ?*i8,
    phView: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiDatabaseOpenViewW(
    hDatabase: u32,
    szQuery: ?*u16,
    phView: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiViewGetErrorA(
    hView: u32,
    szColumnNameBuffer: ?*i8,
    pcchBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) MSIDBERROR;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiViewGetErrorW(
    hView: u32,
    szColumnNameBuffer: ?*u16,
    pcchBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) MSIDBERROR;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiViewExecute(
    hView: u32,
    hRecord: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiViewFetch(
    hView: u32,
    phRecord: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiViewModify(
    hView: u32,
    eModifyMode: MSIMODIFY,
    hRecord: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiViewGetColumnInfo(
    hView: u32,
    eColumnInfo: MSICOLINFO,
    phRecord: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiViewClose(
    hView: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiDatabaseGetPrimaryKeysA(
    hDatabase: u32,
    szTableName: ?*i8,
    phRecord: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiDatabaseGetPrimaryKeysW(
    hDatabase: u32,
    szTableName: ?*u16,
    phRecord: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiDatabaseIsTablePersistentA(
    hDatabase: u32,
    szTableName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) MSICONDITION;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiDatabaseIsTablePersistentW(
    hDatabase: u32,
    szTableName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) MSICONDITION;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetSummaryInformationA(
    hDatabase: u32,
    szDatabasePath: ?*i8,
    uiUpdateCount: u32,
    phSummaryInfo: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetSummaryInformationW(
    hDatabase: u32,
    szDatabasePath: ?*u16,
    uiUpdateCount: u32,
    phSummaryInfo: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSummaryInfoGetPropertyCount(
    hSummaryInfo: u32,
    puiPropertyCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSummaryInfoSetPropertyA(
    hSummaryInfo: u32,
    uiProperty: u32,
    uiDataType: u32,
    iValue: i32,
    pftValue: ?*FILETIME,
    szValue: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSummaryInfoSetPropertyW(
    hSummaryInfo: u32,
    uiProperty: u32,
    uiDataType: u32,
    iValue: i32,
    pftValue: ?*FILETIME,
    szValue: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSummaryInfoGetPropertyA(
    hSummaryInfo: u32,
    uiProperty: u32,
    puiDataType: ?*u32,
    piValue: ?*i32,
    pftValue: ?*FILETIME,
    szValueBuf: ?*i8,
    pcchValueBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSummaryInfoGetPropertyW(
    hSummaryInfo: u32,
    uiProperty: u32,
    puiDataType: ?*u32,
    piValue: ?*i32,
    pftValue: ?*FILETIME,
    szValueBuf: ?*u16,
    pcchValueBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSummaryInfoPersist(
    hSummaryInfo: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiOpenDatabaseA(
    szDatabasePath: ?*i8,
    szPersist: ?*i8,
    phDatabase: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiOpenDatabaseW(
    szDatabasePath: ?*u16,
    szPersist: ?*u16,
    phDatabase: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiDatabaseImportA(
    hDatabase: u32,
    szFolderPath: ?*i8,
    szFileName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiDatabaseImportW(
    hDatabase: u32,
    szFolderPath: ?*u16,
    szFileName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiDatabaseExportA(
    hDatabase: u32,
    szTableName: ?*i8,
    szFolderPath: ?*i8,
    szFileName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiDatabaseExportW(
    hDatabase: u32,
    szTableName: ?*u16,
    szFolderPath: ?*u16,
    szFileName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiDatabaseMergeA(
    hDatabase: u32,
    hDatabaseMerge: u32,
    szTableName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiDatabaseMergeW(
    hDatabase: u32,
    hDatabaseMerge: u32,
    szTableName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiDatabaseGenerateTransformA(
    hDatabase: u32,
    hDatabaseReference: u32,
    szTransformFile: ?*i8,
    iReserved1: i32,
    iReserved2: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiDatabaseGenerateTransformW(
    hDatabase: u32,
    hDatabaseReference: u32,
    szTransformFile: ?*u16,
    iReserved1: i32,
    iReserved2: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiDatabaseApplyTransformA(
    hDatabase: u32,
    szTransformFile: ?*i8,
    iErrorConditions: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiDatabaseApplyTransformW(
    hDatabase: u32,
    szTransformFile: ?*u16,
    iErrorConditions: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiCreateTransformSummaryInfoA(
    hDatabase: u32,
    hDatabaseReference: u32,
    szTransformFile: ?*i8,
    iErrorConditions: i32,
    iValidation: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiCreateTransformSummaryInfoW(
    hDatabase: u32,
    hDatabaseReference: u32,
    szTransformFile: ?*u16,
    iErrorConditions: i32,
    iValidation: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiDatabaseCommit(
    hDatabase: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetDatabaseState(
    hDatabase: u32,
) callconv(@import("std").os.windows.WINAPI) MSIDBSTATE;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiCreateRecord(
    cParams: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiRecordIsNull(
    hRecord: u32,
    iField: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiRecordDataSize(
    hRecord: u32,
    iField: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiRecordSetInteger(
    hRecord: u32,
    iField: u32,
    iValue: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiRecordSetStringA(
    hRecord: u32,
    iField: u32,
    szValue: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiRecordSetStringW(
    hRecord: u32,
    iField: u32,
    szValue: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiRecordGetInteger(
    hRecord: u32,
    iField: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiRecordGetStringA(
    hRecord: u32,
    iField: u32,
    szValueBuf: ?*i8,
    pcchValueBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiRecordGetStringW(
    hRecord: u32,
    iField: u32,
    szValueBuf: ?*u16,
    pcchValueBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiRecordGetFieldCount(
    hRecord: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiRecordSetStreamA(
    hRecord: u32,
    iField: u32,
    szFilePath: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiRecordSetStreamW(
    hRecord: u32,
    iField: u32,
    szFilePath: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiRecordReadStream(
    hRecord: u32,
    iField: u32,
    szDataBuf: ?*i8,
    pcbDataBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiRecordClearData(
    hRecord: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetActiveDatabase(
    hInstall: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSetPropertyA(
    hInstall: u32,
    szName: ?*i8,
    szValue: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSetPropertyW(
    hInstall: u32,
    szName: ?*u16,
    szValue: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetPropertyA(
    hInstall: u32,
    szName: ?*i8,
    szValueBuf: ?*i8,
    pcchValueBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetPropertyW(
    hInstall: u32,
    szName: ?*u16,
    szValueBuf: ?*u16,
    pcchValueBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetLanguage(
    hInstall: u32,
) callconv(@import("std").os.windows.WINAPI) u16;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetMode(
    hInstall: u32,
    eRunMode: MSIRUNMODE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSetMode(
    hInstall: u32,
    eRunMode: MSIRUNMODE,
    fState: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiFormatRecordA(
    hInstall: u32,
    hRecord: u32,
    szResultBuf: ?*i8,
    pcchResultBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiFormatRecordW(
    hInstall: u32,
    hRecord: u32,
    szResultBuf: ?*u16,
    pcchResultBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiDoActionA(
    hInstall: u32,
    szAction: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiDoActionW(
    hInstall: u32,
    szAction: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSequenceA(
    hInstall: u32,
    szTable: ?*i8,
    iSequenceMode: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSequenceW(
    hInstall: u32,
    szTable: ?*u16,
    iSequenceMode: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiProcessMessage(
    hInstall: u32,
    eMessageType: INSTALLMESSAGE,
    hRecord: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEvaluateConditionA(
    hInstall: u32,
    szCondition: ?*i8,
) callconv(@import("std").os.windows.WINAPI) MSICONDITION;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEvaluateConditionW(
    hInstall: u32,
    szCondition: ?*u16,
) callconv(@import("std").os.windows.WINAPI) MSICONDITION;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetFeatureStateA(
    hInstall: u32,
    szFeature: ?*i8,
    piInstalled: ?*INSTALLSTATE,
    piAction: ?*INSTALLSTATE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetFeatureStateW(
    hInstall: u32,
    szFeature: ?*u16,
    piInstalled: ?*INSTALLSTATE,
    piAction: ?*INSTALLSTATE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSetFeatureStateA(
    hInstall: u32,
    szFeature: ?*i8,
    iState: INSTALLSTATE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSetFeatureStateW(
    hInstall: u32,
    szFeature: ?*u16,
    iState: INSTALLSTATE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSetFeatureAttributesA(
    hInstall: u32,
    szFeature: ?*i8,
    dwAttributes: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSetFeatureAttributesW(
    hInstall: u32,
    szFeature: ?*u16,
    dwAttributes: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetComponentStateA(
    hInstall: u32,
    szComponent: ?*i8,
    piInstalled: ?*INSTALLSTATE,
    piAction: ?*INSTALLSTATE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetComponentStateW(
    hInstall: u32,
    szComponent: ?*u16,
    piInstalled: ?*INSTALLSTATE,
    piAction: ?*INSTALLSTATE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSetComponentStateA(
    hInstall: u32,
    szComponent: ?*i8,
    iState: INSTALLSTATE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSetComponentStateW(
    hInstall: u32,
    szComponent: ?*u16,
    iState: INSTALLSTATE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetFeatureCostA(
    hInstall: u32,
    szFeature: ?*i8,
    iCostTree: MSICOSTTREE,
    iState: INSTALLSTATE,
    piCost: ?*i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetFeatureCostW(
    hInstall: u32,
    szFeature: ?*u16,
    iCostTree: MSICOSTTREE,
    iState: INSTALLSTATE,
    piCost: ?*i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEnumComponentCostsA(
    hInstall: u32,
    szComponent: ?*i8,
    dwIndex: u32,
    iState: INSTALLSTATE,
    szDriveBuf: ?*i8,
    pcchDriveBuf: ?*u32,
    piCost: ?*i32,
    piTempCost: ?*i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEnumComponentCostsW(
    hInstall: u32,
    szComponent: ?*u16,
    dwIndex: u32,
    iState: INSTALLSTATE,
    szDriveBuf: ?*u16,
    pcchDriveBuf: ?*u32,
    piCost: ?*i32,
    piTempCost: ?*i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSetInstallLevel(
    hInstall: u32,
    iInstallLevel: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetFeatureValidStatesA(
    hInstall: u32,
    szFeature: ?*i8,
    lpInstallStates: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetFeatureValidStatesW(
    hInstall: u32,
    szFeature: ?*u16,
    lpInstallStates: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetSourcePathA(
    hInstall: u32,
    szFolder: ?*i8,
    szPathBuf: ?*i8,
    pcchPathBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetSourcePathW(
    hInstall: u32,
    szFolder: ?*u16,
    szPathBuf: ?*u16,
    pcchPathBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetTargetPathA(
    hInstall: u32,
    szFolder: ?*i8,
    szPathBuf: ?*i8,
    pcchPathBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetTargetPathW(
    hInstall: u32,
    szFolder: ?*u16,
    szPathBuf: ?*u16,
    pcchPathBuf: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSetTargetPathA(
    hInstall: u32,
    szFolder: ?*i8,
    szFolderPath: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiSetTargetPathW(
    hInstall: u32,
    szFolder: ?*u16,
    szFolderPath: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiVerifyDiskSpace(
    hInstall: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiEnableUIPreview(
    hDatabase: u32,
    phPreview: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiPreviewDialogA(
    hPreview: u32,
    szDialogName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiPreviewDialogW(
    hPreview: u32,
    szDialogName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiPreviewBillboardA(
    hPreview: u32,
    szControlName: ?*i8,
    szBillboard: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiPreviewBillboardW(
    hPreview: u32,
    szControlName: ?*u16,
    szBillboard: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "msi" fn MsiGetLastErrorRecord(
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "sfc" fn SfcGetNextProtectedFile(
    RpcHandle: HANDLE,
    ProtFileData: ?*PROTECTED_FILE_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "sfc" fn SfcIsFileProtected(
    RpcHandle: HANDLE,
    ProtFileName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "sfc" fn SfcIsKeyProtected(
    KeyHandle: HKEY,
    SubKeyName: ?*u16,
    KeySam: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "sfc" fn SfpVerifyFile(
    pszFileName: ?*i8,
    pszError: ?*i8,
    dwErrSize: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetInfInformationA(
    InfSpec: ?*opaque{},
    SearchControl: u32,
    ReturnBuffer: ?*SP_INF_INFORMATION,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetInfInformationW(
    InfSpec: ?*opaque{},
    SearchControl: u32,
    ReturnBuffer: ?*SP_INF_INFORMATION,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQueryInfFileInformationA(
    InfInformation: ?*SP_INF_INFORMATION,
    InfIndex: u32,
    ReturnBuffer: ?*i8,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQueryInfFileInformationW(
    InfInformation: ?*SP_INF_INFORMATION,
    InfIndex: u32,
    ReturnBuffer: ?*u16,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQueryInfOriginalFileInformationA(
    InfInformation: ?*SP_INF_INFORMATION,
    InfIndex: u32,
    AlternatePlatformInfo: ?*SP_ALTPLATFORM_INFO_V2,
    OriginalFileInfo: ?*SP_ORIGINAL_FILE_INFO_A,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQueryInfOriginalFileInformationW(
    InfInformation: ?*SP_INF_INFORMATION,
    InfIndex: u32,
    AlternatePlatformInfo: ?*SP_ALTPLATFORM_INFO_V2,
    OriginalFileInfo: ?*SP_ORIGINAL_FILE_INFO_W,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQueryInfVersionInformationA(
    InfInformation: ?*SP_INF_INFORMATION,
    InfIndex: u32,
    Key: ?*i8,
    ReturnBuffer: ?*i8,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQueryInfVersionInformationW(
    InfInformation: ?*SP_INF_INFORMATION,
    InfIndex: u32,
    Key: ?*u16,
    ReturnBuffer: ?*u16,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetInfFileListA(
    DirectoryPath: ?*i8,
    InfStyle: u32,
    ReturnBuffer: ?*i8,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetInfFileListW(
    DirectoryPath: ?*u16,
    InfStyle: u32,
    ReturnBuffer: ?*u16,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupOpenInfFileW(
    FileName: ?*u16,
    InfClass: ?*u16,
    InfStyle: u32,
    ErrorLine: ?*u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupOpenInfFileA(
    FileName: ?*i8,
    InfClass: ?*i8,
    InfStyle: u32,
    ErrorLine: ?*u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupOpenMasterInf(
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupOpenAppendInfFileW(
    FileName: ?*u16,
    InfHandle: ?*opaque{},
    ErrorLine: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupOpenAppendInfFileA(
    FileName: ?*i8,
    InfHandle: ?*opaque{},
    ErrorLine: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn SetupCloseInfFile(
    InfHandle: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupFindFirstLineA(
    InfHandle: ?*opaque{},
    Section: ?*i8,
    Key: ?*i8,
    Context: ?*INFCONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupFindFirstLineW(
    InfHandle: ?*opaque{},
    Section: ?*u16,
    Key: ?*u16,
    Context: ?*INFCONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupFindNextLine(
    ContextIn: ?*INFCONTEXT,
    ContextOut: ?*INFCONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupFindNextMatchLineA(
    ContextIn: ?*INFCONTEXT,
    Key: ?*i8,
    ContextOut: ?*INFCONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupFindNextMatchLineW(
    ContextIn: ?*INFCONTEXT,
    Key: ?*u16,
    ContextOut: ?*INFCONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetLineByIndexA(
    InfHandle: ?*opaque{},
    Section: ?*i8,
    Index: u32,
    Context: ?*INFCONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetLineByIndexW(
    InfHandle: ?*opaque{},
    Section: ?*u16,
    Index: u32,
    Context: ?*INFCONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetLineCountA(
    InfHandle: ?*opaque{},
    Section: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetLineCountW(
    InfHandle: ?*opaque{},
    Section: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetLineTextA(
    Context: ?*INFCONTEXT,
    InfHandle: ?*opaque{},
    Section: ?*i8,
    Key: ?*i8,
    ReturnBuffer: ?*i8,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetLineTextW(
    Context: ?*INFCONTEXT,
    InfHandle: ?*opaque{},
    Section: ?*u16,
    Key: ?*u16,
    ReturnBuffer: ?*u16,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetFieldCount(
    Context: ?*INFCONTEXT,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetStringFieldA(
    Context: ?*INFCONTEXT,
    FieldIndex: u32,
    ReturnBuffer: ?*i8,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetStringFieldW(
    Context: ?*INFCONTEXT,
    FieldIndex: u32,
    ReturnBuffer: ?*u16,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetIntField(
    Context: ?*INFCONTEXT,
    FieldIndex: u32,
    IntegerValue: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetMultiSzFieldA(
    Context: ?*INFCONTEXT,
    FieldIndex: u32,
    ReturnBuffer: ?*i8,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetMultiSzFieldW(
    Context: ?*INFCONTEXT,
    FieldIndex: u32,
    ReturnBuffer: ?*u16,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetBinaryField(
    Context: ?*INFCONTEXT,
    FieldIndex: u32,
    ReturnBuffer: ?*u8,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetFileCompressionInfoA(
    SourceFileName: ?*i8,
    ActualSourceFileName: ?*?*i8,
    SourceFileSize: ?*u32,
    TargetFileSize: ?*u32,
    CompressionType: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetFileCompressionInfoW(
    SourceFileName: ?*u16,
    ActualSourceFileName: ?*?*u16,
    SourceFileSize: ?*u32,
    TargetFileSize: ?*u32,
    CompressionType: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetFileCompressionInfoExA(
    SourceFileName: ?*i8,
    ActualSourceFileNameBuffer: ?*i8,
    ActualSourceFileNameBufferLen: u32,
    RequiredBufferLen: ?*u32,
    SourceFileSize: ?*u32,
    TargetFileSize: ?*u32,
    CompressionType: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetFileCompressionInfoExW(
    SourceFileName: ?*u16,
    ActualSourceFileNameBuffer: ?*u16,
    ActualSourceFileNameBufferLen: u32,
    RequiredBufferLen: ?*u32,
    SourceFileSize: ?*u32,
    TargetFileSize: ?*u32,
    CompressionType: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDecompressOrCopyFileA(
    SourceFileName: ?*i8,
    TargetFileName: ?*i8,
    CompressionType: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDecompressOrCopyFileW(
    SourceFileName: ?*u16,
    TargetFileName: ?*u16,
    CompressionType: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetSourceFileLocationA(
    InfHandle: ?*opaque{},
    InfContext: ?*INFCONTEXT,
    FileName: ?*i8,
    SourceId: ?*u32,
    ReturnBuffer: ?*i8,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetSourceFileLocationW(
    InfHandle: ?*opaque{},
    InfContext: ?*INFCONTEXT,
    FileName: ?*u16,
    SourceId: ?*u32,
    ReturnBuffer: ?*u16,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetSourceFileSizeA(
    InfHandle: ?*opaque{},
    InfContext: ?*INFCONTEXT,
    FileName: ?*i8,
    Section: ?*i8,
    FileSize: ?*u32,
    RoundingFactor: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetSourceFileSizeW(
    InfHandle: ?*opaque{},
    InfContext: ?*INFCONTEXT,
    FileName: ?*u16,
    Section: ?*u16,
    FileSize: ?*u32,
    RoundingFactor: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetTargetPathA(
    InfHandle: ?*opaque{},
    InfContext: ?*INFCONTEXT,
    Section: ?*i8,
    ReturnBuffer: ?*i8,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetTargetPathW(
    InfHandle: ?*opaque{},
    InfContext: ?*INFCONTEXT,
    Section: ?*u16,
    ReturnBuffer: ?*u16,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupSetSourceListA(
    Flags: u32,
    SourceList: ?*?*i8,
    SourceCount: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupSetSourceListW(
    Flags: u32,
    SourceList: ?*?*u16,
    SourceCount: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupCancelTemporarySourceList(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupAddToSourceListA(
    Flags: u32,
    Source: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupAddToSourceListW(
    Flags: u32,
    Source: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupRemoveFromSourceListA(
    Flags: u32,
    Source: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupRemoveFromSourceListW(
    Flags: u32,
    Source: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQuerySourceListA(
    Flags: u32,
    List: ?*?*?*i8,
    Count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQuerySourceListW(
    Flags: u32,
    List: ?*?*?*u16,
    Count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupFreeSourceListA(
    List: ?*?*?*i8,
    Count: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupFreeSourceListW(
    List: ?*?*?*u16,
    Count: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupPromptForDiskA(
    hwndParent: HWND,
    DialogTitle: ?*i8,
    DiskName: ?*i8,
    PathToSource: ?*i8,
    FileSought: ?*i8,
    TagFile: ?*i8,
    DiskPromptStyle: u32,
    PathBuffer: ?*i8,
    PathBufferSize: u32,
    PathRequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupPromptForDiskW(
    hwndParent: HWND,
    DialogTitle: ?*u16,
    DiskName: ?*u16,
    PathToSource: ?*u16,
    FileSought: ?*u16,
    TagFile: ?*u16,
    DiskPromptStyle: u32,
    PathBuffer: ?*u16,
    PathBufferSize: u32,
    PathRequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupCopyErrorA(
    hwndParent: HWND,
    DialogTitle: ?*i8,
    DiskName: ?*i8,
    PathToSource: ?*i8,
    SourceFile: ?*i8,
    TargetPathFile: ?*i8,
    Win32ErrorCode: u32,
    Style: u32,
    PathBuffer: ?*i8,
    PathBufferSize: u32,
    PathRequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupCopyErrorW(
    hwndParent: HWND,
    DialogTitle: ?*u16,
    DiskName: ?*u16,
    PathToSource: ?*u16,
    SourceFile: ?*u16,
    TargetPathFile: ?*u16,
    Win32ErrorCode: u32,
    Style: u32,
    PathBuffer: ?*u16,
    PathBufferSize: u32,
    PathRequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupRenameErrorA(
    hwndParent: HWND,
    DialogTitle: ?*i8,
    SourceFile: ?*i8,
    TargetFile: ?*i8,
    Win32ErrorCode: u32,
    Style: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupRenameErrorW(
    hwndParent: HWND,
    DialogTitle: ?*u16,
    SourceFile: ?*u16,
    TargetFile: ?*u16,
    Win32ErrorCode: u32,
    Style: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDeleteErrorA(
    hwndParent: HWND,
    DialogTitle: ?*i8,
    File: ?*i8,
    Win32ErrorCode: u32,
    Style: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDeleteErrorW(
    hwndParent: HWND,
    DialogTitle: ?*u16,
    File: ?*u16,
    Win32ErrorCode: u32,
    Style: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupBackupErrorA(
    hwndParent: HWND,
    DialogTitle: ?*i8,
    SourceFile: ?*i8,
    TargetFile: ?*i8,
    Win32ErrorCode: u32,
    Style: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupBackupErrorW(
    hwndParent: HWND,
    DialogTitle: ?*u16,
    SourceFile: ?*u16,
    TargetFile: ?*u16,
    Win32ErrorCode: u32,
    Style: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupSetDirectoryIdA(
    InfHandle: ?*opaque{},
    Id: u32,
    Directory: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupSetDirectoryIdW(
    InfHandle: ?*opaque{},
    Id: u32,
    Directory: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupSetDirectoryIdExA(
    InfHandle: ?*opaque{},
    Id: u32,
    Directory: ?*i8,
    Flags: u32,
    Reserved1: u32,
    Reserved2: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupSetDirectoryIdExW(
    InfHandle: ?*opaque{},
    Id: u32,
    Directory: ?*u16,
    Flags: u32,
    Reserved1: u32,
    Reserved2: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetSourceInfoA(
    InfHandle: ?*opaque{},
    SourceId: u32,
    InfoDesired: u32,
    ReturnBuffer: ?*i8,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetSourceInfoW(
    InfHandle: ?*opaque{},
    SourceId: u32,
    InfoDesired: u32,
    ReturnBuffer: ?*u16,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupInstallFileA(
    InfHandle: ?*opaque{},
    InfContext: ?*INFCONTEXT,
    SourceFile: ?*i8,
    SourcePathRoot: ?*i8,
    DestinationName: ?*i8,
    CopyStyle: u32,
    CopyMsgHandler: PSP_FILE_CALLBACK_A,
    Context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupInstallFileW(
    InfHandle: ?*opaque{},
    InfContext: ?*INFCONTEXT,
    SourceFile: ?*u16,
    SourcePathRoot: ?*u16,
    DestinationName: ?*u16,
    CopyStyle: u32,
    CopyMsgHandler: PSP_FILE_CALLBACK_W,
    Context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupInstallFileExA(
    InfHandle: ?*opaque{},
    InfContext: ?*INFCONTEXT,
    SourceFile: ?*i8,
    SourcePathRoot: ?*i8,
    DestinationName: ?*i8,
    CopyStyle: u32,
    CopyMsgHandler: PSP_FILE_CALLBACK_A,
    Context: ?*opaque{},
    FileWasInUse: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupInstallFileExW(
    InfHandle: ?*opaque{},
    InfContext: ?*INFCONTEXT,
    SourceFile: ?*u16,
    SourcePathRoot: ?*u16,
    DestinationName: ?*u16,
    CopyStyle: u32,
    CopyMsgHandler: PSP_FILE_CALLBACK_W,
    Context: ?*opaque{},
    FileWasInUse: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupOpenFileQueue(
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn SetupCloseFileQueue(
    QueueHandle: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupSetFileQueueAlternatePlatformA(
    QueueHandle: ?*opaque{},
    AlternatePlatformInfo: ?*SP_ALTPLATFORM_INFO_V2,
    AlternateDefaultCatalogFile: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupSetFileQueueAlternatePlatformW(
    QueueHandle: ?*opaque{},
    AlternatePlatformInfo: ?*SP_ALTPLATFORM_INFO_V2,
    AlternateDefaultCatalogFile: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupSetPlatformPathOverrideA(
    Override: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupSetPlatformPathOverrideW(
    Override: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQueueCopyA(
    QueueHandle: ?*opaque{},
    SourceRootPath: ?*i8,
    SourcePath: ?*i8,
    SourceFilename: ?*i8,
    SourceDescription: ?*i8,
    SourceTagfile: ?*i8,
    TargetDirectory: ?*i8,
    TargetFilename: ?*i8,
    CopyStyle: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQueueCopyW(
    QueueHandle: ?*opaque{},
    SourceRootPath: ?*u16,
    SourcePath: ?*u16,
    SourceFilename: ?*u16,
    SourceDescription: ?*u16,
    SourceTagfile: ?*u16,
    TargetDirectory: ?*u16,
    TargetFilename: ?*u16,
    CopyStyle: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQueueCopyIndirectA(
    CopyParams: ?*SP_FILE_COPY_PARAMS_A,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQueueCopyIndirectW(
    CopyParams: ?*SP_FILE_COPY_PARAMS_W,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQueueDefaultCopyA(
    QueueHandle: ?*opaque{},
    InfHandle: ?*opaque{},
    SourceRootPath: ?*i8,
    SourceFilename: ?*i8,
    TargetFilename: ?*i8,
    CopyStyle: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQueueDefaultCopyW(
    QueueHandle: ?*opaque{},
    InfHandle: ?*opaque{},
    SourceRootPath: ?*u16,
    SourceFilename: ?*u16,
    TargetFilename: ?*u16,
    CopyStyle: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQueueCopySectionA(
    QueueHandle: ?*opaque{},
    SourceRootPath: ?*i8,
    InfHandle: ?*opaque{},
    ListInfHandle: ?*opaque{},
    Section: ?*i8,
    CopyStyle: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQueueCopySectionW(
    QueueHandle: ?*opaque{},
    SourceRootPath: ?*u16,
    InfHandle: ?*opaque{},
    ListInfHandle: ?*opaque{},
    Section: ?*u16,
    CopyStyle: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQueueDeleteA(
    QueueHandle: ?*opaque{},
    PathPart1: ?*i8,
    PathPart2: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQueueDeleteW(
    QueueHandle: ?*opaque{},
    PathPart1: ?*u16,
    PathPart2: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQueueDeleteSectionA(
    QueueHandle: ?*opaque{},
    InfHandle: ?*opaque{},
    ListInfHandle: ?*opaque{},
    Section: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQueueDeleteSectionW(
    QueueHandle: ?*opaque{},
    InfHandle: ?*opaque{},
    ListInfHandle: ?*opaque{},
    Section: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQueueRenameA(
    QueueHandle: ?*opaque{},
    SourcePath: ?*i8,
    SourceFilename: ?*i8,
    TargetPath: ?*i8,
    TargetFilename: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQueueRenameW(
    QueueHandle: ?*opaque{},
    SourcePath: ?*u16,
    SourceFilename: ?*u16,
    TargetPath: ?*u16,
    TargetFilename: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQueueRenameSectionA(
    QueueHandle: ?*opaque{},
    InfHandle: ?*opaque{},
    ListInfHandle: ?*opaque{},
    Section: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQueueRenameSectionW(
    QueueHandle: ?*opaque{},
    InfHandle: ?*opaque{},
    ListInfHandle: ?*opaque{},
    Section: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupCommitFileQueueA(
    Owner: HWND,
    QueueHandle: ?*opaque{},
    MsgHandler: PSP_FILE_CALLBACK_A,
    Context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupCommitFileQueueW(
    Owner: HWND,
    QueueHandle: ?*opaque{},
    MsgHandler: PSP_FILE_CALLBACK_W,
    Context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupScanFileQueueA(
    FileQueue: ?*opaque{},
    Flags: u32,
    Window: HWND,
    CallbackRoutine: PSP_FILE_CALLBACK_A,
    CallbackContext: ?*opaque{},
    Result: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupScanFileQueueW(
    FileQueue: ?*opaque{},
    Flags: u32,
    Window: HWND,
    CallbackRoutine: PSP_FILE_CALLBACK_W,
    CallbackContext: ?*opaque{},
    Result: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetFileQueueCount(
    FileQueue: ?*opaque{},
    SubQueueFileOp: u32,
    NumOperations: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupGetFileQueueFlags(
    FileQueue: ?*opaque{},
    Flags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupSetFileQueueFlags(
    FileQueue: ?*opaque{},
    FlagMask: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupCopyOEMInfA(
    SourceInfFileName: ?*i8,
    OEMSourceMediaLocation: ?*i8,
    OEMSourceMediaType: u32,
    CopyStyle: u32,
    DestinationInfFileName: ?*i8,
    DestinationInfFileNameSize: u32,
    RequiredSize: ?*u32,
    DestinationInfFileNameComponent: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupCopyOEMInfW(
    SourceInfFileName: ?*u16,
    OEMSourceMediaLocation: ?*u16,
    OEMSourceMediaType: u32,
    CopyStyle: u32,
    DestinationInfFileName: ?*u16,
    DestinationInfFileNameSize: u32,
    RequiredSize: ?*u32,
    DestinationInfFileNameComponent: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn SetupUninstallOEMInfA(
    InfFileName: ?*i8,
    Flags: u32,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn SetupUninstallOEMInfW(
    InfFileName: ?*u16,
    Flags: u32,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupUninstallNewlyCopiedInfs(
    FileQueue: ?*opaque{},
    Flags: u32,
    Reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupCreateDiskSpaceListA(
    Reserved1: ?*opaque{},
    Reserved2: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupCreateDiskSpaceListW(
    Reserved1: ?*opaque{},
    Reserved2: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDuplicateDiskSpaceListA(
    DiskSpace: ?*opaque{},
    Reserved1: ?*opaque{},
    Reserved2: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDuplicateDiskSpaceListW(
    DiskSpace: ?*opaque{},
    Reserved1: ?*opaque{},
    Reserved2: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDestroyDiskSpaceList(
    DiskSpace: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQueryDrivesInDiskSpaceListA(
    DiskSpace: ?*opaque{},
    ReturnBuffer: ?*i8,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQueryDrivesInDiskSpaceListW(
    DiskSpace: ?*opaque{},
    ReturnBuffer: ?*u16,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQuerySpaceRequiredOnDriveA(
    DiskSpace: ?*opaque{},
    DriveSpec: ?*i8,
    SpaceRequired: ?*i64,
    Reserved1: ?*opaque{},
    Reserved2: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQuerySpaceRequiredOnDriveW(
    DiskSpace: ?*opaque{},
    DriveSpec: ?*u16,
    SpaceRequired: ?*i64,
    Reserved1: ?*opaque{},
    Reserved2: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupAdjustDiskSpaceListA(
    DiskSpace: ?*opaque{},
    DriveRoot: ?*i8,
    Amount: i64,
    Reserved1: ?*opaque{},
    Reserved2: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupAdjustDiskSpaceListW(
    DiskSpace: ?*opaque{},
    DriveRoot: ?*u16,
    Amount: i64,
    Reserved1: ?*opaque{},
    Reserved2: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupAddToDiskSpaceListA(
    DiskSpace: ?*opaque{},
    TargetFilespec: ?*i8,
    FileSize: i64,
    Operation: u32,
    Reserved1: ?*opaque{},
    Reserved2: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupAddToDiskSpaceListW(
    DiskSpace: ?*opaque{},
    TargetFilespec: ?*u16,
    FileSize: i64,
    Operation: u32,
    Reserved1: ?*opaque{},
    Reserved2: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupAddSectionToDiskSpaceListA(
    DiskSpace: ?*opaque{},
    InfHandle: ?*opaque{},
    ListInfHandle: ?*opaque{},
    SectionName: ?*i8,
    Operation: u32,
    Reserved1: ?*opaque{},
    Reserved2: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupAddSectionToDiskSpaceListW(
    DiskSpace: ?*opaque{},
    InfHandle: ?*opaque{},
    ListInfHandle: ?*opaque{},
    SectionName: ?*u16,
    Operation: u32,
    Reserved1: ?*opaque{},
    Reserved2: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupAddInstallSectionToDiskSpaceListA(
    DiskSpace: ?*opaque{},
    InfHandle: ?*opaque{},
    LayoutInfHandle: ?*opaque{},
    SectionName: ?*i8,
    Reserved1: ?*opaque{},
    Reserved2: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupAddInstallSectionToDiskSpaceListW(
    DiskSpace: ?*opaque{},
    InfHandle: ?*opaque{},
    LayoutInfHandle: ?*opaque{},
    SectionName: ?*u16,
    Reserved1: ?*opaque{},
    Reserved2: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupRemoveFromDiskSpaceListA(
    DiskSpace: ?*opaque{},
    TargetFilespec: ?*i8,
    Operation: u32,
    Reserved1: ?*opaque{},
    Reserved2: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupRemoveFromDiskSpaceListW(
    DiskSpace: ?*opaque{},
    TargetFilespec: ?*u16,
    Operation: u32,
    Reserved1: ?*opaque{},
    Reserved2: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupRemoveSectionFromDiskSpaceListA(
    DiskSpace: ?*opaque{},
    InfHandle: ?*opaque{},
    ListInfHandle: ?*opaque{},
    SectionName: ?*i8,
    Operation: u32,
    Reserved1: ?*opaque{},
    Reserved2: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupRemoveSectionFromDiskSpaceListW(
    DiskSpace: ?*opaque{},
    InfHandle: ?*opaque{},
    ListInfHandle: ?*opaque{},
    SectionName: ?*u16,
    Operation: u32,
    Reserved1: ?*opaque{},
    Reserved2: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupRemoveInstallSectionFromDiskSpaceListA(
    DiskSpace: ?*opaque{},
    InfHandle: ?*opaque{},
    LayoutInfHandle: ?*opaque{},
    SectionName: ?*i8,
    Reserved1: ?*opaque{},
    Reserved2: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupRemoveInstallSectionFromDiskSpaceListW(
    DiskSpace: ?*opaque{},
    InfHandle: ?*opaque{},
    LayoutInfHandle: ?*opaque{},
    SectionName: ?*u16,
    Reserved1: ?*opaque{},
    Reserved2: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupIterateCabinetA(
    CabinetFile: ?*i8,
    Reserved: u32,
    MsgHandler: PSP_FILE_CALLBACK_A,
    Context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupIterateCabinetW(
    CabinetFile: ?*u16,
    Reserved: u32,
    MsgHandler: PSP_FILE_CALLBACK_W,
    Context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupPromptReboot(
    FileQueue: ?*opaque{},
    Owner: HWND,
    ScanOnly: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupInitDefaultQueueCallback(
    OwnerWindow: HWND,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn SetupInitDefaultQueueCallbackEx(
    OwnerWindow: HWND,
    AlternateProgressWindow: HWND,
    ProgressMessage: u32,
    Reserved1: u32,
    Reserved2: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupTermDefaultQueueCallback(
    Context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDefaultQueueCallbackA(
    Context: ?*opaque{},
    Notification: u32,
    Param1: ?*opaque{},
    Param2: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDefaultQueueCallbackW(
    Context: ?*opaque{},
    Notification: u32,
    Param1: ?*opaque{},
    Param2: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupInstallFromInfSectionA(
    Owner: HWND,
    InfHandle: ?*opaque{},
    SectionName: ?*i8,
    Flags: u32,
    RelativeKeyRoot: HKEY,
    SourceRootPath: ?*i8,
    CopyFlags: u32,
    MsgHandler: PSP_FILE_CALLBACK_A,
    Context: ?*opaque{},
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupInstallFromInfSectionW(
    Owner: HWND,
    InfHandle: ?*opaque{},
    SectionName: ?*u16,
    Flags: u32,
    RelativeKeyRoot: HKEY,
    SourceRootPath: ?*u16,
    CopyFlags: u32,
    MsgHandler: PSP_FILE_CALLBACK_W,
    Context: ?*opaque{},
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupInstallFilesFromInfSectionA(
    InfHandle: ?*opaque{},
    LayoutInfHandle: ?*opaque{},
    FileQueue: ?*opaque{},
    SectionName: ?*i8,
    SourceRootPath: ?*i8,
    CopyFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupInstallFilesFromInfSectionW(
    InfHandle: ?*opaque{},
    LayoutInfHandle: ?*opaque{},
    FileQueue: ?*opaque{},
    SectionName: ?*u16,
    SourceRootPath: ?*u16,
    CopyFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupInstallServicesFromInfSectionA(
    InfHandle: ?*opaque{},
    SectionName: ?*i8,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupInstallServicesFromInfSectionW(
    InfHandle: ?*opaque{},
    SectionName: ?*u16,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupInstallServicesFromInfSectionExA(
    InfHandle: ?*opaque{},
    SectionName: ?*i8,
    Flags: u32,
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    Reserved1: ?*opaque{},
    Reserved2: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupInstallServicesFromInfSectionExW(
    InfHandle: ?*opaque{},
    SectionName: ?*u16,
    Flags: u32,
    DeviceInfoSet: ?*opaque{},
    DeviceInfoData: ?*SP_DEVINFO_DATA,
    Reserved1: ?*opaque{},
    Reserved2: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn InstallHinfSectionA(
    Window: HWND,
    ModuleHandle: HINSTANCE,
    CommandLine: ?*i8,
    ShowCommand: i32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn InstallHinfSectionW(
    Window: HWND,
    ModuleHandle: HINSTANCE,
    CommandLine: ?*u16,
    ShowCommand: i32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupInitializeFileLogA(
    LogFileName: ?*i8,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupInitializeFileLogW(
    LogFileName: ?*u16,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupTerminateFileLog(
    FileLogHandle: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupLogFileA(
    FileLogHandle: ?*opaque{},
    LogSectionName: ?*i8,
    SourceFilename: ?*i8,
    TargetFilename: ?*i8,
    Checksum: u32,
    DiskTagfile: ?*i8,
    DiskDescription: ?*i8,
    OtherInfo: ?*i8,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupLogFileW(
    FileLogHandle: ?*opaque{},
    LogSectionName: ?*u16,
    SourceFilename: ?*u16,
    TargetFilename: ?*u16,
    Checksum: u32,
    DiskTagfile: ?*u16,
    DiskDescription: ?*u16,
    OtherInfo: ?*u16,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupRemoveFileLogEntryA(
    FileLogHandle: ?*opaque{},
    LogSectionName: ?*i8,
    TargetFilename: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupRemoveFileLogEntryW(
    FileLogHandle: ?*opaque{},
    LogSectionName: ?*u16,
    TargetFilename: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQueryFileLogA(
    FileLogHandle: ?*opaque{},
    LogSectionName: ?*i8,
    TargetFilename: ?*i8,
    DesiredInfo: SetupFileLogInfo,
    DataOut: ?*i8,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupQueryFileLogW(
    FileLogHandle: ?*opaque{},
    LogSectionName: ?*u16,
    TargetFilename: ?*u16,
    DesiredInfo: SetupFileLogInfo,
    DataOut: ?*u16,
    ReturnBufferSize: u32,
    RequiredSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupOpenLog(
    Erase: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupLogErrorA(
    MessageString: ?*i8,
    Severity: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupLogErrorW(
    MessageString: ?*u16,
    Severity: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn SetupCloseLog(
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupDiGetClassDevsA(
    ClassGuid: ?*Guid,
    Enumerator: ?*i8,
    hwndParent: HWND,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupEnumInfSectionsA(
    InfHandle: ?*opaque{},
    Index: u32,
    Buffer: ?*i8,
    Size: u32,
    SizeNeeded: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "SETUPAPI" fn SetupEnumInfSectionsW(
    InfHandle: ?*opaque{},
    Index: u32,
    Buffer: ?*u16,
    Size: u32,
    SizeNeeded: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn SetupVerifyInfFileA(
    InfName: ?*i8,
    AltPlatformInfo: ?*SP_ALTPLATFORM_INFO_V2,
    InfSignerInfo: ?*SP_INF_SIGNER_INFO_V2_A,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn SetupVerifyInfFileW(
    InfName: ?*u16,
    AltPlatformInfo: ?*SP_ALTPLATFORM_INFO_V2,
    InfSignerInfo: ?*SP_INF_SIGNER_INFO_V2_W,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn SetupConfigureWmiFromInfSectionA(
    InfHandle: ?*opaque{},
    SectionName: ?*i8,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "SETUPAPI" fn SetupConfigureWmiFromInfSectionW(
    InfHandle: ?*opaque{},
    SectionName: ?*u16,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateActCtxA(
    pActCtx: ?*ACTCTXA,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateActCtxW(
    pActCtx: ?*ACTCTXW,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn AddRefActCtx(
    hActCtx: HANDLE,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn ReleaseActCtx(
    hActCtx: HANDLE,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ZombifyActCtx(
    hActCtx: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ActivateActCtx(
    hActCtx: HANDLE,
    lpCookie: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DeactivateActCtx(
    dwFlags: u32,
    ulCookie: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetCurrentActCtx(
    lphActCtx: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindActCtxSectionStringA(
    dwFlags: u32,
    lpExtensionGuid: ?*Guid,
    ulSectionId: u32,
    lpStringToFind: ?*i8,
    ReturnedData: ?*ACTCTX_SECTION_KEYED_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindActCtxSectionStringW(
    dwFlags: u32,
    lpExtensionGuid: ?*Guid,
    ulSectionId: u32,
    lpStringToFind: ?*u16,
    ReturnedData: ?*ACTCTX_SECTION_KEYED_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindActCtxSectionGuid(
    dwFlags: u32,
    lpExtensionGuid: ?*Guid,
    ulSectionId: u32,
    lpGuidToFind: ?*Guid,
    ReturnedData: ?*ACTCTX_SECTION_KEYED_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn QueryActCtxW(
    dwFlags: u32,
    hActCtx: HANDLE,
    pvSubInstance: ?*opaque{},
    ulInfoClass: u32,
    pvBuffer: ?*opaque{},
    cbBuffer: ?*opaque{},
    pcbWrittenOrRequired: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn QueryActCtxSettingsW(
    dwFlags: u32,
    hActCtx: HANDLE,
    settingsNameSpace: ?*u16,
    settingName: ?*u16,
    pvBuffer: ?*u16,
    dwBuffer: ?*opaque{},
    pdwWrittenOrRequired: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const INSTALLUI_HANDLER = INSTALLUI_HANDLERA;
        pub const MSIPATCHSEQUENCEINFO = MSIPATCHSEQUENCEINFOA;
        pub const SP_ORIGINAL_FILE_INFO_ = SP_ORIGINAL_FILE_INFO_A;
        pub const PSP_FILE_CALLBACK_ = PSP_FILE_CALLBACK_A;
        pub const FILEPATHS_ = FILEPATHS_A;
        pub const FILEPATHS_SIGNERINFO_ = FILEPATHS_SIGNERINFO_A;
        pub const SOURCE_MEDIA_ = SOURCE_MEDIA_A;
        pub const CABINET_INFO_ = CABINET_INFO_A;
        pub const FILE_IN_CABINET_INFO_ = FILE_IN_CABINET_INFO_A;
        pub const SP_REGISTER_CONTROL_STATUS = SP_REGISTER_CONTROL_STATUSA;
        pub const SP_FILE_COPY_PARAMS_ = SP_FILE_COPY_PARAMS_A;
        pub const SP_INF_SIGNER_INFO_V1_ = SP_INF_SIGNER_INFO_V1_A;
        pub const SP_INF_SIGNER_INFO_V2_ = SP_INF_SIGNER_INFO_V2_A;
        pub const ACTCTX = ACTCTXA;
        pub const MsiSetExternalUI = MsiSetExternalUIA;
        pub const MsiEnableLog = MsiEnableLogA;
        pub const MsiQueryProductState = MsiQueryProductStateA;
        pub const MsiGetProductInfo = MsiGetProductInfoA;
        pub const MsiGetProductInfoEx = MsiGetProductInfoExA;
        pub const MsiInstallProduct = MsiInstallProductA;
        pub const MsiConfigureProduct = MsiConfigureProductA;
        pub const MsiConfigureProductEx = MsiConfigureProductExA;
        pub const MsiReinstallProduct = MsiReinstallProductA;
        pub const MsiAdvertiseProductEx = MsiAdvertiseProductExA;
        pub const MsiAdvertiseProduct = MsiAdvertiseProductA;
        pub const MsiProcessAdvertiseScript = MsiProcessAdvertiseScriptA;
        pub const MsiAdvertiseScript = MsiAdvertiseScriptA;
        pub const MsiGetProductInfoFromScript = MsiGetProductInfoFromScriptA;
        pub const MsiGetProductCode = MsiGetProductCodeA;
        pub const MsiGetUserInfo = MsiGetUserInfoA;
        pub const MsiCollectUserInfo = MsiCollectUserInfoA;
        pub const MsiApplyPatch = MsiApplyPatchA;
        pub const MsiGetPatchInfo = MsiGetPatchInfoA;
        pub const MsiEnumPatches = MsiEnumPatchesA;
        pub const MsiRemovePatches = MsiRemovePatchesA;
        pub const MsiExtractPatchXMLData = MsiExtractPatchXMLDataA;
        pub const MsiGetPatchInfoEx = MsiGetPatchInfoExA;
        pub const MsiApplyMultiplePatches = MsiApplyMultiplePatchesA;
        pub const MsiDeterminePatchSequence = MsiDeterminePatchSequenceA;
        pub const MsiDetermineApplicablePatches = MsiDetermineApplicablePatchesA;
        pub const MsiEnumPatchesEx = MsiEnumPatchesExA;
        pub const MsiQueryFeatureState = MsiQueryFeatureStateA;
        pub const MsiQueryFeatureStateEx = MsiQueryFeatureStateExA;
        pub const MsiUseFeature = MsiUseFeatureA;
        pub const MsiUseFeatureEx = MsiUseFeatureExA;
        pub const MsiGetFeatureUsage = MsiGetFeatureUsageA;
        pub const MsiConfigureFeature = MsiConfigureFeatureA;
        pub const MsiReinstallFeature = MsiReinstallFeatureA;
        pub const MsiProvideComponent = MsiProvideComponentA;
        pub const MsiProvideQualifiedComponent = MsiProvideQualifiedComponentA;
        pub const MsiProvideQualifiedComponentEx = MsiProvideQualifiedComponentExA;
        pub const MsiGetComponentPath = MsiGetComponentPathA;
        pub const MsiGetComponentPathEx = MsiGetComponentPathExA;
        pub const MsiProvideAssembly = MsiProvideAssemblyA;
        pub const MsiQueryComponentState = MsiQueryComponentStateA;
        pub const MsiEnumProducts = MsiEnumProductsA;
        pub const MsiEnumProductsEx = MsiEnumProductsExA;
        pub const MsiEnumRelatedProducts = MsiEnumRelatedProductsA;
        pub const MsiEnumFeatures = MsiEnumFeaturesA;
        pub const MsiEnumComponents = MsiEnumComponentsA;
        pub const MsiEnumComponentsEx = MsiEnumComponentsExA;
        pub const MsiEnumClients = MsiEnumClientsA;
        pub const MsiEnumClientsEx = MsiEnumClientsExA;
        pub const MsiEnumComponentQualifiers = MsiEnumComponentQualifiersA;
        pub const MsiOpenProduct = MsiOpenProductA;
        pub const MsiOpenPackage = MsiOpenPackageA;
        pub const MsiOpenPackageEx = MsiOpenPackageExA;
        pub const MsiGetPatchFileList = MsiGetPatchFileListA;
        pub const MsiGetProductProperty = MsiGetProductPropertyA;
        pub const MsiVerifyPackage = MsiVerifyPackageA;
        pub const MsiGetFeatureInfo = MsiGetFeatureInfoA;
        pub const MsiInstallMissingComponent = MsiInstallMissingComponentA;
        pub const MsiInstallMissingFile = MsiInstallMissingFileA;
        pub const MsiLocateComponent = MsiLocateComponentA;
        pub const MsiSourceListClearAll = MsiSourceListClearAllA;
        pub const MsiSourceListAddSource = MsiSourceListAddSourceA;
        pub const MsiSourceListForceResolution = MsiSourceListForceResolutionA;
        pub const MsiSourceListAddSourceEx = MsiSourceListAddSourceExA;
        pub const MsiSourceListAddMediaDisk = MsiSourceListAddMediaDiskA;
        pub const MsiSourceListClearSource = MsiSourceListClearSourceA;
        pub const MsiSourceListClearMediaDisk = MsiSourceListClearMediaDiskA;
        pub const MsiSourceListClearAllEx = MsiSourceListClearAllExA;
        pub const MsiSourceListForceResolutionEx = MsiSourceListForceResolutionExA;
        pub const MsiSourceListSetInfo = MsiSourceListSetInfoA;
        pub const MsiSourceListGetInfo = MsiSourceListGetInfoA;
        pub const MsiSourceListEnumSources = MsiSourceListEnumSourcesA;
        pub const MsiSourceListEnumMediaDisks = MsiSourceListEnumMediaDisksA;
        pub const MsiGetFileVersion = MsiGetFileVersionA;
        pub const MsiGetFileHash = MsiGetFileHashA;
        pub const MsiGetFileSignatureInformation = MsiGetFileSignatureInformationA;
        pub const MsiGetShortcutTarget = MsiGetShortcutTargetA;
        pub const MsiIsProductElevated = MsiIsProductElevatedA;
        pub const MsiNotifySidChange = MsiNotifySidChangeA;
        pub const MsiBeginTransaction = MsiBeginTransactionA;
        pub const MsiDatabaseOpenView = MsiDatabaseOpenViewA;
        pub const MsiViewGetError = MsiViewGetErrorA;
        pub const MsiDatabaseGetPrimaryKeys = MsiDatabaseGetPrimaryKeysA;
        pub const MsiDatabaseIsTablePersistent = MsiDatabaseIsTablePersistentA;
        pub const MsiGetSummaryInformation = MsiGetSummaryInformationA;
        pub const MsiSummaryInfoSetProperty = MsiSummaryInfoSetPropertyA;
        pub const MsiSummaryInfoGetProperty = MsiSummaryInfoGetPropertyA;
        pub const MsiOpenDatabase = MsiOpenDatabaseA;
        pub const MsiDatabaseImport = MsiDatabaseImportA;
        pub const MsiDatabaseExport = MsiDatabaseExportA;
        pub const MsiDatabaseMerge = MsiDatabaseMergeA;
        pub const MsiDatabaseGenerateTransform = MsiDatabaseGenerateTransformA;
        pub const MsiDatabaseApplyTransform = MsiDatabaseApplyTransformA;
        pub const MsiCreateTransformSummaryInfo = MsiCreateTransformSummaryInfoA;
        pub const MsiRecordSetString = MsiRecordSetStringA;
        pub const MsiRecordGetString = MsiRecordGetStringA;
        pub const MsiRecordSetStream = MsiRecordSetStreamA;
        pub const MsiSetProperty = MsiSetPropertyA;
        pub const MsiGetProperty = MsiGetPropertyA;
        pub const MsiFormatRecord = MsiFormatRecordA;
        pub const MsiDoAction = MsiDoActionA;
        pub const MsiSequence = MsiSequenceA;
        pub const MsiEvaluateCondition = MsiEvaluateConditionA;
        pub const MsiGetFeatureState = MsiGetFeatureStateA;
        pub const MsiSetFeatureState = MsiSetFeatureStateA;
        pub const MsiSetFeatureAttributes = MsiSetFeatureAttributesA;
        pub const MsiGetComponentState = MsiGetComponentStateA;
        pub const MsiSetComponentState = MsiSetComponentStateA;
        pub const MsiGetFeatureCost = MsiGetFeatureCostA;
        pub const MsiEnumComponentCosts = MsiEnumComponentCostsA;
        pub const MsiGetFeatureValidStates = MsiGetFeatureValidStatesA;
        pub const MsiGetSourcePath = MsiGetSourcePathA;
        pub const MsiGetTargetPath = MsiGetTargetPathA;
        pub const MsiSetTargetPath = MsiSetTargetPathA;
        pub const MsiPreviewDialog = MsiPreviewDialogA;
        pub const MsiPreviewBillboard = MsiPreviewBillboardA;
        pub const SetupGetInfInformation = SetupGetInfInformationA;
        pub const SetupQueryInfFileInformation = SetupQueryInfFileInformationA;
        pub const SetupQueryInfOriginalFileInformation = SetupQueryInfOriginalFileInformationA;
        pub const SetupQueryInfVersionInformation = SetupQueryInfVersionInformationA;
        pub const SetupGetInfFileList = SetupGetInfFileListA;
        pub const SetupOpenInfFile = SetupOpenInfFileA;
        pub const SetupOpenAppendInfFile = SetupOpenAppendInfFileA;
        pub const SetupFindFirstLine = SetupFindFirstLineA;
        pub const SetupFindNextMatchLine = SetupFindNextMatchLineA;
        pub const SetupGetLineByIndex = SetupGetLineByIndexA;
        pub const SetupGetLineCount = SetupGetLineCountA;
        pub const SetupGetLineText = SetupGetLineTextA;
        pub const SetupGetStringField = SetupGetStringFieldA;
        pub const SetupGetMultiSzField = SetupGetMultiSzFieldA;
        pub const SetupGetFileCompressionInfo = SetupGetFileCompressionInfoA;
        pub const SetupGetFileCompressionInfoEx = SetupGetFileCompressionInfoExA;
        pub const SetupDecompressOrCopyFile = SetupDecompressOrCopyFileA;
        pub const SetupGetSourceFileLocation = SetupGetSourceFileLocationA;
        pub const SetupGetSourceFileSize = SetupGetSourceFileSizeA;
        pub const SetupGetTargetPath = SetupGetTargetPathA;
        pub const SetupSetSourceList = SetupSetSourceListA;
        pub const SetupAddToSourceList = SetupAddToSourceListA;
        pub const SetupRemoveFromSourceList = SetupRemoveFromSourceListA;
        pub const SetupQuerySourceList = SetupQuerySourceListA;
        pub const SetupFreeSourceList = SetupFreeSourceListA;
        pub const SetupPromptForDisk = SetupPromptForDiskA;
        pub const SetupCopyError = SetupCopyErrorA;
        pub const SetupRenameError = SetupRenameErrorA;
        pub const SetupDeleteError = SetupDeleteErrorA;
        pub const SetupBackupError = SetupBackupErrorA;
        pub const SetupSetDirectoryId = SetupSetDirectoryIdA;
        pub const SetupSetDirectoryIdEx = SetupSetDirectoryIdExA;
        pub const SetupGetSourceInfo = SetupGetSourceInfoA;
        pub const SetupInstallFile = SetupInstallFileA;
        pub const SetupInstallFileEx = SetupInstallFileExA;
        pub const SetupSetFileQueueAlternatePlatform = SetupSetFileQueueAlternatePlatformA;
        pub const SetupSetPlatformPathOverride = SetupSetPlatformPathOverrideA;
        pub const SetupQueueCopy = SetupQueueCopyA;
        pub const SetupQueueCopyIndirect = SetupQueueCopyIndirectA;
        pub const SetupQueueDefaultCopy = SetupQueueDefaultCopyA;
        pub const SetupQueueCopySection = SetupQueueCopySectionA;
        pub const SetupQueueDelete = SetupQueueDeleteA;
        pub const SetupQueueDeleteSection = SetupQueueDeleteSectionA;
        pub const SetupQueueRename = SetupQueueRenameA;
        pub const SetupQueueRenameSection = SetupQueueRenameSectionA;
        pub const SetupCommitFileQueue = SetupCommitFileQueueA;
        pub const SetupScanFileQueue = SetupScanFileQueueA;
        pub const SetupCopyOEMInf = SetupCopyOEMInfA;
        pub const SetupUninstallOEMInf = SetupUninstallOEMInfA;
        pub const SetupCreateDiskSpaceList = SetupCreateDiskSpaceListA;
        pub const SetupDuplicateDiskSpaceList = SetupDuplicateDiskSpaceListA;
        pub const SetupQueryDrivesInDiskSpaceList = SetupQueryDrivesInDiskSpaceListA;
        pub const SetupQuerySpaceRequiredOnDrive = SetupQuerySpaceRequiredOnDriveA;
        pub const SetupAdjustDiskSpaceList = SetupAdjustDiskSpaceListA;
        pub const SetupAddToDiskSpaceList = SetupAddToDiskSpaceListA;
        pub const SetupAddSectionToDiskSpaceList = SetupAddSectionToDiskSpaceListA;
        pub const SetupAddInstallSectionToDiskSpaceList = SetupAddInstallSectionToDiskSpaceListA;
        pub const SetupRemoveFromDiskSpaceList = SetupRemoveFromDiskSpaceListA;
        pub const SetupRemoveSectionFromDiskSpaceList = SetupRemoveSectionFromDiskSpaceListA;
        pub const SetupRemoveInstallSectionFromDiskSpaceList = SetupRemoveInstallSectionFromDiskSpaceListA;
        pub const SetupIterateCabinet = SetupIterateCabinetA;
        pub const SetupDefaultQueueCallback = SetupDefaultQueueCallbackA;
        pub const SetupInstallFromInfSection = SetupInstallFromInfSectionA;
        pub const SetupInstallFilesFromInfSection = SetupInstallFilesFromInfSectionA;
        pub const SetupInstallServicesFromInfSection = SetupInstallServicesFromInfSectionA;
        pub const SetupInstallServicesFromInfSectionEx = SetupInstallServicesFromInfSectionExA;
        pub const InstallHinfSection = InstallHinfSectionA;
        pub const SetupInitializeFileLog = SetupInitializeFileLogA;
        pub const SetupLogFile = SetupLogFileA;
        pub const SetupRemoveFileLogEntry = SetupRemoveFileLogEntryA;
        pub const SetupQueryFileLog = SetupQueryFileLogA;
        pub const SetupLogError = SetupLogErrorA;
        pub const SetupEnumInfSections = SetupEnumInfSectionsA;
        pub const SetupVerifyInfFile = SetupVerifyInfFileA;
        pub const SetupConfigureWmiFromInfSection = SetupConfigureWmiFromInfSectionA;
        pub const CreateActCtx = CreateActCtxA;
        pub const FindActCtxSectionString = FindActCtxSectionStringA;
    },
    .wide => struct {
        pub const INSTALLUI_HANDLER = INSTALLUI_HANDLERW;
        pub const MSIPATCHSEQUENCEINFO = MSIPATCHSEQUENCEINFOW;
        pub const SP_ORIGINAL_FILE_INFO_ = SP_ORIGINAL_FILE_INFO_W;
        pub const PSP_FILE_CALLBACK_ = PSP_FILE_CALLBACK_W;
        pub const FILEPATHS_ = FILEPATHS_W;
        pub const FILEPATHS_SIGNERINFO_ = FILEPATHS_SIGNERINFO_W;
        pub const SOURCE_MEDIA_ = SOURCE_MEDIA_W;
        pub const CABINET_INFO_ = CABINET_INFO_W;
        pub const FILE_IN_CABINET_INFO_ = FILE_IN_CABINET_INFO_W;
        pub const SP_REGISTER_CONTROL_STATUS = SP_REGISTER_CONTROL_STATUSW;
        pub const SP_FILE_COPY_PARAMS_ = SP_FILE_COPY_PARAMS_W;
        pub const SP_INF_SIGNER_INFO_V1_ = SP_INF_SIGNER_INFO_V1_W;
        pub const SP_INF_SIGNER_INFO_V2_ = SP_INF_SIGNER_INFO_V2_W;
        pub const ACTCTX = ACTCTXW;
        pub const MsiSetExternalUI = MsiSetExternalUIW;
        pub const MsiEnableLog = MsiEnableLogW;
        pub const MsiQueryProductState = MsiQueryProductStateW;
        pub const MsiGetProductInfo = MsiGetProductInfoW;
        pub const MsiGetProductInfoEx = MsiGetProductInfoExW;
        pub const MsiInstallProduct = MsiInstallProductW;
        pub const MsiConfigureProduct = MsiConfigureProductW;
        pub const MsiConfigureProductEx = MsiConfigureProductExW;
        pub const MsiReinstallProduct = MsiReinstallProductW;
        pub const MsiAdvertiseProductEx = MsiAdvertiseProductExW;
        pub const MsiAdvertiseProduct = MsiAdvertiseProductW;
        pub const MsiProcessAdvertiseScript = MsiProcessAdvertiseScriptW;
        pub const MsiAdvertiseScript = MsiAdvertiseScriptW;
        pub const MsiGetProductInfoFromScript = MsiGetProductInfoFromScriptW;
        pub const MsiGetProductCode = MsiGetProductCodeW;
        pub const MsiGetUserInfo = MsiGetUserInfoW;
        pub const MsiCollectUserInfo = MsiCollectUserInfoW;
        pub const MsiApplyPatch = MsiApplyPatchW;
        pub const MsiGetPatchInfo = MsiGetPatchInfoW;
        pub const MsiEnumPatches = MsiEnumPatchesW;
        pub const MsiRemovePatches = MsiRemovePatchesW;
        pub const MsiExtractPatchXMLData = MsiExtractPatchXMLDataW;
        pub const MsiGetPatchInfoEx = MsiGetPatchInfoExW;
        pub const MsiApplyMultiplePatches = MsiApplyMultiplePatchesW;
        pub const MsiDeterminePatchSequence = MsiDeterminePatchSequenceW;
        pub const MsiDetermineApplicablePatches = MsiDetermineApplicablePatchesW;
        pub const MsiEnumPatchesEx = MsiEnumPatchesExW;
        pub const MsiQueryFeatureState = MsiQueryFeatureStateW;
        pub const MsiQueryFeatureStateEx = MsiQueryFeatureStateExW;
        pub const MsiUseFeature = MsiUseFeatureW;
        pub const MsiUseFeatureEx = MsiUseFeatureExW;
        pub const MsiGetFeatureUsage = MsiGetFeatureUsageW;
        pub const MsiConfigureFeature = MsiConfigureFeatureW;
        pub const MsiReinstallFeature = MsiReinstallFeatureW;
        pub const MsiProvideComponent = MsiProvideComponentW;
        pub const MsiProvideQualifiedComponent = MsiProvideQualifiedComponentW;
        pub const MsiProvideQualifiedComponentEx = MsiProvideQualifiedComponentExW;
        pub const MsiGetComponentPath = MsiGetComponentPathW;
        pub const MsiGetComponentPathEx = MsiGetComponentPathExW;
        pub const MsiProvideAssembly = MsiProvideAssemblyW;
        pub const MsiQueryComponentState = MsiQueryComponentStateW;
        pub const MsiEnumProducts = MsiEnumProductsW;
        pub const MsiEnumProductsEx = MsiEnumProductsExW;
        pub const MsiEnumRelatedProducts = MsiEnumRelatedProductsW;
        pub const MsiEnumFeatures = MsiEnumFeaturesW;
        pub const MsiEnumComponents = MsiEnumComponentsW;
        pub const MsiEnumComponentsEx = MsiEnumComponentsExW;
        pub const MsiEnumClients = MsiEnumClientsW;
        pub const MsiEnumClientsEx = MsiEnumClientsExW;
        pub const MsiEnumComponentQualifiers = MsiEnumComponentQualifiersW;
        pub const MsiOpenProduct = MsiOpenProductW;
        pub const MsiOpenPackage = MsiOpenPackageW;
        pub const MsiOpenPackageEx = MsiOpenPackageExW;
        pub const MsiGetPatchFileList = MsiGetPatchFileListW;
        pub const MsiGetProductProperty = MsiGetProductPropertyW;
        pub const MsiVerifyPackage = MsiVerifyPackageW;
        pub const MsiGetFeatureInfo = MsiGetFeatureInfoW;
        pub const MsiInstallMissingComponent = MsiInstallMissingComponentW;
        pub const MsiInstallMissingFile = MsiInstallMissingFileW;
        pub const MsiLocateComponent = MsiLocateComponentW;
        pub const MsiSourceListClearAll = MsiSourceListClearAllW;
        pub const MsiSourceListAddSource = MsiSourceListAddSourceW;
        pub const MsiSourceListForceResolution = MsiSourceListForceResolutionW;
        pub const MsiSourceListAddSourceEx = MsiSourceListAddSourceExW;
        pub const MsiSourceListAddMediaDisk = MsiSourceListAddMediaDiskW;
        pub const MsiSourceListClearSource = MsiSourceListClearSourceW;
        pub const MsiSourceListClearMediaDisk = MsiSourceListClearMediaDiskW;
        pub const MsiSourceListClearAllEx = MsiSourceListClearAllExW;
        pub const MsiSourceListForceResolutionEx = MsiSourceListForceResolutionExW;
        pub const MsiSourceListSetInfo = MsiSourceListSetInfoW;
        pub const MsiSourceListGetInfo = MsiSourceListGetInfoW;
        pub const MsiSourceListEnumSources = MsiSourceListEnumSourcesW;
        pub const MsiSourceListEnumMediaDisks = MsiSourceListEnumMediaDisksW;
        pub const MsiGetFileVersion = MsiGetFileVersionW;
        pub const MsiGetFileHash = MsiGetFileHashW;
        pub const MsiGetFileSignatureInformation = MsiGetFileSignatureInformationW;
        pub const MsiGetShortcutTarget = MsiGetShortcutTargetW;
        pub const MsiIsProductElevated = MsiIsProductElevatedW;
        pub const MsiNotifySidChange = MsiNotifySidChangeW;
        pub const MsiBeginTransaction = MsiBeginTransactionW;
        pub const MsiDatabaseOpenView = MsiDatabaseOpenViewW;
        pub const MsiViewGetError = MsiViewGetErrorW;
        pub const MsiDatabaseGetPrimaryKeys = MsiDatabaseGetPrimaryKeysW;
        pub const MsiDatabaseIsTablePersistent = MsiDatabaseIsTablePersistentW;
        pub const MsiGetSummaryInformation = MsiGetSummaryInformationW;
        pub const MsiSummaryInfoSetProperty = MsiSummaryInfoSetPropertyW;
        pub const MsiSummaryInfoGetProperty = MsiSummaryInfoGetPropertyW;
        pub const MsiOpenDatabase = MsiOpenDatabaseW;
        pub const MsiDatabaseImport = MsiDatabaseImportW;
        pub const MsiDatabaseExport = MsiDatabaseExportW;
        pub const MsiDatabaseMerge = MsiDatabaseMergeW;
        pub const MsiDatabaseGenerateTransform = MsiDatabaseGenerateTransformW;
        pub const MsiDatabaseApplyTransform = MsiDatabaseApplyTransformW;
        pub const MsiCreateTransformSummaryInfo = MsiCreateTransformSummaryInfoW;
        pub const MsiRecordSetString = MsiRecordSetStringW;
        pub const MsiRecordGetString = MsiRecordGetStringW;
        pub const MsiRecordSetStream = MsiRecordSetStreamW;
        pub const MsiSetProperty = MsiSetPropertyW;
        pub const MsiGetProperty = MsiGetPropertyW;
        pub const MsiFormatRecord = MsiFormatRecordW;
        pub const MsiDoAction = MsiDoActionW;
        pub const MsiSequence = MsiSequenceW;
        pub const MsiEvaluateCondition = MsiEvaluateConditionW;
        pub const MsiGetFeatureState = MsiGetFeatureStateW;
        pub const MsiSetFeatureState = MsiSetFeatureStateW;
        pub const MsiSetFeatureAttributes = MsiSetFeatureAttributesW;
        pub const MsiGetComponentState = MsiGetComponentStateW;
        pub const MsiSetComponentState = MsiSetComponentStateW;
        pub const MsiGetFeatureCost = MsiGetFeatureCostW;
        pub const MsiEnumComponentCosts = MsiEnumComponentCostsW;
        pub const MsiGetFeatureValidStates = MsiGetFeatureValidStatesW;
        pub const MsiGetSourcePath = MsiGetSourcePathW;
        pub const MsiGetTargetPath = MsiGetTargetPathW;
        pub const MsiSetTargetPath = MsiSetTargetPathW;
        pub const MsiPreviewDialog = MsiPreviewDialogW;
        pub const MsiPreviewBillboard = MsiPreviewBillboardW;
        pub const SetupGetInfInformation = SetupGetInfInformationW;
        pub const SetupQueryInfFileInformation = SetupQueryInfFileInformationW;
        pub const SetupQueryInfOriginalFileInformation = SetupQueryInfOriginalFileInformationW;
        pub const SetupQueryInfVersionInformation = SetupQueryInfVersionInformationW;
        pub const SetupGetInfFileList = SetupGetInfFileListW;
        pub const SetupOpenInfFile = SetupOpenInfFileW;
        pub const SetupOpenAppendInfFile = SetupOpenAppendInfFileW;
        pub const SetupFindFirstLine = SetupFindFirstLineW;
        pub const SetupFindNextMatchLine = SetupFindNextMatchLineW;
        pub const SetupGetLineByIndex = SetupGetLineByIndexW;
        pub const SetupGetLineCount = SetupGetLineCountW;
        pub const SetupGetLineText = SetupGetLineTextW;
        pub const SetupGetStringField = SetupGetStringFieldW;
        pub const SetupGetMultiSzField = SetupGetMultiSzFieldW;
        pub const SetupGetFileCompressionInfo = SetupGetFileCompressionInfoW;
        pub const SetupGetFileCompressionInfoEx = SetupGetFileCompressionInfoExW;
        pub const SetupDecompressOrCopyFile = SetupDecompressOrCopyFileW;
        pub const SetupGetSourceFileLocation = SetupGetSourceFileLocationW;
        pub const SetupGetSourceFileSize = SetupGetSourceFileSizeW;
        pub const SetupGetTargetPath = SetupGetTargetPathW;
        pub const SetupSetSourceList = SetupSetSourceListW;
        pub const SetupAddToSourceList = SetupAddToSourceListW;
        pub const SetupRemoveFromSourceList = SetupRemoveFromSourceListW;
        pub const SetupQuerySourceList = SetupQuerySourceListW;
        pub const SetupFreeSourceList = SetupFreeSourceListW;
        pub const SetupPromptForDisk = SetupPromptForDiskW;
        pub const SetupCopyError = SetupCopyErrorW;
        pub const SetupRenameError = SetupRenameErrorW;
        pub const SetupDeleteError = SetupDeleteErrorW;
        pub const SetupBackupError = SetupBackupErrorW;
        pub const SetupSetDirectoryId = SetupSetDirectoryIdW;
        pub const SetupSetDirectoryIdEx = SetupSetDirectoryIdExW;
        pub const SetupGetSourceInfo = SetupGetSourceInfoW;
        pub const SetupInstallFile = SetupInstallFileW;
        pub const SetupInstallFileEx = SetupInstallFileExW;
        pub const SetupSetFileQueueAlternatePlatform = SetupSetFileQueueAlternatePlatformW;
        pub const SetupSetPlatformPathOverride = SetupSetPlatformPathOverrideW;
        pub const SetupQueueCopy = SetupQueueCopyW;
        pub const SetupQueueCopyIndirect = SetupQueueCopyIndirectW;
        pub const SetupQueueDefaultCopy = SetupQueueDefaultCopyW;
        pub const SetupQueueCopySection = SetupQueueCopySectionW;
        pub const SetupQueueDelete = SetupQueueDeleteW;
        pub const SetupQueueDeleteSection = SetupQueueDeleteSectionW;
        pub const SetupQueueRename = SetupQueueRenameW;
        pub const SetupQueueRenameSection = SetupQueueRenameSectionW;
        pub const SetupCommitFileQueue = SetupCommitFileQueueW;
        pub const SetupScanFileQueue = SetupScanFileQueueW;
        pub const SetupCopyOEMInf = SetupCopyOEMInfW;
        pub const SetupUninstallOEMInf = SetupUninstallOEMInfW;
        pub const SetupCreateDiskSpaceList = SetupCreateDiskSpaceListW;
        pub const SetupDuplicateDiskSpaceList = SetupDuplicateDiskSpaceListW;
        pub const SetupQueryDrivesInDiskSpaceList = SetupQueryDrivesInDiskSpaceListW;
        pub const SetupQuerySpaceRequiredOnDrive = SetupQuerySpaceRequiredOnDriveW;
        pub const SetupAdjustDiskSpaceList = SetupAdjustDiskSpaceListW;
        pub const SetupAddToDiskSpaceList = SetupAddToDiskSpaceListW;
        pub const SetupAddSectionToDiskSpaceList = SetupAddSectionToDiskSpaceListW;
        pub const SetupAddInstallSectionToDiskSpaceList = SetupAddInstallSectionToDiskSpaceListW;
        pub const SetupRemoveFromDiskSpaceList = SetupRemoveFromDiskSpaceListW;
        pub const SetupRemoveSectionFromDiskSpaceList = SetupRemoveSectionFromDiskSpaceListW;
        pub const SetupRemoveInstallSectionFromDiskSpaceList = SetupRemoveInstallSectionFromDiskSpaceListW;
        pub const SetupIterateCabinet = SetupIterateCabinetW;
        pub const SetupDefaultQueueCallback = SetupDefaultQueueCallbackW;
        pub const SetupInstallFromInfSection = SetupInstallFromInfSectionW;
        pub const SetupInstallFilesFromInfSection = SetupInstallFilesFromInfSectionW;
        pub const SetupInstallServicesFromInfSection = SetupInstallServicesFromInfSectionW;
        pub const SetupInstallServicesFromInfSectionEx = SetupInstallServicesFromInfSectionExW;
        pub const InstallHinfSection = InstallHinfSectionW;
        pub const SetupInitializeFileLog = SetupInitializeFileLogW;
        pub const SetupLogFile = SetupLogFileW;
        pub const SetupRemoveFileLogEntry = SetupRemoveFileLogEntryW;
        pub const SetupQueryFileLog = SetupQueryFileLogW;
        pub const SetupLogError = SetupLogErrorW;
        pub const SetupEnumInfSections = SetupEnumInfSectionsW;
        pub const SetupVerifyInfFile = SetupVerifyInfFileW;
        pub const SetupConfigureWmiFromInfSection = SetupConfigureWmiFromInfSectionW;
        pub const CreateActCtx = CreateActCtxW;
        pub const FindActCtxSectionString = FindActCtxSectionStringW;
    },
    else => if (@import("builtin").is_test) struct {
        pub const INSTALLUI_HANDLER = *opaque{};
        pub const MSIPATCHSEQUENCEINFO = *opaque{};
        pub const SP_ORIGINAL_FILE_INFO_ = *opaque{};
        pub const PSP_FILE_CALLBACK_ = *opaque{};
        pub const FILEPATHS_ = *opaque{};
        pub const FILEPATHS_SIGNERINFO_ = *opaque{};
        pub const SOURCE_MEDIA_ = *opaque{};
        pub const CABINET_INFO_ = *opaque{};
        pub const FILE_IN_CABINET_INFO_ = *opaque{};
        pub const SP_REGISTER_CONTROL_STATUS = *opaque{};
        pub const SP_FILE_COPY_PARAMS_ = *opaque{};
        pub const SP_INF_SIGNER_INFO_V1_ = *opaque{};
        pub const SP_INF_SIGNER_INFO_V2_ = *opaque{};
        pub const ACTCTX = *opaque{};
        pub const MsiSetExternalUI = *opaque{};
        pub const MsiEnableLog = *opaque{};
        pub const MsiQueryProductState = *opaque{};
        pub const MsiGetProductInfo = *opaque{};
        pub const MsiGetProductInfoEx = *opaque{};
        pub const MsiInstallProduct = *opaque{};
        pub const MsiConfigureProduct = *opaque{};
        pub const MsiConfigureProductEx = *opaque{};
        pub const MsiReinstallProduct = *opaque{};
        pub const MsiAdvertiseProductEx = *opaque{};
        pub const MsiAdvertiseProduct = *opaque{};
        pub const MsiProcessAdvertiseScript = *opaque{};
        pub const MsiAdvertiseScript = *opaque{};
        pub const MsiGetProductInfoFromScript = *opaque{};
        pub const MsiGetProductCode = *opaque{};
        pub const MsiGetUserInfo = *opaque{};
        pub const MsiCollectUserInfo = *opaque{};
        pub const MsiApplyPatch = *opaque{};
        pub const MsiGetPatchInfo = *opaque{};
        pub const MsiEnumPatches = *opaque{};
        pub const MsiRemovePatches = *opaque{};
        pub const MsiExtractPatchXMLData = *opaque{};
        pub const MsiGetPatchInfoEx = *opaque{};
        pub const MsiApplyMultiplePatches = *opaque{};
        pub const MsiDeterminePatchSequence = *opaque{};
        pub const MsiDetermineApplicablePatches = *opaque{};
        pub const MsiEnumPatchesEx = *opaque{};
        pub const MsiQueryFeatureState = *opaque{};
        pub const MsiQueryFeatureStateEx = *opaque{};
        pub const MsiUseFeature = *opaque{};
        pub const MsiUseFeatureEx = *opaque{};
        pub const MsiGetFeatureUsage = *opaque{};
        pub const MsiConfigureFeature = *opaque{};
        pub const MsiReinstallFeature = *opaque{};
        pub const MsiProvideComponent = *opaque{};
        pub const MsiProvideQualifiedComponent = *opaque{};
        pub const MsiProvideQualifiedComponentEx = *opaque{};
        pub const MsiGetComponentPath = *opaque{};
        pub const MsiGetComponentPathEx = *opaque{};
        pub const MsiProvideAssembly = *opaque{};
        pub const MsiQueryComponentState = *opaque{};
        pub const MsiEnumProducts = *opaque{};
        pub const MsiEnumProductsEx = *opaque{};
        pub const MsiEnumRelatedProducts = *opaque{};
        pub const MsiEnumFeatures = *opaque{};
        pub const MsiEnumComponents = *opaque{};
        pub const MsiEnumComponentsEx = *opaque{};
        pub const MsiEnumClients = *opaque{};
        pub const MsiEnumClientsEx = *opaque{};
        pub const MsiEnumComponentQualifiers = *opaque{};
        pub const MsiOpenProduct = *opaque{};
        pub const MsiOpenPackage = *opaque{};
        pub const MsiOpenPackageEx = *opaque{};
        pub const MsiGetPatchFileList = *opaque{};
        pub const MsiGetProductProperty = *opaque{};
        pub const MsiVerifyPackage = *opaque{};
        pub const MsiGetFeatureInfo = *opaque{};
        pub const MsiInstallMissingComponent = *opaque{};
        pub const MsiInstallMissingFile = *opaque{};
        pub const MsiLocateComponent = *opaque{};
        pub const MsiSourceListClearAll = *opaque{};
        pub const MsiSourceListAddSource = *opaque{};
        pub const MsiSourceListForceResolution = *opaque{};
        pub const MsiSourceListAddSourceEx = *opaque{};
        pub const MsiSourceListAddMediaDisk = *opaque{};
        pub const MsiSourceListClearSource = *opaque{};
        pub const MsiSourceListClearMediaDisk = *opaque{};
        pub const MsiSourceListClearAllEx = *opaque{};
        pub const MsiSourceListForceResolutionEx = *opaque{};
        pub const MsiSourceListSetInfo = *opaque{};
        pub const MsiSourceListGetInfo = *opaque{};
        pub const MsiSourceListEnumSources = *opaque{};
        pub const MsiSourceListEnumMediaDisks = *opaque{};
        pub const MsiGetFileVersion = *opaque{};
        pub const MsiGetFileHash = *opaque{};
        pub const MsiGetFileSignatureInformation = *opaque{};
        pub const MsiGetShortcutTarget = *opaque{};
        pub const MsiIsProductElevated = *opaque{};
        pub const MsiNotifySidChange = *opaque{};
        pub const MsiBeginTransaction = *opaque{};
        pub const MsiDatabaseOpenView = *opaque{};
        pub const MsiViewGetError = *opaque{};
        pub const MsiDatabaseGetPrimaryKeys = *opaque{};
        pub const MsiDatabaseIsTablePersistent = *opaque{};
        pub const MsiGetSummaryInformation = *opaque{};
        pub const MsiSummaryInfoSetProperty = *opaque{};
        pub const MsiSummaryInfoGetProperty = *opaque{};
        pub const MsiOpenDatabase = *opaque{};
        pub const MsiDatabaseImport = *opaque{};
        pub const MsiDatabaseExport = *opaque{};
        pub const MsiDatabaseMerge = *opaque{};
        pub const MsiDatabaseGenerateTransform = *opaque{};
        pub const MsiDatabaseApplyTransform = *opaque{};
        pub const MsiCreateTransformSummaryInfo = *opaque{};
        pub const MsiRecordSetString = *opaque{};
        pub const MsiRecordGetString = *opaque{};
        pub const MsiRecordSetStream = *opaque{};
        pub const MsiSetProperty = *opaque{};
        pub const MsiGetProperty = *opaque{};
        pub const MsiFormatRecord = *opaque{};
        pub const MsiDoAction = *opaque{};
        pub const MsiSequence = *opaque{};
        pub const MsiEvaluateCondition = *opaque{};
        pub const MsiGetFeatureState = *opaque{};
        pub const MsiSetFeatureState = *opaque{};
        pub const MsiSetFeatureAttributes = *opaque{};
        pub const MsiGetComponentState = *opaque{};
        pub const MsiSetComponentState = *opaque{};
        pub const MsiGetFeatureCost = *opaque{};
        pub const MsiEnumComponentCosts = *opaque{};
        pub const MsiGetFeatureValidStates = *opaque{};
        pub const MsiGetSourcePath = *opaque{};
        pub const MsiGetTargetPath = *opaque{};
        pub const MsiSetTargetPath = *opaque{};
        pub const MsiPreviewDialog = *opaque{};
        pub const MsiPreviewBillboard = *opaque{};
        pub const SetupGetInfInformation = *opaque{};
        pub const SetupQueryInfFileInformation = *opaque{};
        pub const SetupQueryInfOriginalFileInformation = *opaque{};
        pub const SetupQueryInfVersionInformation = *opaque{};
        pub const SetupGetInfFileList = *opaque{};
        pub const SetupOpenInfFile = *opaque{};
        pub const SetupOpenAppendInfFile = *opaque{};
        pub const SetupFindFirstLine = *opaque{};
        pub const SetupFindNextMatchLine = *opaque{};
        pub const SetupGetLineByIndex = *opaque{};
        pub const SetupGetLineCount = *opaque{};
        pub const SetupGetLineText = *opaque{};
        pub const SetupGetStringField = *opaque{};
        pub const SetupGetMultiSzField = *opaque{};
        pub const SetupGetFileCompressionInfo = *opaque{};
        pub const SetupGetFileCompressionInfoEx = *opaque{};
        pub const SetupDecompressOrCopyFile = *opaque{};
        pub const SetupGetSourceFileLocation = *opaque{};
        pub const SetupGetSourceFileSize = *opaque{};
        pub const SetupGetTargetPath = *opaque{};
        pub const SetupSetSourceList = *opaque{};
        pub const SetupAddToSourceList = *opaque{};
        pub const SetupRemoveFromSourceList = *opaque{};
        pub const SetupQuerySourceList = *opaque{};
        pub const SetupFreeSourceList = *opaque{};
        pub const SetupPromptForDisk = *opaque{};
        pub const SetupCopyError = *opaque{};
        pub const SetupRenameError = *opaque{};
        pub const SetupDeleteError = *opaque{};
        pub const SetupBackupError = *opaque{};
        pub const SetupSetDirectoryId = *opaque{};
        pub const SetupSetDirectoryIdEx = *opaque{};
        pub const SetupGetSourceInfo = *opaque{};
        pub const SetupInstallFile = *opaque{};
        pub const SetupInstallFileEx = *opaque{};
        pub const SetupSetFileQueueAlternatePlatform = *opaque{};
        pub const SetupSetPlatformPathOverride = *opaque{};
        pub const SetupQueueCopy = *opaque{};
        pub const SetupQueueCopyIndirect = *opaque{};
        pub const SetupQueueDefaultCopy = *opaque{};
        pub const SetupQueueCopySection = *opaque{};
        pub const SetupQueueDelete = *opaque{};
        pub const SetupQueueDeleteSection = *opaque{};
        pub const SetupQueueRename = *opaque{};
        pub const SetupQueueRenameSection = *opaque{};
        pub const SetupCommitFileQueue = *opaque{};
        pub const SetupScanFileQueue = *opaque{};
        pub const SetupCopyOEMInf = *opaque{};
        pub const SetupUninstallOEMInf = *opaque{};
        pub const SetupCreateDiskSpaceList = *opaque{};
        pub const SetupDuplicateDiskSpaceList = *opaque{};
        pub const SetupQueryDrivesInDiskSpaceList = *opaque{};
        pub const SetupQuerySpaceRequiredOnDrive = *opaque{};
        pub const SetupAdjustDiskSpaceList = *opaque{};
        pub const SetupAddToDiskSpaceList = *opaque{};
        pub const SetupAddSectionToDiskSpaceList = *opaque{};
        pub const SetupAddInstallSectionToDiskSpaceList = *opaque{};
        pub const SetupRemoveFromDiskSpaceList = *opaque{};
        pub const SetupRemoveSectionFromDiskSpaceList = *opaque{};
        pub const SetupRemoveInstallSectionFromDiskSpaceList = *opaque{};
        pub const SetupIterateCabinet = *opaque{};
        pub const SetupDefaultQueueCallback = *opaque{};
        pub const SetupInstallFromInfSection = *opaque{};
        pub const SetupInstallFilesFromInfSection = *opaque{};
        pub const SetupInstallServicesFromInfSection = *opaque{};
        pub const SetupInstallServicesFromInfSectionEx = *opaque{};
        pub const InstallHinfSection = *opaque{};
        pub const SetupInitializeFileLog = *opaque{};
        pub const SetupLogFile = *opaque{};
        pub const SetupRemoveFileLogEntry = *opaque{};
        pub const SetupQueryFileLog = *opaque{};
        pub const SetupLogError = *opaque{};
        pub const SetupEnumInfSections = *opaque{};
        pub const SetupVerifyInfFile = *opaque{};
        pub const SetupConfigureWmiFromInfSection = *opaque{};
        pub const CreateActCtx = *opaque{};
        pub const FindActCtxSectionString = *opaque{};
    } else struct {
        pub const INSTALLUI_HANDLER = @compileError("'INSTALLUI_HANDLER' requires that UNICODE be set to true or false in the root module");
        pub const MSIPATCHSEQUENCEINFO = @compileError("'MSIPATCHSEQUENCEINFO' requires that UNICODE be set to true or false in the root module");
        pub const SP_ORIGINAL_FILE_INFO_ = @compileError("'SP_ORIGINAL_FILE_INFO_' requires that UNICODE be set to true or false in the root module");
        pub const PSP_FILE_CALLBACK_ = @compileError("'PSP_FILE_CALLBACK_' requires that UNICODE be set to true or false in the root module");
        pub const FILEPATHS_ = @compileError("'FILEPATHS_' requires that UNICODE be set to true or false in the root module");
        pub const FILEPATHS_SIGNERINFO_ = @compileError("'FILEPATHS_SIGNERINFO_' requires that UNICODE be set to true or false in the root module");
        pub const SOURCE_MEDIA_ = @compileError("'SOURCE_MEDIA_' requires that UNICODE be set to true or false in the root module");
        pub const CABINET_INFO_ = @compileError("'CABINET_INFO_' requires that UNICODE be set to true or false in the root module");
        pub const FILE_IN_CABINET_INFO_ = @compileError("'FILE_IN_CABINET_INFO_' requires that UNICODE be set to true or false in the root module");
        pub const SP_REGISTER_CONTROL_STATUS = @compileError("'SP_REGISTER_CONTROL_STATUS' requires that UNICODE be set to true or false in the root module");
        pub const SP_FILE_COPY_PARAMS_ = @compileError("'SP_FILE_COPY_PARAMS_' requires that UNICODE be set to true or false in the root module");
        pub const SP_INF_SIGNER_INFO_V1_ = @compileError("'SP_INF_SIGNER_INFO_V1_' requires that UNICODE be set to true or false in the root module");
        pub const SP_INF_SIGNER_INFO_V2_ = @compileError("'SP_INF_SIGNER_INFO_V2_' requires that UNICODE be set to true or false in the root module");
        pub const ACTCTX = @compileError("'ACTCTX' requires that UNICODE be set to true or false in the root module");
        pub const MsiSetExternalUI = @compileError("'MsiSetExternalUI' requires that UNICODE be set to true or false in the root module");
        pub const MsiEnableLog = @compileError("'MsiEnableLog' requires that UNICODE be set to true or false in the root module");
        pub const MsiQueryProductState = @compileError("'MsiQueryProductState' requires that UNICODE be set to true or false in the root module");
        pub const MsiGetProductInfo = @compileError("'MsiGetProductInfo' requires that UNICODE be set to true or false in the root module");
        pub const MsiGetProductInfoEx = @compileError("'MsiGetProductInfoEx' requires that UNICODE be set to true or false in the root module");
        pub const MsiInstallProduct = @compileError("'MsiInstallProduct' requires that UNICODE be set to true or false in the root module");
        pub const MsiConfigureProduct = @compileError("'MsiConfigureProduct' requires that UNICODE be set to true or false in the root module");
        pub const MsiConfigureProductEx = @compileError("'MsiConfigureProductEx' requires that UNICODE be set to true or false in the root module");
        pub const MsiReinstallProduct = @compileError("'MsiReinstallProduct' requires that UNICODE be set to true or false in the root module");
        pub const MsiAdvertiseProductEx = @compileError("'MsiAdvertiseProductEx' requires that UNICODE be set to true or false in the root module");
        pub const MsiAdvertiseProduct = @compileError("'MsiAdvertiseProduct' requires that UNICODE be set to true or false in the root module");
        pub const MsiProcessAdvertiseScript = @compileError("'MsiProcessAdvertiseScript' requires that UNICODE be set to true or false in the root module");
        pub const MsiAdvertiseScript = @compileError("'MsiAdvertiseScript' requires that UNICODE be set to true or false in the root module");
        pub const MsiGetProductInfoFromScript = @compileError("'MsiGetProductInfoFromScript' requires that UNICODE be set to true or false in the root module");
        pub const MsiGetProductCode = @compileError("'MsiGetProductCode' requires that UNICODE be set to true or false in the root module");
        pub const MsiGetUserInfo = @compileError("'MsiGetUserInfo' requires that UNICODE be set to true or false in the root module");
        pub const MsiCollectUserInfo = @compileError("'MsiCollectUserInfo' requires that UNICODE be set to true or false in the root module");
        pub const MsiApplyPatch = @compileError("'MsiApplyPatch' requires that UNICODE be set to true or false in the root module");
        pub const MsiGetPatchInfo = @compileError("'MsiGetPatchInfo' requires that UNICODE be set to true or false in the root module");
        pub const MsiEnumPatches = @compileError("'MsiEnumPatches' requires that UNICODE be set to true or false in the root module");
        pub const MsiRemovePatches = @compileError("'MsiRemovePatches' requires that UNICODE be set to true or false in the root module");
        pub const MsiExtractPatchXMLData = @compileError("'MsiExtractPatchXMLData' requires that UNICODE be set to true or false in the root module");
        pub const MsiGetPatchInfoEx = @compileError("'MsiGetPatchInfoEx' requires that UNICODE be set to true or false in the root module");
        pub const MsiApplyMultiplePatches = @compileError("'MsiApplyMultiplePatches' requires that UNICODE be set to true or false in the root module");
        pub const MsiDeterminePatchSequence = @compileError("'MsiDeterminePatchSequence' requires that UNICODE be set to true or false in the root module");
        pub const MsiDetermineApplicablePatches = @compileError("'MsiDetermineApplicablePatches' requires that UNICODE be set to true or false in the root module");
        pub const MsiEnumPatchesEx = @compileError("'MsiEnumPatchesEx' requires that UNICODE be set to true or false in the root module");
        pub const MsiQueryFeatureState = @compileError("'MsiQueryFeatureState' requires that UNICODE be set to true or false in the root module");
        pub const MsiQueryFeatureStateEx = @compileError("'MsiQueryFeatureStateEx' requires that UNICODE be set to true or false in the root module");
        pub const MsiUseFeature = @compileError("'MsiUseFeature' requires that UNICODE be set to true or false in the root module");
        pub const MsiUseFeatureEx = @compileError("'MsiUseFeatureEx' requires that UNICODE be set to true or false in the root module");
        pub const MsiGetFeatureUsage = @compileError("'MsiGetFeatureUsage' requires that UNICODE be set to true or false in the root module");
        pub const MsiConfigureFeature = @compileError("'MsiConfigureFeature' requires that UNICODE be set to true or false in the root module");
        pub const MsiReinstallFeature = @compileError("'MsiReinstallFeature' requires that UNICODE be set to true or false in the root module");
        pub const MsiProvideComponent = @compileError("'MsiProvideComponent' requires that UNICODE be set to true or false in the root module");
        pub const MsiProvideQualifiedComponent = @compileError("'MsiProvideQualifiedComponent' requires that UNICODE be set to true or false in the root module");
        pub const MsiProvideQualifiedComponentEx = @compileError("'MsiProvideQualifiedComponentEx' requires that UNICODE be set to true or false in the root module");
        pub const MsiGetComponentPath = @compileError("'MsiGetComponentPath' requires that UNICODE be set to true or false in the root module");
        pub const MsiGetComponentPathEx = @compileError("'MsiGetComponentPathEx' requires that UNICODE be set to true or false in the root module");
        pub const MsiProvideAssembly = @compileError("'MsiProvideAssembly' requires that UNICODE be set to true or false in the root module");
        pub const MsiQueryComponentState = @compileError("'MsiQueryComponentState' requires that UNICODE be set to true or false in the root module");
        pub const MsiEnumProducts = @compileError("'MsiEnumProducts' requires that UNICODE be set to true or false in the root module");
        pub const MsiEnumProductsEx = @compileError("'MsiEnumProductsEx' requires that UNICODE be set to true or false in the root module");
        pub const MsiEnumRelatedProducts = @compileError("'MsiEnumRelatedProducts' requires that UNICODE be set to true or false in the root module");
        pub const MsiEnumFeatures = @compileError("'MsiEnumFeatures' requires that UNICODE be set to true or false in the root module");
        pub const MsiEnumComponents = @compileError("'MsiEnumComponents' requires that UNICODE be set to true or false in the root module");
        pub const MsiEnumComponentsEx = @compileError("'MsiEnumComponentsEx' requires that UNICODE be set to true or false in the root module");
        pub const MsiEnumClients = @compileError("'MsiEnumClients' requires that UNICODE be set to true or false in the root module");
        pub const MsiEnumClientsEx = @compileError("'MsiEnumClientsEx' requires that UNICODE be set to true or false in the root module");
        pub const MsiEnumComponentQualifiers = @compileError("'MsiEnumComponentQualifiers' requires that UNICODE be set to true or false in the root module");
        pub const MsiOpenProduct = @compileError("'MsiOpenProduct' requires that UNICODE be set to true or false in the root module");
        pub const MsiOpenPackage = @compileError("'MsiOpenPackage' requires that UNICODE be set to true or false in the root module");
        pub const MsiOpenPackageEx = @compileError("'MsiOpenPackageEx' requires that UNICODE be set to true or false in the root module");
        pub const MsiGetPatchFileList = @compileError("'MsiGetPatchFileList' requires that UNICODE be set to true or false in the root module");
        pub const MsiGetProductProperty = @compileError("'MsiGetProductProperty' requires that UNICODE be set to true or false in the root module");
        pub const MsiVerifyPackage = @compileError("'MsiVerifyPackage' requires that UNICODE be set to true or false in the root module");
        pub const MsiGetFeatureInfo = @compileError("'MsiGetFeatureInfo' requires that UNICODE be set to true or false in the root module");
        pub const MsiInstallMissingComponent = @compileError("'MsiInstallMissingComponent' requires that UNICODE be set to true or false in the root module");
        pub const MsiInstallMissingFile = @compileError("'MsiInstallMissingFile' requires that UNICODE be set to true or false in the root module");
        pub const MsiLocateComponent = @compileError("'MsiLocateComponent' requires that UNICODE be set to true or false in the root module");
        pub const MsiSourceListClearAll = @compileError("'MsiSourceListClearAll' requires that UNICODE be set to true or false in the root module");
        pub const MsiSourceListAddSource = @compileError("'MsiSourceListAddSource' requires that UNICODE be set to true or false in the root module");
        pub const MsiSourceListForceResolution = @compileError("'MsiSourceListForceResolution' requires that UNICODE be set to true or false in the root module");
        pub const MsiSourceListAddSourceEx = @compileError("'MsiSourceListAddSourceEx' requires that UNICODE be set to true or false in the root module");
        pub const MsiSourceListAddMediaDisk = @compileError("'MsiSourceListAddMediaDisk' requires that UNICODE be set to true or false in the root module");
        pub const MsiSourceListClearSource = @compileError("'MsiSourceListClearSource' requires that UNICODE be set to true or false in the root module");
        pub const MsiSourceListClearMediaDisk = @compileError("'MsiSourceListClearMediaDisk' requires that UNICODE be set to true or false in the root module");
        pub const MsiSourceListClearAllEx = @compileError("'MsiSourceListClearAllEx' requires that UNICODE be set to true or false in the root module");
        pub const MsiSourceListForceResolutionEx = @compileError("'MsiSourceListForceResolutionEx' requires that UNICODE be set to true or false in the root module");
        pub const MsiSourceListSetInfo = @compileError("'MsiSourceListSetInfo' requires that UNICODE be set to true or false in the root module");
        pub const MsiSourceListGetInfo = @compileError("'MsiSourceListGetInfo' requires that UNICODE be set to true or false in the root module");
        pub const MsiSourceListEnumSources = @compileError("'MsiSourceListEnumSources' requires that UNICODE be set to true or false in the root module");
        pub const MsiSourceListEnumMediaDisks = @compileError("'MsiSourceListEnumMediaDisks' requires that UNICODE be set to true or false in the root module");
        pub const MsiGetFileVersion = @compileError("'MsiGetFileVersion' requires that UNICODE be set to true or false in the root module");
        pub const MsiGetFileHash = @compileError("'MsiGetFileHash' requires that UNICODE be set to true or false in the root module");
        pub const MsiGetFileSignatureInformation = @compileError("'MsiGetFileSignatureInformation' requires that UNICODE be set to true or false in the root module");
        pub const MsiGetShortcutTarget = @compileError("'MsiGetShortcutTarget' requires that UNICODE be set to true or false in the root module");
        pub const MsiIsProductElevated = @compileError("'MsiIsProductElevated' requires that UNICODE be set to true or false in the root module");
        pub const MsiNotifySidChange = @compileError("'MsiNotifySidChange' requires that UNICODE be set to true or false in the root module");
        pub const MsiBeginTransaction = @compileError("'MsiBeginTransaction' requires that UNICODE be set to true or false in the root module");
        pub const MsiDatabaseOpenView = @compileError("'MsiDatabaseOpenView' requires that UNICODE be set to true or false in the root module");
        pub const MsiViewGetError = @compileError("'MsiViewGetError' requires that UNICODE be set to true or false in the root module");
        pub const MsiDatabaseGetPrimaryKeys = @compileError("'MsiDatabaseGetPrimaryKeys' requires that UNICODE be set to true or false in the root module");
        pub const MsiDatabaseIsTablePersistent = @compileError("'MsiDatabaseIsTablePersistent' requires that UNICODE be set to true or false in the root module");
        pub const MsiGetSummaryInformation = @compileError("'MsiGetSummaryInformation' requires that UNICODE be set to true or false in the root module");
        pub const MsiSummaryInfoSetProperty = @compileError("'MsiSummaryInfoSetProperty' requires that UNICODE be set to true or false in the root module");
        pub const MsiSummaryInfoGetProperty = @compileError("'MsiSummaryInfoGetProperty' requires that UNICODE be set to true or false in the root module");
        pub const MsiOpenDatabase = @compileError("'MsiOpenDatabase' requires that UNICODE be set to true or false in the root module");
        pub const MsiDatabaseImport = @compileError("'MsiDatabaseImport' requires that UNICODE be set to true or false in the root module");
        pub const MsiDatabaseExport = @compileError("'MsiDatabaseExport' requires that UNICODE be set to true or false in the root module");
        pub const MsiDatabaseMerge = @compileError("'MsiDatabaseMerge' requires that UNICODE be set to true or false in the root module");
        pub const MsiDatabaseGenerateTransform = @compileError("'MsiDatabaseGenerateTransform' requires that UNICODE be set to true or false in the root module");
        pub const MsiDatabaseApplyTransform = @compileError("'MsiDatabaseApplyTransform' requires that UNICODE be set to true or false in the root module");
        pub const MsiCreateTransformSummaryInfo = @compileError("'MsiCreateTransformSummaryInfo' requires that UNICODE be set to true or false in the root module");
        pub const MsiRecordSetString = @compileError("'MsiRecordSetString' requires that UNICODE be set to true or false in the root module");
        pub const MsiRecordGetString = @compileError("'MsiRecordGetString' requires that UNICODE be set to true or false in the root module");
        pub const MsiRecordSetStream = @compileError("'MsiRecordSetStream' requires that UNICODE be set to true or false in the root module");
        pub const MsiSetProperty = @compileError("'MsiSetProperty' requires that UNICODE be set to true or false in the root module");
        pub const MsiGetProperty = @compileError("'MsiGetProperty' requires that UNICODE be set to true or false in the root module");
        pub const MsiFormatRecord = @compileError("'MsiFormatRecord' requires that UNICODE be set to true or false in the root module");
        pub const MsiDoAction = @compileError("'MsiDoAction' requires that UNICODE be set to true or false in the root module");
        pub const MsiSequence = @compileError("'MsiSequence' requires that UNICODE be set to true or false in the root module");
        pub const MsiEvaluateCondition = @compileError("'MsiEvaluateCondition' requires that UNICODE be set to true or false in the root module");
        pub const MsiGetFeatureState = @compileError("'MsiGetFeatureState' requires that UNICODE be set to true or false in the root module");
        pub const MsiSetFeatureState = @compileError("'MsiSetFeatureState' requires that UNICODE be set to true or false in the root module");
        pub const MsiSetFeatureAttributes = @compileError("'MsiSetFeatureAttributes' requires that UNICODE be set to true or false in the root module");
        pub const MsiGetComponentState = @compileError("'MsiGetComponentState' requires that UNICODE be set to true or false in the root module");
        pub const MsiSetComponentState = @compileError("'MsiSetComponentState' requires that UNICODE be set to true or false in the root module");
        pub const MsiGetFeatureCost = @compileError("'MsiGetFeatureCost' requires that UNICODE be set to true or false in the root module");
        pub const MsiEnumComponentCosts = @compileError("'MsiEnumComponentCosts' requires that UNICODE be set to true or false in the root module");
        pub const MsiGetFeatureValidStates = @compileError("'MsiGetFeatureValidStates' requires that UNICODE be set to true or false in the root module");
        pub const MsiGetSourcePath = @compileError("'MsiGetSourcePath' requires that UNICODE be set to true or false in the root module");
        pub const MsiGetTargetPath = @compileError("'MsiGetTargetPath' requires that UNICODE be set to true or false in the root module");
        pub const MsiSetTargetPath = @compileError("'MsiSetTargetPath' requires that UNICODE be set to true or false in the root module");
        pub const MsiPreviewDialog = @compileError("'MsiPreviewDialog' requires that UNICODE be set to true or false in the root module");
        pub const MsiPreviewBillboard = @compileError("'MsiPreviewBillboard' requires that UNICODE be set to true or false in the root module");
        pub const SetupGetInfInformation = @compileError("'SetupGetInfInformation' requires that UNICODE be set to true or false in the root module");
        pub const SetupQueryInfFileInformation = @compileError("'SetupQueryInfFileInformation' requires that UNICODE be set to true or false in the root module");
        pub const SetupQueryInfOriginalFileInformation = @compileError("'SetupQueryInfOriginalFileInformation' requires that UNICODE be set to true or false in the root module");
        pub const SetupQueryInfVersionInformation = @compileError("'SetupQueryInfVersionInformation' requires that UNICODE be set to true or false in the root module");
        pub const SetupGetInfFileList = @compileError("'SetupGetInfFileList' requires that UNICODE be set to true or false in the root module");
        pub const SetupOpenInfFile = @compileError("'SetupOpenInfFile' requires that UNICODE be set to true or false in the root module");
        pub const SetupOpenAppendInfFile = @compileError("'SetupOpenAppendInfFile' requires that UNICODE be set to true or false in the root module");
        pub const SetupFindFirstLine = @compileError("'SetupFindFirstLine' requires that UNICODE be set to true or false in the root module");
        pub const SetupFindNextMatchLine = @compileError("'SetupFindNextMatchLine' requires that UNICODE be set to true or false in the root module");
        pub const SetupGetLineByIndex = @compileError("'SetupGetLineByIndex' requires that UNICODE be set to true or false in the root module");
        pub const SetupGetLineCount = @compileError("'SetupGetLineCount' requires that UNICODE be set to true or false in the root module");
        pub const SetupGetLineText = @compileError("'SetupGetLineText' requires that UNICODE be set to true or false in the root module");
        pub const SetupGetStringField = @compileError("'SetupGetStringField' requires that UNICODE be set to true or false in the root module");
        pub const SetupGetMultiSzField = @compileError("'SetupGetMultiSzField' requires that UNICODE be set to true or false in the root module");
        pub const SetupGetFileCompressionInfo = @compileError("'SetupGetFileCompressionInfo' requires that UNICODE be set to true or false in the root module");
        pub const SetupGetFileCompressionInfoEx = @compileError("'SetupGetFileCompressionInfoEx' requires that UNICODE be set to true or false in the root module");
        pub const SetupDecompressOrCopyFile = @compileError("'SetupDecompressOrCopyFile' requires that UNICODE be set to true or false in the root module");
        pub const SetupGetSourceFileLocation = @compileError("'SetupGetSourceFileLocation' requires that UNICODE be set to true or false in the root module");
        pub const SetupGetSourceFileSize = @compileError("'SetupGetSourceFileSize' requires that UNICODE be set to true or false in the root module");
        pub const SetupGetTargetPath = @compileError("'SetupGetTargetPath' requires that UNICODE be set to true or false in the root module");
        pub const SetupSetSourceList = @compileError("'SetupSetSourceList' requires that UNICODE be set to true or false in the root module");
        pub const SetupAddToSourceList = @compileError("'SetupAddToSourceList' requires that UNICODE be set to true or false in the root module");
        pub const SetupRemoveFromSourceList = @compileError("'SetupRemoveFromSourceList' requires that UNICODE be set to true or false in the root module");
        pub const SetupQuerySourceList = @compileError("'SetupQuerySourceList' requires that UNICODE be set to true or false in the root module");
        pub const SetupFreeSourceList = @compileError("'SetupFreeSourceList' requires that UNICODE be set to true or false in the root module");
        pub const SetupPromptForDisk = @compileError("'SetupPromptForDisk' requires that UNICODE be set to true or false in the root module");
        pub const SetupCopyError = @compileError("'SetupCopyError' requires that UNICODE be set to true or false in the root module");
        pub const SetupRenameError = @compileError("'SetupRenameError' requires that UNICODE be set to true or false in the root module");
        pub const SetupDeleteError = @compileError("'SetupDeleteError' requires that UNICODE be set to true or false in the root module");
        pub const SetupBackupError = @compileError("'SetupBackupError' requires that UNICODE be set to true or false in the root module");
        pub const SetupSetDirectoryId = @compileError("'SetupSetDirectoryId' requires that UNICODE be set to true or false in the root module");
        pub const SetupSetDirectoryIdEx = @compileError("'SetupSetDirectoryIdEx' requires that UNICODE be set to true or false in the root module");
        pub const SetupGetSourceInfo = @compileError("'SetupGetSourceInfo' requires that UNICODE be set to true or false in the root module");
        pub const SetupInstallFile = @compileError("'SetupInstallFile' requires that UNICODE be set to true or false in the root module");
        pub const SetupInstallFileEx = @compileError("'SetupInstallFileEx' requires that UNICODE be set to true or false in the root module");
        pub const SetupSetFileQueueAlternatePlatform = @compileError("'SetupSetFileQueueAlternatePlatform' requires that UNICODE be set to true or false in the root module");
        pub const SetupSetPlatformPathOverride = @compileError("'SetupSetPlatformPathOverride' requires that UNICODE be set to true or false in the root module");
        pub const SetupQueueCopy = @compileError("'SetupQueueCopy' requires that UNICODE be set to true or false in the root module");
        pub const SetupQueueCopyIndirect = @compileError("'SetupQueueCopyIndirect' requires that UNICODE be set to true or false in the root module");
        pub const SetupQueueDefaultCopy = @compileError("'SetupQueueDefaultCopy' requires that UNICODE be set to true or false in the root module");
        pub const SetupQueueCopySection = @compileError("'SetupQueueCopySection' requires that UNICODE be set to true or false in the root module");
        pub const SetupQueueDelete = @compileError("'SetupQueueDelete' requires that UNICODE be set to true or false in the root module");
        pub const SetupQueueDeleteSection = @compileError("'SetupQueueDeleteSection' requires that UNICODE be set to true or false in the root module");
        pub const SetupQueueRename = @compileError("'SetupQueueRename' requires that UNICODE be set to true or false in the root module");
        pub const SetupQueueRenameSection = @compileError("'SetupQueueRenameSection' requires that UNICODE be set to true or false in the root module");
        pub const SetupCommitFileQueue = @compileError("'SetupCommitFileQueue' requires that UNICODE be set to true or false in the root module");
        pub const SetupScanFileQueue = @compileError("'SetupScanFileQueue' requires that UNICODE be set to true or false in the root module");
        pub const SetupCopyOEMInf = @compileError("'SetupCopyOEMInf' requires that UNICODE be set to true or false in the root module");
        pub const SetupUninstallOEMInf = @compileError("'SetupUninstallOEMInf' requires that UNICODE be set to true or false in the root module");
        pub const SetupCreateDiskSpaceList = @compileError("'SetupCreateDiskSpaceList' requires that UNICODE be set to true or false in the root module");
        pub const SetupDuplicateDiskSpaceList = @compileError("'SetupDuplicateDiskSpaceList' requires that UNICODE be set to true or false in the root module");
        pub const SetupQueryDrivesInDiskSpaceList = @compileError("'SetupQueryDrivesInDiskSpaceList' requires that UNICODE be set to true or false in the root module");
        pub const SetupQuerySpaceRequiredOnDrive = @compileError("'SetupQuerySpaceRequiredOnDrive' requires that UNICODE be set to true or false in the root module");
        pub const SetupAdjustDiskSpaceList = @compileError("'SetupAdjustDiskSpaceList' requires that UNICODE be set to true or false in the root module");
        pub const SetupAddToDiskSpaceList = @compileError("'SetupAddToDiskSpaceList' requires that UNICODE be set to true or false in the root module");
        pub const SetupAddSectionToDiskSpaceList = @compileError("'SetupAddSectionToDiskSpaceList' requires that UNICODE be set to true or false in the root module");
        pub const SetupAddInstallSectionToDiskSpaceList = @compileError("'SetupAddInstallSectionToDiskSpaceList' requires that UNICODE be set to true or false in the root module");
        pub const SetupRemoveFromDiskSpaceList = @compileError("'SetupRemoveFromDiskSpaceList' requires that UNICODE be set to true or false in the root module");
        pub const SetupRemoveSectionFromDiskSpaceList = @compileError("'SetupRemoveSectionFromDiskSpaceList' requires that UNICODE be set to true or false in the root module");
        pub const SetupRemoveInstallSectionFromDiskSpaceList = @compileError("'SetupRemoveInstallSectionFromDiskSpaceList' requires that UNICODE be set to true or false in the root module");
        pub const SetupIterateCabinet = @compileError("'SetupIterateCabinet' requires that UNICODE be set to true or false in the root module");
        pub const SetupDefaultQueueCallback = @compileError("'SetupDefaultQueueCallback' requires that UNICODE be set to true or false in the root module");
        pub const SetupInstallFromInfSection = @compileError("'SetupInstallFromInfSection' requires that UNICODE be set to true or false in the root module");
        pub const SetupInstallFilesFromInfSection = @compileError("'SetupInstallFilesFromInfSection' requires that UNICODE be set to true or false in the root module");
        pub const SetupInstallServicesFromInfSection = @compileError("'SetupInstallServicesFromInfSection' requires that UNICODE be set to true or false in the root module");
        pub const SetupInstallServicesFromInfSectionEx = @compileError("'SetupInstallServicesFromInfSectionEx' requires that UNICODE be set to true or false in the root module");
        pub const InstallHinfSection = @compileError("'InstallHinfSection' requires that UNICODE be set to true or false in the root module");
        pub const SetupInitializeFileLog = @compileError("'SetupInitializeFileLog' requires that UNICODE be set to true or false in the root module");
        pub const SetupLogFile = @compileError("'SetupLogFile' requires that UNICODE be set to true or false in the root module");
        pub const SetupRemoveFileLogEntry = @compileError("'SetupRemoveFileLogEntry' requires that UNICODE be set to true or false in the root module");
        pub const SetupQueryFileLog = @compileError("'SetupQueryFileLog' requires that UNICODE be set to true or false in the root module");
        pub const SetupLogError = @compileError("'SetupLogError' requires that UNICODE be set to true or false in the root module");
        pub const SetupEnumInfSections = @compileError("'SetupEnumInfSections' requires that UNICODE be set to true or false in the root module");
        pub const SetupVerifyInfFile = @compileError("'SetupVerifyInfFile' requires that UNICODE be set to true or false in the root module");
        pub const SetupConfigureWmiFromInfSection = @compileError("'SetupConfigureWmiFromInfSection' requires that UNICODE be set to true or false in the root module");
        pub const CreateActCtx = @compileError("'CreateActCtx' requires that UNICODE be set to true or false in the root module");
        pub const FindActCtxSectionString = @compileError("'FindActCtxSectionString' requires that UNICODE be set to true or false in the root module");
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const LARGE_INTEGER = @import("systemservices.zig").LARGE_INTEGER;
const ULARGE_INTEGER = @import("systemservices.zig").ULARGE_INTEGER;
const HANDLE = @import("systemservices.zig").HANDLE;
const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = @import("windowsprogramming.zig").ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
const HWND = @import("windowsandmessaging.zig").HWND;
const HKEY = @import("windowsprogramming.zig").HKEY;
const BOOL = @import("systemservices.zig").BOOL;
const CERT_CONTEXT = @import("security.zig").CERT_CONTEXT;
const HRESULT = @import("com.zig").HRESULT;
const FILETIME = @import("windowsprogramming.zig").FILETIME;
const SP_DEVINFO_DATA = @import("deviceanddriverinstallation.zig").SP_DEVINFO_DATA;
const HINSTANCE = @import("systemservices.zig").HINSTANCE;
const SetupFileLogInfo = @import("deviceanddriverinstallation.zig").SetupFileLogInfo;

test "" {
    const constant_export_count = 0;
    const type_export_count = 106;
    const func_count = 453;
    const unicode_alias_count = 207;
    const type_import_count = 14;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
