//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//
pub const LM_HB_Extension : i32 = 128;
pub const LM_HB1_PnP : i32 = 1;
pub const LM_HB1_PDA_Palmtop : i32 = 2;
pub const LM_HB1_Computer : i32 = 4;
pub const LM_HB1_Printer : i32 = 8;
pub const LM_HB1_Modem : i32 = 16;
pub const LM_HB1_Fax : i32 = 32;
pub const LM_HB1_LANAccess : i32 = 64;
pub const LM_HB2_Telephony : i32 = 1;
pub const LM_HB2_FileServer : i32 = 2;

//
// types
//
// --------------------------------------------------------
// Type: BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BLOB = extern struct {
    cbSize: u32,
    pBlobData: ?*u8,
};
// --------------------------------------------------------
// Type: HWSAEVENT
// TypeLayoutAttr: sequential
// RAIIFree 'WSACloseEvent' (TODO: can we use this information?)
pub const HWSAEVENT = ?*opaque{};
// --------------------------------------------------------
// Type: in_addr
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const in_addr = extern struct {
    S_un: _S_un_e__Union,
    // --------------------------------------------------------
    // Type: _S_un_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _S_un_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _S_un_b_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _S_un_b_e__Struct = extern struct {
            s_b1: u8,
            s_b2: u8,
            s_b3: u8,
            s_b4: u8,
        };
        // --------------------------------------------------------
        // Type: _S_un_w_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _S_un_w_e__Struct = extern struct {
            s_w1: u16,
            s_w2: u16,
        };
    };
};
// --------------------------------------------------------
// Type: SOCKADDR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SOCKADDR = extern struct {
    sa_family: u16,
    sa_data: ?[*]i8,
};
// --------------------------------------------------------
// Type: SOCKET_ADDRESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SOCKET_ADDRESS = extern struct {
    lpSockaddr: ?*SOCKADDR,
    iSockaddrLength: i32,
};
// --------------------------------------------------------
// Type: CSADDR_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CSADDR_INFO = extern struct {
    LocalAddr: SOCKET_ADDRESS,
    RemoteAddr: SOCKET_ADDRESS,
    iSocketType: i32,
    iProtocol: i32,
};
// --------------------------------------------------------
// Type: sockaddr_storage_xp
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const sockaddr_storage_xp = extern struct {
    ss_family: i16,
    __ss_pad1: ?[*]i8,
    __ss_align: i64,
    __ss_pad2: ?[*]i8,
};
// --------------------------------------------------------
// Type: SOCKET_PROCESSOR_AFFINITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SOCKET_PROCESSOR_AFFINITY = extern struct {
    Processor: PROCESSOR_NUMBER,
    NumaNodeId: u16,
    Reserved: u16,
};
// --------------------------------------------------------
// Type: IPPROTO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IPPROTO = *opaque{
};
// --------------------------------------------------------
// Type: SCOPE_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCOPE_ID = extern struct {
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: u32,
        };
    };
};
// --------------------------------------------------------
// Type: sockaddr_in
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const sockaddr_in = extern struct {
    sin_family: u16,
    sin_port: u16,
    sin_addr: in_addr,
    sin_zero: ?[*]i8,
};
// --------------------------------------------------------
// Type: sockaddr_dl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const sockaddr_dl = extern struct {
    sdl_family: u16,
    sdl_data: ?[*]u8,
    sdl_zero: ?[*]u8,
};
// --------------------------------------------------------
// Type: WSABUF
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSABUF = extern struct {
    len: u32,
    buf: ?*i8,
};
// --------------------------------------------------------
// Type: WSAMSG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSAMSG = extern struct {
    name: ?*SOCKADDR,
    namelen: i32,
    lpBuffers: ?*WSABUF,
    dwBufferCount: u32,
    Control: WSABUF,
    dwFlags: u32,
};
// --------------------------------------------------------
// Type: cmsghdr
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const cmsghdr = extern struct {
    cmsg_len: ?*opaque{},
    cmsg_level: i32,
    cmsg_type: i32,
};
// --------------------------------------------------------
// Type: ADDRINFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADDRINFOA = extern struct {
    ai_flags: i32,
    ai_family: i32,
    ai_socktype: i32,
    ai_protocol: i32,
    ai_addrlen: ?*opaque{},
    ai_canonname: ?*i8,
    ai_addr: ?*SOCKADDR,
    ai_next: ?*ADDRINFOA,
};
// --------------------------------------------------------
// Type: addrinfoW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const addrinfoW = extern struct {
    ai_flags: i32,
    ai_family: i32,
    ai_socktype: i32,
    ai_protocol: i32,
    ai_addrlen: ?*opaque{},
    ai_canonname: ?*u16,
    ai_addr: ?*SOCKADDR,
    ai_next: ?*addrinfoW,
};
// --------------------------------------------------------
// Type: addrinfoexA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const addrinfoexA = extern struct {
    ai_flags: i32,
    ai_family: i32,
    ai_socktype: i32,
    ai_protocol: i32,
    ai_addrlen: ?*opaque{},
    ai_canonname: ?*i8,
    ai_addr: ?*SOCKADDR,
    ai_blob: ?*opaque{},
    ai_bloblen: ?*opaque{},
    ai_provider: ?*Guid,
    ai_next: ?*addrinfoexA,
};
// --------------------------------------------------------
// Type: addrinfoexW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const addrinfoexW = extern struct {
    ai_flags: i32,
    ai_family: i32,
    ai_socktype: i32,
    ai_protocol: i32,
    ai_addrlen: ?*opaque{},
    ai_canonname: ?*u16,
    ai_addr: ?*SOCKADDR,
    ai_blob: ?*opaque{},
    ai_bloblen: ?*opaque{},
    ai_provider: ?*Guid,
    ai_next: ?*addrinfoexW,
};
// --------------------------------------------------------
// Type: addrinfoex2A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const addrinfoex2A = extern struct {
    ai_flags: i32,
    ai_family: i32,
    ai_socktype: i32,
    ai_protocol: i32,
    ai_addrlen: ?*opaque{},
    ai_canonname: ?*i8,
    ai_addr: ?*SOCKADDR,
    ai_blob: ?*opaque{},
    ai_bloblen: ?*opaque{},
    ai_provider: ?*Guid,
    ai_next: ?*addrinfoex2A,
    ai_version: i32,
    ai_fqdn: ?*i8,
};
// --------------------------------------------------------
// Type: addrinfoex2W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const addrinfoex2W = extern struct {
    ai_flags: i32,
    ai_family: i32,
    ai_socktype: i32,
    ai_protocol: i32,
    ai_addrlen: ?*opaque{},
    ai_canonname: ?*u16,
    ai_addr: ?*SOCKADDR,
    ai_blob: ?*opaque{},
    ai_bloblen: ?*opaque{},
    ai_provider: ?*Guid,
    ai_next: ?*addrinfoex2W,
    ai_version: i32,
    ai_fqdn: ?*u16,
};
// --------------------------------------------------------
// Type: addrinfoex3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const addrinfoex3 = extern struct {
    ai_flags: i32,
    ai_family: i32,
    ai_socktype: i32,
    ai_protocol: i32,
    ai_addrlen: ?*opaque{},
    ai_canonname: ?*u16,
    ai_addr: ?*SOCKADDR,
    ai_blob: ?*opaque{},
    ai_bloblen: ?*opaque{},
    ai_provider: ?*Guid,
    ai_next: ?*addrinfoex3,
    ai_version: i32,
    ai_fqdn: ?*u16,
    ai_interfaceindex: i32,
};
// --------------------------------------------------------
// Type: addrinfoex4
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const addrinfoex4 = extern struct {
    ai_flags: i32,
    ai_family: i32,
    ai_socktype: i32,
    ai_protocol: i32,
    ai_addrlen: ?*opaque{},
    ai_canonname: ?*u16,
    ai_addr: ?*SOCKADDR,
    ai_blob: ?*opaque{},
    ai_bloblen: ?*opaque{},
    ai_provider: ?*Guid,
    ai_next: ?*addrinfoex4,
    ai_version: i32,
    ai_fqdn: ?*u16,
    ai_interfaceindex: i32,
    ai_resolutionhandle: HANDLE,
};
// --------------------------------------------------------
// Type: fd_set
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const fd_set = extern struct {
    fd_count: u32,
    fd_array: ?[*]?*opaque{},
};
// --------------------------------------------------------
// Type: timeval
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const timeval = extern struct {
    tv_sec: i32,
    tv_usec: i32,
};
// --------------------------------------------------------
// Type: hostent
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const hostent = extern struct {
    h_name: ?*i8,
    h_aliases: ?*?*i8,
    h_addrtype: i16,
    h_length: i16,
    h_addr_list: ?*?*i8,
};
// --------------------------------------------------------
// Type: netent
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const netent = extern struct {
    n_name: ?*i8,
    n_aliases: ?*?*i8,
    n_addrtype: i16,
    n_net: u32,
};
// --------------------------------------------------------
// Type: servent
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const servent = extern struct {
    s_name: ?*i8,
    s_aliases: ?*?*i8,
    s_port: i16,
    s_proto: ?*i8,
};
// --------------------------------------------------------
// Type: protoent
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const protoent = extern struct {
    p_name: ?*i8,
    p_aliases: ?*?*i8,
    p_proto: i16,
};
// --------------------------------------------------------
// Type: WSAData
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSAData = extern struct {
    wVersion: u16,
    wHighVersion: u16,
    szDescription: ?[*]i8,
    szSystemStatus: ?[*]i8,
    iMaxSockets: u16,
    iMaxUdpDg: u16,
    lpVendorInfo: ?*i8,
};
// --------------------------------------------------------
// Type: sockproto
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const sockproto = extern struct {
    sp_family: u16,
    sp_protocol: u16,
};
// --------------------------------------------------------
// Type: linger
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const linger = extern struct {
    l_onoff: u16,
    l_linger: u16,
};
// --------------------------------------------------------
// Type: WSANETWORKEVENTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSANETWORKEVENTS = extern struct {
    lNetworkEvents: i32,
    iErrorCode: ?[*]i32,
};
// --------------------------------------------------------
// Type: WSAPROTOCOLCHAIN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSAPROTOCOLCHAIN = extern struct {
    ChainLen: i32,
    ChainEntries: ?[*]u32,
};
// --------------------------------------------------------
// Type: WSAPROTOCOL_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSAPROTOCOL_INFOA = extern struct {
    dwServiceFlags1: u32,
    dwServiceFlags2: u32,
    dwServiceFlags3: u32,
    dwServiceFlags4: u32,
    dwProviderFlags: u32,
    ProviderId: Guid,
    dwCatalogEntryId: u32,
    ProtocolChain: WSAPROTOCOLCHAIN,
    iVersion: i32,
    iAddressFamily: i32,
    iMaxSockAddr: i32,
    iMinSockAddr: i32,
    iSocketType: i32,
    iProtocol: i32,
    iProtocolMaxOffset: i32,
    iNetworkByteOrder: i32,
    iSecurityScheme: i32,
    dwMessageSize: u32,
    dwProviderReserved: u32,
    szProtocol: ?[*]i8,
};
// --------------------------------------------------------
// Type: WSAPROTOCOL_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSAPROTOCOL_INFOW = extern struct {
    dwServiceFlags1: u32,
    dwServiceFlags2: u32,
    dwServiceFlags3: u32,
    dwServiceFlags4: u32,
    dwProviderFlags: u32,
    ProviderId: Guid,
    dwCatalogEntryId: u32,
    ProtocolChain: WSAPROTOCOLCHAIN,
    iVersion: i32,
    iAddressFamily: i32,
    iMaxSockAddr: i32,
    iMinSockAddr: i32,
    iSocketType: i32,
    iProtocol: i32,
    iProtocolMaxOffset: i32,
    iNetworkByteOrder: i32,
    iSecurityScheme: i32,
    dwMessageSize: u32,
    dwProviderReserved: u32,
    szProtocol: ?[*]u16,
};
// --------------------------------------------------------
// Type: LPCONDITIONPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPCONDITIONPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSAOVERLAPPED_COMPLETION_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSAOVERLAPPED_COMPLETION_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WSACOMPLETIONTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSACOMPLETIONTYPE = *opaque{
};
// --------------------------------------------------------
// Type: WSACOMPLETION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSACOMPLETION = extern struct {
    Type: WSACOMPLETIONTYPE,
    Parameters: _Parameters_e__Union,
    // --------------------------------------------------------
    // Type: _Parameters_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Parameters_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Port_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Port_e__Struct = extern struct {
            lpOverlapped: ?*OVERLAPPED,
            hPort: HANDLE,
            Key: ?*opaque{},
        };
        // --------------------------------------------------------
        // Type: _Event_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Event_e__Struct = extern struct {
            lpOverlapped: ?*OVERLAPPED,
        };
        // --------------------------------------------------------
        // Type: _WindowMessage_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _WindowMessage_e__Struct = extern struct {
            hWnd: HWND,
            uMsg: u32,
            context: WPARAM,
        };
        // --------------------------------------------------------
        // Type: _Apc_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Apc_e__Struct = extern struct {
            lpOverlapped: ?*OVERLAPPED,
            lpfnCompletionProc: LPWSAOVERLAPPED_COMPLETION_ROUTINE,
        };
    };
};
// --------------------------------------------------------
// Type: AFPROTOCOLS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AFPROTOCOLS = extern struct {
    iAddressFamily: i32,
    iProtocol: i32,
};
// --------------------------------------------------------
// Type: WSAECOMPARATOR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSAECOMPARATOR = *opaque{
};
// --------------------------------------------------------
// Type: WSAVERSION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSAVERSION = extern struct {
    dwVersion: u32,
    ecHow: WSAECOMPARATOR,
};
// --------------------------------------------------------
// Type: WSAQUERYSETA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSAQUERYSETA = extern struct {
    dwSize: u32,
    lpszServiceInstanceName: ?*i8,
    lpServiceClassId: ?*Guid,
    lpVersion: ?*WSAVERSION,
    lpszComment: ?*i8,
    dwNameSpace: u32,
    lpNSProviderId: ?*Guid,
    lpszContext: ?*i8,
    dwNumberOfProtocols: u32,
    lpafpProtocols: ?*AFPROTOCOLS,
    lpszQueryString: ?*i8,
    dwNumberOfCsAddrs: u32,
    lpcsaBuffer: ?*CSADDR_INFO,
    dwOutputFlags: u32,
    lpBlob: ?*BLOB,
};
// --------------------------------------------------------
// Type: WSAQUERYSETW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSAQUERYSETW = extern struct {
    dwSize: u32,
    lpszServiceInstanceName: ?*u16,
    lpServiceClassId: ?*Guid,
    lpVersion: ?*WSAVERSION,
    lpszComment: ?*u16,
    dwNameSpace: u32,
    lpNSProviderId: ?*Guid,
    lpszContext: ?*u16,
    dwNumberOfProtocols: u32,
    lpafpProtocols: ?*AFPROTOCOLS,
    lpszQueryString: ?*u16,
    dwNumberOfCsAddrs: u32,
    lpcsaBuffer: ?*CSADDR_INFO,
    dwOutputFlags: u32,
    lpBlob: ?*BLOB,
};
// --------------------------------------------------------
// Type: WSAQUERYSET2A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSAQUERYSET2A = extern struct {
    dwSize: u32,
    lpszServiceInstanceName: ?*i8,
    lpVersion: ?*WSAVERSION,
    lpszComment: ?*i8,
    dwNameSpace: u32,
    lpNSProviderId: ?*Guid,
    lpszContext: ?*i8,
    dwNumberOfProtocols: u32,
    lpafpProtocols: ?*AFPROTOCOLS,
    lpszQueryString: ?*i8,
    dwNumberOfCsAddrs: u32,
    lpcsaBuffer: ?*CSADDR_INFO,
    dwOutputFlags: u32,
    lpBlob: ?*BLOB,
};
// --------------------------------------------------------
// Type: WSAQUERYSET2W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSAQUERYSET2W = extern struct {
    dwSize: u32,
    lpszServiceInstanceName: ?*u16,
    lpVersion: ?*WSAVERSION,
    lpszComment: ?*u16,
    dwNameSpace: u32,
    lpNSProviderId: ?*Guid,
    lpszContext: ?*u16,
    dwNumberOfProtocols: u32,
    lpafpProtocols: ?*AFPROTOCOLS,
    lpszQueryString: ?*u16,
    dwNumberOfCsAddrs: u32,
    lpcsaBuffer: ?*CSADDR_INFO,
    dwOutputFlags: u32,
    lpBlob: ?*BLOB,
};
// --------------------------------------------------------
// Type: WSAESETSERVICEOP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSAESETSERVICEOP = *opaque{
};
// --------------------------------------------------------
// Type: WSANSCLASSINFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSANSCLASSINFOA = extern struct {
    lpszName: ?*i8,
    dwNameSpace: u32,
    dwValueType: u32,
    dwValueSize: u32,
    lpValue: ?*opaque{},
};
// --------------------------------------------------------
// Type: WSANSCLASSINFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSANSCLASSINFOW = extern struct {
    lpszName: ?*u16,
    dwNameSpace: u32,
    dwValueType: u32,
    dwValueSize: u32,
    lpValue: ?*opaque{},
};
// --------------------------------------------------------
// Type: WSASERVICECLASSINFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSASERVICECLASSINFOA = extern struct {
    lpServiceClassId: ?*Guid,
    lpszServiceClassName: ?*i8,
    dwCount: u32,
    lpClassInfos: ?*WSANSCLASSINFOA,
};
// --------------------------------------------------------
// Type: WSASERVICECLASSINFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSASERVICECLASSINFOW = extern struct {
    lpServiceClassId: ?*Guid,
    lpszServiceClassName: ?*u16,
    dwCount: u32,
    lpClassInfos: ?*WSANSCLASSINFOW,
};
// --------------------------------------------------------
// Type: WSANAMESPACE_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSANAMESPACE_INFOA = extern struct {
    NSProviderId: Guid,
    dwNameSpace: u32,
    fActive: BOOL,
    dwVersion: u32,
    lpszIdentifier: ?*i8,
};
// --------------------------------------------------------
// Type: WSANAMESPACE_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSANAMESPACE_INFOW = extern struct {
    NSProviderId: Guid,
    dwNameSpace: u32,
    fActive: BOOL,
    dwVersion: u32,
    lpszIdentifier: ?*u16,
};
// --------------------------------------------------------
// Type: WSANAMESPACE_INFOEXA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSANAMESPACE_INFOEXA = extern struct {
    NSProviderId: Guid,
    dwNameSpace: u32,
    fActive: BOOL,
    dwVersion: u32,
    lpszIdentifier: ?*i8,
    ProviderSpecific: BLOB,
};
// --------------------------------------------------------
// Type: WSANAMESPACE_INFOEXW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSANAMESPACE_INFOEXW = extern struct {
    NSProviderId: Guid,
    dwNameSpace: u32,
    fActive: BOOL,
    dwVersion: u32,
    lpszIdentifier: ?*u16,
    ProviderSpecific: BLOB,
};
// --------------------------------------------------------
// Type: WSAPOLLFD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSAPOLLFD = extern struct {
    fd: ?*opaque{},
    events: i16,
    revents: i16,
};
// --------------------------------------------------------
// Type: in6_addr
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const in6_addr = extern struct {
    u: _u_e__Union,
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: sockaddr_in6_old
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const sockaddr_in6_old = extern struct {
    sin6_family: i16,
    sin6_port: u16,
    sin6_flowinfo: u32,
    sin6_addr: in6_addr,
};
// --------------------------------------------------------
// Type: sockaddr_gen
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const sockaddr_gen = *opaque{
};
// --------------------------------------------------------
// Type: INTERFACE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERFACE_INFO = extern struct {
    iiFlags: u32,
    iiAddress: sockaddr_gen,
    iiBroadcastAddress: sockaddr_gen,
    iiNetmask: sockaddr_gen,
};
// --------------------------------------------------------
// Type: INTERFACE_INFO_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERFACE_INFO_EX = extern struct {
    iiFlags: u32,
    iiAddress: SOCKET_ADDRESS,
    iiBroadcastAddress: SOCKET_ADDRESS,
    iiNetmask: SOCKET_ADDRESS,
};
// --------------------------------------------------------
// Type: PMTUD_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMTUD_STATE = *opaque{
};
// --------------------------------------------------------
// Type: sockaddr_in6_w2ksp1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const sockaddr_in6_w2ksp1 = extern struct {
    sin6_family: i16,
    sin6_port: u16,
    sin6_flowinfo: u32,
    sin6_addr: in6_addr,
    sin6_scope_id: u32,
};
// --------------------------------------------------------
// Type: MULTICAST_MODE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MULTICAST_MODE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: ip_mreq
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ip_mreq = extern struct {
    imr_multiaddr: in_addr,
    imr_interface: in_addr,
};
// --------------------------------------------------------
// Type: ip_mreq_source
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ip_mreq_source = extern struct {
    imr_multiaddr: in_addr,
    imr_sourceaddr: in_addr,
    imr_interface: in_addr,
};
// --------------------------------------------------------
// Type: ip_msfilter
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ip_msfilter = extern struct {
    imsf_multiaddr: in_addr,
    imsf_interface: in_addr,
    imsf_fmode: MULTICAST_MODE_TYPE,
    imsf_numsrc: u32,
    imsf_slist: ?[*]in_addr,
};
// --------------------------------------------------------
// Type: ipv6_mreq
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ipv6_mreq = extern struct {
    ipv6mr_multiaddr: in6_addr,
    ipv6mr_interface: u32,
};
// --------------------------------------------------------
// Type: group_req
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const group_req = extern struct {
    gr_interface: u32,
    gr_group: SOCKADDR_STORAGE_LH,
};
// --------------------------------------------------------
// Type: group_source_req
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const group_source_req = extern struct {
    gsr_interface: u32,
    gsr_group: SOCKADDR_STORAGE_LH,
    gsr_source: SOCKADDR_STORAGE_LH,
};
// --------------------------------------------------------
// Type: group_filter
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const group_filter = extern struct {
    gf_interface: u32,
    gf_group: SOCKADDR_STORAGE_LH,
    gf_fmode: MULTICAST_MODE_TYPE,
    gf_numsrc: u32,
    gf_slist: ?[*]SOCKADDR_STORAGE_LH,
};
// --------------------------------------------------------
// Type: in_pktinfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const in_pktinfo = extern struct {
    ipi_addr: in_addr,
    ipi_ifindex: u32,
};
// --------------------------------------------------------
// Type: in6_pktinfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const in6_pktinfo = extern struct {
    ipi6_addr: in6_addr,
    ipi6_ifindex: u32,
};
// --------------------------------------------------------
// Type: in_pktinfo_ex
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const in_pktinfo_ex = extern struct {
    pkt_info: in_pktinfo,
    scope_id: SCOPE_ID,
};
// --------------------------------------------------------
// Type: in6_pktinfo_ex
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const in6_pktinfo_ex = extern struct {
    pkt_info: in6_pktinfo,
    scope_id: SCOPE_ID,
};
// --------------------------------------------------------
// Type: in_recverr
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const in_recverr = extern struct {
    protocol: IPPROTO,
    info: u32,
    type: u8,
    code: u8,
};
// --------------------------------------------------------
// Type: icmp_error_info
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const icmp_error_info = extern struct {
    srcaddress: SOCKADDR_INET,
    protocol: IPPROTO,
    type: u8,
    code: u8,
};
// --------------------------------------------------------
// Type: eWINDOW_ADVANCE_METHOD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const eWINDOW_ADVANCE_METHOD = *opaque{
};
// --------------------------------------------------------
// Type: RM_SEND_WINDOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RM_SEND_WINDOW = extern struct {
    RateKbitsPerSec: u32,
    WindowSizeInMSecs: u32,
    WindowSizeInBytes: u32,
};
// --------------------------------------------------------
// Type: RM_SENDER_STATS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RM_SENDER_STATS = extern struct {
    DataBytesSent: u64,
    TotalBytesSent: u64,
    NaksReceived: u64,
    NaksReceivedTooLate: u64,
    NumOutstandingNaks: u64,
    NumNaksAfterRData: u64,
    RepairPacketsSent: u64,
    BufferSpaceAvailable: u64,
    TrailingEdgeSeqId: u64,
    LeadingEdgeSeqId: u64,
    RateKBitsPerSecOverall: u64,
    RateKBitsPerSecLast: u64,
    TotalODataPacketsSent: u64,
};
// --------------------------------------------------------
// Type: RM_RECEIVER_STATS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RM_RECEIVER_STATS = extern struct {
    NumODataPacketsReceived: u64,
    NumRDataPacketsReceived: u64,
    NumDuplicateDataPackets: u64,
    DataBytesReceived: u64,
    TotalBytesReceived: u64,
    RateKBitsPerSecOverall: u64,
    RateKBitsPerSecLast: u64,
    TrailingEdgeSeqId: u64,
    LeadingEdgeSeqId: u64,
    AverageSequencesInWindow: u64,
    MinSequencesInWindow: u64,
    MaxSequencesInWindow: u64,
    FirstNakSequenceNumber: u64,
    NumPendingNaks: u64,
    NumOutstandingNaks: u64,
    NumDataPacketsBuffered: u64,
    TotalSelectiveNaksSent: u64,
    TotalParityNaksSent: u64,
};
// --------------------------------------------------------
// Type: RM_FEC_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RM_FEC_INFO = extern struct {
    FECBlockSize: u16,
    FECProActivePackets: u16,
    FECGroupSize: u8,
    fFECOnDemandParityEnabled: u8,
};
// --------------------------------------------------------
// Type: IPX_ADDRESS_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPX_ADDRESS_DATA = extern struct {
    adapternum: i32,
    netnum: ?[*]u8,
    nodenum: ?[*]u8,
    wan: u8,
    status: u8,
    maxpkt: i32,
    linkspeed: u32,
};
// --------------------------------------------------------
// Type: IPX_NETNUM_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPX_NETNUM_DATA = extern struct {
    netnum: ?[*]u8,
    hopcount: u16,
    netdelay: u16,
    cardnum: i32,
    router: ?[*]u8,
};
// --------------------------------------------------------
// Type: IPX_SPXCONNSTATUS_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPX_SPXCONNSTATUS_DATA = extern struct {
    ConnectionState: u8,
    WatchDogActive: u8,
    LocalConnectionId: u16,
    RemoteConnectionId: u16,
    LocalSequenceNumber: u16,
    LocalAckNumber: u16,
    LocalAllocNumber: u16,
    RemoteAckNumber: u16,
    RemoteAllocNumber: u16,
    LocalSocket: u16,
    ImmediateAddress: ?[*]u8,
    RemoteNetwork: ?[*]u8,
    RemoteNode: ?[*]u8,
    RemoteSocket: u16,
    RetransmissionCount: u16,
    EstimatedRoundTripDelay: u16,
    RetransmittedPackets: u16,
    SuppressedPacket: u16,
};
// --------------------------------------------------------
// Type: LM_IRPARMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LM_IRPARMS = extern struct {
    nTXDataBytes: u32,
    nRXDataBytes: u32,
    nBaudRate: u32,
    thresholdTime: u32,
    discTime: u32,
    nMSLinkTurn: u16,
    nTXPackets: u8,
    nRXPackets: u8,
};
// --------------------------------------------------------
// Type: SOCKADDR_IRDA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SOCKADDR_IRDA = extern struct {
    irdaAddressFamily: u16,
    irdaDeviceID: ?[*]u8,
    irdaServiceName: ?[*]i8,
};
// --------------------------------------------------------
// Type: WINDOWS_IRDA_DEVICE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WINDOWS_IRDA_DEVICE_INFO = extern struct {
    irdaDeviceID: ?[*]u8,
    irdaDeviceName: ?[*]i8,
    irdaDeviceHints1: u8,
    irdaDeviceHints2: u8,
    irdaCharSet: u8,
};
// --------------------------------------------------------
// Type: WCE_IRDA_DEVICE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WCE_IRDA_DEVICE_INFO = extern struct {
    irdaDeviceID: ?[*]u8,
    irdaDeviceName: ?[*]i8,
    Reserved: ?[*]u8,
};
// --------------------------------------------------------
// Type: WINDOWS_DEVICELIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WINDOWS_DEVICELIST = extern struct {
    numDevice: u32,
    Device: ?[*]WINDOWS_IRDA_DEVICE_INFO,
};
// --------------------------------------------------------
// Type: WCE_DEVICELIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WCE_DEVICELIST = extern struct {
    numDevice: u32,
    Device: ?[*]WCE_IRDA_DEVICE_INFO,
};
// --------------------------------------------------------
// Type: WINDOWS_IAS_SET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WINDOWS_IAS_SET = extern struct {
    irdaClassName: ?[*]i8,
    irdaAttribName: ?[*]i8,
    irdaAttribType: u32,
    irdaAttribute: _irdaAttribute_e__Union,
    // --------------------------------------------------------
    // Type: _irdaAttribute_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _irdaAttribute_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _irdaAttribOctetSeq_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _irdaAttribOctetSeq_e__Struct = extern struct {
            Len: u16,
            OctetSeq: ?[*]u8,
        };
        // --------------------------------------------------------
        // Type: _irdaAttribUsrStr_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _irdaAttribUsrStr_e__Struct = extern struct {
            Len: u8,
            CharSet: u8,
            UsrStr: ?[*]u8,
        };
    };
};
// --------------------------------------------------------
// Type: WINDOWS_IAS_QUERY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WINDOWS_IAS_QUERY = extern struct {
    irdaDeviceID: ?[*]u8,
    irdaClassName: ?[*]i8,
    irdaAttribName: ?[*]i8,
    irdaAttribType: u32,
    irdaAttribute: _irdaAttribute_e__Union,
    // --------------------------------------------------------
    // Type: _irdaAttribute_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _irdaAttribute_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _irdaAttribOctetSeq_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _irdaAttribOctetSeq_e__Struct = extern struct {
            Len: u32,
            OctetSeq: ?[*]u8,
        };
        // --------------------------------------------------------
        // Type: _irdaAttribUsrStr_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _irdaAttribUsrStr_e__Struct = extern struct {
            Len: u32,
            CharSet: u32,
            UsrStr: ?[*]u8,
        };
    };
};
// --------------------------------------------------------
// Type: NL_BANDWIDTH_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NL_BANDWIDTH_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: NL_PATH_BANDWIDTH_ROD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NL_PATH_BANDWIDTH_ROD = extern struct {
    Bandwidth: u64,
    Instability: u64,
    BandwidthPeaked: u8,
};
// --------------------------------------------------------
// Type: NL_NETWORK_CATEGORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NL_NETWORK_CATEGORY = *opaque{
};
// --------------------------------------------------------
// Type: NL_INTERFACE_NETWORK_CATEGORY_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NL_INTERFACE_NETWORK_CATEGORY_STATE = *opaque{
};
// --------------------------------------------------------
// Type: TCPSTATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TCPSTATE = *opaque{
};
// --------------------------------------------------------
// Type: TRANSPORT_SETTING_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRANSPORT_SETTING_ID = extern struct {
    Guid: Guid,
};
// --------------------------------------------------------
// Type: tcp_keepalive
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tcp_keepalive = extern struct {
    onoff: u32,
    keepalivetime: u32,
    keepaliveinterval: u32,
};
// --------------------------------------------------------
// Type: CONTROL_CHANNEL_TRIGGER_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CONTROL_CHANNEL_TRIGGER_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: REAL_TIME_NOTIFICATION_SETTING_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REAL_TIME_NOTIFICATION_SETTING_INPUT = extern struct {
    TransportSettingId: TRANSPORT_SETTING_ID,
    BrokerEventGuid: Guid,
};
// --------------------------------------------------------
// Type: REAL_TIME_NOTIFICATION_SETTING_INPUT_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REAL_TIME_NOTIFICATION_SETTING_INPUT_EX = extern struct {
    TransportSettingId: TRANSPORT_SETTING_ID,
    BrokerEventGuid: Guid,
    Unmark: u8,
};
// --------------------------------------------------------
// Type: REAL_TIME_NOTIFICATION_SETTING_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REAL_TIME_NOTIFICATION_SETTING_OUTPUT = extern struct {
    ChannelStatus: CONTROL_CHANNEL_TRIGGER_STATUS,
};
// --------------------------------------------------------
// Type: ASSOCIATE_NAMERES_CONTEXT_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ASSOCIATE_NAMERES_CONTEXT_INPUT = extern struct {
    TransportSettingId: TRANSPORT_SETTING_ID,
    Handle: u64,
};
// --------------------------------------------------------
// Type: RCVALL_VALUE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RCVALL_VALUE = *opaque{
};
// --------------------------------------------------------
// Type: RCVALL_IF
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RCVALL_IF = extern struct {
    Mode: RCVALL_VALUE,
    Interface: u32,
};
// --------------------------------------------------------
// Type: TCP_INITIAL_RTO_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TCP_INITIAL_RTO_PARAMETERS = extern struct {
    Rtt: u16,
    MaxSynRetransmissions: u8,
};
// --------------------------------------------------------
// Type: TCP_ICW_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TCP_ICW_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: TCP_ICW_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TCP_ICW_PARAMETERS = extern struct {
    Level: TCP_ICW_LEVEL,
};
// --------------------------------------------------------
// Type: TCP_ACK_FREQUENCY_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TCP_ACK_FREQUENCY_PARAMETERS = extern struct {
    TcpDelayedAckFrequency: u8,
};
// --------------------------------------------------------
// Type: TCP_INFO_v0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TCP_INFO_v0 = extern struct {
    State: TCPSTATE,
    Mss: u32,
    ConnectionTimeMs: u64,
    TimestampsEnabled: u8,
    RttUs: u32,
    MinRttUs: u32,
    BytesInFlight: u32,
    Cwnd: u32,
    SndWnd: u32,
    RcvWnd: u32,
    RcvBuf: u32,
    BytesOut: u64,
    BytesIn: u64,
    BytesReordered: u32,
    BytesRetrans: u32,
    FastRetrans: u32,
    DupAcksIn: u32,
    TimeoutEpisodes: u32,
    SynRetrans: u8,
};
// --------------------------------------------------------
// Type: TCP_INFO_v1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TCP_INFO_v1 = extern struct {
    State: TCPSTATE,
    Mss: u32,
    ConnectionTimeMs: u64,
    TimestampsEnabled: u8,
    RttUs: u32,
    MinRttUs: u32,
    BytesInFlight: u32,
    Cwnd: u32,
    SndWnd: u32,
    RcvWnd: u32,
    RcvBuf: u32,
    BytesOut: u64,
    BytesIn: u64,
    BytesReordered: u32,
    BytesRetrans: u32,
    FastRetrans: u32,
    DupAcksIn: u32,
    TimeoutEpisodes: u32,
    SynRetrans: u8,
    SndLimTransRwin: u32,
    SndLimTimeRwin: u32,
    SndLimBytesRwin: u64,
    SndLimTransCwnd: u32,
    SndLimTimeCwnd: u32,
    SndLimBytesCwnd: u64,
    SndLimTransSnd: u32,
    SndLimTimeSnd: u32,
    SndLimBytesSnd: u64,
};
// --------------------------------------------------------
// Type: INET_PORT_RANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INET_PORT_RANGE = extern struct {
    StartPort: u16,
    NumberOfPorts: u16,
};
// --------------------------------------------------------
// Type: INET_PORT_RESERVATION_TOKEN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INET_PORT_RESERVATION_TOKEN = extern struct {
    Token: u64,
};
// --------------------------------------------------------
// Type: INET_PORT_RESERVATION_INSTANCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INET_PORT_RESERVATION_INSTANCE = extern struct {
    Reservation: INET_PORT_RANGE,
    Token: INET_PORT_RESERVATION_TOKEN,
};
// --------------------------------------------------------
// Type: INET_PORT_RESERVATION_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INET_PORT_RESERVATION_INFORMATION = extern struct {
    OwningPid: u32,
};
// --------------------------------------------------------
// Type: SOCKET_USAGE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SOCKET_USAGE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SOCKET_SECURITY_PROTOCOL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SOCKET_SECURITY_PROTOCOL = *opaque{
};
// --------------------------------------------------------
// Type: SOCKET_SECURITY_SETTINGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SOCKET_SECURITY_SETTINGS = extern struct {
    SecurityProtocol: SOCKET_SECURITY_PROTOCOL,
    SecurityFlags: u32,
};
// --------------------------------------------------------
// Type: SOCKET_SECURITY_SETTINGS_IPSEC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SOCKET_SECURITY_SETTINGS_IPSEC = extern struct {
    SecurityProtocol: SOCKET_SECURITY_PROTOCOL,
    SecurityFlags: u32,
    IpsecFlags: u32,
    AuthipMMPolicyKey: Guid,
    AuthipQMPolicyKey: Guid,
    Reserved: Guid,
    Reserved2: u64,
    UserNameStringLen: u32,
    DomainNameStringLen: u32,
    PasswordStringLen: u32,
    AllStrings: ?[*]u16,
};
// --------------------------------------------------------
// Type: SOCKET_PEER_TARGET_NAME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SOCKET_PEER_TARGET_NAME = extern struct {
    SecurityProtocol: SOCKET_SECURITY_PROTOCOL,
    PeerAddress: SOCKADDR_STORAGE_LH,
    PeerTargetNameStringLen: u32,
    AllStrings: ?[*]u16,
};
// --------------------------------------------------------
// Type: SOCKET_SECURITY_QUERY_TEMPLATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SOCKET_SECURITY_QUERY_TEMPLATE = extern struct {
    SecurityProtocol: SOCKET_SECURITY_PROTOCOL,
    PeerAddress: SOCKADDR_STORAGE_LH,
    PeerTokenAccessMask: u32,
};
// --------------------------------------------------------
// Type: SOCKET_SECURITY_QUERY_TEMPLATE_IPSEC2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SOCKET_SECURITY_QUERY_TEMPLATE_IPSEC2 = extern struct {
    SecurityProtocol: SOCKET_SECURITY_PROTOCOL,
    PeerAddress: SOCKADDR_STORAGE_LH,
    PeerTokenAccessMask: u32,
    Flags: u32,
    FieldMask: u32,
};
// --------------------------------------------------------
// Type: SOCKET_SECURITY_QUERY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SOCKET_SECURITY_QUERY_INFO = extern struct {
    SecurityProtocol: SOCKET_SECURITY_PROTOCOL,
    Flags: u32,
    PeerApplicationAccessTokenHandle: u64,
    PeerMachineAccessTokenHandle: u64,
};
// --------------------------------------------------------
// Type: SOCKET_SECURITY_QUERY_INFO_IPSEC2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SOCKET_SECURITY_QUERY_INFO_IPSEC2 = extern struct {
    SecurityProtocol: SOCKET_SECURITY_PROTOCOL,
    Flags: u32,
    PeerApplicationAccessTokenHandle: u64,
    PeerMachineAccessTokenHandle: u64,
    MmSaId: u64,
    QmSaId: u64,
    NegotiationWinerr: u32,
    SaLookupContext: Guid,
};
// --------------------------------------------------------
// Type: RSS_SCALABILITY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RSS_SCALABILITY_INFO = extern struct {
    RssEnabled: u8,
};
// --------------------------------------------------------
// Type: WSA_COMPATIBILITY_BEHAVIOR_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSA_COMPATIBILITY_BEHAVIOR_ID = *opaque{
};
// --------------------------------------------------------
// Type: WSA_COMPATIBILITY_MODE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSA_COMPATIBILITY_MODE = extern struct {
    BehaviorId: WSA_COMPATIBILITY_BEHAVIOR_ID,
    TargetOsVersion: u32,
};
// --------------------------------------------------------
// Type: RIO_BUFFERID_t
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const RIO_BUFFERID_t = opaque {
};
// --------------------------------------------------------
// Type: RIO_CQ_t
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const RIO_CQ_t = opaque {
};
// --------------------------------------------------------
// Type: RIO_RQ_t
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const RIO_RQ_t = opaque {
};
// --------------------------------------------------------
// Type: RIORESULT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RIORESULT = extern struct {
    Status: i32,
    BytesTransferred: u32,
    SocketContext: u64,
    RequestContext: u64,
};
// --------------------------------------------------------
// Type: RIO_BUF
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RIO_BUF = extern struct {
    BufferId: ?*RIO_BUFFERID_t,
    Offset: u32,
    Length: u32,
};
// --------------------------------------------------------
// Type: RIO_CMSG_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RIO_CMSG_BUFFER = extern struct {
    TotalLength: u32,
};
// --------------------------------------------------------
// Type: ATM_ADDRESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ATM_ADDRESS = extern struct {
    AddressType: u32,
    NumofDigits: u32,
    Addr: ?[*]u8,
};
// --------------------------------------------------------
// Type: ATM_BLLI
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ATM_BLLI = extern struct {
    Layer2Protocol: u32,
    Layer2UserSpecifiedProtocol: u32,
    Layer3Protocol: u32,
    Layer3UserSpecifiedProtocol: u32,
    Layer3IPI: u32,
    SnapID: ?[*]u8,
};
// --------------------------------------------------------
// Type: ATM_BHLI
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ATM_BHLI = extern struct {
    HighLayerInfoType: u32,
    HighLayerInfoLength: u32,
    HighLayerInfo: ?[*]u8,
};
// --------------------------------------------------------
// Type: sockaddr_atm
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const sockaddr_atm = extern struct {
    satm_family: u16,
    satm_number: ATM_ADDRESS,
    satm_blli: ATM_BLLI,
    satm_bhli: ATM_BHLI,
};
// --------------------------------------------------------
// Type: Q2931_IE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const Q2931_IE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: Q2931_IE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const Q2931_IE = extern struct {
    IEType: Q2931_IE_TYPE,
    IELength: u32,
    IE: ?[*]u8,
};
// --------------------------------------------------------
// Type: AAL_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AAL_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: AAL5_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AAL5_PARAMETERS = extern struct {
    ForwardMaxCPCSSDUSize: u32,
    BackwardMaxCPCSSDUSize: u32,
    Mode: u8,
    SSCSType: u8,
};
// --------------------------------------------------------
// Type: AALUSER_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AALUSER_PARAMETERS = extern struct {
    UserDefined: u32,
};
// --------------------------------------------------------
// Type: AAL_PARAMETERS_IE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AAL_PARAMETERS_IE = extern struct {
    AALType: AAL_TYPE,
    AALSpecificParameters: _AALSpecificParameters_e__Union,
    // --------------------------------------------------------
    // Type: _AALSpecificParameters_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _AALSpecificParameters_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: ATM_TD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ATM_TD = extern struct {
    PeakCellRate_CLP0: u32,
    PeakCellRate_CLP01: u32,
    SustainableCellRate_CLP0: u32,
    SustainableCellRate_CLP01: u32,
    MaxBurstSize_CLP0: u32,
    MaxBurstSize_CLP01: u32,
    Tagging: BOOL,
};
// --------------------------------------------------------
// Type: ATM_TRAFFIC_DESCRIPTOR_IE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ATM_TRAFFIC_DESCRIPTOR_IE = extern struct {
    Forward: ATM_TD,
    Backward: ATM_TD,
    BestEffort: BOOL,
};
// --------------------------------------------------------
// Type: ATM_BROADBAND_BEARER_CAPABILITY_IE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ATM_BROADBAND_BEARER_CAPABILITY_IE = extern struct {
    BearerClass: u8,
    TrafficType: u8,
    TimingRequirements: u8,
    ClippingSusceptability: u8,
    UserPlaneConnectionConfig: u8,
};
// --------------------------------------------------------
// Type: ATM_BLLI_IE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ATM_BLLI_IE = extern struct {
    Layer2Protocol: u32,
    Layer2Mode: u8,
    Layer2WindowSize: u8,
    Layer2UserSpecifiedProtocol: u32,
    Layer3Protocol: u32,
    Layer3Mode: u8,
    Layer3DefaultPacketSize: u8,
    Layer3PacketWindowSize: u8,
    Layer3UserSpecifiedProtocol: u32,
    Layer3IPI: u32,
    SnapID: ?[*]u8,
};
// --------------------------------------------------------
// Type: ATM_CALLING_PARTY_NUMBER_IE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ATM_CALLING_PARTY_NUMBER_IE = extern struct {
    ATM_Number: ATM_ADDRESS,
    Presentation_Indication: u8,
    Screening_Indicator: u8,
};
// --------------------------------------------------------
// Type: ATM_CAUSE_IE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ATM_CAUSE_IE = extern struct {
    Location: u8,
    Cause: u8,
    DiagnosticsLength: u8,
    Diagnostics: ?[*]u8,
};
// --------------------------------------------------------
// Type: ATM_QOS_CLASS_IE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ATM_QOS_CLASS_IE = extern struct {
    QOSClassForward: u8,
    QOSClassBackward: u8,
};
// --------------------------------------------------------
// Type: ATM_TRANSIT_NETWORK_SELECTION_IE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ATM_TRANSIT_NETWORK_SELECTION_IE = extern struct {
    TypeOfNetworkId: u8,
    NetworkIdPlan: u8,
    NetworkIdLength: u8,
    NetworkId: ?[*]u8,
};
// --------------------------------------------------------
// Type: ATM_CONNECTION_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ATM_CONNECTION_ID = extern struct {
    DeviceNumber: u32,
    VPI: u32,
    VCI: u32,
};
// --------------------------------------------------------
// Type: ATM_PVC_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ATM_PVC_PARAMS = extern struct {
    PvcConnectionId: ATM_CONNECTION_ID,
    PvcQos: QOS,
};
// --------------------------------------------------------
// Type: NAPI_PROVIDER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NAPI_PROVIDER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: NAPI_PROVIDER_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NAPI_PROVIDER_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: NAPI_DOMAIN_DESCRIPTION_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NAPI_DOMAIN_DESCRIPTION_BLOB = extern struct {
    AuthLevel: u32,
    cchDomainName: u32,
    OffsetNextDomainDescription: u32,
    OffsetThisDomainName: u32,
};
// --------------------------------------------------------
// Type: NAPI_PROVIDER_INSTALLATION_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NAPI_PROVIDER_INSTALLATION_BLOB = extern struct {
    dwVersion: u32,
    dwProviderType: u32,
    fSupportsWildCard: u32,
    cDomains: u32,
    OffsetFirstDomain: u32,
};
// --------------------------------------------------------
// Type: TRANSMIT_FILE_BUFFERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRANSMIT_FILE_BUFFERS = extern struct {
    Head: ?*opaque{},
    HeadLength: u32,
    Tail: ?*opaque{},
    TailLength: u32,
};
// --------------------------------------------------------
// Type: LPFN_TRANSMITFILE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFN_TRANSMITFILE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPFN_ACCEPTEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFN_ACCEPTEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPFN_GETACCEPTEXSOCKADDRS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFN_GETACCEPTEXSOCKADDRS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: TRANSMIT_PACKETS_ELEMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRANSMIT_PACKETS_ELEMENT = extern struct {
    dwElFlags: u32,
    cLength: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            nFileOffset: LARGE_INTEGER,
            hFile: HANDLE,
        };
    };
};
// --------------------------------------------------------
// Type: LPFN_TRANSMITPACKETS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFN_TRANSMITPACKETS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPFN_CONNECTEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFN_CONNECTEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPFN_DISCONNECTEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFN_DISCONNECTEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: NLA_BLOB_DATA_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NLA_BLOB_DATA_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: NLA_CONNECTIVITY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NLA_CONNECTIVITY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: NLA_INTERNET
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NLA_INTERNET = *opaque{
};
// --------------------------------------------------------
// Type: NLA_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NLA_BLOB = extern struct {
    header: _header_e__Struct,
    data: _data_e__Union,
    // --------------------------------------------------------
    // Type: _data_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _data_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _ICS_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _ICS_e__Struct = extern struct {
            remote: _remote_e__Struct,
            // --------------------------------------------------------
            // Type: _remote_e__Struct
            // TypeLayoutAttr: sequential
            // TODO: I think this is a struct, but not sure at this point, assuming it is for now
            pub const _remote_e__Struct = extern struct {
                speed: u32,
                type: u32,
                state: u32,
                machineName: ?[*]u16,
                sharedAdapterName: ?[*]u16,
            };
        };
        // --------------------------------------------------------
        // Type: _locationData_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _locationData_e__Struct = extern struct {
            information: ?[*]i8,
        };
        // --------------------------------------------------------
        // Type: _interfaceData_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _interfaceData_e__Struct = extern struct {
            dwType: u32,
            dwSpeed: u32,
            adapterName: ?[*]i8,
        };
        // --------------------------------------------------------
        // Type: _connectivity_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _connectivity_e__Struct = extern struct {
            type: NLA_CONNECTIVITY_TYPE,
            internet: NLA_INTERNET,
        };
    };
    // --------------------------------------------------------
    // Type: _header_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _header_e__Struct = extern struct {
        type: NLA_BLOB_DATA_TYPE,
        dwSize: u32,
        nextOffset: u32,
    };
};
// --------------------------------------------------------
// Type: LPFN_WSARECVMSG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFN_WSARECVMSG = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WSAPOLLDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSAPOLLDATA = extern struct {
    result: i32,
    fds: u32,
    timeout: i32,
    fdArray: ?[*]WSAPOLLFD,
};
// --------------------------------------------------------
// Type: WSASENDMSG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSASENDMSG = extern struct {
    lpMsg: ?*WSAMSG,
    dwFlags: u32,
    lpNumberOfBytesSent: ?*u32,
    lpOverlapped: ?*OVERLAPPED,
    lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE,
};
// --------------------------------------------------------
// Type: LPFN_WSASENDMSG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFN_WSASENDMSG = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPFN_WSAPOLL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFN_WSAPOLL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPFN_RIORECEIVE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFN_RIORECEIVE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPFN_RIORECEIVEEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFN_RIORECEIVEEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPFN_RIOSEND
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFN_RIOSEND = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPFN_RIOSENDEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFN_RIOSENDEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPFN_RIOCLOSECOMPLETIONQUEUE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFN_RIOCLOSECOMPLETIONQUEUE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RIO_NOTIFICATION_COMPLETION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RIO_NOTIFICATION_COMPLETION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: RIO_NOTIFICATION_COMPLETION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RIO_NOTIFICATION_COMPLETION = extern struct {
    Type: RIO_NOTIFICATION_COMPLETION_TYPE,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Iocp_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Iocp_e__Struct = extern struct {
            IocpHandle: HANDLE,
            CompletionKey: ?*opaque{},
            Overlapped: ?*opaque{},
        };
        // --------------------------------------------------------
        // Type: _Event_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Event_e__Struct = extern struct {
            EventHandle: HANDLE,
            NotifyReset: BOOL,
        };
    };
};
// --------------------------------------------------------
// Type: LPFN_RIOCREATECOMPLETIONQUEUE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFN_RIOCREATECOMPLETIONQUEUE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPFN_RIOCREATEREQUESTQUEUE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFN_RIOCREATEREQUESTQUEUE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPFN_RIODEQUEUECOMPLETION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFN_RIODEQUEUECOMPLETION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPFN_RIODEREGISTERBUFFER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFN_RIODEREGISTERBUFFER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPFN_RIONOTIFY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFN_RIONOTIFY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPFN_RIOREGISTERBUFFER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFN_RIOREGISTERBUFFER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPFN_RIORESIZECOMPLETIONQUEUE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFN_RIORESIZECOMPLETIONQUEUE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPFN_RIORESIZEREQUESTQUEUE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFN_RIORESIZEREQUESTQUEUE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RIO_EXTENSION_FUNCTION_TABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RIO_EXTENSION_FUNCTION_TABLE = extern struct {
    cbSize: u32,
    RIOReceive: LPFN_RIORECEIVE,
    RIOReceiveEx: LPFN_RIORECEIVEEX,
    RIOSend: LPFN_RIOSEND,
    RIOSendEx: LPFN_RIOSENDEX,
    RIOCloseCompletionQueue: LPFN_RIOCLOSECOMPLETIONQUEUE,
    RIOCreateCompletionQueue: LPFN_RIOCREATECOMPLETIONQUEUE,
    RIOCreateRequestQueue: LPFN_RIOCREATEREQUESTQUEUE,
    RIODequeueCompletion: LPFN_RIODEQUEUECOMPLETION,
    RIODeregisterBuffer: LPFN_RIODEREGISTERBUFFER,
    RIONotify: LPFN_RIONOTIFY,
    RIORegisterBuffer: LPFN_RIOREGISTERBUFFER,
    RIOResizeCompletionQueue: LPFN_RIORESIZECOMPLETIONQUEUE,
    RIOResizeRequestQueue: LPFN_RIORESIZEREQUESTQUEUE,
};
// --------------------------------------------------------
// Type: WSPData
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSPData = extern struct {
    wVersion: u16,
    wHighVersion: u16,
    szDescription: ?[*]u16,
};
// --------------------------------------------------------
// Type: WSATHREADID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSATHREADID = extern struct {
    ThreadHandle: HANDLE,
    Reserved: ?*opaque{},
};
// --------------------------------------------------------
// Type: LPBLOCKINGCALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPBLOCKINGCALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSAUSERAPC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSAUSERAPC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPACCEPT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPACCEPT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPADDRESSTOSTRING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPADDRESSTOSTRING = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPASYNCSELECT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPASYNCSELECT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPBIND
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPBIND = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPCANCELBLOCKINGCALL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPCANCELBLOCKINGCALL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPCLEANUP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPCLEANUP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPCLOSESOCKET
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPCLOSESOCKET = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPCONNECT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPCONNECT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPDUPLICATESOCKET
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPDUPLICATESOCKET = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPENUMNETWORKEVENTS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPENUMNETWORKEVENTS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPEVENTSELECT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPEVENTSELECT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPGETOVERLAPPEDRESULT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPGETOVERLAPPEDRESULT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPGETPEERNAME
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPGETPEERNAME = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPGETSOCKNAME
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPGETSOCKNAME = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPGETSOCKOPT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPGETSOCKOPT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPGETQOSBYNAME
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPGETQOSBYNAME = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPIOCTL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPIOCTL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPJOINLEAF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPJOINLEAF = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPLISTEN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPLISTEN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPRECV
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPRECV = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPRECVDISCONNECT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPRECVDISCONNECT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPRECVFROM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPRECVFROM = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPSELECT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPSELECT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPSEND
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPSEND = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPSENDDISCONNECT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPSENDDISCONNECT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPSENDTO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPSENDTO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPSETSOCKOPT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPSETSOCKOPT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPSHUTDOWN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPSHUTDOWN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPSOCKET
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPSOCKET = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSPSTRINGTOADDRESS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPSTRINGTOADDRESS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WSPPROC_TABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSPPROC_TABLE = extern struct {
    lpWSPAccept: LPWSPACCEPT,
    lpWSPAddressToString: LPWSPADDRESSTOSTRING,
    lpWSPAsyncSelect: LPWSPASYNCSELECT,
    lpWSPBind: LPWSPBIND,
    lpWSPCancelBlockingCall: LPWSPCANCELBLOCKINGCALL,
    lpWSPCleanup: LPWSPCLEANUP,
    lpWSPCloseSocket: LPWSPCLOSESOCKET,
    lpWSPConnect: LPWSPCONNECT,
    lpWSPDuplicateSocket: LPWSPDUPLICATESOCKET,
    lpWSPEnumNetworkEvents: LPWSPENUMNETWORKEVENTS,
    lpWSPEventSelect: LPWSPEVENTSELECT,
    lpWSPGetOverlappedResult: LPWSPGETOVERLAPPEDRESULT,
    lpWSPGetPeerName: LPWSPGETPEERNAME,
    lpWSPGetSockName: LPWSPGETSOCKNAME,
    lpWSPGetSockOpt: LPWSPGETSOCKOPT,
    lpWSPGetQOSByName: LPWSPGETQOSBYNAME,
    lpWSPIoctl: LPWSPIOCTL,
    lpWSPJoinLeaf: LPWSPJOINLEAF,
    lpWSPListen: LPWSPLISTEN,
    lpWSPRecv: LPWSPRECV,
    lpWSPRecvDisconnect: LPWSPRECVDISCONNECT,
    lpWSPRecvFrom: LPWSPRECVFROM,
    lpWSPSelect: LPWSPSELECT,
    lpWSPSend: LPWSPSEND,
    lpWSPSendDisconnect: LPWSPSENDDISCONNECT,
    lpWSPSendTo: LPWSPSENDTO,
    lpWSPSetSockOpt: LPWSPSETSOCKOPT,
    lpWSPShutdown: LPWSPSHUTDOWN,
    lpWSPSocket: LPWSPSOCKET,
    lpWSPStringToAddress: LPWSPSTRINGTOADDRESS,
};
// --------------------------------------------------------
// Type: LPWPUCLOSEEVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWPUCLOSEEVENT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWPUCLOSESOCKETHANDLE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWPUCLOSESOCKETHANDLE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWPUCREATEEVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWPUCREATEEVENT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWPUCREATESOCKETHANDLE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWPUCREATESOCKETHANDLE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWPUFDISSET
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWPUFDISSET = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWPUGETPROVIDERPATH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWPUGETPROVIDERPATH = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWPUMODIFYIFSHANDLE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWPUMODIFYIFSHANDLE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWPUPOSTMESSAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWPUPOSTMESSAGE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWPUQUERYBLOCKINGCALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWPUQUERYBLOCKINGCALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWPUQUERYSOCKETHANDLECONTEXT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWPUQUERYSOCKETHANDLECONTEXT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWPUQUEUEAPC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWPUQUEUEAPC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWPURESETEVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWPURESETEVENT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWPUSETEVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWPUSETEVENT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWPUOPENCURRENTTHREAD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWPUOPENCURRENTTHREAD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWPUCLOSETHREAD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWPUCLOSETHREAD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWPUCOMPLETEOVERLAPPEDREQUEST
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWPUCOMPLETEOVERLAPPEDREQUEST = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WSPUPCALLTABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSPUPCALLTABLE = extern struct {
    lpWPUCloseEvent: LPWPUCLOSEEVENT,
    lpWPUCloseSocketHandle: LPWPUCLOSESOCKETHANDLE,
    lpWPUCreateEvent: LPWPUCREATEEVENT,
    lpWPUCreateSocketHandle: LPWPUCREATESOCKETHANDLE,
    lpWPUFDIsSet: LPWPUFDISSET,
    lpWPUGetProviderPath: LPWPUGETPROVIDERPATH,
    lpWPUModifyIFSHandle: LPWPUMODIFYIFSHANDLE,
    lpWPUPostMessage: LPWPUPOSTMESSAGE,
    lpWPUQueryBlockingCallback: LPWPUQUERYBLOCKINGCALLBACK,
    lpWPUQuerySocketHandleContext: LPWPUQUERYSOCKETHANDLECONTEXT,
    lpWPUQueueApc: LPWPUQUEUEAPC,
    lpWPUResetEvent: LPWPURESETEVENT,
    lpWPUSetEvent: LPWPUSETEVENT,
    lpWPUOpenCurrentThread: LPWPUOPENCURRENTTHREAD,
    lpWPUCloseThread: LPWPUCLOSETHREAD,
};
// --------------------------------------------------------
// Type: LPWSPSTARTUP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSPSTARTUP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSCENUMPROTOCOLS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSCENUMPROTOCOLS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSCDEINSTALLPROVIDER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSCDEINSTALLPROVIDER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSCINSTALLPROVIDER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSCINSTALLPROVIDER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSCGETPROVIDERPATH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSCGETPROVIDERPATH = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSCUPDATEPROVIDER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSCUPDATEPROVIDER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WSC_PROVIDER_INFO_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WSC_PROVIDER_INFO_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WSC_PROVIDER_AUDIT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WSC_PROVIDER_AUDIT_INFO = extern struct {
    RecordSize: u32,
    Reserved: ?*opaque{},
};
// --------------------------------------------------------
// Type: LPWSCINSTALLNAMESPACE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSCINSTALLNAMESPACE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSCUNINSTALLNAMESPACE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSCUNINSTALLNAMESPACE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSCENABLENSPROVIDER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSCENABLENSPROVIDER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPNSPCLEANUP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPNSPCLEANUP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPNSPLOOKUPSERVICEBEGIN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPNSPLOOKUPSERVICEBEGIN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPNSPLOOKUPSERVICENEXT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPNSPLOOKUPSERVICENEXT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPNSPIOCTL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPNSPIOCTL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPNSPLOOKUPSERVICEEND
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPNSPLOOKUPSERVICEEND = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPNSPSETSERVICE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPNSPSETSERVICE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPNSPINSTALLSERVICECLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPNSPINSTALLSERVICECLASS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPNSPREMOVESERVICECLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPNSPREMOVESERVICECLASS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPNSPGETSERVICECLASSINFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPNSPGETSERVICECLASSINFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: NSP_ROUTINE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NSP_ROUTINE = extern struct {
    cbSize: u32,
    dwMajorVersion: u32,
    dwMinorVersion: u32,
    NSPCleanup: LPNSPCLEANUP,
    NSPLookupServiceBegin: LPNSPLOOKUPSERVICEBEGIN,
    NSPLookupServiceNext: LPNSPLOOKUPSERVICENEXT,
    NSPLookupServiceEnd: LPNSPLOOKUPSERVICEEND,
    NSPSetService: LPNSPSETSERVICE,
    NSPInstallServiceClass: LPNSPINSTALLSERVICECLASS,
    NSPRemoveServiceClass: LPNSPREMOVESERVICECLASS,
    NSPGetServiceClassInfo: LPNSPGETSERVICECLASSINFO,
    NSPIoctl: LPNSPIOCTL,
};
// --------------------------------------------------------
// Type: LPNSPSTARTUP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPNSPSTARTUP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPNSPV2STARTUP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPNSPV2STARTUP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPNSPV2CLEANUP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPNSPV2CLEANUP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPNSPV2LOOKUPSERVICEBEGIN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPNSPV2LOOKUPSERVICEBEGIN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPNSPV2LOOKUPSERVICENEXTEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPNSPV2LOOKUPSERVICENEXTEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPNSPV2LOOKUPSERVICEEND
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPNSPV2LOOKUPSERVICEEND = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPNSPV2SETSERVICEEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPNSPV2SETSERVICEEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPNSPV2CLIENTSESSIONRUNDOWN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPNSPV2CLIENTSESSIONRUNDOWN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: NSPV2_ROUTINE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NSPV2_ROUTINE = extern struct {
    cbSize: u32,
    dwMajorVersion: u32,
    dwMinorVersion: u32,
    NSPv2Startup: LPNSPV2STARTUP,
    NSPv2Cleanup: LPNSPV2CLEANUP,
    NSPv2LookupServiceBegin: LPNSPV2LOOKUPSERVICEBEGIN,
    NSPv2LookupServiceNextEx: LPNSPV2LOOKUPSERVICENEXTEX,
    NSPv2LookupServiceEnd: LPNSPV2LOOKUPSERVICEEND,
    NSPv2SetServiceEx: LPNSPV2SETSERVICEEX,
    NSPv2ClientSessionRundown: LPNSPV2CLIENTSESSIONRUNDOWN,
};
// --------------------------------------------------------
// Type: NS_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NS_INFOA = extern struct {
    dwNameSpace: u32,
    dwNameSpaceFlags: u32,
    lpNameSpace: ?*i8,
};
// --------------------------------------------------------
// Type: NS_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NS_INFOW = extern struct {
    dwNameSpace: u32,
    dwNameSpaceFlags: u32,
    lpNameSpace: ?*u16,
};
// --------------------------------------------------------
// Type: SERVICE_TYPE_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_TYPE_VALUE = extern struct {
    dwNameSpace: u32,
    dwValueType: u32,
    dwValueSize: u32,
    dwValueNameOffset: u32,
    dwValueOffset: u32,
};
// --------------------------------------------------------
// Type: SERVICE_TYPE_VALUE_ABSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_TYPE_VALUE_ABSA = extern struct {
    dwNameSpace: u32,
    dwValueType: u32,
    dwValueSize: u32,
    lpValueName: ?*i8,
    lpValue: ?*opaque{},
};
// --------------------------------------------------------
// Type: SERVICE_TYPE_VALUE_ABSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_TYPE_VALUE_ABSW = extern struct {
    dwNameSpace: u32,
    dwValueType: u32,
    dwValueSize: u32,
    lpValueName: ?*u16,
    lpValue: ?*opaque{},
};
// --------------------------------------------------------
// Type: SERVICE_TYPE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_TYPE_INFO = extern struct {
    dwTypeNameOffset: u32,
    dwValueCount: u32,
    Values: ?[*]SERVICE_TYPE_VALUE,
};
// --------------------------------------------------------
// Type: SERVICE_TYPE_INFO_ABSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_TYPE_INFO_ABSA = extern struct {
    lpTypeName: ?*i8,
    dwValueCount: u32,
    Values: ?[*]SERVICE_TYPE_VALUE_ABSA,
};
// --------------------------------------------------------
// Type: SERVICE_TYPE_INFO_ABSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_TYPE_INFO_ABSW = extern struct {
    lpTypeName: ?*u16,
    dwValueCount: u32,
    Values: ?[*]SERVICE_TYPE_VALUE_ABSW,
};
// --------------------------------------------------------
// Type: SERVICE_ADDRESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_ADDRESS = extern struct {
    dwAddressType: u32,
    dwAddressFlags: u32,
    dwAddressLength: u32,
    dwPrincipalLength: u32,
    lpAddress: ?*u8,
    lpPrincipal: ?*u8,
};
// --------------------------------------------------------
// Type: SERVICE_ADDRESSES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_ADDRESSES = extern struct {
    dwAddressCount: u32,
    Addresses: ?[*]SERVICE_ADDRESS,
};
// --------------------------------------------------------
// Type: SERVICE_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_INFOA = extern struct {
    lpServiceType: ?*Guid,
    lpServiceName: ?*i8,
    lpComment: ?*i8,
    lpLocale: ?*i8,
    dwDisplayHint: u32,
    dwVersion: u32,
    dwTime: u32,
    lpMachineName: ?*i8,
    lpServiceAddress: ?*SERVICE_ADDRESSES,
    ServiceSpecificInfo: BLOB,
};
// --------------------------------------------------------
// Type: SERVICE_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_INFOW = extern struct {
    lpServiceType: ?*Guid,
    lpServiceName: ?*u16,
    lpComment: ?*u16,
    lpLocale: ?*u16,
    dwDisplayHint: u32,
    dwVersion: u32,
    dwTime: u32,
    lpMachineName: ?*u16,
    lpServiceAddress: ?*SERVICE_ADDRESSES,
    ServiceSpecificInfo: BLOB,
};
// --------------------------------------------------------
// Type: NS_SERVICE_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NS_SERVICE_INFOA = extern struct {
    dwNameSpace: u32,
    ServiceInfo: SERVICE_INFOA,
};
// --------------------------------------------------------
// Type: NS_SERVICE_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NS_SERVICE_INFOW = extern struct {
    dwNameSpace: u32,
    ServiceInfo: SERVICE_INFOW,
};
// --------------------------------------------------------
// Type: PROTOCOL_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROTOCOL_INFOA = extern struct {
    dwServiceFlags: u32,
    iAddressFamily: i32,
    iMaxSockAddr: i32,
    iMinSockAddr: i32,
    iSocketType: i32,
    iProtocol: i32,
    dwMessageSize: u32,
    lpProtocol: ?*i8,
};
// --------------------------------------------------------
// Type: PROTOCOL_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROTOCOL_INFOW = extern struct {
    dwServiceFlags: u32,
    iAddressFamily: i32,
    iMaxSockAddr: i32,
    iMinSockAddr: i32,
    iSocketType: i32,
    iProtocol: i32,
    dwMessageSize: u32,
    lpProtocol: ?*u16,
};
// --------------------------------------------------------
// Type: NETRESOURCE2A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETRESOURCE2A = extern struct {
    dwScope: u32,
    dwType: u32,
    dwUsage: u32,
    dwDisplayType: u32,
    lpLocalName: ?*i8,
    lpRemoteName: ?*i8,
    lpComment: ?*i8,
    ns_info: NS_INFOA,
    ServiceType: Guid,
    dwProtocols: u32,
    lpiProtocols: ?*i32,
};
// --------------------------------------------------------
// Type: NETRESOURCE2W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETRESOURCE2W = extern struct {
    dwScope: u32,
    dwType: u32,
    dwUsage: u32,
    dwDisplayType: u32,
    lpLocalName: ?*u16,
    lpRemoteName: ?*u16,
    lpComment: ?*u16,
    ns_info: NS_INFOA,
    ServiceType: Guid,
    dwProtocols: u32,
    lpiProtocols: ?*i32,
};
// --------------------------------------------------------
// Type: LPFN_NSPAPI
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFN_NSPAPI = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPSERVICE_CALLBACK_PROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPSERVICE_CALLBACK_PROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SERVICE_ASYNC_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_ASYNC_INFO = extern struct {
    lpServiceCallbackProc: LPSERVICE_CALLBACK_PROC,
    lParam: LPARAM,
    hAsyncTaskHandle: HANDLE,
};
// --------------------------------------------------------
// Type: LPLOOKUPSERVICE_COMPLETION_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPLOOKUPSERVICE_COMPLETION_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSCWRITEPROVIDERORDER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSCWRITEPROVIDERORDER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPWSCWRITENAMESPACEORDER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPWSCWRITENAMESPACEORDER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn __WSAFDIsSet(
    fd: ?*opaque{},
    param1: ?*fd_set,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn accept(
    s: ?*opaque{},
    addr: ?*SOCKADDR,
    addrlen: ?*i32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn bind(
    s: ?*opaque{},
    name: ?*SOCKADDR,
    namelen: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn closesocket(
    s: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn connect(
    s: ?*opaque{},
    name: ?*SOCKADDR,
    namelen: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn ioctlsocket(
    s: ?*opaque{},
    cmd: i32,
    argp: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn getpeername(
    s: ?*opaque{},
    name: ?*SOCKADDR,
    namelen: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn getsockname(
    s: ?*opaque{},
    name: ?*SOCKADDR,
    namelen: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn getsockopt(
    s: ?*opaque{},
    level: i32,
    optname: i32,
    optval: ?*i8,
    optlen: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn htonl(
    hostlong: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn htons(
    hostshort: u16,
) callconv(@import("std").os.windows.WINAPI) u16;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn inet_addr(
    cp: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn inet_ntoa(
    in: in_addr,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn listen(
    s: ?*opaque{},
    backlog: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn ntohl(
    netlong: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn ntohs(
    netshort: u16,
) callconv(@import("std").os.windows.WINAPI) u16;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn recv(
    s: ?*opaque{},
    buf: ?*i8,
    len: i32,
    flags: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn recvfrom(
    s: ?*opaque{},
    buf: ?*i8,
    len: i32,
    flags: i32,
    from: ?*SOCKADDR,
    fromlen: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn select(
    nfds: i32,
    readfds: ?*fd_set,
    writefds: ?*fd_set,
    exceptfds: ?*fd_set,
    timeout: ?*timeval,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn send(
    s: ?*opaque{},
    buf: ?*i8,
    len: i32,
    flags: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn sendto(
    s: ?*opaque{},
    buf: ?*i8,
    len: i32,
    flags: i32,
    to: ?*SOCKADDR,
    tolen: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn setsockopt(
    s: ?*opaque{},
    level: i32,
    optname: i32,
    optval: ?*i8,
    optlen: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn shutdown(
    s: ?*opaque{},
    how: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn socket(
    af: i32,
    type: i32,
    protocol: i32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn gethostbyaddr(
    addr: ?*i8,
    len: i32,
    type: i32,
) callconv(@import("std").os.windows.WINAPI) ?*hostent;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn gethostbyname(
    name: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*hostent;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn gethostname(
    name: ?*i8,
    namelen: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn GetHostNameW(
    name: ?*u16,
    namelen: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn getservbyport(
    port: i32,
    proto: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*servent;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn getservbyname(
    name: ?*i8,
    proto: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*servent;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn getprotobynumber(
    number: i32,
) callconv(@import("std").os.windows.WINAPI) ?*protoent;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn getprotobyname(
    name: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*protoent;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAStartup(
    wVersionRequested: u16,
    lpWSAData: ?*WSAData,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSACleanup(
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSASetLastError(
    iError: i32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAGetLastError(
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAIsBlocking(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAUnhookBlockingHook(
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSASetBlockingHook(
    lpBlockFunc: FARPROC,
) callconv(@import("std").os.windows.WINAPI) FARPROC;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSACancelBlockingCall(
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAAsyncGetServByName(
    hWnd: HWND,
    wMsg: u32,
    name: ?*i8,
    proto: ?*i8,
    buf: ?*i8,
    buflen: i32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAAsyncGetServByPort(
    hWnd: HWND,
    wMsg: u32,
    port: i32,
    proto: ?*i8,
    buf: ?*i8,
    buflen: i32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAAsyncGetProtoByName(
    hWnd: HWND,
    wMsg: u32,
    name: ?*i8,
    buf: ?*i8,
    buflen: i32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAAsyncGetProtoByNumber(
    hWnd: HWND,
    wMsg: u32,
    number: i32,
    buf: ?*i8,
    buflen: i32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAAsyncGetHostByName(
    hWnd: HWND,
    wMsg: u32,
    name: ?*i8,
    buf: ?*i8,
    buflen: i32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAAsyncGetHostByAddr(
    hWnd: HWND,
    wMsg: u32,
    addr: ?*i8,
    len: i32,
    type: i32,
    buf: ?*i8,
    buflen: i32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSACancelAsyncRequest(
    hAsyncTaskHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAAsyncSelect(
    s: ?*opaque{},
    hWnd: HWND,
    wMsg: u32,
    lEvent: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAAccept(
    s: ?*opaque{},
    addr: ?*SOCKADDR,
    addrlen: ?*i32,
    lpfnCondition: LPCONDITIONPROC,
    dwCallbackData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSACloseEvent(
    hEvent: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAConnect(
    s: ?*opaque{},
    name: ?*SOCKADDR,
    namelen: i32,
    lpCallerData: ?*WSABUF,
    lpCalleeData: ?*WSABUF,
    lpSQOS: ?*QOS,
    lpGQOS: ?*QOS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAConnectByNameW(
    s: ?*opaque{},
    nodename: ?*u16,
    servicename: ?*u16,
    LocalAddressLength: ?*u32,
    LocalAddress: ?*SOCKADDR,
    RemoteAddressLength: ?*u32,
    RemoteAddress: ?*SOCKADDR,
    timeout: ?*timeval,
    Reserved: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAConnectByNameA(
    s: ?*opaque{},
    nodename: ?*i8,
    servicename: ?*i8,
    LocalAddressLength: ?*u32,
    LocalAddress: ?*SOCKADDR,
    RemoteAddressLength: ?*u32,
    RemoteAddress: ?*SOCKADDR,
    timeout: ?*timeval,
    Reserved: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAConnectByList(
    s: ?*opaque{},
    SocketAddress: ?*SOCKET_ADDRESS_LIST,
    LocalAddressLength: ?*u32,
    LocalAddress: ?*SOCKADDR,
    RemoteAddressLength: ?*u32,
    RemoteAddress: ?*SOCKADDR,
    timeout: ?*timeval,
    Reserved: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSACreateEvent(
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSADuplicateSocketA(
    s: ?*opaque{},
    dwProcessId: u32,
    lpProtocolInfo: ?*WSAPROTOCOL_INFOA,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSADuplicateSocketW(
    s: ?*opaque{},
    dwProcessId: u32,
    lpProtocolInfo: ?*WSAPROTOCOL_INFOW,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAEnumNetworkEvents(
    s: ?*opaque{},
    hEventObject: HANDLE,
    lpNetworkEvents: ?*WSANETWORKEVENTS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAEnumProtocolsA(
    lpiProtocols: ?*i32,
    lpProtocolBuffer: ?*WSAPROTOCOL_INFOA,
    lpdwBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAEnumProtocolsW(
    lpiProtocols: ?*i32,
    lpProtocolBuffer: ?*WSAPROTOCOL_INFOW,
    lpdwBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAEventSelect(
    s: ?*opaque{},
    hEventObject: HANDLE,
    lNetworkEvents: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAGetOverlappedResult(
    s: ?*opaque{},
    lpOverlapped: ?*OVERLAPPED,
    lpcbTransfer: ?*u32,
    fWait: BOOL,
    lpdwFlags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAGetQOSByName(
    s: ?*opaque{},
    lpQOSName: ?*WSABUF,
    lpQOS: ?*QOS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAHtonl(
    s: ?*opaque{},
    hostlong: u32,
    lpnetlong: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAHtons(
    s: ?*opaque{},
    hostshort: u16,
    lpnetshort: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAIoctl(
    s: ?*opaque{},
    dwIoControlCode: u32,
    lpvInBuffer: ?*opaque{},
    cbInBuffer: u32,
    lpvOutBuffer: ?*opaque{},
    cbOutBuffer: u32,
    lpcbBytesReturned: ?*u32,
    lpOverlapped: ?*OVERLAPPED,
    lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAJoinLeaf(
    s: ?*opaque{},
    name: ?*SOCKADDR,
    namelen: i32,
    lpCallerData: ?*WSABUF,
    lpCalleeData: ?*WSABUF,
    lpSQOS: ?*QOS,
    lpGQOS: ?*QOS,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSANtohl(
    s: ?*opaque{},
    netlong: u32,
    lphostlong: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSANtohs(
    s: ?*opaque{},
    netshort: u16,
    lphostshort: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSARecv(
    s: ?*opaque{},
    lpBuffers: ?*WSABUF,
    dwBufferCount: u32,
    lpNumberOfBytesRecvd: ?*u32,
    lpFlags: ?*u32,
    lpOverlapped: ?*OVERLAPPED,
    lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSARecvDisconnect(
    s: ?*opaque{},
    lpInboundDisconnectData: ?*WSABUF,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSARecvFrom(
    s: ?*opaque{},
    lpBuffers: ?*WSABUF,
    dwBufferCount: u32,
    lpNumberOfBytesRecvd: ?*u32,
    lpFlags: ?*u32,
    lpFrom: ?*SOCKADDR,
    lpFromlen: ?*i32,
    lpOverlapped: ?*OVERLAPPED,
    lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAResetEvent(
    hEvent: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSASend(
    s: ?*opaque{},
    lpBuffers: ?*WSABUF,
    dwBufferCount: u32,
    lpNumberOfBytesSent: ?*u32,
    dwFlags: u32,
    lpOverlapped: ?*OVERLAPPED,
    lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSASendMsg(
    Handle: ?*opaque{},
    lpMsg: ?*WSAMSG,
    dwFlags: u32,
    lpNumberOfBytesSent: ?*u32,
    lpOverlapped: ?*OVERLAPPED,
    lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSASendDisconnect(
    s: ?*opaque{},
    lpOutboundDisconnectData: ?*WSABUF,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSASendTo(
    s: ?*opaque{},
    lpBuffers: ?*WSABUF,
    dwBufferCount: u32,
    lpNumberOfBytesSent: ?*u32,
    dwFlags: u32,
    lpTo: ?*SOCKADDR,
    iTolen: i32,
    lpOverlapped: ?*OVERLAPPED,
    lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSASetEvent(
    hEvent: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSASocketA(
    af: i32,
    type: i32,
    protocol: i32,
    lpProtocolInfo: ?*WSAPROTOCOL_INFOA,
    g: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSASocketW(
    af: i32,
    type: i32,
    protocol: i32,
    lpProtocolInfo: ?*WSAPROTOCOL_INFOW,
    g: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAWaitForMultipleEvents(
    cEvents: u32,
    lphEvents: ?*?*opaque{},
    fWaitAll: BOOL,
    dwTimeout: u32,
    fAlertable: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAAddressToStringA(
    lpsaAddress: ?*SOCKADDR,
    dwAddressLength: u32,
    lpProtocolInfo: ?*WSAPROTOCOL_INFOA,
    lpszAddressString: ?*i8,
    lpdwAddressStringLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAAddressToStringW(
    lpsaAddress: ?*SOCKADDR,
    dwAddressLength: u32,
    lpProtocolInfo: ?*WSAPROTOCOL_INFOW,
    lpszAddressString: ?*u16,
    lpdwAddressStringLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAStringToAddressA(
    AddressString: ?*i8,
    AddressFamily: i32,
    lpProtocolInfo: ?*WSAPROTOCOL_INFOA,
    lpAddress: ?*SOCKADDR,
    lpAddressLength: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAStringToAddressW(
    AddressString: ?*u16,
    AddressFamily: i32,
    lpProtocolInfo: ?*WSAPROTOCOL_INFOW,
    lpAddress: ?*SOCKADDR,
    lpAddressLength: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSALookupServiceBeginA(
    lpqsRestrictions: ?*WSAQUERYSETA,
    dwControlFlags: u32,
    lphLookup: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSALookupServiceBeginW(
    lpqsRestrictions: ?*WSAQUERYSETW,
    dwControlFlags: u32,
    lphLookup: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSALookupServiceNextA(
    hLookup: HANDLE,
    dwControlFlags: u32,
    lpdwBufferLength: ?*u32,
    lpqsResults: ?*WSAQUERYSETA,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSALookupServiceNextW(
    hLookup: HANDLE,
    dwControlFlags: u32,
    lpdwBufferLength: ?*u32,
    lpqsResults: ?*WSAQUERYSETW,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSANSPIoctl(
    hLookup: HANDLE,
    dwControlCode: u32,
    lpvInBuffer: ?*opaque{},
    cbInBuffer: u32,
    lpvOutBuffer: ?*opaque{},
    cbOutBuffer: u32,
    lpcbBytesReturned: ?*u32,
    lpCompletion: ?*WSACOMPLETION,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSALookupServiceEnd(
    hLookup: HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAInstallServiceClassA(
    lpServiceClassInfo: ?*WSASERVICECLASSINFOA,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAInstallServiceClassW(
    lpServiceClassInfo: ?*WSASERVICECLASSINFOW,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSARemoveServiceClass(
    lpServiceClassId: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAGetServiceClassInfoA(
    lpProviderId: ?*Guid,
    lpServiceClassId: ?*Guid,
    lpdwBufSize: ?*u32,
    lpServiceClassInfo: ?*WSASERVICECLASSINFOA,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAGetServiceClassInfoW(
    lpProviderId: ?*Guid,
    lpServiceClassId: ?*Guid,
    lpdwBufSize: ?*u32,
    lpServiceClassInfo: ?*WSASERVICECLASSINFOW,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAEnumNameSpaceProvidersA(
    lpdwBufferLength: ?*u32,
    lpnspBuffer: ?*WSANAMESPACE_INFOA,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAEnumNameSpaceProvidersW(
    lpdwBufferLength: ?*u32,
    lpnspBuffer: ?*WSANAMESPACE_INFOW,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAEnumNameSpaceProvidersExA(
    lpdwBufferLength: ?*u32,
    lpnspBuffer: ?*WSANAMESPACE_INFOEXA,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAEnumNameSpaceProvidersExW(
    lpdwBufferLength: ?*u32,
    lpnspBuffer: ?*WSANAMESPACE_INFOEXW,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAGetServiceClassNameByClassIdA(
    lpServiceClassId: ?*Guid,
    lpszServiceClassName: ?*i8,
    lpdwBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAGetServiceClassNameByClassIdW(
    lpServiceClassId: ?*Guid,
    lpszServiceClassName: ?*u16,
    lpdwBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSASetServiceA(
    lpqsRegInfo: ?*WSAQUERYSETA,
    essoperation: WSAESETSERVICEOP,
    dwControlFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSASetServiceW(
    lpqsRegInfo: ?*WSAQUERYSETW,
    essoperation: WSAESETSERVICEOP,
    dwControlFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAProviderConfigChange(
    lpNotificationHandle: ?*?*opaque{},
    lpOverlapped: ?*OVERLAPPED,
    lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAPoll(
    fdArray: ?*WSAPOLLFD,
    fds: u32,
    timeout: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlIpv4AddressToStringExA(
    Address: ?*in_addr,
    Port: u16,
    AddressString: ?*i8,
    AddressStringLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlIpv4StringToAddressExA(
    AddressString: ?*i8,
    Strict: u8,
    Address: ?*in_addr,
    Port: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlIpv6AddressToStringExA(
    Address: ?*in6_addr,
    ScopeId: u32,
    Port: u16,
    AddressString: ?*i8,
    AddressStringLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "ntdll" fn RtlIpv6StringToAddressExA(
    AddressString: ?*i8,
    Address: ?*in6_addr,
    ScopeId: ?*u32,
    Port: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSWSOCK" fn WSARecvEx(
    s: ?*opaque{},
    buf: ?*i8,
    len: i32,
    flags: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSWSOCK" fn TransmitFile(
    hSocket: ?*opaque{},
    hFile: HANDLE,
    nNumberOfBytesToWrite: u32,
    nNumberOfBytesPerSend: u32,
    lpOverlapped: ?*OVERLAPPED,
    lpTransmitBuffers: ?*TRANSMIT_FILE_BUFFERS,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "MSWSOCK" fn AcceptEx(
    sListenSocket: ?*opaque{},
    sAcceptSocket: ?*opaque{},
    lpOutputBuffer: ?*opaque{},
    dwReceiveDataLength: u32,
    dwLocalAddressLength: u32,
    dwRemoteAddressLength: u32,
    lpdwBytesReceived: ?*u32,
    lpOverlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "MSWSOCK" fn GetAcceptExSockaddrs(
    lpOutputBuffer: ?*opaque{},
    dwReceiveDataLength: u32,
    dwLocalAddressLength: u32,
    dwRemoteAddressLength: u32,
    LocalSockaddr: ?*?*SOCKADDR,
    LocalSockaddrLength: ?*i32,
    RemoteSockaddr: ?*?*SOCKADDR,
    RemoteSockaddrLength: ?*i32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSCEnumProtocols(
    lpiProtocols: ?*i32,
    lpProtocolBuffer: ?*WSAPROTOCOL_INFOW,
    lpdwBufferLength: ?*u32,
    lpErrno: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSCDeinstallProvider(
    lpProviderId: ?*Guid,
    lpErrno: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSCInstallProvider(
    lpProviderId: ?*Guid,
    lpszProviderDllPath: ?*u16,
    lpProtocolInfoList: ?*WSAPROTOCOL_INFOW,
    dwNumberOfEntries: u32,
    lpErrno: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSCGetProviderPath(
    lpProviderId: ?*Guid,
    lpszProviderDllPath: ?*u16,
    lpProviderDllPathLen: ?*i32,
    lpErrno: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSCUpdateProvider(
    lpProviderId: ?*Guid,
    lpszProviderDllPath: ?*u16,
    lpProtocolInfoList: ?*WSAPROTOCOL_INFOW,
    dwNumberOfEntries: u32,
    lpErrno: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSCSetProviderInfo(
    lpProviderId: ?*Guid,
    InfoType: WSC_PROVIDER_INFO_TYPE,
    Info: ?*u8,
    InfoSize: ?*opaque{},
    Flags: u32,
    lpErrno: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSCGetProviderInfo(
    lpProviderId: ?*Guid,
    InfoType: WSC_PROVIDER_INFO_TYPE,
    Info: ?*u8,
    InfoSize: ?*?*opaque{},
    Flags: u32,
    lpErrno: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSCSetApplicationCategory(
    Path: ?*u16,
    PathLength: u32,
    Extra: ?*u16,
    ExtraLength: u32,
    PermittedLspCategories: u32,
    pPrevPermLspCat: ?*u32,
    lpErrno: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSCGetApplicationCategory(
    Path: ?*u16,
    PathLength: u32,
    Extra: ?*u16,
    ExtraLength: u32,
    pPermittedLspCategories: ?*u32,
    lpErrno: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WPUCompleteOverlappedRequest(
    s: ?*opaque{},
    lpOverlapped: ?*OVERLAPPED,
    dwError: u32,
    cbTransferred: u32,
    lpErrno: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSCInstallNameSpace(
    lpszIdentifier: ?*u16,
    lpszPathName: ?*u16,
    dwNameSpace: u32,
    dwVersion: u32,
    lpProviderId: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSCUnInstallNameSpace(
    lpProviderId: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSCInstallNameSpaceEx(
    lpszIdentifier: ?*u16,
    lpszPathName: ?*u16,
    dwNameSpace: u32,
    dwVersion: u32,
    lpProviderId: ?*Guid,
    lpProviderSpecific: ?*BLOB,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSCEnableNSProvider(
    lpProviderId: ?*Guid,
    fEnable: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAAdvertiseProvider(
    puuidProviderId: ?*Guid,
    pNSPv2Routine: ?*NSPV2_ROUTINE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAUnadvertiseProvider(
    puuidProviderId: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSAProviderCompleteAsyncCall(
    hAsyncCall: HANDLE,
    iRetCode: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "MSWSOCK" fn EnumProtocolsA(
    lpiProtocols: ?*i32,
    lpProtocolBuffer: ?*opaque{},
    lpdwBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "MSWSOCK" fn EnumProtocolsW(
    lpiProtocols: ?*i32,
    lpProtocolBuffer: ?*opaque{},
    lpdwBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "MSWSOCK" fn GetAddressByNameA(
    dwNameSpace: u32,
    lpServiceType: ?*Guid,
    lpServiceName: ?*i8,
    lpiProtocols: ?*i32,
    dwResolution: u32,
    lpServiceAsyncInfo: ?*SERVICE_ASYNC_INFO,
    lpCsaddrBuffer: ?*opaque{},
    lpdwBufferLength: ?*u32,
    lpAliasBuffer: ?*i8,
    lpdwAliasBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "MSWSOCK" fn GetAddressByNameW(
    dwNameSpace: u32,
    lpServiceType: ?*Guid,
    lpServiceName: ?*u16,
    lpiProtocols: ?*i32,
    dwResolution: u32,
    lpServiceAsyncInfo: ?*SERVICE_ASYNC_INFO,
    lpCsaddrBuffer: ?*opaque{},
    lpdwBufferLength: ?*u32,
    lpAliasBuffer: ?*u16,
    lpdwAliasBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "MSWSOCK" fn GetTypeByNameA(
    lpServiceName: ?*i8,
    lpServiceType: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "MSWSOCK" fn GetTypeByNameW(
    lpServiceName: ?*u16,
    lpServiceType: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "MSWSOCK" fn GetNameByTypeA(
    lpServiceType: ?*Guid,
    lpServiceName: ?*i8,
    dwNameLength: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "MSWSOCK" fn GetNameByTypeW(
    lpServiceType: ?*Guid,
    lpServiceName: ?*u16,
    dwNameLength: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "MSWSOCK" fn SetServiceA(
    dwNameSpace: u32,
    dwOperation: u32,
    dwFlags: u32,
    lpServiceInfo: ?*SERVICE_INFOA,
    lpServiceAsyncInfo: ?*SERVICE_ASYNC_INFO,
    lpdwStatusFlags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "MSWSOCK" fn SetServiceW(
    dwNameSpace: u32,
    dwOperation: u32,
    dwFlags: u32,
    lpServiceInfo: ?*SERVICE_INFOW,
    lpServiceAsyncInfo: ?*SERVICE_ASYNC_INFO,
    lpdwStatusFlags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "MSWSOCK" fn GetServiceA(
    dwNameSpace: u32,
    lpGuid: ?*Guid,
    lpServiceName: ?*i8,
    dwProperties: u32,
    lpBuffer: ?*opaque{},
    lpdwBufferSize: ?*u32,
    lpServiceAsyncInfo: ?*SERVICE_ASYNC_INFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "MSWSOCK" fn GetServiceW(
    dwNameSpace: u32,
    lpGuid: ?*Guid,
    lpServiceName: ?*u16,
    dwProperties: u32,
    lpBuffer: ?*opaque{},
    lpdwBufferSize: ?*u32,
    lpServiceAsyncInfo: ?*SERVICE_ASYNC_INFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn getaddrinfo(
    pNodeName: ?*i8,
    pServiceName: ?*i8,
    pHints: ?*ADDRINFOA,
    ppResult: ?*?*ADDRINFOA,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn GetAddrInfoW(
    pNodeName: ?*u16,
    pServiceName: ?*u16,
    pHints: ?*addrinfoW,
    ppResult: ?*?*addrinfoW,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn GetAddrInfoExA(
    pName: ?*i8,
    pServiceName: ?*i8,
    dwNameSpace: u32,
    lpNspId: ?*Guid,
    hints: ?*addrinfoexA,
    ppResult: ?*?*addrinfoexA,
    timeout: ?*timeval,
    lpOverlapped: ?*OVERLAPPED,
    lpCompletionRoutine: LPLOOKUPSERVICE_COMPLETION_ROUTINE,
    lpNameHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn GetAddrInfoExW(
    pName: ?*u16,
    pServiceName: ?*u16,
    dwNameSpace: u32,
    lpNspId: ?*Guid,
    hints: ?*addrinfoexW,
    ppResult: ?*?*addrinfoexW,
    timeout: ?*timeval,
    lpOverlapped: ?*OVERLAPPED,
    lpCompletionRoutine: LPLOOKUPSERVICE_COMPLETION_ROUTINE,
    lpHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn GetAddrInfoExCancel(
    lpHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn GetAddrInfoExOverlappedResult(
    lpOverlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn SetAddrInfoExA(
    pName: ?*i8,
    pServiceName: ?*i8,
    pAddresses: ?*SOCKET_ADDRESS,
    dwAddressCount: u32,
    lpBlob: ?*BLOB,
    dwFlags: u32,
    dwNameSpace: u32,
    lpNspId: ?*Guid,
    timeout: ?*timeval,
    lpOverlapped: ?*OVERLAPPED,
    lpCompletionRoutine: LPLOOKUPSERVICE_COMPLETION_ROUTINE,
    lpNameHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn SetAddrInfoExW(
    pName: ?*u16,
    pServiceName: ?*u16,
    pAddresses: ?*SOCKET_ADDRESS,
    dwAddressCount: u32,
    lpBlob: ?*BLOB,
    dwFlags: u32,
    dwNameSpace: u32,
    lpNspId: ?*Guid,
    timeout: ?*timeval,
    lpOverlapped: ?*OVERLAPPED,
    lpCompletionRoutine: LPLOOKUPSERVICE_COMPLETION_ROUTINE,
    lpNameHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn freeaddrinfo(
    pAddrInfo: ?*ADDRINFOA,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn FreeAddrInfoW(
    pAddrInfo: ?*addrinfoW,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn FreeAddrInfoEx(
    pAddrInfoEx: ?*addrinfoexA,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn FreeAddrInfoExW(
    pAddrInfoEx: ?*addrinfoexW,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn getnameinfo(
    pSockaddr: ?*SOCKADDR,
    SockaddrLength: i32,
    pNodeBuffer: ?*i8,
    NodeBufferSize: u32,
    pServiceBuffer: ?*i8,
    ServiceBufferSize: u32,
    Flags: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn GetNameInfoW(
    pSockaddr: ?*SOCKADDR,
    SockaddrLength: i32,
    pNodeBuffer: ?*u16,
    NodeBufferSize: u32,
    pServiceBuffer: ?*u16,
    ServiceBufferSize: u32,
    Flags: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn inet_pton(
    Family: i32,
    pszAddrString: ?*i8,
    pAddrBuf: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn InetPtonW(
    Family: i32,
    pszAddrString: ?*u16,
    pAddrBuf: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn inet_ntop(
    Family: i32,
    pAddr: ?*opaque{},
    pStringBuf: ?*i8,
    StringBufSize: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn InetNtopW(
    Family: i32,
    pAddr: ?*opaque{},
    pStringBuf: ?*u16,
    StringBufSize: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*u16;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn WSASetSocketSecurity(
    Socket: ?*opaque{},
    SecuritySettings: ?*SOCKET_SECURITY_SETTINGS,
    SecuritySettingsLen: u32,
    Overlapped: ?*OVERLAPPED,
    CompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn WSAQuerySocketSecurity(
    Socket: ?*opaque{},
    SecurityQueryTemplate: ?*SOCKET_SECURITY_QUERY_TEMPLATE,
    SecurityQueryTemplateLen: u32,
    SecurityQueryInfo: ?*SOCKET_SECURITY_QUERY_INFO,
    SecurityQueryInfoLen: ?*u32,
    Overlapped: ?*OVERLAPPED,
    CompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn WSASetSocketPeerTargetName(
    Socket: ?*opaque{},
    PeerTargetName: ?*SOCKET_PEER_TARGET_NAME,
    PeerTargetNameLen: u32,
    Overlapped: ?*OVERLAPPED,
    CompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn WSADeleteSocketPeerTargetName(
    Socket: ?*opaque{},
    PeerAddr: ?*SOCKADDR,
    PeerAddrLen: u32,
    Overlapped: ?*OVERLAPPED,
    CompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn WSAImpersonateSocketPeer(
    Socket: ?*opaque{},
    PeerAddr: ?*SOCKADDR,
    PeerAddrLen: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn WSARevertImpersonation(
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "Windows" fn SetSocketMediaStreamingMode(
    value: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSCWriteProviderOrder(
    lpwdCatalogEntryId: ?*u32,
    dwNumberOfEntries: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WS2_32" fn WSCWriteNameSpaceOrder(
    lpProviderId: ?*Guid,
    dwNumberOfEntries: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const addrinfoex = addrinfoexA;
        pub const addrinfoex2 = addrinfoex2A;
        pub const WSAPROTOCOL_INFO = WSAPROTOCOL_INFOA;
        pub const WSAQUERYSET = WSAQUERYSETA;
        pub const WSAQUERYSET2 = WSAQUERYSET2A;
        pub const WSANSCLASSINFO = WSANSCLASSINFOA;
        pub const WSASERVICECLASSINFO = WSASERVICECLASSINFOA;
        pub const WSANAMESPACE_INFO = WSANAMESPACE_INFOA;
        pub const WSANAMESPACE_INFOEX = WSANAMESPACE_INFOEXA;
        pub const NS_INFO = NS_INFOA;
        pub const SERVICE_TYPE_VALUE_ABS = SERVICE_TYPE_VALUE_ABSA;
        pub const SERVICE_TYPE_INFO_ABS = SERVICE_TYPE_INFO_ABSA;
        pub const SERVICE_INFO = SERVICE_INFOA;
        pub const NS_SERVICE_INFO = NS_SERVICE_INFOA;
        pub const PROTOCOL_INFO = PROTOCOL_INFOA;
        pub const NETRESOURCE2 = NETRESOURCE2A;
        pub const WSAConnectByName = WSAConnectByNameA;
        pub const WSADuplicateSocket = WSADuplicateSocketA;
        pub const WSAEnumProtocols = WSAEnumProtocolsA;
        pub const WSASocket = WSASocketA;
        pub const WSAAddressToString = WSAAddressToStringA;
        pub const WSAStringToAddress = WSAStringToAddressA;
        pub const WSALookupServiceBegin = WSALookupServiceBeginA;
        pub const WSALookupServiceNext = WSALookupServiceNextA;
        pub const WSAInstallServiceClass = WSAInstallServiceClassA;
        pub const WSAGetServiceClassInfo = WSAGetServiceClassInfoA;
        pub const WSAEnumNameSpaceProviders = WSAEnumNameSpaceProvidersA;
        pub const WSAEnumNameSpaceProvidersEx = WSAEnumNameSpaceProvidersExA;
        pub const WSAGetServiceClassNameByClassId = WSAGetServiceClassNameByClassIdA;
        pub const WSASetService = WSASetServiceA;
        pub const EnumProtocols = EnumProtocolsA;
        pub const GetAddressByName = GetAddressByNameA;
        pub const GetTypeByName = GetTypeByNameA;
        pub const GetNameByType = GetNameByTypeA;
        pub const SetService = SetServiceA;
        pub const GetService = GetServiceA;
        pub const GetAddrInfoEx = GetAddrInfoExA;
        pub const SetAddrInfoEx = SetAddrInfoExA;
    },
    .wide => struct {
        pub const addrinfoex = addrinfoexW;
        pub const addrinfoex2 = addrinfoex2W;
        pub const WSAPROTOCOL_INFO = WSAPROTOCOL_INFOW;
        pub const WSAQUERYSET = WSAQUERYSETW;
        pub const WSAQUERYSET2 = WSAQUERYSET2W;
        pub const WSANSCLASSINFO = WSANSCLASSINFOW;
        pub const WSASERVICECLASSINFO = WSASERVICECLASSINFOW;
        pub const WSANAMESPACE_INFO = WSANAMESPACE_INFOW;
        pub const WSANAMESPACE_INFOEX = WSANAMESPACE_INFOEXW;
        pub const NS_INFO = NS_INFOW;
        pub const SERVICE_TYPE_VALUE_ABS = SERVICE_TYPE_VALUE_ABSW;
        pub const SERVICE_TYPE_INFO_ABS = SERVICE_TYPE_INFO_ABSW;
        pub const SERVICE_INFO = SERVICE_INFOW;
        pub const NS_SERVICE_INFO = NS_SERVICE_INFOW;
        pub const PROTOCOL_INFO = PROTOCOL_INFOW;
        pub const NETRESOURCE2 = NETRESOURCE2W;
        pub const WSAConnectByName = WSAConnectByNameW;
        pub const WSADuplicateSocket = WSADuplicateSocketW;
        pub const WSAEnumProtocols = WSAEnumProtocolsW;
        pub const WSASocket = WSASocketW;
        pub const WSAAddressToString = WSAAddressToStringW;
        pub const WSAStringToAddress = WSAStringToAddressW;
        pub const WSALookupServiceBegin = WSALookupServiceBeginW;
        pub const WSALookupServiceNext = WSALookupServiceNextW;
        pub const WSAInstallServiceClass = WSAInstallServiceClassW;
        pub const WSAGetServiceClassInfo = WSAGetServiceClassInfoW;
        pub const WSAEnumNameSpaceProviders = WSAEnumNameSpaceProvidersW;
        pub const WSAEnumNameSpaceProvidersEx = WSAEnumNameSpaceProvidersExW;
        pub const WSAGetServiceClassNameByClassId = WSAGetServiceClassNameByClassIdW;
        pub const WSASetService = WSASetServiceW;
        pub const EnumProtocols = EnumProtocolsW;
        pub const GetAddressByName = GetAddressByNameW;
        pub const GetTypeByName = GetTypeByNameW;
        pub const GetNameByType = GetNameByTypeW;
        pub const SetService = SetServiceW;
        pub const GetService = GetServiceW;
        pub const GetAddrInfoEx = GetAddrInfoExW;
        pub const SetAddrInfoEx = SetAddrInfoExW;
    },
    else => if (@import("builtin").is_test) struct {
        pub const addrinfoex = *opaque{};
        pub const addrinfoex2 = *opaque{};
        pub const WSAPROTOCOL_INFO = *opaque{};
        pub const WSAQUERYSET = *opaque{};
        pub const WSAQUERYSET2 = *opaque{};
        pub const WSANSCLASSINFO = *opaque{};
        pub const WSASERVICECLASSINFO = *opaque{};
        pub const WSANAMESPACE_INFO = *opaque{};
        pub const WSANAMESPACE_INFOEX = *opaque{};
        pub const NS_INFO = *opaque{};
        pub const SERVICE_TYPE_VALUE_ABS = *opaque{};
        pub const SERVICE_TYPE_INFO_ABS = *opaque{};
        pub const SERVICE_INFO = *opaque{};
        pub const NS_SERVICE_INFO = *opaque{};
        pub const PROTOCOL_INFO = *opaque{};
        pub const NETRESOURCE2 = *opaque{};
        pub const WSAConnectByName = *opaque{};
        pub const WSADuplicateSocket = *opaque{};
        pub const WSAEnumProtocols = *opaque{};
        pub const WSASocket = *opaque{};
        pub const WSAAddressToString = *opaque{};
        pub const WSAStringToAddress = *opaque{};
        pub const WSALookupServiceBegin = *opaque{};
        pub const WSALookupServiceNext = *opaque{};
        pub const WSAInstallServiceClass = *opaque{};
        pub const WSAGetServiceClassInfo = *opaque{};
        pub const WSAEnumNameSpaceProviders = *opaque{};
        pub const WSAEnumNameSpaceProvidersEx = *opaque{};
        pub const WSAGetServiceClassNameByClassId = *opaque{};
        pub const WSASetService = *opaque{};
        pub const EnumProtocols = *opaque{};
        pub const GetAddressByName = *opaque{};
        pub const GetTypeByName = *opaque{};
        pub const GetNameByType = *opaque{};
        pub const SetService = *opaque{};
        pub const GetService = *opaque{};
        pub const GetAddrInfoEx = *opaque{};
        pub const SetAddrInfoEx = *opaque{};
    } else struct {
        pub const addrinfoex = @compileError("'addrinfoex' requires that UNICODE be set to true or false in the root module");
        pub const addrinfoex2 = @compileError("'addrinfoex2' requires that UNICODE be set to true or false in the root module");
        pub const WSAPROTOCOL_INFO = @compileError("'WSAPROTOCOL_INFO' requires that UNICODE be set to true or false in the root module");
        pub const WSAQUERYSET = @compileError("'WSAQUERYSET' requires that UNICODE be set to true or false in the root module");
        pub const WSAQUERYSET2 = @compileError("'WSAQUERYSET2' requires that UNICODE be set to true or false in the root module");
        pub const WSANSCLASSINFO = @compileError("'WSANSCLASSINFO' requires that UNICODE be set to true or false in the root module");
        pub const WSASERVICECLASSINFO = @compileError("'WSASERVICECLASSINFO' requires that UNICODE be set to true or false in the root module");
        pub const WSANAMESPACE_INFO = @compileError("'WSANAMESPACE_INFO' requires that UNICODE be set to true or false in the root module");
        pub const WSANAMESPACE_INFOEX = @compileError("'WSANAMESPACE_INFOEX' requires that UNICODE be set to true or false in the root module");
        pub const NS_INFO = @compileError("'NS_INFO' requires that UNICODE be set to true or false in the root module");
        pub const SERVICE_TYPE_VALUE_ABS = @compileError("'SERVICE_TYPE_VALUE_ABS' requires that UNICODE be set to true or false in the root module");
        pub const SERVICE_TYPE_INFO_ABS = @compileError("'SERVICE_TYPE_INFO_ABS' requires that UNICODE be set to true or false in the root module");
        pub const SERVICE_INFO = @compileError("'SERVICE_INFO' requires that UNICODE be set to true or false in the root module");
        pub const NS_SERVICE_INFO = @compileError("'NS_SERVICE_INFO' requires that UNICODE be set to true or false in the root module");
        pub const PROTOCOL_INFO = @compileError("'PROTOCOL_INFO' requires that UNICODE be set to true or false in the root module");
        pub const NETRESOURCE2 = @compileError("'NETRESOURCE2' requires that UNICODE be set to true or false in the root module");
        pub const WSAConnectByName = @compileError("'WSAConnectByName' requires that UNICODE be set to true or false in the root module");
        pub const WSADuplicateSocket = @compileError("'WSADuplicateSocket' requires that UNICODE be set to true or false in the root module");
        pub const WSAEnumProtocols = @compileError("'WSAEnumProtocols' requires that UNICODE be set to true or false in the root module");
        pub const WSASocket = @compileError("'WSASocket' requires that UNICODE be set to true or false in the root module");
        pub const WSAAddressToString = @compileError("'WSAAddressToString' requires that UNICODE be set to true or false in the root module");
        pub const WSAStringToAddress = @compileError("'WSAStringToAddress' requires that UNICODE be set to true or false in the root module");
        pub const WSALookupServiceBegin = @compileError("'WSALookupServiceBegin' requires that UNICODE be set to true or false in the root module");
        pub const WSALookupServiceNext = @compileError("'WSALookupServiceNext' requires that UNICODE be set to true or false in the root module");
        pub const WSAInstallServiceClass = @compileError("'WSAInstallServiceClass' requires that UNICODE be set to true or false in the root module");
        pub const WSAGetServiceClassInfo = @compileError("'WSAGetServiceClassInfo' requires that UNICODE be set to true or false in the root module");
        pub const WSAEnumNameSpaceProviders = @compileError("'WSAEnumNameSpaceProviders' requires that UNICODE be set to true or false in the root module");
        pub const WSAEnumNameSpaceProvidersEx = @compileError("'WSAEnumNameSpaceProvidersEx' requires that UNICODE be set to true or false in the root module");
        pub const WSAGetServiceClassNameByClassId = @compileError("'WSAGetServiceClassNameByClassId' requires that UNICODE be set to true or false in the root module");
        pub const WSASetService = @compileError("'WSASetService' requires that UNICODE be set to true or false in the root module");
        pub const EnumProtocols = @compileError("'EnumProtocols' requires that UNICODE be set to true or false in the root module");
        pub const GetAddressByName = @compileError("'GetAddressByName' requires that UNICODE be set to true or false in the root module");
        pub const GetTypeByName = @compileError("'GetTypeByName' requires that UNICODE be set to true or false in the root module");
        pub const GetNameByType = @compileError("'GetNameByType' requires that UNICODE be set to true or false in the root module");
        pub const SetService = @compileError("'SetService' requires that UNICODE be set to true or false in the root module");
        pub const GetService = @compileError("'GetService' requires that UNICODE be set to true or false in the root module");
        pub const GetAddrInfoEx = @compileError("'GetAddrInfoEx' requires that UNICODE be set to true or false in the root module");
        pub const SetAddrInfoEx = @compileError("'SetAddrInfoEx' requires that UNICODE be set to true or false in the root module");
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const PROCESSOR_NUMBER = @import("systemservices.zig").PROCESSOR_NUMBER;
const HANDLE = @import("systemservices.zig").HANDLE;
const OVERLAPPED = @import("systemservices.zig").OVERLAPPED;
const HWND = @import("windowsandmessaging.zig").HWND;
const WPARAM = @import("windowsandmessaging.zig").WPARAM;
const BOOL = @import("systemservices.zig").BOOL;
const SOCKADDR_STORAGE_LH = @import("networkdrivers.zig").SOCKADDR_STORAGE_LH;
const SOCKADDR_INET = @import("iphelper.zig").SOCKADDR_INET;
const QOS = @import("qualityofservice.zig").QOS;
const LARGE_INTEGER = @import("systemservices.zig").LARGE_INTEGER;
const LPARAM = @import("windowsandmessaging.zig").LPARAM;
const FARPROC = @import("systemservices.zig").FARPROC;
const SOCKET_ADDRESS_LIST = @import("networkdrivers.zig").SOCKET_ADDRESS_LIST;
const HRESULT = @import("com.zig").HRESULT;

test "" {
    const constant_export_count = 10;
    const type_export_count = 299;
    const func_count = 170;
    const unicode_alias_count = 38;
    const type_import_count = 15;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
