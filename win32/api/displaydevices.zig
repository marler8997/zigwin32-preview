//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: RECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RECT = extern struct {
    left: i32,
    top: i32,
    right: i32,
    bottom: i32,
};
// --------------------------------------------------------
// Type: RECTL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RECTL = extern struct {
    left: i32,
    top: i32,
    right: i32,
    bottom: i32,
};
// --------------------------------------------------------
// Type: POINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POINT = extern struct {
    x: i32,
    y: i32,
};
// --------------------------------------------------------
// Type: POINTL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POINTL = extern struct {
    x: i32,
    y: i32,
};
// --------------------------------------------------------
// Type: SIZE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SIZE = extern struct {
    cx: i32,
    cy: i32,
};
// --------------------------------------------------------
// Type: POINTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POINTS = extern struct {
    x: i16,
    y: i16,
};
// --------------------------------------------------------
// Type: DEVMODEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVMODEW = extern struct {
    dmDeviceName: ?[*]u16,
    dmSpecVersion: u16,
    dmDriverVersion: u16,
    dmSize: u16,
    dmDriverExtra: u16,
    dmFields: u32,
    Anonymous1: _Anonymous1_e__Union,
    dmColor: i16,
    dmDuplex: i16,
    dmYResolution: i16,
    dmTTOption: i16,
    dmCollate: i16,
    dmFormName: ?[*]u16,
    dmLogPixels: u16,
    dmBitsPerPel: u32,
    dmPelsWidth: u32,
    dmPelsHeight: u32,
    Anonymous2: _Anonymous2_e__Union,
    dmDisplayFrequency: u32,
    dmICMMethod: u32,
    dmICMIntent: u32,
    dmMediaType: u32,
    dmDitherType: u32,
    dmReserved1: u32,
    dmReserved2: u32,
    dmPanningWidth: u32,
    dmPanningHeight: u32,
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous2_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous2_e__Struct = extern struct {
            dmPosition: POINTL,
            dmDisplayOrientation: u32,
            dmDisplayFixedOutput: u32,
        };
        // --------------------------------------------------------
        // Type: _Anonymous1_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous1_e__Struct = extern struct {
            dmOrientation: i16,
            dmPaperSize: i16,
            dmPaperLength: i16,
            dmPaperWidth: i16,
            dmScale: i16,
            dmCopies: i16,
            dmDefaultSource: i16,
            dmPrintQuality: i16,
        };
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_RATIONAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISPLAYCONFIG_RATIONAL = extern struct {
    Numerator: u32,
    Denominator: u32,
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = *opaque{
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_SCANLINE_ORDERING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DISPLAYCONFIG_SCANLINE_ORDERING = *opaque{
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_2DREGION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISPLAYCONFIG_2DREGION = extern struct {
    cx: u32,
    cy: u32,
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_VIDEO_SIGNAL_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISPLAYCONFIG_VIDEO_SIGNAL_INFO = extern struct {
    pixelRate: u64,
    hSyncFreq: DISPLAYCONFIG_RATIONAL,
    vSyncFreq: DISPLAYCONFIG_RATIONAL,
    activeSize: DISPLAYCONFIG_2DREGION,
    totalSize: DISPLAYCONFIG_2DREGION,
    Anonymous: _Anonymous_e__Union,
    scanLineOrdering: DISPLAYCONFIG_SCANLINE_ORDERING,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _AdditionalSignalInfo_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _AdditionalSignalInfo_e__Struct = extern struct {
            _bitfield: u32,
        };
    };
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_SCALING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DISPLAYCONFIG_SCALING = *opaque{
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_ROTATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DISPLAYCONFIG_ROTATION = *opaque{
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_MODE_INFO_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DISPLAYCONFIG_MODE_INFO_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_PIXELFORMAT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DISPLAYCONFIG_PIXELFORMAT = *opaque{
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_SOURCE_MODE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISPLAYCONFIG_SOURCE_MODE = extern struct {
    width: u32,
    height: u32,
    pixelFormat: DISPLAYCONFIG_PIXELFORMAT,
    position: POINTL,
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_TARGET_MODE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISPLAYCONFIG_TARGET_MODE = extern struct {
    targetVideoSignalInfo: DISPLAYCONFIG_VIDEO_SIGNAL_INFO,
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_DESKTOP_IMAGE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISPLAYCONFIG_DESKTOP_IMAGE_INFO = extern struct {
    PathSourceSize: POINTL,
    DesktopImageRegion: RECTL,
    DesktopImageClip: RECTL,
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_MODE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISPLAYCONFIG_MODE_INFO = extern struct {
    infoType: DISPLAYCONFIG_MODE_INFO_TYPE,
    id: u32,
    adapterId: LUID,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_PATH_SOURCE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISPLAYCONFIG_PATH_SOURCE_INFO = extern struct {
    adapterId: LUID,
    id: u32,
    Anonymous: _Anonymous_e__Union,
    statusFlags: u32,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: u32,
        };
    };
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_PATH_TARGET_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISPLAYCONFIG_PATH_TARGET_INFO = extern struct {
    adapterId: LUID,
    id: u32,
    Anonymous: _Anonymous_e__Union,
    outputTechnology: DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY,
    rotation: DISPLAYCONFIG_ROTATION,
    scaling: DISPLAYCONFIG_SCALING,
    refreshRate: DISPLAYCONFIG_RATIONAL,
    scanLineOrdering: DISPLAYCONFIG_SCANLINE_ORDERING,
    targetAvailable: BOOL,
    statusFlags: u32,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: u32,
        };
    };
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_PATH_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISPLAYCONFIG_PATH_INFO = extern struct {
    sourceInfo: DISPLAYCONFIG_PATH_SOURCE_INFO,
    targetInfo: DISPLAYCONFIG_PATH_TARGET_INFO,
    flags: u32,
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_TOPOLOGY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DISPLAYCONFIG_TOPOLOGY_ID = *opaque{
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_DEVICE_INFO_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DISPLAYCONFIG_DEVICE_INFO_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_DEVICE_INFO_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISPLAYCONFIG_DEVICE_INFO_HEADER = extern struct {
    type: DISPLAYCONFIG_DEVICE_INFO_TYPE,
    size: u32,
    adapterId: LUID,
    id: u32,
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_SOURCE_DEVICE_NAME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISPLAYCONFIG_SOURCE_DEVICE_NAME = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    viewGdiDeviceName: ?[*]u16,
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS = extern struct {
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: u32,
        };
    };
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_TARGET_DEVICE_NAME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISPLAYCONFIG_TARGET_DEVICE_NAME = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    flags: DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS,
    outputTechnology: DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY,
    edidManufactureId: u16,
    edidProductCodeId: u16,
    connectorInstance: u32,
    monitorFriendlyDeviceName: ?[*]u16,
    monitorDevicePath: ?[*]u16,
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_TARGET_PREFERRED_MODE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISPLAYCONFIG_TARGET_PREFERRED_MODE = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    width: u32,
    height: u32,
    targetMode: DISPLAYCONFIG_TARGET_MODE,
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_ADAPTER_NAME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISPLAYCONFIG_ADAPTER_NAME = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    adapterDevicePath: ?[*]u16,
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_TARGET_BASE_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISPLAYCONFIG_TARGET_BASE_TYPE = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    baseOutputTechnology: DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY,
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_SET_TARGET_PERSISTENCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISPLAYCONFIG_SET_TARGET_PERSISTENCE = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: u32,
        };
    };
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: u32,
        };
    };
};
// --------------------------------------------------------
// Type: DDVIDEOPORTCAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDVIDEOPORTCAPS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwMaxWidth: u32,
    dwMaxVBIWidth: u32,
    dwMaxHeight: u32,
    dwVideoPortID: u32,
    dwCaps: u32,
    dwFX: u32,
    dwNumAutoFlipSurfaces: u32,
    dwAlignVideoPortBoundary: u32,
    dwAlignVideoPortPrescaleWidth: u32,
    dwAlignVideoPortCropBoundary: u32,
    dwAlignVideoPortCropWidth: u32,
    dwPreshrinkXStep: u32,
    dwPreshrinkYStep: u32,
    dwNumVBIAutoFlipSurfaces: u32,
    dwNumPreferredAutoflip: u32,
    wNumFilterTapsX: u16,
    wNumFilterTapsY: u16,
};
// --------------------------------------------------------
// Type: DDVIDEOPORTDESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDVIDEOPORTDESC = extern struct {
    dwSize: u32,
    dwFieldWidth: u32,
    dwVBIWidth: u32,
    dwFieldHeight: u32,
    dwMicrosecondsPerField: u32,
    dwMaxPixelsPerSecond: u32,
    dwVideoPortID: u32,
    dwReserved1: u32,
    VideoPortType: DDVIDEOPORTCONNECT,
    dwReserved2: ?*opaque{},
    dwReserved3: ?*opaque{},
};
// --------------------------------------------------------
// Type: DDVIDEOPORTINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDVIDEOPORTINFO = extern struct {
    dwSize: u32,
    dwOriginX: u32,
    dwOriginY: u32,
    dwVPFlags: u32,
    rCrop: RECT,
    dwPrescaleWidth: u32,
    dwPrescaleHeight: u32,
    lpddpfInputFormat: ?*DDPIXELFORMAT,
    lpddpfVBIInputFormat: ?*DDPIXELFORMAT,
    lpddpfVBIOutputFormat: ?*DDPIXELFORMAT,
    dwVBIHeight: u32,
    dwReserved1: ?*opaque{},
    dwReserved2: ?*opaque{},
};
// --------------------------------------------------------
// Type: DDVIDEOPORTBANDWIDTH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDVIDEOPORTBANDWIDTH = extern struct {
    dwSize: u32,
    dwCaps: u32,
    dwOverlay: u32,
    dwColorkey: u32,
    dwYInterpolate: u32,
    dwYInterpAndColorkey: u32,
    dwReserved1: ?*opaque{},
    dwReserved2: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_GETHEAPALIGNMENTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DD_GETHEAPALIGNMENTDATA = opaque {
};
// --------------------------------------------------------
// Type: VIDEOMEMORY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEOMEMORY = extern struct {
    dwFlags: u32,
    fpStart: ?*opaque{},
    Anonymous1: _Anonymous1_e__Union,
    ddsCaps: DDSCAPS,
    ddsCapsAlt: DDSCAPS,
    Anonymous2: _Anonymous2_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: VIDEOMEMORYINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEOMEMORYINFO = extern struct {
    fpPrimary: ?*opaque{},
    dwFlags: u32,
    dwDisplayWidth: u32,
    dwDisplayHeight: u32,
    lDisplayPitch: i32,
    ddpfDisplay: DDPIXELFORMAT,
    dwOffscreenAlign: u32,
    dwOverlayAlign: u32,
    dwTextureAlign: u32,
    dwZBufferAlign: u32,
    dwAlphaAlign: u32,
    pvPrimary: ?*opaque{},
};
// --------------------------------------------------------
// Type: PDD_CANCREATESURFACE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_CANCREATESURFACE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_WAITFORVERTICALBLANK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_WAITFORVERTICALBLANK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_CREATESURFACE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_CREATESURFACE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_CREATEPALETTE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_CREATEPALETTE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_GETSCANLINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_GETSCANLINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_MAPMEMORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_MAPMEMORY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_GETDRIVERINFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_GETDRIVERINFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DD_CALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_CALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    DestroyDriver: PDD_DESTROYDRIVER,
    CreateSurface: PDD_CREATESURFACE,
    SetColorKey: PDD_SETCOLORKEY,
    SetMode: PDD_SETMODE,
    WaitForVerticalBlank: PDD_WAITFORVERTICALBLANK,
    CanCreateSurface: PDD_CANCREATESURFACE,
    CreatePalette: PDD_CREATEPALETTE,
    GetScanLine: PDD_GETSCANLINE,
    MapMemory: PDD_MAPMEMORY,
};
// --------------------------------------------------------
// Type: PDD_GETAVAILDRIVERMEMORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_GETAVAILDRIVERMEMORY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DD_MISCELLANEOUSCALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_MISCELLANEOUSCALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    GetAvailDriverMemory: PDD_GETAVAILDRIVERMEMORY,
};
// --------------------------------------------------------
// Type: PDD_CREATESURFACEEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_CREATESURFACEEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_GETDRIVERSTATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_GETDRIVERSTATE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_DESTROYDDLOCAL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_DESTROYDDLOCAL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DD_MISCELLANEOUS2CALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_MISCELLANEOUS2CALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    AlphaBlt: PDD_ALPHABLT,
    CreateSurfaceEx: PDD_CREATESURFACEEX,
    GetDriverState: PDD_GETDRIVERSTATE,
    DestroyDDLocal: PDD_DESTROYDDLOCAL,
};
// --------------------------------------------------------
// Type: PDD_FREEDRIVERMEMORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_FREEDRIVERMEMORY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_SETEXCLUSIVEMODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_SETEXCLUSIVEMODE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_FLIPTOGDISURFACE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_FLIPTOGDISURFACE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DD_NTCALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_NTCALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    FreeDriverMemory: PDD_FREEDRIVERMEMORY,
    SetExclusiveMode: PDD_SETEXCLUSIVEMODE,
    FlipToGDISurface: PDD_FLIPTOGDISURFACE,
};
// --------------------------------------------------------
// Type: PDD_PALCB_DESTROYPALETTE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_PALCB_DESTROYPALETTE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_PALCB_SETENTRIES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_PALCB_SETENTRIES = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DD_PALETTECALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_PALETTECALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    DestroyPalette: PDD_PALCB_DESTROYPALETTE,
    SetEntries: PDD_PALCB_SETENTRIES,
};
// --------------------------------------------------------
// Type: PDD_SURFCB_LOCK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_SURFCB_LOCK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_SURFCB_UNLOCK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_SURFCB_UNLOCK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_SURFCB_BLT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_SURFCB_BLT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_SURFCB_UPDATEOVERLAY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_SURFCB_UPDATEOVERLAY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_SURFCB_SETOVERLAYPOSITION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_SURFCB_SETOVERLAYPOSITION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_SURFCB_SETPALETTE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_SURFCB_SETPALETTE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_SURFCB_FLIP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_SURFCB_FLIP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_SURFCB_DESTROYSURFACE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_SURFCB_DESTROYSURFACE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_SURFCB_ADDATTACHEDSURFACE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_SURFCB_ADDATTACHEDSURFACE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_SURFCB_SETCOLORKEY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_SURFCB_SETCOLORKEY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_SURFCB_GETBLTSTATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_SURFCB_GETBLTSTATUS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_SURFCB_GETFLIPSTATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_SURFCB_GETFLIPSTATUS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DD_SURFACECALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_SURFACECALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    DestroySurface: PDD_SURFCB_DESTROYSURFACE,
    Flip: PDD_SURFCB_FLIP,
    SetClipList: PDD_SURFCB_SETCLIPLIST,
    Lock: PDD_SURFCB_LOCK,
    Unlock: PDD_SURFCB_UNLOCK,
    Blt: PDD_SURFCB_BLT,
    SetColorKey: PDD_SURFCB_SETCOLORKEY,
    AddAttachedSurface: PDD_SURFCB_ADDATTACHEDSURFACE,
    GetBltStatus: PDD_SURFCB_GETBLTSTATUS,
    GetFlipStatus: PDD_SURFCB_GETFLIPSTATUS,
    UpdateOverlay: PDD_SURFCB_UPDATEOVERLAY,
    SetOverlayPosition: PDD_SURFCB_SETOVERLAYPOSITION,
    reserved4: ?*opaque{},
    SetPalette: PDD_SURFCB_SETPALETTE,
};
// --------------------------------------------------------
// Type: PDD_VPORTCB_CANCREATEVIDEOPORT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_VPORTCB_CANCREATEVIDEOPORT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_VPORTCB_CREATEVIDEOPORT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_VPORTCB_CREATEVIDEOPORT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_VPORTCB_FLIP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_VPORTCB_FLIP = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_VPORTCB_GETBANDWIDTH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_VPORTCB_GETBANDWIDTH = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_VPORTCB_GETINPUTFORMATS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_VPORTCB_GETINPUTFORMATS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_VPORTCB_GETOUTPUTFORMATS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_VPORTCB_GETOUTPUTFORMATS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_VPORTCB_GETFIELD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_VPORTCB_GETFIELD = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_VPORTCB_GETLINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_VPORTCB_GETLINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_VPORTCB_GETVPORTCONNECT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_VPORTCB_GETVPORTCONNECT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_VPORTCB_DESTROYVPORT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_VPORTCB_DESTROYVPORT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_VPORTCB_GETFLIPSTATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_VPORTCB_GETFLIPSTATUS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_VPORTCB_UPDATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_VPORTCB_UPDATE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_VPORTCB_WAITFORSYNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_VPORTCB_WAITFORSYNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_VPORTCB_GETSIGNALSTATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_VPORTCB_GETSIGNALSTATUS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_VPORTCB_COLORCONTROL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_VPORTCB_COLORCONTROL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DD_VIDEOPORTCALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_VIDEOPORTCALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    CanCreateVideoPort: PDD_VPORTCB_CANCREATEVIDEOPORT,
    CreateVideoPort: PDD_VPORTCB_CREATEVIDEOPORT,
    FlipVideoPort: PDD_VPORTCB_FLIP,
    GetVideoPortBandwidth: PDD_VPORTCB_GETBANDWIDTH,
    GetVideoPortInputFormats: PDD_VPORTCB_GETINPUTFORMATS,
    GetVideoPortOutputFormats: PDD_VPORTCB_GETOUTPUTFORMATS,
    lpReserved1: ?*opaque{},
    GetVideoPortField: PDD_VPORTCB_GETFIELD,
    GetVideoPortLine: PDD_VPORTCB_GETLINE,
    GetVideoPortConnectInfo: PDD_VPORTCB_GETVPORTCONNECT,
    DestroyVideoPort: PDD_VPORTCB_DESTROYVPORT,
    GetVideoPortFlipStatus: PDD_VPORTCB_GETFLIPSTATUS,
    UpdateVideoPort: PDD_VPORTCB_UPDATE,
    WaitForVideoPortSync: PDD_VPORTCB_WAITFORSYNC,
    GetVideoSignalStatus: PDD_VPORTCB_GETSIGNALSTATUS,
    ColorControl: PDD_VPORTCB_COLORCONTROL,
};
// --------------------------------------------------------
// Type: PDD_COLORCB_COLORCONTROL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_COLORCB_COLORCONTROL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DD_COLORCONTROLCALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_COLORCONTROLCALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    ColorControl: PDD_COLORCB_COLORCONTROL,
};
// --------------------------------------------------------
// Type: PDD_KERNELCB_SYNCSURFACE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_KERNELCB_SYNCSURFACE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_KERNELCB_SYNCVIDEOPORT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_KERNELCB_SYNCVIDEOPORT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DD_KERNELCALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_KERNELCALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    SyncSurfaceData: PDD_KERNELCB_SYNCSURFACE,
    SyncVideoPortData: PDD_KERNELCB_SYNCVIDEOPORT,
};
// --------------------------------------------------------
// Type: PDD_MOCOMPCB_GETGUIDS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_MOCOMPCB_GETGUIDS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_MOCOMPCB_GETFORMATS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_MOCOMPCB_GETFORMATS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_MOCOMPCB_CREATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_MOCOMPCB_CREATE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_MOCOMPCB_GETCOMPBUFFINFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_MOCOMPCB_GETCOMPBUFFINFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_MOCOMPCB_GETINTERNALINFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_MOCOMPCB_GETINTERNALINFO = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_MOCOMPCB_BEGINFRAME
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_MOCOMPCB_BEGINFRAME = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_MOCOMPCB_ENDFRAME
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_MOCOMPCB_ENDFRAME = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_MOCOMPCB_RENDER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_MOCOMPCB_RENDER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_MOCOMPCB_QUERYSTATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_MOCOMPCB_QUERYSTATUS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDD_MOCOMPCB_DESTROY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDD_MOCOMPCB_DESTROY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DD_MOTIONCOMPCALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_MOTIONCOMPCALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    GetMoCompGuids: PDD_MOCOMPCB_GETGUIDS,
    GetMoCompFormats: PDD_MOCOMPCB_GETFORMATS,
    CreateMoComp: PDD_MOCOMPCB_CREATE,
    GetMoCompBuffInfo: PDD_MOCOMPCB_GETCOMPBUFFINFO,
    GetInternalMoCompInfo: PDD_MOCOMPCB_GETINTERNALINFO,
    BeginMoCompFrame: PDD_MOCOMPCB_BEGINFRAME,
    EndMoCompFrame: PDD_MOCOMPCB_ENDFRAME,
    RenderMoComp: PDD_MOCOMPCB_RENDER,
    QueryMoCompStatus: PDD_MOCOMPCB_QUERYSTATUS,
    DestroyMoComp: PDD_MOCOMPCB_DESTROY,
};
// --------------------------------------------------------
// Type: DD_NONLOCALVIDMEMCAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_NONLOCALVIDMEMCAPS = extern struct {
    dwSize: u32,
    dwNLVBCaps: u32,
    dwNLVBCaps2: u32,
    dwNLVBCKeyCaps: u32,
    dwNLVBFXCaps: u32,
    dwNLVBRops: ?[*]u32,
};
// --------------------------------------------------------
// Type: DD_PALETTE_GLOBAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_PALETTE_GLOBAL = extern struct {
    dwReserved1: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_PALETTE_LOCAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_PALETTE_LOCAL = extern struct {
    dwReserved0: u32,
    dwReserved1: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_CLIPPER_GLOBAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_CLIPPER_GLOBAL = extern struct {
    dwReserved1: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_CLIPPER_LOCAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_CLIPPER_LOCAL = extern struct {
    dwReserved1: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_ATTACHLIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_ATTACHLIST = extern struct {
    lpLink: ?*DD_ATTACHLIST,
    lpAttached: ?*DD_SURFACE_LOCAL,
};
// --------------------------------------------------------
// Type: DD_SURFACE_INT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_SURFACE_INT = extern struct {
    lpLcl: ?*DD_SURFACE_LOCAL,
};
// --------------------------------------------------------
// Type: DD_SURFACE_GLOBAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_SURFACE_GLOBAL = extern struct {
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    fpVidMem: ?*opaque{},
    Anonymous3: _Anonymous3_e__Union,
    yHint: i32,
    xHint: i32,
    wHeight: u32,
    wWidth: u32,
    dwReserved1: ?*opaque{},
    ddpfSurface: DDPIXELFORMAT,
    fpHeapOffset: ?*opaque{},
    hCreatorProcess: HANDLE,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: DD_SURFACE_MORE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_SURFACE_MORE = extern struct {
    dwMipMapCount: u32,
    lpVideoPort: ?*DD_VIDEOPORT_LOCAL,
    dwOverlayFlags: u32,
    ddsCapsEx: DDSCAPSEX,
    dwSurfaceHandle: u32,
};
// --------------------------------------------------------
// Type: DD_SURFACE_LOCAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_SURFACE_LOCAL = extern struct {
    lpGbl: ?*DD_SURFACE_GLOBAL,
    dwFlags: u32,
    ddsCaps: DDSCAPS,
    dwReserved1: ?*opaque{},
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    lpSurfMore: ?*DD_SURFACE_MORE,
    lpAttachList: ?*DD_ATTACHLIST,
    lpAttachListFrom: ?*DD_ATTACHLIST,
    rcOverlaySrc: RECT,
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: DD_D3DBUFCALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_D3DBUFCALLBACKS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    CanCreateD3DBuffer: PDD_CANCREATESURFACE,
    CreateD3DBuffer: PDD_CREATESURFACE,
    DestroyD3DBuffer: PDD_SURFCB_DESTROYSURFACE,
    LockD3DBuffer: PDD_SURFCB_LOCK,
    UnlockD3DBuffer: PDD_SURFCB_UNLOCK,
};
// --------------------------------------------------------
// Type: DD_HALINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_HALINFO = extern struct {
    dwSize: u32,
    vmiData: VIDEOMEMORYINFO,
    ddCaps: DDNTCORECAPS,
    GetDriverInfo: PDD_GETDRIVERINFO,
    dwFlags: u32,
    lpD3DGlobalDriverData: ?*opaque{},
    lpD3DHALCallbacks: ?*opaque{},
    lpD3DBufCallbacks: ?*DD_D3DBUFCALLBACKS,
};
// --------------------------------------------------------
// Type: DD_DIRECTDRAW_GLOBAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_DIRECTDRAW_GLOBAL = extern struct {
    dhpdev: ?*opaque{},
    dwReserved1: ?*opaque{},
    dwReserved2: ?*opaque{},
    lpDDVideoPortCaps: ?*DDVIDEOPORTCAPS,
};
// --------------------------------------------------------
// Type: DD_DIRECTDRAW_LOCAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_DIRECTDRAW_LOCAL = extern struct {
    lpGbl: ?*DD_DIRECTDRAW_GLOBAL,
};
// --------------------------------------------------------
// Type: DD_VIDEOPORT_LOCAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_VIDEOPORT_LOCAL = extern struct {
    lpDD: ?*DD_DIRECTDRAW_LOCAL,
    ddvpDesc: DDVIDEOPORTDESC,
    ddvpInfo: DDVIDEOPORTINFO,
    lpSurface: ?*DD_SURFACE_INT,
    lpVBISurface: ?*DD_SURFACE_INT,
    dwNumAutoflip: u32,
    dwNumVBIAutoflip: u32,
    dwReserved1: ?*opaque{},
    dwReserved2: ?*opaque{},
    dwReserved3: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_MOTIONCOMP_LOCAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_MOTIONCOMP_LOCAL = extern struct {
    lpDD: ?*DD_DIRECTDRAW_LOCAL,
    guid: Guid,
    dwUncompWidth: u32,
    dwUncompHeight: u32,
    ddUncompPixelFormat: DDPIXELFORMAT,
    dwDriverReserved1: u32,
    dwDriverReserved2: u32,
    dwDriverReserved3: u32,
    lpDriverReserved1: ?*opaque{},
    lpDriverReserved2: ?*opaque{},
    lpDriverReserved3: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_MORESURFACECAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_MORESURFACECAPS = extern struct {
    dwSize: u32,
    ddsCapsMore: DDSCAPSEX,
    ddsExtendedHeapRestrictions: ?[*]tagNTExtendedHeapRestrictions,
    // --------------------------------------------------------
    // Type: tagNTExtendedHeapRestrictions
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const tagNTExtendedHeapRestrictions = extern struct {
        ddsCapsEx: DDSCAPSEX,
        ddsCapsExAlt: DDSCAPSEX,
    };
};
// --------------------------------------------------------
// Type: DD_STEREOMODE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_STEREOMODE = extern struct {
    dwSize: u32,
    dwHeight: u32,
    dwWidth: u32,
    dwBpp: u32,
    dwRefreshRate: u32,
    bSupported: BOOL,
};
// --------------------------------------------------------
// Type: DD_UPDATENONLOCALHEAPDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_UPDATENONLOCALHEAPDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_GLOBAL,
    dwHeap: u32,
    fpGARTLin: ?*opaque{},
    fpGARTDev: ?*opaque{},
    ulPolicyMaxBytes: ?*opaque{},
    ddRVal: HRESULT,
    UpdateNonLocalHeap: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_NTPRIVATEDRIVERCAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_NTPRIVATEDRIVERCAPS = extern struct {
    dwSize: u32,
    dwPrivateCaps: u32,
};
// --------------------------------------------------------
// Type: DD_BLTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_BLTDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_GLOBAL,
    lpDDDestSurface: ?*DD_SURFACE_LOCAL,
    rDest: RECTL,
    lpDDSrcSurface: ?*DD_SURFACE_LOCAL,
    rSrc: RECTL,
    dwFlags: u32,
    dwROPFlags: u32,
    bltFX: DDBLTFX,
    ddRVal: HRESULT,
    Blt: ?*opaque{},
    IsClipped: BOOL,
    rOrigDest: RECTL,
    rOrigSrc: RECTL,
    dwRectCnt: u32,
    prDestRects: ?*RECT,
    dwAFlags: u32,
    ddargbScaleFactors: DDARGB,
};
// --------------------------------------------------------
// Type: DD_LOCKDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_LOCKDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_GLOBAL,
    lpDDSurface: ?*DD_SURFACE_LOCAL,
    bHasRect: u32,
    rArea: RECTL,
    lpSurfData: ?*opaque{},
    ddRVal: HRESULT,
    Lock: ?*opaque{},
    dwFlags: u32,
    fpProcess: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_UNLOCKDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_UNLOCKDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_GLOBAL,
    lpDDSurface: ?*DD_SURFACE_LOCAL,
    ddRVal: HRESULT,
    Unlock: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_UPDATEOVERLAYDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_UPDATEOVERLAYDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_GLOBAL,
    lpDDDestSurface: ?*DD_SURFACE_LOCAL,
    rDest: RECTL,
    lpDDSrcSurface: ?*DD_SURFACE_LOCAL,
    rSrc: RECTL,
    dwFlags: u32,
    overlayFX: DDOVERLAYFX,
    ddRVal: HRESULT,
    UpdateOverlay: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_SETOVERLAYPOSITIONDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_SETOVERLAYPOSITIONDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_GLOBAL,
    lpDDSrcSurface: ?*DD_SURFACE_LOCAL,
    lpDDDestSurface: ?*DD_SURFACE_LOCAL,
    lXPos: i32,
    lYPos: i32,
    ddRVal: HRESULT,
    SetOverlayPosition: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_SETPALETTEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_SETPALETTEDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_GLOBAL,
    lpDDSurface: ?*DD_SURFACE_LOCAL,
    lpDDPalette: ?*DD_PALETTE_GLOBAL,
    ddRVal: HRESULT,
    SetPalette: ?*opaque{},
    Attach: BOOL,
};
// --------------------------------------------------------
// Type: DD_FLIPDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_FLIPDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_GLOBAL,
    lpSurfCurr: ?*DD_SURFACE_LOCAL,
    lpSurfTarg: ?*DD_SURFACE_LOCAL,
    dwFlags: u32,
    ddRVal: HRESULT,
    Flip: ?*opaque{},
    lpSurfCurrLeft: ?*DD_SURFACE_LOCAL,
    lpSurfTargLeft: ?*DD_SURFACE_LOCAL,
};
// --------------------------------------------------------
// Type: DD_DESTROYSURFACEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_DESTROYSURFACEDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_GLOBAL,
    lpDDSurface: ?*DD_SURFACE_LOCAL,
    ddRVal: HRESULT,
    DestroySurface: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_ADDATTACHEDSURFACEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_ADDATTACHEDSURFACEDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_GLOBAL,
    lpDDSurface: ?*DD_SURFACE_LOCAL,
    lpSurfAttached: ?*DD_SURFACE_LOCAL,
    ddRVal: HRESULT,
    AddAttachedSurface: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_SETCOLORKEYDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_SETCOLORKEYDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_GLOBAL,
    lpDDSurface: ?*DD_SURFACE_LOCAL,
    dwFlags: u32,
    ckNew: DDCOLORKEY,
    ddRVal: HRESULT,
    SetColorKey: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_GETBLTSTATUSDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_GETBLTSTATUSDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_GLOBAL,
    lpDDSurface: ?*DD_SURFACE_LOCAL,
    dwFlags: u32,
    ddRVal: HRESULT,
    GetBltStatus: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_GETFLIPSTATUSDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_GETFLIPSTATUSDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_GLOBAL,
    lpDDSurface: ?*DD_SURFACE_LOCAL,
    dwFlags: u32,
    ddRVal: HRESULT,
    GetFlipStatus: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_DESTROYPALETTEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_DESTROYPALETTEDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_GLOBAL,
    lpDDPalette: ?*DD_PALETTE_GLOBAL,
    ddRVal: HRESULT,
    DestroyPalette: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_SETENTRIESDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_SETENTRIESDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_GLOBAL,
    lpDDPalette: ?*DD_PALETTE_GLOBAL,
    dwBase: u32,
    dwNumEntries: u32,
    lpEntries: ?*PALETTEENTRY,
    ddRVal: HRESULT,
    SetEntries: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_CREATESURFACEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_CREATESURFACEDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_GLOBAL,
    lpDDSurfaceDesc: ?*DDSURFACEDESC,
    lplpSList: ?*?*DD_SURFACE_LOCAL,
    dwSCnt: u32,
    ddRVal: HRESULT,
    CreateSurface: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_CANCREATESURFACEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_CANCREATESURFACEDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_GLOBAL,
    lpDDSurfaceDesc: ?*DDSURFACEDESC,
    bIsDifferentPixelFormat: u32,
    ddRVal: HRESULT,
    CanCreateSurface: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_CREATEPALETTEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_CREATEPALETTEDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_GLOBAL,
    lpDDPalette: ?*DD_PALETTE_GLOBAL,
    lpColorTable: ?*PALETTEENTRY,
    ddRVal: HRESULT,
    CreatePalette: ?*opaque{},
    is_excl: BOOL,
};
// --------------------------------------------------------
// Type: DD_WAITFORVERTICALBLANKDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_WAITFORVERTICALBLANKDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_GLOBAL,
    dwFlags: u32,
    bIsInVB: u32,
    hEvent: ?*opaque{},
    ddRVal: HRESULT,
    WaitForVerticalBlank: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_GETSCANLINEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_GETSCANLINEDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_GLOBAL,
    dwScanLine: u32,
    ddRVal: HRESULT,
    GetScanLine: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_MAPMEMORYDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_MAPMEMORYDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_GLOBAL,
    bMap: BOOL,
    hProcess: HANDLE,
    fpProcess: ?*opaque{},
    ddRVal: HRESULT,
};
// --------------------------------------------------------
// Type: DD_CANCREATEVPORTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_CANCREATEVPORTDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_LOCAL,
    lpDDVideoPortDesc: ?*DDVIDEOPORTDESC,
    ddRVal: HRESULT,
    CanCreateVideoPort: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_CREATEVPORTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_CREATEVPORTDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_LOCAL,
    lpDDVideoPortDesc: ?*DDVIDEOPORTDESC,
    lpVideoPort: ?*DD_VIDEOPORT_LOCAL,
    ddRVal: HRESULT,
    CreateVideoPort: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_FLIPVPORTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_FLIPVPORTDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_LOCAL,
    lpVideoPort: ?*DD_VIDEOPORT_LOCAL,
    lpSurfCurr: ?*DD_SURFACE_LOCAL,
    lpSurfTarg: ?*DD_SURFACE_LOCAL,
    ddRVal: HRESULT,
    FlipVideoPort: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_GETVPORTBANDWIDTHDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_GETVPORTBANDWIDTHDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_LOCAL,
    lpVideoPort: ?*DD_VIDEOPORT_LOCAL,
    lpddpfFormat: ?*DDPIXELFORMAT,
    dwWidth: u32,
    dwHeight: u32,
    dwFlags: u32,
    lpBandwidth: ?*DDVIDEOPORTBANDWIDTH,
    ddRVal: HRESULT,
    GetVideoPortBandwidth: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_GETVPORTINPUTFORMATDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_GETVPORTINPUTFORMATDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_LOCAL,
    lpVideoPort: ?*DD_VIDEOPORT_LOCAL,
    dwFlags: u32,
    lpddpfFormat: ?*DDPIXELFORMAT,
    dwNumFormats: u32,
    ddRVal: HRESULT,
    GetVideoPortInputFormats: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_GETVPORTOUTPUTFORMATDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_GETVPORTOUTPUTFORMATDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_LOCAL,
    lpVideoPort: ?*DD_VIDEOPORT_LOCAL,
    dwFlags: u32,
    lpddpfInputFormat: ?*DDPIXELFORMAT,
    lpddpfOutputFormats: ?*DDPIXELFORMAT,
    dwNumFormats: u32,
    ddRVal: HRESULT,
    GetVideoPortInputFormats: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_GETVPORTFIELDDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_GETVPORTFIELDDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_LOCAL,
    lpVideoPort: ?*DD_VIDEOPORT_LOCAL,
    bField: BOOL,
    ddRVal: HRESULT,
    GetVideoPortField: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_GETVPORTLINEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_GETVPORTLINEDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_LOCAL,
    lpVideoPort: ?*DD_VIDEOPORT_LOCAL,
    dwLine: u32,
    ddRVal: HRESULT,
    GetVideoPortLine: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_GETVPORTCONNECTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_GETVPORTCONNECTDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_LOCAL,
    dwPortId: u32,
    lpConnect: ?*DDVIDEOPORTCONNECT,
    dwNumEntries: u32,
    ddRVal: HRESULT,
    GetVideoPortConnectInfo: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_DESTROYVPORTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_DESTROYVPORTDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_LOCAL,
    lpVideoPort: ?*DD_VIDEOPORT_LOCAL,
    ddRVal: HRESULT,
    DestroyVideoPort: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_GETVPORTFLIPSTATUSDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_GETVPORTFLIPSTATUSDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_LOCAL,
    fpSurface: ?*opaque{},
    ddRVal: HRESULT,
    GetVideoPortFlipStatus: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_UPDATEVPORTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_UPDATEVPORTDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_LOCAL,
    lpVideoPort: ?*DD_VIDEOPORT_LOCAL,
    lplpDDSurface: ?*?*DD_SURFACE_INT,
    lplpDDVBISurface: ?*?*DD_SURFACE_INT,
    lpVideoInfo: ?*DDVIDEOPORTINFO,
    dwFlags: u32,
    dwNumAutoflip: u32,
    dwNumVBIAutoflip: u32,
    ddRVal: HRESULT,
    UpdateVideoPort: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_WAITFORVPORTSYNCDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_WAITFORVPORTSYNCDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_LOCAL,
    lpVideoPort: ?*DD_VIDEOPORT_LOCAL,
    dwFlags: u32,
    dwLine: u32,
    dwTimeOut: u32,
    ddRVal: HRESULT,
    UpdateVideoPort: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_GETVPORTSIGNALDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_GETVPORTSIGNALDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_LOCAL,
    lpVideoPort: ?*DD_VIDEOPORT_LOCAL,
    dwStatus: u32,
    ddRVal: HRESULT,
    GetVideoSignalStatus: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_VPORTCOLORDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_VPORTCOLORDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_LOCAL,
    lpVideoPort: ?*DD_VIDEOPORT_LOCAL,
    dwFlags: u32,
    lpColorData: ?*DDCOLORCONTROL,
    ddRVal: HRESULT,
    ColorControl: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_COLORCONTROLDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_COLORCONTROLDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_GLOBAL,
    lpDDSurface: ?*DD_SURFACE_LOCAL,
    lpColorData: ?*DDCOLORCONTROL,
    dwFlags: u32,
    ddRVal: HRESULT,
    ColorControl: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_GETDRIVERINFODATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_GETDRIVERINFODATA = extern struct {
    dhpdev: ?*opaque{},
    dwSize: u32,
    dwFlags: u32,
    guidInfo: Guid,
    dwExpectedSize: u32,
    lpvData: ?*opaque{},
    dwActualSize: u32,
    ddRVal: HRESULT,
};
// --------------------------------------------------------
// Type: DD_GETAVAILDRIVERMEMORYDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_GETAVAILDRIVERMEMORYDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_GLOBAL,
    DDSCaps: DDSCAPS,
    dwTotal: u32,
    dwFree: u32,
    ddRVal: HRESULT,
    GetAvailDriverMemory: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_FREEDRIVERMEMORYDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_FREEDRIVERMEMORYDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_GLOBAL,
    lpDDSurface: ?*DD_SURFACE_LOCAL,
    ddRVal: HRESULT,
    FreeDriverMemory: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_SETEXCLUSIVEMODEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_SETEXCLUSIVEMODEDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_GLOBAL,
    dwEnterExcl: u32,
    dwReserved: u32,
    ddRVal: HRESULT,
    SetExclusiveMode: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_FLIPTOGDISURFACEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_FLIPTOGDISURFACEDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_GLOBAL,
    dwToGDI: u32,
    dwReserved: u32,
    ddRVal: HRESULT,
    FlipToGDISurface: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_SYNCSURFACEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_SYNCSURFACEDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_LOCAL,
    lpDDSurface: ?*DD_SURFACE_LOCAL,
    dwSurfaceOffset: u32,
    fpLockPtr: ?*opaque{},
    lPitch: i32,
    dwOverlayOffset: u32,
    dwDriverReserved1: u32,
    dwDriverReserved2: u32,
    dwDriverReserved3: u32,
    dwDriverReserved4: u32,
    ddRVal: HRESULT,
};
// --------------------------------------------------------
// Type: DD_SYNCVIDEOPORTDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_SYNCVIDEOPORTDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_LOCAL,
    lpVideoPort: ?*DD_VIDEOPORT_LOCAL,
    dwOriginOffset: u32,
    dwHeight: u32,
    dwVBIHeight: u32,
    dwDriverReserved1: u32,
    dwDriverReserved2: u32,
    dwDriverReserved3: u32,
    ddRVal: HRESULT,
};
// --------------------------------------------------------
// Type: DD_GETMOCOMPGUIDSDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_GETMOCOMPGUIDSDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_LOCAL,
    dwNumGuids: u32,
    lpGuids: ?*Guid,
    ddRVal: HRESULT,
};
// --------------------------------------------------------
// Type: DD_GETMOCOMPFORMATSDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_GETMOCOMPFORMATSDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_LOCAL,
    lpGuid: ?*Guid,
    dwNumFormats: u32,
    lpFormats: ?*DDPIXELFORMAT,
    ddRVal: HRESULT,
};
// --------------------------------------------------------
// Type: DD_CREATEMOCOMPDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_CREATEMOCOMPDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_LOCAL,
    lpMoComp: ?*DD_MOTIONCOMP_LOCAL,
    lpGuid: ?*Guid,
    dwUncompWidth: u32,
    dwUncompHeight: u32,
    ddUncompPixelFormat: DDPIXELFORMAT,
    lpData: ?*opaque{},
    dwDataSize: u32,
    ddRVal: HRESULT,
};
// --------------------------------------------------------
// Type: DDCOMPBUFFERINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDCOMPBUFFERINFO = extern struct {
    dwSize: u32,
    dwNumCompBuffers: u32,
    dwWidthToCreate: u32,
    dwHeightToCreate: u32,
    dwBytesToAllocate: u32,
    ddCompCaps: DDSCAPS2,
    ddPixelFormat: DDPIXELFORMAT,
};
// --------------------------------------------------------
// Type: DD_GETMOCOMPCOMPBUFFDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_GETMOCOMPCOMPBUFFDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_LOCAL,
    lpGuid: ?*Guid,
    dwWidth: u32,
    dwHeight: u32,
    ddPixelFormat: DDPIXELFORMAT,
    dwNumTypesCompBuffs: u32,
    lpCompBuffInfo: ?*DDCOMPBUFFERINFO,
    ddRVal: HRESULT,
};
// --------------------------------------------------------
// Type: DD_GETINTERNALMOCOMPDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_GETINTERNALMOCOMPDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_LOCAL,
    lpGuid: ?*Guid,
    dwWidth: u32,
    dwHeight: u32,
    ddPixelFormat: DDPIXELFORMAT,
    dwScratchMemAlloc: u32,
    ddRVal: HRESULT,
};
// --------------------------------------------------------
// Type: DD_BEGINMOCOMPFRAMEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_BEGINMOCOMPFRAMEDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_LOCAL,
    lpMoComp: ?*DD_MOTIONCOMP_LOCAL,
    lpDestSurface: ?*DD_SURFACE_LOCAL,
    dwInputDataSize: u32,
    lpInputData: ?*opaque{},
    dwOutputDataSize: u32,
    lpOutputData: ?*opaque{},
    ddRVal: HRESULT,
};
// --------------------------------------------------------
// Type: DD_ENDMOCOMPFRAMEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_ENDMOCOMPFRAMEDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_LOCAL,
    lpMoComp: ?*DD_MOTIONCOMP_LOCAL,
    lpInputData: ?*opaque{},
    dwInputDataSize: u32,
    ddRVal: HRESULT,
};
// --------------------------------------------------------
// Type: DDMOCOMPBUFFERINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDMOCOMPBUFFERINFO = extern struct {
    dwSize: u32,
    lpCompSurface: ?*DD_SURFACE_LOCAL,
    dwDataOffset: u32,
    dwDataSize: u32,
    lpPrivate: ?*opaque{},
};
// --------------------------------------------------------
// Type: DD_RENDERMOCOMPDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_RENDERMOCOMPDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_LOCAL,
    lpMoComp: ?*DD_MOTIONCOMP_LOCAL,
    dwNumBuffers: u32,
    lpBufferInfo: ?*DDMOCOMPBUFFERINFO,
    dwFunction: u32,
    lpInputData: ?*opaque{},
    dwInputDataSize: u32,
    lpOutputData: ?*opaque{},
    dwOutputDataSize: u32,
    ddRVal: HRESULT,
};
// --------------------------------------------------------
// Type: DD_QUERYMOCOMPSTATUSDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_QUERYMOCOMPSTATUSDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_LOCAL,
    lpMoComp: ?*DD_MOTIONCOMP_LOCAL,
    lpSurface: ?*DD_SURFACE_LOCAL,
    dwFlags: u32,
    ddRVal: HRESULT,
};
// --------------------------------------------------------
// Type: DD_DESTROYMOCOMPDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_DESTROYMOCOMPDATA = extern struct {
    lpDD: ?*DD_DIRECTDRAW_LOCAL,
    lpMoComp: ?*DD_MOTIONCOMP_LOCAL,
    ddRVal: HRESULT,
};
// --------------------------------------------------------
// Type: DD_CREATESURFACEEXDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_CREATESURFACEEXDATA = extern struct {
    dwFlags: u32,
    lpDDLcl: ?*DD_DIRECTDRAW_LOCAL,
    lpDDSLcl: ?*DD_SURFACE_LOCAL,
    ddRVal: HRESULT,
};
// --------------------------------------------------------
// Type: DD_GETDRIVERSTATEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DD_GETDRIVERSTATEDATA = extern struct {
    dwFlags: u32,
    Anonymous: _Anonymous_e__Union,
    lpdwStates: ?*u32,
    dwLength: u32,
    ddRVal: HRESULT,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: FD_XFORM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FD_XFORM = extern struct {
    eXX: u32,
    eXY: u32,
    eYX: u32,
    eYY: u32,
};
// --------------------------------------------------------
// Type: FD_DEVICEMETRICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FD_DEVICEMETRICS = extern struct {
    flRealizedType: u32,
    pteBase: POINTE,
    pteSide: POINTE,
    lD: i32,
    fxMaxAscender: i32,
    fxMaxDescender: i32,
    ptlUnderline1: POINTL,
    ptlStrikeOut: POINTL,
    ptlULThickness: POINTL,
    ptlSOThickness: POINTL,
    cxMax: u32,
    cyMax: u32,
    cjGlyphMax: u32,
    fdxQuantized: FD_XFORM,
    lNonLinearExtLeading: i32,
    lNonLinearIntLeading: i32,
    lNonLinearMaxCharWidth: i32,
    lNonLinearAvgCharWidth: i32,
    lMinA: i32,
    lMinC: i32,
    lMinD: i32,
    alReserved: ?[*]i32,
};
// --------------------------------------------------------
// Type: WCRUN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WCRUN = extern struct {
    wcLow: u16,
    cGlyphs: u16,
    phg: ?*u32,
};
// --------------------------------------------------------
// Type: FD_GLYPHSET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FD_GLYPHSET = extern struct {
    cjThis: u32,
    flAccel: u32,
    cGlyphsSupported: u32,
    cRuns: u32,
    awcrun: ?[*]WCRUN,
};
// --------------------------------------------------------
// Type: FD_GLYPHATTR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FD_GLYPHATTR = extern struct {
    cjThis: u32,
    cGlyphs: u32,
    iMode: u32,
    aGlyphAttr: ?[*]u8,
};
// --------------------------------------------------------
// Type: FD_KERNINGPAIR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FD_KERNINGPAIR = extern struct {
    wcFirst: u16,
    wcSecond: u16,
    fwdKern: i16,
};
// --------------------------------------------------------
// Type: FONTDIFF
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FONTDIFF = extern struct {
    jReserved1: u8,
    jReserved2: u8,
    jReserved3: u8,
    bWeight: u8,
    usWinWeight: u16,
    fsSelection: u16,
    fwdAveCharWidth: i16,
    fwdMaxCharInc: i16,
    ptlCaret: POINTL,
};
// --------------------------------------------------------
// Type: FONTSIM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FONTSIM = extern struct {
    dpBold: i32,
    dpItalic: i32,
    dpBoldItalic: i32,
};
// --------------------------------------------------------
// Type: IFIMETRICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IFIMETRICS = extern struct {
    cjThis: u32,
    cjIfiExtra: u32,
    dpwszFamilyName: i32,
    dpwszStyleName: i32,
    dpwszFaceName: i32,
    dpwszUniqueName: i32,
    dpFontSim: i32,
    lEmbedId: i32,
    lItalicAngle: i32,
    lCharBias: i32,
    dpCharSets: i32,
    jWinCharSet: u8,
    jWinPitchAndFamily: u8,
    usWinWeight: u16,
    flInfo: u32,
    fsSelection: u16,
    fsType: u16,
    fwdUnitsPerEm: i16,
    fwdLowestPPEm: i16,
    fwdWinAscender: i16,
    fwdWinDescender: i16,
    fwdMacAscender: i16,
    fwdMacDescender: i16,
    fwdMacLineGap: i16,
    fwdTypoAscender: i16,
    fwdTypoDescender: i16,
    fwdTypoLineGap: i16,
    fwdAveCharWidth: i16,
    fwdMaxCharInc: i16,
    fwdCapHeight: i16,
    fwdXHeight: i16,
    fwdSubscriptXSize: i16,
    fwdSubscriptYSize: i16,
    fwdSubscriptXOffset: i16,
    fwdSubscriptYOffset: i16,
    fwdSuperscriptXSize: i16,
    fwdSuperscriptYSize: i16,
    fwdSuperscriptXOffset: i16,
    fwdSuperscriptYOffset: i16,
    fwdUnderscoreSize: i16,
    fwdUnderscorePosition: i16,
    fwdStrikeoutSize: i16,
    fwdStrikeoutPosition: i16,
    chFirstChar: u8,
    chLastChar: u8,
    chDefaultChar: u8,
    chBreakChar: u8,
    wcFirstChar: u16,
    wcLastChar: u16,
    wcDefaultChar: u16,
    wcBreakChar: u16,
    ptlBaseline: POINTL,
    ptlAspect: POINTL,
    ptlCaret: POINTL,
    rclFontBox: RECTL,
    achVendId: ?[*]u8,
    cKerningPairs: u32,
    ulPanoseCulture: u32,
    panose: PANOSE,
};
// --------------------------------------------------------
// Type: IFIEXTRA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IFIEXTRA = extern struct {
    ulIdentifier: u32,
    dpFontSig: i32,
    cig: u32,
    dpDesignVector: i32,
    dpAxesInfoW: i32,
    aulReserved: ?[*]u32,
};
// --------------------------------------------------------
// Type: DRVFN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DRVFN = extern struct {
    iFunc: u32,
    pfn: PFN,
};
// --------------------------------------------------------
// Type: DRVENABLEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DRVENABLEDATA = extern struct {
    iDriverVersion: u32,
    c: u32,
    pdrvfn: ?*DRVFN,
};
// --------------------------------------------------------
// Type: DEVINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVINFO = extern struct {
    flGraphicsCaps: u32,
    lfDefaultFont: LOGFONTW,
    lfAnsiVarFont: LOGFONTW,
    lfAnsiFixFont: LOGFONTW,
    cFonts: u32,
    iDitherFormat: u32,
    cxDither: u16,
    cyDither: u16,
    hpalDefault: HPALETTE,
    flGraphicsCaps2: u32,
};
// --------------------------------------------------------
// Type: LINEATTRS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LINEATTRS = extern struct {
    fl: u32,
    iJoin: u32,
    iEndCap: u32,
    elWidth: FLOAT_LONG,
    eMiterLimit: u32,
    cstyle: u32,
    pstyle: ?*FLOAT_LONG,
    elStyleState: FLOAT_LONG,
};
// --------------------------------------------------------
// Type: XFORML
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const XFORML = extern struct {
    eM11: u32,
    eM12: u32,
    eM21: u32,
    eM22: u32,
    eDx: u32,
    eDy: u32,
};
// --------------------------------------------------------
// Type: CIECHROMA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CIECHROMA = extern struct {
    x: i32,
    y: i32,
    Y: i32,
};
// --------------------------------------------------------
// Type: COLORINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COLORINFO = extern struct {
    Red: CIECHROMA,
    Green: CIECHROMA,
    Blue: CIECHROMA,
    Cyan: CIECHROMA,
    Magenta: CIECHROMA,
    Yellow: CIECHROMA,
    AlignmentWhite: CIECHROMA,
    RedGamma: i32,
    GreenGamma: i32,
    BlueGamma: i32,
    MagentaInCyanDye: i32,
    YellowInCyanDye: i32,
    CyanInMagentaDye: i32,
    YellowInMagentaDye: i32,
    CyanInYellowDye: i32,
    MagentaInYellowDye: i32,
};
// --------------------------------------------------------
// Type: GDIINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GDIINFO = extern struct {
    ulVersion: u32,
    ulTechnology: u32,
    ulHorzSize: u32,
    ulVertSize: u32,
    ulHorzRes: u32,
    ulVertRes: u32,
    cBitsPixel: u32,
    cPlanes: u32,
    ulNumColors: u32,
    flRaster: u32,
    ulLogPixelsX: u32,
    ulLogPixelsY: u32,
    flTextCaps: u32,
    ulDACRed: u32,
    ulDACGreen: u32,
    ulDACBlue: u32,
    ulAspectX: u32,
    ulAspectY: u32,
    ulAspectXY: u32,
    xStyleStep: i32,
    yStyleStep: i32,
    denStyleStep: i32,
    ptlPhysOffset: POINTL,
    szlPhysSize: SIZE,
    ulNumPalReg: u32,
    ciDevice: COLORINFO,
    ulDevicePelsDPI: u32,
    ulPrimaryOrder: u32,
    ulHTPatternSize: u32,
    ulHTOutputFormat: u32,
    flHTFlags: u32,
    ulVRefresh: u32,
    ulBltAlignment: u32,
    ulPanningHorzRes: u32,
    ulPanningVertRes: u32,
    xPanningAlignment: u32,
    yPanningAlignment: u32,
    cxHTPat: u32,
    cyHTPat: u32,
    pHTPatA: ?*u8,
    pHTPatB: ?*u8,
    pHTPatC: ?*u8,
    flShadeBlend: u32,
    ulPhysicalPixelCharacteristics: u32,
    ulPhysicalPixelGamma: u32,
};
// --------------------------------------------------------
// Type: BRUSHOBJ
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BRUSHOBJ = extern struct {
    iSolidColor: u32,
    pvRbrush: ?*opaque{},
    flColorType: u32,
};
// --------------------------------------------------------
// Type: CLIPOBJ
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLIPOBJ = extern struct {
    iUniq: u32,
    rclBounds: RECTL,
    iDComplexity: u8,
    iFComplexity: u8,
    iMode: u8,
    fjOptions: u8,
};
// --------------------------------------------------------
// Type: DRIVEROBJ
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DRIVEROBJ = extern struct {
    pvObj: ?*opaque{},
    pFreeProc: FREEOBJPROC,
    hdev: ?*HDEV__,
    dhpdev: ?*DHPDEV__,
};
// --------------------------------------------------------
// Type: FONTOBJ
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FONTOBJ = extern struct {
    iUniq: u32,
    iFace: u32,
    cxMax: u32,
    flFontType: u32,
    iTTUniq: ?*opaque{},
    iFile: ?*opaque{},
    sizLogResPpi: SIZE,
    ulStyleSize: u32,
    pvConsumer: ?*opaque{},
    pvProducer: ?*opaque{},
};
// --------------------------------------------------------
// Type: BLENDOBJ
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BLENDOBJ = extern struct {
    BlendFunction: BLENDFUNCTION,
};
// --------------------------------------------------------
// Type: PALOBJ
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PALOBJ = extern struct {
    ulReserved: u32,
};
// --------------------------------------------------------
// Type: PATHOBJ
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PATHOBJ = extern struct {
    fl: u32,
    cCurves: u32,
};
// --------------------------------------------------------
// Type: SURFOBJ
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SURFOBJ = extern struct {
    dhsurf: ?*DHSURF__,
    hsurf: ?*HSURF__,
    dhpdev: ?*DHPDEV__,
    hdev: ?*HDEV__,
    sizlBitmap: SIZE,
    cjBits: u32,
    pvBits: ?*opaque{},
    pvScan0: ?*opaque{},
    lDelta: i32,
    iUniq: u32,
    iBitmapFormat: u32,
    iType: u16,
    fjBitmap: u16,
};
// --------------------------------------------------------
// Type: WNDOBJ
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WNDOBJ = extern struct {
    coClient: CLIPOBJ,
    pvConsumer: ?*opaque{},
    rclClient: RECTL,
    psoOwner: ?*SURFOBJ,
};
// --------------------------------------------------------
// Type: XLATEOBJ
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const XLATEOBJ = extern struct {
    iUniq: u32,
    flXlate: u32,
    iSrcType: u16,
    iDstType: u16,
    cEntries: u32,
    pulXlate: ?*u32,
};
// --------------------------------------------------------
// Type: ENUMRECTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENUMRECTS = extern struct {
    c: u32,
    arcl: ?[*]RECTL,
};
// --------------------------------------------------------
// Type: GLYPHBITS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GLYPHBITS = extern struct {
    ptlOrigin: POINTL,
    sizlBitmap: SIZE,
    aj: ?[*]u8,
};
// --------------------------------------------------------
// Type: GLYPHDEF
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const GLYPHDEF = *opaque{
};
// --------------------------------------------------------
// Type: GLYPHPOS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GLYPHPOS = extern struct {
    hg: u32,
    pgdf: ?*GLYPHDEF,
    ptl: POINTL,
};
// --------------------------------------------------------
// Type: GLYPHDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GLYPHDATA = extern struct {
    gdf: GLYPHDEF,
    hg: u32,
    fxD: i32,
    fxA: i32,
    fxAB: i32,
    fxInkTop: i32,
    fxInkBottom: i32,
    rclInk: RECTL,
    ptqD: POINTQF,
};
// --------------------------------------------------------
// Type: STROBJ
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STROBJ = extern struct {
    cGlyphs: u32,
    flAccel: u32,
    ulCharInc: u32,
    rclBkGround: RECTL,
    pgp: ?*GLYPHPOS,
    pwszOrg: ?*u16,
};
// --------------------------------------------------------
// Type: FONTINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FONTINFO = extern struct {
    cjThis: u32,
    flCaps: u32,
    cGlyphsSupported: u32,
    cjMaxGlyph1: u32,
    cjMaxGlyph4: u32,
    cjMaxGlyph8: u32,
    cjMaxGlyph32: u32,
};
// --------------------------------------------------------
// Type: PATHDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PATHDATA = extern struct {
    flags: u32,
    count: u32,
    pptfx: ?*POINTFIX,
};
// --------------------------------------------------------
// Type: RUN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RUN = extern struct {
    iStart: i32,
    iStop: i32,
};
// --------------------------------------------------------
// Type: CLIPLINE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLIPLINE = extern struct {
    ptfxA: POINTFIX,
    ptfxB: POINTFIX,
    lStyleState: i32,
    c: u32,
    arun: ?[*]RUN,
};
// --------------------------------------------------------
// Type: PERBANDINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERBANDINFO = extern struct {
    bRepeatThisBand: BOOL,
    szlBand: SIZE,
    ulHorzRes: u32,
    ulVertRes: u32,
};
// --------------------------------------------------------
// Type: GAMMARAMP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GAMMARAMP = extern struct {
    Red: ?[*]u16,
    Green: ?[*]u16,
    Blue: ?[*]u16,
};
// --------------------------------------------------------
// Type: DEVHTINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVHTINFO = extern struct {
    HTFlags: u32,
    HTPatternSize: u32,
    DevPelsDPI: u32,
    ColorInfo: COLORINFO,
};
// --------------------------------------------------------
// Type: DEVHTADJDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVHTADJDATA = extern struct {
    DeviceFlags: u32,
    DeviceXDPI: u32,
    DeviceYDPI: u32,
    pDefHTInfo: ?*DEVHTINFO,
    pAdjHTInfo: ?*DEVHTINFO,
};
// --------------------------------------------------------
// Type: TYPE1_FONT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TYPE1_FONT = extern struct {
    hPFM: HANDLE,
    hPFB: HANDLE,
    ulIdentifier: u32,
};
// --------------------------------------------------------
// Type: ENGSAFESEMAPHORE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENGSAFESEMAPHORE = extern struct {
    hsem: ?*HSEMAPHORE__,
    lCount: i32,
};
// --------------------------------------------------------
// Type: FLOATOBJ
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FLOATOBJ = extern struct {
    ul1: u32,
    ul2: u32,
};
// --------------------------------------------------------
// Type: FLOATOBJ_XFORM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FLOATOBJ_XFORM = extern struct {
    eM11: FLOATOBJ,
    eM12: FLOATOBJ,
    eM21: FLOATOBJ,
    eM22: FLOATOBJ,
    eDx: FLOATOBJ,
    eDy: FLOATOBJ,
};
// --------------------------------------------------------
// Type: ENG_TIME_FIELDS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENG_TIME_FIELDS = extern struct {
    usYear: u16,
    usMonth: u16,
    usDay: u16,
    usHour: u16,
    usMinute: u16,
    usSecond: u16,
    usMilliseconds: u16,
    usWeekday: u16,
};
// --------------------------------------------------------
// Type: PFN_DrvQueryGlyphAttrs
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DrvQueryGlyphAttrs = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: VIDEOPARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VIDEOPARAMETERS = extern struct {
    Guid: Guid,
    dwOffset: u32,
    dwCommand: u32,
    dwFlags: u32,
    dwMode: u32,
    dwTVStandard: u32,
    dwAvailableModes: u32,
    dwAvailableTVStandard: u32,
    dwFlickerFilter: u32,
    dwOverScanX: u32,
    dwOverScanY: u32,
    dwMaxUnscaledX: u32,
    dwMaxUnscaledY: u32,
    dwPositionX: u32,
    dwPositionY: u32,
    dwBrightness: u32,
    dwContrast: u32,
    dwCPType: u32,
    dwCPCommand: u32,
    dwCPStandard: u32,
    dwCPKey: u32,
    bCP_APSTriggerBits: u32,
    bOEMCopyProtection: ?[*]u8,
};
// --------------------------------------------------------
// Type: IDirectDrawKernel
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectDrawKernel = *opaque{
    // TODO: Method 'GetCaps'
    // TODO: Method 'GetKernelHandle'
    // TODO: Method 'ReleaseKernelHandle'
};
// --------------------------------------------------------
// Type: IDirectDrawSurfaceKernel
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectDrawSurfaceKernel = *opaque{
    // TODO: Method 'GetKernelHandle'
    // TODO: Method 'ReleaseKernelHandle'
};
// --------------------------------------------------------
// Type: DDKERNELCAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDKERNELCAPS = extern struct {
    dwSize: u32,
    dwCaps: u32,
    dwIRQCaps: u32,
};
// --------------------------------------------------------
// Type: SURFACEALIGNMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SURFACEALIGNMENT = extern struct {
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Rectangular_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Rectangular_e__Struct = extern struct {
            dwXAlignment: u32,
            dwYAlignment: u32,
            dwFlags: u32,
            dwReserved2: u32,
        };
        // --------------------------------------------------------
        // Type: _Linear_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Linear_e__Struct = extern struct {
            dwStartAlignment: u32,
            dwPitchAlignment: u32,
            dwFlags: u32,
            dwReserved2: u32,
        };
    };
};
// --------------------------------------------------------
// Type: HEAPALIGNMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HEAPALIGNMENT = extern struct {
    dwSize: u32,
    ddsCaps: DDSCAPS,
    dwReserved: u32,
    ExecuteBuffer: SURFACEALIGNMENT,
    Overlay: SURFACEALIGNMENT,
    Texture: SURFACEALIGNMENT,
    ZBuffer: SURFACEALIGNMENT,
    AlphaBuffer: SURFACEALIGNMENT,
    Offscreen: SURFACEALIGNMENT,
    FlipTarget: SURFACEALIGNMENT,
};
// --------------------------------------------------------
// Type: VMEMHEAP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VMEMHEAP = extern struct {
    dwFlags: u32,
    stride: u32,
    freeList: ?*opaque{},
    allocList: ?*opaque{},
    dwTotalSize: u32,
    fpGARTLin: ?*opaque{},
    fpGARTDev: ?*opaque{},
    dwCommitedSize: u32,
    dwCoalesceCount: u32,
    Alignment: HEAPALIGNMENT,
    ddsCapsEx: DDSCAPSEX,
    ddsCapsExAlt: DDSCAPSEX,
    liPhysAGPBase: LARGE_INTEGER,
    hdevAGP: HANDLE,
    pvPhysRsrv: ?*opaque{},
    pAgpCommitMask: ?*u8,
    dwAgpCommitMaskSize: u32,
};
// --------------------------------------------------------
// Type: DDCORECAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDCORECAPS = extern struct {
    dwSize: u32,
    dwCaps: u32,
    dwCaps2: u32,
    dwCKeyCaps: u32,
    dwFXCaps: u32,
    dwFXAlphaCaps: u32,
    dwPalCaps: u32,
    dwSVCaps: u32,
    dwAlphaBltConstBitDepths: u32,
    dwAlphaBltPixelBitDepths: u32,
    dwAlphaBltSurfaceBitDepths: u32,
    dwAlphaOverlayConstBitDepths: u32,
    dwAlphaOverlayPixelBitDepths: u32,
    dwAlphaOverlaySurfaceBitDepths: u32,
    dwZBufferBitDepths: u32,
    dwVidMemTotal: u32,
    dwVidMemFree: u32,
    dwMaxVisibleOverlays: u32,
    dwCurrVisibleOverlays: u32,
    dwNumFourCCCodes: u32,
    dwAlignBoundarySrc: u32,
    dwAlignSizeSrc: u32,
    dwAlignBoundaryDest: u32,
    dwAlignSizeDest: u32,
    dwAlignStrideAlign: u32,
    dwRops: ?[*]u32,
    ddsCaps: DDSCAPS,
    dwMinOverlayStretch: u32,
    dwMaxOverlayStretch: u32,
    dwMinLiveVideoStretch: u32,
    dwMaxLiveVideoStretch: u32,
    dwMinHwCodecStretch: u32,
    dwMaxHwCodecStretch: u32,
    dwReserved1: u32,
    dwReserved2: u32,
    dwReserved3: u32,
    dwSVBCaps: u32,
    dwSVBCKeyCaps: u32,
    dwSVBFXCaps: u32,
    dwSVBRops: ?[*]u32,
    dwVSBCaps: u32,
    dwVSBCKeyCaps: u32,
    dwVSBFXCaps: u32,
    dwVSBRops: ?[*]u32,
    dwSSBCaps: u32,
    dwSSBCKeyCaps: u32,
    dwSSBFXCaps: u32,
    dwSSBRops: ?[*]u32,
    dwMaxVideoPorts: u32,
    dwCurrVideoPorts: u32,
    dwSVBCaps2: u32,
};
// --------------------------------------------------------
// Type: DDHAL_WAITFORVERTICALBLANKDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_WAITFORVERTICALBLANKDATA = extern struct {
    lpDD: ?*DDRAWI_DIRECTDRAW_GBL,
    dwFlags: u32,
    bIsInVB: u32,
    hEvent: ?*opaque{},
    ddRVal: HRESULT,
    WaitForVerticalBlank: LPDDHAL_WAITFORVERTICALBLANK,
};
// --------------------------------------------------------
// Type: DDHAL_DESTROYDDLOCALDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DDHAL_DESTROYDDLOCALDATA = extern struct {
    dwFlags: u32,
    pDDLcl: ?*DDRAWI_DIRECTDRAW_LCL,
    ddRVal: HRESULT,
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn GetDisplayConfigBufferSizes(
    flags: u32,
    numPathArrayElements: ?*u32,
    numModeInfoArrayElements: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn SetDisplayConfig(
    numPathArrayElements: u32,
    pathArray: ?*DISPLAYCONFIG_PATH_INFO,
    numModeInfoArrayElements: u32,
    modeInfoArray: ?*DISPLAYCONFIG_MODE_INFO,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn QueryDisplayConfig(
    flags: u32,
    numPathArrayElements: ?*u32,
    pathArray: ?*DISPLAYCONFIG_PATH_INFO,
    numModeInfoArrayElements: ?*u32,
    modeInfoArray: ?*DISPLAYCONFIG_MODE_INFO,
    currentTopologyId: ?*DISPLAYCONFIG_TOPOLOGY_ID,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn DisplayConfigGetDeviceInfo(
    requestPacket: ?*DISPLAYCONFIG_DEVICE_INFO_HEADER,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn DisplayConfigSetDeviceInfo(
    setPacket: ?*DISPLAYCONFIG_DEVICE_INFO_HEADER,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn BRUSHOBJ_pvAllocRbrush(
    pbo: ?*BRUSHOBJ,
    cj: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn BRUSHOBJ_pvGetRbrush(
    pbo: ?*BRUSHOBJ,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn BRUSHOBJ_ulGetBrushColor(
    pbo: ?*BRUSHOBJ,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn BRUSHOBJ_hGetColorTransform(
    pbo: ?*BRUSHOBJ,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CLIPOBJ_cEnumStart(
    pco: ?*CLIPOBJ,
    bAll: BOOL,
    iType: u32,
    iDirection: u32,
    cLimit: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CLIPOBJ_bEnum(
    pco: ?*CLIPOBJ,
    cj: u32,
    pul: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CLIPOBJ_ppoGetPath(
    pco: ?*CLIPOBJ,
) callconv(@import("std").os.windows.WINAPI) ?*PATHOBJ;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn FONTOBJ_cGetAllGlyphHandles(
    pfo: ?*FONTOBJ,
    phg: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn FONTOBJ_vGetInfo(
    pfo: ?*FONTOBJ,
    cjSize: u32,
    pfi: ?*FONTINFO,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn FONTOBJ_cGetGlyphs(
    pfo: ?*FONTOBJ,
    iMode: u32,
    cGlyph: u32,
    phg: ?*u32,
    ppvGlyph: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn FONTOBJ_pxoGetXform(
    pfo: ?*FONTOBJ,
) callconv(@import("std").os.windows.WINAPI) ?*XFORMOBJ;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn FONTOBJ_pifi(
    pfo: ?*FONTOBJ,
) callconv(@import("std").os.windows.WINAPI) ?*IFIMETRICS;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn FONTOBJ_pfdg(
    pfo: ?*FONTOBJ,
) callconv(@import("std").os.windows.WINAPI) ?*FD_GLYPHSET;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn FONTOBJ_pvTrueTypeFontFile(
    pfo: ?*FONTOBJ,
    pcjFile: ?*u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn FONTOBJ_pQueryGlyphAttrs(
    pfo: ?*FONTOBJ,
    iMode: u32,
) callconv(@import("std").os.windows.WINAPI) ?*FD_GLYPHATTR;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn PATHOBJ_vEnumStart(
    ppo: ?*PATHOBJ,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn PATHOBJ_bEnum(
    ppo: ?*PATHOBJ,
    ppd: ?*PATHDATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn PATHOBJ_vEnumStartClipLines(
    ppo: ?*PATHOBJ,
    pco: ?*CLIPOBJ,
    pso: ?*SURFOBJ,
    pla: ?*LINEATTRS,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn PATHOBJ_bEnumClipLines(
    ppo: ?*PATHOBJ,
    cb: u32,
    pcl: ?*CLIPLINE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn PATHOBJ_vGetBounds(
    ppo: ?*PATHOBJ,
    prectfx: ?*RECTFX,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn STROBJ_vEnumStart(
    pstro: ?*STROBJ,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn STROBJ_bEnum(
    pstro: ?*STROBJ,
    pc: ?*u32,
    ppgpos: ?*?*GLYPHPOS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn STROBJ_bEnumPositionsOnly(
    pstro: ?*STROBJ,
    pc: ?*u32,
    ppgpos: ?*?*GLYPHPOS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn STROBJ_dwGetCodePage(
    pstro: ?*STROBJ,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn STROBJ_bGetAdvanceWidths(
    pso: ?*STROBJ,
    iFirst: u32,
    c: u32,
    pptqD: ?*POINTQF,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn XFORMOBJ_iGetXform(
    pxo: ?*XFORMOBJ,
    pxform: ?*XFORML,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn XFORMOBJ_bApplyXform(
    pxo: ?*XFORMOBJ,
    iMode: u32,
    cPoints: u32,
    pvIn: ?*opaque{},
    pvOut: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn XLATEOBJ_iXlate(
    pxlo: ?*XLATEOBJ,
    iColor: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn XLATEOBJ_piVector(
    pxlo: ?*XLATEOBJ,
) callconv(@import("std").os.windows.WINAPI) ?*u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn XLATEOBJ_cGetPalette(
    pxlo: ?*XLATEOBJ,
    iPal: u32,
    cPal: u32,
    pPal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn XLATEOBJ_hGetColorTransform(
    pxlo: ?*XLATEOBJ,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngCreateBitmap(
    sizl: SIZE,
    lWidth: i32,
    iFormat: u32,
    fl: u32,
    pvBits: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HBITMAP;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngCreateDeviceSurface(
    dhsurf: ?*DHSURF__,
    sizl: SIZE,
    iFormatCompat: u32,
) callconv(@import("std").os.windows.WINAPI) ?*HSURF__;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngCreateDeviceBitmap(
    dhsurf: ?*DHSURF__,
    sizl: SIZE,
    iFormatCompat: u32,
) callconv(@import("std").os.windows.WINAPI) HBITMAP;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngDeleteSurface(
    hsurf: ?*HSURF__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngLockSurface(
    hsurf: ?*HSURF__,
) callconv(@import("std").os.windows.WINAPI) ?*SURFOBJ;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngUnlockSurface(
    pso: ?*SURFOBJ,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngEraseSurface(
    pso: ?*SURFOBJ,
    prcl: ?*RECTL,
    iColor: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngAssociateSurface(
    hsurf: ?*HSURF__,
    hdev: ?*HDEV__,
    flHooks: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngMarkBandingSurface(
    hsurf: ?*HSURF__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngCheckAbort(
    pso: ?*SURFOBJ,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngDeletePath(
    ppo: ?*PATHOBJ,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngCreatePalette(
    iMode: u32,
    cColors: u32,
    pulColors: ?*u32,
    flRed: u32,
    flGreen: u32,
    flBlue: u32,
) callconv(@import("std").os.windows.WINAPI) HPALETTE;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngDeletePalette(
    hpal: HPALETTE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngCreateClip(
) callconv(@import("std").os.windows.WINAPI) ?*CLIPOBJ;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngDeleteClip(
    pco: ?*CLIPOBJ,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngBitBlt(
    psoTrg: ?*SURFOBJ,
    psoSrc: ?*SURFOBJ,
    psoMask: ?*SURFOBJ,
    pco: ?*CLIPOBJ,
    pxlo: ?*XLATEOBJ,
    prclTrg: ?*RECTL,
    pptlSrc: ?*POINTL,
    pptlMask: ?*POINTL,
    pbo: ?*BRUSHOBJ,
    pptlBrush: ?*POINTL,
    rop4: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngLineTo(
    pso: ?*SURFOBJ,
    pco: ?*CLIPOBJ,
    pbo: ?*BRUSHOBJ,
    x1: i32,
    y1: i32,
    x2: i32,
    y2: i32,
    prclBounds: ?*RECTL,
    mix: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngStretchBlt(
    psoDest: ?*SURFOBJ,
    psoSrc: ?*SURFOBJ,
    psoMask: ?*SURFOBJ,
    pco: ?*CLIPOBJ,
    pxlo: ?*XLATEOBJ,
    pca: ?*COLORADJUSTMENT,
    pptlHTOrg: ?*POINTL,
    prclDest: ?*RECTL,
    prclSrc: ?*RECTL,
    pptlMask: ?*POINTL,
    iMode: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngStretchBltROP(
    psoDest: ?*SURFOBJ,
    psoSrc: ?*SURFOBJ,
    psoMask: ?*SURFOBJ,
    pco: ?*CLIPOBJ,
    pxlo: ?*XLATEOBJ,
    pca: ?*COLORADJUSTMENT,
    pptlHTOrg: ?*POINTL,
    prclDest: ?*RECTL,
    prclSrc: ?*RECTL,
    pptlMask: ?*POINTL,
    iMode: u32,
    pbo: ?*BRUSHOBJ,
    rop4: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngAlphaBlend(
    psoDest: ?*SURFOBJ,
    psoSrc: ?*SURFOBJ,
    pco: ?*CLIPOBJ,
    pxlo: ?*XLATEOBJ,
    prclDest: ?*RECTL,
    prclSrc: ?*RECTL,
    pBlendObj: ?*BLENDOBJ,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngGradientFill(
    psoDest: ?*SURFOBJ,
    pco: ?*CLIPOBJ,
    pxlo: ?*XLATEOBJ,
    pVertex: ?*TRIVERTEX,
    nVertex: u32,
    pMesh: ?*opaque{},
    nMesh: u32,
    prclExtents: ?*RECTL,
    pptlDitherOrg: ?*POINTL,
    ulMode: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngTransparentBlt(
    psoDst: ?*SURFOBJ,
    psoSrc: ?*SURFOBJ,
    pco: ?*CLIPOBJ,
    pxlo: ?*XLATEOBJ,
    prclDst: ?*RECTL,
    prclSrc: ?*RECTL,
    TransColor: u32,
    bCalledFromBitBlt: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngTextOut(
    pso: ?*SURFOBJ,
    pstro: ?*STROBJ,
    pfo: ?*FONTOBJ,
    pco: ?*CLIPOBJ,
    prclExtra: ?*RECTL,
    prclOpaque: ?*RECTL,
    pboFore: ?*BRUSHOBJ,
    pboOpaque: ?*BRUSHOBJ,
    pptlOrg: ?*POINTL,
    mix: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngStrokePath(
    pso: ?*SURFOBJ,
    ppo: ?*PATHOBJ,
    pco: ?*CLIPOBJ,
    pxo: ?*XFORMOBJ,
    pbo: ?*BRUSHOBJ,
    pptlBrushOrg: ?*POINTL,
    plineattrs: ?*LINEATTRS,
    mix: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngFillPath(
    pso: ?*SURFOBJ,
    ppo: ?*PATHOBJ,
    pco: ?*CLIPOBJ,
    pbo: ?*BRUSHOBJ,
    pptlBrushOrg: ?*POINTL,
    mix: u32,
    flOptions: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngStrokeAndFillPath(
    pso: ?*SURFOBJ,
    ppo: ?*PATHOBJ,
    pco: ?*CLIPOBJ,
    pxo: ?*XFORMOBJ,
    pboStroke: ?*BRUSHOBJ,
    plineattrs: ?*LINEATTRS,
    pboFill: ?*BRUSHOBJ,
    pptlBrushOrg: ?*POINTL,
    mixFill: u32,
    flOptions: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngPaint(
    pso: ?*SURFOBJ,
    pco: ?*CLIPOBJ,
    pbo: ?*BRUSHOBJ,
    pptlBrushOrg: ?*POINTL,
    mix: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngCopyBits(
    psoDest: ?*SURFOBJ,
    psoSrc: ?*SURFOBJ,
    pco: ?*CLIPOBJ,
    pxlo: ?*XLATEOBJ,
    prclDest: ?*RECTL,
    pptlSrc: ?*POINTL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngPlgBlt(
    psoTrg: ?*SURFOBJ,
    psoSrc: ?*SURFOBJ,
    psoMsk: ?*SURFOBJ,
    pco: ?*CLIPOBJ,
    pxlo: ?*XLATEOBJ,
    pca: ?*COLORADJUSTMENT,
    pptlBrushOrg: ?*POINTL,
    pptfx: ?*POINTFIX,
    prcl: ?*RECTL,
    pptl: ?*POINTL,
    iMode: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn HT_Get8BPPFormatPalette(
    pPaletteEntry: ?*PALETTEENTRY,
    RedGamma: u16,
    GreenGamma: u16,
    BlueGamma: u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn HT_Get8BPPMaskPalette(
    pPaletteEntry: ?*PALETTEENTRY,
    Use8BPPMaskPal: BOOL,
    CMYMask: u8,
    RedGamma: u16,
    GreenGamma: u16,
    BlueGamma: u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngGetPrinterDataFileName(
    hdev: ?*HDEV__,
) callconv(@import("std").os.windows.WINAPI) ?*u16;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngGetDriverName(
    hdev: ?*HDEV__,
) callconv(@import("std").os.windows.WINAPI) ?*u16;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngLoadModule(
    pwsz: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngFindResource(
    h: HANDLE,
    iName: i32,
    iType: i32,
    pulSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngFreeModule(
    h: HANDLE,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngCreateSemaphore(
) callconv(@import("std").os.windows.WINAPI) ?*HSEMAPHORE__;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngAcquireSemaphore(
    hsem: ?*HSEMAPHORE__,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngReleaseSemaphore(
    hsem: ?*HSEMAPHORE__,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngDeleteSemaphore(
    hsem: ?*HSEMAPHORE__,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngMultiByteToUnicodeN(
    UnicodeString: ?*u16,
    MaxBytesInUnicodeString: u32,
    BytesInUnicodeString: ?*u32,
    MultiByteString: ?*i8,
    BytesInMultiByteString: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngUnicodeToMultiByteN(
    MultiByteString: ?*i8,
    MaxBytesInMultiByteString: u32,
    BytesInMultiByteString: ?*u32,
    UnicodeString: ?*u16,
    BytesInUnicodeString: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngQueryLocalTime(
    param0: ?*ENG_TIME_FIELDS,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngComputeGlyphSet(
    nCodePage: i32,
    nFirstChar: i32,
    cChars: i32,
) callconv(@import("std").os.windows.WINAPI) ?*FD_GLYPHSET;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngMultiByteToWideChar(
    CodePage: u32,
    WideCharString: ?*u16,
    BytesInWideCharString: i32,
    MultiByteString: ?*i8,
    BytesInMultiByteString: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngWideCharToMultiByte(
    CodePage: u32,
    WideCharString: ?*u16,
    BytesInWideCharString: i32,
    MultiByteString: ?*i8,
    BytesInMultiByteString: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EngGetCurrentCodePage(
    OemCodePage: ?*u16,
    AnsiCodePage: ?*u16,
) callconv(@import("std").os.windows.WINAPI) void;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const LUID = @import("kernel.zig").LUID;
const BOOL = @import("systemservices.zig").BOOL;
const DDVIDEOPORTCONNECT = @import("coreaudio.zig").DDVIDEOPORTCONNECT;
const DDPIXELFORMAT = @import("directdraw.zig").DDPIXELFORMAT;
const DDSCAPS = @import("directdraw.zig").DDSCAPS;
const PDD_DESTROYDRIVER = @import("systemservices.zig").PDD_DESTROYDRIVER;
const PDD_SETCOLORKEY = @import("systemservices.zig").PDD_SETCOLORKEY;
const PDD_SETMODE = @import("systemservices.zig").PDD_SETMODE;
const PDD_ALPHABLT = @import("systemservices.zig").PDD_ALPHABLT;
const PDD_SURFCB_SETCLIPLIST = @import("systemservices.zig").PDD_SURFCB_SETCLIPLIST;
const HANDLE = @import("systemservices.zig").HANDLE;
const DDSCAPSEX = @import("directdraw.zig").DDSCAPSEX;
const DDNTCORECAPS = @import("systemservices.zig").DDNTCORECAPS;
const HRESULT = @import("com.zig").HRESULT;
const DDBLTFX = @import("directdraw.zig").DDBLTFX;
const DDARGB = @import("directdraw.zig").DDARGB;
const DDOVERLAYFX = @import("directdraw.zig").DDOVERLAYFX;
const DDCOLORKEY = @import("directshow.zig").DDCOLORKEY;
const PALETTEENTRY = @import("direct2d.zig").PALETTEENTRY;
const DDSURFACEDESC = @import("directdraw.zig").DDSURFACEDESC;
const DDCOLORCONTROL = @import("directdraw.zig").DDCOLORCONTROL;
const DDSCAPS2 = @import("directdraw.zig").DDSCAPS2;
const POINTE = @import("systemservices.zig").POINTE;
const PANOSE = @import("gdi.zig").PANOSE;
const PFN = @import("systemservices.zig").PFN;
const LOGFONTW = @import("shell.zig").LOGFONTW;
const HPALETTE = @import("gdi.zig").HPALETTE;
const FLOAT_LONG = @import("systemservices.zig").FLOAT_LONG;
const FREEOBJPROC = @import("systemservices.zig").FREEOBJPROC;
const HDEV__ = @import("systemservices.zig").HDEV__;
const DHPDEV__ = @import("systemservices.zig").DHPDEV__;
const BLENDFUNCTION = @import("gdi.zig").BLENDFUNCTION;
const DHSURF__ = @import("systemservices.zig").DHSURF__;
const HSURF__ = @import("systemservices.zig").HSURF__;
const POINTQF = @import("systemservices.zig").POINTQF;
const POINTFIX = @import("systemservices.zig").POINTFIX;
const HSEMAPHORE__ = @import("systemservices.zig").HSEMAPHORE__;
const LARGE_INTEGER = @import("systemservices.zig").LARGE_INTEGER;
const DDRAWI_DIRECTDRAW_GBL = @import("windowsprogramming.zig").DDRAWI_DIRECTDRAW_GBL;
const LPDDHAL_WAITFORVERTICALBLANK = @import("windowsprogramming.zig").LPDDHAL_WAITFORVERTICALBLANK;
const DDRAWI_DIRECTDRAW_LCL = @import("windowsprogramming.zig").DDRAWI_DIRECTDRAW_LCL;
const XFORMOBJ = @import("systemservices.zig").XFORMOBJ;
const RECTFX = @import("systemservices.zig").RECTFX;
const HBITMAP = @import("gdi.zig").HBITMAP;
const COLORADJUSTMENT = @import("gdi.zig").COLORADJUSTMENT;
const TRIVERTEX = @import("gdi.zig").TRIVERTEX;

test "" {
    const constant_export_count = 0;
    const type_export_count = 242;
    const func_count = 83;
    const unicode_alias_count = 0;
    const type_import_count = 47;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
