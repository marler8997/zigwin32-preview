//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//
pub const DXGI_USAGE_SHADER_INPUT : u32 = 16;
pub const DXGI_USAGE_RENDER_TARGET_OUTPUT : u32 = 32;
pub const DXGI_USAGE_BACK_BUFFER : u32 = 64;
pub const DXGI_USAGE_SHARED : u32 = 128;
pub const DXGI_USAGE_READ_ONLY : u32 = 256;
pub const DXGI_USAGE_DISCARD_ON_PRESENT : u32 = 512;
pub const DXGI_USAGE_UNORDERED_ACCESS : u32 = 1024;
pub const DXGI_RESOURCE_PRIORITY_MINIMUM : u32 = 671088640;
pub const DXGI_RESOURCE_PRIORITY_LOW : u32 = 1342177280;
pub const DXGI_RESOURCE_PRIORITY_NORMAL : u32 = 2013265920;
pub const DXGI_RESOURCE_PRIORITY_HIGH : u32 = 2684354560;
pub const DXGI_RESOURCE_PRIORITY_MAXIMUM : u32 = 3355443200;
pub const DXGI_MAP_READ : u32 = 1;
pub const DXGI_MAP_WRITE : u32 = 2;
pub const DXGI_MAP_DISCARD : u32 = 4;
pub const DXGI_ENUM_MODES_INTERLACED : u32 = 1;
pub const DXGI_ENUM_MODES_SCALING : u32 = 2;
pub const DXGI_MAX_SWAP_CHAIN_BUFFERS : u32 = 16;
pub const DXGI_PRESENT_TEST : u32 = 1;
pub const DXGI_PRESENT_DO_NOT_SEQUENCE : u32 = 2;
pub const DXGI_PRESENT_RESTART : u32 = 4;
pub const DXGI_PRESENT_DO_NOT_WAIT : u32 = 8;
pub const DXGI_PRESENT_STEREO_PREFER_RIGHT : u32 = 16;
pub const DXGI_PRESENT_STEREO_TEMPORARY_MONO : u32 = 32;
pub const DXGI_PRESENT_RESTRICT_TO_OUTPUT : u32 = 64;
pub const DXGI_PRESENT_USE_DURATION : u32 = 256;
pub const DXGI_PRESENT_ALLOW_TEARING : u32 = 512;
pub const DXGI_MWA_NO_WINDOW_CHANGES : u32 = 1;
pub const DXGI_MWA_NO_ALT_ENTER : u32 = 2;
pub const DXGI_MWA_NO_PRINT_SCREEN : u32 = 4;
pub const DXGI_MWA_VALID : u32 = 7;

//
// types
//
// --------------------------------------------------------
// Type: DXGI_RATIONAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_RATIONAL = extern struct {
    Numerator: u32,
    Denominator: u32,
};
// --------------------------------------------------------
// Type: DXGI_SAMPLE_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_SAMPLE_DESC = extern struct {
    Count: u32,
    Quality: u32,
};
// --------------------------------------------------------
// Type: DXGI_COLOR_SPACE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_COLOR_SPACE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DXGI_FORMAT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_FORMAT = *opaque{
};
// --------------------------------------------------------
// Type: DXGI_RGB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_RGB = extern struct {
    Red: f32,
    Green: f32,
    Blue: f32,
};
// --------------------------------------------------------
// Type: DXGI_RGBA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_RGBA = extern struct {
    r: f32,
    g: f32,
    b: f32,
    a: f32,
};
// --------------------------------------------------------
// Type: DXGI_GAMMA_CONTROL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_GAMMA_CONTROL = extern struct {
    Scale: DXGI_RGB,
    Offset: DXGI_RGB,
    GammaCurve: ?[*]DXGI_RGB,
};
// --------------------------------------------------------
// Type: DXGI_GAMMA_CONTROL_CAPABILITIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_GAMMA_CONTROL_CAPABILITIES = extern struct {
    ScaleAndOffsetSupported: BOOL,
    MaxConvertedValue: f32,
    MinConvertedValue: f32,
    NumGammaControlPoints: u32,
    ControlPointPositions: ?[*]f32,
};
// --------------------------------------------------------
// Type: DXGI_MODE_SCANLINE_ORDER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_MODE_SCANLINE_ORDER = *opaque{
};
// --------------------------------------------------------
// Type: DXGI_MODE_SCALING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_MODE_SCALING = *opaque{
};
// --------------------------------------------------------
// Type: DXGI_MODE_ROTATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_MODE_ROTATION = *opaque{
};
// --------------------------------------------------------
// Type: DXGI_MODE_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_MODE_DESC = extern struct {
    Width: u32,
    Height: u32,
    RefreshRate: DXGI_RATIONAL,
    Format: DXGI_FORMAT,
    ScanlineOrdering: DXGI_MODE_SCANLINE_ORDER,
    Scaling: DXGI_MODE_SCALING,
};
// --------------------------------------------------------
// Type: DXGI_JPEG_DC_HUFFMAN_TABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_JPEG_DC_HUFFMAN_TABLE = extern struct {
    CodeCounts: ?[*]u8,
    CodeValues: ?[*]u8,
};
// --------------------------------------------------------
// Type: DXGI_JPEG_AC_HUFFMAN_TABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_JPEG_AC_HUFFMAN_TABLE = extern struct {
    CodeCounts: ?[*]u8,
    CodeValues: ?[*]u8,
};
// --------------------------------------------------------
// Type: DXGI_JPEG_QUANTIZATION_TABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_JPEG_QUANTIZATION_TABLE = extern struct {
    Elements: ?[*]u8,
};
// --------------------------------------------------------
// Type: DXGI_FRAME_STATISTICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_FRAME_STATISTICS = extern struct {
    PresentCount: u32,
    PresentRefreshCount: u32,
    SyncRefreshCount: u32,
    SyncQPCTime: LARGE_INTEGER,
    SyncGPUTime: LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: DXGI_MAPPED_RECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_MAPPED_RECT = extern struct {
    Pitch: i32,
    pBits: ?*u8,
};
// --------------------------------------------------------
// Type: DXGI_ADAPTER_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_ADAPTER_DESC = extern struct {
    Description: ?[*]u16,
    VendorId: u32,
    DeviceId: u32,
    SubSysId: u32,
    Revision: u32,
    DedicatedVideoMemory: ?*opaque{},
    DedicatedSystemMemory: ?*opaque{},
    SharedSystemMemory: ?*opaque{},
    AdapterLuid: LUID,
};
// --------------------------------------------------------
// Type: DXGI_OUTPUT_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_OUTPUT_DESC = extern struct {
    DeviceName: ?[*]u16,
    DesktopCoordinates: RECT,
    AttachedToDesktop: BOOL,
    Rotation: DXGI_MODE_ROTATION,
    Monitor: ?*opaque{},
};
// --------------------------------------------------------
// Type: DXGI_SHARED_RESOURCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_SHARED_RESOURCE = extern struct {
    Handle: HANDLE,
};
// --------------------------------------------------------
// Type: DXGI_RESIDENCY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_RESIDENCY = *opaque{
};
// --------------------------------------------------------
// Type: DXGI_SURFACE_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_SURFACE_DESC = extern struct {
    Width: u32,
    Height: u32,
    Format: DXGI_FORMAT,
    SampleDesc: DXGI_SAMPLE_DESC,
};
// --------------------------------------------------------
// Type: DXGI_SWAP_EFFECT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_SWAP_EFFECT = *opaque{
};
// --------------------------------------------------------
// Type: DXGI_SWAP_CHAIN_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_SWAP_CHAIN_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: DXGI_SWAP_CHAIN_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_SWAP_CHAIN_DESC = extern struct {
    BufferDesc: DXGI_MODE_DESC,
    SampleDesc: DXGI_SAMPLE_DESC,
    BufferUsage: u32,
    BufferCount: u32,
    OutputWindow: HWND,
    Windowed: BOOL,
    SwapEffect: DXGI_SWAP_EFFECT,
    Flags: u32,
};
// --------------------------------------------------------
// Type: IDXGIObject
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIObject = *opaque{
    // TODO: Method 'SetPrivateData'
    // TODO: Method 'SetPrivateDataInterface'
    // TODO: Method 'GetPrivateData'
    // TODO: Method 'GetParent'
};
// --------------------------------------------------------
// Type: IDXGIDeviceSubObject
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIDeviceSubObject = *opaque{
    // TODO: Method 'GetDevice'
};
// --------------------------------------------------------
// Type: IDXGIResource
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIResource = *opaque{
    // TODO: Method 'GetSharedHandle'
    // TODO: Method 'GetUsage'
    // TODO: Method 'SetEvictionPriority'
    // TODO: Method 'GetEvictionPriority'
};
// --------------------------------------------------------
// Type: IDXGIKeyedMutex
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIKeyedMutex = *opaque{
    // TODO: Method 'AcquireSync'
    // TODO: Method 'ReleaseSync'
};
// --------------------------------------------------------
// Type: IDXGISurface
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGISurface = *opaque{
    // TODO: Method 'GetDesc'
    // TODO: Method 'Map'
    // TODO: Method 'Unmap'
};
// --------------------------------------------------------
// Type: IDXGISurface1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGISurface1 = *opaque{
    // TODO: Method 'GetDC'
    // TODO: Method 'ReleaseDC'
};
// --------------------------------------------------------
// Type: IDXGIAdapter
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIAdapter = *opaque{
    // TODO: Method 'EnumOutputs'
    // TODO: Method 'GetDesc'
    // TODO: Method 'CheckInterfaceSupport'
};
// --------------------------------------------------------
// Type: IDXGIOutput
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIOutput = *opaque{
    // TODO: Method 'GetDesc'
    // TODO: Method 'GetDisplayModeList'
    // TODO: Method 'FindClosestMatchingMode'
    // TODO: Method 'WaitForVBlank'
    // TODO: Method 'TakeOwnership'
    // TODO: Method 'ReleaseOwnership'
    // TODO: Method 'GetGammaControlCapabilities'
    // TODO: Method 'SetGammaControl'
    // TODO: Method 'GetGammaControl'
    // TODO: Method 'SetDisplaySurface'
    // TODO: Method 'GetDisplaySurfaceData'
    // TODO: Method 'GetFrameStatistics'
};
// --------------------------------------------------------
// Type: IDXGISwapChain
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGISwapChain = *opaque{
    // TODO: Method 'Present'
    // TODO: Method 'GetBuffer'
    // TODO: Method 'SetFullscreenState'
    // TODO: Method 'GetFullscreenState'
    // TODO: Method 'GetDesc'
    // TODO: Method 'ResizeBuffers'
    // TODO: Method 'ResizeTarget'
    // TODO: Method 'GetContainingOutput'
    // TODO: Method 'GetFrameStatistics'
    // TODO: Method 'GetLastPresentCount'
};
// --------------------------------------------------------
// Type: IDXGIFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIFactory = *opaque{
    // TODO: Method 'EnumAdapters'
    // TODO: Method 'MakeWindowAssociation'
    // TODO: Method 'GetWindowAssociation'
    // TODO: Method 'CreateSwapChain'
    // TODO: Method 'CreateSoftwareAdapter'
};
// --------------------------------------------------------
// Type: IDXGIDevice
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIDevice = *opaque{
    // TODO: Method 'GetAdapter'
    // TODO: Method 'CreateSurface'
    // TODO: Method 'QueryResourceResidency'
    // TODO: Method 'SetGPUThreadPriority'
    // TODO: Method 'GetGPUThreadPriority'
};
// --------------------------------------------------------
// Type: DXGI_ADAPTER_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_ADAPTER_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: DXGI_ADAPTER_DESC1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_ADAPTER_DESC1 = extern struct {
    Description: ?[*]u16,
    VendorId: u32,
    DeviceId: u32,
    SubSysId: u32,
    Revision: u32,
    DedicatedVideoMemory: ?*opaque{},
    DedicatedSystemMemory: ?*opaque{},
    SharedSystemMemory: ?*opaque{},
    AdapterLuid: LUID,
    Flags: u32,
};
// --------------------------------------------------------
// Type: DXGI_DISPLAY_COLOR_SPACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_DISPLAY_COLOR_SPACE = extern struct {
    PrimaryCoordinates: ?[*]f32,
    WhitePoints: ?[*]f32,
};
// --------------------------------------------------------
// Type: IDXGIFactory1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIFactory1 = *opaque{
    // TODO: Method 'EnumAdapters1'
    // TODO: Method 'IsCurrent'
};
// --------------------------------------------------------
// Type: IDXGIAdapter1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIAdapter1 = *opaque{
    // TODO: Method 'GetDesc1'
};
// --------------------------------------------------------
// Type: IDXGIDevice1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIDevice1 = *opaque{
    // TODO: Method 'SetMaximumFrameLatency'
    // TODO: Method 'GetMaximumFrameLatency'
};
// --------------------------------------------------------
// Type: IDXGIDisplayControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIDisplayControl = *opaque{
    // TODO: Method 'IsStereoEnabled'
    // TODO: Method 'SetStereoEnabled'
};
// --------------------------------------------------------
// Type: DXGI_OUTDUPL_MOVE_RECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_OUTDUPL_MOVE_RECT = extern struct {
    SourcePoint: POINT,
    DestinationRect: RECT,
};
// --------------------------------------------------------
// Type: DXGI_OUTDUPL_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_OUTDUPL_DESC = extern struct {
    ModeDesc: DXGI_MODE_DESC,
    Rotation: DXGI_MODE_ROTATION,
    DesktopImageInSystemMemory: BOOL,
};
// --------------------------------------------------------
// Type: DXGI_OUTDUPL_POINTER_POSITION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_OUTDUPL_POINTER_POSITION = extern struct {
    Position: POINT,
    Visible: BOOL,
};
// --------------------------------------------------------
// Type: DXGI_OUTDUPL_POINTER_SHAPE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_OUTDUPL_POINTER_SHAPE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DXGI_OUTDUPL_POINTER_SHAPE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_OUTDUPL_POINTER_SHAPE_INFO = extern struct {
    Type: u32,
    Width: u32,
    Height: u32,
    Pitch: u32,
    HotSpot: POINT,
};
// --------------------------------------------------------
// Type: DXGI_OUTDUPL_FRAME_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_OUTDUPL_FRAME_INFO = extern struct {
    LastPresentTime: LARGE_INTEGER,
    LastMouseUpdateTime: LARGE_INTEGER,
    AccumulatedFrames: u32,
    RectsCoalesced: BOOL,
    ProtectedContentMaskedOut: BOOL,
    PointerPosition: DXGI_OUTDUPL_POINTER_POSITION,
    TotalMetadataBufferSize: u32,
    PointerShapeBufferSize: u32,
};
// --------------------------------------------------------
// Type: IDXGIOutputDuplication
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIOutputDuplication = *opaque{
    // TODO: Method 'GetDesc'
    // TODO: Method 'AcquireNextFrame'
    // TODO: Method 'GetFrameDirtyRects'
    // TODO: Method 'GetFrameMoveRects'
    // TODO: Method 'GetFramePointerShape'
    // TODO: Method 'MapDesktopSurface'
    // TODO: Method 'UnMapDesktopSurface'
    // TODO: Method 'ReleaseFrame'
};
// --------------------------------------------------------
// Type: DXGI_ALPHA_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_ALPHA_MODE = *opaque{
};
// --------------------------------------------------------
// Type: IDXGISurface2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGISurface2 = *opaque{
    // TODO: Method 'GetResource'
};
// --------------------------------------------------------
// Type: IDXGIResource1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIResource1 = *opaque{
    // TODO: Method 'CreateSubresourceSurface'
    // TODO: Method 'CreateSharedHandle'
};
// --------------------------------------------------------
// Type: DXGI_OFFER_RESOURCE_PRIORITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_OFFER_RESOURCE_PRIORITY = *opaque{
};
// --------------------------------------------------------
// Type: IDXGIDevice2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIDevice2 = *opaque{
    // TODO: Method 'OfferResources'
    // TODO: Method 'ReclaimResources'
    // TODO: Method 'EnqueueSetEvent'
};
// --------------------------------------------------------
// Type: DXGI_MODE_DESC1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_MODE_DESC1 = extern struct {
    Width: u32,
    Height: u32,
    RefreshRate: DXGI_RATIONAL,
    Format: DXGI_FORMAT,
    ScanlineOrdering: DXGI_MODE_SCANLINE_ORDER,
    Scaling: DXGI_MODE_SCALING,
    Stereo: BOOL,
};
// --------------------------------------------------------
// Type: DXGI_SCALING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_SCALING = *opaque{
};
// --------------------------------------------------------
// Type: DXGI_SWAP_CHAIN_DESC1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_SWAP_CHAIN_DESC1 = extern struct {
    Width: u32,
    Height: u32,
    Format: DXGI_FORMAT,
    Stereo: BOOL,
    SampleDesc: DXGI_SAMPLE_DESC,
    BufferUsage: u32,
    BufferCount: u32,
    Scaling: DXGI_SCALING,
    SwapEffect: DXGI_SWAP_EFFECT,
    AlphaMode: DXGI_ALPHA_MODE,
    Flags: u32,
};
// --------------------------------------------------------
// Type: DXGI_SWAP_CHAIN_FULLSCREEN_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_SWAP_CHAIN_FULLSCREEN_DESC = extern struct {
    RefreshRate: DXGI_RATIONAL,
    ScanlineOrdering: DXGI_MODE_SCANLINE_ORDER,
    Scaling: DXGI_MODE_SCALING,
    Windowed: BOOL,
};
// --------------------------------------------------------
// Type: DXGI_PRESENT_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_PRESENT_PARAMETERS = extern struct {
    DirtyRectsCount: u32,
    pDirtyRects: ?*RECT,
    pScrollRect: ?*RECT,
    pScrollOffset: ?*POINT,
};
// --------------------------------------------------------
// Type: IDXGISwapChain1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGISwapChain1 = *opaque{
    // TODO: Method 'GetDesc1'
    // TODO: Method 'GetFullscreenDesc'
    // TODO: Method 'GetHwnd'
    // TODO: Method 'GetCoreWindow'
    // TODO: Method 'Present1'
    // TODO: Method 'IsTemporaryMonoSupported'
    // TODO: Method 'GetRestrictToOutput'
    // TODO: Method 'SetBackgroundColor'
    // TODO: Method 'GetBackgroundColor'
    // TODO: Method 'SetRotation'
    // TODO: Method 'GetRotation'
};
// --------------------------------------------------------
// Type: IDXGIFactory2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIFactory2 = *opaque{
    // TODO: Method 'IsWindowedStereoEnabled'
    // TODO: Method 'CreateSwapChainForHwnd'
    // TODO: Method 'CreateSwapChainForCoreWindow'
    // TODO: Method 'GetSharedResourceAdapterLuid'
    // TODO: Method 'RegisterStereoStatusWindow'
    // TODO: Method 'RegisterStereoStatusEvent'
    // TODO: Method 'UnregisterStereoStatus'
    // TODO: Method 'RegisterOcclusionStatusWindow'
    // TODO: Method 'RegisterOcclusionStatusEvent'
    // TODO: Method 'UnregisterOcclusionStatus'
    // TODO: Method 'CreateSwapChainForComposition'
};
// --------------------------------------------------------
// Type: DXGI_GRAPHICS_PREEMPTION_GRANULARITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_GRAPHICS_PREEMPTION_GRANULARITY = *opaque{
};
// --------------------------------------------------------
// Type: DXGI_COMPUTE_PREEMPTION_GRANULARITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_COMPUTE_PREEMPTION_GRANULARITY = *opaque{
};
// --------------------------------------------------------
// Type: DXGI_ADAPTER_DESC2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_ADAPTER_DESC2 = extern struct {
    Description: ?[*]u16,
    VendorId: u32,
    DeviceId: u32,
    SubSysId: u32,
    Revision: u32,
    DedicatedVideoMemory: ?*opaque{},
    DedicatedSystemMemory: ?*opaque{},
    SharedSystemMemory: ?*opaque{},
    AdapterLuid: LUID,
    Flags: u32,
    GraphicsPreemptionGranularity: DXGI_GRAPHICS_PREEMPTION_GRANULARITY,
    ComputePreemptionGranularity: DXGI_COMPUTE_PREEMPTION_GRANULARITY,
};
// --------------------------------------------------------
// Type: IDXGIAdapter2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIAdapter2 = *opaque{
    // TODO: Method 'GetDesc2'
};
// --------------------------------------------------------
// Type: IDXGIOutput1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIOutput1 = *opaque{
    // TODO: Method 'GetDisplayModeList1'
    // TODO: Method 'FindClosestMatchingMode1'
    // TODO: Method 'GetDisplaySurfaceData1'
    // TODO: Method 'DuplicateOutput'
};
// --------------------------------------------------------
// Type: IDXGIDevice3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIDevice3 = *opaque{
    // TODO: Method 'Trim'
};
// --------------------------------------------------------
// Type: DXGI_MATRIX_3X2_F
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_MATRIX_3X2_F = extern struct {
    _11: f32,
    _12: f32,
    _21: f32,
    _22: f32,
    _31: f32,
    _32: f32,
};
// --------------------------------------------------------
// Type: IDXGISwapChain2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGISwapChain2 = *opaque{
    // TODO: Method 'SetSourceSize'
    // TODO: Method 'GetSourceSize'
    // TODO: Method 'SetMaximumFrameLatency'
    // TODO: Method 'GetMaximumFrameLatency'
    // TODO: Method 'GetFrameLatencyWaitableObject'
    // TODO: Method 'SetMatrixTransform'
    // TODO: Method 'GetMatrixTransform'
};
// --------------------------------------------------------
// Type: IDXGIOutput2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIOutput2 = *opaque{
    // TODO: Method 'SupportsOverlays'
};
// --------------------------------------------------------
// Type: IDXGIFactory3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIFactory3 = *opaque{
    // TODO: Method 'GetCreationFlags'
};
// --------------------------------------------------------
// Type: DXGI_DECODE_SWAP_CHAIN_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_DECODE_SWAP_CHAIN_DESC = extern struct {
    Flags: u32,
};
// --------------------------------------------------------
// Type: DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IDXGIDecodeSwapChain
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIDecodeSwapChain = *opaque{
    // TODO: Method 'PresentBuffer'
    // TODO: Method 'SetSourceRect'
    // TODO: Method 'SetTargetRect'
    // TODO: Method 'SetDestSize'
    // TODO: Method 'GetSourceRect'
    // TODO: Method 'GetTargetRect'
    // TODO: Method 'GetDestSize'
    // TODO: Method 'SetColorSpace'
    // TODO: Method 'GetColorSpace'
};
// --------------------------------------------------------
// Type: IDXGIFactoryMedia
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIFactoryMedia = *opaque{
    // TODO: Method 'CreateSwapChainForCompositionSurfaceHandle'
    // TODO: Method 'CreateDecodeSwapChainForCompositionSurfaceHandle'
};
// --------------------------------------------------------
// Type: DXGI_FRAME_PRESENTATION_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_FRAME_PRESENTATION_MODE = *opaque{
};
// --------------------------------------------------------
// Type: DXGI_FRAME_STATISTICS_MEDIA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_FRAME_STATISTICS_MEDIA = extern struct {
    PresentCount: u32,
    PresentRefreshCount: u32,
    SyncRefreshCount: u32,
    SyncQPCTime: LARGE_INTEGER,
    SyncGPUTime: LARGE_INTEGER,
    CompositionMode: DXGI_FRAME_PRESENTATION_MODE,
    ApprovedPresentDuration: u32,
};
// --------------------------------------------------------
// Type: IDXGISwapChainMedia
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGISwapChainMedia = *opaque{
    // TODO: Method 'GetFrameStatisticsMedia'
    // TODO: Method 'SetPresentDuration'
    // TODO: Method 'CheckPresentDurationSupport'
};
// --------------------------------------------------------
// Type: DXGI_OVERLAY_SUPPORT_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_OVERLAY_SUPPORT_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: IDXGIOutput3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIOutput3 = *opaque{
    // TODO: Method 'CheckOverlaySupport'
};
// --------------------------------------------------------
// Type: DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: IDXGISwapChain3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGISwapChain3 = *opaque{
    // TODO: Method 'GetCurrentBackBufferIndex'
    // TODO: Method 'CheckColorSpaceSupport'
    // TODO: Method 'SetColorSpace1'
    // TODO: Method 'ResizeBuffers1'
};
// --------------------------------------------------------
// Type: DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: IDXGIOutput4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIOutput4 = *opaque{
    // TODO: Method 'CheckOverlayColorSpaceSupport'
};
// --------------------------------------------------------
// Type: IDXGIFactory4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIFactory4 = *opaque{
    // TODO: Method 'EnumAdapterByLuid'
    // TODO: Method 'EnumWarpAdapter'
};
// --------------------------------------------------------
// Type: DXGI_MEMORY_SEGMENT_GROUP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_MEMORY_SEGMENT_GROUP = *opaque{
};
// --------------------------------------------------------
// Type: DXGI_QUERY_VIDEO_MEMORY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_QUERY_VIDEO_MEMORY_INFO = extern struct {
    Budget: u64,
    CurrentUsage: u64,
    AvailableForReservation: u64,
    CurrentReservation: u64,
};
// --------------------------------------------------------
// Type: IDXGIAdapter3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIAdapter3 = *opaque{
    // TODO: Method 'RegisterHardwareContentProtectionTeardownStatusEvent'
    // TODO: Method 'UnregisterHardwareContentProtectionTeardownStatus'
    // TODO: Method 'QueryVideoMemoryInfo'
    // TODO: Method 'SetVideoMemoryReservation'
    // TODO: Method 'RegisterVideoMemoryBudgetChangeNotificationEvent'
    // TODO: Method 'UnregisterVideoMemoryBudgetChangeNotification'
};
// --------------------------------------------------------
// Type: DXGI_OUTDUPL_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_OUTDUPL_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: IDXGIOutput5
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIOutput5 = *opaque{
    // TODO: Method 'DuplicateOutput1'
};
// --------------------------------------------------------
// Type: DXGI_HDR_METADATA_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_HDR_METADATA_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DXGI_HDR_METADATA_HDR10
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_HDR_METADATA_HDR10 = extern struct {
    RedPrimary: ?[*]u16,
    GreenPrimary: ?[*]u16,
    BluePrimary: ?[*]u16,
    WhitePoint: ?[*]u16,
    MaxMasteringLuminance: u32,
    MinMasteringLuminance: u32,
    MaxContentLightLevel: u16,
    MaxFrameAverageLightLevel: u16,
};
// --------------------------------------------------------
// Type: DXGI_HDR_METADATA_HDR10PLUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_HDR_METADATA_HDR10PLUS = extern struct {
    Data: ?[*]u8,
};
// --------------------------------------------------------
// Type: IDXGISwapChain4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGISwapChain4 = *opaque{
    // TODO: Method 'SetHDRMetaData'
};
// --------------------------------------------------------
// Type: DXGI_OFFER_RESOURCE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_OFFER_RESOURCE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: DXGI_RECLAIM_RESOURCE_RESULTS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_RECLAIM_RESOURCE_RESULTS = *opaque{
};
// --------------------------------------------------------
// Type: IDXGIDevice4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIDevice4 = *opaque{
    // TODO: Method 'OfferResources1'
    // TODO: Method 'ReclaimResources1'
};
// --------------------------------------------------------
// Type: DXGI_FEATURE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_FEATURE = *opaque{
};
// --------------------------------------------------------
// Type: IDXGIFactory5
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIFactory5 = *opaque{
    // TODO: Method 'CheckFeatureSupport'
};
// --------------------------------------------------------
// Type: DXGI_ADAPTER_FLAG3
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_ADAPTER_FLAG3 = *opaque{
};
// --------------------------------------------------------
// Type: DXGI_ADAPTER_DESC3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_ADAPTER_DESC3 = extern struct {
    Description: ?[*]u16,
    VendorId: u32,
    DeviceId: u32,
    SubSysId: u32,
    Revision: u32,
    DedicatedVideoMemory: ?*opaque{},
    DedicatedSystemMemory: ?*opaque{},
    SharedSystemMemory: ?*opaque{},
    AdapterLuid: LUID,
    Flags: DXGI_ADAPTER_FLAG3,
    GraphicsPreemptionGranularity: DXGI_GRAPHICS_PREEMPTION_GRANULARITY,
    ComputePreemptionGranularity: DXGI_COMPUTE_PREEMPTION_GRANULARITY,
};
// --------------------------------------------------------
// Type: IDXGIAdapter4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIAdapter4 = *opaque{
    // TODO: Method 'GetDesc3'
};
// --------------------------------------------------------
// Type: DXGI_OUTPUT_DESC1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_OUTPUT_DESC1 = extern struct {
    DeviceName: ?[*]u16,
    DesktopCoordinates: RECT,
    AttachedToDesktop: BOOL,
    Rotation: DXGI_MODE_ROTATION,
    Monitor: ?*opaque{},
    BitsPerColor: u32,
    ColorSpace: DXGI_COLOR_SPACE_TYPE,
    RedPrimary: ?[*]f32,
    GreenPrimary: ?[*]f32,
    BluePrimary: ?[*]f32,
    WhitePoint: ?[*]f32,
    MinLuminance: f32,
    MaxLuminance: f32,
    MaxFullFrameLuminance: f32,
};
// --------------------------------------------------------
// Type: DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IDXGIOutput6
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIOutput6 = *opaque{
    // TODO: Method 'GetDesc1'
    // TODO: Method 'CheckHardwareCompositionSupport'
};
// --------------------------------------------------------
// Type: DXGI_GPU_PREFERENCE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_GPU_PREFERENCE = *opaque{
};
// --------------------------------------------------------
// Type: IDXGIFactory6
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIFactory6 = *opaque{
    // TODO: Method 'EnumAdapterByGpuPreference'
};
// --------------------------------------------------------
// Type: IDXGIFactory7
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIFactory7 = *opaque{
    // TODO: Method 'RegisterAdaptersChangedEvent'
    // TODO: Method 'UnregisterAdaptersChangedEvent'
};
// --------------------------------------------------------
// Type: DXGI_DEBUG_RLO_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_DEBUG_RLO_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: DXGI_INFO_QUEUE_MESSAGE_CATEGORY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_INFO_QUEUE_MESSAGE_CATEGORY = *opaque{
};
// --------------------------------------------------------
// Type: DXGI_INFO_QUEUE_MESSAGE_SEVERITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DXGI_INFO_QUEUE_MESSAGE_SEVERITY = *opaque{
};
// --------------------------------------------------------
// Type: DXGI_INFO_QUEUE_MESSAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_INFO_QUEUE_MESSAGE = extern struct {
    Producer: Guid,
    Category: DXGI_INFO_QUEUE_MESSAGE_CATEGORY,
    Severity: DXGI_INFO_QUEUE_MESSAGE_SEVERITY,
    ID: i32,
    pDescription: ?*i8,
    DescriptionByteLength: ?*opaque{},
};
// --------------------------------------------------------
// Type: DXGI_INFO_QUEUE_FILTER_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_INFO_QUEUE_FILTER_DESC = extern struct {
    NumCategories: u32,
    pCategoryList: ?*DXGI_INFO_QUEUE_MESSAGE_CATEGORY,
    NumSeverities: u32,
    pSeverityList: ?*DXGI_INFO_QUEUE_MESSAGE_SEVERITY,
    NumIDs: u32,
    pIDList: ?*i32,
};
// --------------------------------------------------------
// Type: DXGI_INFO_QUEUE_FILTER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DXGI_INFO_QUEUE_FILTER = extern struct {
    AllowList: DXGI_INFO_QUEUE_FILTER_DESC,
    DenyList: DXGI_INFO_QUEUE_FILTER_DESC,
};
// --------------------------------------------------------
// Type: IDXGIInfoQueue
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIInfoQueue = *opaque{
    // TODO: Method 'SetMessageCountLimit'
    // TODO: Method 'ClearStoredMessages'
    // TODO: Method 'GetMessageA'
    // TODO: Method 'GetNumStoredMessagesAllowedByRetrievalFilters'
    // TODO: Method 'GetNumStoredMessages'
    // TODO: Method 'GetNumMessagesDiscardedByMessageCountLimit'
    // TODO: Method 'GetMessageCountLimit'
    // TODO: Method 'GetNumMessagesAllowedByStorageFilter'
    // TODO: Method 'GetNumMessagesDeniedByStorageFilter'
    // TODO: Method 'AddStorageFilterEntries'
    // TODO: Method 'GetStorageFilter'
    // TODO: Method 'ClearStorageFilter'
    // TODO: Method 'PushEmptyStorageFilter'
    // TODO: Method 'PushDenyAllStorageFilter'
    // TODO: Method 'PushCopyOfStorageFilter'
    // TODO: Method 'PushStorageFilter'
    // TODO: Method 'PopStorageFilter'
    // TODO: Method 'GetStorageFilterStackSize'
    // TODO: Method 'AddRetrievalFilterEntries'
    // TODO: Method 'GetRetrievalFilter'
    // TODO: Method 'ClearRetrievalFilter'
    // TODO: Method 'PushEmptyRetrievalFilter'
    // TODO: Method 'PushDenyAllRetrievalFilter'
    // TODO: Method 'PushCopyOfRetrievalFilter'
    // TODO: Method 'PushRetrievalFilter'
    // TODO: Method 'PopRetrievalFilter'
    // TODO: Method 'GetRetrievalFilterStackSize'
    // TODO: Method 'AddMessage'
    // TODO: Method 'AddApplicationMessage'
    // TODO: Method 'SetBreakOnCategory'
    // TODO: Method 'SetBreakOnSeverity'
    // TODO: Method 'SetBreakOnID'
    // TODO: Method 'GetBreakOnCategory'
    // TODO: Method 'GetBreakOnSeverity'
    // TODO: Method 'GetBreakOnID'
    // TODO: Method 'SetMuteDebugOutput'
    // TODO: Method 'GetMuteDebugOutput'
};
// --------------------------------------------------------
// Type: IDXGIDebug
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIDebug = *opaque{
    // TODO: Method 'ReportLiveObjects'
};
// --------------------------------------------------------
// Type: IDXGIDebug1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDXGIDebug1 = *opaque{
    // TODO: Method 'EnableLeakTrackingForThread'
    // TODO: Method 'DisableLeakTrackingForThread'
    // TODO: Method 'IsLeakTrackingEnabledForThread'
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "dxgi" fn CreateDXGIFactory(
    riid: ?*Guid,
    ppFactory: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dxgi" fn CreateDXGIFactory1(
    riid: ?*Guid,
    ppFactory: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dxgi" fn CreateDXGIFactory2(
    Flags: u32,
    riid: ?*Guid,
    ppFactory: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dxgi" fn DXGIGetDebugInterface1(
    Flags: u32,
    riid: ?*Guid,
    pDebug: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dxgi" fn DXGIDeclareAdapterRemovalSupport(
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("systemservices.zig").BOOL;
const LARGE_INTEGER = @import("systemservices.zig").LARGE_INTEGER;
const LUID = @import("kernel.zig").LUID;
const RECT = @import("displaydevices.zig").RECT;
const HANDLE = @import("systemservices.zig").HANDLE;
const HWND = @import("windowsandmessaging.zig").HWND;
const POINT = @import("displaydevices.zig").POINT;
const HRESULT = @import("com.zig").HRESULT;

test "" {
    const constant_export_count = 31;
    const type_export_count = 118;
    const func_count = 5;
    const unicode_alias_count = 0;
    const type_import_count = 9;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
