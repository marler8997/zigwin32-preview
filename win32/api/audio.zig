//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//
pub const DSFXR_PRESENT : i32 = 0;
pub const DSFXR_LOCHARDWARE : i32 = 1;
pub const DSFXR_LOCSOFTWARE : i32 = 2;
pub const DSFXR_UNALLOCATED : i32 = 3;
pub const DSFXR_FAILED : i32 = 4;
pub const DSFXR_UNKNOWN : i32 = 5;
pub const DSFXR_SENDLOOP : i32 = 6;
pub const DSFX_I3DL2_MATERIAL_PRESET_SINGLEWINDOW : i32 = 0;
pub const DSFX_I3DL2_MATERIAL_PRESET_DOUBLEWINDOW : i32 = 1;
pub const DSFX_I3DL2_MATERIAL_PRESET_THINDOOR : i32 = 2;
pub const DSFX_I3DL2_MATERIAL_PRESET_THICKDOOR : i32 = 3;
pub const DSFX_I3DL2_MATERIAL_PRESET_WOODWALL : i32 = 4;
pub const DSFX_I3DL2_MATERIAL_PRESET_BRICKWALL : i32 = 5;
pub const DSFX_I3DL2_MATERIAL_PRESET_STONEWALL : i32 = 6;
pub const DSFX_I3DL2_MATERIAL_PRESET_CURTAIN : i32 = 7;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_DEFAULT : i32 = 0;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_GENERIC : i32 = 1;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_PADDEDCELL : i32 = 2;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_ROOM : i32 = 3;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_BATHROOM : i32 = 4;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_LIVINGROOM : i32 = 5;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_STONEROOM : i32 = 6;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_AUDITORIUM : i32 = 7;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_CONCERTHALL : i32 = 8;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_CAVE : i32 = 9;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_ARENA : i32 = 10;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_HANGAR : i32 = 11;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_CARPETEDHALLWAY : i32 = 12;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_HALLWAY : i32 = 13;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_STONECORRIDOR : i32 = 14;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_ALLEY : i32 = 15;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_FOREST : i32 = 16;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_CITY : i32 = 17;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_MOUNTAINS : i32 = 18;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_QUARRY : i32 = 19;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_PLAIN : i32 = 20;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_PARKINGLOT : i32 = 21;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_SEWERPIPE : i32 = 22;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_UNDERWATER : i32 = 23;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_SMALLROOM : i32 = 24;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_MEDIUMROOM : i32 = 25;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_LARGEROOM : i32 = 26;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_MEDIUMHALL : i32 = 27;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_LARGEHALL : i32 = 28;
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_PLATE : i32 = 29;

//
// types
//
// --------------------------------------------------------
// Type: UNCOMPRESSEDAUDIOFORMAT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UNCOMPRESSEDAUDIOFORMAT = extern struct {
    guidFormatType: Guid,
    dwSamplesPerFrame: u32,
    dwBytesPerSampleContainer: u32,
    dwValidBitsPerSample: u32,
    fFramesPerSecond: f32,
    dwChannelMask: u32,
};
// --------------------------------------------------------
// Type: IAudioMediaType
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAudioMediaType = *opaque{
    // TODO: Method 'IsCompressedFormat'
    // TODO: Method 'IsEqual'
    // TODO: Method 'GetAudioFormat'
    // TODO: Method 'GetUncompressedAudioFormat'
};
// --------------------------------------------------------
// Type: APO_CONNECTION_BUFFER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const APO_CONNECTION_BUFFER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: APO_CONNECTION_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const APO_CONNECTION_DESCRIPTOR = extern struct {
    Type: APO_CONNECTION_BUFFER_TYPE,
    pBuffer: ?*opaque{},
    u32MaxFrameCount: u32,
    pFormat: IAudioMediaType,
    u32Signature: u32,
};
// --------------------------------------------------------
// Type: APO_FLAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const APO_FLAG = *opaque{
};
// --------------------------------------------------------
// Type: APO_REG_PROPERTIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const APO_REG_PROPERTIES = extern struct {
    clsid: Guid,
    Flags: APO_FLAG,
    szFriendlyName: ?[*]u16,
    szCopyrightInfo: ?[*]u16,
    u32MajorVersion: u32,
    u32MinorVersion: u32,
    u32MinInputConnections: u32,
    u32MaxInputConnections: u32,
    u32MinOutputConnections: u32,
    u32MaxOutputConnections: u32,
    u32MaxInstances: u32,
    u32NumAPOInterfaces: u32,
    iidAPOInterfaceList: ?[*]Guid,
};
// --------------------------------------------------------
// Type: APOInitBaseStruct
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const APOInitBaseStruct = extern struct {
    cbSize: u32,
    clsid: Guid,
};
// --------------------------------------------------------
// Type: AUDIO_FLOW_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AUDIO_FLOW_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: EAudioConstriction
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EAudioConstriction = *opaque{
};
// --------------------------------------------------------
// Type: IAudioProcessingObjectRT
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAudioProcessingObjectRT = *opaque{
    // TODO: Method 'APOProcess'
    // TODO: Method 'CalcInputFrames'
    // TODO: Method 'CalcOutputFrames'
};
// --------------------------------------------------------
// Type: IAudioProcessingObjectVBR
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAudioProcessingObjectVBR = *opaque{
    // TODO: Method 'CalcMaxInputFrames'
    // TODO: Method 'CalcMaxOutputFrames'
};
// --------------------------------------------------------
// Type: IAudioProcessingObjectConfiguration
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAudioProcessingObjectConfiguration = *opaque{
    // TODO: Method 'LockForProcess'
    // TODO: Method 'UnlockForProcess'
};
// --------------------------------------------------------
// Type: IAudioProcessingObject
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAudioProcessingObject = *opaque{
    // TODO: Method 'Reset'
    // TODO: Method 'GetLatency'
    // TODO: Method 'GetRegistrationProperties'
    // TODO: Method 'Initialize'
    // TODO: Method 'IsInputFormatSupported'
    // TODO: Method 'IsOutputFormatSupported'
    // TODO: Method 'GetInputChannelCount'
};
// --------------------------------------------------------
// Type: IAudioDeviceModulesClient
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAudioDeviceModulesClient = *opaque{
    // TODO: Method 'SetAudioDeviceModulesManager'
};
// --------------------------------------------------------
// Type: FNAPONOTIFICATIONCALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FNAPONOTIFICATIONCALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: IAudioSystemEffects
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAudioSystemEffects = *opaque{
};
// --------------------------------------------------------
// Type: IAudioSystemEffects2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAudioSystemEffects2 = *opaque{
    // TODO: Method 'GetEffectsList'
};
// --------------------------------------------------------
// Type: IAudioSystemEffectsCustomFormats
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAudioSystemEffectsCustomFormats = *opaque{
    // TODO: Method 'GetFormatCount'
    // TODO: Method 'GetFormat'
    // TODO: Method 'GetFormatRepresentation'
};
// --------------------------------------------------------
// Type: APOInitSystemEffects
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const APOInitSystemEffects = extern struct {
    APOInit: APOInitBaseStruct,
    pAPOEndpointProperties: IPropertyStore,
    pAPOSystemEffectsProperties: IPropertyStore,
    pReserved: ?*opaque{},
    pDeviceCollection: IMMDeviceCollection,
};
// --------------------------------------------------------
// Type: APOInitSystemEffects2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const APOInitSystemEffects2 = extern struct {
    APOInit: APOInitBaseStruct,
    pAPOEndpointProperties: IPropertyStore,
    pAPOSystemEffectsProperties: IPropertyStore,
    pReserved: ?*opaque{},
    pDeviceCollection: IMMDeviceCollection,
    nSoftwareIoDeviceInCollection: u32,
    nSoftwareIoConnectorIndex: u32,
    AudioProcessingMode: Guid,
    InitializeForDiscoveryOnly: BOOL,
};
// --------------------------------------------------------
// Type: AudioFXExtensionParams
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AudioFXExtensionParams = extern struct {
    AddPageParam: LPARAM,
    pwstrEndpointID: ?*u16,
    pFxProperties: IPropertyStore,
};
// --------------------------------------------------------
// Type: DLSID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DLSID = extern struct {
    ulData1: u32,
    usData2: u16,
    usData3: u16,
    abData4: ?[*]u8,
};
// --------------------------------------------------------
// Type: DLSVERSION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DLSVERSION = extern struct {
    dwVersionMS: u32,
    dwVersionLS: u32,
};
// --------------------------------------------------------
// Type: CONNECTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CONNECTION = extern struct {
    usSource: u16,
    usControl: u16,
    usDestination: u16,
    usTransform: u16,
    lScale: i32,
};
// --------------------------------------------------------
// Type: CONNECTIONLIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CONNECTIONLIST = extern struct {
    cbSize: u32,
    cConnections: u32,
};
// --------------------------------------------------------
// Type: RGNRANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RGNRANGE = extern struct {
    usLow: u16,
    usHigh: u16,
};
// --------------------------------------------------------
// Type: MIDILOCALE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MIDILOCALE = extern struct {
    ulBank: u32,
    ulInstrument: u32,
};
// --------------------------------------------------------
// Type: RGNHEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RGNHEADER = extern struct {
    RangeKey: RGNRANGE,
    RangeVelocity: RGNRANGE,
    fusOptions: u16,
    usKeyGroup: u16,
};
// --------------------------------------------------------
// Type: INSTHEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INSTHEADER = extern struct {
    cRegions: u32,
    Locale: MIDILOCALE,
};
// --------------------------------------------------------
// Type: DLSHEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DLSHEADER = extern struct {
    cInstruments: u32,
};
// --------------------------------------------------------
// Type: WAVELINK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WAVELINK = extern struct {
    fusOptions: u16,
    usPhaseGroup: u16,
    ulChannel: u32,
    ulTableIndex: u32,
};
// --------------------------------------------------------
// Type: POOLCUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POOLCUE = extern struct {
    ulOffset: u32,
};
// --------------------------------------------------------
// Type: POOLTABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POOLTABLE = extern struct {
    cbSize: u32,
    cCues: u32,
};
// --------------------------------------------------------
// Type: _rwsmp
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _rwsmp = extern struct {
    cbSize: u32,
    usUnityNote: u16,
    sFineTune: i16,
    lAttenuation: i32,
    fulOptions: u32,
    cSampleLoops: u32,
};
// --------------------------------------------------------
// Type: _rloop
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _rloop = extern struct {
    cbSize: u32,
    ulType: u32,
    ulStart: u32,
    ulLength: u32,
};
// --------------------------------------------------------
// Type: DMUS_DOWNLOADINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DMUS_DOWNLOADINFO = extern struct {
    dwDLType: u32,
    dwDLId: u32,
    dwNumOffsetTableEntries: u32,
    cbSize: u32,
};
// --------------------------------------------------------
// Type: DMUS_OFFSETTABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DMUS_OFFSETTABLE = extern struct {
    ulOffsetTable: ?[*]u32,
};
// --------------------------------------------------------
// Type: DMUS_INSTRUMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DMUS_INSTRUMENT = extern struct {
    ulPatch: u32,
    ulFirstRegionIdx: u32,
    ulGlobalArtIdx: u32,
    ulFirstExtCkIdx: u32,
    ulCopyrightIdx: u32,
    ulFlags: u32,
};
// --------------------------------------------------------
// Type: DMUS_REGION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DMUS_REGION = extern struct {
    RangeKey: RGNRANGE,
    RangeVelocity: RGNRANGE,
    fusOptions: u16,
    usKeyGroup: u16,
    ulRegionArtIdx: u32,
    ulNextRegionIdx: u32,
    ulFirstExtCkIdx: u32,
    WaveLink: WAVELINK,
    WSMP: _rwsmp,
    WLOOP: ?[*]_rloop,
};
// --------------------------------------------------------
// Type: DMUS_LFOPARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DMUS_LFOPARAMS = extern struct {
    pcFrequency: i32,
    tcDelay: i32,
    gcVolumeScale: i32,
    pcPitchScale: i32,
    gcMWToVolume: i32,
    pcMWToPitch: i32,
};
// --------------------------------------------------------
// Type: DMUS_VEGPARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DMUS_VEGPARAMS = extern struct {
    tcAttack: i32,
    tcDecay: i32,
    ptSustain: i32,
    tcRelease: i32,
    tcVel2Attack: i32,
    tcKey2Decay: i32,
};
// --------------------------------------------------------
// Type: DMUS_PEGPARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DMUS_PEGPARAMS = extern struct {
    tcAttack: i32,
    tcDecay: i32,
    ptSustain: i32,
    tcRelease: i32,
    tcVel2Attack: i32,
    tcKey2Decay: i32,
    pcRange: i32,
};
// --------------------------------------------------------
// Type: DMUS_MSCPARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DMUS_MSCPARAMS = extern struct {
    ptDefaultPan: i32,
};
// --------------------------------------------------------
// Type: DMUS_ARTICPARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DMUS_ARTICPARAMS = extern struct {
    LFO: DMUS_LFOPARAMS,
    VolEG: DMUS_VEGPARAMS,
    PitchEG: DMUS_PEGPARAMS,
    Misc: DMUS_MSCPARAMS,
};
// --------------------------------------------------------
// Type: DMUS_ARTICULATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DMUS_ARTICULATION = extern struct {
    ulArt1Idx: u32,
    ulFirstExtCkIdx: u32,
};
// --------------------------------------------------------
// Type: DMUS_ARTICULATION2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DMUS_ARTICULATION2 = extern struct {
    ulArtIdx: u32,
    ulFirstExtCkIdx: u32,
    ulNextArtIdx: u32,
};
// --------------------------------------------------------
// Type: DMUS_EXTENSIONCHUNK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DMUS_EXTENSIONCHUNK = extern struct {
    cbSize: u32,
    ulNextExtCkIdx: u32,
    ExtCkID: u32,
    byExtCk: ?[*]u8,
};
// --------------------------------------------------------
// Type: DMUS_COPYRIGHT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DMUS_COPYRIGHT = extern struct {
    cbSize: u32,
    byCopyright: ?[*]u8,
};
// --------------------------------------------------------
// Type: DMUS_WAVEDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DMUS_WAVEDATA = extern struct {
    cbSize: u32,
    byData: ?[*]u8,
};
// --------------------------------------------------------
// Type: DMUS_WAVE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DMUS_WAVE = extern struct {
    ulFirstExtCkIdx: u32,
    ulCopyrightIdx: u32,
    ulWaveDataIdx: u32,
    WaveformatEx: WAVEFORMATEX,
};
// --------------------------------------------------------
// Type: DMUS_NOTERANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DMUS_NOTERANGE = extern struct {
    dwLowNote: u32,
    dwHighNote: u32,
};
// --------------------------------------------------------
// Type: DMUS_WAVEARTDL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DMUS_WAVEARTDL = extern struct {
    ulDownloadIdIdx: u32,
    ulBus: u32,
    ulBuffers: u32,
    ulMasterDLId: u32,
    usOptions: u16,
};
// --------------------------------------------------------
// Type: DMUS_WAVEDL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DMUS_WAVEDL = extern struct {
    cbWaveData: u32,
};
// --------------------------------------------------------
// Type: DSCAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSCAPS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwMinSecondarySampleRate: u32,
    dwMaxSecondarySampleRate: u32,
    dwPrimaryBuffers: u32,
    dwMaxHwMixingAllBuffers: u32,
    dwMaxHwMixingStaticBuffers: u32,
    dwMaxHwMixingStreamingBuffers: u32,
    dwFreeHwMixingAllBuffers: u32,
    dwFreeHwMixingStaticBuffers: u32,
    dwFreeHwMixingStreamingBuffers: u32,
    dwMaxHw3DAllBuffers: u32,
    dwMaxHw3DStaticBuffers: u32,
    dwMaxHw3DStreamingBuffers: u32,
    dwFreeHw3DAllBuffers: u32,
    dwFreeHw3DStaticBuffers: u32,
    dwFreeHw3DStreamingBuffers: u32,
    dwTotalHwMemBytes: u32,
    dwFreeHwMemBytes: u32,
    dwMaxContigFreeHwMemBytes: u32,
    dwUnlockTransferRateHwBuffers: u32,
    dwPlayCpuOverheadSwBuffers: u32,
    dwReserved1: u32,
    dwReserved2: u32,
};
// --------------------------------------------------------
// Type: DSBCAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSBCAPS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwBufferBytes: u32,
    dwUnlockTransferRate: u32,
    dwPlayCpuOverhead: u32,
};
// --------------------------------------------------------
// Type: DSEFFECTDESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSEFFECTDESC = extern struct {
    dwSize: u32,
    dwFlags: u32,
    guidDSFXClass: Guid,
    dwReserved1: ?*opaque{},
    dwReserved2: ?*opaque{},
};
// --------------------------------------------------------
// Type: DSCEFFECTDESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSCEFFECTDESC = extern struct {
    dwSize: u32,
    dwFlags: u32,
    guidDSCFXClass: Guid,
    guidDSCFXInstance: Guid,
    dwReserved1: u32,
    dwReserved2: u32,
};
// --------------------------------------------------------
// Type: DSBUFFERDESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSBUFFERDESC = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwBufferBytes: u32,
    dwReserved: u32,
    lpwfxFormat: ?*WAVEFORMATEX,
    guid3DAlgorithm: Guid,
};
// --------------------------------------------------------
// Type: DSBUFFERDESC1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSBUFFERDESC1 = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwBufferBytes: u32,
    dwReserved: u32,
    lpwfxFormat: ?*WAVEFORMATEX,
};
// --------------------------------------------------------
// Type: DS3DBUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS3DBUFFER = extern struct {
    dwSize: u32,
    vPosition: D3DVECTOR,
    vVelocity: D3DVECTOR,
    dwInsideConeAngle: u32,
    dwOutsideConeAngle: u32,
    vConeOrientation: D3DVECTOR,
    lConeOutsideVolume: i32,
    flMinDistance: f32,
    flMaxDistance: f32,
    dwMode: u32,
};
// --------------------------------------------------------
// Type: DS3DLISTENER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DS3DLISTENER = extern struct {
    dwSize: u32,
    vPosition: D3DVECTOR,
    vVelocity: D3DVECTOR,
    vOrientFront: D3DVECTOR,
    vOrientTop: D3DVECTOR,
    flDistanceFactor: f32,
    flRolloffFactor: f32,
    flDopplerFactor: f32,
};
// --------------------------------------------------------
// Type: DSCCAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSCCAPS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwFormats: u32,
    dwChannels: u32,
};
// --------------------------------------------------------
// Type: DSCBUFFERDESC1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSCBUFFERDESC1 = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwBufferBytes: u32,
    dwReserved: u32,
    lpwfxFormat: ?*WAVEFORMATEX,
};
// --------------------------------------------------------
// Type: DSCBUFFERDESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSCBUFFERDESC = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwBufferBytes: u32,
    dwReserved: u32,
    lpwfxFormat: ?*WAVEFORMATEX,
    dwFXCount: u32,
    lpDSCFXDesc: ?*DSCEFFECTDESC,
};
// --------------------------------------------------------
// Type: DSCBCAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSCBCAPS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwBufferBytes: u32,
    dwReserved: u32,
};
// --------------------------------------------------------
// Type: DSBPOSITIONNOTIFY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSBPOSITIONNOTIFY = extern struct {
    dwOffset: u32,
    hEventNotify: HANDLE,
};
// --------------------------------------------------------
// Type: LPDSENUMCALLBACKA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDSENUMCALLBACKA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPDSENUMCALLBACKW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPDSENUMCALLBACKW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: IDirectSound
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectSound = *opaque{
    // TODO: Method 'CreateSoundBuffer'
    // TODO: Method 'GetCaps'
    // TODO: Method 'DuplicateSoundBuffer'
    // TODO: Method 'SetCooperativeLevel'
    // TODO: Method 'Compact'
    // TODO: Method 'GetSpeakerConfig'
    // TODO: Method 'SetSpeakerConfig'
    // TODO: Method 'Initialize'
};
// --------------------------------------------------------
// Type: IDirectSound8
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectSound8 = *opaque{
    // TODO: Method 'VerifyCertification'
};
// --------------------------------------------------------
// Type: IDirectSoundBuffer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectSoundBuffer = *opaque{
    // TODO: Method 'GetCaps'
    // TODO: Method 'GetCurrentPosition'
    // TODO: Method 'GetFormat'
    // TODO: Method 'GetVolume'
    // TODO: Method 'GetPan'
    // TODO: Method 'GetFrequency'
    // TODO: Method 'GetStatus'
    // TODO: Method 'Initialize'
    // TODO: Method 'Lock'
    // TODO: Method 'Play'
    // TODO: Method 'SetCurrentPosition'
    // TODO: Method 'SetFormat'
    // TODO: Method 'SetVolume'
    // TODO: Method 'SetPan'
    // TODO: Method 'SetFrequency'
    // TODO: Method 'Stop'
    // TODO: Method 'Unlock'
    // TODO: Method 'Restore'
};
// --------------------------------------------------------
// Type: IDirectSoundBuffer8
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectSoundBuffer8 = *opaque{
    // TODO: Method 'SetFX'
    // TODO: Method 'AcquireResources'
    // TODO: Method 'GetObjectInPath'
};
// --------------------------------------------------------
// Type: IDirectSound3DListener
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectSound3DListener = *opaque{
    // TODO: Method 'GetAllParameters'
    // TODO: Method 'GetDistanceFactor'
    // TODO: Method 'GetDopplerFactor'
    // TODO: Method 'GetOrientation'
    // TODO: Method 'GetPosition'
    // TODO: Method 'GetRolloffFactor'
    // TODO: Method 'GetVelocity'
    // TODO: Method 'SetAllParameters'
    // TODO: Method 'SetDistanceFactor'
    // TODO: Method 'SetDopplerFactor'
    // TODO: Method 'SetOrientation'
    // TODO: Method 'SetPosition'
    // TODO: Method 'SetRolloffFactor'
    // TODO: Method 'SetVelocity'
    // TODO: Method 'CommitDeferredSettings'
};
// --------------------------------------------------------
// Type: IDirectSound3DBuffer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectSound3DBuffer = *opaque{
    // TODO: Method 'GetAllParameters'
    // TODO: Method 'GetConeAngles'
    // TODO: Method 'GetConeOrientation'
    // TODO: Method 'GetConeOutsideVolume'
    // TODO: Method 'GetMaxDistance'
    // TODO: Method 'GetMinDistance'
    // TODO: Method 'GetMode'
    // TODO: Method 'GetPosition'
    // TODO: Method 'GetVelocity'
    // TODO: Method 'SetAllParameters'
    // TODO: Method 'SetConeAngles'
    // TODO: Method 'SetConeOrientation'
    // TODO: Method 'SetConeOutsideVolume'
    // TODO: Method 'SetMaxDistance'
    // TODO: Method 'SetMinDistance'
    // TODO: Method 'SetMode'
    // TODO: Method 'SetPosition'
    // TODO: Method 'SetVelocity'
};
// --------------------------------------------------------
// Type: IDirectSoundCapture
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectSoundCapture = *opaque{
    // TODO: Method 'CreateCaptureBuffer'
    // TODO: Method 'GetCaps'
    // TODO: Method 'Initialize'
};
// --------------------------------------------------------
// Type: IDirectSoundCaptureBuffer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectSoundCaptureBuffer = *opaque{
    // TODO: Method 'GetCaps'
    // TODO: Method 'GetCurrentPosition'
    // TODO: Method 'GetFormat'
    // TODO: Method 'GetStatus'
    // TODO: Method 'Initialize'
    // TODO: Method 'Lock'
    // TODO: Method 'Start'
    // TODO: Method 'Stop'
    // TODO: Method 'Unlock'
};
// --------------------------------------------------------
// Type: IDirectSoundCaptureBuffer8
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectSoundCaptureBuffer8 = *opaque{
    // TODO: Method 'GetObjectInPath'
    // TODO: Method 'GetFXStatus'
};
// --------------------------------------------------------
// Type: IDirectSoundNotify
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectSoundNotify = *opaque{
    // TODO: Method 'SetNotificationPositions'
};
// --------------------------------------------------------
// Type: DSFXGargle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSFXGargle = extern struct {
    dwRateHz: u32,
    dwWaveShape: u32,
};
// --------------------------------------------------------
// Type: IDirectSoundFXGargle
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectSoundFXGargle = *opaque{
    // TODO: Method 'SetAllParameters'
    // TODO: Method 'GetAllParameters'
};
// --------------------------------------------------------
// Type: DSFXChorus
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSFXChorus = extern struct {
    fWetDryMix: f32,
    fDepth: f32,
    fFeedback: f32,
    fFrequency: f32,
    lWaveform: i32,
    fDelay: f32,
    lPhase: i32,
};
// --------------------------------------------------------
// Type: IDirectSoundFXChorus
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectSoundFXChorus = *opaque{
    // TODO: Method 'SetAllParameters'
    // TODO: Method 'GetAllParameters'
};
// --------------------------------------------------------
// Type: DSFXFlanger
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSFXFlanger = extern struct {
    fWetDryMix: f32,
    fDepth: f32,
    fFeedback: f32,
    fFrequency: f32,
    lWaveform: i32,
    fDelay: f32,
    lPhase: i32,
};
// --------------------------------------------------------
// Type: IDirectSoundFXFlanger
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectSoundFXFlanger = *opaque{
    // TODO: Method 'SetAllParameters'
    // TODO: Method 'GetAllParameters'
};
// --------------------------------------------------------
// Type: DSFXEcho
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSFXEcho = extern struct {
    fWetDryMix: f32,
    fFeedback: f32,
    fLeftDelay: f32,
    fRightDelay: f32,
    lPanDelay: i32,
};
// --------------------------------------------------------
// Type: IDirectSoundFXEcho
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectSoundFXEcho = *opaque{
    // TODO: Method 'SetAllParameters'
    // TODO: Method 'GetAllParameters'
};
// --------------------------------------------------------
// Type: DSFXDistortion
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSFXDistortion = extern struct {
    fGain: f32,
    fEdge: f32,
    fPostEQCenterFrequency: f32,
    fPostEQBandwidth: f32,
    fPreLowpassCutoff: f32,
};
// --------------------------------------------------------
// Type: IDirectSoundFXDistortion
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectSoundFXDistortion = *opaque{
    // TODO: Method 'SetAllParameters'
    // TODO: Method 'GetAllParameters'
};
// --------------------------------------------------------
// Type: DSFXCompressor
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSFXCompressor = extern struct {
    fGain: f32,
    fAttack: f32,
    fRelease: f32,
    fThreshold: f32,
    fRatio: f32,
    fPredelay: f32,
};
// --------------------------------------------------------
// Type: IDirectSoundFXCompressor
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectSoundFXCompressor = *opaque{
    // TODO: Method 'SetAllParameters'
    // TODO: Method 'GetAllParameters'
};
// --------------------------------------------------------
// Type: DSFXParamEq
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSFXParamEq = extern struct {
    fCenter: f32,
    fBandwidth: f32,
    fGain: f32,
};
// --------------------------------------------------------
// Type: IDirectSoundFXParamEq
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectSoundFXParamEq = *opaque{
    // TODO: Method 'SetAllParameters'
    // TODO: Method 'GetAllParameters'
};
// --------------------------------------------------------
// Type: DSFXI3DL2Reverb
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSFXI3DL2Reverb = extern struct {
    lRoom: i32,
    lRoomHF: i32,
    flRoomRolloffFactor: f32,
    flDecayTime: f32,
    flDecayHFRatio: f32,
    lReflections: i32,
    flReflectionsDelay: f32,
    lReverb: i32,
    flReverbDelay: f32,
    flDiffusion: f32,
    flDensity: f32,
    flHFReference: f32,
};
// --------------------------------------------------------
// Type: IDirectSoundFXI3DL2Reverb
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectSoundFXI3DL2Reverb = *opaque{
    // TODO: Method 'SetAllParameters'
    // TODO: Method 'GetAllParameters'
    // TODO: Method 'SetPreset'
    // TODO: Method 'GetPreset'
    // TODO: Method 'SetQuality'
    // TODO: Method 'GetQuality'
};
// --------------------------------------------------------
// Type: DSFXWavesReverb
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSFXWavesReverb = extern struct {
    fInGain: f32,
    fReverbMix: f32,
    fReverbTime: f32,
    fHighFreqRTRatio: f32,
};
// --------------------------------------------------------
// Type: IDirectSoundFXWavesReverb
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectSoundFXWavesReverb = *opaque{
    // TODO: Method 'SetAllParameters'
    // TODO: Method 'GetAllParameters'
};
// --------------------------------------------------------
// Type: DSCFXAec
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSCFXAec = extern struct {
    fEnable: BOOL,
    fNoiseFill: BOOL,
    dwMode: u32,
};
// --------------------------------------------------------
// Type: IDirectSoundCaptureFXAec
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectSoundCaptureFXAec = *opaque{
    // TODO: Method 'SetAllParameters'
    // TODO: Method 'GetAllParameters'
    // TODO: Method 'GetStatus'
    // TODO: Method 'Reset'
};
// --------------------------------------------------------
// Type: DSCFXNoiseSuppress
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSCFXNoiseSuppress = extern struct {
    fEnable: BOOL,
};
// --------------------------------------------------------
// Type: IDirectSoundCaptureFXNoiseSuppress
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectSoundCaptureFXNoiseSuppress = *opaque{
    // TODO: Method 'SetAllParameters'
    // TODO: Method 'GetAllParameters'
    // TODO: Method 'Reset'
};
// --------------------------------------------------------
// Type: IDirectSoundFullDuplex
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectSoundFullDuplex = *opaque{
    // TODO: Method 'Initialize'
};
// --------------------------------------------------------
// Type: DMUS_EVENTHEADER
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const DMUS_EVENTHEADER = *opaque{
};
// --------------------------------------------------------
// Type: DMUS_BUFFERDESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DMUS_BUFFERDESC = extern struct {
    dwSize: u32,
    dwFlags: u32,
    guidBufferFormat: Guid,
    cbBuffer: u32,
};
// --------------------------------------------------------
// Type: DMUS_PORTCAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DMUS_PORTCAPS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    guidPort: Guid,
    dwClass: u32,
    dwType: u32,
    dwMemorySize: u32,
    dwMaxChannelGroups: u32,
    dwMaxVoices: u32,
    dwMaxAudioChannels: u32,
    dwEffectFlags: u32,
    wszDescription: ?[*]u16,
};
// --------------------------------------------------------
// Type: _DMUS_PORTPARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _DMUS_PORTPARAMS = extern struct {
    dwSize: u32,
    dwValidParams: u32,
    dwVoices: u32,
    dwChannelGroups: u32,
    dwAudioChannels: u32,
    dwSampleRate: u32,
    dwEffectFlags: u32,
    fShare: BOOL,
};
// --------------------------------------------------------
// Type: DMUS_PORTPARAMS8
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DMUS_PORTPARAMS8 = extern struct {
    dwSize: u32,
    dwValidParams: u32,
    dwVoices: u32,
    dwChannelGroups: u32,
    dwAudioChannels: u32,
    dwSampleRate: u32,
    dwEffectFlags: u32,
    fShare: BOOL,
    dwFeatures: u32,
};
// --------------------------------------------------------
// Type: DMUS_SYNTHSTATS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DMUS_SYNTHSTATS = extern struct {
    dwSize: u32,
    dwValidStats: u32,
    dwVoices: u32,
    dwTotalCPU: u32,
    dwCPUPerVoice: u32,
    dwLostNotes: u32,
    dwFreeMemory: u32,
    lPeakVolume: i32,
};
// --------------------------------------------------------
// Type: DMUS_SYNTHSTATS8
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DMUS_SYNTHSTATS8 = extern struct {
    dwSize: u32,
    dwValidStats: u32,
    dwVoices: u32,
    dwTotalCPU: u32,
    dwCPUPerVoice: u32,
    dwLostNotes: u32,
    dwFreeMemory: u32,
    lPeakVolume: i32,
    dwSynthMemUse: u32,
};
// --------------------------------------------------------
// Type: DMUS_WAVES_REVERB_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DMUS_WAVES_REVERB_PARAMS = extern struct {
    fInGain: f32,
    fReverbMix: f32,
    fReverbTime: f32,
    fHighFreqRTRatio: f32,
};
// --------------------------------------------------------
// Type: DMUS_CLOCKTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DMUS_CLOCKTYPE = *opaque{
};
// --------------------------------------------------------
// Type: DMUS_CLOCKINFO7
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DMUS_CLOCKINFO7 = extern struct {
    dwSize: u32,
    ctType: DMUS_CLOCKTYPE,
    guidClock: Guid,
    wszDescription: ?[*]u16,
};
// --------------------------------------------------------
// Type: DMUS_CLOCKINFO8
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DMUS_CLOCKINFO8 = extern struct {
    dwSize: u32,
    ctType: DMUS_CLOCKTYPE,
    guidClock: Guid,
    wszDescription: ?[*]u16,
    dwFlags: u32,
};
// --------------------------------------------------------
// Type: IDirectMusic
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectMusic = *opaque{
    // TODO: Method 'EnumPort'
    // TODO: Method 'CreateMusicBuffer'
    // TODO: Method 'CreatePort'
    // TODO: Method 'EnumMasterClock'
    // TODO: Method 'GetMasterClock'
    // TODO: Method 'SetMasterClock'
    // TODO: Method 'Activate'
    // TODO: Method 'GetDefaultPort'
    // TODO: Method 'SetDirectSound'
};
// --------------------------------------------------------
// Type: IDirectMusic8
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectMusic8 = *opaque{
    // TODO: Method 'SetExternalMasterClock'
};
// --------------------------------------------------------
// Type: IDirectMusicBuffer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectMusicBuffer = *opaque{
    // TODO: Method 'Flush'
    // TODO: Method 'TotalTime'
    // TODO: Method 'PackStructured'
    // TODO: Method 'PackUnstructured'
    // TODO: Method 'ResetReadPtr'
    // TODO: Method 'GetNextEvent'
    // TODO: Method 'GetRawBufferPtr'
    // TODO: Method 'GetStartTime'
    // TODO: Method 'GetUsedBytes'
    // TODO: Method 'GetMaxBytes'
    // TODO: Method 'GetBufferFormat'
    // TODO: Method 'SetStartTime'
    // TODO: Method 'SetUsedBytes'
};
// --------------------------------------------------------
// Type: IDirectMusicInstrument
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectMusicInstrument = *opaque{
    // TODO: Method 'GetPatch'
    // TODO: Method 'SetPatch'
};
// --------------------------------------------------------
// Type: IDirectMusicDownloadedInstrument
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectMusicDownloadedInstrument = *opaque{
};
// --------------------------------------------------------
// Type: IDirectMusicCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectMusicCollection = *opaque{
    // TODO: Method 'GetInstrument'
    // TODO: Method 'EnumInstrument'
};
// --------------------------------------------------------
// Type: IDirectMusicDownload
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectMusicDownload = *opaque{
    // TODO: Method 'GetBuffer'
};
// --------------------------------------------------------
// Type: IDirectMusicPortDownload
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectMusicPortDownload = *opaque{
    // TODO: Method 'GetBuffer'
    // TODO: Method 'AllocateBuffer'
    // TODO: Method 'GetDLId'
    // TODO: Method 'GetAppend'
    // TODO: Method 'Download'
    // TODO: Method 'Unload'
};
// --------------------------------------------------------
// Type: IDirectMusicPort
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectMusicPort = *opaque{
    // TODO: Method 'PlayBuffer'
    // TODO: Method 'SetReadNotificationHandle'
    // TODO: Method 'Read'
    // TODO: Method 'DownloadInstrument'
    // TODO: Method 'UnloadInstrument'
    // TODO: Method 'GetLatencyClock'
    // TODO: Method 'GetRunningStats'
    // TODO: Method 'Compact'
    // TODO: Method 'GetCaps'
    // TODO: Method 'DeviceIoControl'
    // TODO: Method 'SetNumChannelGroups'
    // TODO: Method 'GetNumChannelGroups'
    // TODO: Method 'Activate'
    // TODO: Method 'SetChannelPriority'
    // TODO: Method 'GetChannelPriority'
    // TODO: Method 'SetDirectSound'
    // TODO: Method 'GetFormat'
};
// --------------------------------------------------------
// Type: IDirectMusicThru
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectMusicThru = *opaque{
    // TODO: Method 'ThruChannel'
};
// --------------------------------------------------------
// Type: DMUS_VOICE_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DMUS_VOICE_STATE = extern struct {
    bExists: BOOL,
    spPosition: u64,
};
// --------------------------------------------------------
// Type: IDirectMusicSynth
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectMusicSynth = *opaque{
    // TODO: Method 'Open'
    // TODO: Method 'Close'
    // TODO: Method 'SetNumChannelGroups'
    // TODO: Method 'Download'
    // TODO: Method 'Unload'
    // TODO: Method 'PlayBuffer'
    // TODO: Method 'GetRunningStats'
    // TODO: Method 'GetPortCaps'
    // TODO: Method 'SetMasterClock'
    // TODO: Method 'GetLatencyClock'
    // TODO: Method 'Activate'
    // TODO: Method 'SetSynthSink'
    // TODO: Method 'Render'
    // TODO: Method 'SetChannelPriority'
    // TODO: Method 'GetChannelPriority'
    // TODO: Method 'GetFormat'
    // TODO: Method 'GetAppend'
};
// --------------------------------------------------------
// Type: IDirectMusicSynth8
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectMusicSynth8 = *opaque{
    // TODO: Method 'PlayVoice'
    // TODO: Method 'StopVoice'
    // TODO: Method 'GetVoiceState'
    // TODO: Method 'Refresh'
    // TODO: Method 'AssignChannelToBuses'
};
// --------------------------------------------------------
// Type: IDirectMusicSynthSink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDirectMusicSynthSink = *opaque{
    // TODO: Method 'Init'
    // TODO: Method 'SetMasterClock'
    // TODO: Method 'GetLatencyClock'
    // TODO: Method 'Activate'
    // TODO: Method 'SampleToRefTime'
    // TODO: Method 'RefTimeToSample'
    // TODO: Method 'SetDirectSound'
    // TODO: Method 'GetDesiredBufferSize'
};
// --------------------------------------------------------
// Type: KSPROPSETID_AudioEffectsDiscovery
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const KSPROPSETID_AudioEffectsDiscovery = opaque {
};
// --------------------------------------------------------
// Type: KSPROPERTY_AUDIOEFFECTSDISCOVERY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KSPROPERTY_AUDIOEFFECTSDISCOVERY = *opaque{
};
// --------------------------------------------------------
// Type: KSP_PINMODE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KSP_PINMODE = extern struct {
    PinProperty: KSP_PIN,
    AudioProcessingMode: Guid,
};
// --------------------------------------------------------
// Type: IPropertyStore
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPropertyStore = *opaque{
    // TODO: Method 'GetCount'
    // TODO: Method 'GetAt'
    // TODO: Method 'GetValue'
    // TODO: Method 'SetValue'
    // TODO: Method 'Commit'
};
// --------------------------------------------------------
// Type: MDEVICECAPSEX
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const MDEVICECAPSEX = *opaque{
};
// --------------------------------------------------------
// Type: MIDIOPENDESC
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const MIDIOPENDESC = *opaque{
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "DSOUND" fn DirectSoundCreate(
    pcGuidDevice: ?*Guid,
    ppDS: ?*IDirectSound,
    pUnkOuter: IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DSOUND" fn DirectSoundEnumerateA(
    pDSEnumCallback: LPDSENUMCALLBACKA,
    pContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DSOUND" fn DirectSoundEnumerateW(
    pDSEnumCallback: LPDSENUMCALLBACKW,
    pContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DSOUND" fn DirectSoundCaptureCreate(
    pcGuidDevice: ?*Guid,
    ppDSC: ?*IDirectSoundCapture,
    pUnkOuter: IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DSOUND" fn DirectSoundCaptureEnumerateA(
    pDSEnumCallback: LPDSENUMCALLBACKA,
    pContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DSOUND" fn DirectSoundCaptureEnumerateW(
    pDSEnumCallback: LPDSENUMCALLBACKW,
    pContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DSOUND" fn DirectSoundCreate8(
    pcGuidDevice: ?*Guid,
    ppDS8: ?*IDirectSound8,
    pUnkOuter: IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DSOUND" fn DirectSoundCaptureCreate8(
    pcGuidDevice: ?*Guid,
    ppDSC8: ?*IDirectSoundCapture,
    pUnkOuter: IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "DSOUND" fn DirectSoundFullDuplexCreate(
    pcGuidCaptureDevice: ?*Guid,
    pcGuidRenderDevice: ?*Guid,
    pcDSCBufferDesc: ?*DSCBUFFERDESC,
    pcDSBufferDesc: ?*DSBUFFERDESC,
    hWnd: HWND,
    dwLevel: u32,
    ppDSFD: ?*IDirectSoundFullDuplex,
    ppDSCBuffer8: ?*IDirectSoundCaptureBuffer8,
    ppDSBuffer8: ?*IDirectSoundBuffer8,
    pUnkOuter: IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const LPDSENUMCALLBACK = LPDSENUMCALLBACKA;
        pub const DirectSoundEnumerate = DirectSoundEnumerateA;
        pub const DirectSoundCaptureEnumerate = DirectSoundCaptureEnumerateA;
    },
    .wide => struct {
        pub const LPDSENUMCALLBACK = LPDSENUMCALLBACKW;
        pub const DirectSoundEnumerate = DirectSoundEnumerateW;
        pub const DirectSoundCaptureEnumerate = DirectSoundCaptureEnumerateW;
    },
    else => if (@import("builtin").is_test) struct {
        pub const LPDSENUMCALLBACK = *opaque{};
        pub const DirectSoundEnumerate = *opaque{};
        pub const DirectSoundCaptureEnumerate = *opaque{};
    } else struct {
        pub const LPDSENUMCALLBACK = @compileError("'LPDSENUMCALLBACK' requires that UNICODE be set to true or false in the root module");
        pub const DirectSoundEnumerate = @compileError("'DirectSoundEnumerate' requires that UNICODE be set to true or false in the root module");
        pub const DirectSoundCaptureEnumerate = @compileError("'DirectSoundCaptureEnumerate' requires that UNICODE be set to true or false in the root module");
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const IMMDeviceCollection = @import("coreaudio.zig").IMMDeviceCollection;
const BOOL = @import("systemservices.zig").BOOL;
const LPARAM = @import("windowsandmessaging.zig").LPARAM;
const WAVEFORMATEX = @import("multimedia.zig").WAVEFORMATEX;
const D3DVECTOR = @import("systemservices.zig").D3DVECTOR;
const HANDLE = @import("systemservices.zig").HANDLE;
const KSP_PIN = @import("coreaudio.zig").KSP_PIN;
const IUnknown = @import("com.zig").IUnknown;
const HRESULT = @import("com.zig").HRESULT;
const HWND = @import("windowsandmessaging.zig").HWND;

test "" {
    const constant_export_count = 45;
    const type_export_count = 132;
    const func_count = 9;
    const unicode_alias_count = 3;
    const type_import_count = 11;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
