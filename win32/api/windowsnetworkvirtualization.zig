//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: WNV_NOTIFICATION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WNV_NOTIFICATION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WNV_OBJECT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WNV_OBJECT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WNV_CA_NOTIFICATION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WNV_CA_NOTIFICATION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WNV_OBJECT_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WNV_OBJECT_HEADER = extern struct {
    MajorVersion: u8,
    MinorVersion: u8,
    Size: u32,
};
// --------------------------------------------------------
// Type: WNV_NOTIFICATION_PARAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WNV_NOTIFICATION_PARAM = extern struct {
    Header: WNV_OBJECT_HEADER,
    NotificationType: WNV_NOTIFICATION_TYPE,
    PendingNotifications: u32,
    Buffer: ?*u8,
};
// --------------------------------------------------------
// Type: WNV_IP_ADDRESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WNV_IP_ADDRESS = extern struct {
    IP: _IP_e__Union,
    // --------------------------------------------------------
    // Type: _IP_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _IP_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: WNV_POLICY_MISMATCH_PARAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WNV_POLICY_MISMATCH_PARAM = extern struct {
    CAFamily: u16,
    PAFamily: u16,
    VirtualSubnetId: u32,
    CA: WNV_IP_ADDRESS,
    PA: WNV_IP_ADDRESS,
};
// --------------------------------------------------------
// Type: WNV_PROVIDER_ADDRESS_CHANGE_PARAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WNV_PROVIDER_ADDRESS_CHANGE_PARAM = extern struct {
    PAFamily: u16,
    PA: WNV_IP_ADDRESS,
    AddressState: NL_DAD_STATE,
};
// --------------------------------------------------------
// Type: WNV_CUSTOMER_ADDRESS_CHANGE_PARAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WNV_CUSTOMER_ADDRESS_CHANGE_PARAM = extern struct {
    MACAddress: DL_EUI48,
    CAFamily: u16,
    CA: WNV_IP_ADDRESS,
    VirtualSubnetId: u32,
    PAFamily: u16,
    PA: WNV_IP_ADDRESS,
    NotificationReason: WNV_CA_NOTIFICATION_TYPE,
};
// --------------------------------------------------------
// Type: WNV_OBJECT_CHANGE_PARAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WNV_OBJECT_CHANGE_PARAM = extern struct {
    ObjectType: WNV_OBJECT_TYPE,
    ObjectParam: _ObjectParam_e__Union,
    // --------------------------------------------------------
    // Type: _ObjectParam_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _ObjectParam_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: WNV_REDIRECT_PARAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WNV_REDIRECT_PARAM = extern struct {
    CAFamily: u16,
    PAFamily: u16,
    NewPAFamily: u16,
    VirtualSubnetId: u32,
    CA: WNV_IP_ADDRESS,
    PA: WNV_IP_ADDRESS,
    NewPA: WNV_IP_ADDRESS,
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "wnvapi" fn WnvOpen(
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "wnvapi" fn WnvRequestNotification(
    WnvHandle: HANDLE,
    NotificationParam: ?*WNV_NOTIFICATION_PARAM,
    Overlapped: ?*OVERLAPPED,
    BytesTransferred: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const NL_DAD_STATE = @import("iphelper.zig").NL_DAD_STATE;
const DL_EUI48 = @import("windowsfiltering.zig").DL_EUI48;
const HANDLE = @import("systemservices.zig").HANDLE;
const OVERLAPPED = @import("systemservices.zig").OVERLAPPED;

test "" {
    const constant_export_count = 0;
    const type_export_count = 11;
    const func_count = 2;
    const unicode_alias_count = 0;
    const type_import_count = 4;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
