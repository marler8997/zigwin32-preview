//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: DFS_TARGET_PRIORITY_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DFS_TARGET_PRIORITY_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: DFS_TARGET_PRIORITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DFS_TARGET_PRIORITY = extern struct {
    TargetPriorityClass: DFS_TARGET_PRIORITY_CLASS,
    TargetPriorityRank: u16,
    Reserved: u16,
};
// --------------------------------------------------------
// Type: DFS_INFO_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DFS_INFO_1 = extern struct {
    EntryPath: ?*u16,
};
// --------------------------------------------------------
// Type: DFS_INFO_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DFS_INFO_2 = extern struct {
    EntryPath: ?*u16,
    Comment: ?*u16,
    State: u32,
    NumberOfStorages: u32,
};
// --------------------------------------------------------
// Type: DFS_STORAGE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DFS_STORAGE_INFO = extern struct {
    State: u32,
    ServerName: ?*u16,
    ShareName: ?*u16,
};
// --------------------------------------------------------
// Type: DFS_STORAGE_INFO_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DFS_STORAGE_INFO_1 = extern struct {
    State: u32,
    ServerName: ?*u16,
    ShareName: ?*u16,
    TargetPriority: DFS_TARGET_PRIORITY,
};
// --------------------------------------------------------
// Type: DFS_INFO_3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DFS_INFO_3 = extern struct {
    EntryPath: ?*u16,
    Comment: ?*u16,
    State: u32,
    NumberOfStorages: u32,
    Storage: ?*DFS_STORAGE_INFO,
};
// --------------------------------------------------------
// Type: DFS_INFO_4
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DFS_INFO_4 = extern struct {
    EntryPath: ?*u16,
    Comment: ?*u16,
    State: u32,
    Timeout: u32,
    Guid: Guid,
    NumberOfStorages: u32,
    Storage: ?*DFS_STORAGE_INFO,
};
// --------------------------------------------------------
// Type: DFS_INFO_5
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DFS_INFO_5 = extern struct {
    EntryPath: ?*u16,
    Comment: ?*u16,
    State: u32,
    Timeout: u32,
    Guid: Guid,
    PropertyFlags: u32,
    MetadataSize: u32,
    NumberOfStorages: u32,
};
// --------------------------------------------------------
// Type: DFS_INFO_6
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DFS_INFO_6 = extern struct {
    EntryPath: ?*u16,
    Comment: ?*u16,
    State: u32,
    Timeout: u32,
    Guid: Guid,
    PropertyFlags: u32,
    MetadataSize: u32,
    NumberOfStorages: u32,
    Storage: ?*DFS_STORAGE_INFO_1,
};
// --------------------------------------------------------
// Type: DFS_INFO_7
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DFS_INFO_7 = extern struct {
    GenerationGuid: Guid,
};
// --------------------------------------------------------
// Type: DFS_INFO_8
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DFS_INFO_8 = extern struct {
    EntryPath: ?*u16,
    Comment: ?*u16,
    State: u32,
    Timeout: u32,
    Guid: Guid,
    PropertyFlags: u32,
    MetadataSize: u32,
    SdLengthReserved: u32,
    pSecurityDescriptor: ?*opaque{},
    NumberOfStorages: u32,
};
// --------------------------------------------------------
// Type: DFS_INFO_9
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DFS_INFO_9 = extern struct {
    EntryPath: ?*u16,
    Comment: ?*u16,
    State: u32,
    Timeout: u32,
    Guid: Guid,
    PropertyFlags: u32,
    MetadataSize: u32,
    SdLengthReserved: u32,
    pSecurityDescriptor: ?*opaque{},
    NumberOfStorages: u32,
    Storage: ?*DFS_STORAGE_INFO_1,
};
// --------------------------------------------------------
// Type: DFS_INFO_50
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DFS_INFO_50 = extern struct {
    NamespaceMajorVersion: u32,
    NamespaceMinorVersion: u32,
    NamespaceCapabilities: u64,
};
// --------------------------------------------------------
// Type: DFS_INFO_100
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DFS_INFO_100 = extern struct {
    Comment: ?*u16,
};
// --------------------------------------------------------
// Type: DFS_INFO_101
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DFS_INFO_101 = extern struct {
    State: u32,
};
// --------------------------------------------------------
// Type: DFS_INFO_102
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DFS_INFO_102 = extern struct {
    Timeout: u32,
};
// --------------------------------------------------------
// Type: DFS_INFO_103
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DFS_INFO_103 = extern struct {
    PropertyFlagMask: u32,
    PropertyFlags: u32,
};
// --------------------------------------------------------
// Type: DFS_INFO_104
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DFS_INFO_104 = extern struct {
    TargetPriority: DFS_TARGET_PRIORITY,
};
// --------------------------------------------------------
// Type: DFS_INFO_105
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DFS_INFO_105 = extern struct {
    Comment: ?*u16,
    State: u32,
    Timeout: u32,
    PropertyFlagMask: u32,
    PropertyFlags: u32,
};
// --------------------------------------------------------
// Type: DFS_INFO_106
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DFS_INFO_106 = extern struct {
    State: u32,
    TargetPriority: DFS_TARGET_PRIORITY,
};
// --------------------------------------------------------
// Type: DFS_INFO_107
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DFS_INFO_107 = extern struct {
    Comment: ?*u16,
    State: u32,
    Timeout: u32,
    PropertyFlagMask: u32,
    PropertyFlags: u32,
    SdLengthReserved: u32,
    pSecurityDescriptor: ?*opaque{},
};
// --------------------------------------------------------
// Type: DFS_INFO_150
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DFS_INFO_150 = extern struct {
    SdLengthReserved: u32,
    pSecurityDescriptor: ?*opaque{},
};
// --------------------------------------------------------
// Type: DFS_INFO_200
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DFS_INFO_200 = extern struct {
    FtDfsName: ?*u16,
};
// --------------------------------------------------------
// Type: DFS_INFO_300
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DFS_INFO_300 = extern struct {
    Flags: u32,
    DfsName: ?*u16,
};
// --------------------------------------------------------
// Type: DFS_SITENAME_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DFS_SITENAME_INFO = extern struct {
    SiteFlags: u32,
    SiteName: ?*u16,
};
// --------------------------------------------------------
// Type: DFS_SITELIST_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DFS_SITELIST_INFO = extern struct {
    cSites: u32,
    Site: ?[*]DFS_SITENAME_INFO,
};
// --------------------------------------------------------
// Type: DFS_NAMESPACE_VERSION_ORIGIN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DFS_NAMESPACE_VERSION_ORIGIN = *opaque{
};
// --------------------------------------------------------
// Type: DFS_SUPPORTED_NAMESPACE_VERSION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DFS_SUPPORTED_NAMESPACE_VERSION_INFO = extern struct {
    DomainDfsMajorVersion: u32,
    DomainDfsMinorVersion: u32,
    DomainDfsCapabilities: u64,
    StandaloneDfsMajorVersion: u32,
    StandaloneDfsMinorVersion: u32,
    StandaloneDfsCapabilities: u64,
};
// --------------------------------------------------------
// Type: DFS_GET_PKT_ENTRY_STATE_ARG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DFS_GET_PKT_ENTRY_STATE_ARG = extern struct {
    DfsEntryPathLen: u16,
    ServerNameLen: u16,
    ShareNameLen: u16,
    Level: u32,
    Buffer: ?[*]u16,
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "dfscli" fn NetDfsAdd(
    DfsEntryPath: ?*u16,
    ServerName: ?*u16,
    ShareName: ?*u16,
    Comment: ?*u16,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dfscli" fn NetDfsAddStdRoot(
    ServerName: ?*u16,
    RootShare: ?*u16,
    Comment: ?*u16,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dfscli" fn NetDfsRemoveStdRoot(
    ServerName: ?*u16,
    RootShare: ?*u16,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dfscli" fn NetDfsAddFtRoot(
    ServerName: ?*u16,
    RootShare: ?*u16,
    FtDfsName: ?*u16,
    Comment: ?*u16,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dfscli" fn NetDfsRemoveFtRoot(
    ServerName: ?*u16,
    RootShare: ?*u16,
    FtDfsName: ?*u16,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dfscli" fn NetDfsRemoveFtRootForced(
    DomainName: ?*u16,
    ServerName: ?*u16,
    RootShare: ?*u16,
    FtDfsName: ?*u16,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dfscli" fn NetDfsRemove(
    DfsEntryPath: ?*u16,
    ServerName: ?*u16,
    ShareName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dfscli" fn NetDfsEnum(
    DfsName: ?*u16,
    Level: u32,
    PrefMaxLen: u32,
    Buffer: ?*?*u8,
    EntriesRead: ?*u32,
    ResumeHandle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dfscli" fn NetDfsGetInfo(
    DfsEntryPath: ?*u16,
    ServerName: ?*u16,
    ShareName: ?*u16,
    Level: u32,
    Buffer: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dfscli" fn NetDfsSetInfo(
    DfsEntryPath: ?*u16,
    ServerName: ?*u16,
    ShareName: ?*u16,
    Level: u32,
    Buffer: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dfscli" fn NetDfsGetClientInfo(
    DfsEntryPath: ?*u16,
    ServerName: ?*u16,
    ShareName: ?*u16,
    Level: u32,
    Buffer: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dfscli" fn NetDfsSetClientInfo(
    DfsEntryPath: ?*u16,
    ServerName: ?*u16,
    ShareName: ?*u16,
    Level: u32,
    Buffer: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dfscli" fn NetDfsMove(
    OldDfsEntryPath: ?*u16,
    NewDfsEntryPath: ?*u16,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dfscli" fn NetDfsAddRootTarget(
    pDfsPath: ?*u16,
    pTargetPath: ?*u16,
    MajorVersion: u32,
    pComment: ?*u16,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dfscli" fn NetDfsRemoveRootTarget(
    pDfsPath: ?*u16,
    pTargetPath: ?*u16,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dfscli" fn NetDfsGetSecurity(
    DfsEntryPath: ?*u16,
    SecurityInformation: u32,
    ppSecurityDescriptor: ?*?*opaque{},
    lpcbSecurityDescriptor: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dfscli" fn NetDfsSetSecurity(
    DfsEntryPath: ?*u16,
    SecurityInformation: u32,
    pSecurityDescriptor: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dfscli" fn NetDfsGetStdContainerSecurity(
    MachineName: ?*u16,
    SecurityInformation: u32,
    ppSecurityDescriptor: ?*?*opaque{},
    lpcbSecurityDescriptor: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dfscli" fn NetDfsSetStdContainerSecurity(
    MachineName: ?*u16,
    SecurityInformation: u32,
    pSecurityDescriptor: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dfscli" fn NetDfsGetFtContainerSecurity(
    DomainName: ?*u16,
    SecurityInformation: u32,
    ppSecurityDescriptor: ?*?*opaque{},
    lpcbSecurityDescriptor: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dfscli" fn NetDfsSetFtContainerSecurity(
    DomainName: ?*u16,
    SecurityInformation: u32,
    pSecurityDescriptor: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "dfscli" fn NetDfsGetSupportedNamespaceVersion(
    Origin: DFS_NAMESPACE_VERSION_ORIGIN,
    pName: ?*u16,
    ppVersionInfo: ?*?*DFS_SUPPORTED_NAMESPACE_VERSION_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;

test "" {
    const constant_export_count = 0;
    const type_export_count = 30;
    const func_count = 22;
    const unicode_alias_count = 0;
    const type_import_count = 1;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
