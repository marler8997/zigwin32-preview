//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: IPhraseSink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IPhraseSink = *opaque{
    // TODO: Method 'PutSmallPhrase'
    // TODO: Method 'PutPhrase'
};
// --------------------------------------------------------
// Type: WORDREP_BREAK_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WORDREP_BREAK_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DBKINDENUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DBKINDENUM = *opaque{
};
// --------------------------------------------------------
// Type: DBID
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=2 Size=0
pub const DBID = *opaque{
    // --------------------------------------------------------
    // Type: _uGuid_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _uGuid_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _uName_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _uName_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: CI_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CI_STATE = extern struct {
    cbStruct: u32,
    cWordList: u32,
    cPersistentIndex: u32,
    cQueries: u32,
    cDocuments: u32,
    cFreshTest: u32,
    dwMergeProgress: u32,
    eState: u32,
    cFilteredDocuments: u32,
    cTotalDocuments: u32,
    cPendingScans: u32,
    dwIndexSize: u32,
    cUniqueKeys: u32,
    cSecQDocuments: u32,
    dwPropCacheSize: u32,
};
// --------------------------------------------------------
// Type: FULLPROPSPEC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FULLPROPSPEC = extern struct {
    guidPropSet: Guid,
    psProperty: PROPSPEC,
};
// --------------------------------------------------------
// Type: IFILTER_INIT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IFILTER_INIT = *opaque{
};
// --------------------------------------------------------
// Type: IFILTER_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IFILTER_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: CHUNKSTATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CHUNKSTATE = *opaque{
};
// --------------------------------------------------------
// Type: CHUNK_BREAKTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CHUNK_BREAKTYPE = *opaque{
};
// --------------------------------------------------------
// Type: FILTERREGION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILTERREGION = extern struct {
    idChunk: u32,
    cwcStart: u32,
    cwcExtent: u32,
};
// --------------------------------------------------------
// Type: STAT_CHUNK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STAT_CHUNK = extern struct {
    idChunk: u32,
    breakType: CHUNK_BREAKTYPE,
    flags: CHUNKSTATE,
    locale: u32,
    attribute: FULLPROPSPEC,
    idChunkSource: u32,
    cwcStartSource: u32,
    cwcLenSource: u32,
};
// --------------------------------------------------------
// Type: IFilter
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFilter = *opaque{
    // TODO: Method 'Init'
    // TODO: Method 'GetChunk'
    // TODO: Method 'GetText'
    // TODO: Method 'GetValue'
    // TODO: Method 'BindRegion'
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "query" fn LoadIFilter(
    pwcsPath: ?*u16,
    pUnkOuter: IUnknown,
    ppIUnk: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "query" fn LoadIFilterEx(
    pwcsPath: ?*u16,
    dwFlags: u32,
    riid: ?*Guid,
    ppIUnk: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "query" fn BindIFilterFromStorage(
    pStg: IStorage,
    pUnkOuter: IUnknown,
    ppIUnk: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "query" fn BindIFilterFromStream(
    pStm: IStream,
    pUnkOuter: IUnknown,
    ppIUnk: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const PROPSPEC = @import("structuredstorage.zig").PROPSPEC;
const IUnknown = @import("com.zig").IUnknown;
const HRESULT = @import("com.zig").HRESULT;
const IStorage = @import("structuredstorage.zig").IStorage;
const IStream = @import("structuredstorage.zig").IStream;

test "" {
    const constant_export_count = 0;
    const type_export_count = 13;
    const func_count = 4;
    const unicode_alias_count = 0;
    const type_import_count = 6;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
