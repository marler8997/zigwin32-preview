//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: GameUICompletionRoutine
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const GameUICompletionRoutine = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PlayerPickerUICompletionRoutine
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PlayerPickerUICompletionRoutine = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: KnownGamingPrivileges
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const KnownGamingPrivileges = *opaque{
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-gaming-tcui-l1-1-0" fn ShowGameInviteUI(
    serviceConfigurationId: ?*opaque{},
    sessionTemplateName: ?*opaque{},
    sessionId: ?*opaque{},
    invitationDisplayText: ?*opaque{},
    completionRoutine: GameUICompletionRoutine,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-gaming-tcui-l1-1-0" fn ShowPlayerPickerUI(
    promptDisplayText: ?*opaque{},
    xuids: ?*?*opaque{},
    xuidsCount: ?*opaque{},
    preSelectedXuids: ?*?*opaque{},
    preSelectedXuidsCount: ?*opaque{},
    minSelectionCount: ?*opaque{},
    maxSelectionCount: ?*opaque{},
    completionRoutine: PlayerPickerUICompletionRoutine,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-gaming-tcui-l1-1-0" fn ShowProfileCardUI(
    targetUserXuid: ?*opaque{},
    completionRoutine: GameUICompletionRoutine,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-gaming-tcui-l1-1-0" fn ShowChangeFriendRelationshipUI(
    targetUserXuid: ?*opaque{},
    completionRoutine: GameUICompletionRoutine,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-gaming-tcui-l1-1-0" fn ShowTitleAchievementsUI(
    titleId: u32,
    completionRoutine: GameUICompletionRoutine,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-gaming-tcui-l1-1-0" fn ProcessPendingGameUI(
    waitForCompletion: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-gaming-tcui-l1-1-0" fn TryCancelPendingGameUI(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-gaming-tcui-l1-1-1" fn CheckGamingPrivilegeWithUI(
    privilegeId: u32,
    scope: ?*opaque{},
    policy: ?*opaque{},
    friendlyMessage: ?*opaque{},
    completionRoutine: GameUICompletionRoutine,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-gaming-tcui-l1-1-1" fn CheckGamingPrivilegeSilently(
    privilegeId: u32,
    scope: ?*opaque{},
    policy: ?*opaque{},
    hasPrivilege: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-gaming-tcui-l1-1-2" fn ShowGameInviteUIForUser(
    user: IInspectable,
    serviceConfigurationId: ?*opaque{},
    sessionTemplateName: ?*opaque{},
    sessionId: ?*opaque{},
    invitationDisplayText: ?*opaque{},
    completionRoutine: GameUICompletionRoutine,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-gaming-tcui-l1-1-2" fn ShowPlayerPickerUIForUser(
    user: IInspectable,
    promptDisplayText: ?*opaque{},
    xuids: ?*?*opaque{},
    xuidsCount: ?*opaque{},
    preSelectedXuids: ?*?*opaque{},
    preSelectedXuidsCount: ?*opaque{},
    minSelectionCount: ?*opaque{},
    maxSelectionCount: ?*opaque{},
    completionRoutine: PlayerPickerUICompletionRoutine,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-gaming-tcui-l1-1-2" fn ShowProfileCardUIForUser(
    user: IInspectable,
    targetUserXuid: ?*opaque{},
    completionRoutine: GameUICompletionRoutine,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-gaming-tcui-l1-1-2" fn ShowChangeFriendRelationshipUIForUser(
    user: IInspectable,
    targetUserXuid: ?*opaque{},
    completionRoutine: GameUICompletionRoutine,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-gaming-tcui-l1-1-2" fn ShowTitleAchievementsUIForUser(
    user: IInspectable,
    titleId: u32,
    completionRoutine: GameUICompletionRoutine,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-gaming-tcui-l1-1-2" fn CheckGamingPrivilegeWithUIForUser(
    user: IInspectable,
    privilegeId: u32,
    scope: ?*opaque{},
    policy: ?*opaque{},
    friendlyMessage: ?*opaque{},
    completionRoutine: GameUICompletionRoutine,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-gaming-tcui-l1-1-2" fn CheckGamingPrivilegeSilentlyForUser(
    user: IInspectable,
    privilegeId: u32,
    scope: ?*opaque{},
    policy: ?*opaque{},
    hasPrivilege: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-gaming-tcui-l1-1-3" fn ShowGameInviteUIWithContext(
    serviceConfigurationId: ?*opaque{},
    sessionTemplateName: ?*opaque{},
    sessionId: ?*opaque{},
    invitationDisplayText: ?*opaque{},
    customActivationContext: ?*opaque{},
    completionRoutine: GameUICompletionRoutine,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-gaming-tcui-l1-1-3" fn ShowGameInviteUIWithContextForUser(
    user: IInspectable,
    serviceConfigurationId: ?*opaque{},
    sessionTemplateName: ?*opaque{},
    sessionId: ?*opaque{},
    invitationDisplayText: ?*opaque{},
    customActivationContext: ?*opaque{},
    completionRoutine: GameUICompletionRoutine,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-gaming-tcui-l1-1-4" fn ShowGameInfoUI(
    titleId: u32,
    completionRoutine: GameUICompletionRoutine,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-gaming-tcui-l1-1-4" fn ShowGameInfoUIForUser(
    user: IInspectable,
    titleId: u32,
    completionRoutine: GameUICompletionRoutine,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-gaming-tcui-l1-1-4" fn ShowFindFriendsUI(
    completionRoutine: GameUICompletionRoutine,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-gaming-tcui-l1-1-4" fn ShowFindFriendsUIForUser(
    user: IInspectable,
    completionRoutine: GameUICompletionRoutine,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-gaming-tcui-l1-1-4" fn ShowCustomizeUserProfileUI(
    completionRoutine: GameUICompletionRoutine,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-gaming-tcui-l1-1-4" fn ShowCustomizeUserProfileUIForUser(
    user: IInspectable,
    completionRoutine: GameUICompletionRoutine,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-gaming-tcui-l1-1-4" fn ShowUserSettingsUI(
    completionRoutine: GameUICompletionRoutine,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-gaming-tcui-l1-1-4" fn ShowUserSettingsUIForUser(
    user: IInspectable,
    completionRoutine: GameUICompletionRoutine,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const HRESULT = @import("com.zig").HRESULT;
const BOOL = @import("systemservices.zig").BOOL;
const IInspectable = @import("winrt.zig").IInspectable;

test "" {
    const constant_export_count = 0;
    const type_export_count = 3;
    const func_count = 26;
    const unicode_alias_count = 0;
    const type_import_count = 3;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
