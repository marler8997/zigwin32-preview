//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: PIXELFORMATDESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PIXELFORMATDESCRIPTOR = extern struct {
    nSize: u16,
    nVersion: u16,
    dwFlags: u32,
    iPixelType: u8,
    cColorBits: u8,
    cRedBits: u8,
    cRedShift: u8,
    cGreenBits: u8,
    cGreenShift: u8,
    cBlueBits: u8,
    cBlueShift: u8,
    cAlphaBits: u8,
    cAlphaShift: u8,
    cAccumBits: u8,
    cAccumRedBits: u8,
    cAccumGreenBits: u8,
    cAccumBlueBits: u8,
    cAccumAlphaBits: u8,
    cDepthBits: u8,
    cStencilBits: u8,
    cAuxBuffers: u8,
    iLayerType: u8,
    bReserved: u8,
    dwLayerMask: u32,
    dwVisibleMask: u32,
    dwDamageMask: u32,
};
// --------------------------------------------------------
// Type: POINTFLOAT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POINTFLOAT = extern struct {
    x: f32,
    y: f32,
};
// --------------------------------------------------------
// Type: GLYPHMETRICSFLOAT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GLYPHMETRICSFLOAT = extern struct {
    gmfBlackBoxX: f32,
    gmfBlackBoxY: f32,
    gmfptGlyphOrigin: POINTFLOAT,
    gmfCellIncX: f32,
    gmfCellIncY: f32,
};
// --------------------------------------------------------
// Type: LAYERPLANEDESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LAYERPLANEDESCRIPTOR = extern struct {
    nSize: u16,
    nVersion: u16,
    dwFlags: u32,
    iPixelType: u8,
    cColorBits: u8,
    cRedBits: u8,
    cRedShift: u8,
    cGreenBits: u8,
    cGreenShift: u8,
    cBlueBits: u8,
    cBlueShift: u8,
    cAlphaBits: u8,
    cAlphaShift: u8,
    cAccumBits: u8,
    cAccumRedBits: u8,
    cAccumGreenBits: u8,
    cAccumBlueBits: u8,
    cAccumAlphaBits: u8,
    cDepthBits: u8,
    cStencilBits: u8,
    cAuxBuffers: u8,
    iLayerPlane: u8,
    bReserved: u8,
    crTransparent: u32,
};

//
// functions
//

// set_last_errror=True (can and should we use this?)
pub extern "GDI32" fn ChoosePixelFormat(
    hdc: HDC,
    ppfd: ?*PIXELFORMATDESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "GDI32" fn DescribePixelFormat(
    hdc: HDC,
    iPixelFormat: i32,
    nBytes: u32,
    ppfd: ?*PIXELFORMATDESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "GDI32" fn GetPixelFormat(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "GDI32" fn SetPixelFormat(
    hdc: HDC,
    format: i32,
    ppfd: ?*PIXELFORMATDESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "GDI32" fn GetEnhMetaFilePixelFormat(
    hemf: ?*opaque{},
    cbBuffer: u32,
    ppfd: ?*PIXELFORMATDESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "OPENGL32" fn wglCopyContext(
    param0: ?*opaque{},
    param1: ?*opaque{},
    param2: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "OPENGL32" fn wglCreateContext(
    param0: HDC,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "OPENGL32" fn wglCreateLayerContext(
    param0: HDC,
    param1: i32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "OPENGL32" fn wglDeleteContext(
    param0: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "OPENGL32" fn wglGetCurrentContext(
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "OPENGL32" fn wglGetCurrentDC(
) callconv(@import("std").os.windows.WINAPI) HDC;

// set_last_errror=True (can and should we use this?)
pub extern "OPENGL32" fn wglGetProcAddress(
    param0: ?*i8,
) callconv(@import("std").os.windows.WINAPI) PROC;

// set_last_errror=True (can and should we use this?)
pub extern "OPENGL32" fn wglMakeCurrent(
    param0: HDC,
    param1: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "OPENGL32" fn wglShareLists(
    param0: ?*opaque{},
    param1: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "OPENGL32" fn wglUseFontBitmapsA(
    param0: HDC,
    param1: u32,
    param2: u32,
    param3: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "OPENGL32" fn wglUseFontBitmapsW(
    param0: HDC,
    param1: u32,
    param2: u32,
    param3: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "GDI32" fn SwapBuffers(
    param0: HDC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "OPENGL32" fn wglUseFontOutlinesA(
    param0: HDC,
    param1: u32,
    param2: u32,
    param3: u32,
    param4: f32,
    param5: f32,
    param6: i32,
    param7: ?*GLYPHMETRICSFLOAT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "OPENGL32" fn wglUseFontOutlinesW(
    param0: HDC,
    param1: u32,
    param2: u32,
    param3: u32,
    param4: f32,
    param5: f32,
    param6: i32,
    param7: ?*GLYPHMETRICSFLOAT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "OPENGL32" fn wglDescribeLayerPlane(
    param0: HDC,
    param1: i32,
    param2: i32,
    param3: u32,
    param4: ?*LAYERPLANEDESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "OPENGL32" fn wglSetLayerPaletteEntries(
    param0: HDC,
    param1: i32,
    param2: i32,
    param3: i32,
    param4: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "OPENGL32" fn wglGetLayerPaletteEntries(
    param0: HDC,
    param1: i32,
    param2: i32,
    param3: i32,
    param4: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=True (can and should we use this?)
pub extern "OPENGL32" fn wglRealizeLayerPalette(
    param0: HDC,
    param1: i32,
    param2: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "OPENGL32" fn wglSwapLayerBuffers(
    param0: HDC,
    param1: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const wglUseFontBitmaps = wglUseFontBitmapsA;
        pub const wglUseFontOutlines = wglUseFontOutlinesA;
    },
    .wide => struct {
        pub const wglUseFontBitmaps = wglUseFontBitmapsW;
        pub const wglUseFontOutlines = wglUseFontOutlinesW;
    },
    else => if (@import("builtin").is_test) struct {
        pub const wglUseFontBitmaps = *opaque{};
        pub const wglUseFontOutlines = *opaque{};
    } else struct {
        pub const wglUseFontBitmaps = @compileError("'wglUseFontBitmaps' requires that UNICODE be set to true or false in the root module");
        pub const wglUseFontOutlines = @compileError("'wglUseFontOutlines' requires that UNICODE be set to true or false in the root module");
    },
};

//
// type imports
//
const HDC = @import("gdi.zig").HDC;
const BOOL = @import("systemservices.zig").BOOL;
const PROC = @import("systemservices.zig").PROC;

test "" {
    const constant_export_count = 0;
    const type_export_count = 4;
    const func_count = 24;
    const unicode_alias_count = 2;
    const type_import_count = 3;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
