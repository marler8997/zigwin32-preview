//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//
pub const MidlInterceptionInfoVersionOne : i32 = 1;
pub const MidlWinrtTypeSerializationInfoVersionOne : i32 = 1;

//
// types
//
// --------------------------------------------------------
// Type: NDR_SCONTEXT_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDR_SCONTEXT_1 = extern struct {
    pad: ?[*]?*opaque{},
    userContext: ?*opaque{},
};
// --------------------------------------------------------
// Type: RPC_BINDING_VECTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_BINDING_VECTOR = extern struct {
    Count: u32,
    BindingH: ?[*]?*opaque{},
};
// --------------------------------------------------------
// Type: UUID_VECTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UUID_VECTOR = extern struct {
    Count: u32,
    Uuid: ?[*]?*Guid,
};
// --------------------------------------------------------
// Type: RPC_IF_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_IF_ID = extern struct {
    Uuid: Guid,
    VersMajor: u16,
    VersMinor: u16,
};
// --------------------------------------------------------
// Type: RPC_PROTSEQ_VECTORA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_PROTSEQ_VECTORA = extern struct {
    Count: u32,
    Protseq: ?[*]?*u8,
};
// --------------------------------------------------------
// Type: RPC_PROTSEQ_VECTORW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_PROTSEQ_VECTORW = extern struct {
    Count: u32,
    Protseq: ?[*]?*u16,
};
// --------------------------------------------------------
// Type: RPC_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_POLICY = extern struct {
    Length: u32,
    EndpointFlags: u32,
    NICFlags: u32,
};
// --------------------------------------------------------
// Type: RPC_OBJECT_INQ_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_OBJECT_INQ_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_IF_CALLBACK_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_IF_CALLBACK_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_SECURITY_CALLBACK_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_SECURITY_CALLBACK_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_STATS_VECTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_STATS_VECTOR = extern struct {
    Count: u32,
    Stats: ?[*]u32,
};
// --------------------------------------------------------
// Type: RPC_IF_ID_VECTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_IF_ID_VECTOR = extern struct {
    Count: u32,
    IfId: ?[*]?*RPC_IF_ID,
};
// --------------------------------------------------------
// Type: RPC_SECURITY_QOS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_SECURITY_QOS = extern struct {
    Version: u32,
    Capabilities: u32,
    IdentityTracking: u32,
    ImpersonationType: u32,
};
// --------------------------------------------------------
// Type: RPC_HTTP_TRANSPORT_CREDENTIALS_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_HTTP_TRANSPORT_CREDENTIALS_W = extern struct {
    TransportCredentials: ?*SEC_WINNT_AUTH_IDENTITY_W,
    Flags: u32,
    AuthenticationTarget: u32,
    NumberOfAuthnSchemes: u32,
    AuthnSchemes: ?*u32,
    ServerCertificateSubject: ?*u16,
};
// --------------------------------------------------------
// Type: RPC_HTTP_TRANSPORT_CREDENTIALS_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_HTTP_TRANSPORT_CREDENTIALS_A = extern struct {
    TransportCredentials: ?*SEC_WINNT_AUTH_IDENTITY_A,
    Flags: u32,
    AuthenticationTarget: u32,
    NumberOfAuthnSchemes: u32,
    AuthnSchemes: ?*u32,
    ServerCertificateSubject: ?*u8,
};
// --------------------------------------------------------
// Type: RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W = extern struct {
    TransportCredentials: ?*SEC_WINNT_AUTH_IDENTITY_W,
    Flags: u32,
    AuthenticationTarget: u32,
    NumberOfAuthnSchemes: u32,
    AuthnSchemes: ?*u32,
    ServerCertificateSubject: ?*u16,
    ProxyCredentials: ?*SEC_WINNT_AUTH_IDENTITY_W,
    NumberOfProxyAuthnSchemes: u32,
    ProxyAuthnSchemes: ?*u32,
};
// --------------------------------------------------------
// Type: RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A = extern struct {
    TransportCredentials: ?*SEC_WINNT_AUTH_IDENTITY_A,
    Flags: u32,
    AuthenticationTarget: u32,
    NumberOfAuthnSchemes: u32,
    AuthnSchemes: ?*u32,
    ServerCertificateSubject: ?*u8,
    ProxyCredentials: ?*SEC_WINNT_AUTH_IDENTITY_A,
    NumberOfProxyAuthnSchemes: u32,
    ProxyAuthnSchemes: ?*u32,
};
// --------------------------------------------------------
// Type: RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W = extern struct {
    TransportCredentials: ?*opaque{},
    Flags: u32,
    AuthenticationTarget: u32,
    NumberOfAuthnSchemes: u32,
    AuthnSchemes: ?*u32,
    ServerCertificateSubject: ?*u16,
    ProxyCredentials: ?*opaque{},
    NumberOfProxyAuthnSchemes: u32,
    ProxyAuthnSchemes: ?*u32,
};
// --------------------------------------------------------
// Type: RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A = extern struct {
    TransportCredentials: ?*opaque{},
    Flags: u32,
    AuthenticationTarget: u32,
    NumberOfAuthnSchemes: u32,
    AuthnSchemes: ?*u32,
    ServerCertificateSubject: ?*u8,
    ProxyCredentials: ?*opaque{},
    NumberOfProxyAuthnSchemes: u32,
    ProxyAuthnSchemes: ?*u32,
};
// --------------------------------------------------------
// Type: RPC_SECURITY_QOS_V2_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_SECURITY_QOS_V2_W = extern struct {
    Version: u32,
    Capabilities: u32,
    IdentityTracking: u32,
    ImpersonationType: u32,
    AdditionalSecurityInfoType: u32,
    u: _u_e__Union,
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: RPC_SECURITY_QOS_V2_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_SECURITY_QOS_V2_A = extern struct {
    Version: u32,
    Capabilities: u32,
    IdentityTracking: u32,
    ImpersonationType: u32,
    AdditionalSecurityInfoType: u32,
    u: _u_e__Union,
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: RPC_SECURITY_QOS_V3_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_SECURITY_QOS_V3_W = extern struct {
    Version: u32,
    Capabilities: u32,
    IdentityTracking: u32,
    ImpersonationType: u32,
    AdditionalSecurityInfoType: u32,
    u: _u_e__Union,
    Sid: ?*opaque{},
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: RPC_SECURITY_QOS_V3_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_SECURITY_QOS_V3_A = extern struct {
    Version: u32,
    Capabilities: u32,
    IdentityTracking: u32,
    ImpersonationType: u32,
    AdditionalSecurityInfoType: u32,
    u: _u_e__Union,
    Sid: ?*opaque{},
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: RPC_SECURITY_QOS_V4_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_SECURITY_QOS_V4_W = extern struct {
    Version: u32,
    Capabilities: u32,
    IdentityTracking: u32,
    ImpersonationType: u32,
    AdditionalSecurityInfoType: u32,
    u: _u_e__Union,
    Sid: ?*opaque{},
    EffectiveOnly: u32,
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: RPC_SECURITY_QOS_V4_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_SECURITY_QOS_V4_A = extern struct {
    Version: u32,
    Capabilities: u32,
    IdentityTracking: u32,
    ImpersonationType: u32,
    AdditionalSecurityInfoType: u32,
    u: _u_e__Union,
    Sid: ?*opaque{},
    EffectiveOnly: u32,
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: RPC_SECURITY_QOS_V5_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_SECURITY_QOS_V5_W = extern struct {
    Version: u32,
    Capabilities: u32,
    IdentityTracking: u32,
    ImpersonationType: u32,
    AdditionalSecurityInfoType: u32,
    u: _u_e__Union,
    Sid: ?*opaque{},
    EffectiveOnly: u32,
    ServerSecurityDescriptor: ?*opaque{},
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: RPC_SECURITY_QOS_V5_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_SECURITY_QOS_V5_A = extern struct {
    Version: u32,
    Capabilities: u32,
    IdentityTracking: u32,
    ImpersonationType: u32,
    AdditionalSecurityInfoType: u32,
    u: _u_e__Union,
    Sid: ?*opaque{},
    EffectiveOnly: u32,
    ServerSecurityDescriptor: ?*opaque{},
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: RPC_BINDING_HANDLE_TEMPLATE_V1_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_BINDING_HANDLE_TEMPLATE_V1_W = extern struct {
    Version: u32,
    Flags: u32,
    ProtocolSequence: u32,
    NetworkAddress: ?*u16,
    StringEndpoint: ?*u16,
    u1: _u1_e__Union,
    ObjectUuid: Guid,
    // --------------------------------------------------------
    // Type: _u1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u1_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: RPC_BINDING_HANDLE_TEMPLATE_V1_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_BINDING_HANDLE_TEMPLATE_V1_A = extern struct {
    Version: u32,
    Flags: u32,
    ProtocolSequence: u32,
    NetworkAddress: ?*u8,
    StringEndpoint: ?*u8,
    u1: _u1_e__Union,
    ObjectUuid: Guid,
    // --------------------------------------------------------
    // Type: _u1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u1_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: RPC_BINDING_HANDLE_SECURITY_V1_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_BINDING_HANDLE_SECURITY_V1_W = extern struct {
    Version: u32,
    ServerPrincName: ?*u16,
    AuthnLevel: u32,
    AuthnSvc: u32,
    AuthIdentity: ?*SEC_WINNT_AUTH_IDENTITY_W,
    SecurityQos: ?*RPC_SECURITY_QOS,
};
// --------------------------------------------------------
// Type: RPC_BINDING_HANDLE_SECURITY_V1_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_BINDING_HANDLE_SECURITY_V1_A = extern struct {
    Version: u32,
    ServerPrincName: ?*u8,
    AuthnLevel: u32,
    AuthnSvc: u32,
    AuthIdentity: ?*SEC_WINNT_AUTH_IDENTITY_A,
    SecurityQos: ?*RPC_SECURITY_QOS,
};
// --------------------------------------------------------
// Type: RPC_BINDING_HANDLE_OPTIONS_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_BINDING_HANDLE_OPTIONS_V1 = extern struct {
    Version: u32,
    Flags: u32,
    ComTimeout: u32,
    CallTimeout: u32,
};
// --------------------------------------------------------
// Type: RPC_HTTP_REDIRECTOR_STAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_HTTP_REDIRECTOR_STAGE = *opaque{
};
// --------------------------------------------------------
// Type: RPC_NEW_HTTP_PROXY_CHANNEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_NEW_HTTP_PROXY_CHANNEL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_HTTP_PROXY_FREE_STRING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_HTTP_PROXY_FREE_STRING = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_AUTH_KEY_RETRIEVAL_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_AUTH_KEY_RETRIEVAL_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_CLIENT_INFORMATION1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_CLIENT_INFORMATION1 = extern struct {
    UserName: ?*u8,
    ComputerName: ?*u8,
    Privilege: u16,
    AuthFlags: u32,
};
// --------------------------------------------------------
// Type: RPC_MGMT_AUTHORIZATION_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_MGMT_AUTHORIZATION_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_ENDPOINT_TEMPLATEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_ENDPOINT_TEMPLATEW = extern struct {
    Version: u32,
    ProtSeq: ?*u16,
    Endpoint: ?*u16,
    SecurityDescriptor: ?*opaque{},
    Backlog: u32,
};
// --------------------------------------------------------
// Type: RPC_ENDPOINT_TEMPLATEA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_ENDPOINT_TEMPLATEA = extern struct {
    Version: u32,
    ProtSeq: ?*u8,
    Endpoint: ?*u8,
    SecurityDescriptor: ?*opaque{},
    Backlog: u32,
};
// --------------------------------------------------------
// Type: RPC_INTERFACE_TEMPLATEA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_INTERFACE_TEMPLATEA = extern struct {
    Version: u32,
    IfSpec: ?*opaque{},
    MgrTypeUuid: ?*Guid,
    MgrEpv: ?*opaque{},
    Flags: u32,
    MaxCalls: u32,
    MaxRpcSize: u32,
    IfCallback: ?*RPC_IF_CALLBACK_FN,
    UuidVector: ?*UUID_VECTOR,
    Annotation: ?*u8,
    SecurityDescriptor: ?*opaque{},
};
// --------------------------------------------------------
// Type: RPC_INTERFACE_TEMPLATEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_INTERFACE_TEMPLATEW = extern struct {
    Version: u32,
    IfSpec: ?*opaque{},
    MgrTypeUuid: ?*Guid,
    MgrEpv: ?*opaque{},
    Flags: u32,
    MaxCalls: u32,
    MaxRpcSize: u32,
    IfCallback: ?*RPC_IF_CALLBACK_FN,
    UuidVector: ?*UUID_VECTOR,
    Annotation: ?*u16,
    SecurityDescriptor: ?*opaque{},
};
// --------------------------------------------------------
// Type: RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_VERSION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_VERSION = extern struct {
    MajorVersion: u16,
    MinorVersion: u16,
};
// --------------------------------------------------------
// Type: RPC_SYNTAX_IDENTIFIER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_SYNTAX_IDENTIFIER = extern struct {
    SyntaxGUID: Guid,
    SyntaxVersion: RPC_VERSION,
};
// --------------------------------------------------------
// Type: RPC_MESSAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_MESSAGE = extern struct {
    Handle: ?*opaque{},
    DataRepresentation: u32,
    Buffer: ?*opaque{},
    BufferLength: u32,
    ProcNum: u32,
    TransferSyntax: ?*RPC_SYNTAX_IDENTIFIER,
    RpcInterfaceInformation: ?*opaque{},
    ReservedForRuntime: ?*opaque{},
    ManagerEpv: ?*opaque{},
    ImportContext: ?*opaque{},
    RpcFlags: u32,
};
// --------------------------------------------------------
// Type: RPC_FORWARD_FUNCTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_FORWARD_FUNCTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_ADDRESS_CHANGE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_ADDRESS_CHANGE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: RPC_ADDRESS_CHANGE_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_ADDRESS_CHANGE_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_DISPATCH_FUNCTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_DISPATCH_FUNCTION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_DISPATCH_TABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_DISPATCH_TABLE = extern struct {
    DispatchTableCount: u32,
    DispatchTable: ?*RPC_DISPATCH_FUNCTION,
    Reserved: ?*opaque{},
};
// --------------------------------------------------------
// Type: RPC_PROTSEQ_ENDPOINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_PROTSEQ_ENDPOINT = extern struct {
    RpcProtocolSequence: ?*u8,
    Endpoint: ?*u8,
};
// --------------------------------------------------------
// Type: RPC_SERVER_INTERFACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_SERVER_INTERFACE = extern struct {
    Length: u32,
    InterfaceId: RPC_SYNTAX_IDENTIFIER,
    TransferSyntax: RPC_SYNTAX_IDENTIFIER,
    DispatchTable: ?*RPC_DISPATCH_TABLE,
    RpcProtseqEndpointCount: u32,
    RpcProtseqEndpoint: ?*RPC_PROTSEQ_ENDPOINT,
    DefaultManagerEpv: ?*opaque{},
    InterpreterInfo: ?*opaque{},
    Flags: u32,
};
// --------------------------------------------------------
// Type: RPC_CLIENT_INTERFACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_CLIENT_INTERFACE = extern struct {
    Length: u32,
    InterfaceId: RPC_SYNTAX_IDENTIFIER,
    TransferSyntax: RPC_SYNTAX_IDENTIFIER,
    DispatchTable: ?*RPC_DISPATCH_TABLE,
    RpcProtseqEndpointCount: u32,
    RpcProtseqEndpoint: ?*RPC_PROTSEQ_ENDPOINT,
    Reserved: ?*opaque{},
    InterpreterInfo: ?*opaque{},
    Flags: u32,
};
// --------------------------------------------------------
// Type: LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION = *opaque{
};
// --------------------------------------------------------
// Type: PRPC_RUNDOWN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PRPC_RUNDOWN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_SEC_CONTEXT_KEY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_SEC_CONTEXT_KEY_INFO = extern struct {
    EncryptAlgorithm: u32,
    KeySize: u32,
    SignatureAlgorithm: u32,
};
// --------------------------------------------------------
// Type: RPC_TRANSFER_SYNTAX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_TRANSFER_SYNTAX = extern struct {
    Uuid: Guid,
    VersMajor: u16,
    VersMinor: u16,
};
// --------------------------------------------------------
// Type: RPCLT_PDU_FILTER_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPCLT_PDU_FILTER_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_SETFILTER_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_SETFILTER_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_BLOCKING_FN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_BLOCKING_FN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR = extern struct {
    BufferSize: u32,
    Buffer: ?*i8,
};
// --------------------------------------------------------
// Type: RDR_CALLOUT_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RDR_CALLOUT_STATE = extern struct {
    LastError: i32,
    LastEEInfo: ?*opaque{},
    LastCalledStage: RPC_HTTP_REDIRECTOR_STAGE,
    ServerName: ?*u16,
    ServerPort: ?*u16,
    RemoteUser: ?*u16,
    AuthType: ?*u16,
    ResourceTypePresent: u8,
    SessionIdPresent: u8,
    InterfacePresent: u8,
    ResourceType: Guid,
    SessionId: Guid,
    Interface: RPC_SYNTAX_IDENTIFIER,
    CertContext: ?*opaque{},
};
// --------------------------------------------------------
// Type: I_RpcProxyIsValidMachineFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const I_RpcProxyIsValidMachineFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: I_RpcProxyGetClientAddressFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const I_RpcProxyGetClientAddressFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: I_RpcProxyGetConnectionTimeoutFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const I_RpcProxyGetConnectionTimeoutFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: I_RpcPerformCalloutFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const I_RpcPerformCalloutFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: I_RpcFreeCalloutStateFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const I_RpcFreeCalloutStateFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: I_RpcProxyGetClientSessionAndResourceUUID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const I_RpcProxyGetClientSessionAndResourceUUID = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: I_RpcProxyFilterIfFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const I_RpcProxyFilterIfFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RpcProxyPerfCounters
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RpcProxyPerfCounters = *opaque{
};
// --------------------------------------------------------
// Type: I_RpcProxyUpdatePerfCounterFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const I_RpcProxyUpdatePerfCounterFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: I_RpcProxyUpdatePerfCounterBackendServerFn
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const I_RpcProxyUpdatePerfCounterBackendServerFn = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: I_RpcProxyCallbackInterface
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const I_RpcProxyCallbackInterface = extern struct {
    IsValidMachineFn: I_RpcProxyIsValidMachineFn,
    GetClientAddressFn: I_RpcProxyGetClientAddressFn,
    GetConnectionTimeoutFn: I_RpcProxyGetConnectionTimeoutFn,
    PerformCalloutFn: I_RpcPerformCalloutFn,
    FreeCalloutStateFn: I_RpcFreeCalloutStateFn,
    GetClientSessionAndResourceUUIDFn: I_RpcProxyGetClientSessionAndResourceUUID,
    ProxyFilterIfFn: I_RpcProxyFilterIfFn,
    RpcProxyUpdatePerfCounterFn: I_RpcProxyUpdatePerfCounterFn,
    RpcProxyUpdatePerfCounterBackendServerFn: I_RpcProxyUpdatePerfCounterBackendServerFn,
};
// --------------------------------------------------------
// Type: RPC_NOTIFICATION_TYPES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_NOTIFICATION_TYPES = *opaque{
};
// --------------------------------------------------------
// Type: RPC_ASYNC_EVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_ASYNC_EVENT = *opaque{
};
// --------------------------------------------------------
// Type: RPCNOTIFICATION_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPCNOTIFICATION_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_RPCNOTIFICATION_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_RPCNOTIFICATION_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_ASYNC_NOTIFICATION_INFO
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const RPC_ASYNC_NOTIFICATION_INFO = *opaque{
    // --------------------------------------------------------
    // Type: _IOC_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _IOC_e__Struct = extern struct {
        hIOPort: HANDLE,
        dwNumberOfBytesTransferred: u32,
        dwCompletionKey: ?*opaque{},
        lpOverlapped: ?*OVERLAPPED,
    };
    // --------------------------------------------------------
    // Type: _APC_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _APC_e__Struct = extern struct {
        NotificationRoutine: PFN_RPCNOTIFICATION_ROUTINE,
        hThread: HANDLE,
    };
    // --------------------------------------------------------
    // Type: _IntPtr_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _IntPtr_e__Struct = extern struct {
        hWnd: HWND,
        Msg: u32,
    };
};
// --------------------------------------------------------
// Type: RPC_ASYNC_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_ASYNC_STATE = extern struct {
    Size: u32,
    Signature: u32,
    Lock: i32,
    Flags: u32,
    StubInfo: ?*opaque{},
    UserInfo: ?*opaque{},
    RuntimeInfo: ?*opaque{},
    Event: RPC_ASYNC_EVENT,
    NotificationType: RPC_NOTIFICATION_TYPES,
    u: RPC_ASYNC_NOTIFICATION_INFO,
    Reserved: ?[*]?*opaque{},
};
// --------------------------------------------------------
// Type: ExtendedErrorParamTypes
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ExtendedErrorParamTypes = *opaque{
};
// --------------------------------------------------------
// Type: BinaryParam
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BinaryParam = extern struct {
    Buffer: ?*opaque{},
    Size: i16,
};
// --------------------------------------------------------
// Type: RPC_EE_INFO_PARAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_EE_INFO_PARAM = extern struct {
    ParameterType: ExtendedErrorParamTypes,
    u: _u_e__Union,
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: RPC_EXTENDED_ERROR_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_EXTENDED_ERROR_INFO = extern struct {
    Version: u32,
    ComputerName: ?*u16,
    ProcessID: u32,
    u: _u_e__Union,
    GeneratingComponent: u32,
    Status: u32,
    DetectionLocation: u16,
    Flags: u16,
    NumberOfParameters: i32,
    Parameters: ?[*]RPC_EE_INFO_PARAM,
    // --------------------------------------------------------
    // Type: _u_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _u_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: RPC_ERROR_ENUM_HANDLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_ERROR_ENUM_HANDLE = extern struct {
    Signature: u32,
    CurrentPos: ?*opaque{},
    Head: ?*opaque{},
};
// --------------------------------------------------------
// Type: RpcLocalAddressFormat
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RpcLocalAddressFormat = *opaque{
};
// --------------------------------------------------------
// Type: RPC_CALL_LOCAL_ADDRESS_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_CALL_LOCAL_ADDRESS_V1 = extern struct {
    Version: u32,
    Buffer: ?*opaque{},
    BufferSize: u32,
    AddressFormat: RpcLocalAddressFormat,
};
// --------------------------------------------------------
// Type: RPC_CALL_ATTRIBUTES_V1_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_CALL_ATTRIBUTES_V1_W = extern struct {
    Version: u32,
    Flags: u32,
    ServerPrincipalNameBufferLength: u32,
    ServerPrincipalName: ?*u16,
    ClientPrincipalNameBufferLength: u32,
    ClientPrincipalName: ?*u16,
    AuthenticationLevel: u32,
    AuthenticationService: u32,
    NullSession: BOOL,
};
// --------------------------------------------------------
// Type: RPC_CALL_ATTRIBUTES_V1_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_CALL_ATTRIBUTES_V1_A = extern struct {
    Version: u32,
    Flags: u32,
    ServerPrincipalNameBufferLength: u32,
    ServerPrincipalName: ?*u8,
    ClientPrincipalNameBufferLength: u32,
    ClientPrincipalName: ?*u8,
    AuthenticationLevel: u32,
    AuthenticationService: u32,
    NullSession: BOOL,
};
// --------------------------------------------------------
// Type: RpcCallType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RpcCallType = *opaque{
};
// --------------------------------------------------------
// Type: RpcCallClientLocality
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RpcCallClientLocality = *opaque{
};
// --------------------------------------------------------
// Type: RPC_CALL_ATTRIBUTES_V2_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_CALL_ATTRIBUTES_V2_W = extern struct {
    Version: u32,
    Flags: u32,
    ServerPrincipalNameBufferLength: u32,
    ServerPrincipalName: ?*u16,
    ClientPrincipalNameBufferLength: u32,
    ClientPrincipalName: ?*u16,
    AuthenticationLevel: u32,
    AuthenticationService: u32,
    NullSession: BOOL,
    KernelModeCaller: BOOL,
    ProtocolSequence: u32,
    IsClientLocal: RpcCallClientLocality,
    ClientPID: HANDLE,
    CallStatus: u32,
    CallType: RpcCallType,
    CallLocalAddress: ?*RPC_CALL_LOCAL_ADDRESS_V1,
    OpNum: u16,
    InterfaceUuid: Guid,
};
// --------------------------------------------------------
// Type: RPC_CALL_ATTRIBUTES_V2_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_CALL_ATTRIBUTES_V2_A = extern struct {
    Version: u32,
    Flags: u32,
    ServerPrincipalNameBufferLength: u32,
    ServerPrincipalName: ?*u8,
    ClientPrincipalNameBufferLength: u32,
    ClientPrincipalName: ?*u8,
    AuthenticationLevel: u32,
    AuthenticationService: u32,
    NullSession: BOOL,
    KernelModeCaller: BOOL,
    ProtocolSequence: u32,
    IsClientLocal: u32,
    ClientPID: HANDLE,
    CallStatus: u32,
    CallType: RpcCallType,
    CallLocalAddress: ?*RPC_CALL_LOCAL_ADDRESS_V1,
    OpNum: u16,
    InterfaceUuid: Guid,
};
// --------------------------------------------------------
// Type: RPC_CALL_ATTRIBUTES_V3_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_CALL_ATTRIBUTES_V3_W = extern struct {
    Version: u32,
    Flags: u32,
    ServerPrincipalNameBufferLength: u32,
    ServerPrincipalName: ?*u16,
    ClientPrincipalNameBufferLength: u32,
    ClientPrincipalName: ?*u16,
    AuthenticationLevel: u32,
    AuthenticationService: u32,
    NullSession: BOOL,
    KernelModeCaller: BOOL,
    ProtocolSequence: u32,
    IsClientLocal: RpcCallClientLocality,
    ClientPID: HANDLE,
    CallStatus: u32,
    CallType: RpcCallType,
    CallLocalAddress: ?*RPC_CALL_LOCAL_ADDRESS_V1,
    OpNum: u16,
    InterfaceUuid: Guid,
    ClientIdentifierBufferLength: u32,
    ClientIdentifier: ?*u8,
};
// --------------------------------------------------------
// Type: RPC_CALL_ATTRIBUTES_V3_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RPC_CALL_ATTRIBUTES_V3_A = extern struct {
    Version: u32,
    Flags: u32,
    ServerPrincipalNameBufferLength: u32,
    ServerPrincipalName: ?*u8,
    ClientPrincipalNameBufferLength: u32,
    ClientPrincipalName: ?*u8,
    AuthenticationLevel: u32,
    AuthenticationService: u32,
    NullSession: BOOL,
    KernelModeCaller: BOOL,
    ProtocolSequence: u32,
    IsClientLocal: u32,
    ClientPID: HANDLE,
    CallStatus: u32,
    CallType: RpcCallType,
    CallLocalAddress: ?*RPC_CALL_LOCAL_ADDRESS_V1,
    OpNum: u16,
    InterfaceUuid: Guid,
    ClientIdentifierBufferLength: u32,
    ClientIdentifier: ?*u8,
};
// --------------------------------------------------------
// Type: RPC_NOTIFICATIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_NOTIFICATIONS = *opaque{
};
// --------------------------------------------------------
// Type: __AnonymousRecord_rpcndr_L275_C9
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const __AnonymousRecord_rpcndr_L275_C9 = extern struct {
    pad: ?[*]?*opaque{},
    userContext: ?*opaque{},
};
// --------------------------------------------------------
// Type: NDR_RUNDOWN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDR_RUNDOWN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: NDR_NOTIFY_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDR_NOTIFY_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: NDR_NOTIFY2_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDR_NOTIFY2_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SCONTEXT_QUEUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SCONTEXT_QUEUE = extern struct {
    NumberOfObjects: u32,
    ArrayOfObjects: ?*?*NDR_SCONTEXT_1,
};
// --------------------------------------------------------
// Type: EXPR_EVAL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EXPR_EVAL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ARRAY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ARRAY_INFO = extern struct {
    Dimension: i32,
    BufferConformanceMark: ?*u32,
    BufferVarianceMark: ?*u32,
    MaxCountArray: ?*u32,
    OffsetArray: ?*u32,
    ActualCountArray: ?*u32,
};
// --------------------------------------------------------
// Type: _NDR_ASYNC_MESSAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _NDR_ASYNC_MESSAGE = opaque {
};
// --------------------------------------------------------
// Type: _NDR_CORRELATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _NDR_CORRELATION_INFO = opaque {
};
// --------------------------------------------------------
// Type: NDR_ALLOC_ALL_NODES_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const NDR_ALLOC_ALL_NODES_CONTEXT = opaque {
};
// --------------------------------------------------------
// Type: NDR_POINTER_QUEUE_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const NDR_POINTER_QUEUE_STATE = opaque {
};
// --------------------------------------------------------
// Type: _NDR_PROC_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _NDR_PROC_CONTEXT = opaque {
};
// --------------------------------------------------------
// Type: MIDL_STUB_MESSAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MIDL_STUB_MESSAGE = extern struct {
    RpcMsg: ?*RPC_MESSAGE,
    Buffer: ?*u8,
    BufferStart: ?*u8,
    BufferEnd: ?*u8,
    BufferMark: ?*u8,
    BufferLength: u32,
    MemorySize: u32,
    Memory: ?*u8,
    IsClient: u8,
    Pad: u8,
    uFlags2: u16,
    ReuseBuffer: i32,
    pAllocAllNodesContext: ?*NDR_ALLOC_ALL_NODES_CONTEXT,
    pPointerQueueState: ?*NDR_POINTER_QUEUE_STATE,
    IgnoreEmbeddedPointers: i32,
    PointerBufferMark: ?*u8,
    CorrDespIncrement: u8,
    uFlags: u8,
    UniquePtrCount: u16,
    MaxCount: ?*opaque{},
    Offset: u32,
    ActualCount: u32,
    pfnAllocate: ?*opaque{},
    pfnFree: ?*opaque{},
    StackTop: ?*u8,
    pPresentedType: ?*u8,
    pTransmitType: ?*u8,
    SavedHandle: ?*opaque{},
    StubDesc: ?*MIDL_STUB_DESC,
    FullPtrXlatTables: ?*FULL_PTR_XLAT_TABLES,
    FullPtrRefId: u32,
    PointerLength: u32,
    _bitfield: i32,
    dwDestContext: u32,
    pvDestContext: ?*opaque{},
    SavedContextHandles: ?*?*NDR_SCONTEXT_1,
    ParamNumber: i32,
    pRpcChannelBuffer: IRpcChannelBuffer,
    pArrayInfo: ?*ARRAY_INFO,
    SizePtrCountArray: ?*u32,
    SizePtrOffsetArray: ?*u32,
    SizePtrLengthArray: ?*u32,
    pArgQueue: ?*opaque{},
    dwStubPhase: u32,
    LowStackMark: ?*opaque{},
    pAsyncMsg: ?*_NDR_ASYNC_MESSAGE,
    pCorrInfo: ?*_NDR_CORRELATION_INFO,
    pCorrMemory: ?*u8,
    pMemoryList: ?*opaque{},
    pCSInfo: ?*opaque{},
    ConformanceMark: ?*u8,
    VarianceMark: ?*u8,
    Unused: ?*opaque{},
    pContext: ?*_NDR_PROC_CONTEXT,
    ContextHandleHash: ?*opaque{},
    pUserMarshalList: ?*opaque{},
    Reserved51_3: ?*opaque{},
    Reserved51_4: ?*opaque{},
    Reserved51_5: ?*opaque{},
};
// --------------------------------------------------------
// Type: GENERIC_BINDING_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const GENERIC_BINDING_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: GENERIC_UNBIND_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const GENERIC_UNBIND_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: GENERIC_BINDING_ROUTINE_PAIR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GENERIC_BINDING_ROUTINE_PAIR = extern struct {
    pfnBind: GENERIC_BINDING_ROUTINE,
    pfnUnbind: GENERIC_UNBIND_ROUTINE,
};
// --------------------------------------------------------
// Type: __GENERIC_BINDING_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const __GENERIC_BINDING_INFO = extern struct {
    pObj: ?*opaque{},
    Size: u32,
    pfnBind: GENERIC_BINDING_ROUTINE,
    pfnUnbind: GENERIC_UNBIND_ROUTINE,
};
// --------------------------------------------------------
// Type: XMIT_HELPER_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const XMIT_HELPER_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: XMIT_ROUTINE_QUINTUPLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const XMIT_ROUTINE_QUINTUPLE = extern struct {
    pfnTranslateToXmit: XMIT_HELPER_ROUTINE,
    pfnTranslateFromXmit: XMIT_HELPER_ROUTINE,
    pfnFreeXmit: XMIT_HELPER_ROUTINE,
    pfnFreeInst: XMIT_HELPER_ROUTINE,
};
// --------------------------------------------------------
// Type: USER_MARSHAL_SIZING_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const USER_MARSHAL_SIZING_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: USER_MARSHAL_MARSHALLING_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const USER_MARSHAL_MARSHALLING_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: USER_MARSHAL_UNMARSHALLING_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const USER_MARSHAL_UNMARSHALLING_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: USER_MARSHAL_FREEING_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const USER_MARSHAL_FREEING_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: USER_MARSHAL_ROUTINE_QUADRUPLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_MARSHAL_ROUTINE_QUADRUPLE = extern struct {
    pfnBufferSize: USER_MARSHAL_SIZING_ROUTINE,
    pfnMarshall: USER_MARSHAL_MARSHALLING_ROUTINE,
    pfnUnmarshall: USER_MARSHAL_UNMARSHALLING_ROUTINE,
    pfnFree: USER_MARSHAL_FREEING_ROUTINE,
};
// --------------------------------------------------------
// Type: USER_MARSHAL_CB_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const USER_MARSHAL_CB_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: USER_MARSHAL_CB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_MARSHAL_CB = extern struct {
    Flags: u32,
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pReserve: ?*u8,
    Signature: u32,
    CBType: USER_MARSHAL_CB_TYPE,
    pFormat: ?*u8,
    pTypeFormat: ?*u8,
};
// --------------------------------------------------------
// Type: MALLOC_FREE_STRUCT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MALLOC_FREE_STRUCT = extern struct {
    pfnAllocate: ?*opaque{},
    pfnFree: ?*opaque{},
};
// --------------------------------------------------------
// Type: COMM_FAULT_OFFSETS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COMM_FAULT_OFFSETS = extern struct {
    CommOffset: i16,
    FaultOffset: i16,
};
// --------------------------------------------------------
// Type: IDL_CS_CONVERT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IDL_CS_CONVERT = *opaque{
};
// --------------------------------------------------------
// Type: CS_TYPE_NET_SIZE_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CS_TYPE_NET_SIZE_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CS_TYPE_LOCAL_SIZE_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CS_TYPE_LOCAL_SIZE_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CS_TYPE_TO_NETCS_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CS_TYPE_TO_NETCS_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CS_TYPE_FROM_NETCS_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CS_TYPE_FROM_NETCS_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CS_TAG_GETTING_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CS_TAG_GETTING_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: NDR_CS_SIZE_CONVERT_ROUTINES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDR_CS_SIZE_CONVERT_ROUTINES = extern struct {
    pfnNetSize: CS_TYPE_NET_SIZE_ROUTINE,
    pfnToNetCs: CS_TYPE_TO_NETCS_ROUTINE,
    pfnLocalSize: CS_TYPE_LOCAL_SIZE_ROUTINE,
    pfnFromNetCs: CS_TYPE_FROM_NETCS_ROUTINE,
};
// --------------------------------------------------------
// Type: NDR_CS_ROUTINES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDR_CS_ROUTINES = extern struct {
    pSizeConvertRoutines: ?*NDR_CS_SIZE_CONVERT_ROUTINES,
    pTagGettingRoutines: ?*CS_TAG_GETTING_ROUTINE,
};
// --------------------------------------------------------
// Type: NDR_EXPR_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDR_EXPR_DESC = extern struct {
    pOffset: ?*u16,
    pFormatExpr: ?*u8,
};
// --------------------------------------------------------
// Type: MIDL_STUB_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MIDL_STUB_DESC = extern struct {
    RpcInterfaceInformation: ?*opaque{},
    pfnAllocate: ?*opaque{},
    pfnFree: ?*opaque{},
    IMPLICIT_HANDLE_INFO: _IMPLICIT_HANDLE_INFO_e__Union,
    apfnNdrRundownRoutines: ?*?*opaque{},
    aGenericBindingRoutinePairs: ?*GENERIC_BINDING_ROUTINE_PAIR,
    apfnExprEval: ?*?*opaque{},
    aXmitQuintuple: ?*XMIT_ROUTINE_QUINTUPLE,
    pFormatTypes: ?*u8,
    fCheckBounds: i32,
    Version: u32,
    pMallocFreeStruct: ?*MALLOC_FREE_STRUCT,
    MIDLVersion: i32,
    CommFaultOffsets: ?*COMM_FAULT_OFFSETS,
    aUserMarshalQuadruple: ?*USER_MARSHAL_ROUTINE_QUADRUPLE,
    NotifyRoutineTable: ?*?*opaque{},
    mFlags: ?*opaque{},
    CsRoutineTables: ?*NDR_CS_ROUTINES,
    ProxyServerInfo: ?*opaque{},
    pExprInfo: ?*NDR_EXPR_DESC,
    // --------------------------------------------------------
    // Type: _IMPLICIT_HANDLE_INFO_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _IMPLICIT_HANDLE_INFO_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: MIDL_FORMAT_STRING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MIDL_FORMAT_STRING = extern struct {
    Pad: i16,
    Format: u8,
};
// --------------------------------------------------------
// Type: STUB_THUNK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STUB_THUNK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: SERVER_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SERVER_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: MIDL_METHOD_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MIDL_METHOD_PROPERTY = extern struct {
    Id: u32,
    Value: ?*opaque{},
};
// --------------------------------------------------------
// Type: MIDL_METHOD_PROPERTY_MAP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MIDL_METHOD_PROPERTY_MAP = extern struct {
    Count: u32,
    Properties: ?*MIDL_METHOD_PROPERTY,
};
// --------------------------------------------------------
// Type: MIDL_INTERFACE_METHOD_PROPERTIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MIDL_INTERFACE_METHOD_PROPERTIES = extern struct {
    MethodCount: u16,
    MethodProperties: ?*?*MIDL_METHOD_PROPERTY_MAP,
};
// --------------------------------------------------------
// Type: _MIDL_SERVER_INFO_
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _MIDL_SERVER_INFO_ = extern struct {
    pStubDesc: ?*MIDL_STUB_DESC,
    DispatchTable: ?*?*opaque{},
    ProcString: ?*u8,
    FmtStringOffset: ?*u16,
    ThunkTable: ?*?*opaque{},
    pTransferSyntax: ?*RPC_SYNTAX_IDENTIFIER,
    nCount: ?*opaque{},
    pSyntaxInfo: ?*MIDL_SYNTAX_INFO,
};
// --------------------------------------------------------
// Type: MIDL_STUBLESS_PROXY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MIDL_STUBLESS_PROXY_INFO = extern struct {
    pStubDesc: ?*MIDL_STUB_DESC,
    ProcFormatString: ?*u8,
    FormatStringOffset: ?*u16,
    pTransferSyntax: ?*RPC_SYNTAX_IDENTIFIER,
    nCount: ?*opaque{},
    pSyntaxInfo: ?*MIDL_SYNTAX_INFO,
};
// --------------------------------------------------------
// Type: MIDL_SYNTAX_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MIDL_SYNTAX_INFO = extern struct {
    TransferSyntax: RPC_SYNTAX_IDENTIFIER,
    DispatchTable: ?*RPC_DISPATCH_TABLE,
    ProcString: ?*u8,
    FmtStringOffset: ?*u16,
    TypeString: ?*u8,
    aUserMarshalQuadruple: ?*opaque{},
    pMethodProperties: ?*MIDL_INTERFACE_METHOD_PROPERTIES,
    pReserved2: ?*opaque{},
};
// --------------------------------------------------------
// Type: CLIENT_CALL_RETURN
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const CLIENT_CALL_RETURN = *opaque{
};
// --------------------------------------------------------
// Type: XLAT_SIDE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const XLAT_SIDE = *opaque{
};
// --------------------------------------------------------
// Type: FULL_PTR_XLAT_TABLES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FULL_PTR_XLAT_TABLES = extern struct {
    RefIdToPointer: ?*opaque{},
    PointerToRefId: ?*opaque{},
    NextRefId: u32,
    XlatSide: XLAT_SIDE,
};
// --------------------------------------------------------
// Type: system_handle_t
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const system_handle_t = *opaque{
};
// --------------------------------------------------------
// Type: MIDL_INTERCEPTION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MIDL_INTERCEPTION_INFO = extern struct {
    Version: u32,
    ProcString: ?*u8,
    ProcFormatOffsetTable: ?*u16,
    ProcCount: u32,
    TypeString: ?*u8,
};
// --------------------------------------------------------
// Type: MIDL_WINRT_TYPE_SERIALIZATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MIDL_WINRT_TYPE_SERIALIZATION_INFO = extern struct {
    Version: u32,
    TypeFormatString: ?*u8,
    FormatStringSize: u16,
    TypeOffset: u16,
    StubDesc: ?*MIDL_STUB_DESC,
};
// --------------------------------------------------------
// Type: STUB_PHASE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STUB_PHASE = *opaque{
};
// --------------------------------------------------------
// Type: PROXY_PHASE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROXY_PHASE = *opaque{
};
// --------------------------------------------------------
// Type: RPC_CLIENT_ALLOC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_CLIENT_ALLOC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: RPC_CLIENT_FREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RPC_CLIENT_FREE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: NDR_USER_MARSHAL_INFO_LEVEL1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDR_USER_MARSHAL_INFO_LEVEL1 = extern struct {
    Buffer: ?*opaque{},
    BufferSize: u32,
    pfnAllocate: ?*opaque{},
    pfnFree: ?*opaque{},
    pRpcChannelBuffer: IRpcChannelBuffer,
    Reserved: ?[*]?*opaque{},
};
// --------------------------------------------------------
// Type: NDR_USER_MARSHAL_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDR_USER_MARSHAL_INFO = extern struct {
    InformationLevel: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: MIDL_ES_CODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MIDL_ES_CODE = *opaque{
};
// --------------------------------------------------------
// Type: MIDL_ES_HANDLE_STYLE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MIDL_ES_HANDLE_STYLE = *opaque{
};
// --------------------------------------------------------
// Type: MIDL_ES_ALLOC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MIDL_ES_ALLOC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: MIDL_ES_WRITE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MIDL_ES_WRITE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: MIDL_ES_READ
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MIDL_ES_READ = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: MIDL_TYPE_PICKLING_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MIDL_TYPE_PICKLING_INFO = extern struct {
    Version: u32,
    Flags: u32,
    Reserved: ?[*]?*opaque{},
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn IUnknown_QueryInterface_Proxy(
    This: IUnknown,
    riid: ?*Guid,
    ppvObject: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn IUnknown_AddRef_Proxy(
    This: IUnknown,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn IUnknown_Release_Proxy(
    This: IUnknown,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingCopy(
    SourceBinding: ?*opaque{},
    DestinationBinding: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingFree(
    Binding: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingSetOption(
    hBinding: ?*opaque{},
    option: u32,
    optionValue: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingInqOption(
    hBinding: ?*opaque{},
    option: u32,
    pOptionValue: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingFromStringBindingA(
    StringBinding: ?*u8,
    Binding: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingFromStringBindingW(
    StringBinding: ?*u16,
    Binding: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSsGetContextBinding(
    ContextHandle: ?*opaque{},
    Binding: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingInqObject(
    Binding: ?*opaque{},
    ObjectUuid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingReset(
    Binding: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingSetObject(
    Binding: ?*opaque{},
    ObjectUuid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtInqDefaultProtectLevel(
    AuthnSvc: u32,
    AuthnLevel: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingToStringBindingA(
    Binding: ?*opaque{},
    StringBinding: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingToStringBindingW(
    Binding: ?*opaque{},
    StringBinding: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingVectorFree(
    BindingVector: ?*?*RPC_BINDING_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcStringBindingComposeA(
    ObjUuid: ?*u8,
    ProtSeq: ?*u8,
    NetworkAddr: ?*u8,
    Endpoint: ?*u8,
    Options: ?*u8,
    StringBinding: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcStringBindingComposeW(
    ObjUuid: ?*u16,
    ProtSeq: ?*u16,
    NetworkAddr: ?*u16,
    Endpoint: ?*u16,
    Options: ?*u16,
    StringBinding: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcStringBindingParseA(
    StringBinding: ?*u8,
    ObjUuid: ?*?*u8,
    Protseq: ?*?*u8,
    NetworkAddr: ?*?*u8,
    Endpoint: ?*?*u8,
    NetworkOptions: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcStringBindingParseW(
    StringBinding: ?*u16,
    ObjUuid: ?*?*u16,
    Protseq: ?*?*u16,
    NetworkAddr: ?*?*u16,
    Endpoint: ?*?*u16,
    NetworkOptions: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcStringFreeA(
    String: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcStringFreeW(
    String: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcIfInqId(
    RpcIfHandle: ?*opaque{},
    RpcIfId: ?*RPC_IF_ID,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcNetworkIsProtseqValidA(
    Protseq: ?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcNetworkIsProtseqValidW(
    Protseq: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtInqComTimeout(
    Binding: ?*opaque{},
    Timeout: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtSetComTimeout(
    Binding: ?*opaque{},
    Timeout: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtSetCancelTimeout(
    Timeout: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcNetworkInqProtseqsA(
    ProtseqVector: ?*?*RPC_PROTSEQ_VECTORA,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcNetworkInqProtseqsW(
    ProtseqVector: ?*?*RPC_PROTSEQ_VECTORW,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcObjectInqType(
    ObjUuid: ?*Guid,
    TypeUuid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcObjectSetInqFn(
    InquiryFn: ?*RPC_OBJECT_INQ_FN,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcObjectSetType(
    ObjUuid: ?*Guid,
    TypeUuid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcProtseqVectorFreeA(
    ProtseqVector: ?*?*RPC_PROTSEQ_VECTORA,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcProtseqVectorFreeW(
    ProtseqVector: ?*?*RPC_PROTSEQ_VECTORW,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerInqBindings(
    BindingVector: ?*?*RPC_BINDING_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerInqBindingsEx(
    SecurityDescriptor: ?*opaque{},
    BindingVector: ?*?*RPC_BINDING_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerInqIf(
    IfSpec: ?*opaque{},
    MgrTypeUuid: ?*Guid,
    MgrEpv: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerListen(
    MinimumCallThreads: u32,
    MaxCalls: u32,
    DontWait: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerRegisterIf(
    IfSpec: ?*opaque{},
    MgrTypeUuid: ?*Guid,
    MgrEpv: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerRegisterIfEx(
    IfSpec: ?*opaque{},
    MgrTypeUuid: ?*Guid,
    MgrEpv: ?*opaque{},
    Flags: u32,
    MaxCalls: u32,
    IfCallback: ?*RPC_IF_CALLBACK_FN,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerRegisterIf2(
    IfSpec: ?*opaque{},
    MgrTypeUuid: ?*Guid,
    MgrEpv: ?*opaque{},
    Flags: u32,
    MaxCalls: u32,
    MaxRpcSize: u32,
    IfCallbackFn: ?*RPC_IF_CALLBACK_FN,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerRegisterIf3(
    IfSpec: ?*opaque{},
    MgrTypeUuid: ?*Guid,
    MgrEpv: ?*opaque{},
    Flags: u32,
    MaxCalls: u32,
    MaxRpcSize: u32,
    IfCallback: ?*RPC_IF_CALLBACK_FN,
    SecurityDescriptor: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUnregisterIf(
    IfSpec: ?*opaque{},
    MgrTypeUuid: ?*Guid,
    WaitForCallsToComplete: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUnregisterIfEx(
    IfSpec: ?*opaque{},
    MgrTypeUuid: ?*Guid,
    RundownContextHandles: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseAllProtseqs(
    MaxCalls: u32,
    SecurityDescriptor: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseAllProtseqsEx(
    MaxCalls: u32,
    SecurityDescriptor: ?*opaque{},
    Policy: ?*RPC_POLICY,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseAllProtseqsIf(
    MaxCalls: u32,
    IfSpec: ?*opaque{},
    SecurityDescriptor: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseAllProtseqsIfEx(
    MaxCalls: u32,
    IfSpec: ?*opaque{},
    SecurityDescriptor: ?*opaque{},
    Policy: ?*RPC_POLICY,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseProtseqA(
    Protseq: ?*u8,
    MaxCalls: u32,
    SecurityDescriptor: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseProtseqExA(
    Protseq: ?*u8,
    MaxCalls: u32,
    SecurityDescriptor: ?*opaque{},
    Policy: ?*RPC_POLICY,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseProtseqW(
    Protseq: ?*u16,
    MaxCalls: u32,
    SecurityDescriptor: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseProtseqExW(
    Protseq: ?*u16,
    MaxCalls: u32,
    SecurityDescriptor: ?*opaque{},
    Policy: ?*RPC_POLICY,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseProtseqEpA(
    Protseq: ?*u8,
    MaxCalls: u32,
    Endpoint: ?*u8,
    SecurityDescriptor: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseProtseqEpExA(
    Protseq: ?*u8,
    MaxCalls: u32,
    Endpoint: ?*u8,
    SecurityDescriptor: ?*opaque{},
    Policy: ?*RPC_POLICY,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseProtseqEpW(
    Protseq: ?*u16,
    MaxCalls: u32,
    Endpoint: ?*u16,
    SecurityDescriptor: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseProtseqEpExW(
    Protseq: ?*u16,
    MaxCalls: u32,
    Endpoint: ?*u16,
    SecurityDescriptor: ?*opaque{},
    Policy: ?*RPC_POLICY,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseProtseqIfA(
    Protseq: ?*u8,
    MaxCalls: u32,
    IfSpec: ?*opaque{},
    SecurityDescriptor: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseProtseqIfExA(
    Protseq: ?*u8,
    MaxCalls: u32,
    IfSpec: ?*opaque{},
    SecurityDescriptor: ?*opaque{},
    Policy: ?*RPC_POLICY,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseProtseqIfW(
    Protseq: ?*u16,
    MaxCalls: u32,
    IfSpec: ?*opaque{},
    SecurityDescriptor: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUseProtseqIfExW(
    Protseq: ?*u16,
    MaxCalls: u32,
    IfSpec: ?*opaque{},
    SecurityDescriptor: ?*opaque{},
    Policy: ?*RPC_POLICY,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerYield(
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtStatsVectorFree(
    StatsVector: ?*?*RPC_STATS_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtInqStats(
    Binding: ?*opaque{},
    Statistics: ?*?*RPC_STATS_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtIsServerListening(
    Binding: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtStopServerListening(
    Binding: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtWaitServerListen(
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtSetServerStackSize(
    ThreadStackSize: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSsDontSerializeContext(
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtEnableIdleCleanup(
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtInqIfIds(
    Binding: ?*opaque{},
    IfIdVector: ?*?*RPC_IF_ID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcIfIdVectorFree(
    IfIdVector: ?*?*RPC_IF_ID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtInqServerPrincNameA(
    Binding: ?*opaque{},
    AuthnSvc: u32,
    ServerPrincName: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtInqServerPrincNameW(
    Binding: ?*opaque{},
    AuthnSvc: u32,
    ServerPrincName: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerInqDefaultPrincNameA(
    AuthnSvc: u32,
    PrincName: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerInqDefaultPrincNameW(
    AuthnSvc: u32,
    PrincName: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcEpResolveBinding(
    Binding: ?*opaque{},
    IfSpec: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcNsBindingInqEntryNameA(
    Binding: ?*opaque{},
    EntryNameSyntax: u32,
    EntryName: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcNsBindingInqEntryNameW(
    Binding: ?*opaque{},
    EntryNameSyntax: u32,
    EntryName: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingCreateA(
    Template: ?*RPC_BINDING_HANDLE_TEMPLATE_V1_A,
    Security: ?*RPC_BINDING_HANDLE_SECURITY_V1_A,
    Options: ?*RPC_BINDING_HANDLE_OPTIONS_V1,
    Binding: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingCreateW(
    Template: ?*RPC_BINDING_HANDLE_TEMPLATE_V1_W,
    Security: ?*RPC_BINDING_HANDLE_SECURITY_V1_W,
    Options: ?*RPC_BINDING_HANDLE_OPTIONS_V1,
    Binding: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerInqBindingHandle(
    Binding: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcImpersonateClient(
    BindingHandle: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcImpersonateClient2(
    BindingHandle: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcRevertToSelfEx(
    BindingHandle: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcRevertToSelf(
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcImpersonateClientContainer(
    BindingHandle: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcRevertContainerImpersonation(
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingInqAuthClientA(
    ClientBinding: ?*opaque{},
    Privs: ?*?*opaque{},
    ServerPrincName: ?*?*u8,
    AuthnLevel: ?*u32,
    AuthnSvc: ?*u32,
    AuthzSvc: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingInqAuthClientW(
    ClientBinding: ?*opaque{},
    Privs: ?*?*opaque{},
    ServerPrincName: ?*?*u16,
    AuthnLevel: ?*u32,
    AuthnSvc: ?*u32,
    AuthzSvc: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingInqAuthClientExA(
    ClientBinding: ?*opaque{},
    Privs: ?*?*opaque{},
    ServerPrincName: ?*?*u8,
    AuthnLevel: ?*u32,
    AuthnSvc: ?*u32,
    AuthzSvc: ?*u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingInqAuthClientExW(
    ClientBinding: ?*opaque{},
    Privs: ?*?*opaque{},
    ServerPrincName: ?*?*u16,
    AuthnLevel: ?*u32,
    AuthnSvc: ?*u32,
    AuthzSvc: ?*u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingInqAuthInfoA(
    Binding: ?*opaque{},
    ServerPrincName: ?*?*u8,
    AuthnLevel: ?*u32,
    AuthnSvc: ?*u32,
    AuthIdentity: ?*?*opaque{},
    AuthzSvc: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingInqAuthInfoW(
    Binding: ?*opaque{},
    ServerPrincName: ?*?*u16,
    AuthnLevel: ?*u32,
    AuthnSvc: ?*u32,
    AuthIdentity: ?*?*opaque{},
    AuthzSvc: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingSetAuthInfoA(
    Binding: ?*opaque{},
    ServerPrincName: ?*u8,
    AuthnLevel: u32,
    AuthnSvc: u32,
    AuthIdentity: ?*opaque{},
    AuthzSvc: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingSetAuthInfoExA(
    Binding: ?*opaque{},
    ServerPrincName: ?*u8,
    AuthnLevel: u32,
    AuthnSvc: u32,
    AuthIdentity: ?*opaque{},
    AuthzSvc: u32,
    SecurityQos: ?*RPC_SECURITY_QOS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingSetAuthInfoW(
    Binding: ?*opaque{},
    ServerPrincName: ?*u16,
    AuthnLevel: u32,
    AuthnSvc: u32,
    AuthIdentity: ?*opaque{},
    AuthzSvc: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingSetAuthInfoExW(
    Binding: ?*opaque{},
    ServerPrincName: ?*u16,
    AuthnLevel: u32,
    AuthnSvc: u32,
    AuthIdentity: ?*opaque{},
    AuthzSvc: u32,
    SecurityQOS: ?*RPC_SECURITY_QOS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingInqAuthInfoExA(
    Binding: ?*opaque{},
    ServerPrincName: ?*?*u8,
    AuthnLevel: ?*u32,
    AuthnSvc: ?*u32,
    AuthIdentity: ?*?*opaque{},
    AuthzSvc: ?*u32,
    RpcQosVersion: u32,
    SecurityQOS: ?*RPC_SECURITY_QOS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingInqAuthInfoExW(
    Binding: ?*opaque{},
    ServerPrincName: ?*?*u16,
    AuthnLevel: ?*u32,
    AuthnSvc: ?*u32,
    AuthIdentity: ?*?*opaque{},
    AuthzSvc: ?*u32,
    RpcQosVersion: u32,
    SecurityQOS: ?*RPC_SECURITY_QOS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerCompleteSecurityCallback(
    BindingHandle: ?*opaque{},
    Status: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerRegisterAuthInfoA(
    ServerPrincName: ?*u8,
    AuthnSvc: u32,
    GetKeyFn: RPC_AUTH_KEY_RETRIEVAL_FN,
    Arg: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerRegisterAuthInfoW(
    ServerPrincName: ?*u16,
    AuthnSvc: u32,
    GetKeyFn: RPC_AUTH_KEY_RETRIEVAL_FN,
    Arg: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingServerFromClient(
    ClientBinding: ?*opaque{},
    ServerBinding: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcRaiseException(
    exception: i32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcTestCancel(
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerTestCancel(
    BindingHandle: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcCancelThread(
    Thread: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcCancelThreadEx(
    Thread: ?*opaque{},
    Timeout: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn UuidCreate(
    Uuid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn UuidCreateSequential(
    Uuid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn UuidToStringA(
    Uuid: ?*Guid,
    StringUuid: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn UuidFromStringA(
    StringUuid: ?*u8,
    Uuid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn UuidToStringW(
    Uuid: ?*Guid,
    StringUuid: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn UuidFromStringW(
    StringUuid: ?*u16,
    Uuid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn UuidCompare(
    Uuid1: ?*Guid,
    Uuid2: ?*Guid,
    Status: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn UuidCreateNil(
    NilUuid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn UuidEqual(
    Uuid1: ?*Guid,
    Uuid2: ?*Guid,
    Status: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn UuidHash(
    Uuid: ?*Guid,
    Status: ?*i32,
) callconv(@import("std").os.windows.WINAPI) u16;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn UuidIsNil(
    Uuid: ?*Guid,
    Status: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcEpRegisterNoReplaceA(
    IfSpec: ?*opaque{},
    BindingVector: ?*RPC_BINDING_VECTOR,
    UuidVector: ?*UUID_VECTOR,
    Annotation: ?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcEpRegisterNoReplaceW(
    IfSpec: ?*opaque{},
    BindingVector: ?*RPC_BINDING_VECTOR,
    UuidVector: ?*UUID_VECTOR,
    Annotation: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcEpRegisterA(
    IfSpec: ?*opaque{},
    BindingVector: ?*RPC_BINDING_VECTOR,
    UuidVector: ?*UUID_VECTOR,
    Annotation: ?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcEpRegisterW(
    IfSpec: ?*opaque{},
    BindingVector: ?*RPC_BINDING_VECTOR,
    UuidVector: ?*UUID_VECTOR,
    Annotation: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcEpUnregister(
    IfSpec: ?*opaque{},
    BindingVector: ?*RPC_BINDING_VECTOR,
    UuidVector: ?*UUID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn DceErrorInqTextA(
    RpcStatus: i32,
    ErrorText: ?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn DceErrorInqTextW(
    RpcStatus: i32,
    ErrorText: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtEpEltInqBegin(
    EpBinding: ?*opaque{},
    InquiryType: u32,
    IfId: ?*RPC_IF_ID,
    VersOption: u32,
    ObjectUuid: ?*Guid,
    InquiryContext: ?*?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtEpEltInqDone(
    InquiryContext: ?*?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtEpEltInqNextA(
    InquiryContext: ?*?*opaque{},
    IfId: ?*RPC_IF_ID,
    Binding: ?*?*opaque{},
    ObjectUuid: ?*Guid,
    Annotation: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtEpEltInqNextW(
    InquiryContext: ?*?*opaque{},
    IfId: ?*RPC_IF_ID,
    Binding: ?*?*opaque{},
    ObjectUuid: ?*Guid,
    Annotation: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtEpUnregister(
    EpBinding: ?*opaque{},
    IfId: ?*RPC_IF_ID,
    Binding: ?*opaque{},
    ObjectUuid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcMgmtSetAuthorizationFn(
    AuthorizationFn: RPC_MGMT_AUTHORIZATION_FN,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcExceptionFilter(
    ExceptionCode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerInterfaceGroupCreateW(
    Interfaces: ?*RPC_INTERFACE_TEMPLATEW,
    NumIfs: u32,
    Endpoints: ?*RPC_ENDPOINT_TEMPLATEW,
    NumEndpoints: u32,
    IdlePeriod: u32,
    IdleCallbackFn: RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN,
    IdleCallbackContext: ?*opaque{},
    IfGroup: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerInterfaceGroupCreateA(
    Interfaces: ?*RPC_INTERFACE_TEMPLATEA,
    NumIfs: u32,
    Endpoints: ?*RPC_ENDPOINT_TEMPLATEA,
    NumEndpoints: u32,
    IdlePeriod: u32,
    IdleCallbackFn: RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN,
    IdleCallbackContext: ?*opaque{},
    IfGroup: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerInterfaceGroupClose(
    IfGroup: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerInterfaceGroupActivate(
    IfGroup: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerInterfaceGroupDeactivate(
    IfGroup: ?*opaque{},
    ForceDeactivation: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerInterfaceGroupInqBindings(
    IfGroup: ?*opaque{},
    BindingVector: ?*?*RPC_BINDING_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcNegotiateTransferSyntax(
    Message: ?*RPC_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcGetBuffer(
    Message: ?*RPC_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcGetBufferWithObject(
    Message: ?*RPC_MESSAGE,
    ObjectUuid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcSendReceive(
    Message: ?*RPC_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcFreeBuffer(
    Message: ?*RPC_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcSend(
    Message: ?*RPC_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcReceive(
    Message: ?*RPC_MESSAGE,
    Size: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcFreePipeBuffer(
    Message: ?*RPC_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcReallocPipeBuffer(
    Message: ?*RPC_MESSAGE,
    NewSize: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcRequestMutex(
    Mutex: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcClearMutex(
    Mutex: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcDeleteMutex(
    Mutex: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcAllocate(
    Size: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcFree(
    Object: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcPauseExecution(
    Milliseconds: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcGetExtendedError(
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcSystemHandleTypeSpecificWork(
    Handle: ?*opaque{},
    ActualType: u8,
    IdlType: u8,
    MarshalDirection: LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcGetCurrentCallHandle(
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcNsInterfaceExported(
    EntryNameSyntax: u32,
    EntryName: ?*u16,
    RpcInterfaceInformation: ?*RPC_SERVER_INTERFACE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcNsInterfaceUnexported(
    EntryNameSyntax: u32,
    EntryName: ?*u16,
    RpcInterfaceInformation: ?*RPC_SERVER_INTERFACE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingToStaticStringBindingW(
    Binding: ?*opaque{},
    StringBinding: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingInqSecurityContext(
    Binding: ?*opaque{},
    SecurityContextHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingInqSecurityContextKeyInfo(
    Binding: ?*opaque{},
    KeyInfo: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingInqWireIdForSnego(
    Binding: ?*opaque{},
    WireId: ?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingInqMarshalledTargetInfo(
    Binding: ?*opaque{},
    MarshalledTargetInfoSize: ?*u32,
    MarshalledTargetInfo: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingInqLocalClientPID(
    Binding: ?*opaque{},
    Pid: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingHandleToAsyncHandle(
    Binding: ?*opaque{},
    AsyncHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcNsBindingSetEntryNameW(
    Binding: ?*opaque{},
    EntryNameSyntax: u32,
    EntryName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcNsBindingSetEntryNameA(
    Binding: ?*opaque{},
    EntryNameSyntax: u32,
    EntryName: ?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerUseProtseqEp2A(
    NetworkAddress: ?*u8,
    Protseq: ?*u8,
    MaxCalls: u32,
    Endpoint: ?*u8,
    SecurityDescriptor: ?*opaque{},
    Policy: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerUseProtseqEp2W(
    NetworkAddress: ?*u16,
    Protseq: ?*u16,
    MaxCalls: u32,
    Endpoint: ?*u16,
    SecurityDescriptor: ?*opaque{},
    Policy: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerUseProtseq2W(
    NetworkAddress: ?*u16,
    Protseq: ?*u16,
    MaxCalls: u32,
    SecurityDescriptor: ?*opaque{},
    Policy: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerUseProtseq2A(
    NetworkAddress: ?*u8,
    Protseq: ?*u8,
    MaxCalls: u32,
    SecurityDescriptor: ?*opaque{},
    Policy: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerStartService(
    Protseq: ?*u16,
    Endpoint: ?*u16,
    IfSpec: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingInqDynamicEndpointW(
    Binding: ?*opaque{},
    DynamicEndpoint: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingInqDynamicEndpointA(
    Binding: ?*opaque{},
    DynamicEndpoint: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerCheckClientRestriction(
    Context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingInqTransportType(
    Binding: ?*opaque{},
    Type: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcIfInqTransferSyntaxes(
    RpcIfHandle: ?*opaque{},
    TransferSyntaxes: ?*RPC_TRANSFER_SYNTAX,
    TransferSyntaxSize: u32,
    TransferSyntaxCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_UuidCreate(
    Uuid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingCopy(
    SourceBinding: ?*opaque{},
    DestinationBinding: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingIsClientLocal(
    BindingHandle: ?*opaque{},
    ClientLocalFlag: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingCreateNP(
    ServerName: ?*u16,
    ServiceName: ?*u16,
    NetworkOptions: ?*u16,
    Binding: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcSsDontSerializeContext(
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerRegisterForwardFunction(
    pForwardFunction: ?*RPC_FORWARD_FUNCTION,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerInqAddressChangeFn(
) callconv(@import("std").os.windows.WINAPI) ?*RPC_ADDRESS_CHANGE_FN;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerSetAddressChangeFn(
    pAddressChangeFn: ?*RPC_ADDRESS_CHANGE_FN,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerInqLocalConnAddress(
    Binding: ?*opaque{},
    Buffer: ?*opaque{},
    BufferSize: ?*u32,
    AddressFormat: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerInqRemoteConnAddress(
    Binding: ?*opaque{},
    Buffer: ?*opaque{},
    BufferSize: ?*u32,
    AddressFormat: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcSessionStrictContextHandle(
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcTurnOnEEInfoPropagation(
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerInqTransportType(
    Type: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcMapWin32Status(
    Status: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcRecordCalloutFailure(
    RpcStatus: i32,
    CallOutState: ?*RDR_CALLOUT_STATE,
    DllName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcMgmtEnableDedicatedThreadPool(
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcGetDefaultSD(
    ppSecurityDescriptor: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcOpenClientProcess(
    Binding: ?*opaque{},
    DesiredAccess: u32,
    ClientProcess: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingIsServerLocal(
    Binding: ?*opaque{},
    ServerLocalFlag: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingSetPrivateOption(
    hBinding: ?*opaque{},
    option: u32,
    optionValue: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerSubscribeForDisconnectNotification(
    Binding: ?*opaque{},
    hEvent: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerGetAssociationID(
    Binding: ?*opaque{},
    AssociationID: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerDisableExceptionFilter(
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerSubscribeForDisconnectNotification2(
    Binding: ?*opaque{},
    hEvent: ?*opaque{},
    SubscriptionId: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcServerUnsubscribeForDisconnectNotification(
    Binding: ?*opaque{},
    SubscriptionId: Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingExportA(
    EntryNameSyntax: u32,
    EntryName: ?*u8,
    IfSpec: ?*opaque{},
    BindingVec: ?*RPC_BINDING_VECTOR,
    ObjectUuidVec: ?*UUID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingUnexportA(
    EntryNameSyntax: u32,
    EntryName: ?*u8,
    IfSpec: ?*opaque{},
    ObjectUuidVec: ?*UUID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingExportW(
    EntryNameSyntax: u32,
    EntryName: ?*u16,
    IfSpec: ?*opaque{},
    BindingVec: ?*RPC_BINDING_VECTOR,
    ObjectUuidVec: ?*UUID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingUnexportW(
    EntryNameSyntax: u32,
    EntryName: ?*u16,
    IfSpec: ?*opaque{},
    ObjectUuidVec: ?*UUID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingExportPnPA(
    EntryNameSyntax: u32,
    EntryName: ?*u8,
    IfSpec: ?*opaque{},
    ObjectVector: ?*UUID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingUnexportPnPA(
    EntryNameSyntax: u32,
    EntryName: ?*u8,
    IfSpec: ?*opaque{},
    ObjectVector: ?*UUID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingExportPnPW(
    EntryNameSyntax: u32,
    EntryName: ?*u16,
    IfSpec: ?*opaque{},
    ObjectVector: ?*UUID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingUnexportPnPW(
    EntryNameSyntax: u32,
    EntryName: ?*u16,
    IfSpec: ?*opaque{},
    ObjectVector: ?*UUID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingLookupBeginA(
    EntryNameSyntax: u32,
    EntryName: ?*u8,
    IfSpec: ?*opaque{},
    ObjUuid: ?*Guid,
    BindingMaxCount: u32,
    LookupContext: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingLookupBeginW(
    EntryNameSyntax: u32,
    EntryName: ?*u16,
    IfSpec: ?*opaque{},
    ObjUuid: ?*Guid,
    BindingMaxCount: u32,
    LookupContext: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingLookupNext(
    LookupContext: ?*opaque{},
    BindingVec: ?*?*RPC_BINDING_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingLookupDone(
    LookupContext: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsGroupDeleteA(
    GroupNameSyntax: u32,
    GroupName: ?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsGroupMbrAddA(
    GroupNameSyntax: u32,
    GroupName: ?*u8,
    MemberNameSyntax: u32,
    MemberName: ?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsGroupMbrRemoveA(
    GroupNameSyntax: u32,
    GroupName: ?*u8,
    MemberNameSyntax: u32,
    MemberName: ?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsGroupMbrInqBeginA(
    GroupNameSyntax: u32,
    GroupName: ?*u8,
    MemberNameSyntax: u32,
    InquiryContext: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsGroupMbrInqNextA(
    InquiryContext: ?*opaque{},
    MemberName: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsGroupDeleteW(
    GroupNameSyntax: u32,
    GroupName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsGroupMbrAddW(
    GroupNameSyntax: u32,
    GroupName: ?*u16,
    MemberNameSyntax: u32,
    MemberName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsGroupMbrRemoveW(
    GroupNameSyntax: u32,
    GroupName: ?*u16,
    MemberNameSyntax: u32,
    MemberName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsGroupMbrInqBeginW(
    GroupNameSyntax: u32,
    GroupName: ?*u16,
    MemberNameSyntax: u32,
    InquiryContext: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsGroupMbrInqNextW(
    InquiryContext: ?*opaque{},
    MemberName: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsGroupMbrInqDone(
    InquiryContext: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsProfileDeleteA(
    ProfileNameSyntax: u32,
    ProfileName: ?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsProfileEltAddA(
    ProfileNameSyntax: u32,
    ProfileName: ?*u8,
    IfId: ?*RPC_IF_ID,
    MemberNameSyntax: u32,
    MemberName: ?*u8,
    Priority: u32,
    Annotation: ?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsProfileEltRemoveA(
    ProfileNameSyntax: u32,
    ProfileName: ?*u8,
    IfId: ?*RPC_IF_ID,
    MemberNameSyntax: u32,
    MemberName: ?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsProfileEltInqBeginA(
    ProfileNameSyntax: u32,
    ProfileName: ?*u8,
    InquiryType: u32,
    IfId: ?*RPC_IF_ID,
    VersOption: u32,
    MemberNameSyntax: u32,
    MemberName: ?*u8,
    InquiryContext: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsProfileEltInqNextA(
    InquiryContext: ?*opaque{},
    IfId: ?*RPC_IF_ID,
    MemberName: ?*?*u8,
    Priority: ?*u32,
    Annotation: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsProfileDeleteW(
    ProfileNameSyntax: u32,
    ProfileName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsProfileEltAddW(
    ProfileNameSyntax: u32,
    ProfileName: ?*u16,
    IfId: ?*RPC_IF_ID,
    MemberNameSyntax: u32,
    MemberName: ?*u16,
    Priority: u32,
    Annotation: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsProfileEltRemoveW(
    ProfileNameSyntax: u32,
    ProfileName: ?*u16,
    IfId: ?*RPC_IF_ID,
    MemberNameSyntax: u32,
    MemberName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsProfileEltInqBeginW(
    ProfileNameSyntax: u32,
    ProfileName: ?*u16,
    InquiryType: u32,
    IfId: ?*RPC_IF_ID,
    VersOption: u32,
    MemberNameSyntax: u32,
    MemberName: ?*u16,
    InquiryContext: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsProfileEltInqNextW(
    InquiryContext: ?*opaque{},
    IfId: ?*RPC_IF_ID,
    MemberName: ?*?*u16,
    Priority: ?*u32,
    Annotation: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsProfileEltInqDone(
    InquiryContext: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsEntryObjectInqBeginA(
    EntryNameSyntax: u32,
    EntryName: ?*u8,
    InquiryContext: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsEntryObjectInqBeginW(
    EntryNameSyntax: u32,
    EntryName: ?*u16,
    InquiryContext: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsEntryObjectInqNext(
    InquiryContext: ?*opaque{},
    ObjUuid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsEntryObjectInqDone(
    InquiryContext: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsEntryExpandNameA(
    EntryNameSyntax: u32,
    EntryName: ?*u8,
    ExpandedName: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsMgmtBindingUnexportA(
    EntryNameSyntax: u32,
    EntryName: ?*u8,
    IfId: ?*RPC_IF_ID,
    VersOption: u32,
    ObjectUuidVec: ?*UUID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsMgmtEntryCreateA(
    EntryNameSyntax: u32,
    EntryName: ?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsMgmtEntryDeleteA(
    EntryNameSyntax: u32,
    EntryName: ?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsMgmtEntryInqIfIdsA(
    EntryNameSyntax: u32,
    EntryName: ?*u8,
    IfIdVec: ?*?*RPC_IF_ID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsMgmtHandleSetExpAge(
    NsHandle: ?*opaque{},
    ExpirationAge: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsMgmtInqExpAge(
    ExpirationAge: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsMgmtSetExpAge(
    ExpirationAge: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsEntryExpandNameW(
    EntryNameSyntax: u32,
    EntryName: ?*u16,
    ExpandedName: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsMgmtBindingUnexportW(
    EntryNameSyntax: u32,
    EntryName: ?*u16,
    IfId: ?*RPC_IF_ID,
    VersOption: u32,
    ObjectUuidVec: ?*UUID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsMgmtEntryCreateW(
    EntryNameSyntax: u32,
    EntryName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsMgmtEntryDeleteW(
    EntryNameSyntax: u32,
    EntryName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsMgmtEntryInqIfIdsW(
    EntryNameSyntax: u32,
    EntryName: ?*u16,
    IfIdVec: ?*?*RPC_IF_ID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingImportBeginA(
    EntryNameSyntax: u32,
    EntryName: ?*u8,
    IfSpec: ?*opaque{},
    ObjUuid: ?*Guid,
    ImportContext: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingImportBeginW(
    EntryNameSyntax: u32,
    EntryName: ?*u16,
    IfSpec: ?*opaque{},
    ObjUuid: ?*Guid,
    ImportContext: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingImportNext(
    ImportContext: ?*opaque{},
    Binding: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingImportDone(
    ImportContext: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCNS4" fn RpcNsBindingSelect(
    BindingVec: ?*RPC_BINDING_VECTOR,
    Binding: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcAsyncRegisterInfo(
    pAsync: ?*RPC_ASYNC_STATE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcAsyncInitializeHandle(
    pAsync: ?*RPC_ASYNC_STATE,
    Size: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcAsyncGetCallStatus(
    pAsync: ?*RPC_ASYNC_STATE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcAsyncCompleteCall(
    pAsync: ?*RPC_ASYNC_STATE,
    Reply: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcAsyncAbortCall(
    pAsync: ?*RPC_ASYNC_STATE,
    ExceptionCode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcAsyncCancelCall(
    pAsync: ?*RPC_ASYNC_STATE,
    fAbort: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcErrorStartEnumeration(
    EnumHandle: ?*RPC_ERROR_ENUM_HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcErrorGetNextRecord(
    EnumHandle: ?*RPC_ERROR_ENUM_HANDLE,
    CopyStrings: BOOL,
    ErrorInfo: ?*RPC_EXTENDED_ERROR_INFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcErrorEndEnumeration(
    EnumHandle: ?*RPC_ERROR_ENUM_HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcErrorResetEnumeration(
    EnumHandle: ?*RPC_ERROR_ENUM_HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcErrorGetNumberOfRecords(
    EnumHandle: ?*RPC_ERROR_ENUM_HANDLE,
    Records: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcErrorSaveErrorInfo(
    EnumHandle: ?*RPC_ERROR_ENUM_HANDLE,
    ErrorBlob: ?*?*opaque{},
    BlobSize: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcErrorLoadErrorInfo(
    ErrorBlob: ?*opaque{},
    BlobSize: ?*opaque{},
    EnumHandle: ?*RPC_ERROR_ENUM_HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcErrorAddRecord(
    ErrorInfo: ?*RPC_EXTENDED_ERROR_INFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcErrorClearInformation(
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcGetAuthorizationContextForClient(
    ClientBinding: ?*opaque{},
    ImpersonateOnReturn: BOOL,
    Reserved1: ?*opaque{},
    pExpirationTime: ?*LARGE_INTEGER,
    Reserved2: LUID,
    Reserved3: u32,
    Reserved4: ?*opaque{},
    pAuthzClientContext: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcFreeAuthorizationContext(
    pAuthzClientContext: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSsContextLockExclusive(
    ServerBindingHandle: ?*opaque{},
    UserContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSsContextLockShared(
    ServerBindingHandle: ?*opaque{},
    UserContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerInqCallAttributesW(
    ClientBinding: ?*opaque{},
    RpcCallAttributes: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerInqCallAttributesA(
    ClientBinding: ?*opaque{},
    RpcCallAttributes: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerSubscribeForNotification(
    Binding: ?*opaque{},
    Notification: RPC_NOTIFICATIONS,
    NotificationType: RPC_NOTIFICATION_TYPES,
    NotificationInfo: ?*RPC_ASYNC_NOTIFICATION_INFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcServerUnsubscribeForNotification(
    Binding: ?*opaque{},
    Notification: RPC_NOTIFICATIONS,
    NotificationsQueued: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingBind(
    pAsync: ?*RPC_ASYNC_STATE,
    Binding: ?*opaque{},
    IfSpec: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcBindingUnbind(
    Binding: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcAsyncSetHandle(
    Message: ?*RPC_MESSAGE,
    pAsync: ?*RPC_ASYNC_STATE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcAsyncAbortCall(
    pAsync: ?*RPC_ASYNC_STATE,
    ExceptionCode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcExceptionFilter(
    ExceptionCode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn I_RpcBindingInqClientTokenAttributes(
    Binding: ?*opaque{},
    TokenId: ?*LUID,
    AuthenticationId: ?*LUID,
    ModifiedId: ?*LUID,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NDRCContextBinding(
    CContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NDRCContextMarshall(
    CContext: ?*opaque{},
    pBuff: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NDRCContextUnmarshall(
    pCContext: ?*?*opaque{},
    hBinding: ?*opaque{},
    pBuff: ?*opaque{},
    DataRepresentation: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NDRSContextMarshall(
    CContext: ?*NDR_SCONTEXT_1,
    pBuff: ?*opaque{},
    userRunDownIn: NDR_RUNDOWN,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NDRSContextUnmarshall(
    pBuff: ?*opaque{},
    DataRepresentation: u32,
) callconv(@import("std").os.windows.WINAPI) ?*NDR_SCONTEXT_1;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NDRSContextMarshallEx(
    BindingHandle: ?*opaque{},
    CContext: ?*NDR_SCONTEXT_1,
    pBuff: ?*opaque{},
    userRunDownIn: NDR_RUNDOWN,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NDRSContextMarshall2(
    BindingHandle: ?*opaque{},
    CContext: ?*NDR_SCONTEXT_1,
    pBuff: ?*opaque{},
    userRunDownIn: NDR_RUNDOWN,
    CtxGuard: ?*opaque{},
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NDRSContextUnmarshallEx(
    BindingHandle: ?*opaque{},
    pBuff: ?*opaque{},
    DataRepresentation: u32,
) callconv(@import("std").os.windows.WINAPI) ?*NDR_SCONTEXT_1;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NDRSContextUnmarshall2(
    BindingHandle: ?*opaque{},
    pBuff: ?*opaque{},
    DataRepresentation: u32,
    CtxGuard: ?*opaque{},
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*NDR_SCONTEXT_1;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSsDestroyClientContext(
    ContextHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrSimpleTypeMarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    FormatChar: u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrPointerMarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantStructMarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantVaryingStructMarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrFixedArrayMarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantVaryingArrayMarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrVaryingArrayMarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrNonConformantStringMarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantStringMarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrEncapsulatedUnionMarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrNonEncapsulatedUnionMarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrByteCountPointerMarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrXmitOrRepAsMarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrUserMarshalMarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrInterfacePointerMarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrClientContextMarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    ContextHandle: ?*opaque{},
    fCheck: i32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrServerContextMarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    ContextHandle: ?*NDR_SCONTEXT_1,
    RundownRoutine: NDR_RUNDOWN,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrServerContextNewMarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    ContextHandle: ?*NDR_SCONTEXT_1,
    RundownRoutine: NDR_RUNDOWN,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrSimpleTypeUnmarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    FormatChar: u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrRangeUnmarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    ppMemory: ?*?*u8,
    pFormat: ?*u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrCorrelationInitialize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*opaque{},
    CacheSize: u32,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrCorrelationPass(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrCorrelationFree(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrPointerUnmarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    ppMemory: ?*?*u8,
    pFormat: ?*u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantStructUnmarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    ppMemory: ?*?*u8,
    pFormat: ?*u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantVaryingStructUnmarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    ppMemory: ?*?*u8,
    pFormat: ?*u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrFixedArrayUnmarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    ppMemory: ?*?*u8,
    pFormat: ?*u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantArrayUnmarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    ppMemory: ?*?*u8,
    pFormat: ?*u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantVaryingArrayUnmarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    ppMemory: ?*?*u8,
    pFormat: ?*u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrVaryingArrayUnmarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    ppMemory: ?*?*u8,
    pFormat: ?*u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrNonConformantStringUnmarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    ppMemory: ?*?*u8,
    pFormat: ?*u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantStringUnmarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    ppMemory: ?*?*u8,
    pFormat: ?*u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrEncapsulatedUnionUnmarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    ppMemory: ?*?*u8,
    pFormat: ?*u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrNonEncapsulatedUnionUnmarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    ppMemory: ?*?*u8,
    pFormat: ?*u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrByteCountPointerUnmarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    ppMemory: ?*?*u8,
    pFormat: ?*u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrXmitOrRepAsUnmarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    ppMemory: ?*?*u8,
    pFormat: ?*u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrInterfacePointerUnmarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    ppMemory: ?*?*u8,
    pFormat: ?*u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrClientContextUnmarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pContextHandle: ?*?*opaque{},
    BindHandle: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrServerContextUnmarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) ?*NDR_SCONTEXT_1;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrContextHandleInitialize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) ?*NDR_SCONTEXT_1;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrServerContextNewUnmarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) ?*NDR_SCONTEXT_1;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrPointerBufferSize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantStructBufferSize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantVaryingStructBufferSize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrFixedArrayBufferSize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantVaryingArrayBufferSize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrVaryingArrayBufferSize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantStringBufferSize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrNonConformantStringBufferSize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrEncapsulatedUnionBufferSize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrNonEncapsulatedUnionBufferSize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrByteCountPointerBufferSize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrXmitOrRepAsBufferSize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrUserMarshalBufferSize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrInterfacePointerBufferSize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrContextHandleSize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrPointerMemorySize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrSimpleStructMemorySize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantStructMemorySize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantVaryingStructMemorySize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrComplexStructMemorySize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrFixedArrayMemorySize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantArrayMemorySize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantVaryingArrayMemorySize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrVaryingArrayMemorySize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrComplexArrayMemorySize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantStringMemorySize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrNonConformantStringMemorySize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrEncapsulatedUnionMemorySize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrNonEncapsulatedUnionMemorySize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrXmitOrRepAsMemorySize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrUserMarshalMemorySize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrInterfacePointerMemorySize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrPointerFree(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrSimpleStructFree(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantStructFree(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantVaryingStructFree(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrComplexStructFree(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrFixedArrayFree(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantArrayFree(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConformantVaryingArrayFree(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrVaryingArrayFree(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrComplexArrayFree(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrEncapsulatedUnionFree(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrNonEncapsulatedUnionFree(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrByteCountPointerFree(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrXmitOrRepAsFree(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrUserMarshalFree(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrInterfacePointerFree(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*u8,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConvert2(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pFormat: ?*u8,
    NumberParams: i32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrConvert(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrUserMarshalSimpleTypeConvert(
    pFlags: ?*u32,
    pBuffer: ?*u8,
    FormatChar: u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrClientInitializeNew(
    pRpcMsg: ?*RPC_MESSAGE,
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pStubDescriptor: ?*MIDL_STUB_DESC,
    ProcNum: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrServerInitializeNew(
    pRpcMsg: ?*RPC_MESSAGE,
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pStubDescriptor: ?*MIDL_STUB_DESC,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrServerInitializePartial(
    pRpcMsg: ?*RPC_MESSAGE,
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pStubDescriptor: ?*MIDL_STUB_DESC,
    RequestedBufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrClientInitialize(
    pRpcMsg: ?*RPC_MESSAGE,
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pStubDescriptor: ?*MIDL_STUB_DESC,
    ProcNum: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrServerInitialize(
    pRpcMsg: ?*RPC_MESSAGE,
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pStubDescriptor: ?*MIDL_STUB_DESC,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrServerInitializeUnmarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pStubDescriptor: ?*MIDL_STUB_DESC,
    pRpcMsg: ?*RPC_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrServerInitializeMarshall(
    pRpcMsg: ?*RPC_MESSAGE,
    pStubMsg: ?*MIDL_STUB_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrGetBuffer(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    BufferLength: u32,
    Handle: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrNsGetBuffer(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    BufferLength: u32,
    Handle: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrSendReceive(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pBufferEnd: ?*u8,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrNsSendReceive(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pBufferEnd: ?*u8,
    pAutoHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrFreeBuffer(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrGetDcomProtocolVersion(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pVersion: ?*RPC_VERSION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrClientCall2(
    pStubDescriptor: ?*MIDL_STUB_DESC,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) CLIENT_CALL_RETURN;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrAsyncClientCall(
    pStubDescriptor: ?*MIDL_STUB_DESC,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) CLIENT_CALL_RETURN;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrDcomAsyncClientCall(
    pStubDescriptor: ?*MIDL_STUB_DESC,
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) CLIENT_CALL_RETURN;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrAsyncServerCall(
    pRpcMsg: ?*RPC_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrDcomAsyncStubCall(
    pThis: IRpcStubBuffer,
    pChannel: IRpcChannelBuffer,
    pRpcMsg: ?*RPC_MESSAGE,
    pdwStubPhase: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrStubCall2(
    pThis: ?*opaque{},
    pChannel: ?*opaque{},
    pRpcMsg: ?*RPC_MESSAGE,
    pdwStubPhase: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrServerCall2(
    pRpcMsg: ?*RPC_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMapCommAndFaultStatus(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pCommStatus: ?*u32,
    pFaultStatus: ?*u32,
    Status: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSsAllocate(
    Size: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSsDisableAllocate(
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSsEnableAllocate(
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSsFree(
    NodeToFree: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSsGetThreadHandle(
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSsSetClientAllocFree(
    ClientAlloc: ?*RPC_CLIENT_ALLOC,
    ClientFree: ?*RPC_CLIENT_FREE,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSsSetThreadHandle(
    Id: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSsSwapClientAllocFree(
    ClientAlloc: ?*RPC_CLIENT_ALLOC,
    ClientFree: ?*RPC_CLIENT_FREE,
    OldClientAlloc: ?*?*RPC_CLIENT_ALLOC,
    OldClientFree: ?*?*RPC_CLIENT_FREE,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSmAllocate(
    Size: ?*opaque{},
    pStatus: ?*i32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSmClientFree(
    pNodeToFree: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSmDestroyClientContext(
    ContextHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSmDisableAllocate(
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSmEnableAllocate(
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSmFree(
    NodeToFree: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSmGetThreadHandle(
    pStatus: ?*i32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSmSetClientAllocFree(
    ClientAlloc: ?*RPC_CLIENT_ALLOC,
    ClientFree: ?*RPC_CLIENT_FREE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSmSetThreadHandle(
    Id: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcSmSwapClientAllocFree(
    ClientAlloc: ?*RPC_CLIENT_ALLOC,
    ClientFree: ?*RPC_CLIENT_FREE,
    OldClientAlloc: ?*?*RPC_CLIENT_ALLOC,
    OldClientFree: ?*?*RPC_CLIENT_FREE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrRpcSsEnableAllocate(
    pMessage: ?*MIDL_STUB_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrRpcSsDisableAllocate(
    pMessage: ?*MIDL_STUB_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrRpcSmSetClientToOsf(
    pMessage: ?*MIDL_STUB_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrRpcSmClientAllocate(
    Size: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrRpcSmClientFree(
    NodeToFree: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrRpcSsDefaultAllocate(
    Size: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrRpcSsDefaultFree(
    NodeToFree: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrFullPointerXlatInit(
    NumberOfPointers: u32,
    XlatSide: XLAT_SIDE,
) callconv(@import("std").os.windows.WINAPI) ?*FULL_PTR_XLAT_TABLES;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrFullPointerXlatFree(
    pXlatTables: ?*FULL_PTR_XLAT_TABLES,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrAllocate(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    Len: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrClearOutParameters(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pFormat: ?*u8,
    ArgAddr: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrOleAllocate(
    Size: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrOleFree(
    NodeToFree: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrGetUserMarshalInfo(
    pFlags: ?*u32,
    InformationLevel: u32,
    pMarshalInfo: ?*NDR_USER_MARSHAL_INFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrCreateServerInterfaceFromStub(
    pStub: IRpcStubBuffer,
    pServerIf: ?*RPC_SERVER_INTERFACE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrClientCall3(
    pProxyInfo: ?*MIDL_STUBLESS_PROXY_INFO,
    nProcNum: u32,
    pReturnValue: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) CLIENT_CALL_RETURN;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn Ndr64AsyncClientCall(
    pProxyInfo: ?*MIDL_STUBLESS_PROXY_INFO,
    nProcNum: u32,
    pReturnValue: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) CLIENT_CALL_RETURN;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn Ndr64DcomAsyncClientCall(
    pProxyInfo: ?*MIDL_STUBLESS_PROXY_INFO,
    nProcNum: u32,
    pReturnValue: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) CLIENT_CALL_RETURN;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn Ndr64AsyncServerCall64(
    pRpcMsg: ?*RPC_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn Ndr64AsyncServerCallAll(
    pRpcMsg: ?*RPC_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn Ndr64DcomAsyncStubCall(
    pThis: IRpcStubBuffer,
    pChannel: IRpcChannelBuffer,
    pRpcMsg: ?*RPC_MESSAGE,
    pdwStubPhase: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrStubCall3(
    pThis: ?*opaque{},
    pChannel: ?*opaque{},
    pRpcMsg: ?*RPC_MESSAGE,
    pdwStubPhase: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrServerCallAll(
    pRpcMsg: ?*RPC_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrServerCallNdr64(
    pRpcMsg: ?*RPC_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrPartialIgnoreClientMarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrPartialIgnoreServerUnmarshall(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    ppMemory: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrPartialIgnoreClientBufferSize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    pMemory: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrPartialIgnoreServerInitialize(
    pStubMsg: ?*MIDL_STUB_MESSAGE,
    ppMemory: ?*?*opaque{},
    pFormat: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcUserFree(
    AsyncHandle: ?*opaque{},
    pBuffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn MesEncodeIncrementalHandleCreate(
    UserState: ?*opaque{},
    AllocFn: MIDL_ES_ALLOC,
    WriteFn: MIDL_ES_WRITE,
    pHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn MesDecodeIncrementalHandleCreate(
    UserState: ?*opaque{},
    ReadFn: MIDL_ES_READ,
    pHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn MesIncrementalHandleReset(
    Handle: ?*opaque{},
    UserState: ?*opaque{},
    AllocFn: MIDL_ES_ALLOC,
    WriteFn: MIDL_ES_WRITE,
    ReadFn: MIDL_ES_READ,
    Operation: MIDL_ES_CODE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn MesEncodeFixedBufferHandleCreate(
    pBuffer: ?*i8,
    BufferSize: u32,
    pEncodedSize: ?*u32,
    pHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn MesEncodeDynBufferHandleCreate(
    pBuffer: ?*?*i8,
    pEncodedSize: ?*u32,
    pHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn MesDecodeBufferHandleCreate(
    Buffer: ?*i8,
    BufferSize: u32,
    pHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn MesBufferHandleReset(
    Handle: ?*opaque{},
    HandleStyle: u32,
    Operation: MIDL_ES_CODE,
    pBuffer: ?*?*i8,
    BufferSize: u32,
    pEncodedSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn MesHandleFree(
    Handle: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn MesInqProcEncodingId(
    Handle: ?*opaque{},
    pInterfaceId: ?*RPC_SYNTAX_IDENTIFIER,
    pProcNum: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesSimpleTypeAlignSize(
    param0: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesSimpleTypeDecode(
    Handle: ?*opaque{},
    pObject: ?*opaque{},
    Size: i16,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesSimpleTypeEncode(
    Handle: ?*opaque{},
    pStubDesc: ?*MIDL_STUB_DESC,
    pObject: ?*opaque{},
    Size: i16,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesTypeAlignSize(
    Handle: ?*opaque{},
    pStubDesc: ?*MIDL_STUB_DESC,
    pFormatString: ?*u8,
    pObject: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesTypeEncode(
    Handle: ?*opaque{},
    pStubDesc: ?*MIDL_STUB_DESC,
    pFormatString: ?*u8,
    pObject: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesTypeDecode(
    Handle: ?*opaque{},
    pStubDesc: ?*MIDL_STUB_DESC,
    pFormatString: ?*u8,
    pObject: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesTypeAlignSize2(
    Handle: ?*opaque{},
    pPicklingInfo: ?*MIDL_TYPE_PICKLING_INFO,
    pStubDesc: ?*MIDL_STUB_DESC,
    pFormatString: ?*u8,
    pObject: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesTypeEncode2(
    Handle: ?*opaque{},
    pPicklingInfo: ?*MIDL_TYPE_PICKLING_INFO,
    pStubDesc: ?*MIDL_STUB_DESC,
    pFormatString: ?*u8,
    pObject: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesTypeDecode2(
    Handle: ?*opaque{},
    pPicklingInfo: ?*MIDL_TYPE_PICKLING_INFO,
    pStubDesc: ?*MIDL_STUB_DESC,
    pFormatString: ?*u8,
    pObject: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesTypeFree2(
    Handle: ?*opaque{},
    pPicklingInfo: ?*MIDL_TYPE_PICKLING_INFO,
    pStubDesc: ?*MIDL_STUB_DESC,
    pFormatString: ?*u8,
    pObject: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesProcEncodeDecode(
    Handle: ?*opaque{},
    pStubDesc: ?*MIDL_STUB_DESC,
    pFormatString: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesProcEncodeDecode2(
    Handle: ?*opaque{},
    pStubDesc: ?*MIDL_STUB_DESC,
    pFormatString: ?*u8,
) callconv(@import("std").os.windows.WINAPI) CLIENT_CALL_RETURN;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesTypeAlignSize3(
    Handle: ?*opaque{},
    pPicklingInfo: ?*MIDL_TYPE_PICKLING_INFO,
    pProxyInfo: ?*MIDL_STUBLESS_PROXY_INFO,
    ArrTypeOffset: ?*?*u32,
    nTypeIndex: u32,
    pObject: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesTypeEncode3(
    Handle: ?*opaque{},
    pPicklingInfo: ?*MIDL_TYPE_PICKLING_INFO,
    pProxyInfo: ?*MIDL_STUBLESS_PROXY_INFO,
    ArrTypeOffset: ?*?*u32,
    nTypeIndex: u32,
    pObject: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesTypeDecode3(
    Handle: ?*opaque{},
    pPicklingInfo: ?*MIDL_TYPE_PICKLING_INFO,
    pProxyInfo: ?*MIDL_STUBLESS_PROXY_INFO,
    ArrTypeOffset: ?*?*u32,
    nTypeIndex: u32,
    pObject: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesTypeFree3(
    Handle: ?*opaque{},
    pPicklingInfo: ?*MIDL_TYPE_PICKLING_INFO,
    pProxyInfo: ?*MIDL_STUBLESS_PROXY_INFO,
    ArrTypeOffset: ?*?*u32,
    nTypeIndex: u32,
    pObject: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesProcEncodeDecode3(
    Handle: ?*opaque{},
    pProxyInfo: ?*MIDL_STUBLESS_PROXY_INFO,
    nProcNum: u32,
    pReturnValue: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) CLIENT_CALL_RETURN;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesSimpleTypeDecodeAll(
    Handle: ?*opaque{},
    pProxyInfo: ?*MIDL_STUBLESS_PROXY_INFO,
    pObject: ?*opaque{},
    Size: i16,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesSimpleTypeEncodeAll(
    Handle: ?*opaque{},
    pProxyInfo: ?*MIDL_STUBLESS_PROXY_INFO,
    pObject: ?*opaque{},
    Size: i16,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn NdrMesSimpleTypeAlignSizeAll(
    Handle: ?*opaque{},
    pProxyInfo: ?*MIDL_STUBLESS_PROXY_INFO,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcCertGeneratePrincipalNameW(
    Context: ?*CERT_CONTEXT,
    Flags: u32,
    pBuffer: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "RPCRT4" fn RpcCertGeneratePrincipalNameA(
    Context: ?*CERT_CONTEXT,
    Flags: u32,
    pBuffer: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const RPC_PROTSEQ_VECTOR = RPC_PROTSEQ_VECTORA;
        pub const RPC_HTTP_TRANSPORT_CREDENTIALS_ = RPC_HTTP_TRANSPORT_CREDENTIALS_A;
        pub const RPC_HTTP_TRANSPORT_CREDENTIALS_V2_ = RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A;
        pub const RPC_HTTP_TRANSPORT_CREDENTIALS_V3_ = RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A;
        pub const RPC_SECURITY_QOS_V2_ = RPC_SECURITY_QOS_V2_A;
        pub const RPC_SECURITY_QOS_V3_ = RPC_SECURITY_QOS_V3_A;
        pub const RPC_SECURITY_QOS_V4_ = RPC_SECURITY_QOS_V4_A;
        pub const RPC_SECURITY_QOS_V5_ = RPC_SECURITY_QOS_V5_A;
        pub const RPC_BINDING_HANDLE_TEMPLATE_V1_ = RPC_BINDING_HANDLE_TEMPLATE_V1_A;
        pub const RPC_BINDING_HANDLE_SECURITY_V1_ = RPC_BINDING_HANDLE_SECURITY_V1_A;
        pub const RPC_ENDPOINT_TEMPLATE = RPC_ENDPOINT_TEMPLATEA;
        pub const RPC_INTERFACE_TEMPLATE = RPC_INTERFACE_TEMPLATEA;
        pub const RPC_CALL_ATTRIBUTES_V1_ = RPC_CALL_ATTRIBUTES_V1_A;
        pub const RPC_CALL_ATTRIBUTES_V2_ = RPC_CALL_ATTRIBUTES_V2_A;
        pub const RPC_CALL_ATTRIBUTES_V3_ = RPC_CALL_ATTRIBUTES_V3_A;
        pub const RpcBindingFromStringBinding = RpcBindingFromStringBindingA;
        pub const RpcBindingToStringBinding = RpcBindingToStringBindingA;
        pub const RpcStringBindingCompose = RpcStringBindingComposeA;
        pub const RpcStringBindingParse = RpcStringBindingParseA;
        pub const RpcStringFree = RpcStringFreeA;
        pub const RpcNetworkIsProtseqValid = RpcNetworkIsProtseqValidA;
        pub const RpcNetworkInqProtseqs = RpcNetworkInqProtseqsA;
        pub const RpcProtseqVectorFree = RpcProtseqVectorFreeA;
        pub const RpcServerUseProtseq = RpcServerUseProtseqA;
        pub const RpcServerUseProtseqEx = RpcServerUseProtseqExA;
        pub const RpcServerUseProtseqEp = RpcServerUseProtseqEpA;
        pub const RpcServerUseProtseqEpEx = RpcServerUseProtseqEpExA;
        pub const RpcServerUseProtseqIf = RpcServerUseProtseqIfA;
        pub const RpcServerUseProtseqIfEx = RpcServerUseProtseqIfExA;
        pub const RpcMgmtInqServerPrincName = RpcMgmtInqServerPrincNameA;
        pub const RpcServerInqDefaultPrincName = RpcServerInqDefaultPrincNameA;
        pub const RpcNsBindingInqEntryName = RpcNsBindingInqEntryNameA;
        pub const RpcBindingCreate = RpcBindingCreateA;
        pub const RpcBindingInqAuthClient = RpcBindingInqAuthClientA;
        pub const RpcBindingInqAuthClientEx = RpcBindingInqAuthClientExA;
        pub const RpcBindingInqAuthInfo = RpcBindingInqAuthInfoA;
        pub const RpcBindingSetAuthInfo = RpcBindingSetAuthInfoA;
        pub const RpcBindingSetAuthInfoEx = RpcBindingSetAuthInfoExA;
        pub const RpcBindingInqAuthInfoEx = RpcBindingInqAuthInfoExA;
        pub const RpcServerRegisterAuthInfo = RpcServerRegisterAuthInfoA;
        pub const UuidToString = UuidToStringA;
        pub const UuidFromString = UuidFromStringA;
        pub const RpcEpRegisterNoReplace = RpcEpRegisterNoReplaceA;
        pub const RpcEpRegister = RpcEpRegisterA;
        pub const DceErrorInqText = DceErrorInqTextA;
        pub const RpcMgmtEpEltInqNext = RpcMgmtEpEltInqNextA;
        pub const RpcServerInterfaceGroupCreate = RpcServerInterfaceGroupCreateA;
        pub const I_RpcNsBindingSetEntryName = I_RpcNsBindingSetEntryNameA;
        pub const I_RpcServerUseProtseqEp2 = I_RpcServerUseProtseqEp2A;
        pub const I_RpcServerUseProtseq2 = I_RpcServerUseProtseq2A;
        pub const I_RpcBindingInqDynamicEndpoint = I_RpcBindingInqDynamicEndpointA;
        pub const RpcNsBindingExport = RpcNsBindingExportA;
        pub const RpcNsBindingUnexport = RpcNsBindingUnexportA;
        pub const RpcNsBindingExportPnP = RpcNsBindingExportPnPA;
        pub const RpcNsBindingUnexportPnP = RpcNsBindingUnexportPnPA;
        pub const RpcNsBindingLookupBegin = RpcNsBindingLookupBeginA;
        pub const RpcNsGroupDelete = RpcNsGroupDeleteA;
        pub const RpcNsGroupMbrAdd = RpcNsGroupMbrAddA;
        pub const RpcNsGroupMbrRemove = RpcNsGroupMbrRemoveA;
        pub const RpcNsGroupMbrInqBegin = RpcNsGroupMbrInqBeginA;
        pub const RpcNsGroupMbrInqNext = RpcNsGroupMbrInqNextA;
        pub const RpcNsProfileDelete = RpcNsProfileDeleteA;
        pub const RpcNsProfileEltAdd = RpcNsProfileEltAddA;
        pub const RpcNsProfileEltRemove = RpcNsProfileEltRemoveA;
        pub const RpcNsProfileEltInqBegin = RpcNsProfileEltInqBeginA;
        pub const RpcNsProfileEltInqNext = RpcNsProfileEltInqNextA;
        pub const RpcNsEntryObjectInqBegin = RpcNsEntryObjectInqBeginA;
        pub const RpcNsEntryExpandName = RpcNsEntryExpandNameA;
        pub const RpcNsMgmtBindingUnexport = RpcNsMgmtBindingUnexportA;
        pub const RpcNsMgmtEntryCreate = RpcNsMgmtEntryCreateA;
        pub const RpcNsMgmtEntryDelete = RpcNsMgmtEntryDeleteA;
        pub const RpcNsMgmtEntryInqIfIds = RpcNsMgmtEntryInqIfIdsA;
        pub const RpcNsBindingImportBegin = RpcNsBindingImportBeginA;
        pub const RpcServerInqCallAttributes = RpcServerInqCallAttributesA;
        pub const RpcCertGeneratePrincipalName = RpcCertGeneratePrincipalNameA;
    },
    .wide => struct {
        pub const RPC_PROTSEQ_VECTOR = RPC_PROTSEQ_VECTORW;
        pub const RPC_HTTP_TRANSPORT_CREDENTIALS_ = RPC_HTTP_TRANSPORT_CREDENTIALS_W;
        pub const RPC_HTTP_TRANSPORT_CREDENTIALS_V2_ = RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W;
        pub const RPC_HTTP_TRANSPORT_CREDENTIALS_V3_ = RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W;
        pub const RPC_SECURITY_QOS_V2_ = RPC_SECURITY_QOS_V2_W;
        pub const RPC_SECURITY_QOS_V3_ = RPC_SECURITY_QOS_V3_W;
        pub const RPC_SECURITY_QOS_V4_ = RPC_SECURITY_QOS_V4_W;
        pub const RPC_SECURITY_QOS_V5_ = RPC_SECURITY_QOS_V5_W;
        pub const RPC_BINDING_HANDLE_TEMPLATE_V1_ = RPC_BINDING_HANDLE_TEMPLATE_V1_W;
        pub const RPC_BINDING_HANDLE_SECURITY_V1_ = RPC_BINDING_HANDLE_SECURITY_V1_W;
        pub const RPC_ENDPOINT_TEMPLATE = RPC_ENDPOINT_TEMPLATEW;
        pub const RPC_INTERFACE_TEMPLATE = RPC_INTERFACE_TEMPLATEW;
        pub const RPC_CALL_ATTRIBUTES_V1_ = RPC_CALL_ATTRIBUTES_V1_W;
        pub const RPC_CALL_ATTRIBUTES_V2_ = RPC_CALL_ATTRIBUTES_V2_W;
        pub const RPC_CALL_ATTRIBUTES_V3_ = RPC_CALL_ATTRIBUTES_V3_W;
        pub const RpcBindingFromStringBinding = RpcBindingFromStringBindingW;
        pub const RpcBindingToStringBinding = RpcBindingToStringBindingW;
        pub const RpcStringBindingCompose = RpcStringBindingComposeW;
        pub const RpcStringBindingParse = RpcStringBindingParseW;
        pub const RpcStringFree = RpcStringFreeW;
        pub const RpcNetworkIsProtseqValid = RpcNetworkIsProtseqValidW;
        pub const RpcNetworkInqProtseqs = RpcNetworkInqProtseqsW;
        pub const RpcProtseqVectorFree = RpcProtseqVectorFreeW;
        pub const RpcServerUseProtseq = RpcServerUseProtseqW;
        pub const RpcServerUseProtseqEx = RpcServerUseProtseqExW;
        pub const RpcServerUseProtseqEp = RpcServerUseProtseqEpW;
        pub const RpcServerUseProtseqEpEx = RpcServerUseProtseqEpExW;
        pub const RpcServerUseProtseqIf = RpcServerUseProtseqIfW;
        pub const RpcServerUseProtseqIfEx = RpcServerUseProtseqIfExW;
        pub const RpcMgmtInqServerPrincName = RpcMgmtInqServerPrincNameW;
        pub const RpcServerInqDefaultPrincName = RpcServerInqDefaultPrincNameW;
        pub const RpcNsBindingInqEntryName = RpcNsBindingInqEntryNameW;
        pub const RpcBindingCreate = RpcBindingCreateW;
        pub const RpcBindingInqAuthClient = RpcBindingInqAuthClientW;
        pub const RpcBindingInqAuthClientEx = RpcBindingInqAuthClientExW;
        pub const RpcBindingInqAuthInfo = RpcBindingInqAuthInfoW;
        pub const RpcBindingSetAuthInfo = RpcBindingSetAuthInfoW;
        pub const RpcBindingSetAuthInfoEx = RpcBindingSetAuthInfoExW;
        pub const RpcBindingInqAuthInfoEx = RpcBindingInqAuthInfoExW;
        pub const RpcServerRegisterAuthInfo = RpcServerRegisterAuthInfoW;
        pub const UuidToString = UuidToStringW;
        pub const UuidFromString = UuidFromStringW;
        pub const RpcEpRegisterNoReplace = RpcEpRegisterNoReplaceW;
        pub const RpcEpRegister = RpcEpRegisterW;
        pub const DceErrorInqText = DceErrorInqTextW;
        pub const RpcMgmtEpEltInqNext = RpcMgmtEpEltInqNextW;
        pub const RpcServerInterfaceGroupCreate = RpcServerInterfaceGroupCreateW;
        pub const I_RpcNsBindingSetEntryName = I_RpcNsBindingSetEntryNameW;
        pub const I_RpcServerUseProtseqEp2 = I_RpcServerUseProtseqEp2W;
        pub const I_RpcServerUseProtseq2 = I_RpcServerUseProtseq2W;
        pub const I_RpcBindingInqDynamicEndpoint = I_RpcBindingInqDynamicEndpointW;
        pub const RpcNsBindingExport = RpcNsBindingExportW;
        pub const RpcNsBindingUnexport = RpcNsBindingUnexportW;
        pub const RpcNsBindingExportPnP = RpcNsBindingExportPnPW;
        pub const RpcNsBindingUnexportPnP = RpcNsBindingUnexportPnPW;
        pub const RpcNsBindingLookupBegin = RpcNsBindingLookupBeginW;
        pub const RpcNsGroupDelete = RpcNsGroupDeleteW;
        pub const RpcNsGroupMbrAdd = RpcNsGroupMbrAddW;
        pub const RpcNsGroupMbrRemove = RpcNsGroupMbrRemoveW;
        pub const RpcNsGroupMbrInqBegin = RpcNsGroupMbrInqBeginW;
        pub const RpcNsGroupMbrInqNext = RpcNsGroupMbrInqNextW;
        pub const RpcNsProfileDelete = RpcNsProfileDeleteW;
        pub const RpcNsProfileEltAdd = RpcNsProfileEltAddW;
        pub const RpcNsProfileEltRemove = RpcNsProfileEltRemoveW;
        pub const RpcNsProfileEltInqBegin = RpcNsProfileEltInqBeginW;
        pub const RpcNsProfileEltInqNext = RpcNsProfileEltInqNextW;
        pub const RpcNsEntryObjectInqBegin = RpcNsEntryObjectInqBeginW;
        pub const RpcNsEntryExpandName = RpcNsEntryExpandNameW;
        pub const RpcNsMgmtBindingUnexport = RpcNsMgmtBindingUnexportW;
        pub const RpcNsMgmtEntryCreate = RpcNsMgmtEntryCreateW;
        pub const RpcNsMgmtEntryDelete = RpcNsMgmtEntryDeleteW;
        pub const RpcNsMgmtEntryInqIfIds = RpcNsMgmtEntryInqIfIdsW;
        pub const RpcNsBindingImportBegin = RpcNsBindingImportBeginW;
        pub const RpcServerInqCallAttributes = RpcServerInqCallAttributesW;
        pub const RpcCertGeneratePrincipalName = RpcCertGeneratePrincipalNameW;
    },
    else => if (@import("builtin").is_test) struct {
        pub const RPC_PROTSEQ_VECTOR = *opaque{};
        pub const RPC_HTTP_TRANSPORT_CREDENTIALS_ = *opaque{};
        pub const RPC_HTTP_TRANSPORT_CREDENTIALS_V2_ = *opaque{};
        pub const RPC_HTTP_TRANSPORT_CREDENTIALS_V3_ = *opaque{};
        pub const RPC_SECURITY_QOS_V2_ = *opaque{};
        pub const RPC_SECURITY_QOS_V3_ = *opaque{};
        pub const RPC_SECURITY_QOS_V4_ = *opaque{};
        pub const RPC_SECURITY_QOS_V5_ = *opaque{};
        pub const RPC_BINDING_HANDLE_TEMPLATE_V1_ = *opaque{};
        pub const RPC_BINDING_HANDLE_SECURITY_V1_ = *opaque{};
        pub const RPC_ENDPOINT_TEMPLATE = *opaque{};
        pub const RPC_INTERFACE_TEMPLATE = *opaque{};
        pub const RPC_CALL_ATTRIBUTES_V1_ = *opaque{};
        pub const RPC_CALL_ATTRIBUTES_V2_ = *opaque{};
        pub const RPC_CALL_ATTRIBUTES_V3_ = *opaque{};
        pub const RpcBindingFromStringBinding = *opaque{};
        pub const RpcBindingToStringBinding = *opaque{};
        pub const RpcStringBindingCompose = *opaque{};
        pub const RpcStringBindingParse = *opaque{};
        pub const RpcStringFree = *opaque{};
        pub const RpcNetworkIsProtseqValid = *opaque{};
        pub const RpcNetworkInqProtseqs = *opaque{};
        pub const RpcProtseqVectorFree = *opaque{};
        pub const RpcServerUseProtseq = *opaque{};
        pub const RpcServerUseProtseqEx = *opaque{};
        pub const RpcServerUseProtseqEp = *opaque{};
        pub const RpcServerUseProtseqEpEx = *opaque{};
        pub const RpcServerUseProtseqIf = *opaque{};
        pub const RpcServerUseProtseqIfEx = *opaque{};
        pub const RpcMgmtInqServerPrincName = *opaque{};
        pub const RpcServerInqDefaultPrincName = *opaque{};
        pub const RpcNsBindingInqEntryName = *opaque{};
        pub const RpcBindingCreate = *opaque{};
        pub const RpcBindingInqAuthClient = *opaque{};
        pub const RpcBindingInqAuthClientEx = *opaque{};
        pub const RpcBindingInqAuthInfo = *opaque{};
        pub const RpcBindingSetAuthInfo = *opaque{};
        pub const RpcBindingSetAuthInfoEx = *opaque{};
        pub const RpcBindingInqAuthInfoEx = *opaque{};
        pub const RpcServerRegisterAuthInfo = *opaque{};
        pub const UuidToString = *opaque{};
        pub const UuidFromString = *opaque{};
        pub const RpcEpRegisterNoReplace = *opaque{};
        pub const RpcEpRegister = *opaque{};
        pub const DceErrorInqText = *opaque{};
        pub const RpcMgmtEpEltInqNext = *opaque{};
        pub const RpcServerInterfaceGroupCreate = *opaque{};
        pub const I_RpcNsBindingSetEntryName = *opaque{};
        pub const I_RpcServerUseProtseqEp2 = *opaque{};
        pub const I_RpcServerUseProtseq2 = *opaque{};
        pub const I_RpcBindingInqDynamicEndpoint = *opaque{};
        pub const RpcNsBindingExport = *opaque{};
        pub const RpcNsBindingUnexport = *opaque{};
        pub const RpcNsBindingExportPnP = *opaque{};
        pub const RpcNsBindingUnexportPnP = *opaque{};
        pub const RpcNsBindingLookupBegin = *opaque{};
        pub const RpcNsGroupDelete = *opaque{};
        pub const RpcNsGroupMbrAdd = *opaque{};
        pub const RpcNsGroupMbrRemove = *opaque{};
        pub const RpcNsGroupMbrInqBegin = *opaque{};
        pub const RpcNsGroupMbrInqNext = *opaque{};
        pub const RpcNsProfileDelete = *opaque{};
        pub const RpcNsProfileEltAdd = *opaque{};
        pub const RpcNsProfileEltRemove = *opaque{};
        pub const RpcNsProfileEltInqBegin = *opaque{};
        pub const RpcNsProfileEltInqNext = *opaque{};
        pub const RpcNsEntryObjectInqBegin = *opaque{};
        pub const RpcNsEntryExpandName = *opaque{};
        pub const RpcNsMgmtBindingUnexport = *opaque{};
        pub const RpcNsMgmtEntryCreate = *opaque{};
        pub const RpcNsMgmtEntryDelete = *opaque{};
        pub const RpcNsMgmtEntryInqIfIds = *opaque{};
        pub const RpcNsBindingImportBegin = *opaque{};
        pub const RpcServerInqCallAttributes = *opaque{};
        pub const RpcCertGeneratePrincipalName = *opaque{};
    } else struct {
        pub const RPC_PROTSEQ_VECTOR = @compileError("'RPC_PROTSEQ_VECTOR' requires that UNICODE be set to true or false in the root module");
        pub const RPC_HTTP_TRANSPORT_CREDENTIALS_ = @compileError("'RPC_HTTP_TRANSPORT_CREDENTIALS_' requires that UNICODE be set to true or false in the root module");
        pub const RPC_HTTP_TRANSPORT_CREDENTIALS_V2_ = @compileError("'RPC_HTTP_TRANSPORT_CREDENTIALS_V2_' requires that UNICODE be set to true or false in the root module");
        pub const RPC_HTTP_TRANSPORT_CREDENTIALS_V3_ = @compileError("'RPC_HTTP_TRANSPORT_CREDENTIALS_V3_' requires that UNICODE be set to true or false in the root module");
        pub const RPC_SECURITY_QOS_V2_ = @compileError("'RPC_SECURITY_QOS_V2_' requires that UNICODE be set to true or false in the root module");
        pub const RPC_SECURITY_QOS_V3_ = @compileError("'RPC_SECURITY_QOS_V3_' requires that UNICODE be set to true or false in the root module");
        pub const RPC_SECURITY_QOS_V4_ = @compileError("'RPC_SECURITY_QOS_V4_' requires that UNICODE be set to true or false in the root module");
        pub const RPC_SECURITY_QOS_V5_ = @compileError("'RPC_SECURITY_QOS_V5_' requires that UNICODE be set to true or false in the root module");
        pub const RPC_BINDING_HANDLE_TEMPLATE_V1_ = @compileError("'RPC_BINDING_HANDLE_TEMPLATE_V1_' requires that UNICODE be set to true or false in the root module");
        pub const RPC_BINDING_HANDLE_SECURITY_V1_ = @compileError("'RPC_BINDING_HANDLE_SECURITY_V1_' requires that UNICODE be set to true or false in the root module");
        pub const RPC_ENDPOINT_TEMPLATE = @compileError("'RPC_ENDPOINT_TEMPLATE' requires that UNICODE be set to true or false in the root module");
        pub const RPC_INTERFACE_TEMPLATE = @compileError("'RPC_INTERFACE_TEMPLATE' requires that UNICODE be set to true or false in the root module");
        pub const RPC_CALL_ATTRIBUTES_V1_ = @compileError("'RPC_CALL_ATTRIBUTES_V1_' requires that UNICODE be set to true or false in the root module");
        pub const RPC_CALL_ATTRIBUTES_V2_ = @compileError("'RPC_CALL_ATTRIBUTES_V2_' requires that UNICODE be set to true or false in the root module");
        pub const RPC_CALL_ATTRIBUTES_V3_ = @compileError("'RPC_CALL_ATTRIBUTES_V3_' requires that UNICODE be set to true or false in the root module");
        pub const RpcBindingFromStringBinding = @compileError("'RpcBindingFromStringBinding' requires that UNICODE be set to true or false in the root module");
        pub const RpcBindingToStringBinding = @compileError("'RpcBindingToStringBinding' requires that UNICODE be set to true or false in the root module");
        pub const RpcStringBindingCompose = @compileError("'RpcStringBindingCompose' requires that UNICODE be set to true or false in the root module");
        pub const RpcStringBindingParse = @compileError("'RpcStringBindingParse' requires that UNICODE be set to true or false in the root module");
        pub const RpcStringFree = @compileError("'RpcStringFree' requires that UNICODE be set to true or false in the root module");
        pub const RpcNetworkIsProtseqValid = @compileError("'RpcNetworkIsProtseqValid' requires that UNICODE be set to true or false in the root module");
        pub const RpcNetworkInqProtseqs = @compileError("'RpcNetworkInqProtseqs' requires that UNICODE be set to true or false in the root module");
        pub const RpcProtseqVectorFree = @compileError("'RpcProtseqVectorFree' requires that UNICODE be set to true or false in the root module");
        pub const RpcServerUseProtseq = @compileError("'RpcServerUseProtseq' requires that UNICODE be set to true or false in the root module");
        pub const RpcServerUseProtseqEx = @compileError("'RpcServerUseProtseqEx' requires that UNICODE be set to true or false in the root module");
        pub const RpcServerUseProtseqEp = @compileError("'RpcServerUseProtseqEp' requires that UNICODE be set to true or false in the root module");
        pub const RpcServerUseProtseqEpEx = @compileError("'RpcServerUseProtseqEpEx' requires that UNICODE be set to true or false in the root module");
        pub const RpcServerUseProtseqIf = @compileError("'RpcServerUseProtseqIf' requires that UNICODE be set to true or false in the root module");
        pub const RpcServerUseProtseqIfEx = @compileError("'RpcServerUseProtseqIfEx' requires that UNICODE be set to true or false in the root module");
        pub const RpcMgmtInqServerPrincName = @compileError("'RpcMgmtInqServerPrincName' requires that UNICODE be set to true or false in the root module");
        pub const RpcServerInqDefaultPrincName = @compileError("'RpcServerInqDefaultPrincName' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsBindingInqEntryName = @compileError("'RpcNsBindingInqEntryName' requires that UNICODE be set to true or false in the root module");
        pub const RpcBindingCreate = @compileError("'RpcBindingCreate' requires that UNICODE be set to true or false in the root module");
        pub const RpcBindingInqAuthClient = @compileError("'RpcBindingInqAuthClient' requires that UNICODE be set to true or false in the root module");
        pub const RpcBindingInqAuthClientEx = @compileError("'RpcBindingInqAuthClientEx' requires that UNICODE be set to true or false in the root module");
        pub const RpcBindingInqAuthInfo = @compileError("'RpcBindingInqAuthInfo' requires that UNICODE be set to true or false in the root module");
        pub const RpcBindingSetAuthInfo = @compileError("'RpcBindingSetAuthInfo' requires that UNICODE be set to true or false in the root module");
        pub const RpcBindingSetAuthInfoEx = @compileError("'RpcBindingSetAuthInfoEx' requires that UNICODE be set to true or false in the root module");
        pub const RpcBindingInqAuthInfoEx = @compileError("'RpcBindingInqAuthInfoEx' requires that UNICODE be set to true or false in the root module");
        pub const RpcServerRegisterAuthInfo = @compileError("'RpcServerRegisterAuthInfo' requires that UNICODE be set to true or false in the root module");
        pub const UuidToString = @compileError("'UuidToString' requires that UNICODE be set to true or false in the root module");
        pub const UuidFromString = @compileError("'UuidFromString' requires that UNICODE be set to true or false in the root module");
        pub const RpcEpRegisterNoReplace = @compileError("'RpcEpRegisterNoReplace' requires that UNICODE be set to true or false in the root module");
        pub const RpcEpRegister = @compileError("'RpcEpRegister' requires that UNICODE be set to true or false in the root module");
        pub const DceErrorInqText = @compileError("'DceErrorInqText' requires that UNICODE be set to true or false in the root module");
        pub const RpcMgmtEpEltInqNext = @compileError("'RpcMgmtEpEltInqNext' requires that UNICODE be set to true or false in the root module");
        pub const RpcServerInterfaceGroupCreate = @compileError("'RpcServerInterfaceGroupCreate' requires that UNICODE be set to true or false in the root module");
        pub const I_RpcNsBindingSetEntryName = @compileError("'I_RpcNsBindingSetEntryName' requires that UNICODE be set to true or false in the root module");
        pub const I_RpcServerUseProtseqEp2 = @compileError("'I_RpcServerUseProtseqEp2' requires that UNICODE be set to true or false in the root module");
        pub const I_RpcServerUseProtseq2 = @compileError("'I_RpcServerUseProtseq2' requires that UNICODE be set to true or false in the root module");
        pub const I_RpcBindingInqDynamicEndpoint = @compileError("'I_RpcBindingInqDynamicEndpoint' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsBindingExport = @compileError("'RpcNsBindingExport' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsBindingUnexport = @compileError("'RpcNsBindingUnexport' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsBindingExportPnP = @compileError("'RpcNsBindingExportPnP' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsBindingUnexportPnP = @compileError("'RpcNsBindingUnexportPnP' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsBindingLookupBegin = @compileError("'RpcNsBindingLookupBegin' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsGroupDelete = @compileError("'RpcNsGroupDelete' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsGroupMbrAdd = @compileError("'RpcNsGroupMbrAdd' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsGroupMbrRemove = @compileError("'RpcNsGroupMbrRemove' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsGroupMbrInqBegin = @compileError("'RpcNsGroupMbrInqBegin' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsGroupMbrInqNext = @compileError("'RpcNsGroupMbrInqNext' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsProfileDelete = @compileError("'RpcNsProfileDelete' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsProfileEltAdd = @compileError("'RpcNsProfileEltAdd' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsProfileEltRemove = @compileError("'RpcNsProfileEltRemove' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsProfileEltInqBegin = @compileError("'RpcNsProfileEltInqBegin' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsProfileEltInqNext = @compileError("'RpcNsProfileEltInqNext' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsEntryObjectInqBegin = @compileError("'RpcNsEntryObjectInqBegin' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsEntryExpandName = @compileError("'RpcNsEntryExpandName' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsMgmtBindingUnexport = @compileError("'RpcNsMgmtBindingUnexport' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsMgmtEntryCreate = @compileError("'RpcNsMgmtEntryCreate' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsMgmtEntryDelete = @compileError("'RpcNsMgmtEntryDelete' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsMgmtEntryInqIfIds = @compileError("'RpcNsMgmtEntryInqIfIds' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsBindingImportBegin = @compileError("'RpcNsBindingImportBegin' requires that UNICODE be set to true or false in the root module");
        pub const RpcServerInqCallAttributes = @compileError("'RpcServerInqCallAttributes' requires that UNICODE be set to true or false in the root module");
        pub const RpcCertGeneratePrincipalName = @compileError("'RpcCertGeneratePrincipalName' requires that UNICODE be set to true or false in the root module");
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const SEC_WINNT_AUTH_IDENTITY_W = @import("security.zig").SEC_WINNT_AUTH_IDENTITY_W;
const SEC_WINNT_AUTH_IDENTITY_A = @import("security.zig").SEC_WINNT_AUTH_IDENTITY_A;
const HANDLE = @import("systemservices.zig").HANDLE;
const OVERLAPPED = @import("systemservices.zig").OVERLAPPED;
const HWND = @import("windowsandmessaging.zig").HWND;
const BOOL = @import("systemservices.zig").BOOL;
const IRpcChannelBuffer = @import("com.zig").IRpcChannelBuffer;
const IUnknown = @import("com.zig").IUnknown;
const HRESULT = @import("com.zig").HRESULT;
const LARGE_INTEGER = @import("systemservices.zig").LARGE_INTEGER;
const LUID = @import("kernel.zig").LUID;
const IRpcStubBuffer = @import("com.zig").IRpcStubBuffer;
const CERT_CONTEXT = @import("security.zig").CERT_CONTEXT;

test "" {
    const constant_export_count = 2;
    const type_export_count = 161;
    const func_count = 491;
    const unicode_alias_count = 75;
    const type_import_count = 14;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
