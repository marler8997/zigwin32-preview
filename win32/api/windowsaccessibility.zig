//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//
pub const UIA_ScrollPatternNoScroll : f64 = -1;
pub const UIA_InvokePatternId : i32 = 10000;
pub const UIA_SelectionPatternId : i32 = 10001;
pub const UIA_ValuePatternId : i32 = 10002;
pub const UIA_RangeValuePatternId : i32 = 10003;
pub const UIA_ScrollPatternId : i32 = 10004;
pub const UIA_ExpandCollapsePatternId : i32 = 10005;
pub const UIA_GridPatternId : i32 = 10006;
pub const UIA_GridItemPatternId : i32 = 10007;
pub const UIA_MultipleViewPatternId : i32 = 10008;
pub const UIA_WindowPatternId : i32 = 10009;
pub const UIA_SelectionItemPatternId : i32 = 10010;
pub const UIA_DockPatternId : i32 = 10011;
pub const UIA_TablePatternId : i32 = 10012;
pub const UIA_TableItemPatternId : i32 = 10013;
pub const UIA_TextPatternId : i32 = 10014;
pub const UIA_TogglePatternId : i32 = 10015;
pub const UIA_TransformPatternId : i32 = 10016;
pub const UIA_ScrollItemPatternId : i32 = 10017;
pub const UIA_LegacyIAccessiblePatternId : i32 = 10018;
pub const UIA_ItemContainerPatternId : i32 = 10019;
pub const UIA_VirtualizedItemPatternId : i32 = 10020;
pub const UIA_SynchronizedInputPatternId : i32 = 10021;
pub const UIA_ObjectModelPatternId : i32 = 10022;
pub const UIA_AnnotationPatternId : i32 = 10023;
pub const UIA_TextPattern2Id : i32 = 10024;
pub const UIA_StylesPatternId : i32 = 10025;
pub const UIA_SpreadsheetPatternId : i32 = 10026;
pub const UIA_SpreadsheetItemPatternId : i32 = 10027;
pub const UIA_TransformPattern2Id : i32 = 10028;
pub const UIA_TextChildPatternId : i32 = 10029;
pub const UIA_DragPatternId : i32 = 10030;
pub const UIA_DropTargetPatternId : i32 = 10031;
pub const UIA_TextEditPatternId : i32 = 10032;
pub const UIA_CustomNavigationPatternId : i32 = 10033;
pub const UIA_SelectionPattern2Id : i32 = 10034;
pub const UIA_ToolTipOpenedEventId : i32 = 20000;
pub const UIA_ToolTipClosedEventId : i32 = 20001;
pub const UIA_StructureChangedEventId : i32 = 20002;
pub const UIA_MenuOpenedEventId : i32 = 20003;
pub const UIA_AutomationPropertyChangedEventId : i32 = 20004;
pub const UIA_AutomationFocusChangedEventId : i32 = 20005;
pub const UIA_AsyncContentLoadedEventId : i32 = 20006;
pub const UIA_MenuClosedEventId : i32 = 20007;
pub const UIA_LayoutInvalidatedEventId : i32 = 20008;
pub const UIA_Invoke_InvokedEventId : i32 = 20009;
pub const UIA_SelectionItem_ElementAddedToSelectionEventId : i32 = 20010;
pub const UIA_SelectionItem_ElementRemovedFromSelectionEventId : i32 = 20011;
pub const UIA_SelectionItem_ElementSelectedEventId : i32 = 20012;
pub const UIA_Selection_InvalidatedEventId : i32 = 20013;
pub const UIA_Text_TextSelectionChangedEventId : i32 = 20014;
pub const UIA_Text_TextChangedEventId : i32 = 20015;
pub const UIA_Window_WindowOpenedEventId : i32 = 20016;
pub const UIA_Window_WindowClosedEventId : i32 = 20017;
pub const UIA_MenuModeStartEventId : i32 = 20018;
pub const UIA_MenuModeEndEventId : i32 = 20019;
pub const UIA_InputReachedTargetEventId : i32 = 20020;
pub const UIA_InputReachedOtherElementEventId : i32 = 20021;
pub const UIA_InputDiscardedEventId : i32 = 20022;
pub const UIA_SystemAlertEventId : i32 = 20023;
pub const UIA_LiveRegionChangedEventId : i32 = 20024;
pub const UIA_HostedFragmentRootsInvalidatedEventId : i32 = 20025;
pub const UIA_Drag_DragStartEventId : i32 = 20026;
pub const UIA_Drag_DragCancelEventId : i32 = 20027;
pub const UIA_Drag_DragCompleteEventId : i32 = 20028;
pub const UIA_DropTarget_DragEnterEventId : i32 = 20029;
pub const UIA_DropTarget_DragLeaveEventId : i32 = 20030;
pub const UIA_DropTarget_DroppedEventId : i32 = 20031;
pub const UIA_TextEdit_TextChangedEventId : i32 = 20032;
pub const UIA_TextEdit_ConversionTargetChangedEventId : i32 = 20033;
pub const UIA_ChangesEventId : i32 = 20034;
pub const UIA_NotificationEventId : i32 = 20035;
pub const UIA_ActiveTextPositionChangedEventId : i32 = 20036;
pub const UIA_RuntimeIdPropertyId : i32 = 30000;
pub const UIA_BoundingRectanglePropertyId : i32 = 30001;
pub const UIA_ProcessIdPropertyId : i32 = 30002;
pub const UIA_ControlTypePropertyId : i32 = 30003;
pub const UIA_LocalizedControlTypePropertyId : i32 = 30004;
pub const UIA_NamePropertyId : i32 = 30005;
pub const UIA_AcceleratorKeyPropertyId : i32 = 30006;
pub const UIA_AccessKeyPropertyId : i32 = 30007;
pub const UIA_HasKeyboardFocusPropertyId : i32 = 30008;
pub const UIA_IsKeyboardFocusablePropertyId : i32 = 30009;
pub const UIA_IsEnabledPropertyId : i32 = 30010;
pub const UIA_AutomationIdPropertyId : i32 = 30011;
pub const UIA_ClassNamePropertyId : i32 = 30012;
pub const UIA_HelpTextPropertyId : i32 = 30013;
pub const UIA_ClickablePointPropertyId : i32 = 30014;
pub const UIA_CulturePropertyId : i32 = 30015;
pub const UIA_IsControlElementPropertyId : i32 = 30016;
pub const UIA_IsContentElementPropertyId : i32 = 30017;
pub const UIA_LabeledByPropertyId : i32 = 30018;
pub const UIA_IsPasswordPropertyId : i32 = 30019;
pub const UIA_NativeWindowHandlePropertyId : i32 = 30020;
pub const UIA_ItemTypePropertyId : i32 = 30021;
pub const UIA_IsOffscreenPropertyId : i32 = 30022;
pub const UIA_OrientationPropertyId : i32 = 30023;
pub const UIA_FrameworkIdPropertyId : i32 = 30024;
pub const UIA_IsRequiredForFormPropertyId : i32 = 30025;
pub const UIA_ItemStatusPropertyId : i32 = 30026;
pub const UIA_IsDockPatternAvailablePropertyId : i32 = 30027;
pub const UIA_IsExpandCollapsePatternAvailablePropertyId : i32 = 30028;
pub const UIA_IsGridItemPatternAvailablePropertyId : i32 = 30029;
pub const UIA_IsGridPatternAvailablePropertyId : i32 = 30030;
pub const UIA_IsInvokePatternAvailablePropertyId : i32 = 30031;
pub const UIA_IsMultipleViewPatternAvailablePropertyId : i32 = 30032;
pub const UIA_IsRangeValuePatternAvailablePropertyId : i32 = 30033;
pub const UIA_IsScrollPatternAvailablePropertyId : i32 = 30034;
pub const UIA_IsScrollItemPatternAvailablePropertyId : i32 = 30035;
pub const UIA_IsSelectionItemPatternAvailablePropertyId : i32 = 30036;
pub const UIA_IsSelectionPatternAvailablePropertyId : i32 = 30037;
pub const UIA_IsTablePatternAvailablePropertyId : i32 = 30038;
pub const UIA_IsTableItemPatternAvailablePropertyId : i32 = 30039;
pub const UIA_IsTextPatternAvailablePropertyId : i32 = 30040;
pub const UIA_IsTogglePatternAvailablePropertyId : i32 = 30041;
pub const UIA_IsTransformPatternAvailablePropertyId : i32 = 30042;
pub const UIA_IsValuePatternAvailablePropertyId : i32 = 30043;
pub const UIA_IsWindowPatternAvailablePropertyId : i32 = 30044;
pub const UIA_ValueValuePropertyId : i32 = 30045;
pub const UIA_ValueIsReadOnlyPropertyId : i32 = 30046;
pub const UIA_RangeValueValuePropertyId : i32 = 30047;
pub const UIA_RangeValueIsReadOnlyPropertyId : i32 = 30048;
pub const UIA_RangeValueMinimumPropertyId : i32 = 30049;
pub const UIA_RangeValueMaximumPropertyId : i32 = 30050;
pub const UIA_RangeValueLargeChangePropertyId : i32 = 30051;
pub const UIA_RangeValueSmallChangePropertyId : i32 = 30052;
pub const UIA_ScrollHorizontalScrollPercentPropertyId : i32 = 30053;
pub const UIA_ScrollHorizontalViewSizePropertyId : i32 = 30054;
pub const UIA_ScrollVerticalScrollPercentPropertyId : i32 = 30055;
pub const UIA_ScrollVerticalViewSizePropertyId : i32 = 30056;
pub const UIA_ScrollHorizontallyScrollablePropertyId : i32 = 30057;
pub const UIA_ScrollVerticallyScrollablePropertyId : i32 = 30058;
pub const UIA_SelectionSelectionPropertyId : i32 = 30059;
pub const UIA_SelectionCanSelectMultiplePropertyId : i32 = 30060;
pub const UIA_SelectionIsSelectionRequiredPropertyId : i32 = 30061;
pub const UIA_GridRowCountPropertyId : i32 = 30062;
pub const UIA_GridColumnCountPropertyId : i32 = 30063;
pub const UIA_GridItemRowPropertyId : i32 = 30064;
pub const UIA_GridItemColumnPropertyId : i32 = 30065;
pub const UIA_GridItemRowSpanPropertyId : i32 = 30066;
pub const UIA_GridItemColumnSpanPropertyId : i32 = 30067;
pub const UIA_GridItemContainingGridPropertyId : i32 = 30068;
pub const UIA_DockDockPositionPropertyId : i32 = 30069;
pub const UIA_ExpandCollapseExpandCollapseStatePropertyId : i32 = 30070;
pub const UIA_MultipleViewCurrentViewPropertyId : i32 = 30071;
pub const UIA_MultipleViewSupportedViewsPropertyId : i32 = 30072;
pub const UIA_WindowCanMaximizePropertyId : i32 = 30073;
pub const UIA_WindowCanMinimizePropertyId : i32 = 30074;
pub const UIA_WindowWindowVisualStatePropertyId : i32 = 30075;
pub const UIA_WindowWindowInteractionStatePropertyId : i32 = 30076;
pub const UIA_WindowIsModalPropertyId : i32 = 30077;
pub const UIA_WindowIsTopmostPropertyId : i32 = 30078;
pub const UIA_SelectionItemIsSelectedPropertyId : i32 = 30079;
pub const UIA_SelectionItemSelectionContainerPropertyId : i32 = 30080;
pub const UIA_TableRowHeadersPropertyId : i32 = 30081;
pub const UIA_TableColumnHeadersPropertyId : i32 = 30082;
pub const UIA_TableRowOrColumnMajorPropertyId : i32 = 30083;
pub const UIA_TableItemRowHeaderItemsPropertyId : i32 = 30084;
pub const UIA_TableItemColumnHeaderItemsPropertyId : i32 = 30085;
pub const UIA_ToggleToggleStatePropertyId : i32 = 30086;
pub const UIA_TransformCanMovePropertyId : i32 = 30087;
pub const UIA_TransformCanResizePropertyId : i32 = 30088;
pub const UIA_TransformCanRotatePropertyId : i32 = 30089;
pub const UIA_IsLegacyIAccessiblePatternAvailablePropertyId : i32 = 30090;
pub const UIA_LegacyIAccessibleChildIdPropertyId : i32 = 30091;
pub const UIA_LegacyIAccessibleNamePropertyId : i32 = 30092;
pub const UIA_LegacyIAccessibleValuePropertyId : i32 = 30093;
pub const UIA_LegacyIAccessibleDescriptionPropertyId : i32 = 30094;
pub const UIA_LegacyIAccessibleRolePropertyId : i32 = 30095;
pub const UIA_LegacyIAccessibleStatePropertyId : i32 = 30096;
pub const UIA_LegacyIAccessibleHelpPropertyId : i32 = 30097;
pub const UIA_LegacyIAccessibleKeyboardShortcutPropertyId : i32 = 30098;
pub const UIA_LegacyIAccessibleSelectionPropertyId : i32 = 30099;
pub const UIA_LegacyIAccessibleDefaultActionPropertyId : i32 = 30100;
pub const UIA_AriaRolePropertyId : i32 = 30101;
pub const UIA_AriaPropertiesPropertyId : i32 = 30102;
pub const UIA_IsDataValidForFormPropertyId : i32 = 30103;
pub const UIA_ControllerForPropertyId : i32 = 30104;
pub const UIA_DescribedByPropertyId : i32 = 30105;
pub const UIA_FlowsToPropertyId : i32 = 30106;
pub const UIA_ProviderDescriptionPropertyId : i32 = 30107;
pub const UIA_IsItemContainerPatternAvailablePropertyId : i32 = 30108;
pub const UIA_IsVirtualizedItemPatternAvailablePropertyId : i32 = 30109;
pub const UIA_IsSynchronizedInputPatternAvailablePropertyId : i32 = 30110;
pub const UIA_OptimizeForVisualContentPropertyId : i32 = 30111;
pub const UIA_IsObjectModelPatternAvailablePropertyId : i32 = 30112;
pub const UIA_AnnotationAnnotationTypeIdPropertyId : i32 = 30113;
pub const UIA_AnnotationAnnotationTypeNamePropertyId : i32 = 30114;
pub const UIA_AnnotationAuthorPropertyId : i32 = 30115;
pub const UIA_AnnotationDateTimePropertyId : i32 = 30116;
pub const UIA_AnnotationTargetPropertyId : i32 = 30117;
pub const UIA_IsAnnotationPatternAvailablePropertyId : i32 = 30118;
pub const UIA_IsTextPattern2AvailablePropertyId : i32 = 30119;
pub const UIA_StylesStyleIdPropertyId : i32 = 30120;
pub const UIA_StylesStyleNamePropertyId : i32 = 30121;
pub const UIA_StylesFillColorPropertyId : i32 = 30122;
pub const UIA_StylesFillPatternStylePropertyId : i32 = 30123;
pub const UIA_StylesShapePropertyId : i32 = 30124;
pub const UIA_StylesFillPatternColorPropertyId : i32 = 30125;
pub const UIA_StylesExtendedPropertiesPropertyId : i32 = 30126;
pub const UIA_IsStylesPatternAvailablePropertyId : i32 = 30127;
pub const UIA_IsSpreadsheetPatternAvailablePropertyId : i32 = 30128;
pub const UIA_SpreadsheetItemFormulaPropertyId : i32 = 30129;
pub const UIA_SpreadsheetItemAnnotationObjectsPropertyId : i32 = 30130;
pub const UIA_SpreadsheetItemAnnotationTypesPropertyId : i32 = 30131;
pub const UIA_IsSpreadsheetItemPatternAvailablePropertyId : i32 = 30132;
pub const UIA_Transform2CanZoomPropertyId : i32 = 30133;
pub const UIA_IsTransformPattern2AvailablePropertyId : i32 = 30134;
pub const UIA_LiveSettingPropertyId : i32 = 30135;
pub const UIA_IsTextChildPatternAvailablePropertyId : i32 = 30136;
pub const UIA_IsDragPatternAvailablePropertyId : i32 = 30137;
pub const UIA_DragIsGrabbedPropertyId : i32 = 30138;
pub const UIA_DragDropEffectPropertyId : i32 = 30139;
pub const UIA_DragDropEffectsPropertyId : i32 = 30140;
pub const UIA_IsDropTargetPatternAvailablePropertyId : i32 = 30141;
pub const UIA_DropTargetDropTargetEffectPropertyId : i32 = 30142;
pub const UIA_DropTargetDropTargetEffectsPropertyId : i32 = 30143;
pub const UIA_DragGrabbedItemsPropertyId : i32 = 30144;
pub const UIA_Transform2ZoomLevelPropertyId : i32 = 30145;
pub const UIA_Transform2ZoomMinimumPropertyId : i32 = 30146;
pub const UIA_Transform2ZoomMaximumPropertyId : i32 = 30147;
pub const UIA_FlowsFromPropertyId : i32 = 30148;
pub const UIA_IsTextEditPatternAvailablePropertyId : i32 = 30149;
pub const UIA_IsPeripheralPropertyId : i32 = 30150;
pub const UIA_IsCustomNavigationPatternAvailablePropertyId : i32 = 30151;
pub const UIA_PositionInSetPropertyId : i32 = 30152;
pub const UIA_SizeOfSetPropertyId : i32 = 30153;
pub const UIA_LevelPropertyId : i32 = 30154;
pub const UIA_AnnotationTypesPropertyId : i32 = 30155;
pub const UIA_AnnotationObjectsPropertyId : i32 = 30156;
pub const UIA_LandmarkTypePropertyId : i32 = 30157;
pub const UIA_LocalizedLandmarkTypePropertyId : i32 = 30158;
pub const UIA_FullDescriptionPropertyId : i32 = 30159;
pub const UIA_FillColorPropertyId : i32 = 30160;
pub const UIA_OutlineColorPropertyId : i32 = 30161;
pub const UIA_FillTypePropertyId : i32 = 30162;
pub const UIA_VisualEffectsPropertyId : i32 = 30163;
pub const UIA_OutlineThicknessPropertyId : i32 = 30164;
pub const UIA_CenterPointPropertyId : i32 = 30165;
pub const UIA_RotationPropertyId : i32 = 30166;
pub const UIA_SizePropertyId : i32 = 30167;
pub const UIA_IsSelectionPattern2AvailablePropertyId : i32 = 30168;
pub const UIA_Selection2FirstSelectedItemPropertyId : i32 = 30169;
pub const UIA_Selection2LastSelectedItemPropertyId : i32 = 30170;
pub const UIA_Selection2CurrentSelectedItemPropertyId : i32 = 30171;
pub const UIA_Selection2ItemCountPropertyId : i32 = 30172;
pub const UIA_HeadingLevelPropertyId : i32 = 30173;
pub const UIA_IsDialogPropertyId : i32 = 30174;
pub const UIA_AnimationStyleAttributeId : i32 = 40000;
pub const UIA_BackgroundColorAttributeId : i32 = 40001;
pub const UIA_BulletStyleAttributeId : i32 = 40002;
pub const UIA_CapStyleAttributeId : i32 = 40003;
pub const UIA_CultureAttributeId : i32 = 40004;
pub const UIA_FontNameAttributeId : i32 = 40005;
pub const UIA_FontSizeAttributeId : i32 = 40006;
pub const UIA_FontWeightAttributeId : i32 = 40007;
pub const UIA_ForegroundColorAttributeId : i32 = 40008;
pub const UIA_HorizontalTextAlignmentAttributeId : i32 = 40009;
pub const UIA_IndentationFirstLineAttributeId : i32 = 40010;
pub const UIA_IndentationLeadingAttributeId : i32 = 40011;
pub const UIA_IndentationTrailingAttributeId : i32 = 40012;
pub const UIA_IsHiddenAttributeId : i32 = 40013;
pub const UIA_IsItalicAttributeId : i32 = 40014;
pub const UIA_IsReadOnlyAttributeId : i32 = 40015;
pub const UIA_IsSubscriptAttributeId : i32 = 40016;
pub const UIA_IsSuperscriptAttributeId : i32 = 40017;
pub const UIA_MarginBottomAttributeId : i32 = 40018;
pub const UIA_MarginLeadingAttributeId : i32 = 40019;
pub const UIA_MarginTopAttributeId : i32 = 40020;
pub const UIA_MarginTrailingAttributeId : i32 = 40021;
pub const UIA_OutlineStylesAttributeId : i32 = 40022;
pub const UIA_OverlineColorAttributeId : i32 = 40023;
pub const UIA_OverlineStyleAttributeId : i32 = 40024;
pub const UIA_StrikethroughColorAttributeId : i32 = 40025;
pub const UIA_StrikethroughStyleAttributeId : i32 = 40026;
pub const UIA_TabsAttributeId : i32 = 40027;
pub const UIA_TextFlowDirectionsAttributeId : i32 = 40028;
pub const UIA_UnderlineColorAttributeId : i32 = 40029;
pub const UIA_UnderlineStyleAttributeId : i32 = 40030;
pub const UIA_AnnotationTypesAttributeId : i32 = 40031;
pub const UIA_AnnotationObjectsAttributeId : i32 = 40032;
pub const UIA_StyleNameAttributeId : i32 = 40033;
pub const UIA_StyleIdAttributeId : i32 = 40034;
pub const UIA_LinkAttributeId : i32 = 40035;
pub const UIA_IsActiveAttributeId : i32 = 40036;
pub const UIA_SelectionActiveEndAttributeId : i32 = 40037;
pub const UIA_CaretPositionAttributeId : i32 = 40038;
pub const UIA_CaretBidiModeAttributeId : i32 = 40039;
pub const UIA_LineSpacingAttributeId : i32 = 40040;
pub const UIA_BeforeParagraphSpacingAttributeId : i32 = 40041;
pub const UIA_AfterParagraphSpacingAttributeId : i32 = 40042;
pub const UIA_SayAsInterpretAsAttributeId : i32 = 40043;
pub const UIA_ButtonControlTypeId : i32 = 50000;
pub const UIA_CalendarControlTypeId : i32 = 50001;
pub const UIA_CheckBoxControlTypeId : i32 = 50002;
pub const UIA_ComboBoxControlTypeId : i32 = 50003;
pub const UIA_EditControlTypeId : i32 = 50004;
pub const UIA_HyperlinkControlTypeId : i32 = 50005;
pub const UIA_ImageControlTypeId : i32 = 50006;
pub const UIA_ListItemControlTypeId : i32 = 50007;
pub const UIA_ListControlTypeId : i32 = 50008;
pub const UIA_MenuControlTypeId : i32 = 50009;
pub const UIA_MenuBarControlTypeId : i32 = 50010;
pub const UIA_MenuItemControlTypeId : i32 = 50011;
pub const UIA_ProgressBarControlTypeId : i32 = 50012;
pub const UIA_RadioButtonControlTypeId : i32 = 50013;
pub const UIA_ScrollBarControlTypeId : i32 = 50014;
pub const UIA_SliderControlTypeId : i32 = 50015;
pub const UIA_SpinnerControlTypeId : i32 = 50016;
pub const UIA_StatusBarControlTypeId : i32 = 50017;
pub const UIA_TabControlTypeId : i32 = 50018;
pub const UIA_TabItemControlTypeId : i32 = 50019;
pub const UIA_TextControlTypeId : i32 = 50020;
pub const UIA_ToolBarControlTypeId : i32 = 50021;
pub const UIA_ToolTipControlTypeId : i32 = 50022;
pub const UIA_TreeControlTypeId : i32 = 50023;
pub const UIA_TreeItemControlTypeId : i32 = 50024;
pub const UIA_CustomControlTypeId : i32 = 50025;
pub const UIA_GroupControlTypeId : i32 = 50026;
pub const UIA_ThumbControlTypeId : i32 = 50027;
pub const UIA_DataGridControlTypeId : i32 = 50028;
pub const UIA_DataItemControlTypeId : i32 = 50029;
pub const UIA_DocumentControlTypeId : i32 = 50030;
pub const UIA_SplitButtonControlTypeId : i32 = 50031;
pub const UIA_WindowControlTypeId : i32 = 50032;
pub const UIA_PaneControlTypeId : i32 = 50033;
pub const UIA_HeaderControlTypeId : i32 = 50034;
pub const UIA_HeaderItemControlTypeId : i32 = 50035;
pub const UIA_TableControlTypeId : i32 = 50036;
pub const UIA_TitleBarControlTypeId : i32 = 50037;
pub const UIA_SeparatorControlTypeId : i32 = 50038;
pub const UIA_SemanticZoomControlTypeId : i32 = 50039;
pub const UIA_AppBarControlTypeId : i32 = 50040;
pub const AnnotationType_Unknown : i32 = 60000;
pub const AnnotationType_SpellingError : i32 = 60001;
pub const AnnotationType_GrammarError : i32 = 60002;
pub const AnnotationType_Comment : i32 = 60003;
pub const AnnotationType_FormulaError : i32 = 60004;
pub const AnnotationType_TrackChanges : i32 = 60005;
pub const AnnotationType_Header : i32 = 60006;
pub const AnnotationType_Footer : i32 = 60007;
pub const AnnotationType_Highlighted : i32 = 60008;
pub const AnnotationType_Endnote : i32 = 60009;
pub const AnnotationType_Footnote : i32 = 60010;
pub const AnnotationType_InsertionChange : i32 = 60011;
pub const AnnotationType_DeletionChange : i32 = 60012;
pub const AnnotationType_MoveChange : i32 = 60013;
pub const AnnotationType_FormatChange : i32 = 60014;
pub const AnnotationType_UnsyncedChange : i32 = 60015;
pub const AnnotationType_EditingLockedChange : i32 = 60016;
pub const AnnotationType_ExternalChange : i32 = 60017;
pub const AnnotationType_ConflictingChange : i32 = 60018;
pub const AnnotationType_Author : i32 = 60019;
pub const AnnotationType_AdvancedProofingIssue : i32 = 60020;
pub const AnnotationType_DataValidationError : i32 = 60021;
pub const AnnotationType_CircularReferenceError : i32 = 60022;
pub const AnnotationType_Mathematics : i32 = 60023;
pub const AnnotationType_Sensitive : i32 = 60024;
pub const StyleId_Custom : i32 = 70000;
pub const StyleId_Heading1 : i32 = 70001;
pub const StyleId_Heading2 : i32 = 70002;
pub const StyleId_Heading3 : i32 = 70003;
pub const StyleId_Heading4 : i32 = 70004;
pub const StyleId_Heading5 : i32 = 70005;
pub const StyleId_Heading6 : i32 = 70006;
pub const StyleId_Heading7 : i32 = 70007;
pub const StyleId_Heading8 : i32 = 70008;
pub const StyleId_Heading9 : i32 = 70009;
pub const StyleId_Title : i32 = 70010;
pub const StyleId_Subtitle : i32 = 70011;
pub const StyleId_Normal : i32 = 70012;
pub const StyleId_Emphasis : i32 = 70013;
pub const StyleId_Quote : i32 = 70014;
pub const StyleId_BulletedList : i32 = 70015;
pub const StyleId_NumberedList : i32 = 70016;
pub const UIA_CustomLandmarkTypeId : i32 = 80000;
pub const UIA_FormLandmarkTypeId : i32 = 80001;
pub const UIA_MainLandmarkTypeId : i32 = 80002;
pub const UIA_NavigationLandmarkTypeId : i32 = 80003;
pub const UIA_SearchLandmarkTypeId : i32 = 80004;
pub const HeadingLevel_None : i32 = 80050;
pub const HeadingLevel1 : i32 = 80051;
pub const HeadingLevel2 : i32 = 80052;
pub const HeadingLevel3 : i32 = 80053;
pub const HeadingLevel4 : i32 = 80054;
pub const HeadingLevel5 : i32 = 80055;
pub const HeadingLevel6 : i32 = 80056;
pub const HeadingLevel7 : i32 = 80057;
pub const HeadingLevel8 : i32 = 80058;
pub const HeadingLevel9 : i32 = 80059;
pub const UIA_SummaryChangeId : i32 = 90000;
pub const UIA_SayAsInterpretAsMetadataId : i32 = 100000;

//
// types
//
// --------------------------------------------------------
// Type: SERIALKEYSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERIALKEYSA = extern struct {
    cbSize: u32,
    dwFlags: u32,
    lpszActivePort: ?*i8,
    lpszPort: ?*i8,
    iBaudRate: u32,
    iPortState: u32,
    iActive: u32,
};
// --------------------------------------------------------
// Type: SERIALKEYSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERIALKEYSW = extern struct {
    cbSize: u32,
    dwFlags: u32,
    lpszActivePort: ?*u16,
    lpszPort: ?*u16,
    iBaudRate: u32,
    iPortState: u32,
    iActive: u32,
};
// --------------------------------------------------------
// Type: HIGHCONTRASTA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HIGHCONTRASTA = extern struct {
    cbSize: u32,
    dwFlags: u32,
    lpszDefaultScheme: ?*i8,
};
// --------------------------------------------------------
// Type: HIGHCONTRASTW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HIGHCONTRASTW = extern struct {
    cbSize: u32,
    dwFlags: u32,
    lpszDefaultScheme: ?*u16,
};
// --------------------------------------------------------
// Type: FILTERKEYS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILTERKEYS = extern struct {
    cbSize: u32,
    dwFlags: u32,
    iWaitMSec: u32,
    iDelayMSec: u32,
    iRepeatMSec: u32,
    iBounceMSec: u32,
};
// --------------------------------------------------------
// Type: STICKYKEYS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STICKYKEYS = extern struct {
    cbSize: u32,
    dwFlags: u32,
};
// --------------------------------------------------------
// Type: MOUSEKEYS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MOUSEKEYS = extern struct {
    cbSize: u32,
    dwFlags: u32,
    iMaxSpeed: u32,
    iTimeToMaxSpeed: u32,
    iCtrlSpeed: u32,
    dwReserved1: u32,
    dwReserved2: u32,
};
// --------------------------------------------------------
// Type: ACCESSTIMEOUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACCESSTIMEOUT = extern struct {
    cbSize: u32,
    dwFlags: u32,
    iTimeOutMSec: u32,
};
// --------------------------------------------------------
// Type: SOUNDSENTRYA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SOUNDSENTRYA = extern struct {
    cbSize: u32,
    dwFlags: u32,
    iFSTextEffect: u32,
    iFSTextEffectMSec: u32,
    iFSTextEffectColorBits: u32,
    iFSGrafEffect: u32,
    iFSGrafEffectMSec: u32,
    iFSGrafEffectColor: u32,
    iWindowsEffect: u32,
    iWindowsEffectMSec: u32,
    lpszWindowsEffectDLL: ?*i8,
    iWindowsEffectOrdinal: u32,
};
// --------------------------------------------------------
// Type: SOUNDSENTRYW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SOUNDSENTRYW = extern struct {
    cbSize: u32,
    dwFlags: u32,
    iFSTextEffect: u32,
    iFSTextEffectMSec: u32,
    iFSTextEffectColorBits: u32,
    iFSGrafEffect: u32,
    iFSGrafEffectMSec: u32,
    iFSGrafEffectColor: u32,
    iWindowsEffect: u32,
    iWindowsEffectMSec: u32,
    lpszWindowsEffectDLL: ?*u16,
    iWindowsEffectOrdinal: u32,
};
// --------------------------------------------------------
// Type: TOGGLEKEYS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TOGGLEKEYS = extern struct {
    cbSize: u32,
    dwFlags: u32,
};
// --------------------------------------------------------
// Type: WINEVENTPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WINEVENTPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: MSAAControl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MSAAControl = opaque {
};
// --------------------------------------------------------
// Type: AccStore
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const AccStore = opaque {
};
// --------------------------------------------------------
// Type: AccDictionary
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const AccDictionary = opaque {
};
// --------------------------------------------------------
// Type: AccServerDocMgr
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const AccServerDocMgr = opaque {
};
// --------------------------------------------------------
// Type: AccClientDocMgr
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const AccClientDocMgr = opaque {
};
// --------------------------------------------------------
// Type: DocWrap
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const DocWrap = opaque {
};
// --------------------------------------------------------
// Type: IInternalDocWrap
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInternalDocWrap = *opaque{
    // TODO: Method 'NotifyRevoke'
};
// --------------------------------------------------------
// Type: ITextStoreACPEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextStoreACPEx = *opaque{
    // TODO: Method 'ScrollToRect'
};
// --------------------------------------------------------
// Type: ITextStoreAnchorEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextStoreAnchorEx = *opaque{
    // TODO: Method 'ScrollToRect'
};
// --------------------------------------------------------
// Type: ITextStoreACPSinkEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextStoreACPSinkEx = *opaque{
    // TODO: Method 'OnDisconnect'
};
// --------------------------------------------------------
// Type: ITextStoreSinkAnchorEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextStoreSinkAnchorEx = *opaque{
    // TODO: Method 'OnDisconnect'
};
// --------------------------------------------------------
// Type: IAccDictionary
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAccDictionary = *opaque{
    // TODO: Method 'GetLocalizedString'
    // TODO: Method 'GetParentTerm'
    // TODO: Method 'GetMnemonicString'
    // TODO: Method 'LookupMnemonicTerm'
    // TODO: Method 'ConvertValueToString'
};
// --------------------------------------------------------
// Type: IVersionInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVersionInfo = *opaque{
    // TODO: Method 'GetSubcomponentCount'
    // TODO: Method 'GetImplementationID'
    // TODO: Method 'GetBuildVersion'
    // TODO: Method 'GetComponentDescription'
    // TODO: Method 'GetInstanceDescription'
};
// --------------------------------------------------------
// Type: ICoCreateLocally
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICoCreateLocally = *opaque{
    // TODO: Method 'CoCreateLocally'
};
// --------------------------------------------------------
// Type: ICoCreatedLocally
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICoCreatedLocally = *opaque{
    // TODO: Method 'LocalInit'
};
// --------------------------------------------------------
// Type: IAccStore
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAccStore = *opaque{
    // TODO: Method 'Register'
    // TODO: Method 'Unregister'
    // TODO: Method 'GetDocuments'
    // TODO: Method 'LookupByHWND'
    // TODO: Method 'LookupByPoint'
    // TODO: Method 'OnDocumentFocus'
    // TODO: Method 'GetFocused'
};
// --------------------------------------------------------
// Type: IAccServerDocMgr
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAccServerDocMgr = *opaque{
    // TODO: Method 'NewDocument'
    // TODO: Method 'RevokeDocument'
    // TODO: Method 'OnDocumentFocus'
};
// --------------------------------------------------------
// Type: IAccClientDocMgr
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAccClientDocMgr = *opaque{
    // TODO: Method 'GetDocuments'
    // TODO: Method 'LookupByHWND'
    // TODO: Method 'LookupByPoint'
    // TODO: Method 'GetFocused'
};
// --------------------------------------------------------
// Type: IDocWrap
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDocWrap = *opaque{
    // TODO: Method 'SetDoc'
    // TODO: Method 'GetWrappedDoc'
};
// --------------------------------------------------------
// Type: IClonableWrapper
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IClonableWrapper = *opaque{
    // TODO: Method 'CloneNewWrapper'
};
// --------------------------------------------------------
// Type: CAccPropServices
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CAccPropServices = opaque {
};
// --------------------------------------------------------
// Type: LPFNLRESULTFROMOBJECT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFNLRESULTFROMOBJECT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPFNOBJECTFROMLRESULT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFNOBJECTFROMLRESULT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPFNACCESSIBLEOBJECTFROMWINDOW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFNACCESSIBLEOBJECTFROMWINDOW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPFNACCESSIBLEOBJECTFROMPOINT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFNACCESSIBLEOBJECTFROMPOINT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPFNCREATESTDACCESSIBLEOBJECT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFNCREATESTDACCESSIBLEOBJECT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPFNACCESSIBLECHILDREN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFNACCESSIBLECHILDREN = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: MSAAMENUINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSAAMENUINFO = extern struct {
    dwMSAASignature: u32,
    cchWText: u32,
    pszWText: ?*u16,
};
// --------------------------------------------------------
// Type: IAccessible
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAccessible = *opaque{
    // TODO: Method 'get_accParent'
    // TODO: Method 'get_accChildCount'
    // TODO: Method 'get_accChild'
    // TODO: Method 'get_accName'
    // TODO: Method 'get_accValue'
    // TODO: Method 'get_accDescription'
    // TODO: Method 'get_accRole'
    // TODO: Method 'get_accState'
    // TODO: Method 'get_accHelp'
    // TODO: Method 'get_accHelpTopic'
    // TODO: Method 'get_accKeyboardShortcut'
    // TODO: Method 'get_accFocus'
    // TODO: Method 'get_accSelection'
    // TODO: Method 'get_accDefaultAction'
    // TODO: Method 'accSelect'
    // TODO: Method 'accLocation'
    // TODO: Method 'accNavigate'
    // TODO: Method 'accHitTest'
    // TODO: Method 'accDoDefaultAction'
    // TODO: Method 'put_accName'
    // TODO: Method 'put_accValue'
};
// --------------------------------------------------------
// Type: IAccessibleHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAccessibleHandler = *opaque{
    // TODO: Method 'AccessibleObjectFromID'
};
// --------------------------------------------------------
// Type: IAccessibleWindowlessSite
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAccessibleWindowlessSite = *opaque{
    // TODO: Method 'AcquireObjectIdRange'
    // TODO: Method 'ReleaseObjectIdRange'
    // TODO: Method 'QueryObjectIdRanges'
    // TODO: Method 'GetParentAccessible'
};
// --------------------------------------------------------
// Type: AnnoScope
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AnnoScope = *opaque{
};
// --------------------------------------------------------
// Type: IAccIdentity
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAccIdentity = *opaque{
    // TODO: Method 'GetIdentityString'
};
// --------------------------------------------------------
// Type: IAccPropServer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAccPropServer = *opaque{
    // TODO: Method 'GetPropValue'
};
// --------------------------------------------------------
// Type: IAccPropServices
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAccPropServices = *opaque{
    // TODO: Method 'SetPropValue'
    // TODO: Method 'SetPropServer'
    // TODO: Method 'ClearProps'
    // TODO: Method 'SetHwndProp'
    // TODO: Method 'SetHwndPropStr'
    // TODO: Method 'SetHwndPropServer'
    // TODO: Method 'ClearHwndProps'
    // TODO: Method 'ComposeHwndIdentityString'
    // TODO: Method 'DecomposeHwndIdentityString'
    // TODO: Method 'SetHmenuProp'
    // TODO: Method 'SetHmenuPropStr'
    // TODO: Method 'SetHmenuPropServer'
    // TODO: Method 'ClearHmenuProps'
    // TODO: Method 'ComposeHmenuIdentityString'
    // TODO: Method 'DecomposeHmenuIdentityString'
};
// --------------------------------------------------------
// Type: CUIAutomationRegistrar
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CUIAutomationRegistrar = opaque {
};
// --------------------------------------------------------
// Type: NavigateDirection
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NavigateDirection = *opaque{
};
// --------------------------------------------------------
// Type: ProviderOptions
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ProviderOptions = *opaque{
};
// --------------------------------------------------------
// Type: StructureChangeType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const StructureChangeType = *opaque{
};
// --------------------------------------------------------
// Type: TextEditChangeType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TextEditChangeType = *opaque{
};
// --------------------------------------------------------
// Type: OrientationType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OrientationType = *opaque{
};
// --------------------------------------------------------
// Type: DockPosition
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DockPosition = *opaque{
};
// --------------------------------------------------------
// Type: ExpandCollapseState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ExpandCollapseState = *opaque{
};
// --------------------------------------------------------
// Type: ScrollAmount
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ScrollAmount = *opaque{
};
// --------------------------------------------------------
// Type: RowOrColumnMajor
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RowOrColumnMajor = *opaque{
};
// --------------------------------------------------------
// Type: ToggleState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ToggleState = *opaque{
};
// --------------------------------------------------------
// Type: WindowVisualState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WindowVisualState = *opaque{
};
// --------------------------------------------------------
// Type: SynchronizedInputType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SynchronizedInputType = *opaque{
};
// --------------------------------------------------------
// Type: WindowInteractionState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WindowInteractionState = *opaque{
};
// --------------------------------------------------------
// Type: SayAsInterpretAs
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SayAsInterpretAs = *opaque{
};
// --------------------------------------------------------
// Type: TextUnit
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TextUnit = *opaque{
};
// --------------------------------------------------------
// Type: TextPatternRangeEndpoint
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TextPatternRangeEndpoint = *opaque{
};
// --------------------------------------------------------
// Type: SupportedTextSelection
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SupportedTextSelection = *opaque{
};
// --------------------------------------------------------
// Type: LiveSetting
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LiveSetting = *opaque{
};
// --------------------------------------------------------
// Type: ActiveEnd
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ActiveEnd = *opaque{
};
// --------------------------------------------------------
// Type: CaretPosition
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CaretPosition = *opaque{
};
// --------------------------------------------------------
// Type: CaretBidiMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CaretBidiMode = *opaque{
};
// --------------------------------------------------------
// Type: ZoomUnit
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ZoomUnit = *opaque{
};
// --------------------------------------------------------
// Type: AnimationStyle
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AnimationStyle = *opaque{
};
// --------------------------------------------------------
// Type: BulletStyle
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const BulletStyle = *opaque{
};
// --------------------------------------------------------
// Type: CapStyle
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CapStyle = *opaque{
};
// --------------------------------------------------------
// Type: FillType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FillType = *opaque{
};
// --------------------------------------------------------
// Type: FlowDirections
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FlowDirections = *opaque{
};
// --------------------------------------------------------
// Type: HorizontalTextAlignment
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HorizontalTextAlignment = *opaque{
};
// --------------------------------------------------------
// Type: OutlineStyles
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OutlineStyles = *opaque{
};
// --------------------------------------------------------
// Type: TextDecorationLineStyle
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TextDecorationLineStyle = *opaque{
};
// --------------------------------------------------------
// Type: VisualEffects
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const VisualEffects = *opaque{
};
// --------------------------------------------------------
// Type: NotificationProcessing
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NotificationProcessing = *opaque{
};
// --------------------------------------------------------
// Type: NotificationKind
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NotificationKind = *opaque{
};
// --------------------------------------------------------
// Type: UiaRect
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UiaRect = extern struct {
    left: f64,
    top: f64,
    width: f64,
    height: f64,
};
// --------------------------------------------------------
// Type: UiaPoint
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UiaPoint = extern struct {
    x: f64,
    y: f64,
};
// --------------------------------------------------------
// Type: UiaChangeInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UiaChangeInfo = extern struct {
    uiaId: i32,
    payload: VARIANT,
    extraInfo: VARIANT,
};
// --------------------------------------------------------
// Type: UIAutomationType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UIAutomationType = *opaque{
};
// --------------------------------------------------------
// Type: UIAutomationParameter
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UIAutomationParameter = extern struct {
    type: UIAutomationType,
    pData: ?*opaque{},
};
// --------------------------------------------------------
// Type: UIAutomationPropertyInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UIAutomationPropertyInfo = extern struct {
    guid: Guid,
    pProgrammaticName: ?*u16,
    type: UIAutomationType,
};
// --------------------------------------------------------
// Type: UIAutomationEventInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UIAutomationEventInfo = extern struct {
    guid: Guid,
    pProgrammaticName: ?*u16,
};
// --------------------------------------------------------
// Type: UIAutomationMethodInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UIAutomationMethodInfo = extern struct {
    pProgrammaticName: ?*u16,
    doSetFocus: BOOL,
    cInParameters: u32,
    cOutParameters: u32,
    pParameterTypes: ?*UIAutomationType,
    pParameterNames: ?*?*u16,
};
// --------------------------------------------------------
// Type: UIAutomationPatternInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UIAutomationPatternInfo = extern struct {
    guid: Guid,
    pProgrammaticName: ?*u16,
    providerInterfaceId: Guid,
    clientInterfaceId: Guid,
    cProperties: u32,
    pProperties: ?*UIAutomationPropertyInfo,
    cMethods: u32,
    pMethods: ?*UIAutomationMethodInfo,
    cEvents: u32,
    pEvents: ?*UIAutomationEventInfo,
    pPatternHandler: IUIAutomationPatternHandler,
};
// --------------------------------------------------------
// Type: IRawElementProviderSimple
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRawElementProviderSimple = *opaque{
    // TODO: Method 'get_ProviderOptions'
    // TODO: Method 'GetPatternProvider'
    // TODO: Method 'GetPropertyValue'
    // TODO: Method 'get_HostRawElementProvider'
};
// --------------------------------------------------------
// Type: IAccessibleEx
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAccessibleEx = *opaque{
    // TODO: Method 'GetObjectForChild'
    // TODO: Method 'GetIAccessiblePair'
    // TODO: Method 'GetRuntimeId'
    // TODO: Method 'ConvertReturnedElement'
};
// --------------------------------------------------------
// Type: IRawElementProviderSimple2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRawElementProviderSimple2 = *opaque{
    // TODO: Method 'ShowContextMenu'
};
// --------------------------------------------------------
// Type: IRawElementProviderSimple3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRawElementProviderSimple3 = *opaque{
    // TODO: Method 'GetMetadataValue'
};
// --------------------------------------------------------
// Type: IRawElementProviderFragmentRoot
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRawElementProviderFragmentRoot = *opaque{
    // TODO: Method 'ElementProviderFromPoint'
    // TODO: Method 'GetFocus'
};
// --------------------------------------------------------
// Type: IRawElementProviderFragment
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRawElementProviderFragment = *opaque{
    // TODO: Method 'Navigate'
    // TODO: Method 'GetRuntimeId'
    // TODO: Method 'get_BoundingRectangle'
    // TODO: Method 'GetEmbeddedFragmentRoots'
    // TODO: Method 'SetFocus'
    // TODO: Method 'get_FragmentRoot'
};
// --------------------------------------------------------
// Type: IRawElementProviderAdviseEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRawElementProviderAdviseEvents = *opaque{
    // TODO: Method 'AdviseEventAdded'
    // TODO: Method 'AdviseEventRemoved'
};
// --------------------------------------------------------
// Type: IRawElementProviderHwndOverride
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRawElementProviderHwndOverride = *opaque{
    // TODO: Method 'GetOverrideProviderForHwnd'
};
// --------------------------------------------------------
// Type: IProxyProviderWinEventSink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IProxyProviderWinEventSink = *opaque{
    // TODO: Method 'AddAutomationPropertyChangedEvent'
    // TODO: Method 'AddAutomationEvent'
    // TODO: Method 'AddStructureChangedEvent'
};
// --------------------------------------------------------
// Type: IProxyProviderWinEventHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IProxyProviderWinEventHandler = *opaque{
    // TODO: Method 'RespondToWinEvent'
};
// --------------------------------------------------------
// Type: IRawElementProviderWindowlessSite
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRawElementProviderWindowlessSite = *opaque{
    // TODO: Method 'GetAdjacentFragment'
    // TODO: Method 'GetRuntimeIdPrefix'
};
// --------------------------------------------------------
// Type: IAccessibleHostingElementProviders
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAccessibleHostingElementProviders = *opaque{
    // TODO: Method 'GetEmbeddedFragmentRoots'
    // TODO: Method 'GetObjectIdForProvider'
};
// --------------------------------------------------------
// Type: IRawElementProviderHostingAccessibles
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRawElementProviderHostingAccessibles = *opaque{
    // TODO: Method 'GetEmbeddedAccessibles'
};
// --------------------------------------------------------
// Type: IDockProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDockProvider = *opaque{
    // TODO: Method 'SetDockPosition'
    // TODO: Method 'get_DockPosition'
};
// --------------------------------------------------------
// Type: IExpandCollapseProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IExpandCollapseProvider = *opaque{
    // TODO: Method 'Expand'
    // TODO: Method 'Collapse'
    // TODO: Method 'get_ExpandCollapseState'
};
// --------------------------------------------------------
// Type: IGridProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IGridProvider = *opaque{
    // TODO: Method 'GetItem'
    // TODO: Method 'get_RowCount'
    // TODO: Method 'get_ColumnCount'
};
// --------------------------------------------------------
// Type: IGridItemProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IGridItemProvider = *opaque{
    // TODO: Method 'get_Row'
    // TODO: Method 'get_Column'
    // TODO: Method 'get_RowSpan'
    // TODO: Method 'get_ColumnSpan'
    // TODO: Method 'get_ContainingGrid'
};
// --------------------------------------------------------
// Type: IInvokeProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IInvokeProvider = *opaque{
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: IMultipleViewProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMultipleViewProvider = *opaque{
    // TODO: Method 'GetViewName'
    // TODO: Method 'SetCurrentView'
    // TODO: Method 'get_CurrentView'
    // TODO: Method 'GetSupportedViews'
};
// --------------------------------------------------------
// Type: IRangeValueProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRangeValueProvider = *opaque{
    // TODO: Method 'SetValue'
    // TODO: Method 'get_Value'
    // TODO: Method 'get_IsReadOnly'
    // TODO: Method 'get_Maximum'
    // TODO: Method 'get_Minimum'
    // TODO: Method 'get_LargeChange'
    // TODO: Method 'get_SmallChange'
};
// --------------------------------------------------------
// Type: IScrollItemProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IScrollItemProvider = *opaque{
    // TODO: Method 'ScrollIntoView'
};
// --------------------------------------------------------
// Type: ISelectionProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISelectionProvider = *opaque{
    // TODO: Method 'GetSelection'
    // TODO: Method 'get_CanSelectMultiple'
    // TODO: Method 'get_IsSelectionRequired'
};
// --------------------------------------------------------
// Type: ISelectionProvider2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISelectionProvider2 = *opaque{
    // TODO: Method 'get_FirstSelectedItem'
    // TODO: Method 'get_LastSelectedItem'
    // TODO: Method 'get_CurrentSelectedItem'
    // TODO: Method 'get_ItemCount'
};
// --------------------------------------------------------
// Type: IScrollProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IScrollProvider = *opaque{
    // TODO: Method 'Scroll'
    // TODO: Method 'SetScrollPercent'
    // TODO: Method 'get_HorizontalScrollPercent'
    // TODO: Method 'get_VerticalScrollPercent'
    // TODO: Method 'get_HorizontalViewSize'
    // TODO: Method 'get_VerticalViewSize'
    // TODO: Method 'get_HorizontallyScrollable'
    // TODO: Method 'get_VerticallyScrollable'
};
// --------------------------------------------------------
// Type: ISelectionItemProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISelectionItemProvider = *opaque{
    // TODO: Method 'Select'
    // TODO: Method 'AddToSelection'
    // TODO: Method 'RemoveFromSelection'
    // TODO: Method 'get_IsSelected'
    // TODO: Method 'get_SelectionContainer'
};
// --------------------------------------------------------
// Type: ISynchronizedInputProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISynchronizedInputProvider = *opaque{
    // TODO: Method 'StartListening'
    // TODO: Method 'Cancel'
};
// --------------------------------------------------------
// Type: ITableProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITableProvider = *opaque{
    // TODO: Method 'GetRowHeaders'
    // TODO: Method 'GetColumnHeaders'
    // TODO: Method 'get_RowOrColumnMajor'
};
// --------------------------------------------------------
// Type: ITableItemProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITableItemProvider = *opaque{
    // TODO: Method 'GetRowHeaderItems'
    // TODO: Method 'GetColumnHeaderItems'
};
// --------------------------------------------------------
// Type: IToggleProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IToggleProvider = *opaque{
    // TODO: Method 'Toggle'
    // TODO: Method 'get_ToggleState'
};
// --------------------------------------------------------
// Type: ITransformProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITransformProvider = *opaque{
    // TODO: Method 'Move'
    // TODO: Method 'Resize'
    // TODO: Method 'Rotate'
    // TODO: Method 'get_CanMove'
    // TODO: Method 'get_CanResize'
    // TODO: Method 'get_CanRotate'
};
// --------------------------------------------------------
// Type: IValueProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IValueProvider = *opaque{
    // TODO: Method 'SetValue'
    // TODO: Method 'get_Value'
    // TODO: Method 'get_IsReadOnly'
};
// --------------------------------------------------------
// Type: IWindowProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWindowProvider = *opaque{
    // TODO: Method 'SetVisualState'
    // TODO: Method 'Close'
    // TODO: Method 'WaitForInputIdle'
    // TODO: Method 'get_CanMaximize'
    // TODO: Method 'get_CanMinimize'
    // TODO: Method 'get_IsModal'
    // TODO: Method 'get_WindowVisualState'
    // TODO: Method 'get_WindowInteractionState'
    // TODO: Method 'get_IsTopmost'
};
// --------------------------------------------------------
// Type: ILegacyIAccessibleProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ILegacyIAccessibleProvider = *opaque{
    // TODO: Method 'Select'
    // TODO: Method 'DoDefaultAction'
    // TODO: Method 'SetValue'
    // TODO: Method 'GetIAccessible'
    // TODO: Method 'get_ChildId'
    // TODO: Method 'get_Name'
    // TODO: Method 'get_Value'
    // TODO: Method 'get_Description'
    // TODO: Method 'get_Role'
    // TODO: Method 'get_State'
    // TODO: Method 'get_Help'
    // TODO: Method 'get_KeyboardShortcut'
    // TODO: Method 'GetSelection'
    // TODO: Method 'get_DefaultAction'
};
// --------------------------------------------------------
// Type: IItemContainerProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IItemContainerProvider = *opaque{
    // TODO: Method 'FindItemByProperty'
};
// --------------------------------------------------------
// Type: IVirtualizedItemProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IVirtualizedItemProvider = *opaque{
    // TODO: Method 'Realize'
};
// --------------------------------------------------------
// Type: IObjectModelProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IObjectModelProvider = *opaque{
    // TODO: Method 'GetUnderlyingObjectModel'
};
// --------------------------------------------------------
// Type: IAnnotationProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAnnotationProvider = *opaque{
    // TODO: Method 'get_AnnotationTypeId'
    // TODO: Method 'get_AnnotationTypeName'
    // TODO: Method 'get_Author'
    // TODO: Method 'get_DateTime'
    // TODO: Method 'get_Target'
};
// --------------------------------------------------------
// Type: IStylesProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IStylesProvider = *opaque{
    // TODO: Method 'get_StyleId'
    // TODO: Method 'get_StyleName'
    // TODO: Method 'get_FillColor'
    // TODO: Method 'get_FillPatternStyle'
    // TODO: Method 'get_Shape'
    // TODO: Method 'get_FillPatternColor'
    // TODO: Method 'get_ExtendedProperties'
};
// --------------------------------------------------------
// Type: ISpreadsheetProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISpreadsheetProvider = *opaque{
    // TODO: Method 'GetItemByName'
};
// --------------------------------------------------------
// Type: ISpreadsheetItemProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISpreadsheetItemProvider = *opaque{
    // TODO: Method 'get_Formula'
    // TODO: Method 'GetAnnotationObjects'
    // TODO: Method 'GetAnnotationTypes'
};
// --------------------------------------------------------
// Type: ITransformProvider2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITransformProvider2 = *opaque{
    // TODO: Method 'Zoom'
    // TODO: Method 'get_CanZoom'
    // TODO: Method 'get_ZoomLevel'
    // TODO: Method 'get_ZoomMinimum'
    // TODO: Method 'get_ZoomMaximum'
    // TODO: Method 'ZoomByUnit'
};
// --------------------------------------------------------
// Type: IDragProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDragProvider = *opaque{
    // TODO: Method 'get_IsGrabbed'
    // TODO: Method 'get_DropEffect'
    // TODO: Method 'get_DropEffects'
    // TODO: Method 'GetGrabbedItems'
};
// --------------------------------------------------------
// Type: IDropTargetProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDropTargetProvider = *opaque{
    // TODO: Method 'get_DropTargetEffect'
    // TODO: Method 'get_DropTargetEffects'
};
// --------------------------------------------------------
// Type: ITextRangeProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextRangeProvider = *opaque{
    // TODO: Method 'Clone'
    // TODO: Method 'Compare'
    // TODO: Method 'CompareEndpoints'
    // TODO: Method 'ExpandToEnclosingUnit'
    // TODO: Method 'FindAttribute'
    // TODO: Method 'FindTextA'
    // TODO: Method 'GetAttributeValue'
    // TODO: Method 'GetBoundingRectangles'
    // TODO: Method 'GetEnclosingElement'
    // TODO: Method 'GetText'
    // TODO: Method 'Move'
    // TODO: Method 'MoveEndpointByUnit'
    // TODO: Method 'MoveEndpointByRange'
    // TODO: Method 'Select'
    // TODO: Method 'AddToSelection'
    // TODO: Method 'RemoveFromSelection'
    // TODO: Method 'ScrollIntoView'
    // TODO: Method 'GetChildren'
};
// --------------------------------------------------------
// Type: ITextProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextProvider = *opaque{
    // TODO: Method 'GetSelection'
    // TODO: Method 'GetVisibleRanges'
    // TODO: Method 'RangeFromChild'
    // TODO: Method 'RangeFromPoint'
    // TODO: Method 'get_DocumentRange'
    // TODO: Method 'get_SupportedTextSelection'
};
// --------------------------------------------------------
// Type: ITextProvider2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextProvider2 = *opaque{
    // TODO: Method 'RangeFromAnnotation'
    // TODO: Method 'GetCaretRange'
};
// --------------------------------------------------------
// Type: ITextEditProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextEditProvider = *opaque{
    // TODO: Method 'GetActiveComposition'
    // TODO: Method 'GetConversionTarget'
};
// --------------------------------------------------------
// Type: ITextRangeProvider2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextRangeProvider2 = *opaque{
    // TODO: Method 'ShowContextMenu'
};
// --------------------------------------------------------
// Type: ITextChildProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITextChildProvider = *opaque{
    // TODO: Method 'get_TextContainer'
    // TODO: Method 'get_TextRange'
};
// --------------------------------------------------------
// Type: ICustomNavigationProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ICustomNavigationProvider = *opaque{
    // TODO: Method 'Navigate'
};
// --------------------------------------------------------
// Type: IUIAutomationPatternInstance
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationPatternInstance = *opaque{
    // TODO: Method 'GetProperty'
    // TODO: Method 'CallMethod'
};
// --------------------------------------------------------
// Type: IUIAutomationPatternHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationPatternHandler = *opaque{
    // TODO: Method 'CreateClientWrapper'
    // TODO: Method 'Dispatch'
};
// --------------------------------------------------------
// Type: IUIAutomationRegistrar
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationRegistrar = *opaque{
    // TODO: Method 'RegisterProperty'
    // TODO: Method 'RegisterEvent'
    // TODO: Method 'RegisterPattern'
};
// --------------------------------------------------------
// Type: HUIANODE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HUIANODE__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: HUIAPATTERNOBJECT__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HUIAPATTERNOBJECT__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: HUIATEXTRANGE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HUIATEXTRANGE__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: HUIAEVENT__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HUIAEVENT__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: TreeScope
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TreeScope = *opaque{
};
// --------------------------------------------------------
// Type: ConditionType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ConditionType = *opaque{
};
// --------------------------------------------------------
// Type: UiaCondition
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UiaCondition = extern struct {
    ConditionType: ConditionType,
};
// --------------------------------------------------------
// Type: PropertyConditionFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PropertyConditionFlags = *opaque{
};
// --------------------------------------------------------
// Type: UiaPropertyCondition
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UiaPropertyCondition = extern struct {
    ConditionType: ConditionType,
    PropertyId: i32,
    Value: VARIANT,
    Flags: PropertyConditionFlags,
};
// --------------------------------------------------------
// Type: UiaAndOrCondition
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UiaAndOrCondition = extern struct {
    ConditionType: ConditionType,
    ppConditions: ?*?*UiaCondition,
    cConditions: i32,
};
// --------------------------------------------------------
// Type: UiaNotCondition
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UiaNotCondition = extern struct {
    ConditionType: ConditionType,
    pCondition: ?*UiaCondition,
};
// --------------------------------------------------------
// Type: AutomationElementMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AutomationElementMode = *opaque{
};
// --------------------------------------------------------
// Type: UiaCacheRequest
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UiaCacheRequest = extern struct {
    pViewCondition: ?*UiaCondition,
    Scope: TreeScope,
    pProperties: ?*i32,
    cProperties: i32,
    pPatterns: ?*i32,
    cPatterns: i32,
    automationElementMode: AutomationElementMode,
};
// --------------------------------------------------------
// Type: NormalizeState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NormalizeState = *opaque{
};
// --------------------------------------------------------
// Type: TreeTraversalOptions
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TreeTraversalOptions = *opaque{
};
// --------------------------------------------------------
// Type: UiaFindParams
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UiaFindParams = extern struct {
    MaxDepth: i32,
    FindFirst: BOOL,
    ExcludeRoot: BOOL,
    pFindCondition: ?*UiaCondition,
};
// --------------------------------------------------------
// Type: ProviderType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ProviderType = *opaque{
};
// --------------------------------------------------------
// Type: UiaProviderCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UiaProviderCallback = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: AutomationIdentifierType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AutomationIdentifierType = *opaque{
};
// --------------------------------------------------------
// Type: EventArgsType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EventArgsType = *opaque{
};
// --------------------------------------------------------
// Type: AsyncContentLoadedState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AsyncContentLoadedState = *opaque{
};
// --------------------------------------------------------
// Type: UiaEventArgs
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UiaEventArgs = extern struct {
    Type: EventArgsType,
    EventId: i32,
};
// --------------------------------------------------------
// Type: UiaPropertyChangedEventArgs
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UiaPropertyChangedEventArgs = extern struct {
    Type: EventArgsType,
    EventId: i32,
    PropertyId: i32,
    OldValue: VARIANT,
    NewValue: VARIANT,
};
// --------------------------------------------------------
// Type: UiaStructureChangedEventArgs
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UiaStructureChangedEventArgs = extern struct {
    Type: EventArgsType,
    EventId: i32,
    StructureChangeType: StructureChangeType,
    pRuntimeId: ?*i32,
    cRuntimeIdLen: i32,
};
// --------------------------------------------------------
// Type: UiaTextEditTextChangedEventArgs
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UiaTextEditTextChangedEventArgs = extern struct {
    Type: EventArgsType,
    EventId: i32,
    TextEditChangeType: TextEditChangeType,
    pTextChange: ?*SAFEARRAY,
};
// --------------------------------------------------------
// Type: UiaChangesEventArgs
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UiaChangesEventArgs = extern struct {
    Type: EventArgsType,
    EventId: i32,
    EventIdCount: i32,
    pUiaChanges: ?*UiaChangeInfo,
};
// --------------------------------------------------------
// Type: UiaAsyncContentLoadedEventArgs
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UiaAsyncContentLoadedEventArgs = extern struct {
    Type: EventArgsType,
    EventId: i32,
    AsyncContentLoadedState: AsyncContentLoadedState,
    PercentComplete: f64,
};
// --------------------------------------------------------
// Type: UiaWindowClosedEventArgs
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const UiaWindowClosedEventArgs = extern struct {
    Type: EventArgsType,
    EventId: i32,
    pRuntimeId: ?*i32,
    cRuntimeIdLen: i32,
};
// --------------------------------------------------------
// Type: UiaEventCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UiaEventCallback = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CUIAutomation
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CUIAutomation = opaque {
};
// --------------------------------------------------------
// Type: CUIAutomation8
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CUIAutomation8 = opaque {
};
// --------------------------------------------------------
// Type: ExtendedProperty
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ExtendedProperty = extern struct {
    PropertyName: BSTR,
    PropertyValue: BSTR,
};
// --------------------------------------------------------
// Type: IUIAutomationElement
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationElement = *opaque{
    // TODO: Method 'SetFocus'
    // TODO: Method 'GetRuntimeId'
    // TODO: Method 'FindFirst'
    // TODO: Method 'FindAll'
    // TODO: Method 'FindFirstBuildCache'
    // TODO: Method 'FindAllBuildCache'
    // TODO: Method 'BuildUpdatedCache'
    // TODO: Method 'GetCurrentPropertyValue'
    // TODO: Method 'GetCurrentPropertyValueEx'
    // TODO: Method 'GetCachedPropertyValue'
    // TODO: Method 'GetCachedPropertyValueEx'
    // TODO: Method 'GetCurrentPatternAs'
    // TODO: Method 'GetCachedPatternAs'
    // TODO: Method 'GetCurrentPattern'
    // TODO: Method 'GetCachedPattern'
    // TODO: Method 'GetCachedParent'
    // TODO: Method 'GetCachedChildren'
    // TODO: Method 'get_CurrentProcessId'
    // TODO: Method 'get_CurrentControlType'
    // TODO: Method 'get_CurrentLocalizedControlType'
    // TODO: Method 'get_CurrentName'
    // TODO: Method 'get_CurrentAcceleratorKey'
    // TODO: Method 'get_CurrentAccessKey'
    // TODO: Method 'get_CurrentHasKeyboardFocus'
    // TODO: Method 'get_CurrentIsKeyboardFocusable'
    // TODO: Method 'get_CurrentIsEnabled'
    // TODO: Method 'get_CurrentAutomationId'
    // TODO: Method 'get_CurrentClassName'
    // TODO: Method 'get_CurrentHelpText'
    // TODO: Method 'get_CurrentCulture'
    // TODO: Method 'get_CurrentIsControlElement'
    // TODO: Method 'get_CurrentIsContentElement'
    // TODO: Method 'get_CurrentIsPassword'
    // TODO: Method 'get_CurrentNativeWindowHandle'
    // TODO: Method 'get_CurrentItemType'
    // TODO: Method 'get_CurrentIsOffscreen'
    // TODO: Method 'get_CurrentOrientation'
    // TODO: Method 'get_CurrentFrameworkId'
    // TODO: Method 'get_CurrentIsRequiredForForm'
    // TODO: Method 'get_CurrentItemStatus'
    // TODO: Method 'get_CurrentBoundingRectangle'
    // TODO: Method 'get_CurrentLabeledBy'
    // TODO: Method 'get_CurrentAriaRole'
    // TODO: Method 'get_CurrentAriaProperties'
    // TODO: Method 'get_CurrentIsDataValidForForm'
    // TODO: Method 'get_CurrentControllerFor'
    // TODO: Method 'get_CurrentDescribedBy'
    // TODO: Method 'get_CurrentFlowsTo'
    // TODO: Method 'get_CurrentProviderDescription'
    // TODO: Method 'get_CachedProcessId'
    // TODO: Method 'get_CachedControlType'
    // TODO: Method 'get_CachedLocalizedControlType'
    // TODO: Method 'get_CachedName'
    // TODO: Method 'get_CachedAcceleratorKey'
    // TODO: Method 'get_CachedAccessKey'
    // TODO: Method 'get_CachedHasKeyboardFocus'
    // TODO: Method 'get_CachedIsKeyboardFocusable'
    // TODO: Method 'get_CachedIsEnabled'
    // TODO: Method 'get_CachedAutomationId'
    // TODO: Method 'get_CachedClassName'
    // TODO: Method 'get_CachedHelpText'
    // TODO: Method 'get_CachedCulture'
    // TODO: Method 'get_CachedIsControlElement'
    // TODO: Method 'get_CachedIsContentElement'
    // TODO: Method 'get_CachedIsPassword'
    // TODO: Method 'get_CachedNativeWindowHandle'
    // TODO: Method 'get_CachedItemType'
    // TODO: Method 'get_CachedIsOffscreen'
    // TODO: Method 'get_CachedOrientation'
    // TODO: Method 'get_CachedFrameworkId'
    // TODO: Method 'get_CachedIsRequiredForForm'
    // TODO: Method 'get_CachedItemStatus'
    // TODO: Method 'get_CachedBoundingRectangle'
    // TODO: Method 'get_CachedLabeledBy'
    // TODO: Method 'get_CachedAriaRole'
    // TODO: Method 'get_CachedAriaProperties'
    // TODO: Method 'get_CachedIsDataValidForForm'
    // TODO: Method 'get_CachedControllerFor'
    // TODO: Method 'get_CachedDescribedBy'
    // TODO: Method 'get_CachedFlowsTo'
    // TODO: Method 'get_CachedProviderDescription'
    // TODO: Method 'GetClickablePoint'
};
// --------------------------------------------------------
// Type: IUIAutomationElementArray
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationElementArray = *opaque{
    // TODO: Method 'get_Length'
    // TODO: Method 'GetElement'
};
// --------------------------------------------------------
// Type: IUIAutomationCondition
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationCondition = *opaque{
};
// --------------------------------------------------------
// Type: IUIAutomationBoolCondition
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationBoolCondition = *opaque{
    // TODO: Method 'get_BooleanValue'
};
// --------------------------------------------------------
// Type: IUIAutomationPropertyCondition
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationPropertyCondition = *opaque{
    // TODO: Method 'get_PropertyId'
    // TODO: Method 'get_PropertyValue'
    // TODO: Method 'get_PropertyConditionFlags'
};
// --------------------------------------------------------
// Type: IUIAutomationAndCondition
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationAndCondition = *opaque{
    // TODO: Method 'get_ChildCount'
    // TODO: Method 'GetChildrenAsNativeArray'
    // TODO: Method 'GetChildren'
};
// --------------------------------------------------------
// Type: IUIAutomationOrCondition
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationOrCondition = *opaque{
    // TODO: Method 'get_ChildCount'
    // TODO: Method 'GetChildrenAsNativeArray'
    // TODO: Method 'GetChildren'
};
// --------------------------------------------------------
// Type: IUIAutomationNotCondition
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationNotCondition = *opaque{
    // TODO: Method 'GetChild'
};
// --------------------------------------------------------
// Type: IUIAutomationCacheRequest
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationCacheRequest = *opaque{
    // TODO: Method 'AddProperty'
    // TODO: Method 'AddPattern'
    // TODO: Method 'Clone'
    // TODO: Method 'get_TreeScope'
    // TODO: Method 'put_TreeScope'
    // TODO: Method 'get_TreeFilter'
    // TODO: Method 'put_TreeFilter'
    // TODO: Method 'get_AutomationElementMode'
    // TODO: Method 'put_AutomationElementMode'
};
// --------------------------------------------------------
// Type: IUIAutomationTreeWalker
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationTreeWalker = *opaque{
    // TODO: Method 'GetParentElement'
    // TODO: Method 'GetFirstChildElement'
    // TODO: Method 'GetLastChildElement'
    // TODO: Method 'GetNextSiblingElement'
    // TODO: Method 'GetPreviousSiblingElement'
    // TODO: Method 'NormalizeElement'
    // TODO: Method 'GetParentElementBuildCache'
    // TODO: Method 'GetFirstChildElementBuildCache'
    // TODO: Method 'GetLastChildElementBuildCache'
    // TODO: Method 'GetNextSiblingElementBuildCache'
    // TODO: Method 'GetPreviousSiblingElementBuildCache'
    // TODO: Method 'NormalizeElementBuildCache'
    // TODO: Method 'get_Condition'
};
// --------------------------------------------------------
// Type: IUIAutomationEventHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationEventHandler = *opaque{
    // TODO: Method 'HandleAutomationEvent'
};
// --------------------------------------------------------
// Type: IUIAutomationPropertyChangedEventHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationPropertyChangedEventHandler = *opaque{
    // TODO: Method 'HandlePropertyChangedEvent'
};
// --------------------------------------------------------
// Type: IUIAutomationStructureChangedEventHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationStructureChangedEventHandler = *opaque{
    // TODO: Method 'HandleStructureChangedEvent'
};
// --------------------------------------------------------
// Type: IUIAutomationFocusChangedEventHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationFocusChangedEventHandler = *opaque{
    // TODO: Method 'HandleFocusChangedEvent'
};
// --------------------------------------------------------
// Type: IUIAutomationTextEditTextChangedEventHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationTextEditTextChangedEventHandler = *opaque{
    // TODO: Method 'HandleTextEditTextChangedEvent'
};
// --------------------------------------------------------
// Type: IUIAutomationChangesEventHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationChangesEventHandler = *opaque{
    // TODO: Method 'HandleChangesEvent'
};
// --------------------------------------------------------
// Type: IUIAutomationNotificationEventHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationNotificationEventHandler = *opaque{
    // TODO: Method 'HandleNotificationEvent'
};
// --------------------------------------------------------
// Type: IUIAutomationInvokePattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationInvokePattern = *opaque{
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: IUIAutomationDockPattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationDockPattern = *opaque{
    // TODO: Method 'SetDockPosition'
    // TODO: Method 'get_CurrentDockPosition'
    // TODO: Method 'get_CachedDockPosition'
};
// --------------------------------------------------------
// Type: IUIAutomationExpandCollapsePattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationExpandCollapsePattern = *opaque{
    // TODO: Method 'Expand'
    // TODO: Method 'Collapse'
    // TODO: Method 'get_CurrentExpandCollapseState'
    // TODO: Method 'get_CachedExpandCollapseState'
};
// --------------------------------------------------------
// Type: IUIAutomationGridPattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationGridPattern = *opaque{
    // TODO: Method 'GetItem'
    // TODO: Method 'get_CurrentRowCount'
    // TODO: Method 'get_CurrentColumnCount'
    // TODO: Method 'get_CachedRowCount'
    // TODO: Method 'get_CachedColumnCount'
};
// --------------------------------------------------------
// Type: IUIAutomationGridItemPattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationGridItemPattern = *opaque{
    // TODO: Method 'get_CurrentContainingGrid'
    // TODO: Method 'get_CurrentRow'
    // TODO: Method 'get_CurrentColumn'
    // TODO: Method 'get_CurrentRowSpan'
    // TODO: Method 'get_CurrentColumnSpan'
    // TODO: Method 'get_CachedContainingGrid'
    // TODO: Method 'get_CachedRow'
    // TODO: Method 'get_CachedColumn'
    // TODO: Method 'get_CachedRowSpan'
    // TODO: Method 'get_CachedColumnSpan'
};
// --------------------------------------------------------
// Type: IUIAutomationMultipleViewPattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationMultipleViewPattern = *opaque{
    // TODO: Method 'GetViewName'
    // TODO: Method 'SetCurrentView'
    // TODO: Method 'get_CurrentCurrentView'
    // TODO: Method 'GetCurrentSupportedViews'
    // TODO: Method 'get_CachedCurrentView'
    // TODO: Method 'GetCachedSupportedViews'
};
// --------------------------------------------------------
// Type: IUIAutomationObjectModelPattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationObjectModelPattern = *opaque{
    // TODO: Method 'GetUnderlyingObjectModel'
};
// --------------------------------------------------------
// Type: IUIAutomationRangeValuePattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationRangeValuePattern = *opaque{
    // TODO: Method 'SetValue'
    // TODO: Method 'get_CurrentValue'
    // TODO: Method 'get_CurrentIsReadOnly'
    // TODO: Method 'get_CurrentMaximum'
    // TODO: Method 'get_CurrentMinimum'
    // TODO: Method 'get_CurrentLargeChange'
    // TODO: Method 'get_CurrentSmallChange'
    // TODO: Method 'get_CachedValue'
    // TODO: Method 'get_CachedIsReadOnly'
    // TODO: Method 'get_CachedMaximum'
    // TODO: Method 'get_CachedMinimum'
    // TODO: Method 'get_CachedLargeChange'
    // TODO: Method 'get_CachedSmallChange'
};
// --------------------------------------------------------
// Type: IUIAutomationScrollPattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationScrollPattern = *opaque{
    // TODO: Method 'Scroll'
    // TODO: Method 'SetScrollPercent'
    // TODO: Method 'get_CurrentHorizontalScrollPercent'
    // TODO: Method 'get_CurrentVerticalScrollPercent'
    // TODO: Method 'get_CurrentHorizontalViewSize'
    // TODO: Method 'get_CurrentVerticalViewSize'
    // TODO: Method 'get_CurrentHorizontallyScrollable'
    // TODO: Method 'get_CurrentVerticallyScrollable'
    // TODO: Method 'get_CachedHorizontalScrollPercent'
    // TODO: Method 'get_CachedVerticalScrollPercent'
    // TODO: Method 'get_CachedHorizontalViewSize'
    // TODO: Method 'get_CachedVerticalViewSize'
    // TODO: Method 'get_CachedHorizontallyScrollable'
    // TODO: Method 'get_CachedVerticallyScrollable'
};
// --------------------------------------------------------
// Type: IUIAutomationScrollItemPattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationScrollItemPattern = *opaque{
    // TODO: Method 'ScrollIntoView'
};
// --------------------------------------------------------
// Type: IUIAutomationSelectionPattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationSelectionPattern = *opaque{
    // TODO: Method 'GetCurrentSelection'
    // TODO: Method 'get_CurrentCanSelectMultiple'
    // TODO: Method 'get_CurrentIsSelectionRequired'
    // TODO: Method 'GetCachedSelection'
    // TODO: Method 'get_CachedCanSelectMultiple'
    // TODO: Method 'get_CachedIsSelectionRequired'
};
// --------------------------------------------------------
// Type: IUIAutomationSelectionPattern2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationSelectionPattern2 = *opaque{
    // TODO: Method 'get_CurrentFirstSelectedItem'
    // TODO: Method 'get_CurrentLastSelectedItem'
    // TODO: Method 'get_CurrentCurrentSelectedItem'
    // TODO: Method 'get_CurrentItemCount'
    // TODO: Method 'get_CachedFirstSelectedItem'
    // TODO: Method 'get_CachedLastSelectedItem'
    // TODO: Method 'get_CachedCurrentSelectedItem'
    // TODO: Method 'get_CachedItemCount'
};
// --------------------------------------------------------
// Type: IUIAutomationSelectionItemPattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationSelectionItemPattern = *opaque{
    // TODO: Method 'Select'
    // TODO: Method 'AddToSelection'
    // TODO: Method 'RemoveFromSelection'
    // TODO: Method 'get_CurrentIsSelected'
    // TODO: Method 'get_CurrentSelectionContainer'
    // TODO: Method 'get_CachedIsSelected'
    // TODO: Method 'get_CachedSelectionContainer'
};
// --------------------------------------------------------
// Type: IUIAutomationSynchronizedInputPattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationSynchronizedInputPattern = *opaque{
    // TODO: Method 'StartListening'
    // TODO: Method 'Cancel'
};
// --------------------------------------------------------
// Type: IUIAutomationTablePattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationTablePattern = *opaque{
    // TODO: Method 'GetCurrentRowHeaders'
    // TODO: Method 'GetCurrentColumnHeaders'
    // TODO: Method 'get_CurrentRowOrColumnMajor'
    // TODO: Method 'GetCachedRowHeaders'
    // TODO: Method 'GetCachedColumnHeaders'
    // TODO: Method 'get_CachedRowOrColumnMajor'
};
// --------------------------------------------------------
// Type: IUIAutomationTableItemPattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationTableItemPattern = *opaque{
    // TODO: Method 'GetCurrentRowHeaderItems'
    // TODO: Method 'GetCurrentColumnHeaderItems'
    // TODO: Method 'GetCachedRowHeaderItems'
    // TODO: Method 'GetCachedColumnHeaderItems'
};
// --------------------------------------------------------
// Type: IUIAutomationTogglePattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationTogglePattern = *opaque{
    // TODO: Method 'Toggle'
    // TODO: Method 'get_CurrentToggleState'
    // TODO: Method 'get_CachedToggleState'
};
// --------------------------------------------------------
// Type: IUIAutomationTransformPattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationTransformPattern = *opaque{
    // TODO: Method 'Move'
    // TODO: Method 'Resize'
    // TODO: Method 'Rotate'
    // TODO: Method 'get_CurrentCanMove'
    // TODO: Method 'get_CurrentCanResize'
    // TODO: Method 'get_CurrentCanRotate'
    // TODO: Method 'get_CachedCanMove'
    // TODO: Method 'get_CachedCanResize'
    // TODO: Method 'get_CachedCanRotate'
};
// --------------------------------------------------------
// Type: IUIAutomationValuePattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationValuePattern = *opaque{
    // TODO: Method 'SetValue'
    // TODO: Method 'get_CurrentValue'
    // TODO: Method 'get_CurrentIsReadOnly'
    // TODO: Method 'get_CachedValue'
    // TODO: Method 'get_CachedIsReadOnly'
};
// --------------------------------------------------------
// Type: IUIAutomationWindowPattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationWindowPattern = *opaque{
    // TODO: Method 'Close'
    // TODO: Method 'WaitForInputIdle'
    // TODO: Method 'SetWindowVisualState'
    // TODO: Method 'get_CurrentCanMaximize'
    // TODO: Method 'get_CurrentCanMinimize'
    // TODO: Method 'get_CurrentIsModal'
    // TODO: Method 'get_CurrentIsTopmost'
    // TODO: Method 'get_CurrentWindowVisualState'
    // TODO: Method 'get_CurrentWindowInteractionState'
    // TODO: Method 'get_CachedCanMaximize'
    // TODO: Method 'get_CachedCanMinimize'
    // TODO: Method 'get_CachedIsModal'
    // TODO: Method 'get_CachedIsTopmost'
    // TODO: Method 'get_CachedWindowVisualState'
    // TODO: Method 'get_CachedWindowInteractionState'
};
// --------------------------------------------------------
// Type: IUIAutomationTextRange
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationTextRange = *opaque{
    // TODO: Method 'Clone'
    // TODO: Method 'Compare'
    // TODO: Method 'CompareEndpoints'
    // TODO: Method 'ExpandToEnclosingUnit'
    // TODO: Method 'FindAttribute'
    // TODO: Method 'FindTextA'
    // TODO: Method 'GetAttributeValue'
    // TODO: Method 'GetBoundingRectangles'
    // TODO: Method 'GetEnclosingElement'
    // TODO: Method 'GetText'
    // TODO: Method 'Move'
    // TODO: Method 'MoveEndpointByUnit'
    // TODO: Method 'MoveEndpointByRange'
    // TODO: Method 'Select'
    // TODO: Method 'AddToSelection'
    // TODO: Method 'RemoveFromSelection'
    // TODO: Method 'ScrollIntoView'
    // TODO: Method 'GetChildren'
};
// --------------------------------------------------------
// Type: IUIAutomationTextRange2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationTextRange2 = *opaque{
    // TODO: Method 'ShowContextMenu'
};
// --------------------------------------------------------
// Type: IUIAutomationTextRange3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationTextRange3 = *opaque{
    // TODO: Method 'GetEnclosingElementBuildCache'
    // TODO: Method 'GetChildrenBuildCache'
    // TODO: Method 'GetAttributeValues'
};
// --------------------------------------------------------
// Type: IUIAutomationTextRangeArray
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationTextRangeArray = *opaque{
    // TODO: Method 'get_Length'
    // TODO: Method 'GetElement'
};
// --------------------------------------------------------
// Type: IUIAutomationTextPattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationTextPattern = *opaque{
    // TODO: Method 'RangeFromPoint'
    // TODO: Method 'RangeFromChild'
    // TODO: Method 'GetSelection'
    // TODO: Method 'GetVisibleRanges'
    // TODO: Method 'get_DocumentRange'
    // TODO: Method 'get_SupportedTextSelection'
};
// --------------------------------------------------------
// Type: IUIAutomationTextPattern2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationTextPattern2 = *opaque{
    // TODO: Method 'RangeFromAnnotation'
    // TODO: Method 'GetCaretRange'
};
// --------------------------------------------------------
// Type: IUIAutomationTextEditPattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationTextEditPattern = *opaque{
    // TODO: Method 'GetActiveComposition'
    // TODO: Method 'GetConversionTarget'
};
// --------------------------------------------------------
// Type: IUIAutomationCustomNavigationPattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationCustomNavigationPattern = *opaque{
    // TODO: Method 'Navigate'
};
// --------------------------------------------------------
// Type: IUIAutomationActiveTextPositionChangedEventHandler
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationActiveTextPositionChangedEventHandler = *opaque{
    // TODO: Method 'HandleActiveTextPositionChangedEvent'
};
// --------------------------------------------------------
// Type: IUIAutomationLegacyIAccessiblePattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationLegacyIAccessiblePattern = *opaque{
    // TODO: Method 'Select'
    // TODO: Method 'DoDefaultAction'
    // TODO: Method 'SetValue'
    // TODO: Method 'get_CurrentChildId'
    // TODO: Method 'get_CurrentName'
    // TODO: Method 'get_CurrentValue'
    // TODO: Method 'get_CurrentDescription'
    // TODO: Method 'get_CurrentRole'
    // TODO: Method 'get_CurrentState'
    // TODO: Method 'get_CurrentHelp'
    // TODO: Method 'get_CurrentKeyboardShortcut'
    // TODO: Method 'GetCurrentSelection'
    // TODO: Method 'get_CurrentDefaultAction'
    // TODO: Method 'get_CachedChildId'
    // TODO: Method 'get_CachedName'
    // TODO: Method 'get_CachedValue'
    // TODO: Method 'get_CachedDescription'
    // TODO: Method 'get_CachedRole'
    // TODO: Method 'get_CachedState'
    // TODO: Method 'get_CachedHelp'
    // TODO: Method 'get_CachedKeyboardShortcut'
    // TODO: Method 'GetCachedSelection'
    // TODO: Method 'get_CachedDefaultAction'
    // TODO: Method 'GetIAccessible'
};
// --------------------------------------------------------
// Type: IUIAutomationItemContainerPattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationItemContainerPattern = *opaque{
    // TODO: Method 'FindItemByProperty'
};
// --------------------------------------------------------
// Type: IUIAutomationVirtualizedItemPattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationVirtualizedItemPattern = *opaque{
    // TODO: Method 'Realize'
};
// --------------------------------------------------------
// Type: IUIAutomationAnnotationPattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationAnnotationPattern = *opaque{
    // TODO: Method 'get_CurrentAnnotationTypeId'
    // TODO: Method 'get_CurrentAnnotationTypeName'
    // TODO: Method 'get_CurrentAuthor'
    // TODO: Method 'get_CurrentDateTime'
    // TODO: Method 'get_CurrentTarget'
    // TODO: Method 'get_CachedAnnotationTypeId'
    // TODO: Method 'get_CachedAnnotationTypeName'
    // TODO: Method 'get_CachedAuthor'
    // TODO: Method 'get_CachedDateTime'
    // TODO: Method 'get_CachedTarget'
};
// --------------------------------------------------------
// Type: IUIAutomationStylesPattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationStylesPattern = *opaque{
    // TODO: Method 'get_CurrentStyleId'
    // TODO: Method 'get_CurrentStyleName'
    // TODO: Method 'get_CurrentFillColor'
    // TODO: Method 'get_CurrentFillPatternStyle'
    // TODO: Method 'get_CurrentShape'
    // TODO: Method 'get_CurrentFillPatternColor'
    // TODO: Method 'get_CurrentExtendedProperties'
    // TODO: Method 'GetCurrentExtendedPropertiesAsArray'
    // TODO: Method 'get_CachedStyleId'
    // TODO: Method 'get_CachedStyleName'
    // TODO: Method 'get_CachedFillColor'
    // TODO: Method 'get_CachedFillPatternStyle'
    // TODO: Method 'get_CachedShape'
    // TODO: Method 'get_CachedFillPatternColor'
    // TODO: Method 'get_CachedExtendedProperties'
    // TODO: Method 'GetCachedExtendedPropertiesAsArray'
};
// --------------------------------------------------------
// Type: IUIAutomationSpreadsheetPattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationSpreadsheetPattern = *opaque{
    // TODO: Method 'GetItemByName'
};
// --------------------------------------------------------
// Type: IUIAutomationSpreadsheetItemPattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationSpreadsheetItemPattern = *opaque{
    // TODO: Method 'get_CurrentFormula'
    // TODO: Method 'GetCurrentAnnotationObjects'
    // TODO: Method 'GetCurrentAnnotationTypes'
    // TODO: Method 'get_CachedFormula'
    // TODO: Method 'GetCachedAnnotationObjects'
    // TODO: Method 'GetCachedAnnotationTypes'
};
// --------------------------------------------------------
// Type: IUIAutomationTransformPattern2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationTransformPattern2 = *opaque{
    // TODO: Method 'Zoom'
    // TODO: Method 'ZoomByUnit'
    // TODO: Method 'get_CurrentCanZoom'
    // TODO: Method 'get_CachedCanZoom'
    // TODO: Method 'get_CurrentZoomLevel'
    // TODO: Method 'get_CachedZoomLevel'
    // TODO: Method 'get_CurrentZoomMinimum'
    // TODO: Method 'get_CachedZoomMinimum'
    // TODO: Method 'get_CurrentZoomMaximum'
    // TODO: Method 'get_CachedZoomMaximum'
};
// --------------------------------------------------------
// Type: IUIAutomationTextChildPattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationTextChildPattern = *opaque{
    // TODO: Method 'get_TextContainer'
    // TODO: Method 'get_TextRange'
};
// --------------------------------------------------------
// Type: IUIAutomationDragPattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationDragPattern = *opaque{
    // TODO: Method 'get_CurrentIsGrabbed'
    // TODO: Method 'get_CachedIsGrabbed'
    // TODO: Method 'get_CurrentDropEffect'
    // TODO: Method 'get_CachedDropEffect'
    // TODO: Method 'get_CurrentDropEffects'
    // TODO: Method 'get_CachedDropEffects'
    // TODO: Method 'GetCurrentGrabbedItems'
    // TODO: Method 'GetCachedGrabbedItems'
};
// --------------------------------------------------------
// Type: IUIAutomationDropTargetPattern
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationDropTargetPattern = *opaque{
    // TODO: Method 'get_CurrentDropTargetEffect'
    // TODO: Method 'get_CachedDropTargetEffect'
    // TODO: Method 'get_CurrentDropTargetEffects'
    // TODO: Method 'get_CachedDropTargetEffects'
};
// --------------------------------------------------------
// Type: IUIAutomationElement2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationElement2 = *opaque{
    // TODO: Method 'get_CurrentOptimizeForVisualContent'
    // TODO: Method 'get_CachedOptimizeForVisualContent'
    // TODO: Method 'get_CurrentLiveSetting'
    // TODO: Method 'get_CachedLiveSetting'
    // TODO: Method 'get_CurrentFlowsFrom'
    // TODO: Method 'get_CachedFlowsFrom'
};
// --------------------------------------------------------
// Type: IUIAutomationElement3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationElement3 = *opaque{
    // TODO: Method 'ShowContextMenu'
    // TODO: Method 'get_CurrentIsPeripheral'
    // TODO: Method 'get_CachedIsPeripheral'
};
// --------------------------------------------------------
// Type: IUIAutomationElement4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationElement4 = *opaque{
    // TODO: Method 'get_CurrentPositionInSet'
    // TODO: Method 'get_CurrentSizeOfSet'
    // TODO: Method 'get_CurrentLevel'
    // TODO: Method 'get_CurrentAnnotationTypes'
    // TODO: Method 'get_CurrentAnnotationObjects'
    // TODO: Method 'get_CachedPositionInSet'
    // TODO: Method 'get_CachedSizeOfSet'
    // TODO: Method 'get_CachedLevel'
    // TODO: Method 'get_CachedAnnotationTypes'
    // TODO: Method 'get_CachedAnnotationObjects'
};
// --------------------------------------------------------
// Type: IUIAutomationElement5
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationElement5 = *opaque{
    // TODO: Method 'get_CurrentLandmarkType'
    // TODO: Method 'get_CurrentLocalizedLandmarkType'
    // TODO: Method 'get_CachedLandmarkType'
    // TODO: Method 'get_CachedLocalizedLandmarkType'
};
// --------------------------------------------------------
// Type: IUIAutomationElement6
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationElement6 = *opaque{
    // TODO: Method 'get_CurrentFullDescription'
    // TODO: Method 'get_CachedFullDescription'
};
// --------------------------------------------------------
// Type: IUIAutomationElement7
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationElement7 = *opaque{
    // TODO: Method 'FindFirstWithOptions'
    // TODO: Method 'FindAllWithOptions'
    // TODO: Method 'FindFirstWithOptionsBuildCache'
    // TODO: Method 'FindAllWithOptionsBuildCache'
    // TODO: Method 'GetCurrentMetadataValue'
};
// --------------------------------------------------------
// Type: IUIAutomationElement8
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationElement8 = *opaque{
    // TODO: Method 'get_CurrentHeadingLevel'
    // TODO: Method 'get_CachedHeadingLevel'
};
// --------------------------------------------------------
// Type: IUIAutomationElement9
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationElement9 = *opaque{
    // TODO: Method 'get_CurrentIsDialog'
    // TODO: Method 'get_CachedIsDialog'
};
// --------------------------------------------------------
// Type: IUIAutomationProxyFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationProxyFactory = *opaque{
    // TODO: Method 'CreateProvider'
    // TODO: Method 'get_ProxyFactoryId'
};
// --------------------------------------------------------
// Type: IUIAutomationProxyFactoryEntry
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationProxyFactoryEntry = *opaque{
    // TODO: Method 'get_ProxyFactory'
    // TODO: Method 'get_ClassName'
    // TODO: Method 'get_ImageName'
    // TODO: Method 'get_AllowSubstringMatch'
    // TODO: Method 'get_CanCheckBaseClass'
    // TODO: Method 'get_NeedsAdviseEvents'
    // TODO: Method 'put_ClassName'
    // TODO: Method 'put_ImageName'
    // TODO: Method 'put_AllowSubstringMatch'
    // TODO: Method 'put_CanCheckBaseClass'
    // TODO: Method 'put_NeedsAdviseEvents'
    // TODO: Method 'SetWinEventsForAutomationEvent'
    // TODO: Method 'GetWinEventsForAutomationEvent'
};
// --------------------------------------------------------
// Type: IUIAutomationProxyFactoryMapping
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationProxyFactoryMapping = *opaque{
    // TODO: Method 'get_Count'
    // TODO: Method 'GetTable'
    // TODO: Method 'GetEntry'
    // TODO: Method 'SetTable'
    // TODO: Method 'InsertEntries'
    // TODO: Method 'InsertEntry'
    // TODO: Method 'RemoveEntry'
    // TODO: Method 'ClearTable'
    // TODO: Method 'RestoreDefaultTable'
};
// --------------------------------------------------------
// Type: IUIAutomationEventHandlerGroup
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomationEventHandlerGroup = *opaque{
    // TODO: Method 'AddActiveTextPositionChangedEventHandler'
    // TODO: Method 'AddAutomationEventHandler'
    // TODO: Method 'AddChangesEventHandler'
    // TODO: Method 'AddNotificationEventHandler'
    // TODO: Method 'AddPropertyChangedEventHandler'
    // TODO: Method 'AddStructureChangedEventHandler'
    // TODO: Method 'AddTextEditTextChangedEventHandler'
};
// --------------------------------------------------------
// Type: IUIAutomation
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomation = *opaque{
    // TODO: Method 'CompareElements'
    // TODO: Method 'CompareRuntimeIds'
    // TODO: Method 'GetRootElement'
    // TODO: Method 'ElementFromHandle'
    // TODO: Method 'ElementFromPoint'
    // TODO: Method 'GetFocusedElement'
    // TODO: Method 'GetRootElementBuildCache'
    // TODO: Method 'ElementFromHandleBuildCache'
    // TODO: Method 'ElementFromPointBuildCache'
    // TODO: Method 'GetFocusedElementBuildCache'
    // TODO: Method 'CreateTreeWalker'
    // TODO: Method 'get_ControlViewWalker'
    // TODO: Method 'get_ContentViewWalker'
    // TODO: Method 'get_RawViewWalker'
    // TODO: Method 'get_RawViewCondition'
    // TODO: Method 'get_ControlViewCondition'
    // TODO: Method 'get_ContentViewCondition'
    // TODO: Method 'CreateCacheRequest'
    // TODO: Method 'CreateTrueCondition'
    // TODO: Method 'CreateFalseCondition'
    // TODO: Method 'CreatePropertyCondition'
    // TODO: Method 'CreatePropertyConditionEx'
    // TODO: Method 'CreateAndCondition'
    // TODO: Method 'CreateAndConditionFromArray'
    // TODO: Method 'CreateAndConditionFromNativeArray'
    // TODO: Method 'CreateOrCondition'
    // TODO: Method 'CreateOrConditionFromArray'
    // TODO: Method 'CreateOrConditionFromNativeArray'
    // TODO: Method 'CreateNotCondition'
    // TODO: Method 'AddAutomationEventHandler'
    // TODO: Method 'RemoveAutomationEventHandler'
    // TODO: Method 'AddPropertyChangedEventHandlerNativeArray'
    // TODO: Method 'AddPropertyChangedEventHandler'
    // TODO: Method 'RemovePropertyChangedEventHandler'
    // TODO: Method 'AddStructureChangedEventHandler'
    // TODO: Method 'RemoveStructureChangedEventHandler'
    // TODO: Method 'AddFocusChangedEventHandler'
    // TODO: Method 'RemoveFocusChangedEventHandler'
    // TODO: Method 'RemoveAllEventHandlers'
    // TODO: Method 'IntNativeArrayToSafeArray'
    // TODO: Method 'IntSafeArrayToNativeArray'
    // TODO: Method 'RectToVariant'
    // TODO: Method 'VariantToRect'
    // TODO: Method 'SafeArrayToRectNativeArray'
    // TODO: Method 'CreateProxyFactoryEntry'
    // TODO: Method 'get_ProxyFactoryMapping'
    // TODO: Method 'GetPropertyProgrammaticName'
    // TODO: Method 'GetPatternProgrammaticName'
    // TODO: Method 'PollForPotentialSupportedPatterns'
    // TODO: Method 'PollForPotentialSupportedProperties'
    // TODO: Method 'CheckNotSupported'
    // TODO: Method 'get_ReservedNotSupportedValue'
    // TODO: Method 'get_ReservedMixedAttributeValue'
    // TODO: Method 'ElementFromIAccessible'
    // TODO: Method 'ElementFromIAccessibleBuildCache'
};
// --------------------------------------------------------
// Type: IUIAutomation2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomation2 = *opaque{
    // TODO: Method 'get_AutoSetFocus'
    // TODO: Method 'put_AutoSetFocus'
    // TODO: Method 'get_ConnectionTimeout'
    // TODO: Method 'put_ConnectionTimeout'
    // TODO: Method 'get_TransactionTimeout'
    // TODO: Method 'put_TransactionTimeout'
};
// --------------------------------------------------------
// Type: IUIAutomation3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomation3 = *opaque{
    // TODO: Method 'AddTextEditTextChangedEventHandler'
    // TODO: Method 'RemoveTextEditTextChangedEventHandler'
};
// --------------------------------------------------------
// Type: IUIAutomation4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomation4 = *opaque{
    // TODO: Method 'AddChangesEventHandler'
    // TODO: Method 'RemoveChangesEventHandler'
};
// --------------------------------------------------------
// Type: IUIAutomation5
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomation5 = *opaque{
    // TODO: Method 'AddNotificationEventHandler'
    // TODO: Method 'RemoveNotificationEventHandler'
};
// --------------------------------------------------------
// Type: IUIAutomation6
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IUIAutomation6 = *opaque{
    // TODO: Method 'CreateEventHandlerGroup'
    // TODO: Method 'AddEventHandlerGroup'
    // TODO: Method 'RemoveEventHandlerGroup'
    // TODO: Method 'get_ConnectionRecoveryBehavior'
    // TODO: Method 'put_ConnectionRecoveryBehavior'
    // TODO: Method 'get_CoalesceEvents'
    // TODO: Method 'put_CoalesceEvents'
    // TODO: Method 'AddActiveTextPositionChangedEventHandler'
    // TODO: Method 'RemoveActiveTextPositionChangedEventHandler'
};

//
// functions
//

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn RegisterPointerInputTarget(
    hwnd: HWND,
    pointerType: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "USER32" fn UnregisterPointerInputTarget(
    hwnd: HWND,
    pointerType: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn RegisterPointerInputTargetEx(
    hwnd: HWND,
    pointerType: u32,
    fObserve: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn UnregisterPointerInputTargetEx(
    hwnd: HWND,
    pointerType: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn NotifyWinEvent(
    event: u32,
    hwnd: HWND,
    idObject: i32,
    idChild: i32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn SetWinEventHook(
    eventMin: u32,
    eventMax: u32,
    hmodWinEventProc: ?*opaque{},
    pfnWinEventProc: WINEVENTPROC,
    idProcess: u32,
    idThread: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn IsWinEventHookInstalled(
    event: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn UnhookWinEvent(
    hWinEventHook: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "OLEACC" fn LresultFromObject(
    riid: ?*Guid,
    wParam: WPARAM,
    punk: IUnknown,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "OLEACC" fn ObjectFromLresult(
    lResult: LRESULT,
    riid: ?*Guid,
    wParam: WPARAM,
    ppvObject: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "OLEACC" fn WindowFromAccessibleObject(
    param0: IAccessible,
    phwnd: ?*HWND,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "OLEACC" fn AccessibleObjectFromWindow(
    hwnd: HWND,
    dwId: u32,
    riid: ?*Guid,
    ppvObject: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "OLEACC" fn AccessibleObjectFromEvent(
    hwnd: HWND,
    dwId: u32,
    dwChildId: u32,
    ppacc: ?*IAccessible,
    pvarChild: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "OLEACC" fn AccessibleObjectFromPoint(
    ptScreen: POINT,
    ppacc: ?*IAccessible,
    pvarChild: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "OLEACC" fn AccessibleChildren(
    paccContainer: IAccessible,
    iChildStart: i32,
    cChildren: i32,
    rgvarChildren: ?*VARIANT,
    pcObtained: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=True (can and should we use this?)
pub extern "OLEACC" fn GetRoleTextA(
    lRole: u32,
    lpszRole: ?*i8,
    cchRoleMax: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "OLEACC" fn GetRoleTextW(
    lRole: u32,
    lpszRole: ?*u16,
    cchRoleMax: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "OLEACC" fn GetStateTextA(
    lStateBit: u32,
    lpszState: ?*i8,
    cchState: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "OLEACC" fn GetStateTextW(
    lStateBit: u32,
    lpszState: ?*u16,
    cchState: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "OLEACC" fn GetOleaccVersionInfo(
    pVer: ?*u32,
    pBuild: ?*u32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "OLEACC" fn CreateStdAccessibleObject(
    hwnd: HWND,
    idObject: i32,
    riid: ?*Guid,
    ppvObject: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "OLEACC" fn CreateStdAccessibleProxyA(
    hwnd: HWND,
    pClassName: ?*i8,
    idObject: i32,
    riid: ?*Guid,
    ppvObject: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "OLEACC" fn CreateStdAccessibleProxyW(
    hwnd: HWND,
    pClassName: ?*u16,
    idObject: i32,
    riid: ?*Guid,
    ppvObject: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "OLEACC" fn AccSetRunningUtilityState(
    hwndApp: HWND,
    dwUtilityStateMask: u32,
    dwUtilityState: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "OLEACC" fn AccNotifyTouchInteraction(
    hwndApp: HWND,
    hwndTarget: HWND,
    ptTarget: POINT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaGetErrorDescription(
    pDescription: ?*BSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaHUiaNodeFromVariant(
    pvar: ?*VARIANT,
    phnode: ?*?*HUIANODE__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaHPatternObjectFromVariant(
    pvar: ?*VARIANT,
    phobj: ?*?*HUIAPATTERNOBJECT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaHTextRangeFromVariant(
    pvar: ?*VARIANT,
    phtextrange: ?*?*HUIATEXTRANGE__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaNodeRelease(
    hnode: ?*HUIANODE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaGetPropertyValue(
    hnode: ?*HUIANODE__,
    propertyId: i32,
    pValue: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaGetPatternProvider(
    hnode: ?*HUIANODE__,
    patternId: i32,
    phobj: ?*?*HUIAPATTERNOBJECT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaGetRuntimeId(
    hnode: ?*HUIANODE__,
    pruntimeId: ?*?*SAFEARRAY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaSetFocus(
    hnode: ?*HUIANODE__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaNavigate(
    hnode: ?*HUIANODE__,
    direction: NavigateDirection,
    pCondition: ?*UiaCondition,
    pRequest: ?*UiaCacheRequest,
    ppRequestedData: ?*?*SAFEARRAY,
    ppTreeStructure: ?*BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaGetUpdatedCache(
    hnode: ?*HUIANODE__,
    pRequest: ?*UiaCacheRequest,
    normalizeState: NormalizeState,
    pNormalizeCondition: ?*UiaCondition,
    ppRequestedData: ?*?*SAFEARRAY,
    ppTreeStructure: ?*BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaFind(
    hnode: ?*HUIANODE__,
    pParams: ?*UiaFindParams,
    pRequest: ?*UiaCacheRequest,
    ppRequestedData: ?*?*SAFEARRAY,
    ppOffsets: ?*?*SAFEARRAY,
    ppTreeStructures: ?*?*SAFEARRAY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaNodeFromPoint(
    x: f64,
    y: f64,
    pRequest: ?*UiaCacheRequest,
    ppRequestedData: ?*?*SAFEARRAY,
    ppTreeStructure: ?*BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaNodeFromFocus(
    pRequest: ?*UiaCacheRequest,
    ppRequestedData: ?*?*SAFEARRAY,
    ppTreeStructure: ?*BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaNodeFromHandle(
    hwnd: HWND,
    phnode: ?*?*HUIANODE__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaNodeFromProvider(
    pProvider: IRawElementProviderSimple,
    phnode: ?*?*HUIANODE__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaGetRootNode(
    phnode: ?*?*HUIANODE__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaRegisterProviderCallback(
    pCallback: ?*UiaProviderCallback,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaLookupId(
    type: AutomationIdentifierType,
    pGuid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaGetReservedNotSupportedValue(
    punkNotSupportedValue: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaGetReservedMixedAttributeValue(
    punkMixedAttributeValue: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaClientsAreListening(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaRaiseAutomationPropertyChangedEvent(
    pProvider: IRawElementProviderSimple,
    id: i32,
    oldValue: VARIANT,
    newValue: VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaRaiseAutomationEvent(
    pProvider: IRawElementProviderSimple,
    id: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaRaiseStructureChangedEvent(
    pProvider: IRawElementProviderSimple,
    structureChangeType: StructureChangeType,
    pRuntimeId: ?*i32,
    cRuntimeIdLen: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaRaiseAsyncContentLoadedEvent(
    pProvider: IRawElementProviderSimple,
    asyncContentLoadedState: AsyncContentLoadedState,
    percentComplete: f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaRaiseTextEditTextChangedEvent(
    pProvider: IRawElementProviderSimple,
    textEditChangeType: TextEditChangeType,
    pChangedData: ?*SAFEARRAY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaRaiseChangesEvent(
    pProvider: IRawElementProviderSimple,
    eventIdCount: i32,
    pUiaChanges: ?*UiaChangeInfo,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaRaiseNotificationEvent(
    provider: IRawElementProviderSimple,
    notificationKind: NotificationKind,
    notificationProcessing: NotificationProcessing,
    displayString: BSTR,
    activityId: BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaRaiseActiveTextPositionChangedEvent(
    provider: IRawElementProviderSimple,
    textRange: ITextRangeProvider,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaAddEvent(
    hnode: ?*HUIANODE__,
    eventId: i32,
    pCallback: ?*UiaEventCallback,
    scope: TreeScope,
    pProperties: ?*i32,
    cProperties: i32,
    pRequest: ?*UiaCacheRequest,
    phEvent: ?*?*HUIAEVENT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaRemoveEvent(
    hEvent: ?*HUIAEVENT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaEventAddWindow(
    hEvent: ?*HUIAEVENT__,
    hwnd: HWND,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaEventRemoveWindow(
    hEvent: ?*HUIAEVENT__,
    hwnd: HWND,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn DockPattern_SetDockPosition(
    hobj: ?*HUIAPATTERNOBJECT__,
    dockPosition: DockPosition,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn ExpandCollapsePattern_Collapse(
    hobj: ?*HUIAPATTERNOBJECT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn ExpandCollapsePattern_Expand(
    hobj: ?*HUIAPATTERNOBJECT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn GridPattern_GetItem(
    hobj: ?*HUIAPATTERNOBJECT__,
    row: i32,
    column: i32,
    pResult: ?*?*HUIANODE__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn InvokePattern_Invoke(
    hobj: ?*HUIAPATTERNOBJECT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn MultipleViewPattern_GetViewName(
    hobj: ?*HUIAPATTERNOBJECT__,
    viewId: i32,
    ppStr: ?*BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn MultipleViewPattern_SetCurrentView(
    hobj: ?*HUIAPATTERNOBJECT__,
    viewId: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn RangeValuePattern_SetValue(
    hobj: ?*HUIAPATTERNOBJECT__,
    val: f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn ScrollItemPattern_ScrollIntoView(
    hobj: ?*HUIAPATTERNOBJECT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn ScrollPattern_Scroll(
    hobj: ?*HUIAPATTERNOBJECT__,
    horizontalAmount: ScrollAmount,
    verticalAmount: ScrollAmount,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn ScrollPattern_SetScrollPercent(
    hobj: ?*HUIAPATTERNOBJECT__,
    horizontalPercent: f64,
    verticalPercent: f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn SelectionItemPattern_AddToSelection(
    hobj: ?*HUIAPATTERNOBJECT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn SelectionItemPattern_RemoveFromSelection(
    hobj: ?*HUIAPATTERNOBJECT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn SelectionItemPattern_Select(
    hobj: ?*HUIAPATTERNOBJECT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn TogglePattern_Toggle(
    hobj: ?*HUIAPATTERNOBJECT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn TransformPattern_Move(
    hobj: ?*HUIAPATTERNOBJECT__,
    x: f64,
    y: f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn TransformPattern_Resize(
    hobj: ?*HUIAPATTERNOBJECT__,
    width: f64,
    height: f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn TransformPattern_Rotate(
    hobj: ?*HUIAPATTERNOBJECT__,
    degrees: f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn ValuePattern_SetValue(
    hobj: ?*HUIAPATTERNOBJECT__,
    pVal: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn WindowPattern_Close(
    hobj: ?*HUIAPATTERNOBJECT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn WindowPattern_SetWindowVisualState(
    hobj: ?*HUIAPATTERNOBJECT__,
    state: WindowVisualState,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn WindowPattern_WaitForInputIdle(
    hobj: ?*HUIAPATTERNOBJECT__,
    milliseconds: i32,
    pResult: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn TextPattern_GetSelection(
    hobj: ?*HUIAPATTERNOBJECT__,
    pRetVal: ?*?*SAFEARRAY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn TextPattern_GetVisibleRanges(
    hobj: ?*HUIAPATTERNOBJECT__,
    pRetVal: ?*?*SAFEARRAY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn TextPattern_RangeFromChild(
    hobj: ?*HUIAPATTERNOBJECT__,
    hnodeChild: ?*HUIANODE__,
    pRetVal: ?*?*HUIATEXTRANGE__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn TextPattern_RangeFromPoint(
    hobj: ?*HUIAPATTERNOBJECT__,
    point: UiaPoint,
    pRetVal: ?*?*HUIATEXTRANGE__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn TextPattern_get_DocumentRange(
    hobj: ?*HUIAPATTERNOBJECT__,
    pRetVal: ?*?*HUIATEXTRANGE__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn TextPattern_get_SupportedTextSelection(
    hobj: ?*HUIAPATTERNOBJECT__,
    pRetVal: ?*SupportedTextSelection,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn TextRange_Clone(
    hobj: ?*HUIATEXTRANGE__,
    pRetVal: ?*?*HUIATEXTRANGE__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn TextRange_Compare(
    hobj: ?*HUIATEXTRANGE__,
    range: ?*HUIATEXTRANGE__,
    pRetVal: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn TextRange_CompareEndpoints(
    hobj: ?*HUIATEXTRANGE__,
    endpoint: TextPatternRangeEndpoint,
    targetRange: ?*HUIATEXTRANGE__,
    targetEndpoint: TextPatternRangeEndpoint,
    pRetVal: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn TextRange_ExpandToEnclosingUnit(
    hobj: ?*HUIATEXTRANGE__,
    unit: TextUnit,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn TextRange_GetAttributeValue(
    hobj: ?*HUIATEXTRANGE__,
    attributeId: i32,
    pRetVal: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn TextRange_FindAttribute(
    hobj: ?*HUIATEXTRANGE__,
    attributeId: i32,
    val: VARIANT,
    backward: BOOL,
    pRetVal: ?*?*HUIATEXTRANGE__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn TextRange_FindText(
    hobj: ?*HUIATEXTRANGE__,
    text: BSTR,
    backward: BOOL,
    ignoreCase: BOOL,
    pRetVal: ?*?*HUIATEXTRANGE__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn TextRange_GetBoundingRectangles(
    hobj: ?*HUIATEXTRANGE__,
    pRetVal: ?*?*SAFEARRAY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn TextRange_GetEnclosingElement(
    hobj: ?*HUIATEXTRANGE__,
    pRetVal: ?*?*HUIANODE__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn TextRange_GetText(
    hobj: ?*HUIATEXTRANGE__,
    maxLength: i32,
    pRetVal: ?*BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn TextRange_Move(
    hobj: ?*HUIATEXTRANGE__,
    unit: TextUnit,
    count: i32,
    pRetVal: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn TextRange_MoveEndpointByUnit(
    hobj: ?*HUIATEXTRANGE__,
    endpoint: TextPatternRangeEndpoint,
    unit: TextUnit,
    count: i32,
    pRetVal: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn TextRange_MoveEndpointByRange(
    hobj: ?*HUIATEXTRANGE__,
    endpoint: TextPatternRangeEndpoint,
    targetRange: ?*HUIATEXTRANGE__,
    targetEndpoint: TextPatternRangeEndpoint,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn TextRange_Select(
    hobj: ?*HUIATEXTRANGE__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn TextRange_AddToSelection(
    hobj: ?*HUIATEXTRANGE__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn TextRange_RemoveFromSelection(
    hobj: ?*HUIATEXTRANGE__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn TextRange_ScrollIntoView(
    hobj: ?*HUIATEXTRANGE__,
    alignToTop: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn TextRange_GetChildren(
    hobj: ?*HUIATEXTRANGE__,
    pRetVal: ?*?*SAFEARRAY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn ItemContainerPattern_FindItemByProperty(
    hobj: ?*HUIAPATTERNOBJECT__,
    hnodeStartAfter: ?*HUIANODE__,
    propertyId: i32,
    value: VARIANT,
    pFound: ?*?*HUIANODE__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn LegacyIAccessiblePattern_Select(
    hobj: ?*HUIAPATTERNOBJECT__,
    flagsSelect: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn LegacyIAccessiblePattern_DoDefaultAction(
    hobj: ?*HUIAPATTERNOBJECT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn LegacyIAccessiblePattern_SetValue(
    hobj: ?*HUIAPATTERNOBJECT__,
    szValue: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn LegacyIAccessiblePattern_GetIAccessible(
    hobj: ?*HUIAPATTERNOBJECT__,
    pAccessible: ?*IAccessible,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn SynchronizedInputPattern_StartListening(
    hobj: ?*HUIAPATTERNOBJECT__,
    inputType: SynchronizedInputType,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn SynchronizedInputPattern_Cancel(
    hobj: ?*HUIAPATTERNOBJECT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn VirtualizedItemPattern_Realize(
    hobj: ?*HUIAPATTERNOBJECT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaPatternRelease(
    hobj: ?*HUIAPATTERNOBJECT__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaTextRangeRelease(
    hobj: ?*HUIATEXTRANGE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaReturnRawElementProvider(
    hwnd: HWND,
    wParam: WPARAM,
    lParam: LPARAM,
    el: IRawElementProviderSimple,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaHostProviderFromHwnd(
    hwnd: HWND,
    ppProvider: ?*IRawElementProviderSimple,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaProviderForNonClient(
    hwnd: HWND,
    idObject: i32,
    idChild: i32,
    ppProvider: ?*IRawElementProviderSimple,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaIAccessibleFromProvider(
    pProvider: IRawElementProviderSimple,
    dwFlags: u32,
    ppAccessible: ?*IAccessible,
    pvarChild: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaProviderFromIAccessible(
    pAccessible: IAccessible,
    idChild: i32,
    dwFlags: u32,
    ppProvider: ?*IRawElementProviderSimple,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaDisconnectAllProviders(
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaDisconnectProvider(
    pProvider: IRawElementProviderSimple,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "UIAutomationCore" fn UiaHasServerSideProvider(
    hwnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const SERIALKEYS = SERIALKEYSA;
        pub const HIGHCONTRAST = HIGHCONTRASTA;
        pub const SOUNDSENTRY = SOUNDSENTRYA;
        pub const GetRoleText = GetRoleTextA;
        pub const GetStateText = GetStateTextA;
        pub const CreateStdAccessibleProxy = CreateStdAccessibleProxyA;
    },
    .wide => struct {
        pub const SERIALKEYS = SERIALKEYSW;
        pub const HIGHCONTRAST = HIGHCONTRASTW;
        pub const SOUNDSENTRY = SOUNDSENTRYW;
        pub const GetRoleText = GetRoleTextW;
        pub const GetStateText = GetStateTextW;
        pub const CreateStdAccessibleProxy = CreateStdAccessibleProxyW;
    },
    else => if (@import("builtin").is_test) struct {
        pub const SERIALKEYS = *opaque{};
        pub const HIGHCONTRAST = *opaque{};
        pub const SOUNDSENTRY = *opaque{};
        pub const GetRoleText = *opaque{};
        pub const GetStateText = *opaque{};
        pub const CreateStdAccessibleProxy = *opaque{};
    } else struct {
        pub const SERIALKEYS = @compileError("'SERIALKEYS' requires that UNICODE be set to true or false in the root module");
        pub const HIGHCONTRAST = @compileError("'HIGHCONTRAST' requires that UNICODE be set to true or false in the root module");
        pub const SOUNDSENTRY = @compileError("'SOUNDSENTRY' requires that UNICODE be set to true or false in the root module");
        pub const GetRoleText = @compileError("'GetRoleText' requires that UNICODE be set to true or false in the root module");
        pub const GetStateText = @compileError("'GetStateText' requires that UNICODE be set to true or false in the root module");
        pub const CreateStdAccessibleProxy = @compileError("'CreateStdAccessibleProxy' requires that UNICODE be set to true or false in the root module");
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const VARIANT = @import("automation.zig").VARIANT;
const BOOL = @import("systemservices.zig").BOOL;
const SAFEARRAY = @import("automation.zig").SAFEARRAY;
const BSTR = @import("automation.zig").BSTR;
const HWND = @import("windowsandmessaging.zig").HWND;
const WPARAM = @import("windowsandmessaging.zig").WPARAM;
const IUnknown = @import("com.zig").IUnknown;
const LRESULT = @import("systemservices.zig").LRESULT;
const HRESULT = @import("com.zig").HRESULT;
const POINT = @import("displaydevices.zig").POINT;
const LPARAM = @import("windowsandmessaging.zig").LPARAM;

test "" {
    const constant_export_count = 392;
    const type_export_count = 250;
    const func_count = 123;
    const unicode_alias_count = 6;
    const type_import_count = 12;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
