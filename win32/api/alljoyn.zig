//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//
pub const ALLJOYN_LITTLE_ENDIAN : u8 = 108;
pub const ALLJOYN_BIG_ENDIAN : u8 = 66;
pub const ALLJOYN_MESSAGE_DEFAULT_TIMEOUT : u32 = 25000;
pub const ALLJOYN_CRED_PASSWORD : u16 = 1;
pub const ALLJOYN_CRED_USER_NAME : u16 = 2;
pub const ALLJOYN_CRED_CERT_CHAIN : u16 = 4;
pub const ALLJOYN_CRED_PRIVATE_KEY : u16 = 8;
pub const ALLJOYN_CRED_LOGON_ENTRY : u16 = 16;
pub const ALLJOYN_CRED_EXPIRATION : u16 = 32;
pub const ALLJOYN_CRED_NEW_PASSWORD : u16 = 4097;
pub const ALLJOYN_CRED_ONE_TIME_PWD : u16 = 8193;
pub const ALLJOYN_PROP_ACCESS_READ : u8 = 1;
pub const ALLJOYN_PROP_ACCESS_WRITE : u8 = 2;
pub const ALLJOYN_PROP_ACCESS_RW : u8 = 3;
pub const ALLJOYN_MEMBER_ANNOTATE_NO_REPLY : u8 = 1;
pub const ALLJOYN_MEMBER_ANNOTATE_DEPRECATED : u8 = 2;
pub const ALLJOYN_MEMBER_ANNOTATE_SESSIONCAST : u8 = 4;
pub const ALLJOYN_MEMBER_ANNOTATE_SESSIONLESS : u8 = 8;
pub const ALLJOYN_MEMBER_ANNOTATE_UNICAST : u8 = 16;
pub const ALLJOYN_MEMBER_ANNOTATE_GLOBAL_BROADCAST : u8 = 32;

//
// types
//
// --------------------------------------------------------
// Type: alljoyn_about_announceflag
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_about_announceflag = *opaque{
};
// --------------------------------------------------------
// Type: QStatus
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const QStatus = *opaque{
};
// --------------------------------------------------------
// Type: _alljoyn_msgarg_handle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _alljoyn_msgarg_handle = opaque {
};
// --------------------------------------------------------
// Type: alljoyn_typeid
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_typeid = *opaque{
};
// --------------------------------------------------------
// Type: _alljoyn_aboutdata_handle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _alljoyn_aboutdata_handle = opaque {
};
// --------------------------------------------------------
// Type: _alljoyn_aboutdatalistener_handle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _alljoyn_aboutdatalistener_handle = opaque {
};
// --------------------------------------------------------
// Type: alljoyn_aboutdatalistener_getaboutdata_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_aboutdatalistener_getaboutdata_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_aboutdatalistener_getannouncedaboutdata_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_aboutdatalistener_getannouncedaboutdata_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_aboutdatalistener_callbacks
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const alljoyn_aboutdatalistener_callbacks = extern struct {
    about_datalistener_getaboutdata: alljoyn_aboutdatalistener_getaboutdata_ptr,
    about_datalistener_getannouncedaboutdata: alljoyn_aboutdatalistener_getannouncedaboutdata_ptr,
};
// --------------------------------------------------------
// Type: _alljoyn_permissionconfigurator_handle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _alljoyn_permissionconfigurator_handle = opaque {
};
// --------------------------------------------------------
// Type: alljoyn_applicationstate
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_applicationstate = *opaque{
};
// --------------------------------------------------------
// Type: alljoyn_claimcapability_masks
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_claimcapability_masks = *opaque{
};
// --------------------------------------------------------
// Type: alljoyn_claimcapabilityadditionalinfo_masks
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_claimcapabilityadditionalinfo_masks = *opaque{
};
// --------------------------------------------------------
// Type: alljoyn_certificateid
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const alljoyn_certificateid = extern struct {
    serial: ?*u8,
    serialLen: ?*opaque{},
    issuerPublicKey: ?*i8,
    issuerAki: ?*u8,
    issuerAkiLen: ?*opaque{},
};
// --------------------------------------------------------
// Type: alljoyn_certificateidarray
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const alljoyn_certificateidarray = extern struct {
    count: ?*opaque{},
    ids: ?*alljoyn_certificateid,
};
// --------------------------------------------------------
// Type: alljoyn_manifestarray
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const alljoyn_manifestarray = extern struct {
    count: ?*opaque{},
    xmls: ?*?*i8,
};
// --------------------------------------------------------
// Type: _alljoyn_applicationstatelistener_handle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _alljoyn_applicationstatelistener_handle = opaque {
};
// --------------------------------------------------------
// Type: alljoyn_applicationstatelistener_state_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_applicationstatelistener_state_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_applicationstatelistener_callbacks
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const alljoyn_applicationstatelistener_callbacks = extern struct {
    state: alljoyn_applicationstatelistener_state_ptr,
};
// --------------------------------------------------------
// Type: _alljoyn_keystore_handle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _alljoyn_keystore_handle = opaque {
};
// --------------------------------------------------------
// Type: _alljoyn_keystorelistener_handle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _alljoyn_keystorelistener_handle = opaque {
};
// --------------------------------------------------------
// Type: alljoyn_keystorelistener_loadrequest_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_keystorelistener_loadrequest_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_keystorelistener_storerequest_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_keystorelistener_storerequest_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_keystorelistener_acquireexclusivelock_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_keystorelistener_acquireexclusivelock_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_keystorelistener_releaseexclusivelock_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_keystorelistener_releaseexclusivelock_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_keystorelistener_callbacks
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const alljoyn_keystorelistener_callbacks = extern struct {
    load_request: alljoyn_keystorelistener_loadrequest_ptr,
    store_request: alljoyn_keystorelistener_storerequest_ptr,
};
// --------------------------------------------------------
// Type: alljoyn_keystorelistener_with_synchronization_callbacks
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const alljoyn_keystorelistener_with_synchronization_callbacks = extern struct {
    load_request: alljoyn_keystorelistener_loadrequest_ptr,
    store_request: alljoyn_keystorelistener_storerequest_ptr,
    acquire_exclusive_lock: alljoyn_keystorelistener_acquireexclusivelock_ptr,
    release_exclusive_lock: alljoyn_keystorelistener_releaseexclusivelock_ptr,
};
// --------------------------------------------------------
// Type: _alljoyn_sessionopts_handle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _alljoyn_sessionopts_handle = opaque {
};
// --------------------------------------------------------
// Type: _alljoyn_message_handle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _alljoyn_message_handle = opaque {
};
// --------------------------------------------------------
// Type: _alljoyn_busattachment_handle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _alljoyn_busattachment_handle = opaque {
};
// --------------------------------------------------------
// Type: alljoyn_messagetype
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_messagetype = *opaque{
};
// --------------------------------------------------------
// Type: _alljoyn_authlistener_handle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _alljoyn_authlistener_handle = opaque {
};
// --------------------------------------------------------
// Type: _alljoyn_credentials_handle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _alljoyn_credentials_handle = opaque {
};
// --------------------------------------------------------
// Type: alljoyn_authlistener_requestcredentials_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_authlistener_requestcredentials_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_authlistener_requestcredentialsasync_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_authlistener_requestcredentialsasync_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_authlistener_verifycredentials_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_authlistener_verifycredentials_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_authlistener_verifycredentialsasync_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_authlistener_verifycredentialsasync_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_authlistener_securityviolation_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_authlistener_securityviolation_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_authlistener_authenticationcomplete_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_authlistener_authenticationcomplete_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_authlistener_callbacks
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const alljoyn_authlistener_callbacks = extern struct {
    request_credentials: alljoyn_authlistener_requestcredentials_ptr,
    verify_credentials: alljoyn_authlistener_verifycredentials_ptr,
    security_violation: alljoyn_authlistener_securityviolation_ptr,
    authentication_complete: alljoyn_authlistener_authenticationcomplete_ptr,
};
// --------------------------------------------------------
// Type: alljoyn_authlistenerasync_callbacks
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const alljoyn_authlistenerasync_callbacks = extern struct {
    request_credentials: alljoyn_authlistener_requestcredentialsasync_ptr,
    verify_credentials: alljoyn_authlistener_verifycredentialsasync_ptr,
    security_violation: alljoyn_authlistener_securityviolation_ptr,
    authentication_complete: alljoyn_authlistener_authenticationcomplete_ptr,
};
// --------------------------------------------------------
// Type: _alljoyn_buslistener_handle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _alljoyn_buslistener_handle = opaque {
};
// --------------------------------------------------------
// Type: alljoyn_buslistener_listener_registered_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_buslistener_listener_registered_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_buslistener_listener_unregistered_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_buslistener_listener_unregistered_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_buslistener_found_advertised_name_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_buslistener_found_advertised_name_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_buslistener_lost_advertised_name_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_buslistener_lost_advertised_name_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_buslistener_name_owner_changed_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_buslistener_name_owner_changed_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_buslistener_bus_stopping_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_buslistener_bus_stopping_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_buslistener_bus_disconnected_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_buslistener_bus_disconnected_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_buslistener_bus_prop_changed_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_buslistener_bus_prop_changed_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_buslistener_callbacks
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const alljoyn_buslistener_callbacks = extern struct {
    listener_registered: alljoyn_buslistener_listener_registered_ptr,
    listener_unregistered: alljoyn_buslistener_listener_unregistered_ptr,
    found_advertised_name: alljoyn_buslistener_found_advertised_name_ptr,
    lost_advertised_name: alljoyn_buslistener_lost_advertised_name_ptr,
    name_owner_changed: alljoyn_buslistener_name_owner_changed_ptr,
    bus_stopping: alljoyn_buslistener_bus_stopping_ptr,
    bus_disconnected: alljoyn_buslistener_bus_disconnected_ptr,
    property_changed: alljoyn_buslistener_bus_prop_changed_ptr,
};
// --------------------------------------------------------
// Type: _alljoyn_interfacedescription_handle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _alljoyn_interfacedescription_handle = opaque {
};
// --------------------------------------------------------
// Type: alljoyn_interfacedescription_securitypolicy
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_interfacedescription_securitypolicy = *opaque{
};
// --------------------------------------------------------
// Type: alljoyn_interfacedescription_member
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const alljoyn_interfacedescription_member = extern struct {
    iface: ?*_alljoyn_interfacedescription_handle,
    memberType: alljoyn_messagetype,
    name: ?*i8,
    signature: ?*i8,
    returnSignature: ?*i8,
    argNames: ?*i8,
    internal_member: ?*opaque{},
};
// --------------------------------------------------------
// Type: alljoyn_interfacedescription_translation_callback_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_interfacedescription_translation_callback_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_interfacedescription_property
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const alljoyn_interfacedescription_property = extern struct {
    name: ?*i8,
    signature: ?*i8,
    access: u8,
    internal_property: ?*opaque{},
};
// --------------------------------------------------------
// Type: _alljoyn_busobject_handle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _alljoyn_busobject_handle = opaque {
};
// --------------------------------------------------------
// Type: alljoyn_messagereceiver_methodhandler_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_messagereceiver_methodhandler_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_messagereceiver_replyhandler_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_messagereceiver_replyhandler_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_messagereceiver_signalhandler_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_messagereceiver_signalhandler_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_busobject_prop_get_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_busobject_prop_get_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_busobject_prop_set_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_busobject_prop_set_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_busobject_object_registration_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_busobject_object_registration_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_busobject_callbacks
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const alljoyn_busobject_callbacks = extern struct {
    property_get: alljoyn_busobject_prop_get_ptr,
    property_set: alljoyn_busobject_prop_set_ptr,
    object_registered: alljoyn_busobject_object_registration_ptr,
    object_unregistered: alljoyn_busobject_object_registration_ptr,
};
// --------------------------------------------------------
// Type: alljoyn_busobject_methodentry
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const alljoyn_busobject_methodentry = extern struct {
    member: ?*alljoyn_interfacedescription_member,
    method_handler: alljoyn_messagereceiver_methodhandler_ptr,
};
// --------------------------------------------------------
// Type: _alljoyn_proxybusobject_handle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _alljoyn_proxybusobject_handle = opaque {
};
// --------------------------------------------------------
// Type: alljoyn_proxybusobject_listener_introspectcb_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_proxybusobject_listener_introspectcb_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_proxybusobject_listener_getpropertycb_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_proxybusobject_listener_getpropertycb_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_proxybusobject_listener_getallpropertiescb_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_proxybusobject_listener_getallpropertiescb_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_proxybusobject_listener_setpropertycb_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_proxybusobject_listener_setpropertycb_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_proxybusobject_listener_propertieschanged_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_proxybusobject_listener_propertieschanged_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: _alljoyn_permissionconfigurationlistener_handle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _alljoyn_permissionconfigurationlistener_handle = opaque {
};
// --------------------------------------------------------
// Type: alljoyn_permissionconfigurationlistener_factoryreset_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_permissionconfigurationlistener_factoryreset_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_permissionconfigurationlistener_policychanged_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_permissionconfigurationlistener_policychanged_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_permissionconfigurationlistener_startmanagement_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_permissionconfigurationlistener_startmanagement_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_permissionconfigurationlistener_endmanagement_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_permissionconfigurationlistener_endmanagement_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_permissionconfigurationlistener_callbacks
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const alljoyn_permissionconfigurationlistener_callbacks = extern struct {
    factory_reset: alljoyn_permissionconfigurationlistener_factoryreset_ptr,
    policy_changed: alljoyn_permissionconfigurationlistener_policychanged_ptr,
    start_management: alljoyn_permissionconfigurationlistener_startmanagement_ptr,
    end_management: alljoyn_permissionconfigurationlistener_endmanagement_ptr,
};
// --------------------------------------------------------
// Type: alljoyn_sessionlostreason
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_sessionlostreason = *opaque{
};
// --------------------------------------------------------
// Type: _alljoyn_sessionlistener_handle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _alljoyn_sessionlistener_handle = opaque {
};
// --------------------------------------------------------
// Type: alljoyn_sessionlistener_sessionlost_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_sessionlistener_sessionlost_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_sessionlistener_sessionmemberadded_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_sessionlistener_sessionmemberadded_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_sessionlistener_sessionmemberremoved_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_sessionlistener_sessionmemberremoved_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_sessionlistener_callbacks
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const alljoyn_sessionlistener_callbacks = extern struct {
    session_lost: alljoyn_sessionlistener_sessionlost_ptr,
    session_member_added: alljoyn_sessionlistener_sessionmemberadded_ptr,
    session_member_removed: alljoyn_sessionlistener_sessionmemberremoved_ptr,
};
// --------------------------------------------------------
// Type: _alljoyn_sessionportlistener_handle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _alljoyn_sessionportlistener_handle = opaque {
};
// --------------------------------------------------------
// Type: alljoyn_sessionportlistener_acceptsessionjoiner_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_sessionportlistener_acceptsessionjoiner_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_sessionportlistener_sessionjoined_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_sessionportlistener_sessionjoined_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_sessionportlistener_callbacks
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const alljoyn_sessionportlistener_callbacks = extern struct {
    accept_session_joiner: alljoyn_sessionportlistener_acceptsessionjoiner_ptr,
    session_joined: alljoyn_sessionportlistener_sessionjoined_ptr,
};
// --------------------------------------------------------
// Type: _alljoyn_aboutlistener_handle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _alljoyn_aboutlistener_handle = opaque {
};
// --------------------------------------------------------
// Type: alljoyn_about_announced_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_about_announced_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_aboutlistener_callback
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const alljoyn_aboutlistener_callback = extern struct {
    about_listener_announced: alljoyn_about_announced_ptr,
};
// --------------------------------------------------------
// Type: alljoyn_busattachment_joinsessioncb_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_busattachment_joinsessioncb_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_busattachment_setlinktimeoutcb_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_busattachment_setlinktimeoutcb_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: _alljoyn_aboutobj_handle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _alljoyn_aboutobj_handle = opaque {
};
// --------------------------------------------------------
// Type: _alljoyn_aboutobjectdescription_handle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _alljoyn_aboutobjectdescription_handle = opaque {
};
// --------------------------------------------------------
// Type: _alljoyn_aboutproxy_handle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _alljoyn_aboutproxy_handle = opaque {
};
// --------------------------------------------------------
// Type: _alljoyn_pinglistener_handle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _alljoyn_pinglistener_handle = opaque {
};
// --------------------------------------------------------
// Type: alljoyn_autopinger_destination_lost_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_autopinger_destination_lost_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_autopinger_destination_found_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_autopinger_destination_found_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_pinglistener_callback
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const alljoyn_pinglistener_callback = extern struct {
    destination_found: alljoyn_autopinger_destination_found_ptr,
    destination_lost: alljoyn_autopinger_destination_lost_ptr,
};
// --------------------------------------------------------
// Type: _alljoyn_autopinger_handle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _alljoyn_autopinger_handle = opaque {
};
// --------------------------------------------------------
// Type: _alljoyn_proxybusobject_ref_handle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _alljoyn_proxybusobject_ref_handle = opaque {
};
// --------------------------------------------------------
// Type: _alljoyn_observerlistener_handle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _alljoyn_observerlistener_handle = opaque {
};
// --------------------------------------------------------
// Type: alljoyn_observer_object_discovered_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_observer_object_discovered_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_observer_object_lost_ptr
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const alljoyn_observer_object_lost_ptr = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: alljoyn_observerlistener_callback
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const alljoyn_observerlistener_callback = extern struct {
    object_discovered: alljoyn_observer_object_discovered_ptr,
    object_lost: alljoyn_observer_object_lost_ptr,
};
// --------------------------------------------------------
// Type: _alljoyn_observer_handle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _alljoyn_observer_handle = opaque {
};
// --------------------------------------------------------
// Type: _alljoyn_securityapplicationproxy_handle
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const _alljoyn_securityapplicationproxy_handle = opaque {
};

//
// functions
//

// set_last_errror=True (can and should we use this?)
pub extern "MSAJApi" fn AllJoynConnectToBus(
    connectionSpec: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=True (can and should we use this?)
pub extern "MSAJApi" fn AllJoynCloseBusHandle(
    busHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "MSAJApi" fn AllJoynSendToBus(
    connectedBusHandle: HANDLE,
    buffer: ?*opaque{},
    bytesToWrite: u32,
    bytesTransferred: ?*u32,
    reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "MSAJApi" fn AllJoynReceiveFromBus(
    connectedBusHandle: HANDLE,
    buffer: ?*opaque{},
    bytesToRead: u32,
    bytesTransferred: ?*u32,
    reserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "MSAJApi" fn AllJoynEventSelect(
    connectedBusHandle: HANDLE,
    eventHandle: HANDLE,
    eventTypes: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "MSAJApi" fn AllJoynEnumEvents(
    connectedBusHandle: HANDLE,
    eventToReset: HANDLE,
    eventTypes: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn AllJoynCreateBus(
    outBufferSize: u32,
    inBufferSize: u32,
    lpSecurityAttributes: ?*SECURITY_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn AllJoynAcceptBusConnection(
    serverBusHandle: HANDLE,
    abortEvent: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_unity_deferred_callbacks_process(
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_unity_set_deferred_callback_mainthread_only(
    mainthread_only: i32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn QCC_StatusText(
    status: QStatus,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_create(
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_msgarg_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_create_and_set(
    signature: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_msgarg_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_destroy(
    arg: ?*_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_array_create(
    size: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_msgarg_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_array_element(
    arg: ?*_alljoyn_msgarg_handle,
    index: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_msgarg_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_set(
    arg: ?*_alljoyn_msgarg_handle,
    signature: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_get(
    arg: ?*_alljoyn_msgarg_handle,
    signature: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_copy(
    source: ?*_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_msgarg_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_clone(
    destination: ?*_alljoyn_msgarg_handle,
    source: ?*_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_equal(
    lhv: ?*_alljoyn_msgarg_handle,
    rhv: ?*_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_array_set(
    args: ?*_alljoyn_msgarg_handle,
    numArgs: ?*?*opaque{},
    signature: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_array_get(
    args: ?*_alljoyn_msgarg_handle,
    numArgs: ?*opaque{},
    signature: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_tostring(
    arg: ?*_alljoyn_msgarg_handle,
    str: ?*i8,
    buf: ?*opaque{},
    indent: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_array_tostring(
    args: ?*_alljoyn_msgarg_handle,
    numArgs: ?*opaque{},
    str: ?*i8,
    buf: ?*opaque{},
    indent: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_signature(
    arg: ?*_alljoyn_msgarg_handle,
    str: ?*i8,
    buf: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_array_signature(
    values: ?*_alljoyn_msgarg_handle,
    numValues: ?*opaque{},
    str: ?*i8,
    buf: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_hassignature(
    arg: ?*_alljoyn_msgarg_handle,
    signature: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_getdictelement(
    arg: ?*_alljoyn_msgarg_handle,
    elemSig: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_gettype(
    arg: ?*_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) alljoyn_typeid;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_clear(
    arg: ?*_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_stabilize(
    arg: ?*_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_array_set_offset(
    args: ?*_alljoyn_msgarg_handle,
    argOffset: ?*opaque{},
    numArgs: ?*?*opaque{},
    signature: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_set_and_stabilize(
    arg: ?*_alljoyn_msgarg_handle,
    signature: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_set_uint8(
    arg: ?*_alljoyn_msgarg_handle,
    y: u8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_set_bool(
    arg: ?*_alljoyn_msgarg_handle,
    b: i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_set_int16(
    arg: ?*_alljoyn_msgarg_handle,
    n: i16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_set_uint16(
    arg: ?*_alljoyn_msgarg_handle,
    q: u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_set_int32(
    arg: ?*_alljoyn_msgarg_handle,
    i: i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_set_uint32(
    arg: ?*_alljoyn_msgarg_handle,
    u: u32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_set_int64(
    arg: ?*_alljoyn_msgarg_handle,
    x: i64,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_set_uint64(
    arg: ?*_alljoyn_msgarg_handle,
    t: u64,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_set_double(
    arg: ?*_alljoyn_msgarg_handle,
    d: f64,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_set_string(
    arg: ?*_alljoyn_msgarg_handle,
    s: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_set_objectpath(
    arg: ?*_alljoyn_msgarg_handle,
    o: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_set_signature(
    arg: ?*_alljoyn_msgarg_handle,
    g: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_get_uint8(
    arg: ?*_alljoyn_msgarg_handle,
    y: ?*u8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_get_bool(
    arg: ?*_alljoyn_msgarg_handle,
    b: ?*i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_get_int16(
    arg: ?*_alljoyn_msgarg_handle,
    n: ?*i16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_get_uint16(
    arg: ?*_alljoyn_msgarg_handle,
    q: ?*u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_get_int32(
    arg: ?*_alljoyn_msgarg_handle,
    i: ?*i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_get_uint32(
    arg: ?*_alljoyn_msgarg_handle,
    u: ?*u32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_get_int64(
    arg: ?*_alljoyn_msgarg_handle,
    x: ?*i64,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_get_uint64(
    arg: ?*_alljoyn_msgarg_handle,
    t: ?*u64,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_get_double(
    arg: ?*_alljoyn_msgarg_handle,
    d: ?*f64,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_get_string(
    arg: ?*_alljoyn_msgarg_handle,
    s: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_get_objectpath(
    arg: ?*_alljoyn_msgarg_handle,
    o: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_get_signature(
    arg: ?*_alljoyn_msgarg_handle,
    g: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_get_variant(
    arg: ?*_alljoyn_msgarg_handle,
    v: ?*_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_set_uint8_array(
    arg: ?*_alljoyn_msgarg_handle,
    length: ?*opaque{},
    ay: ?*u8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_set_bool_array(
    arg: ?*_alljoyn_msgarg_handle,
    length: ?*opaque{},
    ab: ?*i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_set_int16_array(
    arg: ?*_alljoyn_msgarg_handle,
    length: ?*opaque{},
    an: ?*i16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_set_uint16_array(
    arg: ?*_alljoyn_msgarg_handle,
    length: ?*opaque{},
    aq: ?*u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_set_int32_array(
    arg: ?*_alljoyn_msgarg_handle,
    length: ?*opaque{},
    ai: ?*i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_set_uint32_array(
    arg: ?*_alljoyn_msgarg_handle,
    length: ?*opaque{},
    au: ?*u32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_set_int64_array(
    arg: ?*_alljoyn_msgarg_handle,
    length: ?*opaque{},
    ax: ?*i64,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_set_uint64_array(
    arg: ?*_alljoyn_msgarg_handle,
    length: ?*opaque{},
    at: ?*u64,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_set_double_array(
    arg: ?*_alljoyn_msgarg_handle,
    length: ?*opaque{},
    ad: ?*f64,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_set_string_array(
    arg: ?*_alljoyn_msgarg_handle,
    length: ?*opaque{},
    as: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_set_objectpath_array(
    arg: ?*_alljoyn_msgarg_handle,
    length: ?*opaque{},
    ao: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_set_signature_array(
    arg: ?*_alljoyn_msgarg_handle,
    length: ?*opaque{},
    ag: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_get_uint8_array(
    arg: ?*_alljoyn_msgarg_handle,
    length: ?*?*opaque{},
    ay: ?*u8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_get_bool_array(
    arg: ?*_alljoyn_msgarg_handle,
    length: ?*?*opaque{},
    ab: ?*i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_get_int16_array(
    arg: ?*_alljoyn_msgarg_handle,
    length: ?*?*opaque{},
    an: ?*i16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_get_uint16_array(
    arg: ?*_alljoyn_msgarg_handle,
    length: ?*?*opaque{},
    aq: ?*u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_get_int32_array(
    arg: ?*_alljoyn_msgarg_handle,
    length: ?*?*opaque{},
    ai: ?*i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_get_uint32_array(
    arg: ?*_alljoyn_msgarg_handle,
    length: ?*?*opaque{},
    au: ?*u32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_get_int64_array(
    arg: ?*_alljoyn_msgarg_handle,
    length: ?*?*opaque{},
    ax: ?*i64,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_get_uint64_array(
    arg: ?*_alljoyn_msgarg_handle,
    length: ?*?*opaque{},
    at: ?*u64,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_get_double_array(
    arg: ?*_alljoyn_msgarg_handle,
    length: ?*?*opaque{},
    ad: ?*f64,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_get_variant_array(
    arg: ?*_alljoyn_msgarg_handle,
    signature: ?*i8,
    length: ?*?*opaque{},
    av: ?*?*_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_get_array_numberofelements(
    arg: ?*_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_get_array_element(
    arg: ?*_alljoyn_msgarg_handle,
    index: ?*opaque{},
    element: ?*?*_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_get_array_elementsignature(
    arg: ?*_alljoyn_msgarg_handle,
    index: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_getkey(
    arg: ?*_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_msgarg_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_getvalue(
    arg: ?*_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_msgarg_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_setdictentry(
    arg: ?*_alljoyn_msgarg_handle,
    key: ?*_alljoyn_msgarg_handle,
    value: ?*_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_setstruct(
    arg: ?*_alljoyn_msgarg_handle,
    struct_members: ?*_alljoyn_msgarg_handle,
    num_members: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_getnummembers(
    arg: ?*_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_msgarg_getmember(
    arg: ?*_alljoyn_msgarg_handle,
    index: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_msgarg_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_create_empty(
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_aboutdata_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_create(
    defaultLanguage: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_aboutdata_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_create_full(
    arg: ?*_alljoyn_msgarg_handle,
    language: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_aboutdata_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_destroy(
    data: ?*_alljoyn_aboutdata_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_createfromxml(
    data: ?*_alljoyn_aboutdata_handle,
    aboutDataXml: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_isvalid(
    data: ?*_alljoyn_aboutdata_handle,
    language: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_createfrommsgarg(
    data: ?*_alljoyn_aboutdata_handle,
    arg: ?*_alljoyn_msgarg_handle,
    language: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_setappid(
    data: ?*_alljoyn_aboutdata_handle,
    appId: ?*u8,
    num: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_setappid_fromstring(
    data: ?*_alljoyn_aboutdata_handle,
    appId: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_getappid(
    data: ?*_alljoyn_aboutdata_handle,
    appId: ?*?*u8,
    num: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_setdefaultlanguage(
    data: ?*_alljoyn_aboutdata_handle,
    defaultLanguage: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_getdefaultlanguage(
    data: ?*_alljoyn_aboutdata_handle,
    defaultLanguage: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_setdevicename(
    data: ?*_alljoyn_aboutdata_handle,
    deviceName: ?*i8,
    language: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_getdevicename(
    data: ?*_alljoyn_aboutdata_handle,
    deviceName: ?*?*i8,
    language: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_setdeviceid(
    data: ?*_alljoyn_aboutdata_handle,
    deviceId: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_getdeviceid(
    data: ?*_alljoyn_aboutdata_handle,
    deviceId: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_setappname(
    data: ?*_alljoyn_aboutdata_handle,
    appName: ?*i8,
    language: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_getappname(
    data: ?*_alljoyn_aboutdata_handle,
    appName: ?*?*i8,
    language: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_setmanufacturer(
    data: ?*_alljoyn_aboutdata_handle,
    manufacturer: ?*i8,
    language: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_getmanufacturer(
    data: ?*_alljoyn_aboutdata_handle,
    manufacturer: ?*?*i8,
    language: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_setmodelnumber(
    data: ?*_alljoyn_aboutdata_handle,
    modelNumber: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_getmodelnumber(
    data: ?*_alljoyn_aboutdata_handle,
    modelNumber: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_setsupportedlanguage(
    data: ?*_alljoyn_aboutdata_handle,
    language: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_getsupportedlanguages(
    data: ?*_alljoyn_aboutdata_handle,
    languageTags: ?*?*i8,
    num: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_setdescription(
    data: ?*_alljoyn_aboutdata_handle,
    description: ?*i8,
    language: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_getdescription(
    data: ?*_alljoyn_aboutdata_handle,
    description: ?*?*i8,
    language: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_setdateofmanufacture(
    data: ?*_alljoyn_aboutdata_handle,
    dateOfManufacture: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_getdateofmanufacture(
    data: ?*_alljoyn_aboutdata_handle,
    dateOfManufacture: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_setsoftwareversion(
    data: ?*_alljoyn_aboutdata_handle,
    softwareVersion: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_getsoftwareversion(
    data: ?*_alljoyn_aboutdata_handle,
    softwareVersion: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_getajsoftwareversion(
    data: ?*_alljoyn_aboutdata_handle,
    ajSoftwareVersion: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_sethardwareversion(
    data: ?*_alljoyn_aboutdata_handle,
    hardwareVersion: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_gethardwareversion(
    data: ?*_alljoyn_aboutdata_handle,
    hardwareVersion: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_setsupporturl(
    data: ?*_alljoyn_aboutdata_handle,
    supportUrl: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_getsupporturl(
    data: ?*_alljoyn_aboutdata_handle,
    supportUrl: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_setfield(
    data: ?*_alljoyn_aboutdata_handle,
    name: ?*i8,
    value: ?*_alljoyn_msgarg_handle,
    language: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_getfield(
    data: ?*_alljoyn_aboutdata_handle,
    name: ?*i8,
    value: ?*?*_alljoyn_msgarg_handle,
    language: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_getfields(
    data: ?*_alljoyn_aboutdata_handle,
    fields: ?*?*i8,
    num_fields: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_getaboutdata(
    data: ?*_alljoyn_aboutdata_handle,
    msgArg: ?*_alljoyn_msgarg_handle,
    language: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_getannouncedaboutdata(
    data: ?*_alljoyn_aboutdata_handle,
    msgArg: ?*_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_isfieldrequired(
    data: ?*_alljoyn_aboutdata_handle,
    fieldName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_isfieldannounced(
    data: ?*_alljoyn_aboutdata_handle,
    fieldName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_isfieldlocalized(
    data: ?*_alljoyn_aboutdata_handle,
    fieldName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdata_getfieldsignature(
    data: ?*_alljoyn_aboutdata_handle,
    fieldName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdatalistener_create(
    callbacks: ?*alljoyn_aboutdatalistener_callbacks,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_aboutdatalistener_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutdatalistener_destroy(
    listener: ?*_alljoyn_aboutdatalistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_getdefaultclaimcapabilities(
) callconv(@import("std").os.windows.WINAPI) u16;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_getapplicationstate(
    configurator: ?*_alljoyn_permissionconfigurator_handle,
    state: ?*alljoyn_applicationstate,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_setapplicationstate(
    configurator: ?*_alljoyn_permissionconfigurator_handle,
    state: alljoyn_applicationstate,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_getpublickey(
    configurator: ?*_alljoyn_permissionconfigurator_handle,
    publicKey: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_publickey_destroy(
    publicKey: ?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_getmanifesttemplate(
    configurator: ?*_alljoyn_permissionconfigurator_handle,
    manifestTemplateXml: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_manifesttemplate_destroy(
    manifestTemplateXml: ?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_setmanifesttemplatefromxml(
    configurator: ?*_alljoyn_permissionconfigurator_handle,
    manifestTemplateXml: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_getclaimcapabilities(
    configurator: ?*_alljoyn_permissionconfigurator_handle,
    claimCapabilities: ?*u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_setclaimcapabilities(
    configurator: ?*_alljoyn_permissionconfigurator_handle,
    claimCapabilities: u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_getclaimcapabilitiesadditionalinfo(
    configurator: ?*_alljoyn_permissionconfigurator_handle,
    additionalInfo: ?*u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_setclaimcapabilitiesadditionalinfo(
    configurator: ?*_alljoyn_permissionconfigurator_handle,
    additionalInfo: u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_reset(
    configurator: ?*_alljoyn_permissionconfigurator_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_claim(
    configurator: ?*_alljoyn_permissionconfigurator_handle,
    caKey: ?*i8,
    identityCertificateChain: ?*i8,
    groupId: ?*u8,
    groupSize: ?*opaque{},
    groupAuthority: ?*i8,
    manifestsXmls: ?*?*i8,
    manifestsCount: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_updateidentity(
    configurator: ?*_alljoyn_permissionconfigurator_handle,
    identityCertificateChain: ?*i8,
    manifestsXmls: ?*?*i8,
    manifestsCount: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_getidentity(
    configurator: ?*_alljoyn_permissionconfigurator_handle,
    identityCertificateChain: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_certificatechain_destroy(
    certificateChain: ?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_getmanifests(
    configurator: ?*_alljoyn_permissionconfigurator_handle,
    manifestArray: ?*alljoyn_manifestarray,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_manifestarray_cleanup(
    manifestArray: ?*alljoyn_manifestarray,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_installmanifests(
    configurator: ?*_alljoyn_permissionconfigurator_handle,
    manifestsXmls: ?*?*i8,
    manifestsCount: ?*opaque{},
    append: i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_getidentitycertificateid(
    configurator: ?*_alljoyn_permissionconfigurator_handle,
    certificateId: ?*alljoyn_certificateid,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_certificateid_cleanup(
    certificateId: ?*alljoyn_certificateid,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_updatepolicy(
    configurator: ?*_alljoyn_permissionconfigurator_handle,
    policyXml: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_getpolicy(
    configurator: ?*_alljoyn_permissionconfigurator_handle,
    policyXml: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_getdefaultpolicy(
    configurator: ?*_alljoyn_permissionconfigurator_handle,
    policyXml: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_policy_destroy(
    policyXml: ?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_resetpolicy(
    configurator: ?*_alljoyn_permissionconfigurator_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_getmembershipsummaries(
    configurator: ?*_alljoyn_permissionconfigurator_handle,
    certificateIds: ?*alljoyn_certificateidarray,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_certificateidarray_cleanup(
    certificateIdArray: ?*alljoyn_certificateidarray,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_installmembership(
    configurator: ?*_alljoyn_permissionconfigurator_handle,
    membershipCertificateChain: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_removemembership(
    configurator: ?*_alljoyn_permissionconfigurator_handle,
    serial: ?*u8,
    serialLen: ?*opaque{},
    issuerPublicKey: ?*i8,
    issuerAki: ?*u8,
    issuerAkiLen: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_startmanagement(
    configurator: ?*_alljoyn_permissionconfigurator_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurator_endmanagement(
    configurator: ?*_alljoyn_permissionconfigurator_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_applicationstatelistener_create(
    callbacks: ?*alljoyn_applicationstatelistener_callbacks,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_applicationstatelistener_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_applicationstatelistener_destroy(
    listener: ?*_alljoyn_applicationstatelistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_keystorelistener_create(
    callbacks: ?*alljoyn_keystorelistener_callbacks,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_keystorelistener_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_keystorelistener_with_synchronization_create(
    callbacks: ?*alljoyn_keystorelistener_with_synchronization_callbacks,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_keystorelistener_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_keystorelistener_destroy(
    listener: ?*_alljoyn_keystorelistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_keystorelistener_putkeys(
    listener: ?*_alljoyn_keystorelistener_handle,
    keyStore: ?*_alljoyn_keystore_handle,
    source: ?*i8,
    password: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_keystorelistener_getkeys(
    listener: ?*_alljoyn_keystorelistener_handle,
    keyStore: ?*_alljoyn_keystore_handle,
    sink: ?*i8,
    sink_sz: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_sessionopts_create(
    traffic: u8,
    isMultipoint: i32,
    proximity: u8,
    transports: u16,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_sessionopts_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_sessionopts_destroy(
    opts: ?*_alljoyn_sessionopts_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_sessionopts_get_traffic(
    opts: ?*_alljoyn_sessionopts_handle,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_sessionopts_set_traffic(
    opts: ?*_alljoyn_sessionopts_handle,
    traffic: u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_sessionopts_get_multipoint(
    opts: ?*_alljoyn_sessionopts_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_sessionopts_set_multipoint(
    opts: ?*_alljoyn_sessionopts_handle,
    isMultipoint: i32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_sessionopts_get_proximity(
    opts: ?*_alljoyn_sessionopts_handle,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_sessionopts_set_proximity(
    opts: ?*_alljoyn_sessionopts_handle,
    proximity: u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_sessionopts_get_transports(
    opts: ?*_alljoyn_sessionopts_handle,
) callconv(@import("std").os.windows.WINAPI) u16;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_sessionopts_set_transports(
    opts: ?*_alljoyn_sessionopts_handle,
    transports: u16,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_sessionopts_iscompatible(
    one: ?*_alljoyn_sessionopts_handle,
    other: ?*_alljoyn_sessionopts_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_sessionopts_cmp(
    one: ?*_alljoyn_sessionopts_handle,
    other: ?*_alljoyn_sessionopts_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_create(
    bus: ?*_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_message_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_destroy(
    msg: ?*_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_isbroadcastsignal(
    msg: ?*_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_isglobalbroadcast(
    msg: ?*_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_issessionless(
    msg: ?*_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_getflags(
    msg: ?*_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_isexpired(
    msg: ?*_alljoyn_message_handle,
    tillExpireMS: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_isunreliable(
    msg: ?*_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_isencrypted(
    msg: ?*_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_getauthmechanism(
    msg: ?*_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_gettype(
    msg: ?*_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) alljoyn_messagetype;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_getargs(
    msg: ?*_alljoyn_message_handle,
    numArgs: ?*?*opaque{},
    args: ?*?*_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_getarg(
    msg: ?*_alljoyn_message_handle,
    argN: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_msgarg_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_parseargs(
    msg: ?*_alljoyn_message_handle,
    signature: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_getcallserial(
    msg: ?*_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_getsignature(
    msg: ?*_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_getobjectpath(
    msg: ?*_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_getinterface(
    msg: ?*_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_getmembername(
    msg: ?*_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_getreplyserial(
    msg: ?*_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_getsender(
    msg: ?*_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_getreceiveendpointname(
    msg: ?*_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_getdestination(
    msg: ?*_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_getcompressiontoken(
    msg: ?*_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_getsessionid(
    msg: ?*_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_geterrorname(
    msg: ?*_alljoyn_message_handle,
    errorMessage: ?*i8,
    errorMessage_size: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_tostring(
    msg: ?*_alljoyn_message_handle,
    str: ?*i8,
    buf: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_description(
    msg: ?*_alljoyn_message_handle,
    str: ?*i8,
    buf: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_gettimestamp(
    msg: ?*_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_eql(
    one: ?*_alljoyn_message_handle,
    other: ?*_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_message_setendianess(
    endian: i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_authlistener_requestcredentialsresponse(
    listener: ?*_alljoyn_authlistener_handle,
    authContext: ?*opaque{},
    accept: i32,
    credentials: ?*_alljoyn_credentials_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_authlistener_verifycredentialsresponse(
    listener: ?*_alljoyn_authlistener_handle,
    authContext: ?*opaque{},
    accept: i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_authlistener_create(
    callbacks: ?*alljoyn_authlistener_callbacks,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_authlistener_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_authlistenerasync_create(
    callbacks: ?*alljoyn_authlistenerasync_callbacks,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_authlistener_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_authlistener_destroy(
    listener: ?*_alljoyn_authlistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_authlistenerasync_destroy(
    listener: ?*_alljoyn_authlistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_authlistener_setsharedsecret(
    listener: ?*_alljoyn_authlistener_handle,
    sharedSecret: ?*u8,
    sharedSecretSize: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_credentials_create(
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_credentials_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_credentials_destroy(
    cred: ?*_alljoyn_credentials_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_credentials_isset(
    cred: ?*_alljoyn_credentials_handle,
    creds: u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_credentials_setpassword(
    cred: ?*_alljoyn_credentials_handle,
    pwd: ?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_credentials_setusername(
    cred: ?*_alljoyn_credentials_handle,
    userName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_credentials_setcertchain(
    cred: ?*_alljoyn_credentials_handle,
    certChain: ?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_credentials_setprivatekey(
    cred: ?*_alljoyn_credentials_handle,
    pk: ?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_credentials_setlogonentry(
    cred: ?*_alljoyn_credentials_handle,
    logonEntry: ?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_credentials_setexpiration(
    cred: ?*_alljoyn_credentials_handle,
    expiration: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_credentials_getpassword(
    cred: ?*_alljoyn_credentials_handle,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_credentials_getusername(
    cred: ?*_alljoyn_credentials_handle,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_credentials_getcertchain(
    cred: ?*_alljoyn_credentials_handle,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_credentials_getprivateKey(
    cred: ?*_alljoyn_credentials_handle,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_credentials_getlogonentry(
    cred: ?*_alljoyn_credentials_handle,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_credentials_getexpiration(
    cred: ?*_alljoyn_credentials_handle,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_credentials_clear(
    cred: ?*_alljoyn_credentials_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_buslistener_create(
    callbacks: ?*alljoyn_buslistener_callbacks,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_buslistener_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_buslistener_destroy(
    listener: ?*_alljoyn_buslistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_member_getannotationscount(
    member: alljoyn_interfacedescription_member,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_member_getannotationatindex(
    member: alljoyn_interfacedescription_member,
    index: ?*opaque{},
    name: ?*i8,
    name_size: ?*?*opaque{},
    value: ?*i8,
    value_size: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_member_getannotation(
    member: alljoyn_interfacedescription_member,
    name: ?*i8,
    value: ?*i8,
    value_size: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_member_getargannotationscount(
    member: alljoyn_interfacedescription_member,
    argName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_member_getargannotationatindex(
    member: alljoyn_interfacedescription_member,
    argName: ?*i8,
    index: ?*opaque{},
    name: ?*i8,
    name_size: ?*?*opaque{},
    value: ?*i8,
    value_size: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_member_getargannotation(
    member: alljoyn_interfacedescription_member,
    argName: ?*i8,
    name: ?*i8,
    value: ?*i8,
    value_size: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_property_getannotationscount(
    property: alljoyn_interfacedescription_property,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_property_getannotationatindex(
    property: alljoyn_interfacedescription_property,
    index: ?*opaque{},
    name: ?*i8,
    name_size: ?*?*opaque{},
    value: ?*i8,
    value_size: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_property_getannotation(
    property: alljoyn_interfacedescription_property,
    name: ?*i8,
    value: ?*i8,
    value_size: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_activate(
    iface: ?*_alljoyn_interfacedescription_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_addannotation(
    iface: ?*_alljoyn_interfacedescription_handle,
    name: ?*i8,
    value: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_getannotation(
    iface: ?*_alljoyn_interfacedescription_handle,
    name: ?*i8,
    value: ?*i8,
    value_size: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_getannotationscount(
    iface: ?*_alljoyn_interfacedescription_handle,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_getannotationatindex(
    iface: ?*_alljoyn_interfacedescription_handle,
    index: ?*opaque{},
    name: ?*i8,
    name_size: ?*?*opaque{},
    value: ?*i8,
    value_size: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_getmember(
    iface: ?*_alljoyn_interfacedescription_handle,
    name: ?*i8,
    member: ?*alljoyn_interfacedescription_member,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_addmember(
    iface: ?*_alljoyn_interfacedescription_handle,
    type: alljoyn_messagetype,
    name: ?*i8,
    inputSig: ?*i8,
    outSig: ?*i8,
    argNames: ?*i8,
    annotation: u8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_addmemberannotation(
    iface: ?*_alljoyn_interfacedescription_handle,
    member: ?*i8,
    name: ?*i8,
    value: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_getmemberannotation(
    iface: ?*_alljoyn_interfacedescription_handle,
    member: ?*i8,
    name: ?*i8,
    value: ?*i8,
    value_size: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_getmembers(
    iface: ?*_alljoyn_interfacedescription_handle,
    members: ?*alljoyn_interfacedescription_member,
    numMembers: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_hasmember(
    iface: ?*_alljoyn_interfacedescription_handle,
    name: ?*i8,
    inSig: ?*i8,
    outSig: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_addmethod(
    iface: ?*_alljoyn_interfacedescription_handle,
    name: ?*i8,
    inputSig: ?*i8,
    outSig: ?*i8,
    argNames: ?*i8,
    annotation: u8,
    accessPerms: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_getmethod(
    iface: ?*_alljoyn_interfacedescription_handle,
    name: ?*i8,
    member: ?*alljoyn_interfacedescription_member,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_addsignal(
    iface: ?*_alljoyn_interfacedescription_handle,
    name: ?*i8,
    sig: ?*i8,
    argNames: ?*i8,
    annotation: u8,
    accessPerms: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_getsignal(
    iface: ?*_alljoyn_interfacedescription_handle,
    name: ?*i8,
    member: ?*alljoyn_interfacedescription_member,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_getproperty(
    iface: ?*_alljoyn_interfacedescription_handle,
    name: ?*i8,
    property: ?*alljoyn_interfacedescription_property,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_getproperties(
    iface: ?*_alljoyn_interfacedescription_handle,
    props: ?*alljoyn_interfacedescription_property,
    numProps: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_addproperty(
    iface: ?*_alljoyn_interfacedescription_handle,
    name: ?*i8,
    signature: ?*i8,
    access: u8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_addpropertyannotation(
    iface: ?*_alljoyn_interfacedescription_handle,
    property: ?*i8,
    name: ?*i8,
    value: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_getpropertyannotation(
    iface: ?*_alljoyn_interfacedescription_handle,
    property: ?*i8,
    name: ?*i8,
    value: ?*i8,
    str_size: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_hasproperty(
    iface: ?*_alljoyn_interfacedescription_handle,
    name: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_hasproperties(
    iface: ?*_alljoyn_interfacedescription_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_getname(
    iface: ?*_alljoyn_interfacedescription_handle,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_introspect(
    iface: ?*_alljoyn_interfacedescription_handle,
    str: ?*i8,
    buf: ?*opaque{},
    indent: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_issecure(
    iface: ?*_alljoyn_interfacedescription_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_getsecuritypolicy(
    iface: ?*_alljoyn_interfacedescription_handle,
) callconv(@import("std").os.windows.WINAPI) alljoyn_interfacedescription_securitypolicy;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_setdescriptionlanguage(
    iface: ?*_alljoyn_interfacedescription_handle,
    language: ?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_getdescriptionlanguages(
    iface: ?*_alljoyn_interfacedescription_handle,
    languages: ?*?*i8,
    size: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_getdescriptionlanguages2(
    iface: ?*_alljoyn_interfacedescription_handle,
    languages: ?*i8,
    languagesSize: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_setdescription(
    iface: ?*_alljoyn_interfacedescription_handle,
    description: ?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_setdescriptionforlanguage(
    iface: ?*_alljoyn_interfacedescription_handle,
    description: ?*i8,
    languageTag: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_getdescriptionforlanguage(
    iface: ?*_alljoyn_interfacedescription_handle,
    description: ?*i8,
    maxLanguageLength: ?*opaque{},
    languageTag: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_setmemberdescription(
    iface: ?*_alljoyn_interfacedescription_handle,
    member: ?*i8,
    description: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_setmemberdescriptionforlanguage(
    iface: ?*_alljoyn_interfacedescription_handle,
    member: ?*i8,
    description: ?*i8,
    languageTag: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_getmemberdescriptionforlanguage(
    iface: ?*_alljoyn_interfacedescription_handle,
    member: ?*i8,
    description: ?*i8,
    maxLanguageLength: ?*opaque{},
    languageTag: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_setargdescription(
    iface: ?*_alljoyn_interfacedescription_handle,
    member: ?*i8,
    argName: ?*i8,
    description: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_setargdescriptionforlanguage(
    iface: ?*_alljoyn_interfacedescription_handle,
    member: ?*i8,
    arg: ?*i8,
    description: ?*i8,
    languageTag: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_getargdescriptionforlanguage(
    iface: ?*_alljoyn_interfacedescription_handle,
    member: ?*i8,
    arg: ?*i8,
    description: ?*i8,
    maxLanguageLength: ?*opaque{},
    languageTag: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_setpropertydescription(
    iface: ?*_alljoyn_interfacedescription_handle,
    name: ?*i8,
    description: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_setpropertydescriptionforlanguage(
    iface: ?*_alljoyn_interfacedescription_handle,
    name: ?*i8,
    description: ?*i8,
    languageTag: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_getpropertydescriptionforlanguage(
    iface: ?*_alljoyn_interfacedescription_handle,
    property: ?*i8,
    description: ?*i8,
    maxLanguageLength: ?*opaque{},
    languageTag: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_setdescriptiontranslationcallback(
    iface: ?*_alljoyn_interfacedescription_handle,
    translationCallback: alljoyn_interfacedescription_translation_callback_ptr,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_getdescriptiontranslationcallback(
    iface: ?*_alljoyn_interfacedescription_handle,
) callconv(@import("std").os.windows.WINAPI) alljoyn_interfacedescription_translation_callback_ptr;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_hasdescription(
    iface: ?*_alljoyn_interfacedescription_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_addargannotation(
    iface: ?*_alljoyn_interfacedescription_handle,
    member: ?*i8,
    argName: ?*i8,
    name: ?*i8,
    value: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_getmemberargannotation(
    iface: ?*_alljoyn_interfacedescription_handle,
    member: ?*i8,
    argName: ?*i8,
    name: ?*i8,
    value: ?*i8,
    value_size: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_eql(
    one: ?*_alljoyn_interfacedescription_handle,
    other: ?*_alljoyn_interfacedescription_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_member_eql(
    one: alljoyn_interfacedescription_member,
    other: alljoyn_interfacedescription_member,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_interfacedescription_property_eql(
    one: alljoyn_interfacedescription_property,
    other: alljoyn_interfacedescription_property,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busobject_create(
    path: ?*i8,
    isPlaceholder: i32,
    callbacks_in: ?*alljoyn_busobject_callbacks,
    context_in: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_busobject_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busobject_destroy(
    bus: ?*_alljoyn_busobject_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busobject_getpath(
    bus: ?*_alljoyn_busobject_handle,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busobject_emitpropertychanged(
    bus: ?*_alljoyn_busobject_handle,
    ifcName: ?*i8,
    propName: ?*i8,
    val: ?*_alljoyn_msgarg_handle,
    id: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busobject_emitpropertieschanged(
    bus: ?*_alljoyn_busobject_handle,
    ifcName: ?*i8,
    propNames: ?*?*i8,
    numProps: ?*opaque{},
    id: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busobject_getname(
    bus: ?*_alljoyn_busobject_handle,
    buffer: ?*i8,
    bufferSz: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busobject_addinterface(
    bus: ?*_alljoyn_busobject_handle,
    iface: ?*_alljoyn_interfacedescription_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busobject_addmethodhandler(
    bus: ?*_alljoyn_busobject_handle,
    member: alljoyn_interfacedescription_member,
    handler: alljoyn_messagereceiver_methodhandler_ptr,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busobject_addmethodhandlers(
    bus: ?*_alljoyn_busobject_handle,
    entries: ?*alljoyn_busobject_methodentry,
    numEntries: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busobject_methodreply_args(
    bus: ?*_alljoyn_busobject_handle,
    msg: ?*_alljoyn_message_handle,
    args: ?*_alljoyn_msgarg_handle,
    numArgs: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busobject_methodreply_err(
    bus: ?*_alljoyn_busobject_handle,
    msg: ?*_alljoyn_message_handle,
    @"error": ?*i8,
    errorMessage: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busobject_methodreply_status(
    bus: ?*_alljoyn_busobject_handle,
    msg: ?*_alljoyn_message_handle,
    status: QStatus,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busobject_getbusattachment(
    bus: ?*_alljoyn_busobject_handle,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_busattachment_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busobject_signal(
    bus: ?*_alljoyn_busobject_handle,
    destination: ?*i8,
    sessionId: u32,
    signal: alljoyn_interfacedescription_member,
    args: ?*_alljoyn_msgarg_handle,
    numArgs: ?*opaque{},
    timeToLive: u16,
    flags: u8,
    msg: ?*_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busobject_cancelsessionlessmessage_serial(
    bus: ?*_alljoyn_busobject_handle,
    serialNumber: u32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busobject_cancelsessionlessmessage(
    bus: ?*_alljoyn_busobject_handle,
    msg: ?*_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busobject_issecure(
    bus: ?*_alljoyn_busobject_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busobject_getannouncedinterfacenames(
    bus: ?*_alljoyn_busobject_handle,
    interfaces: ?*?*i8,
    numInterfaces: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busobject_setannounceflag(
    bus: ?*_alljoyn_busobject_handle,
    iface: ?*_alljoyn_interfacedescription_handle,
    isAnnounced: alljoyn_about_announceflag,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busobject_addinterface_announced(
    bus: ?*_alljoyn_busobject_handle,
    iface: ?*_alljoyn_interfacedescription_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_create(
    bus: ?*_alljoyn_busattachment_handle,
    service: ?*i8,
    path: ?*i8,
    sessionId: u32,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_proxybusobject_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_create_secure(
    bus: ?*_alljoyn_busattachment_handle,
    service: ?*i8,
    path: ?*i8,
    sessionId: u32,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_proxybusobject_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_destroy(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_addinterface(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
    iface: ?*_alljoyn_interfacedescription_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_addinterface_by_name(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
    name: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_getchildren(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
    children: ?*?*_alljoyn_proxybusobject_handle,
    numChildren: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_getchild(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
    path: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_proxybusobject_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_addchild(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
    child: ?*_alljoyn_proxybusobject_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_removechild(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
    path: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_introspectremoteobject(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_introspectremoteobjectasync(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
    callback: alljoyn_proxybusobject_listener_introspectcb_ptr,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_getproperty(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
    iface: ?*i8,
    property: ?*i8,
    value: ?*_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_getpropertyasync(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
    iface: ?*i8,
    property: ?*i8,
    callback: alljoyn_proxybusobject_listener_getpropertycb_ptr,
    timeout: u32,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_getallproperties(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
    iface: ?*i8,
    values: ?*_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_getallpropertiesasync(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
    iface: ?*i8,
    callback: alljoyn_proxybusobject_listener_getallpropertiescb_ptr,
    timeout: u32,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_setproperty(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
    iface: ?*i8,
    property: ?*i8,
    value: ?*_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_registerpropertieschangedlistener(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
    iface: ?*i8,
    properties: ?*?*i8,
    numProperties: ?*opaque{},
    callback: alljoyn_proxybusobject_listener_propertieschanged_ptr,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_unregisterpropertieschangedlistener(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
    iface: ?*i8,
    callback: alljoyn_proxybusobject_listener_propertieschanged_ptr,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_setpropertyasync(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
    iface: ?*i8,
    property: ?*i8,
    value: ?*_alljoyn_msgarg_handle,
    callback: alljoyn_proxybusobject_listener_setpropertycb_ptr,
    timeout: u32,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_methodcall(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
    ifaceName: ?*i8,
    methodName: ?*i8,
    args: ?*_alljoyn_msgarg_handle,
    numArgs: ?*opaque{},
    replyMsg: ?*_alljoyn_message_handle,
    timeout: u32,
    flags: u8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_methodcall_member(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
    method: alljoyn_interfacedescription_member,
    args: ?*_alljoyn_msgarg_handle,
    numArgs: ?*opaque{},
    replyMsg: ?*_alljoyn_message_handle,
    timeout: u32,
    flags: u8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_methodcall_noreply(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
    ifaceName: ?*i8,
    methodName: ?*i8,
    args: ?*_alljoyn_msgarg_handle,
    numArgs: ?*opaque{},
    flags: u8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_methodcall_member_noreply(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
    method: alljoyn_interfacedescription_member,
    args: ?*_alljoyn_msgarg_handle,
    numArgs: ?*opaque{},
    flags: u8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_methodcallasync(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
    ifaceName: ?*i8,
    methodName: ?*i8,
    replyFunc: alljoyn_messagereceiver_replyhandler_ptr,
    args: ?*_alljoyn_msgarg_handle,
    numArgs: ?*opaque{},
    context: ?*opaque{},
    timeout: u32,
    flags: u8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_methodcallasync_member(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
    method: alljoyn_interfacedescription_member,
    replyFunc: alljoyn_messagereceiver_replyhandler_ptr,
    args: ?*_alljoyn_msgarg_handle,
    numArgs: ?*opaque{},
    context: ?*opaque{},
    timeout: u32,
    flags: u8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_parsexml(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
    xml: ?*i8,
    identifier: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_secureconnection(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
    forceAuth: i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_secureconnectionasync(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
    forceAuth: i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_getinterface(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
    iface: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_interfacedescription_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_getinterfaces(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
    ifaces: ?*?*_alljoyn_interfacedescription_handle,
    numIfaces: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_getpath(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_getservicename(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_getuniquename(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_getsessionid(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_implementsinterface(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
    iface: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_copy(
    source: ?*_alljoyn_proxybusobject_handle,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_proxybusobject_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_isvalid(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_issecure(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_enablepropertycaching(
    proxyObj: ?*_alljoyn_proxybusobject_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurationlistener_create(
    callbacks: ?*alljoyn_permissionconfigurationlistener_callbacks,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_permissionconfigurationlistener_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_permissionconfigurationlistener_destroy(
    listener: ?*_alljoyn_permissionconfigurationlistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_sessionlistener_create(
    callbacks: ?*alljoyn_sessionlistener_callbacks,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_sessionlistener_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_sessionlistener_destroy(
    listener: ?*_alljoyn_sessionlistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_sessionportlistener_create(
    callbacks: ?*alljoyn_sessionportlistener_callbacks,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_sessionportlistener_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_sessionportlistener_destroy(
    listener: ?*_alljoyn_sessionportlistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutlistener_create(
    callback: ?*alljoyn_aboutlistener_callback,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_aboutlistener_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutlistener_destroy(
    listener: ?*_alljoyn_aboutlistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_create(
    applicationName: ?*i8,
    allowRemoteMessages: i32,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_busattachment_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_create_concurrency(
    applicationName: ?*i8,
    allowRemoteMessages: i32,
    concurrency: u32,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_busattachment_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_destroy(
    bus: ?*_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_start(
    bus: ?*_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_stop(
    bus: ?*_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_join(
    bus: ?*_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_getconcurrency(
    bus: ?*_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_getconnectspec(
    bus: ?*_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_enableconcurrentcallbacks(
    bus: ?*_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_createinterface(
    bus: ?*_alljoyn_busattachment_handle,
    name: ?*i8,
    iface: ?*?*_alljoyn_interfacedescription_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_createinterface_secure(
    bus: ?*_alljoyn_busattachment_handle,
    name: ?*i8,
    iface: ?*?*_alljoyn_interfacedescription_handle,
    secPolicy: alljoyn_interfacedescription_securitypolicy,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_connect(
    bus: ?*_alljoyn_busattachment_handle,
    connectSpec: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_registerbuslistener(
    bus: ?*_alljoyn_busattachment_handle,
    listener: ?*_alljoyn_buslistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_unregisterbuslistener(
    bus: ?*_alljoyn_busattachment_handle,
    listener: ?*_alljoyn_buslistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_findadvertisedname(
    bus: ?*_alljoyn_busattachment_handle,
    namePrefix: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_findadvertisednamebytransport(
    bus: ?*_alljoyn_busattachment_handle,
    namePrefix: ?*i8,
    transports: u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_cancelfindadvertisedname(
    bus: ?*_alljoyn_busattachment_handle,
    namePrefix: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_cancelfindadvertisednamebytransport(
    bus: ?*_alljoyn_busattachment_handle,
    namePrefix: ?*i8,
    transports: u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_advertisename(
    bus: ?*_alljoyn_busattachment_handle,
    name: ?*i8,
    transports: u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_canceladvertisename(
    bus: ?*_alljoyn_busattachment_handle,
    name: ?*i8,
    transports: u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_getinterface(
    bus: ?*_alljoyn_busattachment_handle,
    name: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_interfacedescription_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_joinsession(
    bus: ?*_alljoyn_busattachment_handle,
    sessionHost: ?*i8,
    sessionPort: u16,
    listener: ?*_alljoyn_sessionlistener_handle,
    sessionId: ?*u32,
    opts: ?*_alljoyn_sessionopts_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_joinsessionasync(
    bus: ?*_alljoyn_busattachment_handle,
    sessionHost: ?*i8,
    sessionPort: u16,
    listener: ?*_alljoyn_sessionlistener_handle,
    opts: ?*_alljoyn_sessionopts_handle,
    callback: alljoyn_busattachment_joinsessioncb_ptr,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_registerbusobject(
    bus: ?*_alljoyn_busattachment_handle,
    obj: ?*_alljoyn_busobject_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_registerbusobject_secure(
    bus: ?*_alljoyn_busattachment_handle,
    obj: ?*_alljoyn_busobject_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_unregisterbusobject(
    bus: ?*_alljoyn_busattachment_handle,
    object: ?*_alljoyn_busobject_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_requestname(
    bus: ?*_alljoyn_busattachment_handle,
    requestedName: ?*i8,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_releasename(
    bus: ?*_alljoyn_busattachment_handle,
    name: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_bindsessionport(
    bus: ?*_alljoyn_busattachment_handle,
    sessionPort: ?*u16,
    opts: ?*_alljoyn_sessionopts_handle,
    listener: ?*_alljoyn_sessionportlistener_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_unbindsessionport(
    bus: ?*_alljoyn_busattachment_handle,
    sessionPort: u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_enablepeersecurity(
    bus: ?*_alljoyn_busattachment_handle,
    authMechanisms: ?*i8,
    listener: ?*_alljoyn_authlistener_handle,
    keyStoreFileName: ?*i8,
    isShared: i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_enablepeersecuritywithpermissionconfigurationlistener(
    bus: ?*_alljoyn_busattachment_handle,
    authMechanisms: ?*i8,
    authListener: ?*_alljoyn_authlistener_handle,
    keyStoreFileName: ?*i8,
    isShared: i32,
    permissionConfigurationListener: ?*_alljoyn_permissionconfigurationlistener_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_ispeersecurityenabled(
    bus: ?*_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_createinterfacesfromxml(
    bus: ?*_alljoyn_busattachment_handle,
    xml: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_getinterfaces(
    bus: ?*_alljoyn_busattachment_handle,
    ifaces: ?*?*_alljoyn_interfacedescription_handle,
    numIfaces: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_deleteinterface(
    bus: ?*_alljoyn_busattachment_handle,
    iface: ?*_alljoyn_interfacedescription_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_isstarted(
    bus: ?*_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_isstopping(
    bus: ?*_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_isconnected(
    bus: ?*_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_disconnect(
    bus: ?*_alljoyn_busattachment_handle,
    unused: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_getdbusproxyobj(
    bus: ?*_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_proxybusobject_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_getalljoynproxyobj(
    bus: ?*_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_proxybusobject_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_getalljoyndebugobj(
    bus: ?*_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_proxybusobject_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_getuniquename(
    bus: ?*_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_getglobalguidstring(
    bus: ?*_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_registersignalhandler(
    bus: ?*_alljoyn_busattachment_handle,
    signal_handler: alljoyn_messagereceiver_signalhandler_ptr,
    member: alljoyn_interfacedescription_member,
    srcPath: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_registersignalhandlerwithrule(
    bus: ?*_alljoyn_busattachment_handle,
    signal_handler: alljoyn_messagereceiver_signalhandler_ptr,
    member: alljoyn_interfacedescription_member,
    matchRule: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_unregistersignalhandler(
    bus: ?*_alljoyn_busattachment_handle,
    signal_handler: alljoyn_messagereceiver_signalhandler_ptr,
    member: alljoyn_interfacedescription_member,
    srcPath: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_unregistersignalhandlerwithrule(
    bus: ?*_alljoyn_busattachment_handle,
    signal_handler: alljoyn_messagereceiver_signalhandler_ptr,
    member: alljoyn_interfacedescription_member,
    matchRule: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_unregisterallhandlers(
    bus: ?*_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_registerkeystorelistener(
    bus: ?*_alljoyn_busattachment_handle,
    listener: ?*_alljoyn_keystorelistener_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_reloadkeystore(
    bus: ?*_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_clearkeystore(
    bus: ?*_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_clearkeys(
    bus: ?*_alljoyn_busattachment_handle,
    guid: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_setkeyexpiration(
    bus: ?*_alljoyn_busattachment_handle,
    guid: ?*i8,
    timeout: u32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_getkeyexpiration(
    bus: ?*_alljoyn_busattachment_handle,
    guid: ?*i8,
    timeout: ?*u32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_addlogonentry(
    bus: ?*_alljoyn_busattachment_handle,
    authMechanism: ?*i8,
    userName: ?*i8,
    password: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_addmatch(
    bus: ?*_alljoyn_busattachment_handle,
    rule: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_removematch(
    bus: ?*_alljoyn_busattachment_handle,
    rule: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_setsessionlistener(
    bus: ?*_alljoyn_busattachment_handle,
    sessionId: u32,
    listener: ?*_alljoyn_sessionlistener_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_leavesession(
    bus: ?*_alljoyn_busattachment_handle,
    sessionId: u32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_secureconnection(
    bus: ?*_alljoyn_busattachment_handle,
    name: ?*i8,
    forceAuth: i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_secureconnectionasync(
    bus: ?*_alljoyn_busattachment_handle,
    name: ?*i8,
    forceAuth: i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_removesessionmember(
    bus: ?*_alljoyn_busattachment_handle,
    sessionId: u32,
    memberName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_setlinktimeout(
    bus: ?*_alljoyn_busattachment_handle,
    sessionid: u32,
    linkTimeout: ?*u32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_setlinktimeoutasync(
    bus: ?*_alljoyn_busattachment_handle,
    sessionid: u32,
    linkTimeout: u32,
    callback: alljoyn_busattachment_setlinktimeoutcb_ptr,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_namehasowner(
    bus: ?*_alljoyn_busattachment_handle,
    name: ?*i8,
    hasOwner: ?*i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_getpeerguid(
    bus: ?*_alljoyn_busattachment_handle,
    name: ?*i8,
    guid: ?*i8,
    guidSz: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_setdaemondebug(
    bus: ?*_alljoyn_busattachment_handle,
    module: ?*i8,
    level: u32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_gettimestamp(
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_ping(
    bus: ?*_alljoyn_busattachment_handle,
    name: ?*i8,
    timeout: u32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_registeraboutlistener(
    bus: ?*_alljoyn_busattachment_handle,
    aboutListener: ?*_alljoyn_aboutlistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_unregisteraboutlistener(
    bus: ?*_alljoyn_busattachment_handle,
    aboutListener: ?*_alljoyn_aboutlistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_unregisterallaboutlisteners(
    bus: ?*_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_whoimplements_interfaces(
    bus: ?*_alljoyn_busattachment_handle,
    implementsInterfaces: ?*?*i8,
    numberInterfaces: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_whoimplements_interface(
    bus: ?*_alljoyn_busattachment_handle,
    implementsInterface: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_cancelwhoimplements_interfaces(
    bus: ?*_alljoyn_busattachment_handle,
    implementsInterfaces: ?*?*i8,
    numberInterfaces: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_cancelwhoimplements_interface(
    bus: ?*_alljoyn_busattachment_handle,
    implementsInterface: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_getpermissionconfigurator(
    bus: ?*_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_permissionconfigurator_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_registerapplicationstatelistener(
    bus: ?*_alljoyn_busattachment_handle,
    listener: ?*_alljoyn_applicationstatelistener_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_unregisterapplicationstatelistener(
    bus: ?*_alljoyn_busattachment_handle,
    listener: ?*_alljoyn_applicationstatelistener_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_busattachment_deletedefaultkeystore(
    applicationName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutobj_create(
    bus: ?*_alljoyn_busattachment_handle,
    isAnnounced: alljoyn_about_announceflag,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_aboutobj_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutobj_destroy(
    obj: ?*_alljoyn_aboutobj_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutobj_announce(
    obj: ?*_alljoyn_aboutobj_handle,
    sessionPort: u16,
    aboutData: ?*_alljoyn_aboutdata_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutobj_announce_using_datalistener(
    obj: ?*_alljoyn_aboutobj_handle,
    sessionPort: u16,
    aboutListener: ?*_alljoyn_aboutdatalistener_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutobj_unannounce(
    obj: ?*_alljoyn_aboutobj_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutobjectdescription_create(
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_aboutobjectdescription_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutobjectdescription_create_full(
    arg: ?*_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_aboutobjectdescription_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutobjectdescription_createfrommsgarg(
    description: ?*_alljoyn_aboutobjectdescription_handle,
    arg: ?*_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutobjectdescription_destroy(
    description: ?*_alljoyn_aboutobjectdescription_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutobjectdescription_getpaths(
    description: ?*_alljoyn_aboutobjectdescription_handle,
    paths: ?*?*i8,
    numPaths: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutobjectdescription_getinterfaces(
    description: ?*_alljoyn_aboutobjectdescription_handle,
    path: ?*i8,
    interfaces: ?*?*i8,
    numInterfaces: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutobjectdescription_getinterfacepaths(
    description: ?*_alljoyn_aboutobjectdescription_handle,
    interfaceName: ?*i8,
    paths: ?*?*i8,
    numPaths: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutobjectdescription_clear(
    description: ?*_alljoyn_aboutobjectdescription_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutobjectdescription_haspath(
    description: ?*_alljoyn_aboutobjectdescription_handle,
    path: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutobjectdescription_hasinterface(
    description: ?*_alljoyn_aboutobjectdescription_handle,
    interfaceName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutobjectdescription_hasinterfaceatpath(
    description: ?*_alljoyn_aboutobjectdescription_handle,
    path: ?*i8,
    interfaceName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutobjectdescription_getmsgarg(
    description: ?*_alljoyn_aboutobjectdescription_handle,
    msgArg: ?*_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutproxy_create(
    bus: ?*_alljoyn_busattachment_handle,
    busName: ?*i8,
    sessionId: u32,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_aboutproxy_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutproxy_destroy(
    proxy: ?*_alljoyn_aboutproxy_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutproxy_getobjectdescription(
    proxy: ?*_alljoyn_aboutproxy_handle,
    objectDesc: ?*_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutproxy_getaboutdata(
    proxy: ?*_alljoyn_aboutproxy_handle,
    language: ?*i8,
    data: ?*_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_aboutproxy_getversion(
    proxy: ?*_alljoyn_aboutproxy_handle,
    version: ?*u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_pinglistener_create(
    callback: ?*alljoyn_pinglistener_callback,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_pinglistener_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_pinglistener_destroy(
    listener: ?*_alljoyn_pinglistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_autopinger_create(
    bus: ?*_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_autopinger_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_autopinger_destroy(
    autopinger: ?*_alljoyn_autopinger_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_autopinger_pause(
    autopinger: ?*_alljoyn_autopinger_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_autopinger_resume(
    autopinger: ?*_alljoyn_autopinger_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_autopinger_addpinggroup(
    autopinger: ?*_alljoyn_autopinger_handle,
    group: ?*i8,
    listener: ?*_alljoyn_pinglistener_handle,
    pinginterval: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_autopinger_removepinggroup(
    autopinger: ?*_alljoyn_autopinger_handle,
    group: ?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_autopinger_setpinginterval(
    autopinger: ?*_alljoyn_autopinger_handle,
    group: ?*i8,
    pinginterval: u32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_autopinger_adddestination(
    autopinger: ?*_alljoyn_autopinger_handle,
    group: ?*i8,
    destination: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_autopinger_removedestination(
    autopinger: ?*_alljoyn_autopinger_handle,
    group: ?*i8,
    destination: ?*i8,
    removeall: i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_getversion(
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_getbuildinfo(
) callconv(@import("std").os.windows.WINAPI) ?*i8;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_getnumericversion(
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_init(
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_shutdown(
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_routerinit(
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_routerinitwithconfig(
    configXml: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_routershutdown(
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_ref_create(
    proxy: ?*_alljoyn_proxybusobject_handle,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_proxybusobject_ref_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_ref_get(
    ref: ?*_alljoyn_proxybusobject_ref_handle,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_proxybusobject_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_ref_incref(
    ref: ?*_alljoyn_proxybusobject_ref_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_proxybusobject_ref_decref(
    ref: ?*_alljoyn_proxybusobject_ref_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_observerlistener_create(
    callback: ?*alljoyn_observerlistener_callback,
    context: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_observerlistener_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_observerlistener_destroy(
    listener: ?*_alljoyn_observerlistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_observer_create(
    bus: ?*_alljoyn_busattachment_handle,
    mandatoryInterfaces: ?*?*i8,
    numMandatoryInterfaces: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_observer_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_observer_destroy(
    observer: ?*_alljoyn_observer_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_observer_registerlistener(
    observer: ?*_alljoyn_observer_handle,
    listener: ?*_alljoyn_observerlistener_handle,
    triggerOnExisting: i32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_observer_unregisterlistener(
    observer: ?*_alljoyn_observer_handle,
    listener: ?*_alljoyn_observerlistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_observer_unregisteralllisteners(
    observer: ?*_alljoyn_observer_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_observer_get(
    observer: ?*_alljoyn_observer_handle,
    uniqueBusName: ?*i8,
    objectPath: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_proxybusobject_ref_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_observer_getfirst(
    observer: ?*_alljoyn_observer_handle,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_proxybusobject_ref_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_observer_getnext(
    observer: ?*_alljoyn_observer_handle,
    proxyref: ?*_alljoyn_proxybusobject_ref_handle,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_proxybusobject_ref_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_getpermissionmanagementsessionport(
) callconv(@import("std").os.windows.WINAPI) u16;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_create(
    bus: ?*_alljoyn_busattachment_handle,
    appBusName: ?*i8,
    sessionId: u32,
) callconv(@import("std").os.windows.WINAPI) ?*_alljoyn_securityapplicationproxy_handle;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_destroy(
    proxy: ?*_alljoyn_securityapplicationproxy_handle,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_claim(
    proxy: ?*_alljoyn_securityapplicationproxy_handle,
    caKey: ?*i8,
    identityCertificateChain: ?*i8,
    groupId: ?*u8,
    groupSize: ?*opaque{},
    groupAuthority: ?*i8,
    manifestsXmls: ?*?*i8,
    manifestsCount: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_getmanifesttemplate(
    proxy: ?*_alljoyn_securityapplicationproxy_handle,
    manifestTemplateXml: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_manifesttemplate_destroy(
    manifestTemplateXml: ?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_getapplicationstate(
    proxy: ?*_alljoyn_securityapplicationproxy_handle,
    applicationState: ?*alljoyn_applicationstate,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_getclaimcapabilities(
    proxy: ?*_alljoyn_securityapplicationproxy_handle,
    capabilities: ?*u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_getclaimcapabilitiesadditionalinfo(
    proxy: ?*_alljoyn_securityapplicationproxy_handle,
    additionalInfo: ?*u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_getpolicy(
    proxy: ?*_alljoyn_securityapplicationproxy_handle,
    policyXml: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_getdefaultpolicy(
    proxy: ?*_alljoyn_securityapplicationproxy_handle,
    policyXml: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_policy_destroy(
    policyXml: ?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_updatepolicy(
    proxy: ?*_alljoyn_securityapplicationproxy_handle,
    policyXml: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_updateidentity(
    proxy: ?*_alljoyn_securityapplicationproxy_handle,
    identityCertificateChain: ?*i8,
    manifestsXmls: ?*?*i8,
    manifestsCount: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_installmembership(
    proxy: ?*_alljoyn_securityapplicationproxy_handle,
    membershipCertificateChain: ?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_reset(
    proxy: ?*_alljoyn_securityapplicationproxy_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_resetpolicy(
    proxy: ?*_alljoyn_securityapplicationproxy_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_startmanagement(
    proxy: ?*_alljoyn_securityapplicationproxy_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_endmanagement(
    proxy: ?*_alljoyn_securityapplicationproxy_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_geteccpublickey(
    proxy: ?*_alljoyn_securityapplicationproxy_handle,
    eccPublicKey: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_eccpublickey_destroy(
    eccPublicKey: ?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_signmanifest(
    unsignedManifestXml: ?*i8,
    identityCertificatePem: ?*i8,
    signingPrivateKeyPem: ?*i8,
    signedManifestXml: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_manifest_destroy(
    signedManifestXml: ?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_computemanifestdigest(
    unsignedManifestXml: ?*i8,
    identityCertificatePem: ?*i8,
    digest: ?*?*u8,
    digestSize: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) QStatus;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_digest_destroy(
    digest: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_setmanifestsignature(
    unsignedManifestXml: ?*i8,
    identityCertificatePem: ?*i8,
    signature: ?*u8,
    signatureSize: ?*opaque{},
    signedManifestXml: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const HANDLE = @import("systemservices.zig").HANDLE;
const BOOL = @import("systemservices.zig").BOOL;
const SECURITY_ATTRIBUTES = @import("systemservices.zig").SECURITY_ATTRIBUTES;

test "" {
    const constant_export_count = 20;
    const type_export_count = 107;
    const func_count = 532;
    const unicode_alias_count = 0;
    const type_import_count = 3;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
