//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//
pub const MSRDC_VERSION : u32 = 65536;
pub const MSRDC_MINIMUM_COMPATIBLE_APP_VERSION : u32 = 65536;
pub const MSRDC_MINIMUM_DEPTH : u32 = 1;
pub const MSRDC_MAXIMUM_DEPTH : u32 = 8;
pub const MSRDC_MINIMUM_COMPAREBUFFER : u32 = 100000;
pub const MSRDC_MAXIMUM_COMPAREBUFFER : u32 = 1073741824;
pub const MSRDC_DEFAULT_COMPAREBUFFER : u32 = 3200000;
pub const MSRDC_MINIMUM_INPUTBUFFERSIZE : u32 = 1024;
pub const MSRDC_MINIMUM_HORIZONSIZE : u32 = 128;
pub const MSRDC_MAXIMUM_HORIZONSIZE : u32 = 16384;
pub const MSRDC_MINIMUM_HASHWINDOWSIZE : u32 = 2;
pub const MSRDC_MAXIMUM_HASHWINDOWSIZE : u32 = 96;
pub const MSRDC_DEFAULT_HASHWINDOWSIZE_1 : u32 = 48;
pub const MSRDC_DEFAULT_HORIZONSIZE_1 : u32 = 1024;
pub const MSRDC_DEFAULT_HASHWINDOWSIZE_N : u32 = 2;
pub const MSRDC_DEFAULT_HORIZONSIZE_N : u32 = 128;
pub const MSRDC_MAXIMUM_TRAITVALUE : u32 = 63;
pub const MSRDC_MINIMUM_MATCHESREQUIRED : u32 = 1;
pub const MSRDC_MAXIMUM_MATCHESREQUIRED : u32 = 16;

//
// types
//
// --------------------------------------------------------
// Type: RdcLibrary
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const RdcLibrary = opaque {
};
// --------------------------------------------------------
// Type: RdcGeneratorParameters
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const RdcGeneratorParameters = opaque {
};
// --------------------------------------------------------
// Type: RdcGeneratorFilterMaxParameters
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const RdcGeneratorFilterMaxParameters = opaque {
};
// --------------------------------------------------------
// Type: RdcGenerator
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const RdcGenerator = opaque {
};
// --------------------------------------------------------
// Type: RdcFileReader
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const RdcFileReader = opaque {
};
// --------------------------------------------------------
// Type: RdcSignatureReader
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const RdcSignatureReader = opaque {
};
// --------------------------------------------------------
// Type: RdcComparator
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const RdcComparator = opaque {
};
// --------------------------------------------------------
// Type: SimilarityReportProgress
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SimilarityReportProgress = opaque {
};
// --------------------------------------------------------
// Type: SimilarityTableDumpState
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SimilarityTableDumpState = opaque {
};
// --------------------------------------------------------
// Type: SimilarityTraitsTable
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SimilarityTraitsTable = opaque {
};
// --------------------------------------------------------
// Type: SimilarityFileIdTable
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SimilarityFileIdTable = opaque {
};
// --------------------------------------------------------
// Type: Similarity
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const Similarity = opaque {
};
// --------------------------------------------------------
// Type: RdcSimilarityGenerator
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const RdcSimilarityGenerator = opaque {
};
// --------------------------------------------------------
// Type: FindSimilarResults
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const FindSimilarResults = opaque {
};
// --------------------------------------------------------
// Type: SimilarityTraitsMapping
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SimilarityTraitsMapping = opaque {
};
// --------------------------------------------------------
// Type: SimilarityTraitsMappedView
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const SimilarityTraitsMappedView = opaque {
};
// --------------------------------------------------------
// Type: RDC_ErrorCode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RDC_ErrorCode = *opaque{
};
// --------------------------------------------------------
// Type: GeneratorParametersType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const GeneratorParametersType = *opaque{
};
// --------------------------------------------------------
// Type: RdcNeedType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RdcNeedType = *opaque{
};
// --------------------------------------------------------
// Type: RdcNeed
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RdcNeed = extern struct {
    m_BlockType: RdcNeedType,
    m_FileOffset: u64,
    m_BlockLength: u64,
};
// --------------------------------------------------------
// Type: RdcBufferPointer
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RdcBufferPointer = extern struct {
    m_Size: u32,
    m_Used: u32,
    m_Data: ?*u8,
};
// --------------------------------------------------------
// Type: RdcNeedPointer
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RdcNeedPointer = extern struct {
    m_Size: u32,
    m_Used: u32,
    m_Data: ?*RdcNeed,
};
// --------------------------------------------------------
// Type: RdcSignature
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RdcSignature = extern struct {
    m_Signature: ?[*]u8,
    m_BlockLength: u16,
};
// --------------------------------------------------------
// Type: RdcSignaturePointer
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RdcSignaturePointer = extern struct {
    m_Size: u32,
    m_Used: u32,
    m_Data: ?*RdcSignature,
};
// --------------------------------------------------------
// Type: RdcCreatedTables
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RdcCreatedTables = *opaque{
};
// --------------------------------------------------------
// Type: RdcMappingAccessMode
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RdcMappingAccessMode = *opaque{
};
// --------------------------------------------------------
// Type: SimilarityMappedViewInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SimilarityMappedViewInfo = extern struct {
    m_Data: ?*u8,
    m_Length: u32,
};
// --------------------------------------------------------
// Type: SimilarityData
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SimilarityData = extern struct {
    m_Data: ?[*]u8,
};
// --------------------------------------------------------
// Type: FindSimilarFileIndexResults
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FindSimilarFileIndexResults = extern struct {
    m_FileIndex: u32,
    m_MatchCount: u32,
};
// --------------------------------------------------------
// Type: SimilarityDumpData
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SimilarityDumpData = extern struct {
    m_FileIndex: u32,
    m_Data: SimilarityData,
};
// --------------------------------------------------------
// Type: SimilarityFileId
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SimilarityFileId = extern struct {
    m_FileId: ?[*]u8,
};
// --------------------------------------------------------
// Type: IRdcGeneratorParameters
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRdcGeneratorParameters = *opaque{
    // TODO: Method 'GetGeneratorParametersType'
    // TODO: Method 'GetParametersVersion'
    // TODO: Method 'GetSerializeSize'
    // TODO: Method 'Serialize'
};
// --------------------------------------------------------
// Type: IRdcGeneratorFilterMaxParameters
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRdcGeneratorFilterMaxParameters = *opaque{
    // TODO: Method 'GetHorizonSize'
    // TODO: Method 'SetHorizonSize'
    // TODO: Method 'GetHashWindowSize'
    // TODO: Method 'SetHashWindowSize'
};
// --------------------------------------------------------
// Type: IRdcGenerator
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRdcGenerator = *opaque{
    // TODO: Method 'GetGeneratorParameters'
    // TODO: Method 'Process'
};
// --------------------------------------------------------
// Type: IRdcFileReader
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRdcFileReader = *opaque{
    // TODO: Method 'GetFileSize'
    // TODO: Method 'Read'
    // TODO: Method 'GetFilePosition'
};
// --------------------------------------------------------
// Type: IRdcFileWriter
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRdcFileWriter = *opaque{
    // TODO: Method 'Write'
    // TODO: Method 'Truncate'
    // TODO: Method 'DeleteOnClose'
};
// --------------------------------------------------------
// Type: IRdcSignatureReader
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRdcSignatureReader = *opaque{
    // TODO: Method 'ReadHeader'
    // TODO: Method 'ReadSignatures'
};
// --------------------------------------------------------
// Type: IRdcComparator
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRdcComparator = *opaque{
    // TODO: Method 'Process'
};
// --------------------------------------------------------
// Type: IRdcLibrary
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRdcLibrary = *opaque{
    // TODO: Method 'ComputeDefaultRecursionDepth'
    // TODO: Method 'CreateGeneratorParameters'
    // TODO: Method 'OpenGeneratorParameters'
    // TODO: Method 'CreateGenerator'
    // TODO: Method 'CreateComparator'
    // TODO: Method 'CreateSignatureReader'
    // TODO: Method 'GetRDCVersion'
};
// --------------------------------------------------------
// Type: ISimilarityReportProgress
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISimilarityReportProgress = *opaque{
    // TODO: Method 'ReportProgress'
};
// --------------------------------------------------------
// Type: ISimilarityTableDumpState
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISimilarityTableDumpState = *opaque{
    // TODO: Method 'GetNextData'
};
// --------------------------------------------------------
// Type: ISimilarityTraitsMappedView
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISimilarityTraitsMappedView = *opaque{
    // TODO: Method 'Flush'
    // TODO: Method 'Unmap'
    // TODO: Method 'Get'
    // TODO: Method 'GetView'
};
// --------------------------------------------------------
// Type: ISimilarityTraitsMapping
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISimilarityTraitsMapping = *opaque{
    // TODO: Method 'CloseMapping'
    // TODO: Method 'SetFileSize'
    // TODO: Method 'GetFileSize'
    // TODO: Method 'OpenMapping'
    // TODO: Method 'ResizeMapping'
    // TODO: Method 'GetPageSize'
    // TODO: Method 'CreateView'
};
// --------------------------------------------------------
// Type: ISimilarityTraitsTable
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISimilarityTraitsTable = *opaque{
    // TODO: Method 'CreateTable'
    // TODO: Method 'CreateTableIndirect'
    // TODO: Method 'CloseTable'
    // TODO: Method 'Append'
    // TODO: Method 'FindSimilarFileIndex'
    // TODO: Method 'BeginDump'
    // TODO: Method 'GetLastIndex'
};
// --------------------------------------------------------
// Type: ISimilarityFileIdTable
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISimilarityFileIdTable = *opaque{
    // TODO: Method 'CreateTable'
    // TODO: Method 'CreateTableIndirect'
    // TODO: Method 'CloseTable'
    // TODO: Method 'Append'
    // TODO: Method 'Lookup'
    // TODO: Method 'Invalidate'
    // TODO: Method 'GetRecordCount'
};
// --------------------------------------------------------
// Type: IRdcSimilarityGenerator
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRdcSimilarityGenerator = *opaque{
    // TODO: Method 'EnableSimilarity'
    // TODO: Method 'Results'
};
// --------------------------------------------------------
// Type: IFindSimilarResults
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFindSimilarResults = *opaque{
    // TODO: Method 'GetSize'
    // TODO: Method 'GetNextFileId'
};
// --------------------------------------------------------
// Type: ISimilarity
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ISimilarity = *opaque{
    // TODO: Method 'CreateTable'
    // TODO: Method 'CreateTableIndirect'
    // TODO: Method 'CloseTable'
    // TODO: Method 'Append'
    // TODO: Method 'FindSimilarFileId'
    // TODO: Method 'CopyAndSwap'
    // TODO: Method 'GetRecordCount'
};

//
// functions
//

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//

test "" {
    const constant_export_count = 19;
    const type_export_count = 48;
    const func_count = 0;
    const unicode_alias_count = 0;
    const type_import_count = 0;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
