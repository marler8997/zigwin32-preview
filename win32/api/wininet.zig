//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: HTTP_VERSION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HTTP_VERSION_INFO = extern struct {
    dwMajorVersion: u32,
    dwMinorVersion: u32,
};
// --------------------------------------------------------
// Type: INTERNET_SCHEME
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const INTERNET_SCHEME = *opaque{
};
// --------------------------------------------------------
// Type: INTERNET_ASYNC_RESULT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_ASYNC_RESULT = extern struct {
    dwResult: ?*opaque{},
    dwError: u32,
};
// --------------------------------------------------------
// Type: INTERNET_DIAGNOSTIC_SOCKET_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_DIAGNOSTIC_SOCKET_INFO = extern struct {
    Socket: ?*opaque{},
    SourcePort: u32,
    DestPort: u32,
    Flags: u32,
};
// --------------------------------------------------------
// Type: INTERNET_PROXY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_PROXY_INFO = extern struct {
    dwAccessType: u32,
    lpszProxy: ?*i8,
    lpszProxyBypass: ?*i8,
};
// --------------------------------------------------------
// Type: INTERNET_PER_CONN_OPTIONA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_PER_CONN_OPTIONA = extern struct {
    dwOption: u32,
    Value: _Value_e__Union,
    // --------------------------------------------------------
    // Type: _Value_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Value_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: INTERNET_PER_CONN_OPTIONW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_PER_CONN_OPTIONW = extern struct {
    dwOption: u32,
    Value: _Value_e__Union,
    // --------------------------------------------------------
    // Type: _Value_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Value_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: INTERNET_PER_CONN_OPTION_LISTA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_PER_CONN_OPTION_LISTA = extern struct {
    dwSize: u32,
    pszConnection: ?*i8,
    dwOptionCount: u32,
    dwOptionError: u32,
    pOptions: ?*INTERNET_PER_CONN_OPTIONA,
};
// --------------------------------------------------------
// Type: INTERNET_PER_CONN_OPTION_LISTW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_PER_CONN_OPTION_LISTW = extern struct {
    dwSize: u32,
    pszConnection: ?*u16,
    dwOptionCount: u32,
    dwOptionError: u32,
    pOptions: ?*INTERNET_PER_CONN_OPTIONW,
};
// --------------------------------------------------------
// Type: INTERNET_VERSION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_VERSION_INFO = extern struct {
    dwMajorVersion: u32,
    dwMinorVersion: u32,
};
// --------------------------------------------------------
// Type: INTERNET_CONNECTED_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_CONNECTED_INFO = extern struct {
    dwConnectedState: u32,
    dwFlags: u32,
};
// --------------------------------------------------------
// Type: URL_COMPONENTSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const URL_COMPONENTSA = extern struct {
    dwStructSize: u32,
    lpszScheme: ?*i8,
    dwSchemeLength: u32,
    nScheme: INTERNET_SCHEME,
    lpszHostName: ?*i8,
    dwHostNameLength: u32,
    nPort: u16,
    lpszUserName: ?*i8,
    dwUserNameLength: u32,
    lpszPassword: ?*i8,
    dwPasswordLength: u32,
    lpszUrlPath: ?*i8,
    dwUrlPathLength: u32,
    lpszExtraInfo: ?*i8,
    dwExtraInfoLength: u32,
};
// --------------------------------------------------------
// Type: URL_COMPONENTSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const URL_COMPONENTSW = extern struct {
    dwStructSize: u32,
    lpszScheme: ?*u16,
    dwSchemeLength: u32,
    nScheme: INTERNET_SCHEME,
    lpszHostName: ?*u16,
    dwHostNameLength: u32,
    nPort: u16,
    lpszUserName: ?*u16,
    dwUserNameLength: u32,
    lpszPassword: ?*u16,
    dwPasswordLength: u32,
    lpszUrlPath: ?*u16,
    dwUrlPathLength: u32,
    lpszExtraInfo: ?*u16,
    dwExtraInfoLength: u32,
};
// --------------------------------------------------------
// Type: INTERNET_CERTIFICATE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_CERTIFICATE_INFO = extern struct {
    ftExpiry: FILETIME,
    ftStart: FILETIME,
    lpszSubjectInfo: ?*i8,
    lpszIssuerInfo: ?*i8,
    lpszProtocolName: ?*i8,
    lpszSignatureAlgName: ?*i8,
    lpszEncryptionAlgName: ?*i8,
    dwKeySize: u32,
};
// --------------------------------------------------------
// Type: INTERNET_BUFFERSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_BUFFERSA = extern struct {
    dwStructSize: u32,
    Next: ?*INTERNET_BUFFERSA,
    lpcszHeader: ?*i8,
    dwHeadersLength: u32,
    dwHeadersTotal: u32,
    lpvBuffer: ?*opaque{},
    dwBufferLength: u32,
    dwBufferTotal: u32,
    dwOffsetLow: u32,
    dwOffsetHigh: u32,
};
// --------------------------------------------------------
// Type: INTERNET_BUFFERSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_BUFFERSW = extern struct {
    dwStructSize: u32,
    Next: ?*INTERNET_BUFFERSW,
    lpcszHeader: ?*u16,
    dwHeadersLength: u32,
    dwHeadersTotal: u32,
    lpvBuffer: ?*opaque{},
    dwBufferLength: u32,
    dwBufferTotal: u32,
    dwOffsetLow: u32,
    dwOffsetHigh: u32,
};
// --------------------------------------------------------
// Type: INTERNET_STATUS_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const INTERNET_STATUS_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPINTERNET_STATUS_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPINTERNET_STATUS_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: InternetCookieState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const InternetCookieState = *opaque{
};
// --------------------------------------------------------
// Type: IncomingCookieState
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IncomingCookieState = extern struct {
    cSession: i32,
    cPersistent: i32,
    cAccepted: i32,
    cLeashed: i32,
    cDowngraded: i32,
    cBlocked: i32,
    pszLocation: ?*i8,
};
// --------------------------------------------------------
// Type: OutgoingCookieState
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OutgoingCookieState = extern struct {
    cSent: i32,
    cSuppressed: i32,
    pszLocation: ?*i8,
};
// --------------------------------------------------------
// Type: InternetCookieHistory
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const InternetCookieHistory = extern struct {
    fAccepted: BOOL,
    fLeashed: BOOL,
    fDowngraded: BOOL,
    fRejected: BOOL,
};
// --------------------------------------------------------
// Type: CookieDecision
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CookieDecision = extern struct {
    dwCookieState: u32,
    fAllowSession: BOOL,
};
// --------------------------------------------------------
// Type: GOPHER_FIND_DATAA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GOPHER_FIND_DATAA = extern struct {
    DisplayString: ?[*]i8,
    GopherType: u32,
    SizeLow: u32,
    SizeHigh: u32,
    LastModificationTime: FILETIME,
    Locator: ?[*]i8,
};
// --------------------------------------------------------
// Type: GOPHER_FIND_DATAW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GOPHER_FIND_DATAW = extern struct {
    DisplayString: ?[*]u16,
    GopherType: u32,
    SizeLow: u32,
    SizeHigh: u32,
    LastModificationTime: FILETIME,
    Locator: ?[*]u16,
};
// --------------------------------------------------------
// Type: GOPHER_ADMIN_ATTRIBUTE_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GOPHER_ADMIN_ATTRIBUTE_TYPE = extern struct {
    Comment: ?*i8,
    EmailAddress: ?*i8,
};
// --------------------------------------------------------
// Type: GOPHER_MOD_DATE_ATTRIBUTE_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GOPHER_MOD_DATE_ATTRIBUTE_TYPE = extern struct {
    DateAndTime: FILETIME,
};
// --------------------------------------------------------
// Type: GOPHER_TTL_ATTRIBUTE_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GOPHER_TTL_ATTRIBUTE_TYPE = extern struct {
    Ttl: u32,
};
// --------------------------------------------------------
// Type: GOPHER_SCORE_ATTRIBUTE_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GOPHER_SCORE_ATTRIBUTE_TYPE = extern struct {
    Score: i32,
};
// --------------------------------------------------------
// Type: GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE = extern struct {
    LowerBound: i32,
    UpperBound: i32,
};
// --------------------------------------------------------
// Type: GOPHER_SITE_ATTRIBUTE_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GOPHER_SITE_ATTRIBUTE_TYPE = extern struct {
    Site: ?*i8,
};
// --------------------------------------------------------
// Type: GOPHER_ORGANIZATION_ATTRIBUTE_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GOPHER_ORGANIZATION_ATTRIBUTE_TYPE = extern struct {
    Organization: ?*i8,
};
// --------------------------------------------------------
// Type: GOPHER_LOCATION_ATTRIBUTE_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GOPHER_LOCATION_ATTRIBUTE_TYPE = extern struct {
    Location: ?*i8,
};
// --------------------------------------------------------
// Type: GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE = extern struct {
    DegreesNorth: i32,
    MinutesNorth: i32,
    SecondsNorth: i32,
    DegreesEast: i32,
    MinutesEast: i32,
    SecondsEast: i32,
};
// --------------------------------------------------------
// Type: GOPHER_TIMEZONE_ATTRIBUTE_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GOPHER_TIMEZONE_ATTRIBUTE_TYPE = extern struct {
    Zone: i32,
};
// --------------------------------------------------------
// Type: GOPHER_PROVIDER_ATTRIBUTE_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GOPHER_PROVIDER_ATTRIBUTE_TYPE = extern struct {
    Provider: ?*i8,
};
// --------------------------------------------------------
// Type: GOPHER_VERSION_ATTRIBUTE_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GOPHER_VERSION_ATTRIBUTE_TYPE = extern struct {
    Version: ?*i8,
};
// --------------------------------------------------------
// Type: GOPHER_ABSTRACT_ATTRIBUTE_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GOPHER_ABSTRACT_ATTRIBUTE_TYPE = extern struct {
    ShortAbstract: ?*i8,
    AbstractFile: ?*i8,
};
// --------------------------------------------------------
// Type: GOPHER_VIEW_ATTRIBUTE_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GOPHER_VIEW_ATTRIBUTE_TYPE = extern struct {
    ContentType: ?*i8,
    Language: ?*i8,
    Size: u32,
};
// --------------------------------------------------------
// Type: GOPHER_VERONICA_ATTRIBUTE_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GOPHER_VERONICA_ATTRIBUTE_TYPE = extern struct {
    TreeWalk: BOOL,
};
// --------------------------------------------------------
// Type: GOPHER_ASK_ATTRIBUTE_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GOPHER_ASK_ATTRIBUTE_TYPE = extern struct {
    QuestionType: ?*i8,
    QuestionText: ?*i8,
};
// --------------------------------------------------------
// Type: GOPHER_UNKNOWN_ATTRIBUTE_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GOPHER_UNKNOWN_ATTRIBUTE_TYPE = extern struct {
    Text: ?*i8,
};
// --------------------------------------------------------
// Type: GOPHER_ATTRIBUTE_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GOPHER_ATTRIBUTE_TYPE = extern struct {
    CategoryId: u32,
    AttributeId: u32,
    AttributeType: _AttributeType_e__Union,
    // --------------------------------------------------------
    // Type: _AttributeType_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _AttributeType_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: GOPHER_ATTRIBUTE_ENUMERATOR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const GOPHER_ATTRIBUTE_ENUMERATOR = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: INTERNET_COOKIE2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_COOKIE2 = extern struct {
    pwszName: ?*u16,
    pwszValue: ?*u16,
    pwszDomain: ?*u16,
    pwszPath: ?*u16,
    dwFlags: u32,
    ftExpires: FILETIME,
    fExpiresSet: BOOL,
};
// --------------------------------------------------------
// Type: PFN_AUTH_NOTIFY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_AUTH_NOTIFY = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: INTERNET_AUTH_NOTIFY_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_AUTH_NOTIFY_DATA = extern struct {
    cbStruct: u32,
    dwOptions: u32,
    pfnNotify: PFN_AUTH_NOTIFY,
    dwContext: ?*opaque{},
};
// --------------------------------------------------------
// Type: INTERNET_CACHE_ENTRY_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_CACHE_ENTRY_INFOA = extern struct {
    dwStructSize: u32,
    lpszSourceUrlName: ?*i8,
    lpszLocalFileName: ?*i8,
    CacheEntryType: u32,
    dwUseCount: u32,
    dwHitRate: u32,
    dwSizeLow: u32,
    dwSizeHigh: u32,
    LastModifiedTime: FILETIME,
    ExpireTime: FILETIME,
    LastAccessTime: FILETIME,
    LastSyncTime: FILETIME,
    lpHeaderInfo: ?*i8,
    dwHeaderInfoSize: u32,
    lpszFileExtension: ?*i8,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: INTERNET_CACHE_ENTRY_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_CACHE_ENTRY_INFOW = extern struct {
    dwStructSize: u32,
    lpszSourceUrlName: ?*u16,
    lpszLocalFileName: ?*u16,
    CacheEntryType: u32,
    dwUseCount: u32,
    dwHitRate: u32,
    dwSizeLow: u32,
    dwSizeHigh: u32,
    LastModifiedTime: FILETIME,
    ExpireTime: FILETIME,
    LastAccessTime: FILETIME,
    LastSyncTime: FILETIME,
    lpHeaderInfo: ?*u16,
    dwHeaderInfoSize: u32,
    lpszFileExtension: ?*u16,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: INTERNET_CACHE_TIMESTAMPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_CACHE_TIMESTAMPS = extern struct {
    ftExpires: FILETIME,
    ftLastModified: FILETIME,
};
// --------------------------------------------------------
// Type: INTERNET_CACHE_GROUP_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_CACHE_GROUP_INFOA = extern struct {
    dwGroupSize: u32,
    dwGroupFlags: u32,
    dwGroupType: u32,
    dwDiskUsage: u32,
    dwDiskQuota: u32,
    dwOwnerStorage: ?[*]u32,
    szGroupName: ?[*]i8,
};
// --------------------------------------------------------
// Type: INTERNET_CACHE_GROUP_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_CACHE_GROUP_INFOW = extern struct {
    dwGroupSize: u32,
    dwGroupFlags: u32,
    dwGroupType: u32,
    dwDiskUsage: u32,
    dwDiskQuota: u32,
    dwOwnerStorage: ?[*]u32,
    szGroupName: ?[*]u16,
};
// --------------------------------------------------------
// Type: AutoProxyHelperVtbl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AutoProxyHelperVtbl = extern struct {
    IsResolvable: ?*?*?*?*?*?*?*?*?*?*BOOL,
    GetIPAddress: ?*opaque{},
    ResolveHostName: ?*opaque{},
    IsInNet: ?*?*?*?*?*?*?*?*?*?*BOOL,
    IsResolvableEx: ?*?*?*?*?*?*?*?*?*?*BOOL,
    GetIPAddressEx: ?*opaque{},
    ResolveHostNameEx: ?*opaque{},
    IsInNetEx: ?*?*?*?*?*?*?*?*?*?*BOOL,
    SortIpList: ?*opaque{},
};
// --------------------------------------------------------
// Type: AUTO_PROXY_SCRIPT_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUTO_PROXY_SCRIPT_BUFFER = extern struct {
    dwStructSize: u32,
    lpszScriptBuffer: ?*i8,
    dwScriptBufferSize: u32,
};
// --------------------------------------------------------
// Type: AutoProxyHelperFunctions
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AutoProxyHelperFunctions = extern struct {
    lpVtbl: ?*AutoProxyHelperVtbl,
};
// --------------------------------------------------------
// Type: pfnInternetInitializeAutoProxyDll
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const pfnInternetInitializeAutoProxyDll = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: pfnInternetDeInitializeAutoProxyDll
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const pfnInternetDeInitializeAutoProxyDll = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: pfnInternetGetProxyInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const pfnInternetGetProxyInfo = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WPAD_CACHE_DELETE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WPAD_CACHE_DELETE = *opaque{
};
// --------------------------------------------------------
// Type: PFN_DIAL_HANDLER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_DIAL_HANDLER = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: IDialEventSink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDialEventSink = *opaque{
    // TODO: Method 'OnEvent'
};
// --------------------------------------------------------
// Type: IDialEngine
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDialEngine = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'GetProperty'
    // TODO: Method 'SetProperty'
    // TODO: Method 'Dial'
    // TODO: Method 'HangUp'
    // TODO: Method 'GetConnectedState'
    // TODO: Method 'GetConnectHandle'
};
// --------------------------------------------------------
// Type: IDialBranding
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDialBranding = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'GetBitmap'
};
// --------------------------------------------------------
// Type: INTERNET_PREFETCH_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_PREFETCH_STATUS = extern struct {
    dwStatus: u32,
    dwSize: u32,
};
// --------------------------------------------------------
// Type: INTERNET_SECURITY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_SECURITY_INFO = extern struct {
    dwSize: u32,
    pCertificate: ?*CERT_CONTEXT,
    pcCertChain: ?*CERT_CHAIN_CONTEXT,
    connectionInfo: SecPkgContext_ConnectionInfo,
    cipherInfo: SecPkgContext_CipherInfo,
    pcUnverifiedCertChain: ?*CERT_CHAIN_CONTEXT,
    channelBindingToken: SecPkgContext_Bindings,
};
// --------------------------------------------------------
// Type: INTERNET_SECURITY_CONNECTION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_SECURITY_CONNECTION_INFO = extern struct {
    dwSize: u32,
    fSecure: BOOL,
    connectionInfo: SecPkgContext_ConnectionInfo,
    cipherInfo: SecPkgContext_CipherInfo,
};
// --------------------------------------------------------
// Type: FORTCMD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FORTCMD = *opaque{
};
// --------------------------------------------------------
// Type: FORTSTAT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FORTSTAT = *opaque{
};
// --------------------------------------------------------
// Type: INTERNET_DOWNLOAD_MODE_HANDLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_DOWNLOAD_MODE_HANDLE = extern struct {
    pcwszFileName: ?*u16,
    phFile: ?*HANDLE,
};
// --------------------------------------------------------
// Type: REQUEST_TIMES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const REQUEST_TIMES = *opaque{
};
// --------------------------------------------------------
// Type: HTTP_REQUEST_TIMES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HTTP_REQUEST_TIMES = extern struct {
    cTimes: u32,
    rgTimes: ?[*]u64,
};
// --------------------------------------------------------
// Type: INTERNET_SERVER_CONNECTION_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_SERVER_CONNECTION_STATE = extern struct {
    lpcwszHostName: ?*u16,
    fProxy: BOOL,
    dwCounter: u32,
    dwConnectionLimit: u32,
    dwAvailableCreates: u32,
    dwAvailableKeepAlives: u32,
    dwActiveConnections: u32,
    dwWaiters: u32,
};
// --------------------------------------------------------
// Type: INTERNET_END_BROWSER_SESSION_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_END_BROWSER_SESSION_DATA = extern struct {
    lpBuffer: ?*opaque{},
    dwBufferLength: u32,
};
// --------------------------------------------------------
// Type: INTERNET_CALLBACK_COOKIE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_CALLBACK_COOKIE = extern struct {
    pcwszName: ?*u16,
    pcwszValue: ?*u16,
    pcwszDomain: ?*u16,
    pcwszPath: ?*u16,
    ftExpires: FILETIME,
    dwFlags: u32,
};
// --------------------------------------------------------
// Type: INTERNET_CREDENTIALS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_CREDENTIALS = extern struct {
    lpcwszHostName: ?*u16,
    dwPort: u32,
    dwScheme: u32,
    lpcwszUrl: ?*u16,
    lpcwszRealm: ?*u16,
    fAuthIdentity: BOOL,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            lpcwszUserName: ?*u16,
            lpcwszPassword: ?*u16,
        };
    };
};
// --------------------------------------------------------
// Type: HTTP_PUSH_WAIT_HANDLE__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HTTP_PUSH_WAIT_HANDLE__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: HTTP_PUSH_TRANSPORT_SETTING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HTTP_PUSH_TRANSPORT_SETTING = extern struct {
    TransportSettingId: Guid,
    BrokerEventId: Guid,
};
// --------------------------------------------------------
// Type: HTTP_PUSH_NOTIFICATION_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HTTP_PUSH_NOTIFICATION_STATUS = extern struct {
    ChannelStatusValid: BOOL,
    ChannelStatus: u32,
};
// --------------------------------------------------------
// Type: HTTP_PUSH_WAIT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HTTP_PUSH_WAIT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: INTERNET_COOKIE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_COOKIE = extern struct {
    cbSize: u32,
    pszName: ?*i8,
    pszData: ?*i8,
    pszDomain: ?*i8,
    pszPath: ?*i8,
    pftExpires: ?*FILETIME,
    dwFlags: u32,
    pszUrl: ?*i8,
    pszP3PPolicy: ?*i8,
};
// --------------------------------------------------------
// Type: COOKIE_DLG_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COOKIE_DLG_INFO = extern struct {
    pszServer: ?*u16,
    pic: ?*INTERNET_COOKIE,
    dwStopWarning: u32,
    cx: i32,
    cy: i32,
    pszHeader: ?*u16,
    dwOperation: u32,
};
// --------------------------------------------------------
// Type: INTERNET_CACHE_CONFIG_PATH_ENTRYA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_CACHE_CONFIG_PATH_ENTRYA = extern struct {
    CachePath: ?[*]i8,
    dwCacheSize: u32,
};
// --------------------------------------------------------
// Type: INTERNET_CACHE_CONFIG_PATH_ENTRYW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_CACHE_CONFIG_PATH_ENTRYW = extern struct {
    CachePath: ?[*]u16,
    dwCacheSize: u32,
};
// --------------------------------------------------------
// Type: INTERNET_CACHE_CONFIG_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_CACHE_CONFIG_INFOA = extern struct {
    dwStructSize: u32,
    dwContainer: u32,
    dwQuota: u32,
    dwReserved4: u32,
    fPerUser: BOOL,
    dwSyncMode: u32,
    dwNumCachePaths: u32,
    Anonymous: _Anonymous_e__Union,
    dwNormalUsage: u32,
    dwExemptUsage: u32,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            CachePath: ?[*]i8,
            dwCacheSize: u32,
        };
    };
};
// --------------------------------------------------------
// Type: INTERNET_CACHE_CONFIG_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_CACHE_CONFIG_INFOW = extern struct {
    dwStructSize: u32,
    dwContainer: u32,
    dwQuota: u32,
    dwReserved4: u32,
    fPerUser: BOOL,
    dwSyncMode: u32,
    dwNumCachePaths: u32,
    Anonymous: _Anonymous_e__Union,
    dwNormalUsage: u32,
    dwExemptUsage: u32,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            CachePath: ?[*]u16,
            dwCacheSize: u32,
        };
    };
};
// --------------------------------------------------------
// Type: INTERNET_CACHE_CONTAINER_INFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_CACHE_CONTAINER_INFOA = extern struct {
    dwCacheVersion: u32,
    lpszName: ?*i8,
    lpszCachePrefix: ?*i8,
    lpszVolumeLabel: ?*i8,
    lpszVolumeTitle: ?*i8,
};
// --------------------------------------------------------
// Type: INTERNET_CACHE_CONTAINER_INFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const INTERNET_CACHE_CONTAINER_INFOW = extern struct {
    dwCacheVersion: u32,
    lpszName: ?*u16,
    lpszCachePrefix: ?*u16,
    lpszVolumeLabel: ?*u16,
    lpszVolumeTitle: ?*u16,
};
// --------------------------------------------------------
// Type: WININET_SYNC_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WININET_SYNC_MODE = *opaque{
};
// --------------------------------------------------------
// Type: APP_CACHE_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const APP_CACHE_STATE = *opaque{
};
// --------------------------------------------------------
// Type: APP_CACHE_DOWNLOAD_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const APP_CACHE_DOWNLOAD_ENTRY = extern struct {
    pwszUrl: ?*u16,
    dwEntryType: u32,
};
// --------------------------------------------------------
// Type: APP_CACHE_DOWNLOAD_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const APP_CACHE_DOWNLOAD_LIST = extern struct {
    dwEntryCount: u32,
    pEntries: ?*APP_CACHE_DOWNLOAD_ENTRY,
};
// --------------------------------------------------------
// Type: APP_CACHE_FINALIZE_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const APP_CACHE_FINALIZE_STATE = *opaque{
};
// --------------------------------------------------------
// Type: APP_CACHE_GROUP_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const APP_CACHE_GROUP_INFO = extern struct {
    pwszManifestUrl: ?*u16,
    ftLastAccessTime: FILETIME,
    ullSize: u64,
};
// --------------------------------------------------------
// Type: APP_CACHE_GROUP_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const APP_CACHE_GROUP_LIST = extern struct {
    dwAppCacheGroupCount: u32,
    pAppCacheGroups: ?*APP_CACHE_GROUP_INFO,
};
// --------------------------------------------------------
// Type: URLCACHE_ENTRY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const URLCACHE_ENTRY_INFO = extern struct {
    pwszSourceUrlName: ?*u16,
    pwszLocalFileName: ?*u16,
    dwCacheEntryType: u32,
    dwUseCount: u32,
    dwHitRate: u32,
    dwSizeLow: u32,
    dwSizeHigh: u32,
    ftLastModifiedTime: FILETIME,
    ftExpireTime: FILETIME,
    ftLastAccessTime: FILETIME,
    ftLastSyncTime: FILETIME,
    pbHeaderInfo: ?*u8,
    cbHeaderInfoSize: u32,
    pbExtraData: ?*u8,
    cbExtraDataSize: u32,
};
// --------------------------------------------------------
// Type: URL_CACHE_LIMIT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const URL_CACHE_LIMIT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WININET_PROXY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WININET_PROXY_INFO = extern struct {
    fProxy: BOOL,
    fBypass: BOOL,
    ProxyScheme: INTERNET_SCHEME,
    pwszProxy: ?*u16,
    ProxyPort: u16,
};
// --------------------------------------------------------
// Type: WININET_PROXY_INFO_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WININET_PROXY_INFO_LIST = extern struct {
    dwProxyInfoCount: u32,
    pProxyInfo: ?*WININET_PROXY_INFO,
};
// --------------------------------------------------------
// Type: CACHE_OPERATOR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CACHE_OPERATOR = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: HTTP_WEB_SOCKET_OPERATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HTTP_WEB_SOCKET_OPERATION = *opaque{
};
// --------------------------------------------------------
// Type: HTTP_WEB_SOCKET_BUFFER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HTTP_WEB_SOCKET_BUFFER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: HTTP_WEB_SOCKET_CLOSE_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const HTTP_WEB_SOCKET_CLOSE_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: HTTP_WEB_SOCKET_ASYNC_RESULT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HTTP_WEB_SOCKET_ASYNC_RESULT = extern struct {
    AsyncResult: INTERNET_ASYNC_RESULT,
    Operation: HTTP_WEB_SOCKET_OPERATION,
    BufferType: HTTP_WEB_SOCKET_BUFFER_TYPE,
    dwBytesTransferred: u32,
};
// --------------------------------------------------------
// Type: ProofOfPossessionCookieInfoManager
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ProofOfPossessionCookieInfoManager = opaque {
};
// --------------------------------------------------------
// Type: ProofOfPossessionCookieInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ProofOfPossessionCookieInfo = extern struct {
    name: ?*u16,
    data: ?*u16,
    flags: u32,
    p3pHeader: ?*u16,
};
// --------------------------------------------------------
// Type: IProofOfPossessionCookieInfoManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IProofOfPossessionCookieInfoManager = *opaque{
    // TODO: Method 'GetCookieInfoForUri'
};
// --------------------------------------------------------
// Type: IProofOfPossessionCookieInfoManager2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IProofOfPossessionCookieInfoManager2 = *opaque{
    // TODO: Method 'GetCookieInfoWithUriForAccount'
};

//
// functions
//

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetTimeFromSystemTimeA(
    pst: ?*SYSTEMTIME,
    dwRFC: u32,
    lpszTime: ?*i8,
    cbTime: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetTimeFromSystemTimeW(
    pst: ?*SYSTEMTIME,
    dwRFC: u32,
    lpszTime: ?*u16,
    cbTime: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetTimeFromSystemTime(
    pst: ?*SYSTEMTIME,
    dwRFC: u32,
    lpszTime: ?*i8,
    cbTime: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetTimeToSystemTimeA(
    lpszTime: ?*i8,
    pst: ?*SYSTEMTIME,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetTimeToSystemTimeW(
    lpszTime: ?*u16,
    pst: ?*SYSTEMTIME,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetTimeToSystemTime(
    lpszTime: ?*i8,
    pst: ?*SYSTEMTIME,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetCrackUrlA(
    lpszUrl: ?*i8,
    dwUrlLength: u32,
    dwFlags: u32,
    lpUrlComponents: ?*URL_COMPONENTSA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetCrackUrlW(
    lpszUrl: ?*u16,
    dwUrlLength: u32,
    dwFlags: u32,
    lpUrlComponents: ?*URL_COMPONENTSW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetCreateUrlA(
    lpUrlComponents: ?*URL_COMPONENTSA,
    dwFlags: u32,
    lpszUrl: ?*i8,
    lpdwUrlLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetCreateUrlW(
    lpUrlComponents: ?*URL_COMPONENTSW,
    dwFlags: u32,
    lpszUrl: ?*u16,
    lpdwUrlLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetCanonicalizeUrlA(
    lpszUrl: ?*i8,
    lpszBuffer: ?*i8,
    lpdwBufferLength: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetCanonicalizeUrlW(
    lpszUrl: ?*u16,
    lpszBuffer: ?*u16,
    lpdwBufferLength: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetCombineUrlA(
    lpszBaseUrl: ?*i8,
    lpszRelativeUrl: ?*i8,
    lpszBuffer: ?*i8,
    lpdwBufferLength: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetCombineUrlW(
    lpszBaseUrl: ?*u16,
    lpszRelativeUrl: ?*u16,
    lpszBuffer: ?*u16,
    lpdwBufferLength: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetOpenA(
    lpszAgent: ?*i8,
    dwAccessType: u32,
    lpszProxy: ?*i8,
    lpszProxyBypass: ?*i8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetOpenW(
    lpszAgent: ?*u16,
    dwAccessType: u32,
    lpszProxy: ?*u16,
    lpszProxyBypass: ?*u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetCloseHandle(
    hInternet: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetConnectA(
    hInternet: ?*opaque{},
    lpszServerName: ?*i8,
    nServerPort: u16,
    lpszUserName: ?*i8,
    lpszPassword: ?*i8,
    dwService: u32,
    dwFlags: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetConnectW(
    hInternet: ?*opaque{},
    lpszServerName: ?*u16,
    nServerPort: u16,
    lpszUserName: ?*u16,
    lpszPassword: ?*u16,
    dwService: u32,
    dwFlags: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetOpenUrlA(
    hInternet: ?*opaque{},
    lpszUrl: ?*i8,
    lpszHeaders: ?*i8,
    dwHeadersLength: u32,
    dwFlags: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetOpenUrlW(
    hInternet: ?*opaque{},
    lpszUrl: ?*u16,
    lpszHeaders: ?*u16,
    dwHeadersLength: u32,
    dwFlags: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetReadFile(
    hFile: ?*opaque{},
    lpBuffer: ?*opaque{},
    dwNumberOfBytesToRead: u32,
    lpdwNumberOfBytesRead: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetReadFileExA(
    hFile: ?*opaque{},
    lpBuffersOut: ?*INTERNET_BUFFERSA,
    dwFlags: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetReadFileExW(
    hFile: ?*opaque{},
    lpBuffersOut: ?*INTERNET_BUFFERSW,
    dwFlags: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetSetFilePointer(
    hFile: ?*opaque{},
    lDistanceToMove: i32,
    lpDistanceToMoveHigh: ?*i32,
    dwMoveMethod: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetWriteFile(
    hFile: ?*opaque{},
    lpBuffer: ?*opaque{},
    dwNumberOfBytesToWrite: u32,
    lpdwNumberOfBytesWritten: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetQueryDataAvailable(
    hFile: ?*opaque{},
    lpdwNumberOfBytesAvailable: ?*u32,
    dwFlags: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetFindNextFileA(
    hFind: ?*opaque{},
    lpvFindData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetFindNextFileW(
    hFind: ?*opaque{},
    lpvFindData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetQueryOptionA(
    hInternet: ?*opaque{},
    dwOption: u32,
    lpBuffer: ?*opaque{},
    lpdwBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetQueryOptionW(
    hInternet: ?*opaque{},
    dwOption: u32,
    lpBuffer: ?*opaque{},
    lpdwBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetSetOptionA(
    hInternet: ?*opaque{},
    dwOption: u32,
    lpBuffer: ?*opaque{},
    dwBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetSetOptionW(
    hInternet: ?*opaque{},
    dwOption: u32,
    lpBuffer: ?*opaque{},
    dwBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetSetOptionExA(
    hInternet: ?*opaque{},
    dwOption: u32,
    lpBuffer: ?*opaque{},
    dwBufferLength: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetSetOptionExW(
    hInternet: ?*opaque{},
    dwOption: u32,
    lpBuffer: ?*opaque{},
    dwBufferLength: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetLockRequestFile(
    hInternet: ?*opaque{},
    lphLockRequestInfo: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetUnlockRequestFile(
    hLockRequestInfo: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetGetLastResponseInfoA(
    lpdwError: ?*u32,
    lpszBuffer: ?*i8,
    lpdwBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetGetLastResponseInfoW(
    lpdwError: ?*u32,
    lpszBuffer: ?*u16,
    lpdwBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetSetStatusCallbackA(
    hInternet: ?*opaque{},
    lpfnInternetCallback: INTERNET_STATUS_CALLBACK,
) callconv(@import("std").os.windows.WINAPI) INTERNET_STATUS_CALLBACK;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetSetStatusCallbackW(
    hInternet: ?*opaque{},
    lpfnInternetCallback: INTERNET_STATUS_CALLBACK,
) callconv(@import("std").os.windows.WINAPI) INTERNET_STATUS_CALLBACK;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetSetStatusCallback(
    hInternet: ?*opaque{},
    lpfnInternetCallback: INTERNET_STATUS_CALLBACK,
) callconv(@import("std").os.windows.WINAPI) INTERNET_STATUS_CALLBACK;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FtpFindFirstFileA(
    hConnect: ?*opaque{},
    lpszSearchFile: ?*i8,
    lpFindFileData: ?*WIN32_FIND_DATAA,
    dwFlags: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FtpFindFirstFileW(
    hConnect: ?*opaque{},
    lpszSearchFile: ?*u16,
    lpFindFileData: ?*WIN32_FIND_DATAW,
    dwFlags: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FtpGetFileA(
    hConnect: ?*opaque{},
    lpszRemoteFile: ?*i8,
    lpszNewFile: ?*i8,
    fFailIfExists: BOOL,
    dwFlagsAndAttributes: u32,
    dwFlags: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FtpGetFileW(
    hConnect: ?*opaque{},
    lpszRemoteFile: ?*u16,
    lpszNewFile: ?*u16,
    fFailIfExists: BOOL,
    dwFlagsAndAttributes: u32,
    dwFlags: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FtpPutFileA(
    hConnect: ?*opaque{},
    lpszLocalFile: ?*i8,
    lpszNewRemoteFile: ?*i8,
    dwFlags: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FtpPutFileW(
    hConnect: ?*opaque{},
    lpszLocalFile: ?*u16,
    lpszNewRemoteFile: ?*u16,
    dwFlags: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn FtpGetFileEx(
    hFtpSession: ?*opaque{},
    lpszRemoteFile: ?*i8,
    lpszNewFile: ?*u16,
    fFailIfExists: BOOL,
    dwFlagsAndAttributes: u32,
    dwFlags: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn FtpPutFileEx(
    hFtpSession: ?*opaque{},
    lpszLocalFile: ?*u16,
    lpszNewRemoteFile: ?*i8,
    dwFlags: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FtpDeleteFileA(
    hConnect: ?*opaque{},
    lpszFileName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FtpDeleteFileW(
    hConnect: ?*opaque{},
    lpszFileName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FtpRenameFileA(
    hConnect: ?*opaque{},
    lpszExisting: ?*i8,
    lpszNew: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FtpRenameFileW(
    hConnect: ?*opaque{},
    lpszExisting: ?*u16,
    lpszNew: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FtpOpenFileA(
    hConnect: ?*opaque{},
    lpszFileName: ?*i8,
    dwAccess: u32,
    dwFlags: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FtpOpenFileW(
    hConnect: ?*opaque{},
    lpszFileName: ?*u16,
    dwAccess: u32,
    dwFlags: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FtpCreateDirectoryA(
    hConnect: ?*opaque{},
    lpszDirectory: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FtpCreateDirectoryW(
    hConnect: ?*opaque{},
    lpszDirectory: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FtpRemoveDirectoryA(
    hConnect: ?*opaque{},
    lpszDirectory: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FtpRemoveDirectoryW(
    hConnect: ?*opaque{},
    lpszDirectory: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FtpSetCurrentDirectoryA(
    hConnect: ?*opaque{},
    lpszDirectory: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FtpSetCurrentDirectoryW(
    hConnect: ?*opaque{},
    lpszDirectory: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FtpGetCurrentDirectoryA(
    hConnect: ?*opaque{},
    lpszCurrentDirectory: ?*i8,
    lpdwCurrentDirectory: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FtpGetCurrentDirectoryW(
    hConnect: ?*opaque{},
    lpszCurrentDirectory: ?*u16,
    lpdwCurrentDirectory: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FtpCommandA(
    hConnect: ?*opaque{},
    fExpectResponse: BOOL,
    dwFlags: u32,
    lpszCommand: ?*i8,
    dwContext: ?*opaque{},
    phFtpCommand: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FtpCommandW(
    hConnect: ?*opaque{},
    fExpectResponse: BOOL,
    dwFlags: u32,
    lpszCommand: ?*u16,
    dwContext: ?*opaque{},
    phFtpCommand: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn FtpGetFileSize(
    hFile: ?*opaque{},
    lpdwFileSizeHigh: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn GopherCreateLocatorA(
    lpszHost: ?*i8,
    nServerPort: u16,
    lpszDisplayString: ?*i8,
    lpszSelectorString: ?*i8,
    dwGopherType: u32,
    lpszLocator: ?*i8,
    lpdwBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn GopherCreateLocatorW(
    lpszHost: ?*u16,
    nServerPort: u16,
    lpszDisplayString: ?*u16,
    lpszSelectorString: ?*u16,
    dwGopherType: u32,
    lpszLocator: ?*u16,
    lpdwBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn GopherGetLocatorTypeA(
    lpszLocator: ?*i8,
    lpdwGopherType: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn GopherGetLocatorTypeW(
    lpszLocator: ?*u16,
    lpdwGopherType: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn GopherFindFirstFileA(
    hConnect: ?*opaque{},
    lpszLocator: ?*i8,
    lpszSearchString: ?*i8,
    lpFindData: ?*GOPHER_FIND_DATAA,
    dwFlags: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn GopherFindFirstFileW(
    hConnect: ?*opaque{},
    lpszLocator: ?*u16,
    lpszSearchString: ?*u16,
    lpFindData: ?*GOPHER_FIND_DATAW,
    dwFlags: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn GopherOpenFileA(
    hConnect: ?*opaque{},
    lpszLocator: ?*i8,
    lpszView: ?*i8,
    dwFlags: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn GopherOpenFileW(
    hConnect: ?*opaque{},
    lpszLocator: ?*u16,
    lpszView: ?*u16,
    dwFlags: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn GopherGetAttributeA(
    hConnect: ?*opaque{},
    lpszLocator: ?*i8,
    lpszAttributeName: ?*i8,
    lpBuffer: ?*u8,
    dwBufferLength: u32,
    lpdwCharactersReturned: ?*u32,
    lpfnEnumerator: GOPHER_ATTRIBUTE_ENUMERATOR,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn GopherGetAttributeW(
    hConnect: ?*opaque{},
    lpszLocator: ?*u16,
    lpszAttributeName: ?*u16,
    lpBuffer: ?*u8,
    dwBufferLength: u32,
    lpdwCharactersReturned: ?*u32,
    lpfnEnumerator: GOPHER_ATTRIBUTE_ENUMERATOR,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn HttpOpenRequestA(
    hConnect: ?*opaque{},
    lpszVerb: ?*i8,
    lpszObjectName: ?*i8,
    lpszVersion: ?*i8,
    lpszReferrer: ?*i8,
    lplpszAcceptTypes: ?*?*i8,
    dwFlags: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn HttpOpenRequestW(
    hConnect: ?*opaque{},
    lpszVerb: ?*u16,
    lpszObjectName: ?*u16,
    lpszVersion: ?*u16,
    lpszReferrer: ?*u16,
    lplpszAcceptTypes: ?*?*u16,
    dwFlags: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn HttpAddRequestHeadersA(
    hRequest: ?*opaque{},
    lpszHeaders: ?*i8,
    dwHeadersLength: u32,
    dwModifiers: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn HttpAddRequestHeadersW(
    hRequest: ?*opaque{},
    lpszHeaders: ?*u16,
    dwHeadersLength: u32,
    dwModifiers: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn HttpSendRequestA(
    hRequest: ?*opaque{},
    lpszHeaders: ?*i8,
    dwHeadersLength: u32,
    lpOptional: ?*opaque{},
    dwOptionalLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn HttpSendRequestW(
    hRequest: ?*opaque{},
    lpszHeaders: ?*u16,
    dwHeadersLength: u32,
    lpOptional: ?*opaque{},
    dwOptionalLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn HttpSendRequestExA(
    hRequest: ?*opaque{},
    lpBuffersIn: ?*INTERNET_BUFFERSA,
    lpBuffersOut: ?*INTERNET_BUFFERSA,
    dwFlags: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn HttpSendRequestExW(
    hRequest: ?*opaque{},
    lpBuffersIn: ?*INTERNET_BUFFERSW,
    lpBuffersOut: ?*INTERNET_BUFFERSW,
    dwFlags: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn HttpEndRequestA(
    hRequest: ?*opaque{},
    lpBuffersOut: ?*INTERNET_BUFFERSA,
    dwFlags: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn HttpEndRequestW(
    hRequest: ?*opaque{},
    lpBuffersOut: ?*INTERNET_BUFFERSW,
    dwFlags: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn HttpQueryInfoA(
    hRequest: ?*opaque{},
    dwInfoLevel: u32,
    lpBuffer: ?*opaque{},
    lpdwBufferLength: ?*u32,
    lpdwIndex: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn HttpQueryInfoW(
    hRequest: ?*opaque{},
    dwInfoLevel: u32,
    lpBuffer: ?*opaque{},
    lpdwBufferLength: ?*u32,
    lpdwIndex: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetSetCookieA(
    lpszUrl: ?*i8,
    lpszCookieName: ?*i8,
    lpszCookieData: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetSetCookieW(
    lpszUrl: ?*u16,
    lpszCookieName: ?*u16,
    lpszCookieData: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetGetCookieA(
    lpszUrl: ?*i8,
    lpszCookieName: ?*i8,
    lpszCookieData: ?*i8,
    lpdwSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetGetCookieW(
    lpszUrl: ?*u16,
    lpszCookieName: ?*u16,
    lpszCookieData: ?*u16,
    lpdwSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetSetCookieExA(
    lpszUrl: ?*i8,
    lpszCookieName: ?*i8,
    lpszCookieData: ?*i8,
    dwFlags: u32,
    dwReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetSetCookieExW(
    lpszUrl: ?*u16,
    lpszCookieName: ?*u16,
    lpszCookieData: ?*u16,
    dwFlags: u32,
    dwReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetGetCookieExA(
    lpszUrl: ?*i8,
    lpszCookieName: ?*i8,
    lpszCookieData: ?*i8,
    lpdwSize: ?*u32,
    dwFlags: u32,
    lpReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetGetCookieExW(
    lpszUrl: ?*u16,
    lpszCookieName: ?*u16,
    lpszCookieData: ?*u16,
    lpdwSize: ?*u32,
    dwFlags: u32,
    lpReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetFreeCookies(
    pCookies: ?*INTERNET_COOKIE2,
    dwCookieCount: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetGetCookieEx2(
    pcwszUrl: ?*u16,
    pcwszCookieName: ?*u16,
    dwFlags: u32,
    ppCookies: ?*?*INTERNET_COOKIE2,
    pdwCookieCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetSetCookieEx2(
    pcwszUrl: ?*u16,
    pCookie: ?*INTERNET_COOKIE2,
    pcwszP3PPolicy: ?*u16,
    dwFlags: u32,
    pdwCookieState: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetAttemptConnect(
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetCheckConnectionA(
    lpszUrl: ?*i8,
    dwFlags: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetCheckConnectionW(
    lpszUrl: ?*u16,
    dwFlags: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn ResumeSuspendedDownload(
    hRequest: ?*opaque{},
    dwResultCode: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetErrorDlg(
    hWnd: HWND,
    hRequest: ?*opaque{},
    dwError: u32,
    dwFlags: u32,
    lppvData: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetConfirmZoneCrossingA(
    hWnd: HWND,
    szUrlPrev: ?*i8,
    szUrlNew: ?*i8,
    bPost: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetConfirmZoneCrossingW(
    hWnd: HWND,
    szUrlPrev: ?*u16,
    szUrlNew: ?*u16,
    bPost: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetConfirmZoneCrossing(
    hWnd: HWND,
    szUrlPrev: ?*i8,
    szUrlNew: ?*i8,
    bPost: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn CreateUrlCacheEntryA(
    lpszUrlName: ?*i8,
    dwExpectedFileSize: u32,
    lpszFileExtension: ?*i8,
    lpszFileName: ?*i8,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn CreateUrlCacheEntryW(
    lpszUrlName: ?*u16,
    dwExpectedFileSize: u32,
    lpszFileExtension: ?*u16,
    lpszFileName: ?*u16,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn CommitUrlCacheEntryA(
    lpszUrlName: ?*i8,
    lpszLocalFileName: ?*i8,
    ExpireTime: FILETIME,
    LastModifiedTime: FILETIME,
    CacheEntryType: u32,
    lpHeaderInfo: ?*u8,
    cchHeaderInfo: u32,
    lpszFileExtension: ?*i8,
    lpszOriginalUrl: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn CommitUrlCacheEntryW(
    lpszUrlName: ?*u16,
    lpszLocalFileName: ?*u16,
    ExpireTime: FILETIME,
    LastModifiedTime: FILETIME,
    CacheEntryType: u32,
    lpszHeaderInfo: ?*u16,
    cchHeaderInfo: u32,
    lpszFileExtension: ?*u16,
    lpszOriginalUrl: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn RetrieveUrlCacheEntryFileA(
    lpszUrlName: ?*i8,
    lpCacheEntryInfo: ?*INTERNET_CACHE_ENTRY_INFOA,
    lpcbCacheEntryInfo: ?*u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn RetrieveUrlCacheEntryFileW(
    lpszUrlName: ?*u16,
    lpCacheEntryInfo: ?*INTERNET_CACHE_ENTRY_INFOW,
    lpcbCacheEntryInfo: ?*u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn UnlockUrlCacheEntryFileA(
    lpszUrlName: ?*i8,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn UnlockUrlCacheEntryFileW(
    lpszUrlName: ?*u16,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn UnlockUrlCacheEntryFile(
    lpszUrlName: ?*i8,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn RetrieveUrlCacheEntryStreamA(
    lpszUrlName: ?*i8,
    lpCacheEntryInfo: ?*INTERNET_CACHE_ENTRY_INFOA,
    lpcbCacheEntryInfo: ?*u32,
    fRandomRead: BOOL,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn RetrieveUrlCacheEntryStreamW(
    lpszUrlName: ?*u16,
    lpCacheEntryInfo: ?*INTERNET_CACHE_ENTRY_INFOW,
    lpcbCacheEntryInfo: ?*u32,
    fRandomRead: BOOL,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn ReadUrlCacheEntryStream(
    hUrlCacheStream: HANDLE,
    dwLocation: u32,
    lpBuffer: ?*opaque{},
    lpdwLen: ?*u32,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn ReadUrlCacheEntryStreamEx(
    hUrlCacheStream: HANDLE,
    qwLocation: u64,
    lpBuffer: ?*opaque{},
    lpdwLen: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn UnlockUrlCacheEntryStream(
    hUrlCacheStream: HANDLE,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn GetUrlCacheEntryInfoA(
    lpszUrlName: ?*i8,
    lpCacheEntryInfo: ?*INTERNET_CACHE_ENTRY_INFOA,
    lpcbCacheEntryInfo: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn GetUrlCacheEntryInfoW(
    lpszUrlName: ?*u16,
    lpCacheEntryInfo: ?*INTERNET_CACHE_ENTRY_INFOW,
    lpcbCacheEntryInfo: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FindFirstUrlCacheGroup(
    dwFlags: u32,
    dwFilter: u32,
    lpSearchCondition: ?*opaque{},
    dwSearchCondition: u32,
    lpGroupId: ?*i64,
    lpReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FindNextUrlCacheGroup(
    hFind: HANDLE,
    lpGroupId: ?*i64,
    lpReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn GetUrlCacheGroupAttributeA(
    gid: i64,
    dwFlags: u32,
    dwAttributes: u32,
    lpGroupInfo: ?*INTERNET_CACHE_GROUP_INFOA,
    lpcbGroupInfo: ?*u32,
    lpReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn GetUrlCacheGroupAttributeW(
    gid: i64,
    dwFlags: u32,
    dwAttributes: u32,
    lpGroupInfo: ?*INTERNET_CACHE_GROUP_INFOW,
    lpcbGroupInfo: ?*u32,
    lpReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn SetUrlCacheGroupAttributeA(
    gid: i64,
    dwFlags: u32,
    dwAttributes: u32,
    lpGroupInfo: ?*INTERNET_CACHE_GROUP_INFOA,
    lpReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn SetUrlCacheGroupAttributeW(
    gid: i64,
    dwFlags: u32,
    dwAttributes: u32,
    lpGroupInfo: ?*INTERNET_CACHE_GROUP_INFOW,
    lpReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn GetUrlCacheEntryInfoExA(
    lpszUrl: ?*i8,
    lpCacheEntryInfo: ?*INTERNET_CACHE_ENTRY_INFOA,
    lpcbCacheEntryInfo: ?*u32,
    lpszRedirectUrl: ?*i8,
    lpcbRedirectUrl: ?*u32,
    lpReserved: ?*opaque{},
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn GetUrlCacheEntryInfoExW(
    lpszUrl: ?*u16,
    lpCacheEntryInfo: ?*INTERNET_CACHE_ENTRY_INFOW,
    lpcbCacheEntryInfo: ?*u32,
    lpszRedirectUrl: ?*u16,
    lpcbRedirectUrl: ?*u32,
    lpReserved: ?*opaque{},
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn SetUrlCacheEntryInfoA(
    lpszUrlName: ?*i8,
    lpCacheEntryInfo: ?*INTERNET_CACHE_ENTRY_INFOA,
    dwFieldControl: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn SetUrlCacheEntryInfoW(
    lpszUrlName: ?*u16,
    lpCacheEntryInfo: ?*INTERNET_CACHE_ENTRY_INFOW,
    dwFieldControl: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn CreateUrlCacheGroup(
    dwFlags: u32,
    lpReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i64;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn DeleteUrlCacheGroup(
    GroupId: i64,
    dwFlags: u32,
    lpReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn SetUrlCacheEntryGroupA(
    lpszUrlName: ?*i8,
    dwFlags: u32,
    GroupId: i64,
    pbGroupAttributes: ?*u8,
    cbGroupAttributes: u32,
    lpReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn SetUrlCacheEntryGroupW(
    lpszUrlName: ?*u16,
    dwFlags: u32,
    GroupId: i64,
    pbGroupAttributes: ?*u8,
    cbGroupAttributes: u32,
    lpReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn SetUrlCacheEntryGroup(
    lpszUrlName: ?*i8,
    dwFlags: u32,
    GroupId: i64,
    pbGroupAttributes: ?*u8,
    cbGroupAttributes: u32,
    lpReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FindFirstUrlCacheEntryExA(
    lpszUrlSearchPattern: ?*i8,
    dwFlags: u32,
    dwFilter: u32,
    GroupId: i64,
    lpFirstCacheEntryInfo: ?*INTERNET_CACHE_ENTRY_INFOA,
    lpcbCacheEntryInfo: ?*u32,
    lpGroupAttributes: ?*opaque{},
    lpcbGroupAttributes: ?*u32,
    lpReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FindFirstUrlCacheEntryExW(
    lpszUrlSearchPattern: ?*u16,
    dwFlags: u32,
    dwFilter: u32,
    GroupId: i64,
    lpFirstCacheEntryInfo: ?*INTERNET_CACHE_ENTRY_INFOW,
    lpcbCacheEntryInfo: ?*u32,
    lpGroupAttributes: ?*opaque{},
    lpcbGroupAttributes: ?*u32,
    lpReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FindNextUrlCacheEntryExA(
    hEnumHandle: HANDLE,
    lpNextCacheEntryInfo: ?*INTERNET_CACHE_ENTRY_INFOA,
    lpcbCacheEntryInfo: ?*u32,
    lpGroupAttributes: ?*opaque{},
    lpcbGroupAttributes: ?*u32,
    lpReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FindNextUrlCacheEntryExW(
    hEnumHandle: HANDLE,
    lpNextCacheEntryInfo: ?*INTERNET_CACHE_ENTRY_INFOW,
    lpcbCacheEntryInfo: ?*u32,
    lpGroupAttributes: ?*opaque{},
    lpcbGroupAttributes: ?*u32,
    lpReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FindFirstUrlCacheEntryA(
    lpszUrlSearchPattern: ?*i8,
    lpFirstCacheEntryInfo: ?*INTERNET_CACHE_ENTRY_INFOA,
    lpcbCacheEntryInfo: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FindFirstUrlCacheEntryW(
    lpszUrlSearchPattern: ?*u16,
    lpFirstCacheEntryInfo: ?*INTERNET_CACHE_ENTRY_INFOW,
    lpcbCacheEntryInfo: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FindNextUrlCacheEntryA(
    hEnumHandle: HANDLE,
    lpNextCacheEntryInfo: ?*INTERNET_CACHE_ENTRY_INFOA,
    lpcbCacheEntryInfo: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FindNextUrlCacheEntryW(
    hEnumHandle: HANDLE,
    lpNextCacheEntryInfo: ?*INTERNET_CACHE_ENTRY_INFOW,
    lpcbCacheEntryInfo: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FindCloseUrlCache(
    hEnumHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn DeleteUrlCacheEntryA(
    lpszUrlName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn DeleteUrlCacheEntryW(
    lpszUrlName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn DeleteUrlCacheEntry(
    lpszUrlName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetDialA(
    hwndParent: HWND,
    lpszConnectoid: ?*i8,
    dwFlags: u32,
    lpdwConnection: ?*?*opaque{},
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetDialW(
    hwndParent: HWND,
    lpszConnectoid: ?*u16,
    dwFlags: u32,
    lpdwConnection: ?*?*opaque{},
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetDial(
    hwndParent: HWND,
    lpszConnectoid: ?*i8,
    dwFlags: u32,
    lpdwConnection: ?*u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetHangUp(
    dwConnection: ?*opaque{},
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetGoOnlineA(
    lpszURL: ?*i8,
    hwndParent: HWND,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetGoOnlineW(
    lpszURL: ?*u16,
    hwndParent: HWND,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetGoOnline(
    lpszURL: ?*i8,
    hwndParent: HWND,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetAutodial(
    dwFlags: u32,
    hwndParent: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetAutodialHangup(
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetGetConnectedState(
    lpdwFlags: ?*u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetGetConnectedStateExA(
    lpdwFlags: ?*u32,
    lpszConnectionName: ?*i8,
    cchNameLen: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetGetConnectedStateExW(
    lpdwFlags: ?*u32,
    lpszConnectionName: ?*u16,
    cchNameLen: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn DeleteWpadCacheForNetworks(
    param0: WPAD_CACHE_DELETE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetInitializeAutoProxyDll(
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn DetectAutoProxyUrl(
    pszAutoProxyUrl: ?*i8,
    cchAutoProxyUrl: u32,
    dwDetectFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn CreateMD5SSOHash(
    pszChallengeInfo: ?*u16,
    pwszRealm: ?*u16,
    pwszTarget: ?*u16,
    pbHexHash: ?*u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn InternetGetConnectedStateEx(
    lpdwFlags: ?*u32,
    lpszConnectionName: ?*i8,
    dwNameLen: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetSetDialStateA(
    lpszConnectoid: ?*i8,
    dwState: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetSetDialStateW(
    lpszConnectoid: ?*u16,
    dwState: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetSetDialState(
    lpszConnectoid: ?*i8,
    dwState: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetSetPerSiteCookieDecisionA(
    pchHostName: ?*i8,
    dwDecision: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetSetPerSiteCookieDecisionW(
    pchHostName: ?*u16,
    dwDecision: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetGetPerSiteCookieDecisionA(
    pchHostName: ?*i8,
    pResult: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetGetPerSiteCookieDecisionW(
    pchHostName: ?*u16,
    pResult: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetClearAllPerSiteCookieDecisions(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetEnumPerSiteCookieDecisionA(
    pszSiteName: ?*i8,
    pcSiteNameSize: ?*u32,
    pdwDecision: ?*u32,
    dwIndex: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetEnumPerSiteCookieDecisionW(
    pszSiteName: ?*u16,
    pcSiteNameSize: ?*u32,
    pdwDecision: ?*u32,
    dwIndex: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn PrivacySetZonePreferenceW(
    dwZone: u32,
    dwType: u32,
    dwTemplate: u32,
    pszPreference: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn PrivacyGetZonePreferenceW(
    dwZone: u32,
    dwType: u32,
    pdwTemplate: ?*u32,
    pszBuffer: ?*u16,
    pdwBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn HttpIsHostHstsEnabled(
    pcwszUrl: ?*u16,
    pfIsHsts: ?*i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetAlgIdToStringA(
    ai: u32,
    lpstr: ?*i8,
    lpdwstrLength: ?*u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetAlgIdToStringW(
    ai: u32,
    lpstr: ?*u16,
    lpdwstrLength: ?*u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetSecurityProtocolToStringA(
    dwProtocol: u32,
    lpstr: ?*i8,
    lpdwstrLength: ?*u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetSecurityProtocolToStringW(
    dwProtocol: u32,
    lpstr: ?*u16,
    lpdwstrLength: ?*u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetGetSecurityInfoByURLA(
    lpszURL: ?*i8,
    ppCertChain: ?*?*CERT_CHAIN_CONTEXT,
    pdwSecureFlags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetGetSecurityInfoByURLW(
    lpszURL: ?*u16,
    ppCertChain: ?*?*CERT_CHAIN_CONTEXT,
    pdwSecureFlags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetGetSecurityInfoByURL(
    lpszURL: ?*i8,
    ppCertChain: ?*?*CERT_CHAIN_CONTEXT,
    pdwSecureFlags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn ShowSecurityInfo(
    hWndParent: HWND,
    pSecurityInfo: ?*INTERNET_SECURITY_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn ShowX509EncodedCertificate(
    hWndParent: HWND,
    lpCert: ?*u8,
    cbCert: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn ShowClientAuthCerts(
    hWndParent: HWND,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn ParseX509EncodedCertificateForListBoxEntry(
    lpCert: ?*u8,
    cbCert: u32,
    lpszListBoxEntry: ?*i8,
    lpdwListBoxEntry: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetShowSecurityInfoByURLA(
    lpszURL: ?*i8,
    hwndParent: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetShowSecurityInfoByURLW(
    lpszURL: ?*u16,
    hwndParent: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetShowSecurityInfoByURL(
    lpszURL: ?*i8,
    hwndParent: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetFortezzaCommand(
    dwCommand: u32,
    hwnd: HWND,
    dwReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetQueryFortezzaStatus(
    pdwStatus: ?*u32,
    dwReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetWriteFileExA(
    hFile: ?*opaque{},
    lpBuffersIn: ?*INTERNET_BUFFERSA,
    dwFlags: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetWriteFileExW(
    hFile: ?*opaque{},
    lpBuffersIn: ?*INTERNET_BUFFERSW,
    dwFlags: u32,
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn FindP3PPolicySymbol(
    pszSymbol: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn HttpGetServerCredentials(
    pwszUrl: ?*u16,
    ppwszUserName: ?*?*u16,
    ppwszPassword: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn HttpPushEnable(
    hRequest: ?*opaque{},
    pTransportSetting: ?*HTTP_PUSH_TRANSPORT_SETTING,
    phWait: ?*?*HTTP_PUSH_WAIT_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn HttpPushWait(
    hWait: ?*HTTP_PUSH_WAIT_HANDLE__,
    eType: HTTP_PUSH_WAIT_TYPE,
    pNotificationStatus: ?*HTTP_PUSH_NOTIFICATION_STATUS,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn HttpPushClose(
    hWait: ?*HTTP_PUSH_WAIT_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn HttpCheckDavComplianceA(
    lpszUrl: ?*i8,
    lpszComplianceToken: ?*i8,
    lpfFound: ?*i32,
    hWnd: HWND,
    lpvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn HttpCheckDavComplianceW(
    lpszUrl: ?*u16,
    lpszComplianceToken: ?*u16,
    lpfFound: ?*i32,
    hWnd: HWND,
    lpvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn IsUrlCacheEntryExpiredA(
    lpszUrlName: ?*i8,
    dwFlags: u32,
    pftLastModified: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn IsUrlCacheEntryExpiredW(
    lpszUrlName: ?*u16,
    dwFlags: u32,
    pftLastModified: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn CreateUrlCacheEntryExW(
    lpszUrlName: ?*u16,
    dwExpectedFileSize: u32,
    lpszFileExtension: ?*u16,
    lpszFileName: ?*u16,
    dwReserved: u32,
    fPreserveIncomingFileName: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn GetUrlCacheEntryBinaryBlob(
    pwszUrlName: ?*u16,
    dwType: ?*u32,
    pftExpireTime: ?*FILETIME,
    pftAccessTime: ?*FILETIME,
    pftModifiedTime: ?*FILETIME,
    ppbBlob: ?*?*u8,
    pcbBlob: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn CommitUrlCacheEntryBinaryBlob(
    pwszUrlName: ?*u16,
    dwType: u32,
    ftExpireTime: FILETIME,
    ftModifiedTime: FILETIME,
    pbBlob: ?*u8,
    cbBlob: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn CreateUrlCacheContainerA(
    Name: ?*i8,
    lpCachePrefix: ?*i8,
    lpszCachePath: ?*i8,
    KBCacheLimit: u32,
    dwContainerType: u32,
    dwOptions: u32,
    pvBuffer: ?*opaque{},
    cbBuffer: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn CreateUrlCacheContainerW(
    Name: ?*u16,
    lpCachePrefix: ?*u16,
    lpszCachePath: ?*u16,
    KBCacheLimit: u32,
    dwContainerType: u32,
    dwOptions: u32,
    pvBuffer: ?*opaque{},
    cbBuffer: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn DeleteUrlCacheContainerA(
    Name: ?*i8,
    dwOptions: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn DeleteUrlCacheContainerW(
    Name: ?*u16,
    dwOptions: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn FindFirstUrlCacheContainerA(
    pdwModified: ?*u32,
    lpContainerInfo: ?*INTERNET_CACHE_CONTAINER_INFOA,
    lpcbContainerInfo: ?*u32,
    dwOptions: u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn FindFirstUrlCacheContainerW(
    pdwModified: ?*u32,
    lpContainerInfo: ?*INTERNET_CACHE_CONTAINER_INFOW,
    lpcbContainerInfo: ?*u32,
    dwOptions: u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn FindNextUrlCacheContainerA(
    hEnumHandle: HANDLE,
    lpContainerInfo: ?*INTERNET_CACHE_CONTAINER_INFOA,
    lpcbContainerInfo: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn FindNextUrlCacheContainerW(
    hEnumHandle: HANDLE,
    lpContainerInfo: ?*INTERNET_CACHE_CONTAINER_INFOW,
    lpcbContainerInfo: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FreeUrlCacheSpaceA(
    lpszCachePath: ?*i8,
    dwSize: u32,
    dwFilter: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn FreeUrlCacheSpaceW(
    lpszCachePath: ?*u16,
    dwSize: u32,
    dwFilter: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn UrlCacheFreeGlobalSpace(
    ullTargetSize: u64,
    dwFilter: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn UrlCacheGetGlobalCacheSize(
    dwFilter: u32,
    pullSize: ?*u64,
    pullLimit: ?*u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn GetUrlCacheConfigInfoA(
    lpCacheConfigInfo: ?*INTERNET_CACHE_CONFIG_INFOA,
    lpcbCacheConfigInfo: ?*u32,
    dwFieldControl: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "WININET" fn GetUrlCacheConfigInfoW(
    lpCacheConfigInfo: ?*INTERNET_CACHE_CONFIG_INFOW,
    lpcbCacheConfigInfo: ?*u32,
    dwFieldControl: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn SetUrlCacheConfigInfoA(
    lpCacheConfigInfo: ?*INTERNET_CACHE_CONFIG_INFOA,
    dwFieldControl: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn SetUrlCacheConfigInfoW(
    lpCacheConfigInfo: ?*INTERNET_CACHE_CONFIG_INFOW,
    dwFieldControl: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn RunOnceUrlCache(
    hwnd: HWND,
    hinst: HINSTANCE,
    lpszCmd: ?*i8,
    nCmdShow: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn DeleteIE3Cache(
    hwnd: HWND,
    hinst: HINSTANCE,
    lpszCmd: ?*i8,
    nCmdShow: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn UpdateUrlCacheContentPath(
    szNewPath: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn RegisterUrlCacheNotification(
    hWnd: HWND,
    uMsg: u32,
    gid: i64,
    dwOpsFilter: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn GetUrlCacheHeaderData(
    nIdx: u32,
    lpdwData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn SetUrlCacheHeaderData(
    nIdx: u32,
    dwData: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn IncrementUrlCacheHeaderData(
    nIdx: u32,
    lpdwData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn LoadUrlCacheContent(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn AppCacheLookup(
    pwszUrl: ?*u16,
    dwFlags: u32,
    phAppCache: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn AppCacheCheckManifest(
    pwszMasterUrl: ?*u16,
    pwszManifestUrl: ?*u16,
    pbManifestData: ?*u8,
    dwManifestDataSize: u32,
    pbManifestResponseHeaders: ?*u8,
    dwManifestResponseHeadersSize: u32,
    peState: ?*APP_CACHE_STATE,
    phNewAppCache: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn AppCacheGetDownloadList(
    hAppCache: ?*opaque{},
    pDownloadList: ?*APP_CACHE_DOWNLOAD_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn AppCacheFreeDownloadList(
    pDownloadList: ?*APP_CACHE_DOWNLOAD_LIST,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn AppCacheFinalize(
    hAppCache: ?*opaque{},
    pbManifestData: ?*u8,
    dwManifestDataSize: u32,
    peState: ?*APP_CACHE_FINALIZE_STATE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn AppCacheGetFallbackUrl(
    hAppCache: ?*opaque{},
    pwszUrl: ?*u16,
    ppwszFallbackUrl: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn AppCacheGetManifestUrl(
    hAppCache: ?*opaque{},
    ppwszManifestUrl: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn AppCacheDuplicateHandle(
    hAppCache: ?*opaque{},
    phDuplicatedAppCache: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn AppCacheCloseHandle(
    hAppCache: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn AppCacheFreeGroupList(
    pAppCacheGroupList: ?*APP_CACHE_GROUP_LIST,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn AppCacheGetGroupList(
    pAppCacheGroupList: ?*APP_CACHE_GROUP_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn AppCacheGetInfo(
    hAppCache: ?*opaque{},
    pAppCacheInfo: ?*APP_CACHE_GROUP_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn AppCacheDeleteGroup(
    pwszManifestUrl: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn AppCacheFreeSpace(
    ftCutOff: FILETIME,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn AppCacheGetIEGroupList(
    pAppCacheGroupList: ?*APP_CACHE_GROUP_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn AppCacheDeleteIEGroup(
    pwszManifestUrl: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn AppCacheFreeIESpace(
    ftCutOff: FILETIME,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn AppCacheCreateAndCommitFile(
    hAppCache: ?*opaque{},
    pwszSourceFilePath: ?*u16,
    pwszUrl: ?*u16,
    pbResponseHeaders: ?*u8,
    dwResponseHeadersSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn HttpOpenDependencyHandle(
    hRequestHandle: ?*opaque{},
    fBackground: BOOL,
    phDependencyHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn HttpCloseDependencyHandle(
    hDependencyHandle: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn HttpDuplicateDependencyHandle(
    hDependencyHandle: ?*opaque{},
    phDuplicatedDependencyHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn HttpIndicatePageLoadComplete(
    hDependencyHandle: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn UrlCacheFreeEntryInfo(
    pCacheEntryInfo: ?*URLCACHE_ENTRY_INFO,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn UrlCacheGetEntryInfo(
    hAppCache: ?*opaque{},
    pcwszUrl: ?*u16,
    pCacheEntryInfo: ?*URLCACHE_ENTRY_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn UrlCacheCloseEntryHandle(
    hEntryFile: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn UrlCacheRetrieveEntryFile(
    hAppCache: ?*opaque{},
    pcwszUrl: ?*u16,
    pCacheEntryInfo: ?*URLCACHE_ENTRY_INFO,
    phEntryFile: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn UrlCacheReadEntryStream(
    hUrlCacheStream: ?*opaque{},
    ullLocation: u64,
    pBuffer: ?*opaque{},
    dwBufferLen: u32,
    pdwBufferLen: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn UrlCacheRetrieveEntryStream(
    hAppCache: ?*opaque{},
    pcwszUrl: ?*u16,
    fRandomRead: BOOL,
    pCacheEntryInfo: ?*URLCACHE_ENTRY_INFO,
    phEntryStream: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn UrlCacheUpdateEntryExtraData(
    hAppCache: ?*opaque{},
    pcwszUrl: ?*u16,
    pbExtraData: ?*u8,
    cbExtraData: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn UrlCacheCreateContainer(
    pwszName: ?*u16,
    pwszPrefix: ?*u16,
    pwszDirectory: ?*u16,
    ullLimit: u64,
    dwOptions: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn UrlCacheCheckEntriesExist(
    rgpwszUrls: ?*?*u16,
    cEntries: u32,
    rgfExist: ?*i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn UrlCacheGetContentPaths(
    pppwszDirectories: ?*?*?*u16,
    pcDirectories: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn UrlCacheGetGlobalLimit(
    limitType: URL_CACHE_LIMIT_TYPE,
    pullLimit: ?*u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn UrlCacheSetGlobalLimit(
    limitType: URL_CACHE_LIMIT_TYPE,
    ullLimit: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn UrlCacheReloadSettings(
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn UrlCacheContainerSetEntryMaximumAge(
    pwszPrefix: ?*u16,
    dwEntryMaxAge: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn UrlCacheFindFirstEntry(
    pwszPrefix: ?*u16,
    dwFlags: u32,
    dwFilter: u32,
    GroupId: i64,
    pCacheEntryInfo: ?*URLCACHE_ENTRY_INFO,
    phFind: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn UrlCacheFindNextEntry(
    hFind: HANDLE,
    pCacheEntryInfo: ?*URLCACHE_ENTRY_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn UrlCacheServer(
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn ReadGuidsForConnectedNetworks(
    pcNetworks: ?*u32,
    pppwszNetworkGuids: ?*?*?*u16,
    pppbstrNetworkNames: ?*?*BSTR,
    pppwszGWMacs: ?*?*?*u16,
    pcGatewayMacs: ?*u32,
    pdwFlags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn IsHostInProxyBypassList(
    tScheme: INTERNET_SCHEME,
    lpszHost: ?*i8,
    cchHost: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetFreeProxyInfoList(
    pProxyInfoList: ?*WININET_PROXY_INFO_LIST,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetGetProxyForUrl(
    hInternet: ?*opaque{},
    pcwszUrl: ?*u16,
    pProxyInfoList: ?*WININET_PROXY_INFO_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn DoConnectoidsExist(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn GetDiskInfoA(
    pszPath: ?*i8,
    pdwClusterSize: ?*u32,
    pdlAvail: ?*u64,
    pdlTotal: ?*u64,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn PerformOperationOverUrlCacheA(
    pszUrlSearchPattern: ?*i8,
    dwFlags: u32,
    dwFilter: u32,
    GroupId: i64,
    pReserved1: ?*opaque{},
    pdwReserved2: ?*u32,
    pReserved3: ?*opaque{},
    op: CACHE_OPERATOR,
    pOperatorData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn IsProfilesEnabled(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternalInternetGetCookie(
    lpszUrl: ?*i8,
    lpszCookieData: ?*i8,
    lpdwDataSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn ImportCookieFileA(
    szFilename: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn ImportCookieFileW(
    szFilename: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn ExportCookieFileA(
    szFilename: ?*i8,
    fAppend: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn ExportCookieFileW(
    szFilename: ?*u16,
    fAppend: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn IsDomainLegalCookieDomainA(
    pchDomain: ?*i8,
    pchFullDomain: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn IsDomainLegalCookieDomainW(
    pchDomain: ?*u16,
    pchFullDomain: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn HttpWebSocketCompleteUpgrade(
    hRequest: ?*opaque{},
    dwContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn HttpWebSocketSend(
    hWebSocket: ?*opaque{},
    BufferType: HTTP_WEB_SOCKET_BUFFER_TYPE,
    pvBuffer: ?*opaque{},
    dwBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn HttpWebSocketReceive(
    hWebSocket: ?*opaque{},
    pvBuffer: ?*opaque{},
    dwBufferLength: u32,
    pdwBytesRead: ?*u32,
    pBufferType: ?*HTTP_WEB_SOCKET_BUFFER_TYPE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn HttpWebSocketClose(
    hWebSocket: ?*opaque{},
    usStatus: u16,
    pvReason: ?*opaque{},
    dwReasonLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn HttpWebSocketShutdown(
    hWebSocket: ?*opaque{},
    usStatus: u16,
    pvReason: ?*opaque{},
    dwReasonLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn HttpWebSocketQueryCloseStatus(
    hWebSocket: ?*opaque{},
    pusStatus: ?*u16,
    pvReason: ?*opaque{},
    dwReasonLength: u32,
    pdwReasonLengthConsumed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "WININET" fn InternetConvertUrlFromWireToWideChar(
    pcszUrl: ?*i8,
    cchUrl: u32,
    pcwszBaseUrl: ?*u16,
    dwCodePageHost: u32,
    dwCodePagePath: u32,
    fEncodePathExtra: BOOL,
    dwCodePageExtra: u32,
    ppwszConvertedUrl: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const INTERNET_PER_CONN_OPTION = INTERNET_PER_CONN_OPTIONA;
        pub const INTERNET_PER_CONN_OPTION_LIST = INTERNET_PER_CONN_OPTION_LISTA;
        pub const URL_COMPONENTS = URL_COMPONENTSA;
        pub const INTERNET_BUFFERS = INTERNET_BUFFERSA;
        pub const GOPHER_FIND_DATA = GOPHER_FIND_DATAA;
        pub const INTERNET_CACHE_ENTRY_INFO = INTERNET_CACHE_ENTRY_INFOA;
        pub const INTERNET_CACHE_GROUP_INFO = INTERNET_CACHE_GROUP_INFOA;
        pub const INTERNET_CACHE_CONFIG_PATH_ENTRY = INTERNET_CACHE_CONFIG_PATH_ENTRYA;
        pub const INTERNET_CACHE_CONFIG_INFO = INTERNET_CACHE_CONFIG_INFOA;
        pub const INTERNET_CACHE_CONTAINER_INFO = INTERNET_CACHE_CONTAINER_INFOA;
        pub const InternetCrackUrl = InternetCrackUrlA;
        pub const InternetCreateUrl = InternetCreateUrlA;
        pub const InternetCanonicalizeUrl = InternetCanonicalizeUrlA;
        pub const InternetCombineUrl = InternetCombineUrlA;
        pub const InternetOpen = InternetOpenA;
        pub const InternetConnect = InternetConnectA;
        pub const InternetOpenUrl = InternetOpenUrlA;
        pub const InternetReadFileEx = InternetReadFileExA;
        pub const InternetFindNextFile = InternetFindNextFileA;
        pub const InternetQueryOption = InternetQueryOptionA;
        pub const InternetSetOption = InternetSetOptionA;
        pub const InternetSetOptionEx = InternetSetOptionExA;
        pub const InternetGetLastResponseInfo = InternetGetLastResponseInfoA;
        pub const FtpFindFirstFile = FtpFindFirstFileA;
        pub const FtpGetFile = FtpGetFileA;
        pub const FtpPutFile = FtpPutFileA;
        pub const FtpDeleteFile = FtpDeleteFileA;
        pub const FtpRenameFile = FtpRenameFileA;
        pub const FtpOpenFile = FtpOpenFileA;
        pub const FtpCreateDirectory = FtpCreateDirectoryA;
        pub const FtpRemoveDirectory = FtpRemoveDirectoryA;
        pub const FtpSetCurrentDirectory = FtpSetCurrentDirectoryA;
        pub const FtpGetCurrentDirectory = FtpGetCurrentDirectoryA;
        pub const FtpCommand = FtpCommandA;
        pub const GopherCreateLocator = GopherCreateLocatorA;
        pub const GopherGetLocatorType = GopherGetLocatorTypeA;
        pub const GopherFindFirstFile = GopherFindFirstFileA;
        pub const GopherOpenFile = GopherOpenFileA;
        pub const GopherGetAttribute = GopherGetAttributeA;
        pub const HttpOpenRequest = HttpOpenRequestA;
        pub const HttpAddRequestHeaders = HttpAddRequestHeadersA;
        pub const HttpSendRequest = HttpSendRequestA;
        pub const HttpSendRequestEx = HttpSendRequestExA;
        pub const HttpEndRequest = HttpEndRequestA;
        pub const HttpQueryInfo = HttpQueryInfoA;
        pub const InternetSetCookie = InternetSetCookieA;
        pub const InternetGetCookie = InternetGetCookieA;
        pub const InternetSetCookieEx = InternetSetCookieExA;
        pub const InternetGetCookieEx = InternetGetCookieExA;
        pub const InternetCheckConnection = InternetCheckConnectionA;
        pub const CreateUrlCacheEntry = CreateUrlCacheEntryA;
        pub const CommitUrlCacheEntry = CommitUrlCacheEntryA;
        pub const RetrieveUrlCacheEntryFile = RetrieveUrlCacheEntryFileA;
        pub const RetrieveUrlCacheEntryStream = RetrieveUrlCacheEntryStreamA;
        pub const GetUrlCacheEntryInfo = GetUrlCacheEntryInfoA;
        pub const GetUrlCacheGroupAttribute = GetUrlCacheGroupAttributeA;
        pub const SetUrlCacheGroupAttribute = SetUrlCacheGroupAttributeA;
        pub const GetUrlCacheEntryInfoEx = GetUrlCacheEntryInfoExA;
        pub const SetUrlCacheEntryInfo = SetUrlCacheEntryInfoA;
        pub const FindFirstUrlCacheEntryEx = FindFirstUrlCacheEntryExA;
        pub const FindNextUrlCacheEntryEx = FindNextUrlCacheEntryExA;
        pub const FindFirstUrlCacheEntry = FindFirstUrlCacheEntryA;
        pub const FindNextUrlCacheEntry = FindNextUrlCacheEntryA;
        pub const InternetSetPerSiteCookieDecision = InternetSetPerSiteCookieDecisionA;
        pub const InternetGetPerSiteCookieDecision = InternetGetPerSiteCookieDecisionA;
        pub const InternetEnumPerSiteCookieDecision = InternetEnumPerSiteCookieDecisionA;
        pub const InternetAlgIdToString = InternetAlgIdToStringA;
        pub const InternetSecurityProtocolToString = InternetSecurityProtocolToStringA;
        pub const InternetWriteFileEx = InternetWriteFileExA;
        pub const HttpCheckDavCompliance = HttpCheckDavComplianceA;
        pub const IsUrlCacheEntryExpired = IsUrlCacheEntryExpiredA;
        pub const CreateUrlCacheContainer = CreateUrlCacheContainerA;
        pub const DeleteUrlCacheContainer = DeleteUrlCacheContainerA;
        pub const FindFirstUrlCacheContainer = FindFirstUrlCacheContainerA;
        pub const FindNextUrlCacheContainer = FindNextUrlCacheContainerA;
        pub const FreeUrlCacheSpace = FreeUrlCacheSpaceA;
        pub const GetUrlCacheConfigInfo = GetUrlCacheConfigInfoA;
        pub const SetUrlCacheConfigInfo = SetUrlCacheConfigInfoA;
        pub const ImportCookieFile = ImportCookieFileA;
        pub const ExportCookieFile = ExportCookieFileA;
        pub const IsDomainLegalCookieDomain = IsDomainLegalCookieDomainA;
    },
    .wide => struct {
        pub const INTERNET_PER_CONN_OPTION = INTERNET_PER_CONN_OPTIONW;
        pub const INTERNET_PER_CONN_OPTION_LIST = INTERNET_PER_CONN_OPTION_LISTW;
        pub const URL_COMPONENTS = URL_COMPONENTSW;
        pub const INTERNET_BUFFERS = INTERNET_BUFFERSW;
        pub const GOPHER_FIND_DATA = GOPHER_FIND_DATAW;
        pub const INTERNET_CACHE_ENTRY_INFO = INTERNET_CACHE_ENTRY_INFOW;
        pub const INTERNET_CACHE_GROUP_INFO = INTERNET_CACHE_GROUP_INFOW;
        pub const INTERNET_CACHE_CONFIG_PATH_ENTRY = INTERNET_CACHE_CONFIG_PATH_ENTRYW;
        pub const INTERNET_CACHE_CONFIG_INFO = INTERNET_CACHE_CONFIG_INFOW;
        pub const INTERNET_CACHE_CONTAINER_INFO = INTERNET_CACHE_CONTAINER_INFOW;
        pub const InternetCrackUrl = InternetCrackUrlW;
        pub const InternetCreateUrl = InternetCreateUrlW;
        pub const InternetCanonicalizeUrl = InternetCanonicalizeUrlW;
        pub const InternetCombineUrl = InternetCombineUrlW;
        pub const InternetOpen = InternetOpenW;
        pub const InternetConnect = InternetConnectW;
        pub const InternetOpenUrl = InternetOpenUrlW;
        pub const InternetReadFileEx = InternetReadFileExW;
        pub const InternetFindNextFile = InternetFindNextFileW;
        pub const InternetQueryOption = InternetQueryOptionW;
        pub const InternetSetOption = InternetSetOptionW;
        pub const InternetSetOptionEx = InternetSetOptionExW;
        pub const InternetGetLastResponseInfo = InternetGetLastResponseInfoW;
        pub const FtpFindFirstFile = FtpFindFirstFileW;
        pub const FtpGetFile = FtpGetFileW;
        pub const FtpPutFile = FtpPutFileW;
        pub const FtpDeleteFile = FtpDeleteFileW;
        pub const FtpRenameFile = FtpRenameFileW;
        pub const FtpOpenFile = FtpOpenFileW;
        pub const FtpCreateDirectory = FtpCreateDirectoryW;
        pub const FtpRemoveDirectory = FtpRemoveDirectoryW;
        pub const FtpSetCurrentDirectory = FtpSetCurrentDirectoryW;
        pub const FtpGetCurrentDirectory = FtpGetCurrentDirectoryW;
        pub const FtpCommand = FtpCommandW;
        pub const GopherCreateLocator = GopherCreateLocatorW;
        pub const GopherGetLocatorType = GopherGetLocatorTypeW;
        pub const GopherFindFirstFile = GopherFindFirstFileW;
        pub const GopherOpenFile = GopherOpenFileW;
        pub const GopherGetAttribute = GopherGetAttributeW;
        pub const HttpOpenRequest = HttpOpenRequestW;
        pub const HttpAddRequestHeaders = HttpAddRequestHeadersW;
        pub const HttpSendRequest = HttpSendRequestW;
        pub const HttpSendRequestEx = HttpSendRequestExW;
        pub const HttpEndRequest = HttpEndRequestW;
        pub const HttpQueryInfo = HttpQueryInfoW;
        pub const InternetSetCookie = InternetSetCookieW;
        pub const InternetGetCookie = InternetGetCookieW;
        pub const InternetSetCookieEx = InternetSetCookieExW;
        pub const InternetGetCookieEx = InternetGetCookieExW;
        pub const InternetCheckConnection = InternetCheckConnectionW;
        pub const CreateUrlCacheEntry = CreateUrlCacheEntryW;
        pub const CommitUrlCacheEntry = CommitUrlCacheEntryW;
        pub const RetrieveUrlCacheEntryFile = RetrieveUrlCacheEntryFileW;
        pub const RetrieveUrlCacheEntryStream = RetrieveUrlCacheEntryStreamW;
        pub const GetUrlCacheEntryInfo = GetUrlCacheEntryInfoW;
        pub const GetUrlCacheGroupAttribute = GetUrlCacheGroupAttributeW;
        pub const SetUrlCacheGroupAttribute = SetUrlCacheGroupAttributeW;
        pub const GetUrlCacheEntryInfoEx = GetUrlCacheEntryInfoExW;
        pub const SetUrlCacheEntryInfo = SetUrlCacheEntryInfoW;
        pub const FindFirstUrlCacheEntryEx = FindFirstUrlCacheEntryExW;
        pub const FindNextUrlCacheEntryEx = FindNextUrlCacheEntryExW;
        pub const FindFirstUrlCacheEntry = FindFirstUrlCacheEntryW;
        pub const FindNextUrlCacheEntry = FindNextUrlCacheEntryW;
        pub const InternetSetPerSiteCookieDecision = InternetSetPerSiteCookieDecisionW;
        pub const InternetGetPerSiteCookieDecision = InternetGetPerSiteCookieDecisionW;
        pub const InternetEnumPerSiteCookieDecision = InternetEnumPerSiteCookieDecisionW;
        pub const InternetAlgIdToString = InternetAlgIdToStringW;
        pub const InternetSecurityProtocolToString = InternetSecurityProtocolToStringW;
        pub const InternetWriteFileEx = InternetWriteFileExW;
        pub const HttpCheckDavCompliance = HttpCheckDavComplianceW;
        pub const IsUrlCacheEntryExpired = IsUrlCacheEntryExpiredW;
        pub const CreateUrlCacheContainer = CreateUrlCacheContainerW;
        pub const DeleteUrlCacheContainer = DeleteUrlCacheContainerW;
        pub const FindFirstUrlCacheContainer = FindFirstUrlCacheContainerW;
        pub const FindNextUrlCacheContainer = FindNextUrlCacheContainerW;
        pub const FreeUrlCacheSpace = FreeUrlCacheSpaceW;
        pub const GetUrlCacheConfigInfo = GetUrlCacheConfigInfoW;
        pub const SetUrlCacheConfigInfo = SetUrlCacheConfigInfoW;
        pub const ImportCookieFile = ImportCookieFileW;
        pub const ExportCookieFile = ExportCookieFileW;
        pub const IsDomainLegalCookieDomain = IsDomainLegalCookieDomainW;
    },
    else => if (@import("builtin").is_test) struct {
        pub const INTERNET_PER_CONN_OPTION = *opaque{};
        pub const INTERNET_PER_CONN_OPTION_LIST = *opaque{};
        pub const URL_COMPONENTS = *opaque{};
        pub const INTERNET_BUFFERS = *opaque{};
        pub const GOPHER_FIND_DATA = *opaque{};
        pub const INTERNET_CACHE_ENTRY_INFO = *opaque{};
        pub const INTERNET_CACHE_GROUP_INFO = *opaque{};
        pub const INTERNET_CACHE_CONFIG_PATH_ENTRY = *opaque{};
        pub const INTERNET_CACHE_CONFIG_INFO = *opaque{};
        pub const INTERNET_CACHE_CONTAINER_INFO = *opaque{};
        pub const InternetCrackUrl = *opaque{};
        pub const InternetCreateUrl = *opaque{};
        pub const InternetCanonicalizeUrl = *opaque{};
        pub const InternetCombineUrl = *opaque{};
        pub const InternetOpen = *opaque{};
        pub const InternetConnect = *opaque{};
        pub const InternetOpenUrl = *opaque{};
        pub const InternetReadFileEx = *opaque{};
        pub const InternetFindNextFile = *opaque{};
        pub const InternetQueryOption = *opaque{};
        pub const InternetSetOption = *opaque{};
        pub const InternetSetOptionEx = *opaque{};
        pub const InternetGetLastResponseInfo = *opaque{};
        pub const FtpFindFirstFile = *opaque{};
        pub const FtpGetFile = *opaque{};
        pub const FtpPutFile = *opaque{};
        pub const FtpDeleteFile = *opaque{};
        pub const FtpRenameFile = *opaque{};
        pub const FtpOpenFile = *opaque{};
        pub const FtpCreateDirectory = *opaque{};
        pub const FtpRemoveDirectory = *opaque{};
        pub const FtpSetCurrentDirectory = *opaque{};
        pub const FtpGetCurrentDirectory = *opaque{};
        pub const FtpCommand = *opaque{};
        pub const GopherCreateLocator = *opaque{};
        pub const GopherGetLocatorType = *opaque{};
        pub const GopherFindFirstFile = *opaque{};
        pub const GopherOpenFile = *opaque{};
        pub const GopherGetAttribute = *opaque{};
        pub const HttpOpenRequest = *opaque{};
        pub const HttpAddRequestHeaders = *opaque{};
        pub const HttpSendRequest = *opaque{};
        pub const HttpSendRequestEx = *opaque{};
        pub const HttpEndRequest = *opaque{};
        pub const HttpQueryInfo = *opaque{};
        pub const InternetSetCookie = *opaque{};
        pub const InternetGetCookie = *opaque{};
        pub const InternetSetCookieEx = *opaque{};
        pub const InternetGetCookieEx = *opaque{};
        pub const InternetCheckConnection = *opaque{};
        pub const CreateUrlCacheEntry = *opaque{};
        pub const CommitUrlCacheEntry = *opaque{};
        pub const RetrieveUrlCacheEntryFile = *opaque{};
        pub const RetrieveUrlCacheEntryStream = *opaque{};
        pub const GetUrlCacheEntryInfo = *opaque{};
        pub const GetUrlCacheGroupAttribute = *opaque{};
        pub const SetUrlCacheGroupAttribute = *opaque{};
        pub const GetUrlCacheEntryInfoEx = *opaque{};
        pub const SetUrlCacheEntryInfo = *opaque{};
        pub const FindFirstUrlCacheEntryEx = *opaque{};
        pub const FindNextUrlCacheEntryEx = *opaque{};
        pub const FindFirstUrlCacheEntry = *opaque{};
        pub const FindNextUrlCacheEntry = *opaque{};
        pub const InternetSetPerSiteCookieDecision = *opaque{};
        pub const InternetGetPerSiteCookieDecision = *opaque{};
        pub const InternetEnumPerSiteCookieDecision = *opaque{};
        pub const InternetAlgIdToString = *opaque{};
        pub const InternetSecurityProtocolToString = *opaque{};
        pub const InternetWriteFileEx = *opaque{};
        pub const HttpCheckDavCompliance = *opaque{};
        pub const IsUrlCacheEntryExpired = *opaque{};
        pub const CreateUrlCacheContainer = *opaque{};
        pub const DeleteUrlCacheContainer = *opaque{};
        pub const FindFirstUrlCacheContainer = *opaque{};
        pub const FindNextUrlCacheContainer = *opaque{};
        pub const FreeUrlCacheSpace = *opaque{};
        pub const GetUrlCacheConfigInfo = *opaque{};
        pub const SetUrlCacheConfigInfo = *opaque{};
        pub const ImportCookieFile = *opaque{};
        pub const ExportCookieFile = *opaque{};
        pub const IsDomainLegalCookieDomain = *opaque{};
    } else struct {
        pub const INTERNET_PER_CONN_OPTION = @compileError("'INTERNET_PER_CONN_OPTION' requires that UNICODE be set to true or false in the root module");
        pub const INTERNET_PER_CONN_OPTION_LIST = @compileError("'INTERNET_PER_CONN_OPTION_LIST' requires that UNICODE be set to true or false in the root module");
        pub const URL_COMPONENTS = @compileError("'URL_COMPONENTS' requires that UNICODE be set to true or false in the root module");
        pub const INTERNET_BUFFERS = @compileError("'INTERNET_BUFFERS' requires that UNICODE be set to true or false in the root module");
        pub const GOPHER_FIND_DATA = @compileError("'GOPHER_FIND_DATA' requires that UNICODE be set to true or false in the root module");
        pub const INTERNET_CACHE_ENTRY_INFO = @compileError("'INTERNET_CACHE_ENTRY_INFO' requires that UNICODE be set to true or false in the root module");
        pub const INTERNET_CACHE_GROUP_INFO = @compileError("'INTERNET_CACHE_GROUP_INFO' requires that UNICODE be set to true or false in the root module");
        pub const INTERNET_CACHE_CONFIG_PATH_ENTRY = @compileError("'INTERNET_CACHE_CONFIG_PATH_ENTRY' requires that UNICODE be set to true or false in the root module");
        pub const INTERNET_CACHE_CONFIG_INFO = @compileError("'INTERNET_CACHE_CONFIG_INFO' requires that UNICODE be set to true or false in the root module");
        pub const INTERNET_CACHE_CONTAINER_INFO = @compileError("'INTERNET_CACHE_CONTAINER_INFO' requires that UNICODE be set to true or false in the root module");
        pub const InternetCrackUrl = @compileError("'InternetCrackUrl' requires that UNICODE be set to true or false in the root module");
        pub const InternetCreateUrl = @compileError("'InternetCreateUrl' requires that UNICODE be set to true or false in the root module");
        pub const InternetCanonicalizeUrl = @compileError("'InternetCanonicalizeUrl' requires that UNICODE be set to true or false in the root module");
        pub const InternetCombineUrl = @compileError("'InternetCombineUrl' requires that UNICODE be set to true or false in the root module");
        pub const InternetOpen = @compileError("'InternetOpen' requires that UNICODE be set to true or false in the root module");
        pub const InternetConnect = @compileError("'InternetConnect' requires that UNICODE be set to true or false in the root module");
        pub const InternetOpenUrl = @compileError("'InternetOpenUrl' requires that UNICODE be set to true or false in the root module");
        pub const InternetReadFileEx = @compileError("'InternetReadFileEx' requires that UNICODE be set to true or false in the root module");
        pub const InternetFindNextFile = @compileError("'InternetFindNextFile' requires that UNICODE be set to true or false in the root module");
        pub const InternetQueryOption = @compileError("'InternetQueryOption' requires that UNICODE be set to true or false in the root module");
        pub const InternetSetOption = @compileError("'InternetSetOption' requires that UNICODE be set to true or false in the root module");
        pub const InternetSetOptionEx = @compileError("'InternetSetOptionEx' requires that UNICODE be set to true or false in the root module");
        pub const InternetGetLastResponseInfo = @compileError("'InternetGetLastResponseInfo' requires that UNICODE be set to true or false in the root module");
        pub const FtpFindFirstFile = @compileError("'FtpFindFirstFile' requires that UNICODE be set to true or false in the root module");
        pub const FtpGetFile = @compileError("'FtpGetFile' requires that UNICODE be set to true or false in the root module");
        pub const FtpPutFile = @compileError("'FtpPutFile' requires that UNICODE be set to true or false in the root module");
        pub const FtpDeleteFile = @compileError("'FtpDeleteFile' requires that UNICODE be set to true or false in the root module");
        pub const FtpRenameFile = @compileError("'FtpRenameFile' requires that UNICODE be set to true or false in the root module");
        pub const FtpOpenFile = @compileError("'FtpOpenFile' requires that UNICODE be set to true or false in the root module");
        pub const FtpCreateDirectory = @compileError("'FtpCreateDirectory' requires that UNICODE be set to true or false in the root module");
        pub const FtpRemoveDirectory = @compileError("'FtpRemoveDirectory' requires that UNICODE be set to true or false in the root module");
        pub const FtpSetCurrentDirectory = @compileError("'FtpSetCurrentDirectory' requires that UNICODE be set to true or false in the root module");
        pub const FtpGetCurrentDirectory = @compileError("'FtpGetCurrentDirectory' requires that UNICODE be set to true or false in the root module");
        pub const FtpCommand = @compileError("'FtpCommand' requires that UNICODE be set to true or false in the root module");
        pub const GopherCreateLocator = @compileError("'GopherCreateLocator' requires that UNICODE be set to true or false in the root module");
        pub const GopherGetLocatorType = @compileError("'GopherGetLocatorType' requires that UNICODE be set to true or false in the root module");
        pub const GopherFindFirstFile = @compileError("'GopherFindFirstFile' requires that UNICODE be set to true or false in the root module");
        pub const GopherOpenFile = @compileError("'GopherOpenFile' requires that UNICODE be set to true or false in the root module");
        pub const GopherGetAttribute = @compileError("'GopherGetAttribute' requires that UNICODE be set to true or false in the root module");
        pub const HttpOpenRequest = @compileError("'HttpOpenRequest' requires that UNICODE be set to true or false in the root module");
        pub const HttpAddRequestHeaders = @compileError("'HttpAddRequestHeaders' requires that UNICODE be set to true or false in the root module");
        pub const HttpSendRequest = @compileError("'HttpSendRequest' requires that UNICODE be set to true or false in the root module");
        pub const HttpSendRequestEx = @compileError("'HttpSendRequestEx' requires that UNICODE be set to true or false in the root module");
        pub const HttpEndRequest = @compileError("'HttpEndRequest' requires that UNICODE be set to true or false in the root module");
        pub const HttpQueryInfo = @compileError("'HttpQueryInfo' requires that UNICODE be set to true or false in the root module");
        pub const InternetSetCookie = @compileError("'InternetSetCookie' requires that UNICODE be set to true or false in the root module");
        pub const InternetGetCookie = @compileError("'InternetGetCookie' requires that UNICODE be set to true or false in the root module");
        pub const InternetSetCookieEx = @compileError("'InternetSetCookieEx' requires that UNICODE be set to true or false in the root module");
        pub const InternetGetCookieEx = @compileError("'InternetGetCookieEx' requires that UNICODE be set to true or false in the root module");
        pub const InternetCheckConnection = @compileError("'InternetCheckConnection' requires that UNICODE be set to true or false in the root module");
        pub const CreateUrlCacheEntry = @compileError("'CreateUrlCacheEntry' requires that UNICODE be set to true or false in the root module");
        pub const CommitUrlCacheEntry = @compileError("'CommitUrlCacheEntry' requires that UNICODE be set to true or false in the root module");
        pub const RetrieveUrlCacheEntryFile = @compileError("'RetrieveUrlCacheEntryFile' requires that UNICODE be set to true or false in the root module");
        pub const RetrieveUrlCacheEntryStream = @compileError("'RetrieveUrlCacheEntryStream' requires that UNICODE be set to true or false in the root module");
        pub const GetUrlCacheEntryInfo = @compileError("'GetUrlCacheEntryInfo' requires that UNICODE be set to true or false in the root module");
        pub const GetUrlCacheGroupAttribute = @compileError("'GetUrlCacheGroupAttribute' requires that UNICODE be set to true or false in the root module");
        pub const SetUrlCacheGroupAttribute = @compileError("'SetUrlCacheGroupAttribute' requires that UNICODE be set to true or false in the root module");
        pub const GetUrlCacheEntryInfoEx = @compileError("'GetUrlCacheEntryInfoEx' requires that UNICODE be set to true or false in the root module");
        pub const SetUrlCacheEntryInfo = @compileError("'SetUrlCacheEntryInfo' requires that UNICODE be set to true or false in the root module");
        pub const FindFirstUrlCacheEntryEx = @compileError("'FindFirstUrlCacheEntryEx' requires that UNICODE be set to true or false in the root module");
        pub const FindNextUrlCacheEntryEx = @compileError("'FindNextUrlCacheEntryEx' requires that UNICODE be set to true or false in the root module");
        pub const FindFirstUrlCacheEntry = @compileError("'FindFirstUrlCacheEntry' requires that UNICODE be set to true or false in the root module");
        pub const FindNextUrlCacheEntry = @compileError("'FindNextUrlCacheEntry' requires that UNICODE be set to true or false in the root module");
        pub const InternetSetPerSiteCookieDecision = @compileError("'InternetSetPerSiteCookieDecision' requires that UNICODE be set to true or false in the root module");
        pub const InternetGetPerSiteCookieDecision = @compileError("'InternetGetPerSiteCookieDecision' requires that UNICODE be set to true or false in the root module");
        pub const InternetEnumPerSiteCookieDecision = @compileError("'InternetEnumPerSiteCookieDecision' requires that UNICODE be set to true or false in the root module");
        pub const InternetAlgIdToString = @compileError("'InternetAlgIdToString' requires that UNICODE be set to true or false in the root module");
        pub const InternetSecurityProtocolToString = @compileError("'InternetSecurityProtocolToString' requires that UNICODE be set to true or false in the root module");
        pub const InternetWriteFileEx = @compileError("'InternetWriteFileEx' requires that UNICODE be set to true or false in the root module");
        pub const HttpCheckDavCompliance = @compileError("'HttpCheckDavCompliance' requires that UNICODE be set to true or false in the root module");
        pub const IsUrlCacheEntryExpired = @compileError("'IsUrlCacheEntryExpired' requires that UNICODE be set to true or false in the root module");
        pub const CreateUrlCacheContainer = @compileError("'CreateUrlCacheContainer' requires that UNICODE be set to true or false in the root module");
        pub const DeleteUrlCacheContainer = @compileError("'DeleteUrlCacheContainer' requires that UNICODE be set to true or false in the root module");
        pub const FindFirstUrlCacheContainer = @compileError("'FindFirstUrlCacheContainer' requires that UNICODE be set to true or false in the root module");
        pub const FindNextUrlCacheContainer = @compileError("'FindNextUrlCacheContainer' requires that UNICODE be set to true or false in the root module");
        pub const FreeUrlCacheSpace = @compileError("'FreeUrlCacheSpace' requires that UNICODE be set to true or false in the root module");
        pub const GetUrlCacheConfigInfo = @compileError("'GetUrlCacheConfigInfo' requires that UNICODE be set to true or false in the root module");
        pub const SetUrlCacheConfigInfo = @compileError("'SetUrlCacheConfigInfo' requires that UNICODE be set to true or false in the root module");
        pub const ImportCookieFile = @compileError("'ImportCookieFile' requires that UNICODE be set to true or false in the root module");
        pub const ExportCookieFile = @compileError("'ExportCookieFile' requires that UNICODE be set to true or false in the root module");
        pub const IsDomainLegalCookieDomain = @compileError("'IsDomainLegalCookieDomain' requires that UNICODE be set to true or false in the root module");
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const FILETIME = @import("windowsprogramming.zig").FILETIME;
const BOOL = @import("systemservices.zig").BOOL;
const CERT_CONTEXT = @import("security.zig").CERT_CONTEXT;
const CERT_CHAIN_CONTEXT = @import("security.zig").CERT_CHAIN_CONTEXT;
const SecPkgContext_ConnectionInfo = @import("security.zig").SecPkgContext_ConnectionInfo;
const SecPkgContext_CipherInfo = @import("security.zig").SecPkgContext_CipherInfo;
const SecPkgContext_Bindings = @import("security.zig").SecPkgContext_Bindings;
const HANDLE = @import("systemservices.zig").HANDLE;
const SYSTEMTIME = @import("windowsprogramming.zig").SYSTEMTIME;
const WIN32_FIND_DATAA = @import("filesystem.zig").WIN32_FIND_DATAA;
const WIN32_FIND_DATAW = @import("filesystem.zig").WIN32_FIND_DATAW;
const HWND = @import("windowsandmessaging.zig").HWND;
const HINSTANCE = @import("systemservices.zig").HINSTANCE;
const BSTR = @import("automation.zig").BSTR;

test "" {
    const constant_export_count = 0;
    const type_export_count = 107;
    const func_count = 296;
    const unicode_alias_count = 81;
    const type_import_count = 15;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
