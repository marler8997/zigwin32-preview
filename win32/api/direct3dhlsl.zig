//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//
pub const D3DCOMPILER_DLL = "d3dcompiler_47.dll";
pub const D3D_COMPILER_VERSION : i32 = 47;
pub const D3DCOMPILE_DEBUG : u32 = 1;
pub const D3DCOMPILE_SKIP_VALIDATION : u32 = 2;
pub const D3DCOMPILE_SKIP_OPTIMIZATION : u32 = 4;
pub const D3DCOMPILE_PACK_MATRIX_ROW_MAJOR : u32 = 8;
pub const D3DCOMPILE_PACK_MATRIX_COLUMN_MAJOR : u32 = 16;
pub const D3DCOMPILE_PARTIAL_PRECISION : u32 = 32;
pub const D3DCOMPILE_FORCE_VS_SOFTWARE_NO_OPT : u32 = 64;
pub const D3DCOMPILE_FORCE_PS_SOFTWARE_NO_OPT : u32 = 128;
pub const D3DCOMPILE_NO_PRESHADER : u32 = 256;
pub const D3DCOMPILE_AVOID_FLOW_CONTROL : u32 = 512;
pub const D3DCOMPILE_PREFER_FLOW_CONTROL : u32 = 1024;
pub const D3DCOMPILE_ENABLE_STRICTNESS : u32 = 2048;
pub const D3DCOMPILE_ENABLE_BACKWARDS_COMPATIBILITY : u32 = 4096;
pub const D3DCOMPILE_IEEE_STRICTNESS : u32 = 8192;
pub const D3DCOMPILE_OPTIMIZATION_LEVEL0 : u32 = 16384;
pub const D3DCOMPILE_OPTIMIZATION_LEVEL1 : u32 = 0;
pub const D3DCOMPILE_OPTIMIZATION_LEVEL2 : u32 = 49152;
pub const D3DCOMPILE_OPTIMIZATION_LEVEL3 : u32 = 32768;
pub const D3DCOMPILE_RESERVED16 : u32 = 65536;
pub const D3DCOMPILE_RESERVED17 : u32 = 131072;
pub const D3DCOMPILE_WARNINGS_ARE_ERRORS : u32 = 262144;
pub const D3DCOMPILE_RESOURCES_MAY_ALIAS : u32 = 524288;
pub const D3DCOMPILE_ENABLE_UNBOUNDED_DESCRIPTOR_TABLES : u32 = 1048576;
pub const D3DCOMPILE_ALL_RESOURCES_BOUND : u32 = 2097152;
pub const D3DCOMPILE_DEBUG_NAME_FOR_SOURCE : u32 = 4194304;
pub const D3DCOMPILE_DEBUG_NAME_FOR_BINARY : u32 = 8388608;
pub const D3DCOMPILE_EFFECT_CHILD_EFFECT : u32 = 1;
pub const D3DCOMPILE_EFFECT_ALLOW_SLOW_OPS : u32 = 2;
pub const D3DCOMPILE_FLAGS2_FORCE_ROOT_SIGNATURE_LATEST : u32 = 0;
pub const D3DCOMPILE_FLAGS2_FORCE_ROOT_SIGNATURE_1_0 : u32 = 16;
pub const D3DCOMPILE_FLAGS2_FORCE_ROOT_SIGNATURE_1_1 : u32 = 32;
pub const D3D_COMPILE_STANDARD_FILE_INCLUDE : u32 = 1;
pub const D3DCOMPILE_SECDATA_MERGE_UAV_SLOTS : u32 = 1;
pub const D3DCOMPILE_SECDATA_PRESERVE_TEMPLATE_SLOTS : u32 = 2;
pub const D3DCOMPILE_SECDATA_REQUIRE_TEMPLATE_MATCH : u32 = 4;
pub const D3D_DISASM_ENABLE_COLOR_CODE : u32 = 1;
pub const D3D_DISASM_ENABLE_DEFAULT_VALUE_PRINTS : u32 = 2;
pub const D3D_DISASM_ENABLE_INSTRUCTION_NUMBERING : u32 = 4;
pub const D3D_DISASM_ENABLE_INSTRUCTION_CYCLE : u32 = 8;
pub const D3D_DISASM_DISABLE_DEBUG_INFO : u32 = 16;
pub const D3D_DISASM_ENABLE_INSTRUCTION_OFFSET : u32 = 32;
pub const D3D_DISASM_INSTRUCTION_ONLY : u32 = 64;
pub const D3D_DISASM_PRINT_HEX_LITERALS : u32 = 128;
pub const D3D_GET_INST_OFFSETS_INCLUDE_NON_EXECUTABLE : u32 = 1;
pub const D3D_COMPRESS_SHADER_KEEP_ALL_PARTS : u32 = 1;

//
// types
//
// --------------------------------------------------------
// Type: pD3DCompile
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const pD3DCompile = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: pD3DPreprocess
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const pD3DPreprocess = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: pD3DDisassemble
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const pD3DDisassemble = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: D3DCOMPILER_STRIP_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DCOMPILER_STRIP_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: D3D_BLOB_PART
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3D_BLOB_PART = *opaque{
};
// --------------------------------------------------------
// Type: D3D_SHADER_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D_SHADER_DATA = extern struct {
    pBytecode: ?*opaque{},
    BytecodeLength: ?*opaque{},
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "D3DCOMPILER_47" fn D3DReadFileToBlob(
    pFileName: ?*u16,
    ppContents: ?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "D3DCOMPILER_47" fn D3DWriteBlobToFile(
    pBlob: ID3DBlob,
    pFileName: ?*u16,
    bOverwrite: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "D3DCOMPILER_47" fn D3DCompile(
    pSrcData: ?*opaque{},
    SrcDataSize: ?*opaque{},
    pSourceName: ?*i8,
    pDefines: ?*D3D_SHADER_MACRO,
    pInclude: ID3DInclude,
    pEntrypoint: ?*i8,
    pTarget: ?*i8,
    Flags1: u32,
    Flags2: u32,
    ppCode: ?*ID3DBlob,
    ppErrorMsgs: ?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "D3DCOMPILER_47" fn D3DCompile2(
    pSrcData: ?*opaque{},
    SrcDataSize: ?*opaque{},
    pSourceName: ?*i8,
    pDefines: ?*D3D_SHADER_MACRO,
    pInclude: ID3DInclude,
    pEntrypoint: ?*i8,
    pTarget: ?*i8,
    Flags1: u32,
    Flags2: u32,
    SecondaryDataFlags: u32,
    pSecondaryData: ?*opaque{},
    SecondaryDataSize: ?*opaque{},
    ppCode: ?*ID3DBlob,
    ppErrorMsgs: ?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "D3DCOMPILER_47" fn D3DCompileFromFile(
    pFileName: ?*u16,
    pDefines: ?*D3D_SHADER_MACRO,
    pInclude: ID3DInclude,
    pEntrypoint: ?*i8,
    pTarget: ?*i8,
    Flags1: u32,
    Flags2: u32,
    ppCode: ?*ID3DBlob,
    ppErrorMsgs: ?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "D3DCOMPILER_47" fn D3DPreprocess(
    pSrcData: ?*opaque{},
    SrcDataSize: ?*opaque{},
    pSourceName: ?*i8,
    pDefines: ?*D3D_SHADER_MACRO,
    pInclude: ID3DInclude,
    ppCodeText: ?*ID3DBlob,
    ppErrorMsgs: ?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "D3DCOMPILER_47" fn D3DGetDebugInfo(
    pSrcData: ?*opaque{},
    SrcDataSize: ?*opaque{},
    ppDebugInfo: ?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "D3DCOMPILER_47" fn D3DReflect(
    pSrcData: ?*opaque{},
    SrcDataSize: ?*opaque{},
    pInterface: ?*Guid,
    ppReflector: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "D3DCOMPILER_47" fn D3DReflectLibrary(
    pSrcData: ?*opaque{},
    SrcDataSize: ?*opaque{},
    riid: ?*Guid,
    ppReflector: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "D3DCOMPILER_47" fn D3DDisassemble(
    pSrcData: ?*opaque{},
    SrcDataSize: ?*opaque{},
    Flags: u32,
    szComments: ?*i8,
    ppDisassembly: ?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "D3DCOMPILER_47" fn D3DDisassembleRegion(
    pSrcData: ?*opaque{},
    SrcDataSize: ?*opaque{},
    Flags: u32,
    szComments: ?*i8,
    StartByteOffset: ?*opaque{},
    NumInsts: ?*opaque{},
    pFinishByteOffset: ?*?*opaque{},
    ppDisassembly: ?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "D3DCOMPILER_47" fn D3DCreateLinker(
    ppLinker: ?*ID3D11Linker,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "D3DCOMPILER_47" fn D3DLoadModule(
    pSrcData: ?*opaque{},
    cbSrcDataSize: ?*opaque{},
    ppModule: ?*ID3D11Module,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "D3DCOMPILER_47" fn D3DCreateFunctionLinkingGraph(
    uFlags: u32,
    ppFunctionLinkingGraph: ?*ID3D11FunctionLinkingGraph,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "D3DCOMPILER_47" fn D3DGetTraceInstructionOffsets(
    pSrcData: ?*opaque{},
    SrcDataSize: ?*opaque{},
    Flags: u32,
    StartInstIndex: ?*opaque{},
    NumInsts: ?*opaque{},
    pOffsets: ?*?*opaque{},
    pTotalInsts: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "D3DCOMPILER_47" fn D3DGetInputSignatureBlob(
    pSrcData: ?*opaque{},
    SrcDataSize: ?*opaque{},
    ppSignatureBlob: ?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "D3DCOMPILER_47" fn D3DGetOutputSignatureBlob(
    pSrcData: ?*opaque{},
    SrcDataSize: ?*opaque{},
    ppSignatureBlob: ?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "D3DCOMPILER_47" fn D3DGetInputAndOutputSignatureBlob(
    pSrcData: ?*opaque{},
    SrcDataSize: ?*opaque{},
    ppSignatureBlob: ?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "D3DCOMPILER_47" fn D3DStripShader(
    pShaderBytecode: ?*opaque{},
    BytecodeLength: ?*opaque{},
    uStripFlags: u32,
    ppStrippedBlob: ?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "D3DCOMPILER_47" fn D3DGetBlobPart(
    pSrcData: ?*opaque{},
    SrcDataSize: ?*opaque{},
    Part: D3D_BLOB_PART,
    Flags: u32,
    ppPart: ?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "D3DCOMPILER_47" fn D3DSetBlobPart(
    pSrcData: ?*opaque{},
    SrcDataSize: ?*opaque{},
    Part: D3D_BLOB_PART,
    Flags: u32,
    pPart: ?*opaque{},
    PartSize: ?*opaque{},
    ppNewShader: ?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "D3DCOMPILER_47" fn D3DCreateBlob(
    Size: ?*opaque{},
    ppBlob: ?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "D3DCOMPILER_47" fn D3DCompressShaders(
    uNumShaders: u32,
    pShaderData: ?*D3D_SHADER_DATA,
    uFlags: u32,
    ppCompressedData: ?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "D3DCOMPILER_47" fn D3DDecompressShaders(
    pSrcData: ?*opaque{},
    SrcDataSize: ?*opaque{},
    uNumShaders: u32,
    uStartIndex: u32,
    pIndices: ?*u32,
    uFlags: u32,
    ppShaders: ?*ID3DBlob,
    pTotalShaders: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "D3DCOMPILER_47" fn D3DDisassemble10Effect(
    pEffect: ID3D10Effect,
    Flags: u32,
    ppDisassembly: ?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const ID3DBlob = @import("direct3d11.zig").ID3DBlob;
const HRESULT = @import("com.zig").HRESULT;
const BOOL = @import("systemservices.zig").BOOL;
const D3D_SHADER_MACRO = @import("direct3d11.zig").D3D_SHADER_MACRO;
const ID3DInclude = @import("direct3d11.zig").ID3DInclude;
const ID3D11Linker = @import("direct3d11.zig").ID3D11Linker;
const ID3D11Module = @import("direct3d11.zig").ID3D11Module;
const ID3D11FunctionLinkingGraph = @import("direct3d11.zig").ID3D11FunctionLinkingGraph;
const ID3D10Effect = @import("direct3d10.zig").ID3D10Effect;

test "" {
    const constant_export_count = 47;
    const type_export_count = 6;
    const func_count = 25;
    const unicode_alias_count = 0;
    const type_import_count = 10;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
