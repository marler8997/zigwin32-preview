//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: D3DMATRIX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DMATRIX = extern struct {
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _11: f32,
            _12: f32,
            _13: f32,
            _14: f32,
            _21: f32,
            _22: f32,
            _23: f32,
            _24: f32,
            _31: f32,
            _32: f32,
            _33: f32,
            _34: f32,
            _41: f32,
            _42: f32,
            _43: f32,
            _44: f32,
        };
    };
};
// --------------------------------------------------------
// Type: D3DVIEWPORT9
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DVIEWPORT9 = extern struct {
    X: u32,
    Y: u32,
    Width: u32,
    Height: u32,
    MinZ: f32,
    MaxZ: f32,
};
// --------------------------------------------------------
// Type: D3DCLIPSTATUS9
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DCLIPSTATUS9 = extern struct {
    ClipUnion: u32,
    ClipIntersection: u32,
};
// --------------------------------------------------------
// Type: D3DMATERIAL9
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DMATERIAL9 = extern struct {
    Diffuse: DXGI_RGBA,
    Ambient: DXGI_RGBA,
    Specular: DXGI_RGBA,
    Emissive: DXGI_RGBA,
    Power: f32,
};
// --------------------------------------------------------
// Type: D3DLIGHT9
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DLIGHT9 = extern struct {
    Type: D3DLIGHTTYPE,
    Diffuse: DXGI_RGBA,
    Specular: DXGI_RGBA,
    Ambient: DXGI_RGBA,
    Position: D3DVECTOR,
    Direction: D3DVECTOR,
    Range: f32,
    Falloff: f32,
    Attenuation0: f32,
    Attenuation1: f32,
    Attenuation2: f32,
    Theta: f32,
    Phi: f32,
};
// --------------------------------------------------------
// Type: D3DBLENDOP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DBLENDOP = *opaque{
};
// --------------------------------------------------------
// Type: D3DSAMPLERSTATETYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DSAMPLERSTATETYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3DTEXTUREFILTERTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DTEXTUREFILTERTYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3DDECLUSAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DDECLUSAGE = *opaque{
};
// --------------------------------------------------------
// Type: D3DDECLMETHOD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DDECLMETHOD = *opaque{
};
// --------------------------------------------------------
// Type: D3DDECLTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DDECLTYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3DVERTEXELEMENT9
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DVERTEXELEMENT9 = extern struct {
    Stream: u16,
    Offset: u16,
    Type: u8,
    Method: u8,
    Usage: u8,
    UsageIndex: u8,
};
// --------------------------------------------------------
// Type: D3DSHADER_INSTRUCTION_OPCODE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DSHADER_INSTRUCTION_OPCODE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3DSHADER_COMPARISON
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DSHADER_COMPARISON = *opaque{
};
// --------------------------------------------------------
// Type: D3DSAMPLER_TEXTURE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DSAMPLER_TEXTURE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3DSHADER_PARAM_REGISTER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DSHADER_PARAM_REGISTER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3DSHADER_MISCTYPE_OFFSETS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DSHADER_MISCTYPE_OFFSETS = *opaque{
};
// --------------------------------------------------------
// Type: D3DVS_RASTOUT_OFFSETS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DVS_RASTOUT_OFFSETS = *opaque{
};
// --------------------------------------------------------
// Type: D3DVS_ADDRESSMODE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DVS_ADDRESSMODE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3DSHADER_ADDRESSMODE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DSHADER_ADDRESSMODE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3DSHADER_PARAM_SRCMOD_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DSHADER_PARAM_SRCMOD_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3DSHADER_MIN_PRECISION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DSHADER_MIN_PRECISION = *opaque{
};
// --------------------------------------------------------
// Type: D3DBASISTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DBASISTYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3DDEGREETYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DDEGREETYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3DPATCHEDGESTYLE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DPATCHEDGESTYLE = *opaque{
};
// --------------------------------------------------------
// Type: D3DDEVTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DDEVTYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3DMULTISAMPLE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DMULTISAMPLE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3DFORMAT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DFORMAT = *opaque{
};
// --------------------------------------------------------
// Type: D3DDISPLAYMODE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DDISPLAYMODE = extern struct {
    Width: u32,
    Height: u32,
    RefreshRate: u32,
    Format: D3DFORMAT,
};
// --------------------------------------------------------
// Type: D3DDEVICE_CREATION_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DDEVICE_CREATION_PARAMETERS = extern struct {
    AdapterOrdinal: u32,
    DeviceType: D3DDEVTYPE,
    hFocusWindow: HWND,
    BehaviorFlags: u32,
};
// --------------------------------------------------------
// Type: D3DSWAPEFFECT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DSWAPEFFECT = *opaque{
};
// --------------------------------------------------------
// Type: D3DPOOL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DPOOL = *opaque{
};
// --------------------------------------------------------
// Type: _D3DPRESENT_PARAMETERS_
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _D3DPRESENT_PARAMETERS_ = extern struct {
    BackBufferWidth: u32,
    BackBufferHeight: u32,
    BackBufferFormat: D3DFORMAT,
    BackBufferCount: u32,
    MultiSampleType: D3DMULTISAMPLE_TYPE,
    MultiSampleQuality: u32,
    SwapEffect: D3DSWAPEFFECT,
    hDeviceWindow: HWND,
    Windowed: BOOL,
    EnableAutoDepthStencil: BOOL,
    AutoDepthStencilFormat: D3DFORMAT,
    Flags: u32,
    FullScreen_RefreshRateInHz: u32,
    PresentationInterval: u32,
};
// --------------------------------------------------------
// Type: D3DGAMMARAMP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DGAMMARAMP = extern struct {
    red: ?[*]u16,
    green: ?[*]u16,
    blue: ?[*]u16,
};
// --------------------------------------------------------
// Type: D3DBACKBUFFER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DBACKBUFFER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3DRESOURCETYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DRESOURCETYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3DCUBEMAP_FACES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DCUBEMAP_FACES = *opaque{
};
// --------------------------------------------------------
// Type: D3DVERTEXBUFFER_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DVERTEXBUFFER_DESC = extern struct {
    Format: D3DFORMAT,
    Type: D3DRESOURCETYPE,
    Usage: u32,
    Pool: D3DPOOL,
    Size: u32,
    FVF: u32,
};
// --------------------------------------------------------
// Type: D3DINDEXBUFFER_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DINDEXBUFFER_DESC = extern struct {
    Format: D3DFORMAT,
    Type: D3DRESOURCETYPE,
    Usage: u32,
    Pool: D3DPOOL,
    Size: u32,
};
// --------------------------------------------------------
// Type: D3DSURFACE_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DSURFACE_DESC = extern struct {
    Format: D3DFORMAT,
    Type: D3DRESOURCETYPE,
    Usage: u32,
    Pool: D3DPOOL,
    MultiSampleType: D3DMULTISAMPLE_TYPE,
    MultiSampleQuality: u32,
    Width: u32,
    Height: u32,
};
// --------------------------------------------------------
// Type: D3DVOLUME_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DVOLUME_DESC = extern struct {
    Format: D3DFORMAT,
    Type: D3DRESOURCETYPE,
    Usage: u32,
    Pool: D3DPOOL,
    Width: u32,
    Height: u32,
    Depth: u32,
};
// --------------------------------------------------------
// Type: D3DLOCKED_RECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DLOCKED_RECT = extern struct {
    Pitch: i32,
    pBits: ?*opaque{},
};
// --------------------------------------------------------
// Type: D3DBOX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DBOX = extern struct {
    Left: u32,
    Top: u32,
    Right: u32,
    Bottom: u32,
    Front: u32,
    Back: u32,
};
// --------------------------------------------------------
// Type: D3DLOCKED_BOX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DLOCKED_BOX = extern struct {
    RowPitch: i32,
    SlicePitch: i32,
    pBits: ?*opaque{},
};
// --------------------------------------------------------
// Type: D3DRANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DRANGE = extern struct {
    Offset: u32,
    Size: u32,
};
// --------------------------------------------------------
// Type: D3DRECTPATCH_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DRECTPATCH_INFO = extern struct {
    StartVertexOffsetWidth: u32,
    StartVertexOffsetHeight: u32,
    Width: u32,
    Height: u32,
    Stride: u32,
    Basis: D3DBASISTYPE,
    Degree: D3DDEGREETYPE,
};
// --------------------------------------------------------
// Type: D3DTRIPATCH_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DTRIPATCH_INFO = extern struct {
    StartVertexOffset: u32,
    NumVertices: u32,
    Basis: D3DBASISTYPE,
    Degree: D3DDEGREETYPE,
};
// --------------------------------------------------------
// Type: D3DADAPTER_IDENTIFIER9
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const D3DADAPTER_IDENTIFIER9 = *opaque{
};
// --------------------------------------------------------
// Type: D3DRASTER_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DRASTER_STATUS = extern struct {
    InVBlank: BOOL,
    ScanLine: u32,
};
// --------------------------------------------------------
// Type: D3DDEBUGMONITORTOKENS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DDEBUGMONITORTOKENS = *opaque{
};
// --------------------------------------------------------
// Type: D3DQUERYTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DQUERYTYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3DRESOURCESTATS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DRESOURCESTATS = extern struct {
    bThrashing: BOOL,
    ApproxBytesDownloaded: u32,
    NumEvicts: u32,
    NumVidCreates: u32,
    LastPri: u32,
    NumUsed: u32,
    NumUsedInVidMem: u32,
    WorkingSet: u32,
    WorkingSetBytes: u32,
    TotalManaged: u32,
    TotalBytes: u32,
};
// --------------------------------------------------------
// Type: D3DDEVINFO_RESOURCEMANAGER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DDEVINFO_RESOURCEMANAGER = extern struct {
    stats: ?[*]D3DRESOURCESTATS,
};
// --------------------------------------------------------
// Type: D3DDEVINFO_D3DVERTEXSTATS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DDEVINFO_D3DVERTEXSTATS = extern struct {
    NumRenderedTriangles: u32,
    NumExtraClippingTriangles: u32,
};
// --------------------------------------------------------
// Type: D3DDEVINFO_VCACHE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DDEVINFO_VCACHE = extern struct {
    Pattern: u32,
    OptMethod: u32,
    CacheSize: u32,
    MagicNumber: u32,
};
// --------------------------------------------------------
// Type: D3DDEVINFO_D3D9PIPELINETIMINGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DDEVINFO_D3D9PIPELINETIMINGS = extern struct {
    VertexProcessingTimePercent: f32,
    PixelProcessingTimePercent: f32,
    OtherGPUProcessingTimePercent: f32,
    GPUIdleTimePercent: f32,
};
// --------------------------------------------------------
// Type: D3DDEVINFO_D3D9INTERFACETIMINGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DDEVINFO_D3D9INTERFACETIMINGS = extern struct {
    WaitingForGPUToUseApplicationResourceTimePercent: f32,
    WaitingForGPUToAcceptMoreCommandsTimePercent: f32,
    WaitingForGPUToStayWithinLatencyTimePercent: f32,
    WaitingForGPUExclusiveResourceTimePercent: f32,
    WaitingForGPUOtherTimePercent: f32,
};
// --------------------------------------------------------
// Type: D3DDEVINFO_D3D9STAGETIMINGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DDEVINFO_D3D9STAGETIMINGS = extern struct {
    MemoryProcessingPercent: f32,
    ComputationProcessingPercent: f32,
};
// --------------------------------------------------------
// Type: D3DDEVINFO_D3D9BANDWIDTHTIMINGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DDEVINFO_D3D9BANDWIDTHTIMINGS = extern struct {
    MaxBandwidthUtilized: f32,
    FrontEndUploadMemoryUtilizedPercent: f32,
    VertexRateUtilizedPercent: f32,
    TriangleSetupRateUtilizedPercent: f32,
    FillRateUtilizedPercent: f32,
};
// --------------------------------------------------------
// Type: D3DDEVINFO_D3D9CACHEUTILIZATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DDEVINFO_D3D9CACHEUTILIZATION = extern struct {
    TextureCacheHitRate: f32,
    PostTransformVertexCacheHitRate: f32,
};
// --------------------------------------------------------
// Type: D3DMEMORYPRESSURE
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const D3DMEMORYPRESSURE = *opaque{
};
// --------------------------------------------------------
// Type: D3DCOMPOSERECTSOP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DCOMPOSERECTSOP = *opaque{
};
// --------------------------------------------------------
// Type: D3DCOMPOSERECTDESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DCOMPOSERECTDESC = extern struct {
    X: u16,
    Y: u16,
    Width: u16,
    Height: u16,
};
// --------------------------------------------------------
// Type: D3DCOMPOSERECTDESTINATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DCOMPOSERECTDESTINATION = extern struct {
    SrcRectIndex: u16,
    Reserved: u16,
    X: i16,
    Y: i16,
};
// --------------------------------------------------------
// Type: D3DPRESENTSTATS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const D3DPRESENTSTATS = *opaque{
};
// --------------------------------------------------------
// Type: D3DSCANLINEORDERING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DSCANLINEORDERING = *opaque{
};
// --------------------------------------------------------
// Type: D3DDISPLAYMODEEX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DDISPLAYMODEEX = extern struct {
    Size: u32,
    Width: u32,
    Height: u32,
    RefreshRate: u32,
    Format: D3DFORMAT,
    ScanLineOrdering: D3DSCANLINEORDERING,
};
// --------------------------------------------------------
// Type: D3DDISPLAYMODEFILTER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DDISPLAYMODEFILTER = extern struct {
    Size: u32,
    Format: D3DFORMAT,
    ScanLineOrdering: D3DSCANLINEORDERING,
};
// --------------------------------------------------------
// Type: D3DDISPLAYROTATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DDISPLAYROTATION = *opaque{
};
// --------------------------------------------------------
// Type: D3D_OMAC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3D_OMAC = extern struct {
    Omac: ?[*]u8,
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNELTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DAUTHENTICATEDCHANNELTYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNEL_QUERY_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DAUTHENTICATEDCHANNEL_QUERY_INPUT = extern struct {
    QueryType: Guid,
    hChannel: HANDLE,
    SequenceNumber: u32,
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT = extern struct {
    omac: D3D_OMAC,
    QueryType: Guid,
    hChannel: HANDLE,
    SequenceNumber: u32,
    ReturnCode: HRESULT,
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS = extern struct {
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: u32,
        };
    };
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNEL_QUERYPROTECTION_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DAUTHENTICATEDCHANNEL_QUERYPROTECTION_OUTPUT = extern struct {
    Output: D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT,
    ProtectionFlags: D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS,
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNEL_QUERYCHANNELTYPE_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DAUTHENTICATEDCHANNEL_QUERYCHANNELTYPE_OUTPUT = extern struct {
    Output: D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT,
    ChannelType: D3DAUTHENTICATEDCHANNELTYPE,
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNEL_QUERYDEVICEHANDLE_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DAUTHENTICATEDCHANNEL_QUERYDEVICEHANDLE_OUTPUT = extern struct {
    Output: D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT,
    DeviceHandle: HANDLE,
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_INPUT = extern struct {
    Input: D3DAUTHENTICATEDCHANNEL_QUERY_INPUT,
    DXVA2DecodeHandle: HANDLE,
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_OUTPUT = extern struct {
    Output: D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT,
    DXVA2DecodeHandle: HANDLE,
    CryptoSessionHandle: HANDLE,
    DeviceHandle: HANDLE,
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESSCOUNT_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESSCOUNT_OUTPUT = extern struct {
    Output: D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT,
    NumRestrictedSharedResourceProcesses: u32,
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_INPUT = extern struct {
    Input: D3DAUTHENTICATEDCHANNEL_QUERY_INPUT,
    ProcessIndex: u32,
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_OUTPUT = extern struct {
    Output: D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT,
    ProcessIndex: u32,
    ProcessIdentifer: D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE,
    ProcessHandle: HANDLE,
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNEL_QUERYUNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DAUTHENTICATEDCHANNEL_QUERYUNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT_OUTPUT = extern struct {
    Output: D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT,
    NumUnrestrictedProtectedSharedResources: u32,
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_INPUT = extern struct {
    Input: D3DAUTHENTICATEDCHANNEL_QUERY_INPUT,
    DeviceHandle: HANDLE,
    CryptoSessionHandle: HANDLE,
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_OUTPUT = extern struct {
    Output: D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT,
    DeviceHandle: HANDLE,
    CryptoSessionHandle: HANDLE,
    NumOutputIDs: u32,
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_INPUT = extern struct {
    Input: D3DAUTHENTICATEDCHANNEL_QUERY_INPUT,
    DeviceHandle: HANDLE,
    CryptoSessionHandle: HANDLE,
    OutputIDIndex: u32,
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_OUTPUT
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_OUTPUT = *opaque{
};
// --------------------------------------------------------
// Type: D3DBUSTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const D3DBUSTYPE = *opaque{
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNEL_QUERYINFOBUSTYPE_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DAUTHENTICATEDCHANNEL_QUERYINFOBUSTYPE_OUTPUT = extern struct {
    Output: D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT,
    BusType: D3DBUSTYPE,
    bAccessibleInContiguousBlocks: BOOL,
    bAccessibleInNonContiguousBlocks: BOOL,
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUIDCOUNT_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUIDCOUNT_OUTPUT = extern struct {
    Output: D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT,
    NumEncryptionGuids: u32,
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_INPUT = extern struct {
    Input: D3DAUTHENTICATEDCHANNEL_QUERY_INPUT,
    EncryptionGuidIndex: u32,
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_OUTPUT = extern struct {
    Output: D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT,
    EncryptionGuidIndex: u32,
    EncryptionGuid: Guid,
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNEL_QUERYUNCOMPRESSEDENCRYPTIONLEVEL_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DAUTHENTICATEDCHANNEL_QUERYUNCOMPRESSEDENCRYPTIONLEVEL_OUTPUT = extern struct {
    Output: D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT,
    EncryptionGuid: Guid,
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT = extern struct {
    omac: D3D_OMAC,
    ConfigureType: Guid,
    hChannel: HANDLE,
    SequenceNumber: u32,
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT = extern struct {
    omac: D3D_OMAC,
    ConfigureType: Guid,
    hChannel: HANDLE,
    SequenceNumber: u32,
    ReturnCode: HRESULT,
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNEL_CONFIGUREINITIALIZE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DAUTHENTICATEDCHANNEL_CONFIGUREINITIALIZE = extern struct {
    Parameters: D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT,
    StartSequenceQuery: u32,
    StartSequenceConfigure: u32,
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNEL_CONFIGUREPROTECTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DAUTHENTICATEDCHANNEL_CONFIGUREPROTECTION = extern struct {
    Parameters: D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT,
    Protections: D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS,
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNEL_CONFIGURECRYPTOSESSION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DAUTHENTICATEDCHANNEL_CONFIGURECRYPTOSESSION = extern struct {
    Parameters: D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT,
    DXVA2DecodeHandle: HANDLE,
    CryptoSessionHandle: HANDLE,
    DeviceHandle: HANDLE,
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNEL_CONFIGURESHAREDRESOURCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DAUTHENTICATEDCHANNEL_CONFIGURESHAREDRESOURCE = extern struct {
    Parameters: D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT,
    ProcessIdentiferType: D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE,
    ProcessHandle: HANDLE,
    AllowAccess: BOOL,
};
// --------------------------------------------------------
// Type: D3DAUTHENTICATEDCHANNEL_CONFIGUREUNCOMPRESSEDENCRYPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DAUTHENTICATEDCHANNEL_CONFIGUREUNCOMPRESSEDENCRYPTION = extern struct {
    Parameters: D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT,
    EncryptionGuid: Guid,
};
// --------------------------------------------------------
// Type: D3DENCRYPTED_BLOCK_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const D3DENCRYPTED_BLOCK_INFO = extern struct {
    NumEncryptedBytesAtBeginning: u32,
    NumBytesInSkipPattern: u32,
    NumBytesInEncryptPattern: u32,
};
// --------------------------------------------------------
// Type: D3DAES_CTR_IV
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const D3DAES_CTR_IV = *opaque{
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "d3d9" fn D3DPERF_BeginEvent(
    col: u32,
    wszName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "d3d9" fn D3DPERF_EndEvent(
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "d3d9" fn D3DPERF_SetMarker(
    col: u32,
    wszName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "d3d9" fn D3DPERF_SetRegion(
    col: u32,
    wszName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "d3d9" fn D3DPERF_QueryRepeatFrame(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "d3d9" fn D3DPERF_SetOptions(
    dwOptions: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "d3d9" fn D3DPERF_GetStatus(
) callconv(@import("std").os.windows.WINAPI) u32;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const DXGI_RGBA = @import("dxgi.zig").DXGI_RGBA;
const D3DLIGHTTYPE = @import("systemservices.zig").D3DLIGHTTYPE;
const D3DVECTOR = @import("systemservices.zig").D3DVECTOR;
const HWND = @import("windowsandmessaging.zig").HWND;
const BOOL = @import("systemservices.zig").BOOL;
const HANDLE = @import("systemservices.zig").HANDLE;
const HRESULT = @import("com.zig").HRESULT;

test "" {
    const constant_export_count = 0;
    const type_export_count = 103;
    const func_count = 7;
    const unicode_alias_count = 0;
    const type_import_count = 8;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
