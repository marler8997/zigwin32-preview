//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: USER_INFO_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_0 = extern struct {
    usri0_name: ?*u16,
};
// --------------------------------------------------------
// Type: USER_INFO_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_1 = extern struct {
    usri1_name: ?*u16,
    usri1_password: ?*u16,
    usri1_password_age: u32,
    usri1_priv: u32,
    usri1_home_dir: ?*u16,
    usri1_comment: ?*u16,
    usri1_flags: u32,
    usri1_script_path: ?*u16,
};
// --------------------------------------------------------
// Type: USER_INFO_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_2 = extern struct {
    usri2_name: ?*u16,
    usri2_password: ?*u16,
    usri2_password_age: u32,
    usri2_priv: u32,
    usri2_home_dir: ?*u16,
    usri2_comment: ?*u16,
    usri2_flags: u32,
    usri2_script_path: ?*u16,
    usri2_auth_flags: u32,
    usri2_full_name: ?*u16,
    usri2_usr_comment: ?*u16,
    usri2_parms: ?*u16,
    usri2_workstations: ?*u16,
    usri2_last_logon: u32,
    usri2_last_logoff: u32,
    usri2_acct_expires: u32,
    usri2_max_storage: u32,
    usri2_units_per_week: u32,
    usri2_logon_hours: ?*u8,
    usri2_bad_pw_count: u32,
    usri2_num_logons: u32,
    usri2_logon_server: ?*u16,
    usri2_country_code: u32,
    usri2_code_page: u32,
};
// --------------------------------------------------------
// Type: USER_INFO_3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_3 = extern struct {
    usri3_name: ?*u16,
    usri3_password: ?*u16,
    usri3_password_age: u32,
    usri3_priv: u32,
    usri3_home_dir: ?*u16,
    usri3_comment: ?*u16,
    usri3_flags: u32,
    usri3_script_path: ?*u16,
    usri3_auth_flags: u32,
    usri3_full_name: ?*u16,
    usri3_usr_comment: ?*u16,
    usri3_parms: ?*u16,
    usri3_workstations: ?*u16,
    usri3_last_logon: u32,
    usri3_last_logoff: u32,
    usri3_acct_expires: u32,
    usri3_max_storage: u32,
    usri3_units_per_week: u32,
    usri3_logon_hours: ?*u8,
    usri3_bad_pw_count: u32,
    usri3_num_logons: u32,
    usri3_logon_server: ?*u16,
    usri3_country_code: u32,
    usri3_code_page: u32,
    usri3_user_id: u32,
    usri3_primary_group_id: u32,
    usri3_profile: ?*u16,
    usri3_home_dir_drive: ?*u16,
    usri3_password_expired: u32,
};
// --------------------------------------------------------
// Type: USER_INFO_4
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_4 = extern struct {
    usri4_name: ?*u16,
    usri4_password: ?*u16,
    usri4_password_age: u32,
    usri4_priv: u32,
    usri4_home_dir: ?*u16,
    usri4_comment: ?*u16,
    usri4_flags: u32,
    usri4_script_path: ?*u16,
    usri4_auth_flags: u32,
    usri4_full_name: ?*u16,
    usri4_usr_comment: ?*u16,
    usri4_parms: ?*u16,
    usri4_workstations: ?*u16,
    usri4_last_logon: u32,
    usri4_last_logoff: u32,
    usri4_acct_expires: u32,
    usri4_max_storage: u32,
    usri4_units_per_week: u32,
    usri4_logon_hours: ?*u8,
    usri4_bad_pw_count: u32,
    usri4_num_logons: u32,
    usri4_logon_server: ?*u16,
    usri4_country_code: u32,
    usri4_code_page: u32,
    usri4_user_sid: ?*opaque{},
    usri4_primary_group_id: u32,
    usri4_profile: ?*u16,
    usri4_home_dir_drive: ?*u16,
    usri4_password_expired: u32,
};
// --------------------------------------------------------
// Type: USER_INFO_10
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_10 = extern struct {
    usri10_name: ?*u16,
    usri10_comment: ?*u16,
    usri10_usr_comment: ?*u16,
    usri10_full_name: ?*u16,
};
// --------------------------------------------------------
// Type: USER_INFO_11
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_11 = extern struct {
    usri11_name: ?*u16,
    usri11_comment: ?*u16,
    usri11_usr_comment: ?*u16,
    usri11_full_name: ?*u16,
    usri11_priv: u32,
    usri11_auth_flags: u32,
    usri11_password_age: u32,
    usri11_home_dir: ?*u16,
    usri11_parms: ?*u16,
    usri11_last_logon: u32,
    usri11_last_logoff: u32,
    usri11_bad_pw_count: u32,
    usri11_num_logons: u32,
    usri11_logon_server: ?*u16,
    usri11_country_code: u32,
    usri11_workstations: ?*u16,
    usri11_max_storage: u32,
    usri11_units_per_week: u32,
    usri11_logon_hours: ?*u8,
    usri11_code_page: u32,
};
// --------------------------------------------------------
// Type: USER_INFO_20
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_20 = extern struct {
    usri20_name: ?*u16,
    usri20_full_name: ?*u16,
    usri20_comment: ?*u16,
    usri20_flags: u32,
    usri20_user_id: u32,
};
// --------------------------------------------------------
// Type: USER_INFO_21
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_21 = extern struct {
    usri21_password: ?[*]u8,
};
// --------------------------------------------------------
// Type: USER_INFO_22
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_22 = extern struct {
    usri22_name: ?*u16,
    usri22_password: ?[*]u8,
    usri22_password_age: u32,
    usri22_priv: u32,
    usri22_home_dir: ?*u16,
    usri22_comment: ?*u16,
    usri22_flags: u32,
    usri22_script_path: ?*u16,
    usri22_auth_flags: u32,
    usri22_full_name: ?*u16,
    usri22_usr_comment: ?*u16,
    usri22_parms: ?*u16,
    usri22_workstations: ?*u16,
    usri22_last_logon: u32,
    usri22_last_logoff: u32,
    usri22_acct_expires: u32,
    usri22_max_storage: u32,
    usri22_units_per_week: u32,
    usri22_logon_hours: ?*u8,
    usri22_bad_pw_count: u32,
    usri22_num_logons: u32,
    usri22_logon_server: ?*u16,
    usri22_country_code: u32,
    usri22_code_page: u32,
};
// --------------------------------------------------------
// Type: USER_INFO_23
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_23 = extern struct {
    usri23_name: ?*u16,
    usri23_full_name: ?*u16,
    usri23_comment: ?*u16,
    usri23_flags: u32,
    usri23_user_sid: ?*opaque{},
};
// --------------------------------------------------------
// Type: USER_INFO_24
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_24 = extern struct {
    usri24_internet_identity: BOOL,
    usri24_flags: u32,
    usri24_internet_provider_name: ?*u16,
    usri24_internet_principal_name: ?*u16,
    usri24_user_sid: ?*opaque{},
};
// --------------------------------------------------------
// Type: USER_INFO_1003
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_1003 = extern struct {
    usri1003_password: ?*u16,
};
// --------------------------------------------------------
// Type: USER_INFO_1005
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_1005 = extern struct {
    usri1005_priv: u32,
};
// --------------------------------------------------------
// Type: USER_INFO_1006
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_1006 = extern struct {
    usri1006_home_dir: ?*u16,
};
// --------------------------------------------------------
// Type: USER_INFO_1007
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_1007 = extern struct {
    usri1007_comment: ?*u16,
};
// --------------------------------------------------------
// Type: USER_INFO_1008
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_1008 = extern struct {
    usri1008_flags: u32,
};
// --------------------------------------------------------
// Type: USER_INFO_1009
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_1009 = extern struct {
    usri1009_script_path: ?*u16,
};
// --------------------------------------------------------
// Type: USER_INFO_1010
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_1010 = extern struct {
    usri1010_auth_flags: u32,
};
// --------------------------------------------------------
// Type: USER_INFO_1011
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_1011 = extern struct {
    usri1011_full_name: ?*u16,
};
// --------------------------------------------------------
// Type: USER_INFO_1012
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_1012 = extern struct {
    usri1012_usr_comment: ?*u16,
};
// --------------------------------------------------------
// Type: USER_INFO_1013
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_1013 = extern struct {
    usri1013_parms: ?*u16,
};
// --------------------------------------------------------
// Type: USER_INFO_1014
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_1014 = extern struct {
    usri1014_workstations: ?*u16,
};
// --------------------------------------------------------
// Type: USER_INFO_1017
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_1017 = extern struct {
    usri1017_acct_expires: u32,
};
// --------------------------------------------------------
// Type: USER_INFO_1018
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_1018 = extern struct {
    usri1018_max_storage: u32,
};
// --------------------------------------------------------
// Type: USER_INFO_1020
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_1020 = extern struct {
    usri1020_units_per_week: u32,
    usri1020_logon_hours: ?*u8,
};
// --------------------------------------------------------
// Type: USER_INFO_1023
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_1023 = extern struct {
    usri1023_logon_server: ?*u16,
};
// --------------------------------------------------------
// Type: USER_INFO_1024
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_1024 = extern struct {
    usri1024_country_code: u32,
};
// --------------------------------------------------------
// Type: USER_INFO_1025
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_1025 = extern struct {
    usri1025_code_page: u32,
};
// --------------------------------------------------------
// Type: USER_INFO_1051
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_1051 = extern struct {
    usri1051_primary_group_id: u32,
};
// --------------------------------------------------------
// Type: USER_INFO_1052
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_1052 = extern struct {
    usri1052_profile: ?*u16,
};
// --------------------------------------------------------
// Type: USER_INFO_1053
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_INFO_1053 = extern struct {
    usri1053_home_dir_drive: ?*u16,
};
// --------------------------------------------------------
// Type: USER_MODALS_INFO_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_MODALS_INFO_0 = extern struct {
    usrmod0_min_passwd_len: u32,
    usrmod0_max_passwd_age: u32,
    usrmod0_min_passwd_age: u32,
    usrmod0_force_logoff: u32,
    usrmod0_password_hist_len: u32,
};
// --------------------------------------------------------
// Type: USER_MODALS_INFO_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_MODALS_INFO_1 = extern struct {
    usrmod1_role: u32,
    usrmod1_primary: ?*u16,
};
// --------------------------------------------------------
// Type: USER_MODALS_INFO_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_MODALS_INFO_2 = extern struct {
    usrmod2_domain_name: ?*u16,
    usrmod2_domain_id: ?*opaque{},
};
// --------------------------------------------------------
// Type: USER_MODALS_INFO_3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_MODALS_INFO_3 = extern struct {
    usrmod3_lockout_duration: u32,
    usrmod3_lockout_observation_window: u32,
    usrmod3_lockout_threshold: u32,
};
// --------------------------------------------------------
// Type: USER_MODALS_INFO_1001
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_MODALS_INFO_1001 = extern struct {
    usrmod1001_min_passwd_len: u32,
};
// --------------------------------------------------------
// Type: USER_MODALS_INFO_1002
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_MODALS_INFO_1002 = extern struct {
    usrmod1002_max_passwd_age: u32,
};
// --------------------------------------------------------
// Type: USER_MODALS_INFO_1003
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_MODALS_INFO_1003 = extern struct {
    usrmod1003_min_passwd_age: u32,
};
// --------------------------------------------------------
// Type: USER_MODALS_INFO_1004
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_MODALS_INFO_1004 = extern struct {
    usrmod1004_force_logoff: u32,
};
// --------------------------------------------------------
// Type: USER_MODALS_INFO_1005
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_MODALS_INFO_1005 = extern struct {
    usrmod1005_password_hist_len: u32,
};
// --------------------------------------------------------
// Type: USER_MODALS_INFO_1006
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_MODALS_INFO_1006 = extern struct {
    usrmod1006_role: u32,
};
// --------------------------------------------------------
// Type: USER_MODALS_INFO_1007
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_MODALS_INFO_1007 = extern struct {
    usrmod1007_primary: ?*u16,
};
// --------------------------------------------------------
// Type: GROUP_INFO_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GROUP_INFO_0 = extern struct {
    grpi0_name: ?*u16,
};
// --------------------------------------------------------
// Type: GROUP_INFO_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GROUP_INFO_1 = extern struct {
    grpi1_name: ?*u16,
    grpi1_comment: ?*u16,
};
// --------------------------------------------------------
// Type: GROUP_INFO_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GROUP_INFO_2 = extern struct {
    grpi2_name: ?*u16,
    grpi2_comment: ?*u16,
    grpi2_group_id: u32,
    grpi2_attributes: u32,
};
// --------------------------------------------------------
// Type: GROUP_INFO_3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GROUP_INFO_3 = extern struct {
    grpi3_name: ?*u16,
    grpi3_comment: ?*u16,
    grpi3_group_sid: ?*opaque{},
    grpi3_attributes: u32,
};
// --------------------------------------------------------
// Type: GROUP_INFO_1002
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GROUP_INFO_1002 = extern struct {
    grpi1002_comment: ?*u16,
};
// --------------------------------------------------------
// Type: GROUP_INFO_1005
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GROUP_INFO_1005 = extern struct {
    grpi1005_attributes: u32,
};
// --------------------------------------------------------
// Type: GROUP_USERS_INFO_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GROUP_USERS_INFO_0 = extern struct {
    grui0_name: ?*u16,
};
// --------------------------------------------------------
// Type: GROUP_USERS_INFO_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GROUP_USERS_INFO_1 = extern struct {
    grui1_name: ?*u16,
    grui1_attributes: u32,
};
// --------------------------------------------------------
// Type: LOCALGROUP_INFO_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LOCALGROUP_INFO_0 = extern struct {
    lgrpi0_name: ?*u16,
};
// --------------------------------------------------------
// Type: LOCALGROUP_INFO_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LOCALGROUP_INFO_1 = extern struct {
    lgrpi1_name: ?*u16,
    lgrpi1_comment: ?*u16,
};
// --------------------------------------------------------
// Type: LOCALGROUP_INFO_1002
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LOCALGROUP_INFO_1002 = extern struct {
    lgrpi1002_comment: ?*u16,
};
// --------------------------------------------------------
// Type: LOCALGROUP_MEMBERS_INFO_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LOCALGROUP_MEMBERS_INFO_0 = extern struct {
    lgrmi0_sid: ?*opaque{},
};
// --------------------------------------------------------
// Type: LOCALGROUP_MEMBERS_INFO_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LOCALGROUP_MEMBERS_INFO_1 = extern struct {
    lgrmi1_sid: ?*opaque{},
    lgrmi1_sidusage: SID_NAME_USE,
    lgrmi1_name: ?*u16,
};
// --------------------------------------------------------
// Type: LOCALGROUP_MEMBERS_INFO_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LOCALGROUP_MEMBERS_INFO_2 = extern struct {
    lgrmi2_sid: ?*opaque{},
    lgrmi2_sidusage: SID_NAME_USE,
    lgrmi2_domainandname: ?*u16,
};
// --------------------------------------------------------
// Type: LOCALGROUP_MEMBERS_INFO_3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LOCALGROUP_MEMBERS_INFO_3 = extern struct {
    lgrmi3_domainandname: ?*u16,
};
// --------------------------------------------------------
// Type: LOCALGROUP_USERS_INFO_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LOCALGROUP_USERS_INFO_0 = extern struct {
    lgrui0_name: ?*u16,
};
// --------------------------------------------------------
// Type: NET_DISPLAY_USER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NET_DISPLAY_USER = extern struct {
    usri1_name: ?*u16,
    usri1_comment: ?*u16,
    usri1_flags: u32,
    usri1_full_name: ?*u16,
    usri1_user_id: u32,
    usri1_next_index: u32,
};
// --------------------------------------------------------
// Type: NET_DISPLAY_MACHINE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NET_DISPLAY_MACHINE = extern struct {
    usri2_name: ?*u16,
    usri2_comment: ?*u16,
    usri2_flags: u32,
    usri2_user_id: u32,
    usri2_next_index: u32,
};
// --------------------------------------------------------
// Type: NET_DISPLAY_GROUP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NET_DISPLAY_GROUP = extern struct {
    grpi3_name: ?*u16,
    grpi3_comment: ?*u16,
    grpi3_group_id: u32,
    grpi3_attributes: u32,
    grpi3_next_index: u32,
};
// --------------------------------------------------------
// Type: ACCESS_INFO_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACCESS_INFO_0 = extern struct {
    acc0_resource_name: ?*u16,
};
// --------------------------------------------------------
// Type: ACCESS_INFO_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACCESS_INFO_1 = extern struct {
    acc1_resource_name: ?*u16,
    acc1_attr: u32,
    acc1_count: u32,
};
// --------------------------------------------------------
// Type: ACCESS_INFO_1002
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACCESS_INFO_1002 = extern struct {
    acc1002_attr: u32,
};
// --------------------------------------------------------
// Type: ACCESS_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ACCESS_LIST = extern struct {
    acl_ugname: ?*u16,
    acl_access: u32,
};
// --------------------------------------------------------
// Type: NET_VALIDATE_PASSWORD_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NET_VALIDATE_PASSWORD_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: NET_VALIDATE_PASSWORD_HASH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NET_VALIDATE_PASSWORD_HASH = extern struct {
    Length: u32,
    Hash: ?*u8,
};
// --------------------------------------------------------
// Type: NET_VALIDATE_PERSISTED_FIELDS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NET_VALIDATE_PERSISTED_FIELDS = extern struct {
    PresentFields: u32,
    PasswordLastSet: FILETIME,
    BadPasswordTime: FILETIME,
    LockoutTime: FILETIME,
    BadPasswordCount: u32,
    PasswordHistoryLength: u32,
    PasswordHistory: ?*NET_VALIDATE_PASSWORD_HASH,
};
// --------------------------------------------------------
// Type: NET_VALIDATE_OUTPUT_ARG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NET_VALIDATE_OUTPUT_ARG = extern struct {
    ChangedPersistedFields: NET_VALIDATE_PERSISTED_FIELDS,
    ValidationStatus: u32,
};
// --------------------------------------------------------
// Type: NET_VALIDATE_AUTHENTICATION_INPUT_ARG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NET_VALIDATE_AUTHENTICATION_INPUT_ARG = extern struct {
    InputPersistedFields: NET_VALIDATE_PERSISTED_FIELDS,
    PasswordMatched: u8,
};
// --------------------------------------------------------
// Type: NET_VALIDATE_PASSWORD_CHANGE_INPUT_ARG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NET_VALIDATE_PASSWORD_CHANGE_INPUT_ARG = extern struct {
    InputPersistedFields: NET_VALIDATE_PERSISTED_FIELDS,
    ClearPassword: ?*u16,
    UserAccountName: ?*u16,
    HashedPassword: NET_VALIDATE_PASSWORD_HASH,
    PasswordMatch: u8,
};
// --------------------------------------------------------
// Type: NET_VALIDATE_PASSWORD_RESET_INPUT_ARG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NET_VALIDATE_PASSWORD_RESET_INPUT_ARG = extern struct {
    InputPersistedFields: NET_VALIDATE_PERSISTED_FIELDS,
    ClearPassword: ?*u16,
    UserAccountName: ?*u16,
    HashedPassword: NET_VALIDATE_PASSWORD_HASH,
    PasswordMustChangeAtNextLogon: u8,
    ClearLockout: u8,
};
// --------------------------------------------------------
// Type: NETSETUP_NAME_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NETSETUP_NAME_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DSREG_JOIN_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DSREG_JOIN_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DSREG_USER_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSREG_USER_INFO = extern struct {
    pszUserEmail: ?*u16,
    pszUserKeyId: ?*u16,
    pszUserKeyName: ?*u16,
};
// --------------------------------------------------------
// Type: DSREG_JOIN_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DSREG_JOIN_INFO = extern struct {
    joinType: DSREG_JOIN_TYPE,
    pJoinCertificate: ?*CERT_CONTEXT,
    pszDeviceId: ?*u16,
    pszIdpDomain: ?*u16,
    pszTenantId: ?*u16,
    pszJoinUserEmail: ?*u16,
    pszTenantDisplayName: ?*u16,
    pszMdmEnrollmentUrl: ?*u16,
    pszMdmTermsOfUseUrl: ?*u16,
    pszMdmComplianceUrl: ?*u16,
    pszUserSettingSyncUrl: ?*u16,
    pUserInfo: ?*DSREG_USER_INFO,
};
// --------------------------------------------------------
// Type: NET_COMPUTER_NAME_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NET_COMPUTER_NAME_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: NETSETUP_PROVISIONING_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETSETUP_PROVISIONING_PARAMS = extern struct {
    dwVersion: u32,
    lpDomain: ?*u16,
    lpHostName: ?*u16,
    lpMachineAccountOU: ?*u16,
    lpDcName: ?*u16,
    dwProvisionOptions: u32,
    aCertTemplateNames: ?*?*u16,
    cCertTemplateNames: u32,
    aMachinePolicyNames: ?*?*u16,
    cMachinePolicyNames: u32,
    aMachinePolicyPaths: ?*?*u16,
    cMachinePolicyPaths: u32,
    lpNetbiosName: ?*u16,
    lpSiteName: ?*u16,
    lpPrimaryDNSDomain: ?*u16,
};
// --------------------------------------------------------
// Type: NETSETUP_JOIN_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NETSETUP_JOIN_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: STD_ALERT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STD_ALERT = extern struct {
    alrt_timestamp: u32,
    alrt_eventname: ?[*]u16,
    alrt_servicename: ?[*]u16,
};
// --------------------------------------------------------
// Type: ADMIN_OTHER_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ADMIN_OTHER_INFO = extern struct {
    alrtad_errcode: u32,
    alrtad_numstrings: u32,
};
// --------------------------------------------------------
// Type: ERRLOG_OTHER_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ERRLOG_OTHER_INFO = extern struct {
    alrter_errcode: u32,
    alrter_offset: u32,
};
// --------------------------------------------------------
// Type: PRINT_OTHER_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PRINT_OTHER_INFO = extern struct {
    alrtpr_jobid: u32,
    alrtpr_status: u32,
    alrtpr_submitted: u32,
    alrtpr_size: u32,
};
// --------------------------------------------------------
// Type: USER_OTHER_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USER_OTHER_INFO = extern struct {
    alrtus_errcode: u32,
    alrtus_numstrings: u32,
};
// --------------------------------------------------------
// Type: HLOG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HLOG = extern struct {
    time: u32,
    last_flags: u32,
    offset: u32,
    rec_offset: u32,
};
// --------------------------------------------------------
// Type: AUDIT_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AUDIT_ENTRY = extern struct {
    ae_len: u32,
    ae_reserved: u32,
    ae_time: u32,
    ae_type: u32,
    ae_data_offset: u32,
    ae_data_size: u32,
};
// --------------------------------------------------------
// Type: AE_SRVSTATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AE_SRVSTATUS = extern struct {
    ae_sv_status: u32,
};
// --------------------------------------------------------
// Type: AE_SESSLOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AE_SESSLOGON = extern struct {
    ae_so_compname: u32,
    ae_so_username: u32,
    ae_so_privilege: u32,
};
// --------------------------------------------------------
// Type: AE_SESSLOGOFF
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AE_SESSLOGOFF = extern struct {
    ae_sf_compname: u32,
    ae_sf_username: u32,
    ae_sf_reason: u32,
};
// --------------------------------------------------------
// Type: AE_SESSPWERR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AE_SESSPWERR = extern struct {
    ae_sp_compname: u32,
    ae_sp_username: u32,
};
// --------------------------------------------------------
// Type: AE_CONNSTART
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AE_CONNSTART = extern struct {
    ae_ct_compname: u32,
    ae_ct_username: u32,
    ae_ct_netname: u32,
    ae_ct_connid: u32,
};
// --------------------------------------------------------
// Type: AE_CONNSTOP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AE_CONNSTOP = extern struct {
    ae_cp_compname: u32,
    ae_cp_username: u32,
    ae_cp_netname: u32,
    ae_cp_connid: u32,
    ae_cp_reason: u32,
};
// --------------------------------------------------------
// Type: AE_CONNREJ
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AE_CONNREJ = extern struct {
    ae_cr_compname: u32,
    ae_cr_username: u32,
    ae_cr_netname: u32,
    ae_cr_reason: u32,
};
// --------------------------------------------------------
// Type: AE_RESACCESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AE_RESACCESS = extern struct {
    ae_ra_compname: u32,
    ae_ra_username: u32,
    ae_ra_resname: u32,
    ae_ra_operation: u32,
    ae_ra_returncode: u32,
    ae_ra_restype: u32,
    ae_ra_fileid: u32,
};
// --------------------------------------------------------
// Type: AE_RESACCESSREJ
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AE_RESACCESSREJ = extern struct {
    ae_rr_compname: u32,
    ae_rr_username: u32,
    ae_rr_resname: u32,
    ae_rr_operation: u32,
};
// --------------------------------------------------------
// Type: AE_CLOSEFILE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AE_CLOSEFILE = extern struct {
    ae_cf_compname: u32,
    ae_cf_username: u32,
    ae_cf_resname: u32,
    ae_cf_fileid: u32,
    ae_cf_duration: u32,
    ae_cf_reason: u32,
};
// --------------------------------------------------------
// Type: AE_SERVICESTAT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AE_SERVICESTAT = extern struct {
    ae_ss_compname: u32,
    ae_ss_username: u32,
    ae_ss_svcname: u32,
    ae_ss_status: u32,
    ae_ss_code: u32,
    ae_ss_text: u32,
    ae_ss_returnval: u32,
};
// --------------------------------------------------------
// Type: AE_ACLMOD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AE_ACLMOD = extern struct {
    ae_am_compname: u32,
    ae_am_username: u32,
    ae_am_resname: u32,
    ae_am_action: u32,
    ae_am_datalen: u32,
};
// --------------------------------------------------------
// Type: AE_UASMOD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AE_UASMOD = extern struct {
    ae_um_compname: u32,
    ae_um_username: u32,
    ae_um_resname: u32,
    ae_um_rectype: u32,
    ae_um_action: u32,
    ae_um_datalen: u32,
};
// --------------------------------------------------------
// Type: AE_NETLOGON
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AE_NETLOGON = extern struct {
    ae_no_compname: u32,
    ae_no_username: u32,
    ae_no_privilege: u32,
    ae_no_authflags: u32,
};
// --------------------------------------------------------
// Type: AE_NETLOGOFF
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AE_NETLOGOFF = extern struct {
    ae_nf_compname: u32,
    ae_nf_username: u32,
    ae_nf_reserved1: u32,
    ae_nf_reserved2: u32,
};
// --------------------------------------------------------
// Type: AE_ACCLIM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AE_ACCLIM = extern struct {
    ae_al_compname: u32,
    ae_al_username: u32,
    ae_al_resname: u32,
    ae_al_limit: u32,
};
// --------------------------------------------------------
// Type: AE_LOCKOUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AE_LOCKOUT = extern struct {
    ae_lk_compname: u32,
    ae_lk_username: u32,
    ae_lk_action: u32,
    ae_lk_bad_pw_count: u32,
};
// --------------------------------------------------------
// Type: AE_GENERIC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AE_GENERIC = extern struct {
    ae_ge_msgfile: u32,
    ae_ge_msgnum: u32,
    ae_ge_params: u32,
    ae_ge_param1: u32,
    ae_ge_param2: u32,
    ae_ge_param3: u32,
    ae_ge_param4: u32,
    ae_ge_param5: u32,
    ae_ge_param6: u32,
    ae_ge_param7: u32,
    ae_ge_param8: u32,
    ae_ge_param9: u32,
};
// --------------------------------------------------------
// Type: CONFIG_INFO_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CONFIG_INFO_0 = extern struct {
    cfgi0_key: ?*u16,
    cfgi0_data: ?*u16,
};
// --------------------------------------------------------
// Type: ERROR_LOG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ERROR_LOG = extern struct {
    el_len: u32,
    el_reserved: u32,
    el_time: u32,
    el_error: u32,
    el_name: ?*u16,
    el_text: ?*u16,
    el_data: ?*u8,
    el_data_size: u32,
    el_nstrings: u32,
};
// --------------------------------------------------------
// Type: MSG_INFO_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSG_INFO_0 = extern struct {
    msgi0_name: ?*u16,
};
// --------------------------------------------------------
// Type: MSG_INFO_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MSG_INFO_1 = extern struct {
    msgi1_name: ?*u16,
    msgi1_forward_flag: u32,
    msgi1_forward: ?*u16,
};
// --------------------------------------------------------
// Type: TIME_OF_DAY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TIME_OF_DAY_INFO = extern struct {
    tod_elapsedt: u32,
    tod_msecs: u32,
    tod_hours: u32,
    tod_mins: u32,
    tod_secs: u32,
    tod_hunds: u32,
    tod_timezone: i32,
    tod_tinterval: u32,
    tod_day: u32,
    tod_month: u32,
    tod_year: u32,
    tod_weekday: u32,
};
// --------------------------------------------------------
// Type: AT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AT_INFO = extern struct {
    JobTime: ?*opaque{},
    DaysOfMonth: u32,
    DaysOfWeek: u8,
    Flags: u8,
    Command: ?*u16,
};
// --------------------------------------------------------
// Type: AT_ENUM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AT_ENUM = extern struct {
    JobId: u32,
    JobTime: ?*opaque{},
    DaysOfMonth: u32,
    DaysOfWeek: u8,
    Flags: u8,
    Command: ?*u16,
};
// --------------------------------------------------------
// Type: SERVER_INFO_100
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_100 = extern struct {
    sv100_platform_id: u32,
    sv100_name: ?*u16,
};
// --------------------------------------------------------
// Type: SERVER_INFO_101
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_101 = extern struct {
    sv101_platform_id: u32,
    sv101_name: ?*u16,
    sv101_version_major: u32,
    sv101_version_minor: u32,
    sv101_type: u32,
    sv101_comment: ?*u16,
};
// --------------------------------------------------------
// Type: SERVER_INFO_102
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_102 = extern struct {
    sv102_platform_id: u32,
    sv102_name: ?*u16,
    sv102_version_major: u32,
    sv102_version_minor: u32,
    sv102_type: u32,
    sv102_comment: ?*u16,
    sv102_users: u32,
    sv102_disc: i32,
    sv102_hidden: BOOL,
    sv102_announce: u32,
    sv102_anndelta: u32,
    sv102_licenses: u32,
    sv102_userpath: ?*u16,
};
// --------------------------------------------------------
// Type: SERVER_INFO_103
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_103 = extern struct {
    sv103_platform_id: u32,
    sv103_name: ?*u16,
    sv103_version_major: u32,
    sv103_version_minor: u32,
    sv103_type: u32,
    sv103_comment: ?*u16,
    sv103_users: u32,
    sv103_disc: i32,
    sv103_hidden: BOOL,
    sv103_announce: u32,
    sv103_anndelta: u32,
    sv103_licenses: u32,
    sv103_userpath: ?*u16,
    sv103_capabilities: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_402
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_402 = extern struct {
    sv402_ulist_mtime: u32,
    sv402_glist_mtime: u32,
    sv402_alist_mtime: u32,
    sv402_alerts: ?*u16,
    sv402_security: u32,
    sv402_numadmin: u32,
    sv402_lanmask: u32,
    sv402_guestacct: ?*u16,
    sv402_chdevs: u32,
    sv402_chdevq: u32,
    sv402_chdevjobs: u32,
    sv402_connections: u32,
    sv402_shares: u32,
    sv402_openfiles: u32,
    sv402_sessopens: u32,
    sv402_sessvcs: u32,
    sv402_sessreqs: u32,
    sv402_opensearch: u32,
    sv402_activelocks: u32,
    sv402_numreqbuf: u32,
    sv402_sizreqbuf: u32,
    sv402_numbigbuf: u32,
    sv402_numfiletasks: u32,
    sv402_alertsched: u32,
    sv402_erroralert: u32,
    sv402_logonalert: u32,
    sv402_accessalert: u32,
    sv402_diskalert: u32,
    sv402_netioalert: u32,
    sv402_maxauditsz: u32,
    sv402_srvheuristics: ?*u16,
};
// --------------------------------------------------------
// Type: SERVER_INFO_403
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_403 = extern struct {
    sv403_ulist_mtime: u32,
    sv403_glist_mtime: u32,
    sv403_alist_mtime: u32,
    sv403_alerts: ?*u16,
    sv403_security: u32,
    sv403_numadmin: u32,
    sv403_lanmask: u32,
    sv403_guestacct: ?*u16,
    sv403_chdevs: u32,
    sv403_chdevq: u32,
    sv403_chdevjobs: u32,
    sv403_connections: u32,
    sv403_shares: u32,
    sv403_openfiles: u32,
    sv403_sessopens: u32,
    sv403_sessvcs: u32,
    sv403_sessreqs: u32,
    sv403_opensearch: u32,
    sv403_activelocks: u32,
    sv403_numreqbuf: u32,
    sv403_sizreqbuf: u32,
    sv403_numbigbuf: u32,
    sv403_numfiletasks: u32,
    sv403_alertsched: u32,
    sv403_erroralert: u32,
    sv403_logonalert: u32,
    sv403_accessalert: u32,
    sv403_diskalert: u32,
    sv403_netioalert: u32,
    sv403_maxauditsz: u32,
    sv403_srvheuristics: ?*u16,
    sv403_auditedevents: u32,
    sv403_autoprofile: u32,
    sv403_autopath: ?*u16,
};
// --------------------------------------------------------
// Type: SERVER_INFO_502
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_502 = extern struct {
    sv502_sessopens: u32,
    sv502_sessvcs: u32,
    sv502_opensearch: u32,
    sv502_sizreqbuf: u32,
    sv502_initworkitems: u32,
    sv502_maxworkitems: u32,
    sv502_rawworkitems: u32,
    sv502_irpstacksize: u32,
    sv502_maxrawbuflen: u32,
    sv502_sessusers: u32,
    sv502_sessconns: u32,
    sv502_maxpagedmemoryusage: u32,
    sv502_maxnonpagedmemoryusage: u32,
    sv502_enablesoftcompat: BOOL,
    sv502_enableforcedlogoff: BOOL,
    sv502_timesource: BOOL,
    sv502_acceptdownlevelapis: BOOL,
    sv502_lmannounce: BOOL,
};
// --------------------------------------------------------
// Type: SERVER_INFO_503
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_503 = extern struct {
    sv503_sessopens: u32,
    sv503_sessvcs: u32,
    sv503_opensearch: u32,
    sv503_sizreqbuf: u32,
    sv503_initworkitems: u32,
    sv503_maxworkitems: u32,
    sv503_rawworkitems: u32,
    sv503_irpstacksize: u32,
    sv503_maxrawbuflen: u32,
    sv503_sessusers: u32,
    sv503_sessconns: u32,
    sv503_maxpagedmemoryusage: u32,
    sv503_maxnonpagedmemoryusage: u32,
    sv503_enablesoftcompat: BOOL,
    sv503_enableforcedlogoff: BOOL,
    sv503_timesource: BOOL,
    sv503_acceptdownlevelapis: BOOL,
    sv503_lmannounce: BOOL,
    sv503_domain: ?*u16,
    sv503_maxcopyreadlen: u32,
    sv503_maxcopywritelen: u32,
    sv503_minkeepsearch: u32,
    sv503_maxkeepsearch: u32,
    sv503_minkeepcomplsearch: u32,
    sv503_maxkeepcomplsearch: u32,
    sv503_threadcountadd: u32,
    sv503_numblockthreads: u32,
    sv503_scavtimeout: u32,
    sv503_minrcvqueue: u32,
    sv503_minfreeworkitems: u32,
    sv503_xactmemsize: u32,
    sv503_threadpriority: u32,
    sv503_maxmpxct: u32,
    sv503_oplockbreakwait: u32,
    sv503_oplockbreakresponsewait: u32,
    sv503_enableoplocks: BOOL,
    sv503_enableoplockforceclose: BOOL,
    sv503_enablefcbopens: BOOL,
    sv503_enableraw: BOOL,
    sv503_enablesharednetdrives: BOOL,
    sv503_minfreeconnections: u32,
    sv503_maxfreeconnections: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_599
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_599 = extern struct {
    sv599_sessopens: u32,
    sv599_sessvcs: u32,
    sv599_opensearch: u32,
    sv599_sizreqbuf: u32,
    sv599_initworkitems: u32,
    sv599_maxworkitems: u32,
    sv599_rawworkitems: u32,
    sv599_irpstacksize: u32,
    sv599_maxrawbuflen: u32,
    sv599_sessusers: u32,
    sv599_sessconns: u32,
    sv599_maxpagedmemoryusage: u32,
    sv599_maxnonpagedmemoryusage: u32,
    sv599_enablesoftcompat: BOOL,
    sv599_enableforcedlogoff: BOOL,
    sv599_timesource: BOOL,
    sv599_acceptdownlevelapis: BOOL,
    sv599_lmannounce: BOOL,
    sv599_domain: ?*u16,
    sv599_maxcopyreadlen: u32,
    sv599_maxcopywritelen: u32,
    sv599_minkeepsearch: u32,
    sv599_maxkeepsearch: u32,
    sv599_minkeepcomplsearch: u32,
    sv599_maxkeepcomplsearch: u32,
    sv599_threadcountadd: u32,
    sv599_numblockthreads: u32,
    sv599_scavtimeout: u32,
    sv599_minrcvqueue: u32,
    sv599_minfreeworkitems: u32,
    sv599_xactmemsize: u32,
    sv599_threadpriority: u32,
    sv599_maxmpxct: u32,
    sv599_oplockbreakwait: u32,
    sv599_oplockbreakresponsewait: u32,
    sv599_enableoplocks: BOOL,
    sv599_enableoplockforceclose: BOOL,
    sv599_enablefcbopens: BOOL,
    sv599_enableraw: BOOL,
    sv599_enablesharednetdrives: BOOL,
    sv599_minfreeconnections: u32,
    sv599_maxfreeconnections: u32,
    sv599_initsesstable: u32,
    sv599_initconntable: u32,
    sv599_initfiletable: u32,
    sv599_initsearchtable: u32,
    sv599_alertschedule: u32,
    sv599_errorthreshold: u32,
    sv599_networkerrorthreshold: u32,
    sv599_diskspacethreshold: u32,
    sv599_reserved: u32,
    sv599_maxlinkdelay: u32,
    sv599_minlinkthroughput: u32,
    sv599_linkinfovalidtime: u32,
    sv599_scavqosinfoupdatetime: u32,
    sv599_maxworkitemidletime: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_598
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_598 = extern struct {
    sv598_maxrawworkitems: u32,
    sv598_maxthreadsperqueue: u32,
    sv598_producttype: u32,
    sv598_serversize: u32,
    sv598_connectionlessautodisc: u32,
    sv598_sharingviolationretries: u32,
    sv598_sharingviolationdelay: u32,
    sv598_maxglobalopensearch: u32,
    sv598_removeduplicatesearches: u32,
    sv598_lockviolationoffset: u32,
    sv598_lockviolationdelay: u32,
    sv598_mdlreadswitchover: u32,
    sv598_cachedopenlimit: u32,
    sv598_otherqueueaffinity: u32,
    sv598_restrictnullsessaccess: BOOL,
    sv598_enablewfw311directipx: BOOL,
    sv598_queuesamplesecs: u32,
    sv598_balancecount: u32,
    sv598_preferredaffinity: u32,
    sv598_maxfreerfcbs: u32,
    sv598_maxfreemfcbs: u32,
    sv598_maxfreelfcbs: u32,
    sv598_maxfreepagedpoolchunks: u32,
    sv598_minpagedpoolchunksize: u32,
    sv598_maxpagedpoolchunksize: u32,
    sv598_sendsfrompreferredprocessor: BOOL,
    sv598_cacheddirectorylimit: u32,
    sv598_maxcopylength: u32,
    sv598_enablecompression: BOOL,
    sv598_autosharewks: BOOL,
    sv598_autoshareserver: BOOL,
    sv598_enablesecuritysignature: BOOL,
    sv598_requiresecuritysignature: BOOL,
    sv598_minclientbuffersize: u32,
    sv598_serverguid: Guid,
    sv598_ConnectionNoSessionsTimeout: u32,
    sv598_IdleThreadTimeOut: u32,
    sv598_enableW9xsecuritysignature: BOOL,
    sv598_enforcekerberosreauthentication: BOOL,
    sv598_disabledos: BOOL,
    sv598_lowdiskspaceminimum: u32,
    sv598_disablestrictnamechecking: BOOL,
    sv598_enableauthenticateusersharing: BOOL,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1005
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1005 = extern struct {
    sv1005_comment: ?*u16,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1107
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1107 = extern struct {
    sv1107_users: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1010
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1010 = extern struct {
    sv1010_disc: i32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1016
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1016 = extern struct {
    sv1016_hidden: BOOL,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1017
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1017 = extern struct {
    sv1017_announce: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1018
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1018 = extern struct {
    sv1018_anndelta: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1501
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1501 = extern struct {
    sv1501_sessopens: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1502
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1502 = extern struct {
    sv1502_sessvcs: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1503
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1503 = extern struct {
    sv1503_opensearch: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1506
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1506 = extern struct {
    sv1506_maxworkitems: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1509
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1509 = extern struct {
    sv1509_maxrawbuflen: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1510
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1510 = extern struct {
    sv1510_sessusers: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1511
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1511 = extern struct {
    sv1511_sessconns: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1512
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1512 = extern struct {
    sv1512_maxnonpagedmemoryusage: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1513
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1513 = extern struct {
    sv1513_maxpagedmemoryusage: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1514
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1514 = extern struct {
    sv1514_enablesoftcompat: BOOL,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1515
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1515 = extern struct {
    sv1515_enableforcedlogoff: BOOL,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1516
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1516 = extern struct {
    sv1516_timesource: BOOL,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1518
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1518 = extern struct {
    sv1518_lmannounce: BOOL,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1520
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1520 = extern struct {
    sv1520_maxcopyreadlen: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1521
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1521 = extern struct {
    sv1521_maxcopywritelen: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1522
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1522 = extern struct {
    sv1522_minkeepsearch: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1523
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1523 = extern struct {
    sv1523_maxkeepsearch: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1524
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1524 = extern struct {
    sv1524_minkeepcomplsearch: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1525
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1525 = extern struct {
    sv1525_maxkeepcomplsearch: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1528
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1528 = extern struct {
    sv1528_scavtimeout: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1529
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1529 = extern struct {
    sv1529_minrcvqueue: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1530
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1530 = extern struct {
    sv1530_minfreeworkitems: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1533
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1533 = extern struct {
    sv1533_maxmpxct: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1534
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1534 = extern struct {
    sv1534_oplockbreakwait: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1535
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1535 = extern struct {
    sv1535_oplockbreakresponsewait: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1536
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1536 = extern struct {
    sv1536_enableoplocks: BOOL,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1537
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1537 = extern struct {
    sv1537_enableoplockforceclose: BOOL,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1538
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1538 = extern struct {
    sv1538_enablefcbopens: BOOL,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1539
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1539 = extern struct {
    sv1539_enableraw: BOOL,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1540
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1540 = extern struct {
    sv1540_enablesharednetdrives: BOOL,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1541
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1541 = extern struct {
    sv1541_minfreeconnections: BOOL,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1542
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1542 = extern struct {
    sv1542_maxfreeconnections: BOOL,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1543
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1543 = extern struct {
    sv1543_initsesstable: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1544
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1544 = extern struct {
    sv1544_initconntable: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1545
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1545 = extern struct {
    sv1545_initfiletable: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1546
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1546 = extern struct {
    sv1546_initsearchtable: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1547
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1547 = extern struct {
    sv1547_alertschedule: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1548
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1548 = extern struct {
    sv1548_errorthreshold: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1549
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1549 = extern struct {
    sv1549_networkerrorthreshold: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1550
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1550 = extern struct {
    sv1550_diskspacethreshold: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1552
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1552 = extern struct {
    sv1552_maxlinkdelay: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1553
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1553 = extern struct {
    sv1553_minlinkthroughput: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1554
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1554 = extern struct {
    sv1554_linkinfovalidtime: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1555
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1555 = extern struct {
    sv1555_scavqosinfoupdatetime: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1556
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1556 = extern struct {
    sv1556_maxworkitemidletime: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1557
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1557 = extern struct {
    sv1557_maxrawworkitems: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1560
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1560 = extern struct {
    sv1560_producttype: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1561
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1561 = extern struct {
    sv1561_serversize: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1562
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1562 = extern struct {
    sv1562_connectionlessautodisc: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1563
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1563 = extern struct {
    sv1563_sharingviolationretries: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1564
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1564 = extern struct {
    sv1564_sharingviolationdelay: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1565
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1565 = extern struct {
    sv1565_maxglobalopensearch: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1566
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1566 = extern struct {
    sv1566_removeduplicatesearches: BOOL,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1567
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1567 = extern struct {
    sv1567_lockviolationretries: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1568
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1568 = extern struct {
    sv1568_lockviolationoffset: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1569
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1569 = extern struct {
    sv1569_lockviolationdelay: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1570
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1570 = extern struct {
    sv1570_mdlreadswitchover: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1571
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1571 = extern struct {
    sv1571_cachedopenlimit: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1572
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1572 = extern struct {
    sv1572_criticalthreads: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1573
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1573 = extern struct {
    sv1573_restrictnullsessaccess: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1574
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1574 = extern struct {
    sv1574_enablewfw311directipx: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1575
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1575 = extern struct {
    sv1575_otherqueueaffinity: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1576
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1576 = extern struct {
    sv1576_queuesamplesecs: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1577
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1577 = extern struct {
    sv1577_balancecount: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1578
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1578 = extern struct {
    sv1578_preferredaffinity: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1579
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1579 = extern struct {
    sv1579_maxfreerfcbs: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1580
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1580 = extern struct {
    sv1580_maxfreemfcbs: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1581
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1581 = extern struct {
    sv1581_maxfreemlcbs: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1582
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1582 = extern struct {
    sv1582_maxfreepagedpoolchunks: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1583
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1583 = extern struct {
    sv1583_minpagedpoolchunksize: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1584
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1584 = extern struct {
    sv1584_maxpagedpoolchunksize: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1585
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1585 = extern struct {
    sv1585_sendsfrompreferredprocessor: BOOL,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1586
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1586 = extern struct {
    sv1586_maxthreadsperqueue: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1587
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1587 = extern struct {
    sv1587_cacheddirectorylimit: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1588
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1588 = extern struct {
    sv1588_maxcopylength: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1590
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1590 = extern struct {
    sv1590_enablecompression: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1591
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1591 = extern struct {
    sv1591_autosharewks: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1592
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1592 = extern struct {
    sv1592_autosharewks: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1593
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1593 = extern struct {
    sv1593_enablesecuritysignature: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1594
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1594 = extern struct {
    sv1594_requiresecuritysignature: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1595
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1595 = extern struct {
    sv1595_minclientbuffersize: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1596
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1596 = extern struct {
    sv1596_ConnectionNoSessionsTimeout: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1597
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1597 = extern struct {
    sv1597_IdleThreadTimeOut: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1598
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1598 = extern struct {
    sv1598_enableW9xsecuritysignature: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1599
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1599 = extern struct {
    sv1598_enforcekerberosreauthentication: u8,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1600
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1600 = extern struct {
    sv1598_disabledos: u8,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1601
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1601 = extern struct {
    sv1598_lowdiskspaceminimum: u32,
};
// --------------------------------------------------------
// Type: SERVER_INFO_1602
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_INFO_1602 = extern struct {
    sv_1598_disablestrictnamechecking: BOOL,
};
// --------------------------------------------------------
// Type: SERVER_TRANSPORT_INFO_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_TRANSPORT_INFO_0 = extern struct {
    svti0_numberofvcs: u32,
    svti0_transportname: ?*u16,
    svti0_transportaddress: ?*u8,
    svti0_transportaddresslength: u32,
    svti0_networkaddress: ?*u16,
};
// --------------------------------------------------------
// Type: SERVER_TRANSPORT_INFO_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_TRANSPORT_INFO_1 = extern struct {
    svti1_numberofvcs: u32,
    svti1_transportname: ?*u16,
    svti1_transportaddress: ?*u8,
    svti1_transportaddresslength: u32,
    svti1_networkaddress: ?*u16,
    svti1_domain: ?*u16,
};
// --------------------------------------------------------
// Type: SERVER_TRANSPORT_INFO_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_TRANSPORT_INFO_2 = extern struct {
    svti2_numberofvcs: u32,
    svti2_transportname: ?*u16,
    svti2_transportaddress: ?*u8,
    svti2_transportaddresslength: u32,
    svti2_networkaddress: ?*u16,
    svti2_domain: ?*u16,
    svti2_flags: u32,
};
// --------------------------------------------------------
// Type: SERVER_TRANSPORT_INFO_3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_TRANSPORT_INFO_3 = extern struct {
    svti3_numberofvcs: u32,
    svti3_transportname: ?*u16,
    svti3_transportaddress: ?*u8,
    svti3_transportaddresslength: u32,
    svti3_networkaddress: ?*u16,
    svti3_domain: ?*u16,
    svti3_flags: u32,
    svti3_passwordlength: u32,
    svti3_password: ?[*]u8,
};
// --------------------------------------------------------
// Type: SERVICE_INFO_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_INFO_0 = extern struct {
    svci0_name: ?*u16,
};
// --------------------------------------------------------
// Type: SERVICE_INFO_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_INFO_1 = extern struct {
    svci1_name: ?*u16,
    svci1_status: u32,
    svci1_code: u32,
    svci1_pid: u32,
};
// --------------------------------------------------------
// Type: SERVICE_INFO_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVICE_INFO_2 = extern struct {
    svci2_name: ?*u16,
    svci2_status: u32,
    svci2_code: u32,
    svci2_pid: u32,
    svci2_text: ?*u16,
    svci2_specific_error: u32,
    svci2_display_name: ?*u16,
};
// --------------------------------------------------------
// Type: USE_INFO_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USE_INFO_0 = extern struct {
    ui0_local: ?*u16,
    ui0_remote: ?*u16,
};
// --------------------------------------------------------
// Type: USE_INFO_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USE_INFO_1 = extern struct {
    ui1_local: ?*u16,
    ui1_remote: ?*u16,
    ui1_password: ?*u16,
    ui1_status: u32,
    ui1_asg_type: u32,
    ui1_refcount: u32,
    ui1_usecount: u32,
};
// --------------------------------------------------------
// Type: USE_INFO_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USE_INFO_2 = extern struct {
    ui2_local: ?*u16,
    ui2_remote: ?*u16,
    ui2_password: ?*u16,
    ui2_status: u32,
    ui2_asg_type: u32,
    ui2_refcount: u32,
    ui2_usecount: u32,
    ui2_username: ?*u16,
    ui2_domainname: ?*u16,
};
// --------------------------------------------------------
// Type: USE_INFO_3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USE_INFO_3 = extern struct {
    ui3_ui2: USE_INFO_2,
    ui3_flags: u32,
};
// --------------------------------------------------------
// Type: USE_INFO_4
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USE_INFO_4 = extern struct {
    ui4_ui3: USE_INFO_3,
    ui4_auth_identity_length: u32,
    ui4_auth_identity: ?*u8,
};
// --------------------------------------------------------
// Type: USE_INFO_5
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USE_INFO_5 = extern struct {
    ui4_ui3: USE_INFO_3,
    ui4_auth_identity_length: u32,
    ui4_auth_identity: ?*u8,
    ui5_security_descriptor_length: u32,
    ui5_security_descriptor: ?*u8,
    ui5_use_options_length: u32,
    ui5_use_options: ?*u8,
};
// --------------------------------------------------------
// Type: USE_OPTION_GENERIC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USE_OPTION_GENERIC = extern struct {
    Tag: u32,
    Length: u16,
    Reserved: u16,
};
// --------------------------------------------------------
// Type: USE_OPTION_DEFERRED_CONNECTION_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USE_OPTION_DEFERRED_CONNECTION_PARAMETERS = extern struct {
    Tag: u32,
    Length: u16,
    Reserved: u16,
};
// --------------------------------------------------------
// Type: TRANSPORT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TRANSPORT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: TRANSPORT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRANSPORT_INFO = extern struct {
    Type: TRANSPORT_TYPE,
};
// --------------------------------------------------------
// Type: USE_OPTION_TRANSPORT_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USE_OPTION_TRANSPORT_PARAMETERS = extern struct {
    Tag: u32,
    Length: u16,
    Reserved: u16,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_100
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_100 = extern struct {
    wki100_platform_id: u32,
    wki100_computername: ?*u16,
    wki100_langroup: ?*u16,
    wki100_ver_major: u32,
    wki100_ver_minor: u32,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_101
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_101 = extern struct {
    wki101_platform_id: u32,
    wki101_computername: ?*u16,
    wki101_langroup: ?*u16,
    wki101_ver_major: u32,
    wki101_ver_minor: u32,
    wki101_lanroot: ?*u16,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_102
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_102 = extern struct {
    wki102_platform_id: u32,
    wki102_computername: ?*u16,
    wki102_langroup: ?*u16,
    wki102_ver_major: u32,
    wki102_ver_minor: u32,
    wki102_lanroot: ?*u16,
    wki102_logged_on_users: u32,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_302
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_302 = extern struct {
    wki302_char_wait: u32,
    wki302_collection_time: u32,
    wki302_maximum_collection_count: u32,
    wki302_keep_conn: u32,
    wki302_keep_search: u32,
    wki302_max_cmds: u32,
    wki302_num_work_buf: u32,
    wki302_siz_work_buf: u32,
    wki302_max_wrk_cache: u32,
    wki302_sess_timeout: u32,
    wki302_siz_error: u32,
    wki302_num_alerts: u32,
    wki302_num_services: u32,
    wki302_errlog_sz: u32,
    wki302_print_buf_time: u32,
    wki302_num_char_buf: u32,
    wki302_siz_char_buf: u32,
    wki302_wrk_heuristics: ?*u16,
    wki302_mailslots: u32,
    wki302_num_dgram_buf: u32,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_402
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_402 = extern struct {
    wki402_char_wait: u32,
    wki402_collection_time: u32,
    wki402_maximum_collection_count: u32,
    wki402_keep_conn: u32,
    wki402_keep_search: u32,
    wki402_max_cmds: u32,
    wki402_num_work_buf: u32,
    wki402_siz_work_buf: u32,
    wki402_max_wrk_cache: u32,
    wki402_sess_timeout: u32,
    wki402_siz_error: u32,
    wki402_num_alerts: u32,
    wki402_num_services: u32,
    wki402_errlog_sz: u32,
    wki402_print_buf_time: u32,
    wki402_num_char_buf: u32,
    wki402_siz_char_buf: u32,
    wki402_wrk_heuristics: ?*u16,
    wki402_mailslots: u32,
    wki402_num_dgram_buf: u32,
    wki402_max_threads: u32,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_502
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_502 = extern struct {
    wki502_char_wait: u32,
    wki502_collection_time: u32,
    wki502_maximum_collection_count: u32,
    wki502_keep_conn: u32,
    wki502_max_cmds: u32,
    wki502_sess_timeout: u32,
    wki502_siz_char_buf: u32,
    wki502_max_threads: u32,
    wki502_lock_quota: u32,
    wki502_lock_increment: u32,
    wki502_lock_maximum: u32,
    wki502_pipe_increment: u32,
    wki502_pipe_maximum: u32,
    wki502_cache_file_timeout: u32,
    wki502_dormant_file_limit: u32,
    wki502_read_ahead_throughput: u32,
    wki502_num_mailslot_buffers: u32,
    wki502_num_srv_announce_buffers: u32,
    wki502_max_illegal_datagram_events: u32,
    wki502_illegal_datagram_event_reset_frequency: u32,
    wki502_log_election_packets: BOOL,
    wki502_use_opportunistic_locking: BOOL,
    wki502_use_unlock_behind: BOOL,
    wki502_use_close_behind: BOOL,
    wki502_buf_named_pipes: BOOL,
    wki502_use_lock_read_unlock: BOOL,
    wki502_utilize_nt_caching: BOOL,
    wki502_use_raw_read: BOOL,
    wki502_use_raw_write: BOOL,
    wki502_use_write_raw_data: BOOL,
    wki502_use_encryption: BOOL,
    wki502_buf_files_deny_write: BOOL,
    wki502_buf_read_only_files: BOOL,
    wki502_force_core_create_mode: BOOL,
    wki502_use_512_byte_max_transfer: BOOL,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1010
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1010 = extern struct {
    wki1010_char_wait: u32,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1011
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1011 = extern struct {
    wki1011_collection_time: u32,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1012
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1012 = extern struct {
    wki1012_maximum_collection_count: u32,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1027
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1027 = extern struct {
    wki1027_errlog_sz: u32,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1028
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1028 = extern struct {
    wki1028_print_buf_time: u32,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1032
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1032 = extern struct {
    wki1032_wrk_heuristics: u32,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1013
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1013 = extern struct {
    wki1013_keep_conn: u32,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1018
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1018 = extern struct {
    wki1018_sess_timeout: u32,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1023
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1023 = extern struct {
    wki1023_siz_char_buf: u32,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1033
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1033 = extern struct {
    wki1033_max_threads: u32,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1041
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1041 = extern struct {
    wki1041_lock_quota: u32,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1042
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1042 = extern struct {
    wki1042_lock_increment: u32,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1043
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1043 = extern struct {
    wki1043_lock_maximum: u32,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1044
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1044 = extern struct {
    wki1044_pipe_increment: u32,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1045
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1045 = extern struct {
    wki1045_pipe_maximum: u32,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1046
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1046 = extern struct {
    wki1046_dormant_file_limit: u32,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1047
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1047 = extern struct {
    wki1047_cache_file_timeout: u32,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1048
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1048 = extern struct {
    wki1048_use_opportunistic_locking: BOOL,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1049
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1049 = extern struct {
    wki1049_use_unlock_behind: BOOL,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1050
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1050 = extern struct {
    wki1050_use_close_behind: BOOL,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1051
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1051 = extern struct {
    wki1051_buf_named_pipes: BOOL,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1052
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1052 = extern struct {
    wki1052_use_lock_read_unlock: BOOL,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1053
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1053 = extern struct {
    wki1053_utilize_nt_caching: BOOL,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1054
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1054 = extern struct {
    wki1054_use_raw_read: BOOL,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1055
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1055 = extern struct {
    wki1055_use_raw_write: BOOL,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1056
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1056 = extern struct {
    wki1056_use_write_raw_data: BOOL,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1057
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1057 = extern struct {
    wki1057_use_encryption: BOOL,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1058
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1058 = extern struct {
    wki1058_buf_files_deny_write: BOOL,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1059
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1059 = extern struct {
    wki1059_buf_read_only_files: BOOL,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1060
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1060 = extern struct {
    wki1060_force_core_create_mode: BOOL,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1061
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1061 = extern struct {
    wki1061_use_512_byte_max_transfer: BOOL,
};
// --------------------------------------------------------
// Type: WKSTA_INFO_1062
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_INFO_1062 = extern struct {
    wki1062_read_ahead_throughput: u32,
};
// --------------------------------------------------------
// Type: WKSTA_USER_INFO_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_USER_INFO_0 = extern struct {
    wkui0_username: ?*u16,
};
// --------------------------------------------------------
// Type: WKSTA_USER_INFO_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_USER_INFO_1 = extern struct {
    wkui1_username: ?*u16,
    wkui1_logon_domain: ?*u16,
    wkui1_oth_domains: ?*u16,
    wkui1_logon_server: ?*u16,
};
// --------------------------------------------------------
// Type: WKSTA_USER_INFO_1101
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_USER_INFO_1101 = extern struct {
    wkui1101_oth_domains: ?*u16,
};
// --------------------------------------------------------
// Type: WKSTA_TRANSPORT_INFO_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WKSTA_TRANSPORT_INFO_0 = extern struct {
    wkti0_quality_of_service: u32,
    wkti0_number_of_vcs: u32,
    wkti0_transport_name: ?*u16,
    wkti0_transport_address: ?*u16,
    wkti0_wan_ish: BOOL,
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetUserAdd(
    servername: ?*u16,
    level: u32,
    buf: ?*u8,
    parm_err: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetUserEnum(
    servername: ?*u16,
    level: u32,
    filter: u32,
    bufptr: ?*?*u8,
    prefmaxlen: u32,
    entriesread: ?*u32,
    totalentries: ?*u32,
    resume_handle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetUserGetInfo(
    servername: ?*u16,
    username: ?*u16,
    level: u32,
    bufptr: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetUserSetInfo(
    servername: ?*u16,
    username: ?*u16,
    level: u32,
    buf: ?*u8,
    parm_err: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetUserDel(
    servername: ?*u16,
    username: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetUserGetGroups(
    servername: ?*u16,
    username: ?*u16,
    level: u32,
    bufptr: ?*?*u8,
    prefmaxlen: u32,
    entriesread: ?*u32,
    totalentries: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetUserSetGroups(
    servername: ?*u16,
    username: ?*u16,
    level: u32,
    buf: ?*u8,
    num_entries: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetUserGetLocalGroups(
    servername: ?*u16,
    username: ?*u16,
    level: u32,
    flags: u32,
    bufptr: ?*?*u8,
    prefmaxlen: u32,
    entriesread: ?*u32,
    totalentries: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetUserModalsGet(
    servername: ?*u16,
    level: u32,
    bufptr: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetUserModalsSet(
    servername: ?*u16,
    level: u32,
    buf: ?*u8,
    parm_err: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "samcli" fn NetUserChangePassword(
    domainname: ?*u16,
    username: ?*u16,
    oldpassword: ?*u16,
    newpassword: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetGroupAdd(
    servername: ?*u16,
    level: u32,
    buf: ?*u8,
    parm_err: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetGroupAddUser(
    servername: ?*u16,
    GroupName: ?*u16,
    username: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetGroupEnum(
    servername: ?*u16,
    level: u32,
    bufptr: ?*?*u8,
    prefmaxlen: u32,
    entriesread: ?*u32,
    totalentries: ?*u32,
    resume_handle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetGroupGetInfo(
    servername: ?*u16,
    groupname: ?*u16,
    level: u32,
    bufptr: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetGroupSetInfo(
    servername: ?*u16,
    groupname: ?*u16,
    level: u32,
    buf: ?*u8,
    parm_err: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetGroupDel(
    servername: ?*u16,
    groupname: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetGroupDelUser(
    servername: ?*u16,
    GroupName: ?*u16,
    Username: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetGroupGetUsers(
    servername: ?*u16,
    groupname: ?*u16,
    level: u32,
    bufptr: ?*?*u8,
    prefmaxlen: u32,
    entriesread: ?*u32,
    totalentries: ?*u32,
    ResumeHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetGroupSetUsers(
    servername: ?*u16,
    groupname: ?*u16,
    level: u32,
    buf: ?*u8,
    totalentries: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetLocalGroupAdd(
    servername: ?*u16,
    level: u32,
    buf: ?*u8,
    parm_err: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetLocalGroupAddMember(
    servername: ?*u16,
    groupname: ?*u16,
    membersid: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetLocalGroupEnum(
    servername: ?*u16,
    level: u32,
    bufptr: ?*?*u8,
    prefmaxlen: u32,
    entriesread: ?*u32,
    totalentries: ?*u32,
    resumehandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetLocalGroupGetInfo(
    servername: ?*u16,
    groupname: ?*u16,
    level: u32,
    bufptr: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetLocalGroupSetInfo(
    servername: ?*u16,
    groupname: ?*u16,
    level: u32,
    buf: ?*u8,
    parm_err: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetLocalGroupDel(
    servername: ?*u16,
    groupname: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetLocalGroupDelMember(
    servername: ?*u16,
    groupname: ?*u16,
    membersid: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetLocalGroupGetMembers(
    servername: ?*u16,
    localgroupname: ?*u16,
    level: u32,
    bufptr: ?*?*u8,
    prefmaxlen: u32,
    entriesread: ?*u32,
    totalentries: ?*u32,
    resumehandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetLocalGroupSetMembers(
    servername: ?*u16,
    groupname: ?*u16,
    level: u32,
    buf: ?*u8,
    totalentries: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetLocalGroupAddMembers(
    servername: ?*u16,
    groupname: ?*u16,
    level: u32,
    buf: ?*u8,
    totalentries: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetLocalGroupDelMembers(
    servername: ?*u16,
    groupname: ?*u16,
    level: u32,
    buf: ?*u8,
    totalentries: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetQueryDisplayInformation(
    ServerName: ?*u16,
    Level: u32,
    Index: u32,
    EntriesRequested: u32,
    PreferredMaximumLength: u32,
    ReturnedEntryCount: ?*u32,
    SortedBuffer: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetGetDisplayInformationIndex(
    ServerName: ?*u16,
    Level: u32,
    Prefix: ?*u16,
    Index: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetAccessAdd(
    servername: ?*u16,
    level: u32,
    buf: ?*u8,
    parm_err: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetAccessEnum(
    servername: ?*u16,
    BasePath: ?*u16,
    Recursive: u32,
    level: u32,
    bufptr: ?*?*u8,
    prefmaxlen: u32,
    entriesread: ?*u32,
    totalentries: ?*u32,
    resume_handle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetAccessGetInfo(
    servername: ?*u16,
    resource: ?*u16,
    level: u32,
    bufptr: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetAccessSetInfo(
    servername: ?*u16,
    resource: ?*u16,
    level: u32,
    buf: ?*u8,
    parm_err: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetAccessDel(
    servername: ?*u16,
    resource: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetAccessGetUserPerms(
    servername: ?*u16,
    UGname: ?*u16,
    resource: ?*u16,
    Perms: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetValidatePasswordPolicy(
    ServerName: ?*u16,
    Qualifier: ?*opaque{},
    ValidationType: NET_VALIDATE_PASSWORD_TYPE,
    InputArg: ?*opaque{},
    OutputArg: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "samcli" fn NetValidatePasswordPolicyFree(
    OutputArg: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn NetGetDCName(
    ServerName: ?*u16,
    DomainName: ?*u16,
    Buffer: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "logoncli" fn NetGetAnyDCName(
    ServerName: ?*u16,
    DomainName: ?*u16,
    Buffer: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wkscli" fn NetJoinDomain(
    lpServer: ?*u16,
    lpDomain: ?*u16,
    lpMachineAccountOU: ?*u16,
    lpAccount: ?*u16,
    lpPassword: ?*u16,
    fJoinOptions: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wkscli" fn NetUnjoinDomain(
    lpServer: ?*u16,
    lpAccount: ?*u16,
    lpPassword: ?*u16,
    fUnjoinOptions: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wkscli" fn NetRenameMachineInDomain(
    lpServer: ?*u16,
    lpNewMachineName: ?*u16,
    lpAccount: ?*u16,
    lpPassword: ?*u16,
    fRenameOptions: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wkscli" fn NetValidateName(
    lpServer: ?*u16,
    lpName: ?*u16,
    lpAccount: ?*u16,
    lpPassword: ?*u16,
    NameType: NETSETUP_NAME_TYPE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wkscli" fn NetGetJoinableOUs(
    lpServer: ?*u16,
    lpDomain: ?*u16,
    lpAccount: ?*u16,
    lpPassword: ?*u16,
    OUCount: ?*u32,
    OUs: ?*?*?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wkscli" fn NetAddAlternateComputerName(
    Server: ?*u16,
    AlternateName: ?*u16,
    DomainAccount: ?*u16,
    DomainAccountPassword: ?*u16,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wkscli" fn NetRemoveAlternateComputerName(
    Server: ?*u16,
    AlternateName: ?*u16,
    DomainAccount: ?*u16,
    DomainAccountPassword: ?*u16,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wkscli" fn NetSetPrimaryComputerName(
    Server: ?*u16,
    PrimaryName: ?*u16,
    DomainAccount: ?*u16,
    DomainAccountPassword: ?*u16,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wkscli" fn NetEnumerateComputerNames(
    Server: ?*u16,
    NameType: NET_COMPUTER_NAME_TYPE,
    Reserved: u32,
    EntryCount: ?*u32,
    ComputerNames: ?*?*?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetProvisionComputerAccount(
    lpDomain: ?*u16,
    lpMachineName: ?*u16,
    lpMachineAccountOU: ?*u16,
    lpDcName: ?*u16,
    dwOptions: u32,
    pProvisionBinData: ?*?*u8,
    pdwProvisionBinDataSize: ?*u32,
    pProvisionTextData: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetRequestOfflineDomainJoin(
    pProvisionBinData: ?*u8,
    cbProvisionBinDataSize: u32,
    dwOptions: u32,
    lpWindowsPath: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetCreateProvisioningPackage(
    pProvisioningParams: ?*NETSETUP_PROVISIONING_PARAMS,
    ppPackageBinData: ?*?*u8,
    pdwPackageBinDataSize: ?*u32,
    ppPackageTextData: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetRequestProvisioningPackageInstall(
    pPackageBinData: ?*u8,
    dwPackageBinDataSize: u32,
    dwProvisionOptions: u32,
    lpWindowsPath: ?*u16,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetGetAadJoinInformation(
    pcszTenantId: ?*u16,
    ppJoinInfo: ?*?*DSREG_JOIN_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetFreeAadJoinInformation(
    pJoinInfo: ?*DSREG_JOIN_INFO,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "wkscli" fn NetGetJoinInformation(
    lpServer: ?*u16,
    lpNameBuffer: ?*?*u16,
    BufferType: ?*NETSETUP_JOIN_STATUS,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "mstask" fn GetNetScheduleAccountInformation(
    pwszServerName: ?*u16,
    ccAccount: u32,
    wszAccount: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "mstask" fn SetNetScheduleAccountInformation(
    pwszServerName: ?*u16,
    pwszAccount: ?*u16,
    pwszPassword: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetAlertRaise(
    AlertType: ?*u16,
    Buffer: ?*opaque{},
    BufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetAlertRaiseEx(
    AlertType: ?*u16,
    VariableInfo: ?*opaque{},
    VariableInfoSize: u32,
    ServiceName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "netutils" fn NetApiBufferAllocate(
    ByteCount: u32,
    Buffer: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "netutils" fn NetApiBufferFree(
    Buffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "netutils" fn NetApiBufferReallocate(
    OldBuffer: ?*opaque{},
    NewByteCount: u32,
    NewBuffer: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "netutils" fn NetApiBufferSize(
    Buffer: ?*opaque{},
    ByteCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetAuditClear(
    server: ?*u16,
    backupfile: ?*u16,
    service: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetAuditRead(
    server: ?*u16,
    service: ?*u16,
    auditloghandle: ?*HLOG,
    offset: u32,
    reserved1: ?*u32,
    reserved2: u32,
    offsetflag: u32,
    bufptr: ?*?*u8,
    prefmaxlen: u32,
    bytesread: ?*u32,
    totalavailable: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetAuditWrite(
    type: u32,
    buf: ?*u8,
    numbytes: u32,
    service: ?*u16,
    reserved: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetConfigGet(
    server: ?*u16,
    component: ?*u16,
    parameter: ?*u16,
    bufptr: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetConfigGetAll(
    server: ?*u16,
    component: ?*u16,
    bufptr: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetConfigSet(
    server: ?*u16,
    reserved1: ?*u16,
    component: ?*u16,
    level: u32,
    reserved2: u32,
    buf: ?*u8,
    reserved3: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetErrorLogClear(
    UncServerName: ?*u16,
    BackupFile: ?*u16,
    Reserved: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetErrorLogRead(
    UncServerName: ?*u16,
    Reserved1: ?*u16,
    ErrorLogHandle: ?*HLOG,
    Offset: u32,
    Reserved2: ?*u32,
    Reserved3: u32,
    OffsetFlag: u32,
    BufPtr: ?*?*u8,
    PrefMaxSize: u32,
    BytesRead: ?*u32,
    TotalAvailable: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetErrorLogWrite(
    Reserved1: ?*u8,
    Code: u32,
    Component: ?*u16,
    Buffer: ?*u8,
    NumBytes: u32,
    MsgBuf: ?*u8,
    StrCount: u32,
    Reserved2: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetMessageNameAdd(
    servername: ?*u16,
    msgname: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetMessageNameEnum(
    servername: ?*u16,
    level: u32,
    bufptr: ?*?*u8,
    prefmaxlen: u32,
    entriesread: ?*u32,
    totalentries: ?*u32,
    resume_handle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetMessageNameGetInfo(
    servername: ?*u16,
    msgname: ?*u16,
    level: u32,
    bufptr: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetMessageNameDel(
    servername: ?*u16,
    msgname: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetMessageBufferSend(
    servername: ?*u16,
    msgname: ?*u16,
    fromname: ?*u16,
    buf: ?*u8,
    buflen: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "srvcli" fn NetRemoteTOD(
    UncServerName: ?*u16,
    BufferPtr: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "netutils" fn NetRemoteComputerSupports(
    UncServerName: ?*u16,
    OptionsWanted: u32,
    OptionsSupported: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "schedcli" fn NetScheduleJobAdd(
    Servername: ?*u16,
    Buffer: ?*u8,
    JobId: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "schedcli" fn NetScheduleJobDel(
    Servername: ?*u16,
    MinJobId: u32,
    MaxJobId: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "schedcli" fn NetScheduleJobEnum(
    Servername: ?*u16,
    PointerToBuffer: ?*?*u8,
    PrefferedMaximumLength: u32,
    EntriesRead: ?*u32,
    TotalEntries: ?*u32,
    ResumeHandle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "schedcli" fn NetScheduleJobGetInfo(
    Servername: ?*u16,
    JobId: u32,
    PointerToBuffer: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetServerEnum(
    servername: ?*u16,
    level: u32,
    bufptr: ?*?*u8,
    prefmaxlen: u32,
    entriesread: ?*u32,
    totalentries: ?*u32,
    servertype: u32,
    domain: ?*u16,
    resume_handle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "srvcli" fn NetServerGetInfo(
    servername: ?*u16,
    level: u32,
    bufptr: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "srvcli" fn NetServerSetInfo(
    servername: ?*u16,
    level: u32,
    buf: ?*u8,
    ParmError: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "srvcli" fn NetServerDiskEnum(
    servername: ?*u16,
    level: u32,
    bufptr: ?*?*u8,
    prefmaxlen: u32,
    entriesread: ?*u32,
    totalentries: ?*u32,
    resume_handle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "srvcli" fn NetServerComputerNameAdd(
    ServerName: ?*u16,
    EmulatedDomainName: ?*u16,
    EmulatedServerName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "srvcli" fn NetServerComputerNameDel(
    ServerName: ?*u16,
    EmulatedServerName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "srvcli" fn NetServerTransportAdd(
    servername: ?*u16,
    level: u32,
    bufptr: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "srvcli" fn NetServerTransportAddEx(
    servername: ?*u16,
    level: u32,
    bufptr: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "srvcli" fn NetServerTransportDel(
    servername: ?*u16,
    level: u32,
    bufptr: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "srvcli" fn NetServerTransportEnum(
    servername: ?*u16,
    level: u32,
    bufptr: ?*?*u8,
    prefmaxlen: u32,
    entriesread: ?*u32,
    totalentries: ?*u32,
    resume_handle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetServiceControl(
    servername: ?*u16,
    service: ?*u16,
    opcode: u32,
    arg: u32,
    bufptr: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetServiceEnum(
    servername: ?*u16,
    level: u32,
    bufptr: ?*?*u8,
    prefmaxlen: u32,
    entriesread: ?*u32,
    totalentries: ?*u32,
    resume_handle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetServiceGetInfo(
    servername: ?*u16,
    service: ?*u16,
    level: u32,
    bufptr: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetServiceInstall(
    servername: ?*u16,
    service: ?*u16,
    argc: u32,
    argv: ?*?*u16,
    bufptr: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wkscli" fn NetUseAdd(
    servername: ?*i8,
    LevelFlags: u32,
    buf: ?*u8,
    parm_err: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wkscli" fn NetUseDel(
    UncServerName: ?*u16,
    UseName: ?*u16,
    ForceLevelFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wkscli" fn NetUseEnum(
    UncServerName: ?*u16,
    LevelFlags: u32,
    BufPtr: ?*?*u8,
    PreferedMaximumSize: u32,
    EntriesRead: ?*u32,
    TotalEntries: ?*u32,
    ResumeHandle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wkscli" fn NetUseGetInfo(
    UncServerName: ?*u16,
    UseName: ?*u16,
    LevelFlags: u32,
    bufptr: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wkscli" fn NetWkstaGetInfo(
    servername: ?*u16,
    level: u32,
    bufptr: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wkscli" fn NetWkstaSetInfo(
    servername: ?*u16,
    level: u32,
    buffer: ?*u8,
    parm_err: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wkscli" fn NetWkstaUserGetInfo(
    reserved: ?*u16,
    level: u32,
    bufptr: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wkscli" fn NetWkstaUserSetInfo(
    reserved: ?*u16,
    level: u32,
    buf: ?*u8,
    parm_err: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wkscli" fn NetWkstaUserEnum(
    servername: ?*u16,
    level: u32,
    bufptr: ?*?*u8,
    prefmaxlen: u32,
    entriesread: ?*u32,
    totalentries: ?*u32,
    resumehandle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wkscli" fn NetWkstaTransportAdd(
    servername: ?*i8,
    level: u32,
    buf: ?*u8,
    parm_err: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wkscli" fn NetWkstaTransportDel(
    servername: ?*u16,
    transportname: ?*u16,
    ucond: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wkscli" fn NetWkstaTransportEnum(
    servername: ?*i8,
    level: u32,
    bufptr: ?*?*u8,
    prefmaxlen: u32,
    entriesread: ?*u32,
    totalentries: ?*u32,
    resume_handle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("systemservices.zig").BOOL;
const SID_NAME_USE = @import("security.zig").SID_NAME_USE;
const FILETIME = @import("windowsprogramming.zig").FILETIME;
const CERT_CONTEXT = @import("security.zig").CERT_CONTEXT;
const HRESULT = @import("com.zig").HRESULT;

test "" {
    const constant_export_count = 0;
    const type_export_count = 276;
    const func_count = 113;
    const unicode_alias_count = 0;
    const type_import_count = 6;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
