//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: GRAYSTRINGPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const GRAYSTRINGPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DRAWSTATEPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DRAWSTATEPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PAINTSTRUCT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PAINTSTRUCT = extern struct {
    hdc: HDC,
    fErase: BOOL,
    rcPaint: RECT,
    fRestore: BOOL,
    fIncUpdate: BOOL,
    rgbReserved: ?[*]u8,
};
// --------------------------------------------------------
// Type: DRAWTEXTPARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DRAWTEXTPARAMS = extern struct {
    cbSize: u32,
    iTabLength: i32,
    iLeftMargin: i32,
    iRightMargin: i32,
    uiLengthDrawn: u32,
};
// --------------------------------------------------------
// Type: MONITORINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MONITORINFO = extern struct {
    cbSize: u32,
    rcMonitor: RECT,
    rcWork: RECT,
    dwFlags: u32,
};
// --------------------------------------------------------
// Type: MONITORINFOEXA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MONITORINFOEXA = extern struct {
    __AnonymousBase_winuser_L13554_C43: MONITORINFO,
    szDevice: ?[*]i8,
};
// --------------------------------------------------------
// Type: MONITORINFOEXW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MONITORINFOEXW = extern struct {
    __AnonymousBase_winuser_L13558_C43: MONITORINFO,
    szDevice: ?[*]u16,
};
// --------------------------------------------------------
// Type: MONITORENUMPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MONITORENUMPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: HBITMAP
// TypeLayoutAttr: sequential
// RAIIFree 'DeleteObject' (TODO: can we use this information?)
pub const HBITMAP = ?*opaque{};
// --------------------------------------------------------
// Type: HBRUSH
// TypeLayoutAttr: sequential
// RAIIFree 'DeleteObject' (TODO: can we use this information?)
pub const HBRUSH = ?*opaque{};
// --------------------------------------------------------
// Type: HCOLORSPACE
// TypeLayoutAttr: sequential
// RAIIFree 'DeleteColorSpace' (TODO: can we use this information?)
pub const HCOLORSPACE = ?*opaque{};
// --------------------------------------------------------
// Type: HCURSOR
// TypeLayoutAttr: sequential
// RAIIFree 'DestroyCursor' (TODO: can we use this information?)
pub const HCURSOR = ?*opaque{};
// --------------------------------------------------------
// Type: HDC
// TypeLayoutAttr: sequential
// RAIIFree 'DeleteDC' (TODO: can we use this information?)
pub const HDC = ?*opaque{};
// --------------------------------------------------------
// Type: HdcMetdataEnhFileHandle
// TypeLayoutAttr: sequential
// RAIIFree 'DeleteEnhMetaFile' (TODO: can we use this information?)
pub const HdcMetdataEnhFileHandle = ?*opaque{};
// --------------------------------------------------------
// Type: HdcMetdataFileHandle
// TypeLayoutAttr: sequential
// RAIIFree 'DeleteMetaFile' (TODO: can we use this information?)
pub const HdcMetdataFileHandle = ?*opaque{};
// --------------------------------------------------------
// Type: HFONT
// TypeLayoutAttr: sequential
// RAIIFree 'DeleteObject' (TODO: can we use this information?)
pub const HFONT = ?*opaque{};
// --------------------------------------------------------
// Type: HICON
// TypeLayoutAttr: sequential
// RAIIFree 'DestroyIcon' (TODO: can we use this information?)
pub const HICON = ?*opaque{};
// --------------------------------------------------------
// Type: HPALETTE
// TypeLayoutAttr: sequential
// RAIIFree 'DeleteObject' (TODO: can we use this information?)
pub const HPALETTE = ?*opaque{};
// --------------------------------------------------------
// Type: HPEN
// TypeLayoutAttr: sequential
// RAIIFree 'DeleteObject' (TODO: can we use this information?)
pub const HPEN = ?*opaque{};
// --------------------------------------------------------
// Type: HRGN
// TypeLayoutAttr: sequential
// RAIIFree 'DeleteObject' (TODO: can we use this information?)
pub const HRGN = ?*opaque{};
// --------------------------------------------------------
// Type: XFORM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const XFORM = extern struct {
    eM11: f32,
    eM12: f32,
    eM21: f32,
    eM22: f32,
    eDx: f32,
    eDy: f32,
};
// --------------------------------------------------------
// Type: BITMAP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BITMAP = extern struct {
    bmType: i32,
    bmWidth: i32,
    bmHeight: i32,
    bmWidthBytes: i32,
    bmPlanes: u16,
    bmBitsPixel: u16,
    bmBits: ?*opaque{},
};
// --------------------------------------------------------
// Type: RGBTRIPLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RGBTRIPLE = extern struct {
    rgbtBlue: u8,
    rgbtGreen: u8,
    rgbtRed: u8,
};
// --------------------------------------------------------
// Type: RGBQUAD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RGBQUAD = extern struct {
    rgbBlue: u8,
    rgbGreen: u8,
    rgbRed: u8,
    rgbReserved: u8,
};
// --------------------------------------------------------
// Type: BITMAPCOREHEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BITMAPCOREHEADER = extern struct {
    bcSize: u32,
    bcWidth: u16,
    bcHeight: u16,
    bcPlanes: u16,
    bcBitCount: u16,
};
// --------------------------------------------------------
// Type: BITMAPV4HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BITMAPV4HEADER = extern struct {
    bV4Size: u32,
    bV4Width: i32,
    bV4Height: i32,
    bV4Planes: u16,
    bV4BitCount: u16,
    bV4V4Compression: u32,
    bV4SizeImage: u32,
    bV4XPelsPerMeter: i32,
    bV4YPelsPerMeter: i32,
    bV4ClrUsed: u32,
    bV4ClrImportant: u32,
    bV4RedMask: u32,
    bV4GreenMask: u32,
    bV4BlueMask: u32,
    bV4AlphaMask: u32,
    bV4CSType: u32,
    bV4Endpoints: CIEXYZTRIPLE,
    bV4GammaRed: u32,
    bV4GammaGreen: u32,
    bV4GammaBlue: u32,
};
// --------------------------------------------------------
// Type: BITMAPV5HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BITMAPV5HEADER = extern struct {
    bV5Size: u32,
    bV5Width: i32,
    bV5Height: i32,
    bV5Planes: u16,
    bV5BitCount: u16,
    bV5Compression: u32,
    bV5SizeImage: u32,
    bV5XPelsPerMeter: i32,
    bV5YPelsPerMeter: i32,
    bV5ClrUsed: u32,
    bV5ClrImportant: u32,
    bV5RedMask: u32,
    bV5GreenMask: u32,
    bV5BlueMask: u32,
    bV5AlphaMask: u32,
    bV5CSType: u32,
    bV5Endpoints: CIEXYZTRIPLE,
    bV5GammaRed: u32,
    bV5GammaGreen: u32,
    bV5GammaBlue: u32,
    bV5Intent: u32,
    bV5ProfileData: u32,
    bV5ProfileSize: u32,
    bV5Reserved: u32,
};
// --------------------------------------------------------
// Type: BITMAPINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BITMAPINFO = extern struct {
    bmiHeader: BITMAPINFOHEADER,
    bmiColors: ?[*]RGBQUAD,
};
// --------------------------------------------------------
// Type: BITMAPCOREINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BITMAPCOREINFO = extern struct {
    bmciHeader: BITMAPCOREHEADER,
    bmciColors: ?[*]RGBTRIPLE,
};
// --------------------------------------------------------
// Type: BITMAPFILEHEADER
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=2 Size=0
pub const BITMAPFILEHEADER = *opaque{
};
// --------------------------------------------------------
// Type: HANDLETABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HANDLETABLE = extern struct {
    objectHandle: ?[*]?*opaque{},
};
// --------------------------------------------------------
// Type: METARECORD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const METARECORD = extern struct {
    rdSize: u32,
    rdFunction: u16,
    rdParm: ?[*]u16,
};
// --------------------------------------------------------
// Type: METAHEADER
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=2 Size=0
pub const METAHEADER = *opaque{
};
// --------------------------------------------------------
// Type: ENHMETARECORD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENHMETARECORD = extern struct {
    iType: u32,
    nSize: u32,
    dParm: ?[*]u32,
};
// --------------------------------------------------------
// Type: ENHMETAHEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENHMETAHEADER = extern struct {
    iType: u32,
    nSize: u32,
    rclBounds: RECTL,
    rclFrame: RECTL,
    dSignature: u32,
    nVersion: u32,
    nBytes: u32,
    nRecords: u32,
    nHandles: u16,
    sReserved: u16,
    nDescription: u32,
    offDescription: u32,
    nPalEntries: u32,
    szlDevice: SIZE,
    szlMillimeters: SIZE,
    cbPixelFormat: u32,
    offPixelFormat: u32,
    bOpenGL: u32,
    szlMicrometers: SIZE,
};
// --------------------------------------------------------
// Type: TEXTMETRICA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TEXTMETRICA = extern struct {
    tmHeight: i32,
    tmAscent: i32,
    tmDescent: i32,
    tmInternalLeading: i32,
    tmExternalLeading: i32,
    tmAveCharWidth: i32,
    tmMaxCharWidth: i32,
    tmWeight: i32,
    tmOverhang: i32,
    tmDigitizedAspectX: i32,
    tmDigitizedAspectY: i32,
    tmFirstChar: u8,
    tmLastChar: u8,
    tmDefaultChar: u8,
    tmBreakChar: u8,
    tmItalic: u8,
    tmUnderlined: u8,
    tmStruckOut: u8,
    tmPitchAndFamily: u8,
    tmCharSet: u8,
};
// --------------------------------------------------------
// Type: TEXTMETRICW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TEXTMETRICW = extern struct {
    tmHeight: i32,
    tmAscent: i32,
    tmDescent: i32,
    tmInternalLeading: i32,
    tmExternalLeading: i32,
    tmAveCharWidth: i32,
    tmMaxCharWidth: i32,
    tmWeight: i32,
    tmOverhang: i32,
    tmDigitizedAspectX: i32,
    tmDigitizedAspectY: i32,
    tmFirstChar: u16,
    tmLastChar: u16,
    tmDefaultChar: u16,
    tmBreakChar: u16,
    tmItalic: u8,
    tmUnderlined: u8,
    tmStruckOut: u8,
    tmPitchAndFamily: u8,
    tmCharSet: u8,
};
// --------------------------------------------------------
// Type: NEWTEXTMETRICA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NEWTEXTMETRICA = extern struct {
    tmHeight: i32,
    tmAscent: i32,
    tmDescent: i32,
    tmInternalLeading: i32,
    tmExternalLeading: i32,
    tmAveCharWidth: i32,
    tmMaxCharWidth: i32,
    tmWeight: i32,
    tmOverhang: i32,
    tmDigitizedAspectX: i32,
    tmDigitizedAspectY: i32,
    tmFirstChar: u8,
    tmLastChar: u8,
    tmDefaultChar: u8,
    tmBreakChar: u8,
    tmItalic: u8,
    tmUnderlined: u8,
    tmStruckOut: u8,
    tmPitchAndFamily: u8,
    tmCharSet: u8,
    ntmFlags: u32,
    ntmSizeEM: u32,
    ntmCellHeight: u32,
    ntmAvgWidth: u32,
};
// --------------------------------------------------------
// Type: NEWTEXTMETRICW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NEWTEXTMETRICW = extern struct {
    tmHeight: i32,
    tmAscent: i32,
    tmDescent: i32,
    tmInternalLeading: i32,
    tmExternalLeading: i32,
    tmAveCharWidth: i32,
    tmMaxCharWidth: i32,
    tmWeight: i32,
    tmOverhang: i32,
    tmDigitizedAspectX: i32,
    tmDigitizedAspectY: i32,
    tmFirstChar: u16,
    tmLastChar: u16,
    tmDefaultChar: u16,
    tmBreakChar: u16,
    tmItalic: u8,
    tmUnderlined: u8,
    tmStruckOut: u8,
    tmPitchAndFamily: u8,
    tmCharSet: u8,
    ntmFlags: u32,
    ntmSizeEM: u32,
    ntmCellHeight: u32,
    ntmAvgWidth: u32,
};
// --------------------------------------------------------
// Type: NEWTEXTMETRICEXA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NEWTEXTMETRICEXA = extern struct {
    ntmTm: NEWTEXTMETRICA,
    ntmFontSig: FONTSIGNATURE,
};
// --------------------------------------------------------
// Type: NEWTEXTMETRICEXW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NEWTEXTMETRICEXW = extern struct {
    ntmTm: NEWTEXTMETRICW,
    ntmFontSig: FONTSIGNATURE,
};
// --------------------------------------------------------
// Type: PELARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PELARRAY = extern struct {
    paXCount: i32,
    paYCount: i32,
    paXExt: i32,
    paYExt: i32,
    paRGBs: u8,
};
// --------------------------------------------------------
// Type: LOGBRUSH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LOGBRUSH = extern struct {
    lbStyle: u32,
    lbColor: u32,
    lbHatch: ?*opaque{},
};
// --------------------------------------------------------
// Type: LOGBRUSH32
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LOGBRUSH32 = extern struct {
    lbStyle: u32,
    lbColor: u32,
    lbHatch: u32,
};
// --------------------------------------------------------
// Type: LOGPEN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LOGPEN = extern struct {
    lopnStyle: u32,
    lopnWidth: POINT,
    lopnColor: u32,
};
// --------------------------------------------------------
// Type: EXTLOGPEN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EXTLOGPEN = extern struct {
    elpPenStyle: u32,
    elpWidth: u32,
    elpBrushStyle: u32,
    elpColor: u32,
    elpHatch: ?*opaque{},
    elpNumEntries: u32,
    elpStyleEntry: ?[*]u32,
};
// --------------------------------------------------------
// Type: EXTLOGPEN32
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EXTLOGPEN32 = extern struct {
    elpPenStyle: u32,
    elpWidth: u32,
    elpBrushStyle: u32,
    elpColor: u32,
    elpHatch: u32,
    elpNumEntries: u32,
    elpStyleEntry: ?[*]u32,
};
// --------------------------------------------------------
// Type: LOGPALETTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LOGPALETTE = extern struct {
    palVersion: u16,
    palNumEntries: u16,
    palPalEntry: ?[*]PALETTEENTRY,
};
// --------------------------------------------------------
// Type: ENUMLOGFONTA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENUMLOGFONTA = extern struct {
    elfLogFont: LOGFONTA,
    elfFullName: ?[*]u8,
    elfStyle: ?[*]u8,
};
// --------------------------------------------------------
// Type: ENUMLOGFONTW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENUMLOGFONTW = extern struct {
    elfLogFont: LOGFONTW,
    elfFullName: ?[*]u16,
    elfStyle: ?[*]u16,
};
// --------------------------------------------------------
// Type: ENUMLOGFONTEXA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENUMLOGFONTEXA = extern struct {
    elfLogFont: LOGFONTA,
    elfFullName: ?[*]u8,
    elfStyle: ?[*]u8,
    elfScript: ?[*]u8,
};
// --------------------------------------------------------
// Type: ENUMLOGFONTEXW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENUMLOGFONTEXW = extern struct {
    elfLogFont: LOGFONTW,
    elfFullName: ?[*]u16,
    elfStyle: ?[*]u16,
    elfScript: ?[*]u16,
};
// --------------------------------------------------------
// Type: PANOSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PANOSE = extern struct {
    bFamilyType: u8,
    bSerifStyle: u8,
    bWeight: u8,
    bProportion: u8,
    bContrast: u8,
    bStrokeVariation: u8,
    bArmStyle: u8,
    bLetterform: u8,
    bMidline: u8,
    bXHeight: u8,
};
// --------------------------------------------------------
// Type: EXTLOGFONTA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EXTLOGFONTA = extern struct {
    elfLogFont: LOGFONTA,
    elfFullName: ?[*]u8,
    elfStyle: ?[*]u8,
    elfVersion: u32,
    elfStyleSize: u32,
    elfMatch: u32,
    elfReserved: u32,
    elfVendorId: ?[*]u8,
    elfCulture: u32,
    elfPanose: PANOSE,
};
// --------------------------------------------------------
// Type: EXTLOGFONTW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EXTLOGFONTW = extern struct {
    elfLogFont: LOGFONTW,
    elfFullName: ?[*]u16,
    elfStyle: ?[*]u16,
    elfVersion: u32,
    elfStyleSize: u32,
    elfMatch: u32,
    elfReserved: u32,
    elfVendorId: ?[*]u8,
    elfCulture: u32,
    elfPanose: PANOSE,
};
// --------------------------------------------------------
// Type: DISPLAY_DEVICEA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISPLAY_DEVICEA = extern struct {
    cb: u32,
    DeviceName: ?[*]i8,
    DeviceString: ?[*]i8,
    StateFlags: u32,
    DeviceID: ?[*]i8,
    DeviceKey: ?[*]i8,
};
// --------------------------------------------------------
// Type: DISPLAY_DEVICEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISPLAY_DEVICEW = extern struct {
    cb: u32,
    DeviceName: ?[*]u16,
    DeviceString: ?[*]u16,
    StateFlags: u32,
    DeviceID: ?[*]u16,
    DeviceKey: ?[*]u16,
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_COLOR_ENCODING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DISPLAYCONFIG_COLOR_ENCODING = *opaque{
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    Anonymous: _Anonymous_e__Union,
    colorEncoding: DISPLAYCONFIG_COLOR_ENCODING,
    bitsPerColorChannel: u32,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: u32,
        };
    };
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: u32,
        };
    };
};
// --------------------------------------------------------
// Type: DISPLAYCONFIG_SDR_WHITE_LEVEL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISPLAYCONFIG_SDR_WHITE_LEVEL = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    SDRWhiteLevel: u32,
};
// --------------------------------------------------------
// Type: RGNDATAHEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RGNDATAHEADER = extern struct {
    dwSize: u32,
    iType: u32,
    nCount: u32,
    nRgnSize: u32,
    rcBound: RECT,
};
// --------------------------------------------------------
// Type: RGNDATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RGNDATA = extern struct {
    rdh: RGNDATAHEADER,
    Buffer: ?[*]i8,
};
// --------------------------------------------------------
// Type: ABC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ABC = extern struct {
    abcA: i32,
    abcB: u32,
    abcC: i32,
};
// --------------------------------------------------------
// Type: ABCFLOAT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ABCFLOAT = extern struct {
    abcfA: f32,
    abcfB: f32,
    abcfC: f32,
};
// --------------------------------------------------------
// Type: OUTLINETEXTMETRICA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OUTLINETEXTMETRICA = extern struct {
    otmSize: u32,
    otmTextMetrics: TEXTMETRICA,
    otmFiller: u8,
    otmPanoseNumber: PANOSE,
    otmfsSelection: u32,
    otmfsType: u32,
    otmsCharSlopeRise: i32,
    otmsCharSlopeRun: i32,
    otmItalicAngle: i32,
    otmEMSquare: u32,
    otmAscent: i32,
    otmDescent: i32,
    otmLineGap: u32,
    otmsCapEmHeight: u32,
    otmsXHeight: u32,
    otmrcFontBox: RECT,
    otmMacAscent: i32,
    otmMacDescent: i32,
    otmMacLineGap: u32,
    otmusMinimumPPEM: u32,
    otmptSubscriptSize: POINT,
    otmptSubscriptOffset: POINT,
    otmptSuperscriptSize: POINT,
    otmptSuperscriptOffset: POINT,
    otmsStrikeoutSize: u32,
    otmsStrikeoutPosition: i32,
    otmsUnderscoreSize: i32,
    otmsUnderscorePosition: i32,
    otmpFamilyName: ?*i8,
    otmpFaceName: ?*i8,
    otmpStyleName: ?*i8,
    otmpFullName: ?*i8,
};
// --------------------------------------------------------
// Type: OUTLINETEXTMETRICW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OUTLINETEXTMETRICW = extern struct {
    otmSize: u32,
    otmTextMetrics: TEXTMETRICW,
    otmFiller: u8,
    otmPanoseNumber: PANOSE,
    otmfsSelection: u32,
    otmfsType: u32,
    otmsCharSlopeRise: i32,
    otmsCharSlopeRun: i32,
    otmItalicAngle: i32,
    otmEMSquare: u32,
    otmAscent: i32,
    otmDescent: i32,
    otmLineGap: u32,
    otmsCapEmHeight: u32,
    otmsXHeight: u32,
    otmrcFontBox: RECT,
    otmMacAscent: i32,
    otmMacDescent: i32,
    otmMacLineGap: u32,
    otmusMinimumPPEM: u32,
    otmptSubscriptSize: POINT,
    otmptSubscriptOffset: POINT,
    otmptSuperscriptSize: POINT,
    otmptSuperscriptOffset: POINT,
    otmsStrikeoutSize: u32,
    otmsStrikeoutPosition: i32,
    otmsUnderscoreSize: i32,
    otmsUnderscorePosition: i32,
    otmpFamilyName: ?*i8,
    otmpFaceName: ?*i8,
    otmpStyleName: ?*i8,
    otmpFullName: ?*i8,
};
// --------------------------------------------------------
// Type: POLYTEXTA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLYTEXTA = extern struct {
    x: i32,
    y: i32,
    n: u32,
    lpstr: ?*i8,
    uiFlags: u32,
    rcl: RECT,
    pdx: ?*i32,
};
// --------------------------------------------------------
// Type: POLYTEXTW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POLYTEXTW = extern struct {
    x: i32,
    y: i32,
    n: u32,
    lpstr: ?*u16,
    uiFlags: u32,
    rcl: RECT,
    pdx: ?*i32,
};
// --------------------------------------------------------
// Type: FIXED
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FIXED = extern struct {
    fract: u16,
    value: i16,
};
// --------------------------------------------------------
// Type: MAT2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MAT2 = extern struct {
    eM11: FIXED,
    eM12: FIXED,
    eM21: FIXED,
    eM22: FIXED,
};
// --------------------------------------------------------
// Type: GLYPHMETRICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GLYPHMETRICS = extern struct {
    gmBlackBoxX: u32,
    gmBlackBoxY: u32,
    gmptGlyphOrigin: POINT,
    gmCellIncX: i16,
    gmCellIncY: i16,
};
// --------------------------------------------------------
// Type: POINTFX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const POINTFX = extern struct {
    x: FIXED,
    y: FIXED,
};
// --------------------------------------------------------
// Type: TTPOLYCURVE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TTPOLYCURVE = extern struct {
    wType: u16,
    cpfx: u16,
    apfx: ?[*]POINTFX,
};
// --------------------------------------------------------
// Type: TTPOLYGONHEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TTPOLYGONHEADER = extern struct {
    cb: u32,
    dwType: u32,
    pfxStart: POINTFX,
};
// --------------------------------------------------------
// Type: GCP_RESULTSA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GCP_RESULTSA = extern struct {
    lStructSize: u32,
    lpOutString: ?*i8,
    lpOrder: ?*u32,
    lpDx: ?*i32,
    lpCaretPos: ?*i32,
    lpClass: ?*i8,
    lpGlyphs: ?*u16,
    nGlyphs: u32,
    nMaxFit: i32,
};
// --------------------------------------------------------
// Type: GCP_RESULTSW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GCP_RESULTSW = extern struct {
    lStructSize: u32,
    lpOutString: ?*u16,
    lpOrder: ?*u32,
    lpDx: ?*i32,
    lpCaretPos: ?*i32,
    lpClass: ?*i8,
    lpGlyphs: ?*u16,
    nGlyphs: u32,
    nMaxFit: i32,
};
// --------------------------------------------------------
// Type: RASTERIZER_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RASTERIZER_STATUS = extern struct {
    nSize: i16,
    wFlags: i16,
    nLanguageID: i16,
};
// --------------------------------------------------------
// Type: OLDFONTENUMPROCA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OLDFONTENUMPROCA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: OLDFONTENUMPROCW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OLDFONTENUMPROCW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FONTENUMPROCA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FONTENUMPROCA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FONTENUMPROCW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FONTENUMPROCW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FONTENUMPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FONTENUMPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: GOBJENUMPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const GOBJENUMPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LINEDDAPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LINEDDAPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPFNDEVMODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFNDEVMODE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPFNDEVCAPS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPFNDEVCAPS = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WCRANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WCRANGE = extern struct {
    wcLow: u16,
    cGlyphs: u16,
};
// --------------------------------------------------------
// Type: GLYPHSET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GLYPHSET = extern struct {
    cbThis: u32,
    flAccel: u32,
    cGlyphsSupported: u32,
    cRanges: u32,
    ranges: ?[*]WCRANGE,
};
// --------------------------------------------------------
// Type: DESIGNVECTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DESIGNVECTOR = extern struct {
    dvReserved: u32,
    dvNumAxes: u32,
    dvValues: ?[*]i32,
};
// --------------------------------------------------------
// Type: AXISINFOA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AXISINFOA = extern struct {
    axMinValue: i32,
    axMaxValue: i32,
    axAxisName: ?[*]u8,
};
// --------------------------------------------------------
// Type: AXISINFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AXISINFOW = extern struct {
    axMinValue: i32,
    axMaxValue: i32,
    axAxisName: ?[*]u16,
};
// --------------------------------------------------------
// Type: AXESLISTA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AXESLISTA = extern struct {
    axlReserved: u32,
    axlNumAxes: u32,
    axlAxisInfo: ?[*]AXISINFOA,
};
// --------------------------------------------------------
// Type: AXESLISTW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AXESLISTW = extern struct {
    axlReserved: u32,
    axlNumAxes: u32,
    axlAxisInfo: ?[*]AXISINFOW,
};
// --------------------------------------------------------
// Type: ENUMLOGFONTEXDVA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENUMLOGFONTEXDVA = extern struct {
    elfEnumLogfontEx: ENUMLOGFONTEXA,
    elfDesignVector: DESIGNVECTOR,
};
// --------------------------------------------------------
// Type: ENUMLOGFONTEXDVW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENUMLOGFONTEXDVW = extern struct {
    elfEnumLogfontEx: ENUMLOGFONTEXW,
    elfDesignVector: DESIGNVECTOR,
};
// --------------------------------------------------------
// Type: ENUMTEXTMETRICA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENUMTEXTMETRICA = extern struct {
    etmNewTextMetricEx: NEWTEXTMETRICEXA,
    etmAxesList: AXESLISTA,
};
// --------------------------------------------------------
// Type: ENUMTEXTMETRICW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENUMTEXTMETRICW = extern struct {
    etmNewTextMetricEx: NEWTEXTMETRICEXW,
    etmAxesList: AXESLISTW,
};
// --------------------------------------------------------
// Type: TRIVERTEX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRIVERTEX = extern struct {
    x: i32,
    y: i32,
    Red: u16,
    Green: u16,
    Blue: u16,
    Alpha: u16,
};
// --------------------------------------------------------
// Type: GRADIENT_TRIANGLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GRADIENT_TRIANGLE = extern struct {
    Vertex1: u32,
    Vertex2: u32,
    Vertex3: u32,
};
// --------------------------------------------------------
// Type: GRADIENT_RECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GRADIENT_RECT = extern struct {
    UpperLeft: u32,
    LowerRight: u32,
};
// --------------------------------------------------------
// Type: BLENDFUNCTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BLENDFUNCTION = extern struct {
    BlendOp: u8,
    BlendFlags: u8,
    SourceConstantAlpha: u8,
    AlphaFormat: u8,
};
// --------------------------------------------------------
// Type: MFENUMPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MFENUMPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ENHMFENUMPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ENHMFENUMPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DIBSECTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DIBSECTION = extern struct {
    dsBm: BITMAP,
    dsBmih: BITMAPINFOHEADER,
    dsBitfields: ?[*]u32,
    dshSection: HANDLE,
    dsOffset: u32,
};
// --------------------------------------------------------
// Type: COLORADJUSTMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COLORADJUSTMENT = extern struct {
    caSize: u16,
    caFlags: u16,
    caIlluminantIndex: u16,
    caRedGamma: u16,
    caGreenGamma: u16,
    caBlueGamma: u16,
    caReferenceBlack: u16,
    caReferenceWhite: u16,
    caContrast: i16,
    caBrightness: i16,
    caColorfulness: i16,
    caRedGreenTint: i16,
};
// --------------------------------------------------------
// Type: KERNINGPAIR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KERNINGPAIR = extern struct {
    wFirst: u16,
    wSecond: u16,
    iKernAmount: i32,
};
// --------------------------------------------------------
// Type: EMR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMR = extern struct {
    iType: u32,
    nSize: u32,
};
// --------------------------------------------------------
// Type: EMRTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRTEXT = extern struct {
    ptlReference: POINTL,
    nChars: u32,
    offString: u32,
    fOptions: u32,
    rcl: RECTL,
    offDx: u32,
};
// --------------------------------------------------------
// Type: ABORTPATH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ABORTPATH = extern struct {
    emr: EMR,
};
// --------------------------------------------------------
// Type: EMRSELECTCLIPPATH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRSELECTCLIPPATH = extern struct {
    emr: EMR,
    iMode: u32,
};
// --------------------------------------------------------
// Type: EMRSETMITERLIMIT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRSETMITERLIMIT = extern struct {
    emr: EMR,
    eMiterLimit: f32,
};
// --------------------------------------------------------
// Type: EMRRESTOREDC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRRESTOREDC = extern struct {
    emr: EMR,
    iRelative: i32,
};
// --------------------------------------------------------
// Type: EMRSETARCDIRECTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRSETARCDIRECTION = extern struct {
    emr: EMR,
    iArcDirection: u32,
};
// --------------------------------------------------------
// Type: EMRSETMAPPERFLAGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRSETMAPPERFLAGS = extern struct {
    emr: EMR,
    dwFlags: u32,
};
// --------------------------------------------------------
// Type: EMRSETTEXTCOLOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRSETTEXTCOLOR = extern struct {
    emr: EMR,
    crColor: u32,
};
// --------------------------------------------------------
// Type: EMRSELECTOBJECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRSELECTOBJECT = extern struct {
    emr: EMR,
    ihObject: u32,
};
// --------------------------------------------------------
// Type: EMRSELECTPALETTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRSELECTPALETTE = extern struct {
    emr: EMR,
    ihPal: u32,
};
// --------------------------------------------------------
// Type: EMRRESIZEPALETTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRRESIZEPALETTE = extern struct {
    emr: EMR,
    ihPal: u32,
    cEntries: u32,
};
// --------------------------------------------------------
// Type: EMRSETPALETTEENTRIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRSETPALETTEENTRIES = extern struct {
    emr: EMR,
    ihPal: u32,
    iStart: u32,
    cEntries: u32,
    aPalEntries: ?[*]PALETTEENTRY,
};
// --------------------------------------------------------
// Type: EMRSETCOLORADJUSTMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRSETCOLORADJUSTMENT = extern struct {
    emr: EMR,
    ColorAdjustment: COLORADJUSTMENT,
};
// --------------------------------------------------------
// Type: EMRGDICOMMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRGDICOMMENT = extern struct {
    emr: EMR,
    cbData: u32,
    Data: ?[*]u8,
};
// --------------------------------------------------------
// Type: EMREOF
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMREOF = extern struct {
    emr: EMR,
    nPalEntries: u32,
    offPalEntries: u32,
    nSizeLast: u32,
};
// --------------------------------------------------------
// Type: EMRLINETO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRLINETO = extern struct {
    emr: EMR,
    ptl: POINTL,
};
// --------------------------------------------------------
// Type: EMROFFSETCLIPRGN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMROFFSETCLIPRGN = extern struct {
    emr: EMR,
    ptlOffset: POINTL,
};
// --------------------------------------------------------
// Type: EMRFILLPATH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRFILLPATH = extern struct {
    emr: EMR,
    rclBounds: RECTL,
};
// --------------------------------------------------------
// Type: EMREXCLUDECLIPRECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMREXCLUDECLIPRECT = extern struct {
    emr: EMR,
    rclClip: RECTL,
};
// --------------------------------------------------------
// Type: EMRSETVIEWPORTORGEX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRSETVIEWPORTORGEX = extern struct {
    emr: EMR,
    ptlOrigin: POINTL,
};
// --------------------------------------------------------
// Type: EMRSETVIEWPORTEXTEX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRSETVIEWPORTEXTEX = extern struct {
    emr: EMR,
    szlExtent: SIZE,
};
// --------------------------------------------------------
// Type: EMRSCALEVIEWPORTEXTEX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRSCALEVIEWPORTEXTEX = extern struct {
    emr: EMR,
    xNum: i32,
    xDenom: i32,
    yNum: i32,
    yDenom: i32,
};
// --------------------------------------------------------
// Type: EMRSETWORLDTRANSFORM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRSETWORLDTRANSFORM = extern struct {
    emr: EMR,
    xform: XFORM,
};
// --------------------------------------------------------
// Type: EMRMODIFYWORLDTRANSFORM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRMODIFYWORLDTRANSFORM = extern struct {
    emr: EMR,
    xform: XFORM,
    iMode: u32,
};
// --------------------------------------------------------
// Type: EMRSETPIXELV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRSETPIXELV = extern struct {
    emr: EMR,
    ptlPixel: POINTL,
    crColor: u32,
};
// --------------------------------------------------------
// Type: EMREXTFLOODFILL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMREXTFLOODFILL = extern struct {
    emr: EMR,
    ptlStart: POINTL,
    crColor: u32,
    iMode: u32,
};
// --------------------------------------------------------
// Type: EMRELLIPSE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRELLIPSE = extern struct {
    emr: EMR,
    rclBox: RECTL,
};
// --------------------------------------------------------
// Type: EMRROUNDRECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRROUNDRECT = extern struct {
    emr: EMR,
    rclBox: RECTL,
    szlCorner: SIZE,
};
// --------------------------------------------------------
// Type: EMRARC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRARC = extern struct {
    emr: EMR,
    rclBox: RECTL,
    ptlStart: POINTL,
    ptlEnd: POINTL,
};
// --------------------------------------------------------
// Type: EMRANGLEARC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRANGLEARC = extern struct {
    emr: EMR,
    ptlCenter: POINTL,
    nRadius: u32,
    eStartAngle: f32,
    eSweepAngle: f32,
};
// --------------------------------------------------------
// Type: EMRPOLYLINE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRPOLYLINE = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    cptl: u32,
    aptl: ?[*]POINTL,
};
// --------------------------------------------------------
// Type: EMRPOLYLINE16
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRPOLYLINE16 = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    cpts: u32,
    apts: ?[*]POINTS,
};
// --------------------------------------------------------
// Type: EMRPOLYDRAW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRPOLYDRAW = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    cptl: u32,
    aptl: ?[*]POINTL,
    abTypes: ?[*]u8,
};
// --------------------------------------------------------
// Type: EMRPOLYDRAW16
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRPOLYDRAW16 = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    cpts: u32,
    apts: ?[*]POINTS,
    abTypes: ?[*]u8,
};
// --------------------------------------------------------
// Type: EMRPOLYPOLYLINE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRPOLYPOLYLINE = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    nPolys: u32,
    cptl: u32,
    aPolyCounts: ?[*]u32,
    aptl: ?[*]POINTL,
};
// --------------------------------------------------------
// Type: EMRPOLYPOLYLINE16
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRPOLYPOLYLINE16 = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    nPolys: u32,
    cpts: u32,
    aPolyCounts: ?[*]u32,
    apts: ?[*]POINTS,
};
// --------------------------------------------------------
// Type: EMRINVERTRGN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRINVERTRGN = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    cbRgnData: u32,
    RgnData: ?[*]u8,
};
// --------------------------------------------------------
// Type: EMRFILLRGN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRFILLRGN = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    cbRgnData: u32,
    ihBrush: u32,
    RgnData: ?[*]u8,
};
// --------------------------------------------------------
// Type: EMRFRAMERGN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRFRAMERGN = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    cbRgnData: u32,
    ihBrush: u32,
    szlStroke: SIZE,
    RgnData: ?[*]u8,
};
// --------------------------------------------------------
// Type: EMREXTSELECTCLIPRGN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMREXTSELECTCLIPRGN = extern struct {
    emr: EMR,
    cbRgnData: u32,
    iMode: u32,
    RgnData: ?[*]u8,
};
// --------------------------------------------------------
// Type: EMREXTTEXTOUTA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMREXTTEXTOUTA = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    iGraphicsMode: u32,
    exScale: f32,
    eyScale: f32,
    emrtext: EMRTEXT,
};
// --------------------------------------------------------
// Type: EMRPOLYTEXTOUTA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRPOLYTEXTOUTA = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    iGraphicsMode: u32,
    exScale: f32,
    eyScale: f32,
    cStrings: i32,
    aemrtext: ?[*]EMRTEXT,
};
// --------------------------------------------------------
// Type: EMRBITBLT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRBITBLT = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    xDest: i32,
    yDest: i32,
    cxDest: i32,
    cyDest: i32,
    dwRop: u32,
    xSrc: i32,
    ySrc: i32,
    xformSrc: XFORM,
    crBkColorSrc: u32,
    iUsageSrc: u32,
    offBmiSrc: u32,
    cbBmiSrc: u32,
    offBitsSrc: u32,
    cbBitsSrc: u32,
};
// --------------------------------------------------------
// Type: EMRSTRETCHBLT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRSTRETCHBLT = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    xDest: i32,
    yDest: i32,
    cxDest: i32,
    cyDest: i32,
    dwRop: u32,
    xSrc: i32,
    ySrc: i32,
    xformSrc: XFORM,
    crBkColorSrc: u32,
    iUsageSrc: u32,
    offBmiSrc: u32,
    cbBmiSrc: u32,
    offBitsSrc: u32,
    cbBitsSrc: u32,
    cxSrc: i32,
    cySrc: i32,
};
// --------------------------------------------------------
// Type: EMRMASKBLT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRMASKBLT = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    xDest: i32,
    yDest: i32,
    cxDest: i32,
    cyDest: i32,
    dwRop: u32,
    xSrc: i32,
    ySrc: i32,
    xformSrc: XFORM,
    crBkColorSrc: u32,
    iUsageSrc: u32,
    offBmiSrc: u32,
    cbBmiSrc: u32,
    offBitsSrc: u32,
    cbBitsSrc: u32,
    xMask: i32,
    yMask: i32,
    iUsageMask: u32,
    offBmiMask: u32,
    cbBmiMask: u32,
    offBitsMask: u32,
    cbBitsMask: u32,
};
// --------------------------------------------------------
// Type: EMRPLGBLT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRPLGBLT = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    aptlDest: ?[*]POINTL,
    xSrc: i32,
    ySrc: i32,
    cxSrc: i32,
    cySrc: i32,
    xformSrc: XFORM,
    crBkColorSrc: u32,
    iUsageSrc: u32,
    offBmiSrc: u32,
    cbBmiSrc: u32,
    offBitsSrc: u32,
    cbBitsSrc: u32,
    xMask: i32,
    yMask: i32,
    iUsageMask: u32,
    offBmiMask: u32,
    cbBmiMask: u32,
    offBitsMask: u32,
    cbBitsMask: u32,
};
// --------------------------------------------------------
// Type: EMRSETDIBITSTODEVICE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRSETDIBITSTODEVICE = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    xDest: i32,
    yDest: i32,
    xSrc: i32,
    ySrc: i32,
    cxSrc: i32,
    cySrc: i32,
    offBmiSrc: u32,
    cbBmiSrc: u32,
    offBitsSrc: u32,
    cbBitsSrc: u32,
    iUsageSrc: u32,
    iStartScan: u32,
    cScans: u32,
};
// --------------------------------------------------------
// Type: EMRSTRETCHDIBITS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRSTRETCHDIBITS = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    xDest: i32,
    yDest: i32,
    xSrc: i32,
    ySrc: i32,
    cxSrc: i32,
    cySrc: i32,
    offBmiSrc: u32,
    cbBmiSrc: u32,
    offBitsSrc: u32,
    cbBitsSrc: u32,
    iUsageSrc: u32,
    dwRop: u32,
    cxDest: i32,
    cyDest: i32,
};
// --------------------------------------------------------
// Type: EMREXTCREATEFONTINDIRECTW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMREXTCREATEFONTINDIRECTW = extern struct {
    emr: EMR,
    ihFont: u32,
    elfw: EXTLOGFONTW,
};
// --------------------------------------------------------
// Type: EMRCREATEPALETTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRCREATEPALETTE = extern struct {
    emr: EMR,
    ihPal: u32,
    lgpl: LOGPALETTE,
};
// --------------------------------------------------------
// Type: EMRCREATEPEN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRCREATEPEN = extern struct {
    emr: EMR,
    ihPen: u32,
    lopn: LOGPEN,
};
// --------------------------------------------------------
// Type: EMREXTCREATEPEN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMREXTCREATEPEN = extern struct {
    emr: EMR,
    ihPen: u32,
    offBmi: u32,
    cbBmi: u32,
    offBits: u32,
    cbBits: u32,
    elp: EXTLOGPEN32,
};
// --------------------------------------------------------
// Type: EMRCREATEBRUSHINDIRECT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRCREATEBRUSHINDIRECT = extern struct {
    emr: EMR,
    ihBrush: u32,
    lb: LOGBRUSH32,
};
// --------------------------------------------------------
// Type: EMRCREATEMONOBRUSH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRCREATEMONOBRUSH = extern struct {
    emr: EMR,
    ihBrush: u32,
    iUsage: u32,
    offBmi: u32,
    cbBmi: u32,
    offBits: u32,
    cbBits: u32,
};
// --------------------------------------------------------
// Type: EMRCREATEDIBPATTERNBRUSHPT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRCREATEDIBPATTERNBRUSHPT = extern struct {
    emr: EMR,
    ihBrush: u32,
    iUsage: u32,
    offBmi: u32,
    cbBmi: u32,
    offBits: u32,
    cbBits: u32,
};
// --------------------------------------------------------
// Type: EMRFORMAT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRFORMAT = extern struct {
    dSignature: u32,
    nVersion: u32,
    cbData: u32,
    offData: u32,
};
// --------------------------------------------------------
// Type: EMRGLSRECORD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRGLSRECORD = extern struct {
    emr: EMR,
    cbData: u32,
    Data: ?[*]u8,
};
// --------------------------------------------------------
// Type: EMRGLSBOUNDEDRECORD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRGLSBOUNDEDRECORD = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    cbData: u32,
    Data: ?[*]u8,
};
// --------------------------------------------------------
// Type: EMRPIXELFORMAT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRPIXELFORMAT = extern struct {
    emr: EMR,
    pfd: PIXELFORMATDESCRIPTOR,
};
// --------------------------------------------------------
// Type: EMRCREATECOLORSPACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRCREATECOLORSPACE = extern struct {
    emr: EMR,
    ihCS: u32,
    lcs: LOGCOLORSPACEA,
};
// --------------------------------------------------------
// Type: EMRSETCOLORSPACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRSETCOLORSPACE = extern struct {
    emr: EMR,
    ihCS: u32,
};
// --------------------------------------------------------
// Type: EMREXTESCAPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMREXTESCAPE = extern struct {
    emr: EMR,
    iEscape: i32,
    cbEscData: i32,
    EscData: ?[*]u8,
};
// --------------------------------------------------------
// Type: EMRNAMEDESCAPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRNAMEDESCAPE = extern struct {
    emr: EMR,
    iEscape: i32,
    cbDriver: i32,
    cbEscData: i32,
    EscData: ?[*]u8,
};
// --------------------------------------------------------
// Type: EMRSETICMPROFILE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRSETICMPROFILE = extern struct {
    emr: EMR,
    dwFlags: u32,
    cbName: u32,
    cbData: u32,
    Data: ?[*]u8,
};
// --------------------------------------------------------
// Type: EMRCREATECOLORSPACEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRCREATECOLORSPACEW = extern struct {
    emr: EMR,
    ihCS: u32,
    lcs: LOGCOLORSPACEW,
    dwFlags: u32,
    cbData: u32,
    Data: ?[*]u8,
};
// --------------------------------------------------------
// Type: COLORMATCHTOTARGET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COLORMATCHTOTARGET = extern struct {
    emr: EMR,
    dwAction: u32,
    dwFlags: u32,
    cbName: u32,
    cbData: u32,
    Data: ?[*]u8,
};
// --------------------------------------------------------
// Type: COLORCORRECTPALETTE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COLORCORRECTPALETTE = extern struct {
    emr: EMR,
    ihPalette: u32,
    nFirstEntry: u32,
    nPalEntries: u32,
    nReserved: u32,
};
// --------------------------------------------------------
// Type: EMRALPHABLEND
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRALPHABLEND = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    xDest: i32,
    yDest: i32,
    cxDest: i32,
    cyDest: i32,
    dwRop: u32,
    xSrc: i32,
    ySrc: i32,
    xformSrc: XFORM,
    crBkColorSrc: u32,
    iUsageSrc: u32,
    offBmiSrc: u32,
    cbBmiSrc: u32,
    offBitsSrc: u32,
    cbBitsSrc: u32,
    cxSrc: i32,
    cySrc: i32,
};
// --------------------------------------------------------
// Type: EMRGRADIENTFILL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRGRADIENTFILL = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    nVer: u32,
    nTri: u32,
    ulMode: u32,
    Ver: ?[*]TRIVERTEX,
};
// --------------------------------------------------------
// Type: EMRTRANSPARENTBLT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EMRTRANSPARENTBLT = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    xDest: i32,
    yDest: i32,
    cxDest: i32,
    cyDest: i32,
    dwRop: u32,
    xSrc: i32,
    ySrc: i32,
    xformSrc: XFORM,
    crBkColorSrc: u32,
    iUsageSrc: u32,
    offBmiSrc: u32,
    cbBmiSrc: u32,
    offBitsSrc: u32,
    cbBitsSrc: u32,
    cxSrc: i32,
    cySrc: i32,
};
// --------------------------------------------------------
// Type: WGLSWAP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WGLSWAP = extern struct {
    hdc: HDC,
    uiFlags: u32,
};
// --------------------------------------------------------
// Type: CFP_ALLOCPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CFP_ALLOCPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CFP_REALLOCPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CFP_REALLOCPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CFP_FREEPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CFP_FREEPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: READEMBEDPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const READEMBEDPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WRITEEMBEDPROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WRITEEMBEDPROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: TTLOADINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TTLOADINFO = extern struct {
    usStructSize: u16,
    usRefStrSize: u16,
    pusRefStr: ?*u16,
};
// --------------------------------------------------------
// Type: TTEMBEDINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TTEMBEDINFO = extern struct {
    usStructSize: u16,
    usRootStrSize: u16,
    pusRootStr: ?*u16,
};
// --------------------------------------------------------
// Type: TTVALIDATIONTESTSPARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TTVALIDATIONTESTSPARAMS = extern struct {
    ulStructSize: u32,
    lTestFromSize: i32,
    lTestToSize: i32,
    ulCharSet: u32,
    usReserved1: u16,
    usCharCodeCount: u16,
    pusCharCodeSet: ?*u16,
};
// --------------------------------------------------------
// Type: TTVALIDATIONTESTSPARAMSEX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TTVALIDATIONTESTSPARAMSEX = extern struct {
    ulStructSize: u32,
    lTestFromSize: i32,
    lTestToSize: i32,
    ulCharSet: u32,
    usReserved1: u16,
    usCharCodeCount: u16,
    pulCharCodeSet: ?*u32,
};
// --------------------------------------------------------
// Type: tagMxdcLandscapeRotationEnums
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const tagMxdcLandscapeRotationEnums = *opaque{
};
// --------------------------------------------------------
// Type: tagMxdcImageTypeEnums
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const tagMxdcImageTypeEnums = *opaque{
};
// --------------------------------------------------------
// Type: tagMxdcEscapeHeader
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const tagMxdcEscapeHeader = *opaque{
};
// --------------------------------------------------------
// Type: tagMxdcGetFileNameData
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const tagMxdcGetFileNameData = *opaque{
};
// --------------------------------------------------------
// Type: tagMxdcS0PageData
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const tagMxdcS0PageData = *opaque{
};
// --------------------------------------------------------
// Type: tagMxdcS0PageEnums
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const tagMxdcS0PageEnums = *opaque{
};
// --------------------------------------------------------
// Type: tagMxdcXpsS0PageResource
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const tagMxdcXpsS0PageResource = *opaque{
};
// --------------------------------------------------------
// Type: tagMxdcPrintTicketPassthrough
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const tagMxdcPrintTicketPassthrough = *opaque{
};
// --------------------------------------------------------
// Type: tagMxdcPrintTicketEscape
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagMxdcPrintTicketEscape = extern struct {
    mxdcEscape: tagMxdcEscapeHeader,
    printTicketData: tagMxdcPrintTicketPassthrough,
};
// --------------------------------------------------------
// Type: tagMxdcS0PagePassthroughEscape
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagMxdcS0PagePassthroughEscape = extern struct {
    mxdcEscape: tagMxdcEscapeHeader,
    xpsS0PageData: tagMxdcS0PageData,
};
// --------------------------------------------------------
// Type: tagMxdcS0PageResourceEscape
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tagMxdcS0PageResourceEscape = extern struct {
    mxdcEscape: tagMxdcEscapeHeader,
    xpsS0PageResourcePassthrough: tagMxdcXpsS0PageResource,
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn DrawEdge(
    hdc: HDC,
    qrc: ?*RECT,
    edge: u32,
    grfFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn DrawFrameControl(
    param0: HDC,
    param1: ?*RECT,
    param2: u32,
    param3: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn DrawCaption(
    hwnd: HWND,
    hdc: HDC,
    lprect: ?*RECT,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn DrawAnimatedRects(
    hwnd: HWND,
    idAni: i32,
    lprcFrom: ?*RECT,
    lprcTo: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn DrawTextA(
    hdc: HDC,
    lpchText: ?*i8,
    cchText: i32,
    lprc: ?*RECT,
    format: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn DrawTextW(
    hdc: HDC,
    lpchText: ?*u16,
    cchText: i32,
    lprc: ?*RECT,
    format: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn DrawTextExA(
    hdc: HDC,
    lpchText: ?*i8,
    cchText: i32,
    lprc: ?*RECT,
    format: u32,
    lpdtp: ?*DRAWTEXTPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn DrawTextExW(
    hdc: HDC,
    lpchText: ?*u16,
    cchText: i32,
    lprc: ?*RECT,
    format: u32,
    lpdtp: ?*DRAWTEXTPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn GrayStringA(
    hDC: HDC,
    hBrush: HBRUSH,
    lpOutputFunc: GRAYSTRINGPROC,
    lpData: LPARAM,
    nCount: i32,
    X: i32,
    Y: i32,
    nWidth: i32,
    nHeight: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn GrayStringW(
    hDC: HDC,
    hBrush: HBRUSH,
    lpOutputFunc: GRAYSTRINGPROC,
    lpData: LPARAM,
    nCount: i32,
    X: i32,
    Y: i32,
    nWidth: i32,
    nHeight: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn DrawStateA(
    hdc: HDC,
    hbrFore: HBRUSH,
    qfnCallBack: DRAWSTATEPROC,
    lData: LPARAM,
    wData: WPARAM,
    x: i32,
    y: i32,
    cx: i32,
    cy: i32,
    uFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn DrawStateW(
    hdc: HDC,
    hbrFore: HBRUSH,
    qfnCallBack: DRAWSTATEPROC,
    lData: LPARAM,
    wData: WPARAM,
    x: i32,
    y: i32,
    cx: i32,
    cy: i32,
    uFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn TabbedTextOutA(
    hdc: HDC,
    x: i32,
    y: i32,
    lpString: ?*i8,
    chCount: i32,
    nTabPositions: i32,
    lpnTabStopPositions: ?*i32,
    nTabOrigin: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn TabbedTextOutW(
    hdc: HDC,
    x: i32,
    y: i32,
    lpString: ?*u16,
    chCount: i32,
    nTabPositions: i32,
    lpnTabStopPositions: ?*i32,
    nTabOrigin: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn GetTabbedTextExtentA(
    hdc: HDC,
    lpString: ?*i8,
    chCount: i32,
    nTabPositions: i32,
    lpnTabStopPositions: ?*i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn GetTabbedTextExtentW(
    hdc: HDC,
    lpString: ?*u16,
    chCount: i32,
    nTabPositions: i32,
    lpnTabStopPositions: ?*i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn UpdateWindow(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn PaintDesktop(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn WindowFromDC(
    hDC: HDC,
) callconv(@import("std").os.windows.WINAPI) HWND;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn GetDC(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) HDC;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn GetDCEx(
    hWnd: HWND,
    hrgnClip: HRGN,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) HDC;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn GetWindowDC(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) HDC;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn ReleaseDC(
    hWnd: HWND,
    hDC: HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn BeginPaint(
    hWnd: HWND,
    lpPaint: ?*PAINTSTRUCT,
) callconv(@import("std").os.windows.WINAPI) HDC;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn EndPaint(
    hWnd: HWND,
    lpPaint: ?*PAINTSTRUCT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn GetUpdateRect(
    hWnd: HWND,
    lpRect: ?*RECT,
    bErase: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn GetUpdateRgn(
    hWnd: HWND,
    hRgn: HRGN,
    bErase: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn SetWindowRgn(
    hWnd: HWND,
    hRgn: HRGN,
    bRedraw: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn GetWindowRgn(
    hWnd: HWND,
    hRgn: HRGN,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn GetWindowRgnBox(
    hWnd: HWND,
    lprc: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn ExcludeUpdateRgn(
    hDC: HDC,
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn InvalidateRect(
    hWnd: HWND,
    lpRect: ?*RECT,
    bErase: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn ValidateRect(
    hWnd: HWND,
    lpRect: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn InvalidateRgn(
    hWnd: HWND,
    hRgn: HRGN,
    bErase: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn ValidateRgn(
    hWnd: HWND,
    hRgn: HRGN,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn RedrawWindow(
    hWnd: HWND,
    lprcUpdate: ?*RECT,
    hrgnUpdate: HRGN,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn LockWindowUpdate(
    hWndLock: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn ClientToScreen(
    hWnd: HWND,
    lpPoint: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn ScreenToClient(
    hWnd: HWND,
    lpPoint: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn MapWindowPoints(
    hWndFrom: HWND,
    hWndTo: HWND,
    lpPoints: ?*POINT,
    cPoints: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn GetSysColorBrush(
    nIndex: i32,
) callconv(@import("std").os.windows.WINAPI) HBRUSH;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn DrawFocusRect(
    hDC: HDC,
    lprc: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn FillRect(
    hDC: HDC,
    lprc: ?*RECT,
    hbr: HBRUSH,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn FrameRect(
    hDC: HDC,
    lprc: ?*RECT,
    hbr: HBRUSH,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn InvertRect(
    hDC: HDC,
    lprc: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn SetRect(
    lprc: ?*RECT,
    xLeft: i32,
    yTop: i32,
    xRight: i32,
    yBottom: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn SetRectEmpty(
    lprc: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn CopyRect(
    lprcDst: ?*RECT,
    lprcSrc: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn InflateRect(
    lprc: ?*RECT,
    dx: i32,
    dy: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn IntersectRect(
    lprcDst: ?*RECT,
    lprcSrc1: ?*RECT,
    lprcSrc2: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn UnionRect(
    lprcDst: ?*RECT,
    lprcSrc1: ?*RECT,
    lprcSrc2: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn SubtractRect(
    lprcDst: ?*RECT,
    lprcSrc1: ?*RECT,
    lprcSrc2: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn OffsetRect(
    lprc: ?*RECT,
    dx: i32,
    dy: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn IsRectEmpty(
    lprc: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn EqualRect(
    lprc1: ?*RECT,
    lprc2: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn PtInRect(
    lprc: ?*RECT,
    pt: POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn LoadBitmapA(
    hInstance: HINSTANCE,
    lpBitmapName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) HBITMAP;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn LoadBitmapW(
    hInstance: HINSTANCE,
    lpBitmapName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HBITMAP;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn ChangeDisplaySettingsA(
    lpDevMode: ?*DEVMODEA,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn ChangeDisplaySettingsW(
    lpDevMode: ?*DEVMODEW,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn ChangeDisplaySettingsExA(
    lpszDeviceName: ?*i8,
    lpDevMode: ?*DEVMODEA,
    hwnd: HWND,
    dwflags: u32,
    lParam: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn ChangeDisplaySettingsExW(
    lpszDeviceName: ?*u16,
    lpDevMode: ?*DEVMODEW,
    hwnd: HWND,
    dwflags: u32,
    lParam: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn EnumDisplaySettingsA(
    lpszDeviceName: ?*i8,
    iModeNum: u32,
    lpDevMode: ?*DEVMODEA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn EnumDisplaySettingsW(
    lpszDeviceName: ?*u16,
    iModeNum: u32,
    lpDevMode: ?*DEVMODEW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn EnumDisplaySettingsExA(
    lpszDeviceName: ?*i8,
    iModeNum: u32,
    lpDevMode: ?*DEVMODEA,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn EnumDisplaySettingsExW(
    lpszDeviceName: ?*u16,
    iModeNum: u32,
    lpDevMode: ?*DEVMODEW,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn EnumDisplayDevicesA(
    lpDevice: ?*i8,
    iDevNum: u32,
    lpDisplayDevice: ?*DISPLAY_DEVICEA,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn EnumDisplayDevicesW(
    lpDevice: ?*u16,
    iDevNum: u32,
    lpDisplayDevice: ?*DISPLAY_DEVICEW,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn MonitorFromPoint(
    pt: POINT,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn MonitorFromRect(
    lprc: ?*RECT,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn MonitorFromWindow(
    hwnd: HWND,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn GetMonitorInfoA(
    hMonitor: ?*opaque{},
    lpmi: ?*MONITORINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn GetMonitorInfoW(
    hMonitor: ?*opaque{},
    lpmi: ?*MONITORINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "USER32" fn EnumDisplayMonitors(
    hdc: HDC,
    lprcClip: ?*RECT,
    lpfnEnum: MONITORENUMPROC,
    dwData: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn AddFontResourceA(
    param0: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn AddFontResourceW(
    param0: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn AnimatePalette(
    hPal: HPALETTE,
    iStartIndex: u32,
    cEntries: u32,
    ppe: ?*PALETTEENTRY,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn Arc(
    hdc: HDC,
    x1: i32,
    y1: i32,
    x2: i32,
    y2: i32,
    x3: i32,
    y3: i32,
    x4: i32,
    y4: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "GDI32" fn BitBlt(
    hdc: HDC,
    x: i32,
    y: i32,
    cx: i32,
    cy: i32,
    hdcSrc: HDC,
    x1: i32,
    y1: i32,
    rop: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CancelDC(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn Chord(
    hdc: HDC,
    x1: i32,
    y1: i32,
    x2: i32,
    y2: i32,
    x3: i32,
    y3: i32,
    x4: i32,
    y4: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CloseMetaFile(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CombineRgn(
    hrgnDst: HRGN,
    hrgnSrc1: HRGN,
    hrgnSrc2: HRGN,
    iMode: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CopyMetaFileA(
    param0: ?*opaque{},
    param1: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CopyMetaFileW(
    param0: ?*opaque{},
    param1: ?*u16,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateBitmap(
    nWidth: i32,
    nHeight: i32,
    nPlanes: u32,
    nBitCount: u32,
    lpBits: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HBITMAP;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateBitmapIndirect(
    pbm: ?*BITMAP,
) callconv(@import("std").os.windows.WINAPI) HBITMAP;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateBrushIndirect(
    plbrush: ?*LOGBRUSH,
) callconv(@import("std").os.windows.WINAPI) HBRUSH;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateCompatibleBitmap(
    hdc: HDC,
    cx: i32,
    cy: i32,
) callconv(@import("std").os.windows.WINAPI) HBITMAP;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateDiscardableBitmap(
    hdc: HDC,
    cx: i32,
    cy: i32,
) callconv(@import("std").os.windows.WINAPI) HBITMAP;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateCompatibleDC(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) HDC;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateDCA(
    pwszDriver: ?*i8,
    pwszDevice: ?*i8,
    pszPort: ?*i8,
    pdm: ?*DEVMODEA,
) callconv(@import("std").os.windows.WINAPI) HDC;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateDCW(
    pwszDriver: ?*u16,
    pwszDevice: ?*u16,
    pszPort: ?*u16,
    pdm: ?*DEVMODEW,
) callconv(@import("std").os.windows.WINAPI) HDC;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateDIBitmap(
    hdc: HDC,
    pbmih: ?*BITMAPINFOHEADER,
    flInit: u32,
    pjBits: ?*opaque{},
    pbmi: ?*BITMAPINFO,
    iUsage: u32,
) callconv(@import("std").os.windows.WINAPI) HBITMAP;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateDIBPatternBrush(
    h: ?*opaque{},
    iUsage: u32,
) callconv(@import("std").os.windows.WINAPI) HBRUSH;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateDIBPatternBrushPt(
    lpPackedDIB: ?*opaque{},
    iUsage: u32,
) callconv(@import("std").os.windows.WINAPI) HBRUSH;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateEllipticRgn(
    x1: i32,
    y1: i32,
    x2: i32,
    y2: i32,
) callconv(@import("std").os.windows.WINAPI) HRGN;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateEllipticRgnIndirect(
    lprect: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) HRGN;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateFontIndirectA(
    lplf: ?*LOGFONTA,
) callconv(@import("std").os.windows.WINAPI) HFONT;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateFontIndirectW(
    lplf: ?*LOGFONTW,
) callconv(@import("std").os.windows.WINAPI) HFONT;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateFontA(
    cHeight: i32,
    cWidth: i32,
    cEscapement: i32,
    cOrientation: i32,
    cWeight: i32,
    bItalic: u32,
    bUnderline: u32,
    bStrikeOut: u32,
    iCharSet: u32,
    iOutPrecision: u32,
    iClipPrecision: u32,
    iQuality: u32,
    iPitchAndFamily: u32,
    pszFaceName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) HFONT;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateFontW(
    cHeight: i32,
    cWidth: i32,
    cEscapement: i32,
    cOrientation: i32,
    cWeight: i32,
    bItalic: u32,
    bUnderline: u32,
    bStrikeOut: u32,
    iCharSet: u32,
    iOutPrecision: u32,
    iClipPrecision: u32,
    iQuality: u32,
    iPitchAndFamily: u32,
    pszFaceName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HFONT;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateHatchBrush(
    iHatch: i32,
    color: u32,
) callconv(@import("std").os.windows.WINAPI) HBRUSH;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateICA(
    pszDriver: ?*i8,
    pszDevice: ?*i8,
    pszPort: ?*i8,
    pdm: ?*DEVMODEA,
) callconv(@import("std").os.windows.WINAPI) HDC;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateICW(
    pszDriver: ?*u16,
    pszDevice: ?*u16,
    pszPort: ?*u16,
    pdm: ?*DEVMODEW,
) callconv(@import("std").os.windows.WINAPI) HDC;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateMetaFileA(
    pszFile: ?*i8,
) callconv(@import("std").os.windows.WINAPI) HdcMetdataFileHandle;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateMetaFileW(
    pszFile: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HdcMetdataFileHandle;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreatePalette(
    plpal: ?*LOGPALETTE,
) callconv(@import("std").os.windows.WINAPI) HPALETTE;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreatePen(
    iStyle: i32,
    cWidth: i32,
    color: u32,
) callconv(@import("std").os.windows.WINAPI) HPEN;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreatePenIndirect(
    plpen: ?*LOGPEN,
) callconv(@import("std").os.windows.WINAPI) HPEN;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreatePolyPolygonRgn(
    pptl: ?*POINT,
    pc: ?*i32,
    cPoly: i32,
    iMode: i32,
) callconv(@import("std").os.windows.WINAPI) HRGN;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreatePatternBrush(
    hbm: HBITMAP,
) callconv(@import("std").os.windows.WINAPI) HBRUSH;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateRectRgn(
    x1: i32,
    y1: i32,
    x2: i32,
    y2: i32,
) callconv(@import("std").os.windows.WINAPI) HRGN;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateRectRgnIndirect(
    lprect: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) HRGN;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateRoundRectRgn(
    x1: i32,
    y1: i32,
    x2: i32,
    y2: i32,
    w: i32,
    h: i32,
) callconv(@import("std").os.windows.WINAPI) HRGN;

// set_last_errror=True (can and should we use this?)
pub extern "GDI32" fn CreateScalableFontResourceA(
    fdwHidden: u32,
    lpszFont: ?*i8,
    lpszFile: ?*i8,
    lpszPath: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "GDI32" fn CreateScalableFontResourceW(
    fdwHidden: u32,
    lpszFont: ?*u16,
    lpszFile: ?*u16,
    lpszPath: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateSolidBrush(
    color: u32,
) callconv(@import("std").os.windows.WINAPI) HBRUSH;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn DeleteDC(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn DeleteMetaFile(
    hmf: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn DeleteObject(
    ho: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn DrawEscape(
    hdc: HDC,
    iEscape: i32,
    cjIn: i32,
    lpIn: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn Ellipse(
    hdc: HDC,
    left: i32,
    top: i32,
    right: i32,
    bottom: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EnumFontFamiliesExA(
    hdc: HDC,
    lpLogfont: ?*LOGFONTA,
    lpProc: FONTENUMPROCA,
    lParam: LPARAM,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EnumFontFamiliesExW(
    hdc: HDC,
    lpLogfont: ?*LOGFONTW,
    lpProc: FONTENUMPROCW,
    lParam: LPARAM,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EnumFontFamiliesA(
    hdc: HDC,
    lpLogfont: ?*i8,
    lpProc: FONTENUMPROCA,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EnumFontFamiliesW(
    hdc: HDC,
    lpLogfont: ?*u16,
    lpProc: FONTENUMPROCW,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EnumFontsA(
    hdc: HDC,
    lpLogfont: ?*i8,
    lpProc: FONTENUMPROCA,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EnumFontsW(
    hdc: HDC,
    lpLogfont: ?*u16,
    lpProc: FONTENUMPROCW,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EnumObjects(
    hdc: HDC,
    nType: i32,
    lpFunc: GOBJENUMPROC,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EqualRgn(
    hrgn1: HRGN,
    hrgn2: HRGN,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn ExcludeClipRect(
    hdc: HDC,
    left: i32,
    top: i32,
    right: i32,
    bottom: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn ExtCreateRegion(
    lpx: ?*XFORM,
    nCount: u32,
    lpData: ?*RGNDATA,
) callconv(@import("std").os.windows.WINAPI) HRGN;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn ExtFloodFill(
    hdc: HDC,
    x: i32,
    y: i32,
    color: u32,
    type: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn FillRgn(
    hdc: HDC,
    hrgn: HRGN,
    hbr: HBRUSH,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn FloodFill(
    hdc: HDC,
    x: i32,
    y: i32,
    color: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn FrameRgn(
    hdc: HDC,
    hrgn: HRGN,
    hbr: HBRUSH,
    w: i32,
    h: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetROP2(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetAspectRatioFilterEx(
    hdc: HDC,
    lpsize: ?*SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetBkColor(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetDCBrushColor(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetDCPenColor(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetBkMode(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetBitmapBits(
    hbit: HBITMAP,
    cb: i32,
    lpvBits: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetBitmapDimensionEx(
    hbit: HBITMAP,
    lpsize: ?*SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetBoundsRect(
    hdc: HDC,
    lprect: ?*RECT,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetBrushOrgEx(
    hdc: HDC,
    lppt: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetCharWidthA(
    hdc: HDC,
    iFirst: u32,
    iLast: u32,
    lpBuffer: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetCharWidthW(
    hdc: HDC,
    iFirst: u32,
    iLast: u32,
    lpBuffer: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetCharWidth32A(
    hdc: HDC,
    iFirst: u32,
    iLast: u32,
    lpBuffer: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetCharWidth32W(
    hdc: HDC,
    iFirst: u32,
    iLast: u32,
    lpBuffer: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetCharWidthFloatA(
    hdc: HDC,
    iFirst: u32,
    iLast: u32,
    lpBuffer: ?*f32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetCharWidthFloatW(
    hdc: HDC,
    iFirst: u32,
    iLast: u32,
    lpBuffer: ?*f32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetCharABCWidthsA(
    hdc: HDC,
    wFirst: u32,
    wLast: u32,
    lpABC: ?*ABC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetCharABCWidthsW(
    hdc: HDC,
    wFirst: u32,
    wLast: u32,
    lpABC: ?*ABC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetCharABCWidthsFloatA(
    hdc: HDC,
    iFirst: u32,
    iLast: u32,
    lpABC: ?*ABCFLOAT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetCharABCWidthsFloatW(
    hdc: HDC,
    iFirst: u32,
    iLast: u32,
    lpABC: ?*ABCFLOAT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetClipBox(
    hdc: HDC,
    lprect: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetClipRgn(
    hdc: HDC,
    hrgn: HRGN,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetMetaRgn(
    hdc: HDC,
    hrgn: HRGN,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetCurrentObject(
    hdc: HDC,
    type: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetCurrentPositionEx(
    hdc: HDC,
    lppt: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetDeviceCaps(
    hdc: HDC,
    index: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetDIBits(
    hdc: HDC,
    hbm: HBITMAP,
    start: u32,
    cLines: u32,
    lpvBits: ?*opaque{},
    lpbmi: ?*BITMAPINFO,
    usage: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetFontData(
    hdc: HDC,
    dwTable: u32,
    dwOffset: u32,
    pvBuffer: ?*opaque{},
    cjBuffer: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetGlyphOutlineA(
    hdc: HDC,
    uChar: u32,
    fuFormat: u32,
    lpgm: ?*GLYPHMETRICS,
    cjBuffer: u32,
    pvBuffer: ?*opaque{},
    lpmat2: ?*MAT2,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetGlyphOutlineW(
    hdc: HDC,
    uChar: u32,
    fuFormat: u32,
    lpgm: ?*GLYPHMETRICS,
    cjBuffer: u32,
    pvBuffer: ?*opaque{},
    lpmat2: ?*MAT2,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetGraphicsMode(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetMapMode(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetMetaFileBitsEx(
    hMF: ?*opaque{},
    cbBuffer: u32,
    lpData: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetMetaFileA(
    lpName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetMetaFileW(
    lpName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetNearestColor(
    hdc: HDC,
    color: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetNearestPaletteIndex(
    h: HPALETTE,
    color: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetObjectType(
    h: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetOutlineTextMetricsA(
    hdc: HDC,
    cjCopy: u32,
    potm: ?*OUTLINETEXTMETRICA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetOutlineTextMetricsW(
    hdc: HDC,
    cjCopy: u32,
    potm: ?*OUTLINETEXTMETRICW,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetPaletteEntries(
    hpal: HPALETTE,
    iStart: u32,
    cEntries: u32,
    pPalEntries: ?*PALETTEENTRY,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetPixel(
    hdc: HDC,
    x: i32,
    y: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetPolyFillMode(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetRasterizerCaps(
    lpraststat: ?*RASTERIZER_STATUS,
    cjBytes: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetRandomRgn(
    hdc: HDC,
    hrgn: HRGN,
    i: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetRegionData(
    hrgn: HRGN,
    nCount: u32,
    lpRgnData: ?*RGNDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetRgnBox(
    hrgn: HRGN,
    lprc: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetStockObject(
    i: i32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetStretchBltMode(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetSystemPaletteEntries(
    hdc: HDC,
    iStart: u32,
    cEntries: u32,
    pPalEntries: ?*PALETTEENTRY,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetSystemPaletteUse(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetTextCharacterExtra(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetTextAlign(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetTextColor(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetTextExtentPointA(
    hdc: HDC,
    lpString: ?*i8,
    c: i32,
    lpsz: ?*SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetTextExtentPointW(
    hdc: HDC,
    lpString: ?*u16,
    c: i32,
    lpsz: ?*SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetTextExtentPoint32A(
    hdc: HDC,
    lpString: ?*i8,
    c: i32,
    psizl: ?*SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetTextExtentPoint32W(
    hdc: HDC,
    lpString: ?*u16,
    c: i32,
    psizl: ?*SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetTextExtentExPointA(
    hdc: HDC,
    lpszString: ?*i8,
    cchString: i32,
    nMaxExtent: i32,
    lpnFit: ?*i32,
    lpnDx: ?*i32,
    lpSize: ?*SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetTextExtentExPointW(
    hdc: HDC,
    lpszString: ?*u16,
    cchString: i32,
    nMaxExtent: i32,
    lpnFit: ?*i32,
    lpnDx: ?*i32,
    lpSize: ?*SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetFontLanguageInfo(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetCharacterPlacementA(
    hdc: HDC,
    lpString: ?*i8,
    nCount: i32,
    nMexExtent: i32,
    lpResults: ?*GCP_RESULTSA,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetCharacterPlacementW(
    hdc: HDC,
    lpString: ?*u16,
    nCount: i32,
    nMexExtent: i32,
    lpResults: ?*GCP_RESULTSW,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetFontUnicodeRanges(
    hdc: HDC,
    lpgs: ?*GLYPHSET,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetGlyphIndicesA(
    hdc: HDC,
    lpstr: ?*i8,
    c: i32,
    pgi: ?*u16,
    fl: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetGlyphIndicesW(
    hdc: HDC,
    lpstr: ?*u16,
    c: i32,
    pgi: ?*u16,
    fl: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetTextExtentPointI(
    hdc: HDC,
    pgiIn: ?*u16,
    cgi: i32,
    psize: ?*SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetTextExtentExPointI(
    hdc: HDC,
    lpwszString: ?*u16,
    cwchString: i32,
    nMaxExtent: i32,
    lpnFit: ?*i32,
    lpnDx: ?*i32,
    lpSize: ?*SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetCharWidthI(
    hdc: HDC,
    giFirst: u32,
    cgi: u32,
    pgi: ?*u16,
    piWidths: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetCharABCWidthsI(
    hdc: HDC,
    giFirst: u32,
    cgi: u32,
    pgi: ?*u16,
    pabc: ?*ABC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn AddFontResourceExA(
    name: ?*i8,
    fl: u32,
    res: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn AddFontResourceExW(
    name: ?*u16,
    fl: u32,
    res: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn RemoveFontResourceExA(
    name: ?*i8,
    fl: u32,
    pdv: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn RemoveFontResourceExW(
    name: ?*u16,
    fl: u32,
    pdv: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn AddFontMemResourceEx(
    pFileView: ?*opaque{},
    cjSize: u32,
    pvResrved: ?*opaque{},
    pNumFonts: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn RemoveFontMemResourceEx(
    h: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateFontIndirectExA(
    param0: ?*ENUMLOGFONTEXDVA,
) callconv(@import("std").os.windows.WINAPI) HFONT;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateFontIndirectExW(
    param0: ?*ENUMLOGFONTEXDVW,
) callconv(@import("std").os.windows.WINAPI) HFONT;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetViewportExtEx(
    hdc: HDC,
    lpsize: ?*SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetViewportOrgEx(
    hdc: HDC,
    lppoint: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetWindowExtEx(
    hdc: HDC,
    lpsize: ?*SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetWindowOrgEx(
    hdc: HDC,
    lppoint: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn IntersectClipRect(
    hdc: HDC,
    left: i32,
    top: i32,
    right: i32,
    bottom: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn InvertRgn(
    hdc: HDC,
    hrgn: HRGN,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn LineDDA(
    xStart: i32,
    yStart: i32,
    xEnd: i32,
    yEnd: i32,
    lpProc: LINEDDAPROC,
    data: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn LineTo(
    hdc: HDC,
    x: i32,
    y: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn MaskBlt(
    hdcDest: HDC,
    xDest: i32,
    yDest: i32,
    width: i32,
    height: i32,
    hdcSrc: HDC,
    xSrc: i32,
    ySrc: i32,
    hbmMask: HBITMAP,
    xMask: i32,
    yMask: i32,
    rop: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn PlgBlt(
    hdcDest: HDC,
    lpPoint: ?*POINT,
    hdcSrc: HDC,
    xSrc: i32,
    ySrc: i32,
    width: i32,
    height: i32,
    hbmMask: HBITMAP,
    xMask: i32,
    yMask: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn OffsetClipRgn(
    hdc: HDC,
    x: i32,
    y: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn OffsetRgn(
    hrgn: HRGN,
    x: i32,
    y: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn PatBlt(
    hdc: HDC,
    x: i32,
    y: i32,
    w: i32,
    h: i32,
    rop: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn Pie(
    hdc: HDC,
    left: i32,
    top: i32,
    right: i32,
    bottom: i32,
    xr1: i32,
    yr1: i32,
    xr2: i32,
    yr2: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn PlayMetaFile(
    hdc: HDC,
    hmf: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn PaintRgn(
    hdc: HDC,
    hrgn: HRGN,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn PolyPolygon(
    hdc: HDC,
    apt: ?*POINT,
    asz: ?*i32,
    csz: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn PtInRegion(
    hrgn: HRGN,
    x: i32,
    y: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn PtVisible(
    hdc: HDC,
    x: i32,
    y: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn RectInRegion(
    hrgn: HRGN,
    lprect: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn RectVisible(
    hdc: HDC,
    lprect: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn Rectangle(
    hdc: HDC,
    left: i32,
    top: i32,
    right: i32,
    bottom: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn RestoreDC(
    hdc: HDC,
    nSavedDC: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn ResetDCA(
    hdc: HDC,
    lpdm: ?*DEVMODEA,
) callconv(@import("std").os.windows.WINAPI) HDC;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn ResetDCW(
    hdc: HDC,
    lpdm: ?*DEVMODEW,
) callconv(@import("std").os.windows.WINAPI) HDC;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn RealizePalette(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn RemoveFontResourceA(
    lpFileName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn RemoveFontResourceW(
    lpFileName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn RoundRect(
    hdc: HDC,
    left: i32,
    top: i32,
    right: i32,
    bottom: i32,
    width: i32,
    height: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn ResizePalette(
    hpal: HPALETTE,
    n: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SaveDC(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SelectClipRgn(
    hdc: HDC,
    hrgn: HRGN,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn ExtSelectClipRgn(
    hdc: HDC,
    hrgn: HRGN,
    mode: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetMetaRgn(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SelectObject(
    hdc: HDC,
    h: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SelectPalette(
    hdc: HDC,
    hPal: HPALETTE,
    bForceBkgd: BOOL,
) callconv(@import("std").os.windows.WINAPI) HPALETTE;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetBkColor(
    hdc: HDC,
    color: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetDCBrushColor(
    hdc: HDC,
    color: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetDCPenColor(
    hdc: HDC,
    color: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetBkMode(
    hdc: HDC,
    mode: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetBitmapBits(
    hbm: HBITMAP,
    cb: u32,
    pvBits: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetBoundsRect(
    hdc: HDC,
    lprect: ?*RECT,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetDIBits(
    hdc: HDC,
    hbm: HBITMAP,
    start: u32,
    cLines: u32,
    lpBits: ?*opaque{},
    lpbmi: ?*BITMAPINFO,
    ColorUse: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetDIBitsToDevice(
    hdc: HDC,
    xDest: i32,
    yDest: i32,
    w: u32,
    h: u32,
    xSrc: i32,
    ySrc: i32,
    StartScan: u32,
    cLines: u32,
    lpvBits: ?*opaque{},
    lpbmi: ?*BITMAPINFO,
    ColorUse: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetMapperFlags(
    hdc: HDC,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetGraphicsMode(
    hdc: HDC,
    iMode: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetMapMode(
    hdc: HDC,
    iMode: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetLayout(
    hdc: HDC,
    l: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "GDI32" fn GetLayout(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetMetaFileBitsEx(
    cbBuffer: u32,
    lpData: ?*u8,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetPaletteEntries(
    hpal: HPALETTE,
    iStart: u32,
    cEntries: u32,
    pPalEntries: ?*PALETTEENTRY,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetPixel(
    hdc: HDC,
    x: i32,
    y: i32,
    color: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetPixelV(
    hdc: HDC,
    x: i32,
    y: i32,
    color: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetPolyFillMode(
    hdc: HDC,
    mode: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn StretchBlt(
    hdcDest: HDC,
    xDest: i32,
    yDest: i32,
    wDest: i32,
    hDest: i32,
    hdcSrc: HDC,
    xSrc: i32,
    ySrc: i32,
    wSrc: i32,
    hSrc: i32,
    rop: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetRectRgn(
    hrgn: HRGN,
    left: i32,
    top: i32,
    right: i32,
    bottom: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn StretchDIBits(
    hdc: HDC,
    xDest: i32,
    yDest: i32,
    DestWidth: i32,
    DestHeight: i32,
    xSrc: i32,
    ySrc: i32,
    SrcWidth: i32,
    SrcHeight: i32,
    lpBits: ?*opaque{},
    lpbmi: ?*BITMAPINFO,
    iUsage: u32,
    rop: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetROP2(
    hdc: HDC,
    rop2: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetStretchBltMode(
    hdc: HDC,
    mode: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetSystemPaletteUse(
    hdc: HDC,
    use: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetTextCharacterExtra(
    hdc: HDC,
    extra: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetTextColor(
    hdc: HDC,
    color: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetTextAlign(
    hdc: HDC,
    @"align": u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetTextJustification(
    hdc: HDC,
    extra: i32,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn UpdateColors(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "MSIMG32" fn AlphaBlend(
    hdcDest: HDC,
    xoriginDest: i32,
    yoriginDest: i32,
    wDest: i32,
    hDest: i32,
    hdcSrc: HDC,
    xoriginSrc: i32,
    yoriginSrc: i32,
    wSrc: i32,
    hSrc: i32,
    ftn: BLENDFUNCTION,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "MSIMG32" fn TransparentBlt(
    hdcDest: HDC,
    xoriginDest: i32,
    yoriginDest: i32,
    wDest: i32,
    hDest: i32,
    hdcSrc: HDC,
    xoriginSrc: i32,
    yoriginSrc: i32,
    wSrc: i32,
    hSrc: i32,
    crTransparent: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "MSIMG32" fn GradientFill(
    hdc: HDC,
    pVertex: ?*TRIVERTEX,
    nVertex: u32,
    pMesh: ?*opaque{},
    nMesh: u32,
    ulMode: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GdiAlphaBlend(
    hdcDest: HDC,
    xoriginDest: i32,
    yoriginDest: i32,
    wDest: i32,
    hDest: i32,
    hdcSrc: HDC,
    xoriginSrc: i32,
    yoriginSrc: i32,
    wSrc: i32,
    hSrc: i32,
    ftn: BLENDFUNCTION,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GdiTransparentBlt(
    hdcDest: HDC,
    xoriginDest: i32,
    yoriginDest: i32,
    wDest: i32,
    hDest: i32,
    hdcSrc: HDC,
    xoriginSrc: i32,
    yoriginSrc: i32,
    wSrc: i32,
    hSrc: i32,
    crTransparent: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GdiGradientFill(
    hdc: HDC,
    pVertex: ?*TRIVERTEX,
    nVertex: u32,
    pMesh: ?*opaque{},
    nCount: u32,
    ulMode: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn PlayMetaFileRecord(
    hdc: HDC,
    lpHandleTable: ?*HANDLETABLE,
    lpMR: ?*METARECORD,
    noObjs: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EnumMetaFile(
    hdc: HDC,
    hmf: ?*opaque{},
    proc: MFENUMPROC,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CloseEnhMetaFile(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CopyEnhMetaFileA(
    hEnh: ?*opaque{},
    lpFileName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CopyEnhMetaFileW(
    hEnh: ?*opaque{},
    lpFileName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateEnhMetaFileA(
    hdc: HDC,
    lpFilename: ?*i8,
    lprc: ?*RECT,
    lpDesc: ?*i8,
) callconv(@import("std").os.windows.WINAPI) HdcMetdataEnhFileHandle;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateEnhMetaFileW(
    hdc: HDC,
    lpFilename: ?*u16,
    lprc: ?*RECT,
    lpDesc: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HdcMetdataEnhFileHandle;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn DeleteEnhMetaFile(
    hmf: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EnumEnhMetaFile(
    hdc: HDC,
    hmf: ?*opaque{},
    proc: ENHMFENUMPROC,
    param3: ?*opaque{},
    lpRect: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetEnhMetaFileA(
    lpName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetEnhMetaFileW(
    lpName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetEnhMetaFileBits(
    hEMF: ?*opaque{},
    nSize: u32,
    lpData: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetEnhMetaFileDescriptionA(
    hemf: ?*opaque{},
    cchBuffer: u32,
    lpDescription: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetEnhMetaFileDescriptionW(
    hemf: ?*opaque{},
    cchBuffer: u32,
    lpDescription: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetEnhMetaFileHeader(
    hemf: ?*opaque{},
    nSize: u32,
    lpEnhMetaHeader: ?*ENHMETAHEADER,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetEnhMetaFilePaletteEntries(
    hemf: ?*opaque{},
    nNumEntries: u32,
    lpPaletteEntries: ?*PALETTEENTRY,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetWinMetaFileBits(
    hemf: ?*opaque{},
    cbData16: u32,
    pData16: ?*u8,
    iMapMode: i32,
    hdcRef: HDC,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn PlayEnhMetaFile(
    hdc: HDC,
    hmf: ?*opaque{},
    lprect: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn PlayEnhMetaFileRecord(
    hdc: HDC,
    pht: ?*HANDLETABLE,
    pmr: ?*ENHMETARECORD,
    cht: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetEnhMetaFileBits(
    nSize: u32,
    pb: ?*u8,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetWinMetaFileBits(
    nSize: u32,
    lpMeta16Data: ?*u8,
    hdcRef: HDC,
    lpMFP: ?*METAFILEPICT,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GdiComment(
    hdc: HDC,
    nSize: u32,
    lpData: ?*u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetTextMetricsA(
    hdc: HDC,
    lptm: ?*TEXTMETRICA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetTextMetricsW(
    hdc: HDC,
    lptm: ?*TEXTMETRICW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn AngleArc(
    hdc: HDC,
    x: i32,
    y: i32,
    r: u32,
    StartAngle: f32,
    SweepAngle: f32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn PolyPolyline(
    hdc: HDC,
    apt: ?*POINT,
    asz: ?*u32,
    csz: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetWorldTransform(
    hdc: HDC,
    lpxf: ?*XFORM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetWorldTransform(
    hdc: HDC,
    lpxf: ?*XFORM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn ModifyWorldTransform(
    hdc: HDC,
    lpxf: ?*XFORM,
    mode: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CombineTransform(
    lpxfOut: ?*XFORM,
    lpxf1: ?*XFORM,
    lpxf2: ?*XFORM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateDIBSection(
    hdc: HDC,
    pbmi: ?*BITMAPINFO,
    usage: u32,
    ppvBits: ?*?*opaque{},
    hSection: HANDLE,
    offset: u32,
) callconv(@import("std").os.windows.WINAPI) HBITMAP;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetDIBColorTable(
    hdc: HDC,
    iStart: u32,
    cEntries: u32,
    prgbq: ?*RGBQUAD,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetDIBColorTable(
    hdc: HDC,
    iStart: u32,
    cEntries: u32,
    prgbq: ?*RGBQUAD,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetColorAdjustment(
    hdc: HDC,
    lpca: ?*COLORADJUSTMENT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetColorAdjustment(
    hdc: HDC,
    lpca: ?*COLORADJUSTMENT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreateHalftonePalette(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) HPALETTE;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn AbortPath(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn ArcTo(
    hdc: HDC,
    left: i32,
    top: i32,
    right: i32,
    bottom: i32,
    xr1: i32,
    yr1: i32,
    xr2: i32,
    yr2: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn BeginPath(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CloseFigure(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn EndPath(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn FillPath(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn FlattenPath(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetPath(
    hdc: HDC,
    apt: ?*POINT,
    aj: ?*u8,
    cpt: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn PathToRegion(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) HRGN;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn PolyDraw(
    hdc: HDC,
    apt: ?*POINT,
    aj: ?*u8,
    cpt: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SelectClipPath(
    hdc: HDC,
    mode: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetArcDirection(
    hdc: HDC,
    dir: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetMiterLimit(
    hdc: HDC,
    limit: f32,
    old: ?*f32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn StrokeAndFillPath(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn StrokePath(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn WidenPath(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn ExtCreatePen(
    iPenStyle: u32,
    cWidth: u32,
    plbrush: ?*LOGBRUSH,
    cStyle: u32,
    pstyle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HPEN;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetMiterLimit(
    hdc: HDC,
    plimit: ?*f32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetArcDirection(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetObjectA(
    h: HANDLE,
    c: i32,
    pv: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetObjectW(
    h: HANDLE,
    c: i32,
    pv: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn MoveToEx(
    hdc: HDC,
    x: i32,
    y: i32,
    lppt: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn TextOutA(
    hdc: HDC,
    x: i32,
    y: i32,
    lpString: ?*i8,
    c: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn TextOutW(
    hdc: HDC,
    x: i32,
    y: i32,
    lpString: ?*u16,
    c: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn ExtTextOutA(
    hdc: HDC,
    x: i32,
    y: i32,
    options: u32,
    lprect: ?*RECT,
    lpString: ?*i8,
    c: u32,
    lpDx: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn ExtTextOutW(
    hdc: HDC,
    x: i32,
    y: i32,
    options: u32,
    lprect: ?*RECT,
    lpString: ?*u16,
    c: u32,
    lpDx: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn PolyTextOutA(
    hdc: HDC,
    ppt: ?*POLYTEXTA,
    nstrings: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn PolyTextOutW(
    hdc: HDC,
    ppt: ?*POLYTEXTW,
    nstrings: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn CreatePolygonRgn(
    pptl: ?*POINT,
    cPoint: i32,
    iMode: i32,
) callconv(@import("std").os.windows.WINAPI) HRGN;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn DPtoLP(
    hdc: HDC,
    lppt: ?*POINT,
    c: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn LPtoDP(
    hdc: HDC,
    lppt: ?*POINT,
    c: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn Polygon(
    hdc: HDC,
    apt: ?*POINT,
    cpt: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn Polyline(
    hdc: HDC,
    apt: ?*POINT,
    cpt: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn PolyBezier(
    hdc: HDC,
    apt: ?*POINT,
    cpt: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn PolyBezierTo(
    hdc: HDC,
    apt: ?*POINT,
    cpt: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn PolylineTo(
    hdc: HDC,
    apt: ?*POINT,
    cpt: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetViewportExtEx(
    hdc: HDC,
    x: i32,
    y: i32,
    lpsz: ?*SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetViewportOrgEx(
    hdc: HDC,
    x: i32,
    y: i32,
    lppt: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetWindowExtEx(
    hdc: HDC,
    x: i32,
    y: i32,
    lpsz: ?*SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetWindowOrgEx(
    hdc: HDC,
    x: i32,
    y: i32,
    lppt: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn OffsetViewportOrgEx(
    hdc: HDC,
    x: i32,
    y: i32,
    lppt: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn OffsetWindowOrgEx(
    hdc: HDC,
    x: i32,
    y: i32,
    lppt: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn ScaleViewportExtEx(
    hdc: HDC,
    xn: i32,
    dx: i32,
    yn: i32,
    yd: i32,
    lpsz: ?*SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn ScaleWindowExtEx(
    hdc: HDC,
    xn: i32,
    xd: i32,
    yn: i32,
    yd: i32,
    lpsz: ?*SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetBitmapDimensionEx(
    hbm: HBITMAP,
    w: i32,
    h: i32,
    lpsz: ?*SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn SetBrushOrgEx(
    hdc: HDC,
    x: i32,
    y: i32,
    lppt: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetTextFaceA(
    hdc: HDC,
    c: i32,
    lpName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetTextFaceW(
    hdc: HDC,
    c: i32,
    lpName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetKerningPairsA(
    hdc: HDC,
    nPairs: u32,
    lpKernPair: ?*KERNINGPAIR,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetKerningPairsW(
    hdc: HDC,
    nPairs: u32,
    lpKernPair: ?*KERNINGPAIR,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GetDCOrgEx(
    hdc: HDC,
    lppt: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn FixBrushOrgEx(
    hdc: HDC,
    x: i32,
    y: i32,
    ptl: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn UnrealizeObject(
    h: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GdiFlush(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GdiSetBatchLimit(
    dw: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "GDI32" fn GdiGetBatchLimit(
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "OPENGL32" fn wglSwapMultipleBuffers(
    param0: u32,
    param1: ?*WGLSWAP,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "FONTSUB" fn CreateFontPackage(
    puchSrcBuffer: ?*u8,
    ulSrcBufferSize: u32,
    ppuchFontPackageBuffer: ?*?*u8,
    pulFontPackageBufferSize: ?*u32,
    pulBytesWritten: ?*u32,
    usFlag: u16,
    usTTCIndex: u16,
    usSubsetFormat: u16,
    usSubsetLanguage: u16,
    usSubsetPlatform: u16,
    usSubsetEncoding: u16,
    pusSubsetKeepList: ?*u16,
    usSubsetListCount: u16,
    lpfnAllocate: CFP_ALLOCPROC,
    lpfnReAllocate: CFP_REALLOCPROC,
    lpfnFree: CFP_FREEPROC,
    lpvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "FONTSUB" fn MergeFontPackage(
    puchMergeFontBuffer: ?*u8,
    ulMergeFontBufferSize: u32,
    puchFontPackageBuffer: ?*u8,
    ulFontPackageBufferSize: u32,
    ppuchDestBuffer: ?*?*u8,
    pulDestBufferSize: ?*u32,
    pulBytesWritten: ?*u32,
    usMode: u16,
    lpfnAllocate: CFP_ALLOCPROC,
    lpfnReAllocate: CFP_REALLOCPROC,
    lpfnFree: CFP_FREEPROC,
    lpvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "t2embed" fn TTEmbedFont(
    hDC: HDC,
    ulFlags: u32,
    ulCharSet: u32,
    pulPrivStatus: ?*u32,
    pulStatus: ?*u32,
    lpfnWriteToStream: WRITEEMBEDPROC,
    lpvWriteStream: ?*opaque{},
    pusCharCodeSet: ?*u16,
    usCharCodeCount: u16,
    usLanguage: u16,
    pTTEmbedInfo: ?*TTEMBEDINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "t2embed" fn TTEmbedFontFromFileA(
    hDC: HDC,
    szFontFileName: ?*i8,
    usTTCIndex: u16,
    ulFlags: u32,
    ulCharSet: u32,
    pulPrivStatus: ?*u32,
    pulStatus: ?*u32,
    lpfnWriteToStream: WRITEEMBEDPROC,
    lpvWriteStream: ?*opaque{},
    pusCharCodeSet: ?*u16,
    usCharCodeCount: u16,
    usLanguage: u16,
    pTTEmbedInfo: ?*TTEMBEDINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "t2embed" fn TTLoadEmbeddedFont(
    phFontReference: ?*HANDLE,
    ulFlags: u32,
    pulPrivStatus: ?*u32,
    ulPrivs: u32,
    pulStatus: ?*u32,
    lpfnReadFromStream: READEMBEDPROC,
    lpvReadStream: ?*opaque{},
    szWinFamilyName: ?*u16,
    szMacFamilyName: ?*i8,
    pTTLoadInfo: ?*TTLOADINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "t2embed" fn TTGetEmbeddedFontInfo(
    ulFlags: u32,
    pulPrivStatus: ?*u32,
    ulPrivs: u32,
    pulStatus: ?*u32,
    lpfnReadFromStream: READEMBEDPROC,
    lpvReadStream: ?*opaque{},
    pTTLoadInfo: ?*TTLOADINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "t2embed" fn TTDeleteEmbeddedFont(
    hFontReference: HANDLE,
    ulFlags: u32,
    pulStatus: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "t2embed" fn TTGetEmbeddingType(
    hDC: HDC,
    pulEmbedType: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "t2embed" fn TTCharToUnicode(
    hDC: HDC,
    pucCharCodes: ?*u8,
    ulCharCodeSize: u32,
    pusShortCodes: ?*u16,
    ulShortCodeSize: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "t2embed" fn TTRunValidationTests(
    hDC: HDC,
    pTestParam: ?*TTVALIDATIONTESTSPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "t2embed" fn TTIsEmbeddingEnabled(
    hDC: HDC,
    pbEnabled: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "t2embed" fn TTIsEmbeddingEnabledForFacename(
    lpszFacename: ?*i8,
    pbEnabled: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "t2embed" fn TTEnableEmbeddingForFacename(
    lpszFacename: ?*i8,
    bEnable: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "t2embed" fn TTEmbedFontEx(
    hDC: HDC,
    ulFlags: u32,
    ulCharSet: u32,
    pulPrivStatus: ?*u32,
    pulStatus: ?*u32,
    lpfnWriteToStream: WRITEEMBEDPROC,
    lpvWriteStream: ?*opaque{},
    pulCharCodeSet: ?*u32,
    usCharCodeCount: u16,
    usLanguage: u16,
    pTTEmbedInfo: ?*TTEMBEDINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "t2embed" fn TTRunValidationTestsEx(
    hDC: HDC,
    pTestParam: ?*TTVALIDATIONTESTSPARAMSEX,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "t2embed" fn TTGetNewFontName(
    phFontReference: ?*HANDLE,
    wzWinFamilyName: ?*u16,
    cchMaxWinName: i32,
    szMacFamilyName: ?*i8,
    cchMaxMacName: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const MONITORINFOEX = MONITORINFOEXA;
        pub const TEXTMETRIC = TEXTMETRICA;
        pub const NEWTEXTMETRIC = NEWTEXTMETRICA;
        pub const NEWTEXTMETRICEX = NEWTEXTMETRICEXA;
        pub const ENUMLOGFONT = ENUMLOGFONTA;
        pub const ENUMLOGFONTEX = ENUMLOGFONTEXA;
        pub const EXTLOGFONT = EXTLOGFONTA;
        pub const DISPLAY_DEVICE = DISPLAY_DEVICEA;
        pub const OUTLINETEXTMETRIC = OUTLINETEXTMETRICA;
        pub const POLYTEXT = POLYTEXTA;
        pub const GCP_RESULTS = GCP_RESULTSA;
        pub const OLDFONTENUMPROC = OLDFONTENUMPROCA;
        pub const AXISINFO = AXISINFOA;
        pub const AXESLIST = AXESLISTA;
        pub const ENUMLOGFONTEXDV = ENUMLOGFONTEXDVA;
        pub const ENUMTEXTMETRIC = ENUMTEXTMETRICA;
        pub const DrawText = DrawTextA;
        pub const DrawTextEx = DrawTextExA;
        pub const GrayString = GrayStringA;
        pub const DrawState = DrawStateA;
        pub const TabbedTextOut = TabbedTextOutA;
        pub const GetTabbedTextExtent = GetTabbedTextExtentA;
        pub const LoadBitmap = LoadBitmapA;
        pub const ChangeDisplaySettings = ChangeDisplaySettingsA;
        pub const ChangeDisplaySettingsEx = ChangeDisplaySettingsExA;
        pub const EnumDisplaySettings = EnumDisplaySettingsA;
        pub const EnumDisplaySettingsEx = EnumDisplaySettingsExA;
        pub const EnumDisplayDevices = EnumDisplayDevicesA;
        pub const GetMonitorInfo = GetMonitorInfoA;
        pub const AddFontResource = AddFontResourceA;
        pub const CopyMetaFile = CopyMetaFileA;
        pub const CreateDC = CreateDCA;
        pub const CreateFontIndirect = CreateFontIndirectA;
        pub const CreateFont = CreateFontA;
        pub const CreateIC = CreateICA;
        pub const CreateMetaFile = CreateMetaFileA;
        pub const CreateScalableFontResource = CreateScalableFontResourceA;
        pub const EnumFontFamiliesEx = EnumFontFamiliesExA;
        pub const EnumFontFamilies = EnumFontFamiliesA;
        pub const EnumFonts = EnumFontsA;
        pub const GetCharWidth = GetCharWidthA;
        pub const GetCharWidth32 = GetCharWidth32A;
        pub const GetCharWidthFloat = GetCharWidthFloatA;
        pub const GetCharABCWidths = GetCharABCWidthsA;
        pub const GetCharABCWidthsFloat = GetCharABCWidthsFloatA;
        pub const GetGlyphOutline = GetGlyphOutlineA;
        pub const GetMetaFile = GetMetaFileA;
        pub const GetOutlineTextMetrics = GetOutlineTextMetricsA;
        pub const GetTextExtentPoint = GetTextExtentPointA;
        pub const GetTextExtentPoint32 = GetTextExtentPoint32A;
        pub const GetTextExtentExPoint = GetTextExtentExPointA;
        pub const GetCharacterPlacement = GetCharacterPlacementA;
        pub const GetGlyphIndices = GetGlyphIndicesA;
        pub const AddFontResourceEx = AddFontResourceExA;
        pub const RemoveFontResourceEx = RemoveFontResourceExA;
        pub const CreateFontIndirectEx = CreateFontIndirectExA;
        pub const ResetDC = ResetDCA;
        pub const RemoveFontResource = RemoveFontResourceA;
        pub const CopyEnhMetaFile = CopyEnhMetaFileA;
        pub const CreateEnhMetaFile = CreateEnhMetaFileA;
        pub const GetEnhMetaFile = GetEnhMetaFileA;
        pub const GetEnhMetaFileDescription = GetEnhMetaFileDescriptionA;
        pub const GetTextMetrics = GetTextMetricsA;
        pub const GetObject = GetObjectA;
        pub const TextOut = TextOutA;
        pub const ExtTextOut = ExtTextOutA;
        pub const PolyTextOut = PolyTextOutA;
        pub const GetTextFace = GetTextFaceA;
        pub const GetKerningPairs = GetKerningPairsA;
    },
    .wide => struct {
        pub const MONITORINFOEX = MONITORINFOEXW;
        pub const TEXTMETRIC = TEXTMETRICW;
        pub const NEWTEXTMETRIC = NEWTEXTMETRICW;
        pub const NEWTEXTMETRICEX = NEWTEXTMETRICEXW;
        pub const ENUMLOGFONT = ENUMLOGFONTW;
        pub const ENUMLOGFONTEX = ENUMLOGFONTEXW;
        pub const EXTLOGFONT = EXTLOGFONTW;
        pub const DISPLAY_DEVICE = DISPLAY_DEVICEW;
        pub const OUTLINETEXTMETRIC = OUTLINETEXTMETRICW;
        pub const POLYTEXT = POLYTEXTW;
        pub const GCP_RESULTS = GCP_RESULTSW;
        pub const OLDFONTENUMPROC = OLDFONTENUMPROCW;
        pub const AXISINFO = AXISINFOW;
        pub const AXESLIST = AXESLISTW;
        pub const ENUMLOGFONTEXDV = ENUMLOGFONTEXDVW;
        pub const ENUMTEXTMETRIC = ENUMTEXTMETRICW;
        pub const DrawText = DrawTextW;
        pub const DrawTextEx = DrawTextExW;
        pub const GrayString = GrayStringW;
        pub const DrawState = DrawStateW;
        pub const TabbedTextOut = TabbedTextOutW;
        pub const GetTabbedTextExtent = GetTabbedTextExtentW;
        pub const LoadBitmap = LoadBitmapW;
        pub const ChangeDisplaySettings = ChangeDisplaySettingsW;
        pub const ChangeDisplaySettingsEx = ChangeDisplaySettingsExW;
        pub const EnumDisplaySettings = EnumDisplaySettingsW;
        pub const EnumDisplaySettingsEx = EnumDisplaySettingsExW;
        pub const EnumDisplayDevices = EnumDisplayDevicesW;
        pub const GetMonitorInfo = GetMonitorInfoW;
        pub const AddFontResource = AddFontResourceW;
        pub const CopyMetaFile = CopyMetaFileW;
        pub const CreateDC = CreateDCW;
        pub const CreateFontIndirect = CreateFontIndirectW;
        pub const CreateFont = CreateFontW;
        pub const CreateIC = CreateICW;
        pub const CreateMetaFile = CreateMetaFileW;
        pub const CreateScalableFontResource = CreateScalableFontResourceW;
        pub const EnumFontFamiliesEx = EnumFontFamiliesExW;
        pub const EnumFontFamilies = EnumFontFamiliesW;
        pub const EnumFonts = EnumFontsW;
        pub const GetCharWidth = GetCharWidthW;
        pub const GetCharWidth32 = GetCharWidth32W;
        pub const GetCharWidthFloat = GetCharWidthFloatW;
        pub const GetCharABCWidths = GetCharABCWidthsW;
        pub const GetCharABCWidthsFloat = GetCharABCWidthsFloatW;
        pub const GetGlyphOutline = GetGlyphOutlineW;
        pub const GetMetaFile = GetMetaFileW;
        pub const GetOutlineTextMetrics = GetOutlineTextMetricsW;
        pub const GetTextExtentPoint = GetTextExtentPointW;
        pub const GetTextExtentPoint32 = GetTextExtentPoint32W;
        pub const GetTextExtentExPoint = GetTextExtentExPointW;
        pub const GetCharacterPlacement = GetCharacterPlacementW;
        pub const GetGlyphIndices = GetGlyphIndicesW;
        pub const AddFontResourceEx = AddFontResourceExW;
        pub const RemoveFontResourceEx = RemoveFontResourceExW;
        pub const CreateFontIndirectEx = CreateFontIndirectExW;
        pub const ResetDC = ResetDCW;
        pub const RemoveFontResource = RemoveFontResourceW;
        pub const CopyEnhMetaFile = CopyEnhMetaFileW;
        pub const CreateEnhMetaFile = CreateEnhMetaFileW;
        pub const GetEnhMetaFile = GetEnhMetaFileW;
        pub const GetEnhMetaFileDescription = GetEnhMetaFileDescriptionW;
        pub const GetTextMetrics = GetTextMetricsW;
        pub const GetObject = GetObjectW;
        pub const TextOut = TextOutW;
        pub const ExtTextOut = ExtTextOutW;
        pub const PolyTextOut = PolyTextOutW;
        pub const GetTextFace = GetTextFaceW;
        pub const GetKerningPairs = GetKerningPairsW;
    },
    else => if (@import("builtin").is_test) struct {
        pub const MONITORINFOEX = *opaque{};
        pub const TEXTMETRIC = *opaque{};
        pub const NEWTEXTMETRIC = *opaque{};
        pub const NEWTEXTMETRICEX = *opaque{};
        pub const ENUMLOGFONT = *opaque{};
        pub const ENUMLOGFONTEX = *opaque{};
        pub const EXTLOGFONT = *opaque{};
        pub const DISPLAY_DEVICE = *opaque{};
        pub const OUTLINETEXTMETRIC = *opaque{};
        pub const POLYTEXT = *opaque{};
        pub const GCP_RESULTS = *opaque{};
        pub const OLDFONTENUMPROC = *opaque{};
        pub const AXISINFO = *opaque{};
        pub const AXESLIST = *opaque{};
        pub const ENUMLOGFONTEXDV = *opaque{};
        pub const ENUMTEXTMETRIC = *opaque{};
        pub const DrawText = *opaque{};
        pub const DrawTextEx = *opaque{};
        pub const GrayString = *opaque{};
        pub const DrawState = *opaque{};
        pub const TabbedTextOut = *opaque{};
        pub const GetTabbedTextExtent = *opaque{};
        pub const LoadBitmap = *opaque{};
        pub const ChangeDisplaySettings = *opaque{};
        pub const ChangeDisplaySettingsEx = *opaque{};
        pub const EnumDisplaySettings = *opaque{};
        pub const EnumDisplaySettingsEx = *opaque{};
        pub const EnumDisplayDevices = *opaque{};
        pub const GetMonitorInfo = *opaque{};
        pub const AddFontResource = *opaque{};
        pub const CopyMetaFile = *opaque{};
        pub const CreateDC = *opaque{};
        pub const CreateFontIndirect = *opaque{};
        pub const CreateFont = *opaque{};
        pub const CreateIC = *opaque{};
        pub const CreateMetaFile = *opaque{};
        pub const CreateScalableFontResource = *opaque{};
        pub const EnumFontFamiliesEx = *opaque{};
        pub const EnumFontFamilies = *opaque{};
        pub const EnumFonts = *opaque{};
        pub const GetCharWidth = *opaque{};
        pub const GetCharWidth32 = *opaque{};
        pub const GetCharWidthFloat = *opaque{};
        pub const GetCharABCWidths = *opaque{};
        pub const GetCharABCWidthsFloat = *opaque{};
        pub const GetGlyphOutline = *opaque{};
        pub const GetMetaFile = *opaque{};
        pub const GetOutlineTextMetrics = *opaque{};
        pub const GetTextExtentPoint = *opaque{};
        pub const GetTextExtentPoint32 = *opaque{};
        pub const GetTextExtentExPoint = *opaque{};
        pub const GetCharacterPlacement = *opaque{};
        pub const GetGlyphIndices = *opaque{};
        pub const AddFontResourceEx = *opaque{};
        pub const RemoveFontResourceEx = *opaque{};
        pub const CreateFontIndirectEx = *opaque{};
        pub const ResetDC = *opaque{};
        pub const RemoveFontResource = *opaque{};
        pub const CopyEnhMetaFile = *opaque{};
        pub const CreateEnhMetaFile = *opaque{};
        pub const GetEnhMetaFile = *opaque{};
        pub const GetEnhMetaFileDescription = *opaque{};
        pub const GetTextMetrics = *opaque{};
        pub const GetObject = *opaque{};
        pub const TextOut = *opaque{};
        pub const ExtTextOut = *opaque{};
        pub const PolyTextOut = *opaque{};
        pub const GetTextFace = *opaque{};
        pub const GetKerningPairs = *opaque{};
    } else struct {
        pub const MONITORINFOEX = @compileError("'MONITORINFOEX' requires that UNICODE be set to true or false in the root module");
        pub const TEXTMETRIC = @compileError("'TEXTMETRIC' requires that UNICODE be set to true or false in the root module");
        pub const NEWTEXTMETRIC = @compileError("'NEWTEXTMETRIC' requires that UNICODE be set to true or false in the root module");
        pub const NEWTEXTMETRICEX = @compileError("'NEWTEXTMETRICEX' requires that UNICODE be set to true or false in the root module");
        pub const ENUMLOGFONT = @compileError("'ENUMLOGFONT' requires that UNICODE be set to true or false in the root module");
        pub const ENUMLOGFONTEX = @compileError("'ENUMLOGFONTEX' requires that UNICODE be set to true or false in the root module");
        pub const EXTLOGFONT = @compileError("'EXTLOGFONT' requires that UNICODE be set to true or false in the root module");
        pub const DISPLAY_DEVICE = @compileError("'DISPLAY_DEVICE' requires that UNICODE be set to true or false in the root module");
        pub const OUTLINETEXTMETRIC = @compileError("'OUTLINETEXTMETRIC' requires that UNICODE be set to true or false in the root module");
        pub const POLYTEXT = @compileError("'POLYTEXT' requires that UNICODE be set to true or false in the root module");
        pub const GCP_RESULTS = @compileError("'GCP_RESULTS' requires that UNICODE be set to true or false in the root module");
        pub const OLDFONTENUMPROC = @compileError("'OLDFONTENUMPROC' requires that UNICODE be set to true or false in the root module");
        pub const AXISINFO = @compileError("'AXISINFO' requires that UNICODE be set to true or false in the root module");
        pub const AXESLIST = @compileError("'AXESLIST' requires that UNICODE be set to true or false in the root module");
        pub const ENUMLOGFONTEXDV = @compileError("'ENUMLOGFONTEXDV' requires that UNICODE be set to true or false in the root module");
        pub const ENUMTEXTMETRIC = @compileError("'ENUMTEXTMETRIC' requires that UNICODE be set to true or false in the root module");
        pub const DrawText = @compileError("'DrawText' requires that UNICODE be set to true or false in the root module");
        pub const DrawTextEx = @compileError("'DrawTextEx' requires that UNICODE be set to true or false in the root module");
        pub const GrayString = @compileError("'GrayString' requires that UNICODE be set to true or false in the root module");
        pub const DrawState = @compileError("'DrawState' requires that UNICODE be set to true or false in the root module");
        pub const TabbedTextOut = @compileError("'TabbedTextOut' requires that UNICODE be set to true or false in the root module");
        pub const GetTabbedTextExtent = @compileError("'GetTabbedTextExtent' requires that UNICODE be set to true or false in the root module");
        pub const LoadBitmap = @compileError("'LoadBitmap' requires that UNICODE be set to true or false in the root module");
        pub const ChangeDisplaySettings = @compileError("'ChangeDisplaySettings' requires that UNICODE be set to true or false in the root module");
        pub const ChangeDisplaySettingsEx = @compileError("'ChangeDisplaySettingsEx' requires that UNICODE be set to true or false in the root module");
        pub const EnumDisplaySettings = @compileError("'EnumDisplaySettings' requires that UNICODE be set to true or false in the root module");
        pub const EnumDisplaySettingsEx = @compileError("'EnumDisplaySettingsEx' requires that UNICODE be set to true or false in the root module");
        pub const EnumDisplayDevices = @compileError("'EnumDisplayDevices' requires that UNICODE be set to true or false in the root module");
        pub const GetMonitorInfo = @compileError("'GetMonitorInfo' requires that UNICODE be set to true or false in the root module");
        pub const AddFontResource = @compileError("'AddFontResource' requires that UNICODE be set to true or false in the root module");
        pub const CopyMetaFile = @compileError("'CopyMetaFile' requires that UNICODE be set to true or false in the root module");
        pub const CreateDC = @compileError("'CreateDC' requires that UNICODE be set to true or false in the root module");
        pub const CreateFontIndirect = @compileError("'CreateFontIndirect' requires that UNICODE be set to true or false in the root module");
        pub const CreateFont = @compileError("'CreateFont' requires that UNICODE be set to true or false in the root module");
        pub const CreateIC = @compileError("'CreateIC' requires that UNICODE be set to true or false in the root module");
        pub const CreateMetaFile = @compileError("'CreateMetaFile' requires that UNICODE be set to true or false in the root module");
        pub const CreateScalableFontResource = @compileError("'CreateScalableFontResource' requires that UNICODE be set to true or false in the root module");
        pub const EnumFontFamiliesEx = @compileError("'EnumFontFamiliesEx' requires that UNICODE be set to true or false in the root module");
        pub const EnumFontFamilies = @compileError("'EnumFontFamilies' requires that UNICODE be set to true or false in the root module");
        pub const EnumFonts = @compileError("'EnumFonts' requires that UNICODE be set to true or false in the root module");
        pub const GetCharWidth = @compileError("'GetCharWidth' requires that UNICODE be set to true or false in the root module");
        pub const GetCharWidth32 = @compileError("'GetCharWidth32' requires that UNICODE be set to true or false in the root module");
        pub const GetCharWidthFloat = @compileError("'GetCharWidthFloat' requires that UNICODE be set to true or false in the root module");
        pub const GetCharABCWidths = @compileError("'GetCharABCWidths' requires that UNICODE be set to true or false in the root module");
        pub const GetCharABCWidthsFloat = @compileError("'GetCharABCWidthsFloat' requires that UNICODE be set to true or false in the root module");
        pub const GetGlyphOutline = @compileError("'GetGlyphOutline' requires that UNICODE be set to true or false in the root module");
        pub const GetMetaFile = @compileError("'GetMetaFile' requires that UNICODE be set to true or false in the root module");
        pub const GetOutlineTextMetrics = @compileError("'GetOutlineTextMetrics' requires that UNICODE be set to true or false in the root module");
        pub const GetTextExtentPoint = @compileError("'GetTextExtentPoint' requires that UNICODE be set to true or false in the root module");
        pub const GetTextExtentPoint32 = @compileError("'GetTextExtentPoint32' requires that UNICODE be set to true or false in the root module");
        pub const GetTextExtentExPoint = @compileError("'GetTextExtentExPoint' requires that UNICODE be set to true or false in the root module");
        pub const GetCharacterPlacement = @compileError("'GetCharacterPlacement' requires that UNICODE be set to true or false in the root module");
        pub const GetGlyphIndices = @compileError("'GetGlyphIndices' requires that UNICODE be set to true or false in the root module");
        pub const AddFontResourceEx = @compileError("'AddFontResourceEx' requires that UNICODE be set to true or false in the root module");
        pub const RemoveFontResourceEx = @compileError("'RemoveFontResourceEx' requires that UNICODE be set to true or false in the root module");
        pub const CreateFontIndirectEx = @compileError("'CreateFontIndirectEx' requires that UNICODE be set to true or false in the root module");
        pub const ResetDC = @compileError("'ResetDC' requires that UNICODE be set to true or false in the root module");
        pub const RemoveFontResource = @compileError("'RemoveFontResource' requires that UNICODE be set to true or false in the root module");
        pub const CopyEnhMetaFile = @compileError("'CopyEnhMetaFile' requires that UNICODE be set to true or false in the root module");
        pub const CreateEnhMetaFile = @compileError("'CreateEnhMetaFile' requires that UNICODE be set to true or false in the root module");
        pub const GetEnhMetaFile = @compileError("'GetEnhMetaFile' requires that UNICODE be set to true or false in the root module");
        pub const GetEnhMetaFileDescription = @compileError("'GetEnhMetaFileDescription' requires that UNICODE be set to true or false in the root module");
        pub const GetTextMetrics = @compileError("'GetTextMetrics' requires that UNICODE be set to true or false in the root module");
        pub const GetObject = @compileError("'GetObject' requires that UNICODE be set to true or false in the root module");
        pub const TextOut = @compileError("'TextOut' requires that UNICODE be set to true or false in the root module");
        pub const ExtTextOut = @compileError("'ExtTextOut' requires that UNICODE be set to true or false in the root module");
        pub const PolyTextOut = @compileError("'PolyTextOut' requires that UNICODE be set to true or false in the root module");
        pub const GetTextFace = @compileError("'GetTextFace' requires that UNICODE be set to true or false in the root module");
        pub const GetKerningPairs = @compileError("'GetKerningPairs' requires that UNICODE be set to true or false in the root module");
    },
};

//
// type imports
//
const BOOL = @import("systemservices.zig").BOOL;
const RECT = @import("displaydevices.zig").RECT;
const CIEXYZTRIPLE = @import("windowscolorsystem.zig").CIEXYZTRIPLE;
const BITMAPINFOHEADER = @import("directshow.zig").BITMAPINFOHEADER;
const RECTL = @import("displaydevices.zig").RECTL;
const SIZE = @import("displaydevices.zig").SIZE;
const FONTSIGNATURE = @import("intl.zig").FONTSIGNATURE;
const POINT = @import("displaydevices.zig").POINT;
const PALETTEENTRY = @import("direct2d.zig").PALETTEENTRY;
const LOGFONTA = @import("shell.zig").LOGFONTA;
const LOGFONTW = @import("shell.zig").LOGFONTW;
const DISPLAYCONFIG_DEVICE_INFO_HEADER = @import("displaydevices.zig").DISPLAYCONFIG_DEVICE_INFO_HEADER;
const HANDLE = @import("systemservices.zig").HANDLE;
const POINTL = @import("displaydevices.zig").POINTL;
const POINTS = @import("displaydevices.zig").POINTS;
const PIXELFORMATDESCRIPTOR = @import("opengl.zig").PIXELFORMATDESCRIPTOR;
const LOGCOLORSPACEA = @import("windowscolorsystem.zig").LOGCOLORSPACEA;
const LOGCOLORSPACEW = @import("windowscolorsystem.zig").LOGCOLORSPACEW;
const HWND = @import("windowsandmessaging.zig").HWND;
const LPARAM = @import("windowsandmessaging.zig").LPARAM;
const WPARAM = @import("windowsandmessaging.zig").WPARAM;
const HINSTANCE = @import("systemservices.zig").HINSTANCE;
const DEVMODEA = @import("xps.zig").DEVMODEA;
const DEVMODEW = @import("displaydevices.zig").DEVMODEW;
const METAFILEPICT = @import("dataexchange.zig").METAFILEPICT;

test "" {
    const constant_export_count = 0;
    const type_export_count = 199;
    const func_count = 395;
    const unicode_alias_count = 69;
    const type_import_count = 25;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
