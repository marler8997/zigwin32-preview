//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: DAV_CALLBACK_AUTH_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DAV_CALLBACK_AUTH_BLOB = extern struct {
    pBuffer: ?*opaque{},
    ulSize: u32,
    ulType: u32,
};
// --------------------------------------------------------
// Type: DAV_CALLBACK_AUTH_UNP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DAV_CALLBACK_AUTH_UNP = extern struct {
    pszUserName: ?*u16,
    ulUserNameLength: u32,
    pszPassword: ?*u16,
    ulPasswordLength: u32,
};
// --------------------------------------------------------
// Type: DAV_CALLBACK_CRED
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DAV_CALLBACK_CRED = extern struct {
    AuthBlob: DAV_CALLBACK_AUTH_BLOB,
    UNPBlob: DAV_CALLBACK_AUTH_UNP,
    bAuthBlobValid: BOOL,
    bSave: BOOL,
};
// --------------------------------------------------------
// Type: AUTHNEXTSTEP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AUTHNEXTSTEP = *opaque{
};
// --------------------------------------------------------
// Type: PFNDAVAUTHCALLBACK_FREECRED
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNDAVAUTHCALLBACK_FREECRED = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFNDAVAUTHCALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFNDAVAUTHCALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn DavAddConnection(
    ConnectionHandle: ?*HANDLE,
    RemoteName: ?*u16,
    UserName: ?*u16,
    Password: ?*u16,
    ClientCert: ?*u8,
    CertSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn DavDeleteConnection(
    ConnectionHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn DavGetUNCFromHTTPPath(
    Url: ?*u16,
    UncPath: ?*u16,
    lpSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn DavGetHTTPFromUNCPath(
    UncPath: ?*u16,
    Url: ?*u16,
    lpSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn DavGetTheLockOwnerOfTheFile(
    FileName: ?*u16,
    LockOwnerName: ?*u16,
    LockOwnerNameLengthInBytes: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn DavGetExtendedError(
    hFile: HANDLE,
    ExtError: ?*u32,
    ExtErrorString: ?*u16,
    cChSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn DavFlushFile(
    hFile: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn DavInvalidateCache(
    URLName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn DavCancelConnectionsToServer(
    lpName: ?*u16,
    fForce: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn DavRegisterAuthCallback(
    CallBack: PFNDAVAUTHCALLBACK,
    Version: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "davclnt" fn DavUnregisterAuthCallback(
    hCallback: u32,
) callconv(@import("std").os.windows.WINAPI) void;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const BOOL = @import("systemservices.zig").BOOL;
const HANDLE = @import("systemservices.zig").HANDLE;

test "" {
    const constant_export_count = 0;
    const type_export_count = 6;
    const func_count = 11;
    const unicode_alias_count = 0;
    const type_import_count = 2;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
