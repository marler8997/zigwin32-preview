//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: TDH_HANDLE
// TypeLayoutAttr: sequential
// RAIIFree 'TdhCloseDecodingHandle' (TODO: can we use this information?)
pub const TDH_HANDLE = ?*opaque{};
// --------------------------------------------------------
// Type: WNODE_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WNODE_HEADER = extern struct {
    BufferSize: u32,
    ProviderId: u32,
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    Guid: Guid,
    ClientContext: u32,
    Flags: u32,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            Version: u32,
            Linkage: u32,
        };
    };
};
// --------------------------------------------------------
// Type: OFFSETINSTANCEDATAANDLENGTH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OFFSETINSTANCEDATAANDLENGTH = extern struct {
    OffsetInstanceData: u32,
    LengthInstanceData: u32,
};
// --------------------------------------------------------
// Type: WNODE_ALL_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WNODE_ALL_DATA = extern struct {
    WnodeHeader: WNODE_HEADER,
    DataBlockOffset: u32,
    InstanceCount: u32,
    OffsetInstanceNameOffsets: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: WNODE_SINGLE_INSTANCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WNODE_SINGLE_INSTANCE = extern struct {
    WnodeHeader: WNODE_HEADER,
    OffsetInstanceName: u32,
    InstanceIndex: u32,
    DataBlockOffset: u32,
    SizeDataBlock: u32,
    VariableData: u8,
};
// --------------------------------------------------------
// Type: WNODE_SINGLE_ITEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WNODE_SINGLE_ITEM = extern struct {
    WnodeHeader: WNODE_HEADER,
    OffsetInstanceName: u32,
    InstanceIndex: u32,
    ItemId: u32,
    DataBlockOffset: u32,
    SizeDataItem: u32,
    VariableData: u8,
};
// --------------------------------------------------------
// Type: WNODE_METHOD_ITEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WNODE_METHOD_ITEM = extern struct {
    WnodeHeader: WNODE_HEADER,
    OffsetInstanceName: u32,
    InstanceIndex: u32,
    MethodId: u32,
    DataBlockOffset: u32,
    SizeDataBlock: u32,
    VariableData: u8,
};
// --------------------------------------------------------
// Type: WNODE_EVENT_ITEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WNODE_EVENT_ITEM = extern struct {
    WnodeHeader: WNODE_HEADER,
};
// --------------------------------------------------------
// Type: WNODE_EVENT_REFERENCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WNODE_EVENT_REFERENCE = extern struct {
    WnodeHeader: WNODE_HEADER,
    TargetGuid: Guid,
    TargetDataBlockSize: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: WNODE_TOO_SMALL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WNODE_TOO_SMALL = extern struct {
    WnodeHeader: WNODE_HEADER,
    SizeNeeded: u32,
};
// --------------------------------------------------------
// Type: WMIREGGUIDW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WMIREGGUIDW = extern struct {
    Guid: Guid,
    Flags: u32,
    InstanceCount: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: WMIREGINFOW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WMIREGINFOW = extern struct {
    BufferSize: u32,
    NextWmiRegInfo: u32,
    RegistryPath: u32,
    MofResourceName: u32,
    GuidCount: u32,
    WmiRegGuid: WMIREGGUIDW,
};
// --------------------------------------------------------
// Type: WMIDPREQUESTCODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WMIDPREQUESTCODE = *opaque{
};
// --------------------------------------------------------
// Type: ETW_COMPRESSION_RESUMPTION_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ETW_COMPRESSION_RESUMPTION_MODE = *opaque{
};
// --------------------------------------------------------
// Type: EVENT_TRACE_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_TRACE_HEADER = extern struct {
    Size: u16,
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    ThreadId: u32,
    ProcessId: u32,
    TimeStamp: LARGE_INTEGER,
    Anonymous3: _Anonymous3_e__Union,
    Anonymous4: _Anonymous4_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous4_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous4_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous1_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous1_e__Struct = extern struct {
            KernelTime: u32,
            UserTime: u32,
        };
        // --------------------------------------------------------
        // Type: _Anonymous2_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous2_e__Struct = extern struct {
            ClientContext: u32,
            Flags: u32,
        };
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Class_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Class_e__Struct = extern struct {
            Type: u8,
            Level: u8,
            Version: u16,
        };
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            HeaderType: u8,
            MarkerFlags: u8,
        };
    };
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: EVENT_INSTANCE_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_INSTANCE_HEADER = extern struct {
    Size: u16,
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    ThreadId: u32,
    ProcessId: u32,
    TimeStamp: LARGE_INTEGER,
    RegHandle: u64,
    InstanceId: u32,
    ParentInstanceId: u32,
    Anonymous3: _Anonymous3_e__Union,
    ParentRegHandle: u64,
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous1_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous1_e__Struct = extern struct {
            KernelTime: u32,
            UserTime: u32,
        };
        // --------------------------------------------------------
        // Type: _Anonymous2_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous2_e__Struct = extern struct {
            EventId: u32,
            Flags: u32,
        };
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Class_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Class_e__Struct = extern struct {
            Type: u8,
            Level: u8,
            Version: u16,
        };
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            HeaderType: u8,
            MarkerFlags: u8,
        };
    };
};
// --------------------------------------------------------
// Type: MOF_FIELD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MOF_FIELD = extern struct {
    DataPtr: u64,
    Length: u32,
    DataType: u32,
};
// --------------------------------------------------------
// Type: TRACE_LOGFILE_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRACE_LOGFILE_HEADER = extern struct {
    BufferSize: u32,
    Anonymous1: _Anonymous1_e__Union,
    ProviderVersion: u32,
    NumberOfProcessors: u32,
    EndTime: LARGE_INTEGER,
    TimerResolution: u32,
    MaximumFileSize: u32,
    LogFileMode: u32,
    BuffersWritten: u32,
    Anonymous2: _Anonymous2_e__Union,
    LoggerName: ?*u16,
    LogFileName: ?*u16,
    TimeZone: TIME_ZONE_INFORMATION,
    BootTime: LARGE_INTEGER,
    PerfFreq: LARGE_INTEGER,
    StartTime: LARGE_INTEGER,
    ReservedFlags: u32,
    BuffersLost: u32,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            StartBuffers: u32,
            PointerSize: u32,
            EventsLost: u32,
            CpuSpeedInMHz: u32,
        };
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _VersionDetail_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _VersionDetail_e__Struct = extern struct {
            MajorVersion: u8,
            MinorVersion: u8,
            SubVersion: u8,
            SubMinorVersion: u8,
        };
    };
};
// --------------------------------------------------------
// Type: TRACE_LOGFILE_HEADER32
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRACE_LOGFILE_HEADER32 = extern struct {
    BufferSize: u32,
    Anonymous1: _Anonymous1_e__Union,
    ProviderVersion: u32,
    NumberOfProcessors: u32,
    EndTime: LARGE_INTEGER,
    TimerResolution: u32,
    MaximumFileSize: u32,
    LogFileMode: u32,
    BuffersWritten: u32,
    Anonymous2: _Anonymous2_e__Union,
    LoggerName: u32,
    LogFileName: u32,
    TimeZone: TIME_ZONE_INFORMATION,
    BootTime: LARGE_INTEGER,
    PerfFreq: LARGE_INTEGER,
    StartTime: LARGE_INTEGER,
    ReservedFlags: u32,
    BuffersLost: u32,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            StartBuffers: u32,
            PointerSize: u32,
            EventsLost: u32,
            CpuSpeedInMHz: u32,
        };
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _VersionDetail_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _VersionDetail_e__Struct = extern struct {
            MajorVersion: u8,
            MinorVersion: u8,
            SubVersion: u8,
            SubMinorVersion: u8,
        };
    };
};
// --------------------------------------------------------
// Type: TRACE_LOGFILE_HEADER64
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRACE_LOGFILE_HEADER64 = extern struct {
    BufferSize: u32,
    Anonymous1: _Anonymous1_e__Union,
    ProviderVersion: u32,
    NumberOfProcessors: u32,
    EndTime: LARGE_INTEGER,
    TimerResolution: u32,
    MaximumFileSize: u32,
    LogFileMode: u32,
    BuffersWritten: u32,
    Anonymous2: _Anonymous2_e__Union,
    LoggerName: u64,
    LogFileName: u64,
    TimeZone: TIME_ZONE_INFORMATION,
    BootTime: LARGE_INTEGER,
    PerfFreq: LARGE_INTEGER,
    StartTime: LARGE_INTEGER,
    ReservedFlags: u32,
    BuffersLost: u32,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            StartBuffers: u32,
            PointerSize: u32,
            EventsLost: u32,
            CpuSpeedInMHz: u32,
        };
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _VersionDetail_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _VersionDetail_e__Struct = extern struct {
            MajorVersion: u8,
            MinorVersion: u8,
            SubVersion: u8,
            SubMinorVersion: u8,
        };
    };
};
// --------------------------------------------------------
// Type: EVENT_INSTANCE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_INSTANCE_INFO = extern struct {
    RegHandle: HANDLE,
    InstanceId: u32,
};
// --------------------------------------------------------
// Type: EVENT_TRACE_PROPERTIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_TRACE_PROPERTIES = extern struct {
    Wnode: WNODE_HEADER,
    BufferSize: u32,
    MinimumBuffers: u32,
    MaximumBuffers: u32,
    MaximumFileSize: u32,
    LogFileMode: u32,
    FlushTimer: u32,
    EnableFlags: u32,
    Anonymous: _Anonymous_e__Union,
    NumberOfBuffers: u32,
    FreeBuffers: u32,
    EventsLost: u32,
    BuffersWritten: u32,
    LogBuffersLost: u32,
    RealTimeBuffersLost: u32,
    LoggerThreadId: HANDLE,
    LogFileNameOffset: u32,
    LoggerNameOffset: u32,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: EVENT_TRACE_PROPERTIES_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_TRACE_PROPERTIES_V2 = extern struct {
    Wnode: WNODE_HEADER,
    BufferSize: u32,
    MinimumBuffers: u32,
    MaximumBuffers: u32,
    MaximumFileSize: u32,
    LogFileMode: u32,
    FlushTimer: u32,
    EnableFlags: u32,
    Anonymous1: _Anonymous1_e__Union,
    NumberOfBuffers: u32,
    FreeBuffers: u32,
    EventsLost: u32,
    BuffersWritten: u32,
    LogBuffersLost: u32,
    RealTimeBuffersLost: u32,
    LoggerThreadId: HANDLE,
    LogFileNameOffset: u32,
    LoggerNameOffset: u32,
    Anonymous2: _Anonymous2_e__Union,
    FilterDescCount: u32,
    FilterDesc: ?*EVENT_FILTER_DESCRIPTOR,
    Anonymous3: _Anonymous3_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: u32,
        };
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: u32,
        };
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: TRACE_GUID_REGISTRATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRACE_GUID_REGISTRATION = extern struct {
    Guid: ?*Guid,
    RegHandle: HANDLE,
};
// --------------------------------------------------------
// Type: TRACE_GUID_PROPERTIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRACE_GUID_PROPERTIES = extern struct {
    Guid: Guid,
    GuidType: u32,
    LoggerId: u32,
    EnableLevel: u32,
    EnableFlags: u32,
    IsEnable: u8,
};
// --------------------------------------------------------
// Type: ETW_BUFFER_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ETW_BUFFER_CONTEXT = extern struct {
    Anonymous: _Anonymous_e__Union,
    LoggerId: u16,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            ProcessorNumber: u8,
            Alignment: u8,
        };
    };
};
// --------------------------------------------------------
// Type: TRACE_ENABLE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRACE_ENABLE_INFO = extern struct {
    IsEnabled: u32,
    Level: u8,
    Reserved1: u8,
    LoggerId: u16,
    EnableProperty: u32,
    Reserved2: u32,
    MatchAnyKeyword: u64,
    MatchAllKeyword: u64,
};
// --------------------------------------------------------
// Type: TRACE_PROVIDER_INSTANCE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRACE_PROVIDER_INSTANCE_INFO = extern struct {
    NextOffset: u32,
    EnableCount: u32,
    Pid: u32,
    Flags: u32,
};
// --------------------------------------------------------
// Type: TRACE_GUID_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRACE_GUID_INFO = extern struct {
    InstanceCount: u32,
    Reserved: u32,
};
// --------------------------------------------------------
// Type: PROFILE_SOURCE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROFILE_SOURCE_INFO = extern struct {
    NextEntryOffset: u32,
    Source: u32,
    MinInterval: u32,
    MaxInterval: u32,
    Reserved: u64,
    Description: ?[*]u16,
};
// --------------------------------------------------------
// Type: EVENT_TRACE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_TRACE = extern struct {
    Header: EVENT_TRACE_HEADER,
    InstanceId: u32,
    ParentInstanceId: u32,
    ParentGuid: Guid,
    MofData: ?*opaque{},
    MofLength: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PEVENT_TRACE_BUFFER_CALLBACKW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PEVENT_TRACE_BUFFER_CALLBACKW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PEVENT_TRACE_BUFFER_CALLBACKA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PEVENT_TRACE_BUFFER_CALLBACKA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PEVENT_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PEVENT_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PEVENT_RECORD_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PEVENT_RECORD_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WMIDPREQUEST
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WMIDPREQUEST = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: EVENT_TRACE_LOGFILEW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_TRACE_LOGFILEW = extern struct {
    LogFileName: ?*u16,
    LoggerName: ?*u16,
    CurrentTime: i64,
    BuffersRead: u32,
    Anonymous1: _Anonymous1_e__Union,
    CurrentEvent: EVENT_TRACE,
    LogfileHeader: TRACE_LOGFILE_HEADER,
    BufferCallback: PEVENT_TRACE_BUFFER_CALLBACKW,
    BufferSize: u32,
    Filled: u32,
    EventsLost: u32,
    Anonymous2: _Anonymous2_e__Union,
    IsKernelTrace: u32,
    Context: ?*opaque{},
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: EVENT_TRACE_LOGFILEA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_TRACE_LOGFILEA = extern struct {
    LogFileName: ?*i8,
    LoggerName: ?*i8,
    CurrentTime: i64,
    BuffersRead: u32,
    Anonymous1: _Anonymous1_e__Union,
    CurrentEvent: EVENT_TRACE,
    LogfileHeader: TRACE_LOGFILE_HEADER,
    BufferCallback: PEVENT_TRACE_BUFFER_CALLBACKA,
    BufferSize: u32,
    Filled: u32,
    EventsLost: u32,
    Anonymous2: _Anonymous2_e__Union,
    IsKernelTrace: u32,
    Context: ?*opaque{},
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: ENABLE_TRACE_PARAMETERS_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENABLE_TRACE_PARAMETERS_V1 = extern struct {
    Version: u32,
    EnableProperty: u32,
    ControlFlags: u32,
    SourceId: Guid,
    EnableFilterDesc: ?*EVENT_FILTER_DESCRIPTOR,
};
// --------------------------------------------------------
// Type: ENABLE_TRACE_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENABLE_TRACE_PARAMETERS = extern struct {
    Version: u32,
    EnableProperty: u32,
    ControlFlags: u32,
    SourceId: Guid,
    EnableFilterDesc: ?*EVENT_FILTER_DESCRIPTOR,
    FilterDescCount: u32,
};
// --------------------------------------------------------
// Type: TRACE_QUERY_INFO_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TRACE_QUERY_INFO_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: CLASSIC_EVENT_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLASSIC_EVENT_ID = extern struct {
    EventGuid: Guid,
    Type: u8,
    Reserved: ?[*]u8,
};
// --------------------------------------------------------
// Type: TRACE_PROFILE_INTERVAL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRACE_PROFILE_INTERVAL = extern struct {
    Source: u32,
    Interval: u32,
};
// --------------------------------------------------------
// Type: TRACE_VERSION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRACE_VERSION_INFO = extern struct {
    EtwTraceProcessingVersion: u32,
    Reserved: u32,
};
// --------------------------------------------------------
// Type: TRACE_PERIODIC_CAPTURE_STATE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRACE_PERIODIC_CAPTURE_STATE_INFO = extern struct {
    CaptureStateFrequencyInSeconds: u32,
    ProviderCount: u16,
    Reserved: u16,
};
// --------------------------------------------------------
// Type: ETW_PROCESS_HANDLE_INFO_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ETW_PROCESS_HANDLE_INFO_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: ETW_TRACE_PARTITION_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ETW_TRACE_PARTITION_INFORMATION = extern struct {
    PartitionId: Guid,
    ParentId: Guid,
    QpcOffsetFromRoot: i64,
    PartitionType: u32,
};
// --------------------------------------------------------
// Type: ETW_TRACE_PARTITION_INFORMATION_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ETW_TRACE_PARTITION_INFORMATION_V2 = extern struct {
    QpcOffsetFromRoot: i64,
    PartitionType: u32,
    PartitionId: ?*u16,
    ParentId: ?*u16,
};
// --------------------------------------------------------
// Type: EVENT_DATA_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_DATA_DESCRIPTOR = extern struct {
    Ptr: u64,
    Size: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            Type: u8,
            Reserved1: u8,
            Reserved2: u16,
        };
    };
};
// --------------------------------------------------------
// Type: EVENT_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_DESCRIPTOR = extern struct {
    Id: u16,
    Version: u8,
    Channel: u8,
    Level: u8,
    Opcode: u8,
    Task: u16,
    Keyword: u64,
};
// --------------------------------------------------------
// Type: EVENT_FILTER_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_FILTER_DESCRIPTOR = extern struct {
    Ptr: u64,
    Size: u32,
    Type: u32,
};
// --------------------------------------------------------
// Type: EVENT_FILTER_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_FILTER_HEADER = extern struct {
    Id: u16,
    Version: u8,
    Reserved: ?[*]u8,
    InstanceId: u64,
    Size: u32,
    NextOffset: u32,
};
// --------------------------------------------------------
// Type: EVENT_FILTER_EVENT_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_FILTER_EVENT_ID = extern struct {
    FilterIn: u8,
    Reserved: u8,
    Count: u16,
    Events: ?[*]u16,
};
// --------------------------------------------------------
// Type: EVENT_FILTER_EVENT_NAME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_FILTER_EVENT_NAME = extern struct {
    MatchAnyKeyword: u64,
    MatchAllKeyword: u64,
    Level: u8,
    FilterIn: u8,
    NameCount: u16,
    Names: ?[*]u8,
};
// --------------------------------------------------------
// Type: EVENT_FILTER_LEVEL_KW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_FILTER_LEVEL_KW = extern struct {
    MatchAnyKeyword: u64,
    MatchAllKeyword: u64,
    Level: u8,
    FilterIn: u8,
};
// --------------------------------------------------------
// Type: EVENT_INFO_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EVENT_INFO_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: PENABLECALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PENABLECALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: EVENT_HEADER_EXTENDED_DATA_ITEM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_HEADER_EXTENDED_DATA_ITEM = extern struct {
    Reserved1: u16,
    ExtType: u16,
    Anonymous: _Anonymous_e__Struct,
    DataSize: u16,
    DataPtr: u64,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        _bitfield: u16,
    };
};
// --------------------------------------------------------
// Type: EVENT_EXTENDED_ITEM_INSTANCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_EXTENDED_ITEM_INSTANCE = extern struct {
    InstanceId: u32,
    ParentInstanceId: u32,
    ParentGuid: Guid,
};
// --------------------------------------------------------
// Type: EVENT_EXTENDED_ITEM_RELATED_ACTIVITYID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_EXTENDED_ITEM_RELATED_ACTIVITYID = extern struct {
    RelatedActivityId: Guid,
};
// --------------------------------------------------------
// Type: EVENT_EXTENDED_ITEM_TS_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_EXTENDED_ITEM_TS_ID = extern struct {
    SessionId: u32,
};
// --------------------------------------------------------
// Type: EVENT_EXTENDED_ITEM_STACK_TRACE32
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_EXTENDED_ITEM_STACK_TRACE32 = extern struct {
    MatchId: u64,
    Address: ?[*]u32,
};
// --------------------------------------------------------
// Type: EVENT_EXTENDED_ITEM_STACK_TRACE64
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_EXTENDED_ITEM_STACK_TRACE64 = extern struct {
    MatchId: u64,
    Address: ?[*]u64,
};
// --------------------------------------------------------
// Type: EVENT_EXTENDED_ITEM_PEBS_INDEX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_EXTENDED_ITEM_PEBS_INDEX = extern struct {
    PebsIndex: u64,
};
// --------------------------------------------------------
// Type: EVENT_EXTENDED_ITEM_PMC_COUNTERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_EXTENDED_ITEM_PMC_COUNTERS = extern struct {
    Counter: ?[*]u64,
};
// --------------------------------------------------------
// Type: EVENT_EXTENDED_ITEM_PROCESS_START_KEY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_EXTENDED_ITEM_PROCESS_START_KEY = extern struct {
    ProcessStartKey: u64,
};
// --------------------------------------------------------
// Type: EVENT_EXTENDED_ITEM_EVENT_KEY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_EXTENDED_ITEM_EVENT_KEY = extern struct {
    Key: u64,
};
// --------------------------------------------------------
// Type: EVENT_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_HEADER = extern struct {
    Size: u16,
    HeaderType: u16,
    Flags: u16,
    EventProperty: u16,
    ThreadId: u32,
    ProcessId: u32,
    TimeStamp: LARGE_INTEGER,
    ProviderId: Guid,
    EventDescriptor: EVENT_DESCRIPTOR,
    Anonymous: _Anonymous_e__Union,
    ActivityId: Guid,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            KernelTime: u32,
            UserTime: u32,
        };
    };
};
// --------------------------------------------------------
// Type: EVENT_RECORD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_RECORD = extern struct {
    EventHeader: EVENT_HEADER,
    BufferContext: ETW_BUFFER_CONTEXT,
    ExtendedDataCount: u16,
    UserDataLength: u16,
    ExtendedData: ?*EVENT_HEADER_EXTENDED_DATA_ITEM,
    UserData: ?*opaque{},
    UserContext: ?*opaque{},
};
// --------------------------------------------------------
// Type: ETW_PROVIDER_TRAIT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ETW_PROVIDER_TRAIT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: EVENTSECURITYOPERATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EVENTSECURITYOPERATION = *opaque{
};
// --------------------------------------------------------
// Type: EVENT_MAP_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_MAP_ENTRY = extern struct {
    OutputOffset: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: MAP_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MAP_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: MAP_VALUETYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MAP_VALUETYPE = *opaque{
};
// --------------------------------------------------------
// Type: EVENT_MAP_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_MAP_INFO = extern struct {
    NameOffset: u32,
    Flag: MAP_FLAGS,
    EntryCount: u32,
    Anonymous: _Anonymous_e__Union,
    MapEntryArray: ?[*]EVENT_MAP_ENTRY,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: _TDH_IN_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _TDH_IN_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: _TDH_OUT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const _TDH_OUT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: PROPERTY_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PROPERTY_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: EVENT_PROPERTY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EVENT_PROPERTY_INFO = extern struct {
    Flags: PROPERTY_FLAGS,
    NameOffset: u32,
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    Anonymous3: _Anonymous3_e__Union,
    Anonymous4: _Anonymous4_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous4_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous4_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: u32,
        };
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _structType
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _structType = extern struct {
            StructStartIndex: u16,
            NumOfStructMembers: u16,
            padding: u32,
        };
        // --------------------------------------------------------
        // Type: _nonStructType
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _nonStructType = extern struct {
            InType: u16,
            OutType: u16,
            MapNameOffset: u32,
        };
        // --------------------------------------------------------
        // Type: _customSchemaType
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _customSchemaType = extern struct {
            InType: u16,
            OutType: u16,
            CustomSchemaOffset: u32,
        };
    };
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: DECODING_SOURCE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DECODING_SOURCE = *opaque{
};
// --------------------------------------------------------
// Type: TEMPLATE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TEMPLATE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: TRACE_EVENT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRACE_EVENT_INFO = extern struct {
    ProviderGuid: Guid,
    EventGuid: Guid,
    EventDescriptor: EVENT_DESCRIPTOR,
    DecodingSource: DECODING_SOURCE,
    ProviderNameOffset: u32,
    LevelNameOffset: u32,
    ChannelNameOffset: u32,
    KeywordsNameOffset: u32,
    TaskNameOffset: u32,
    OpcodeNameOffset: u32,
    EventMessageOffset: u32,
    ProviderMessageOffset: u32,
    BinaryXMLOffset: u32,
    BinaryXMLSize: u32,
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    PropertyCount: u32,
    TopLevelPropertyCount: u32,
    Anonymous3: _Anonymous3_e__Union,
    EventPropertyInfoArray: ?[*]EVENT_PROPERTY_INFO,
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: u32,
        };
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PROPERTY_DATA_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROPERTY_DATA_DESCRIPTOR = extern struct {
    PropertyName: u64,
    ArrayIndex: u32,
    Reserved: u32,
};
// --------------------------------------------------------
// Type: PAYLOAD_OPERATOR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PAYLOAD_OPERATOR = *opaque{
};
// --------------------------------------------------------
// Type: PAYLOAD_FILTER_PREDICATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PAYLOAD_FILTER_PREDICATE = extern struct {
    FieldName: ?*u16,
    CompareOp: u16,
    Value: ?*u16,
};
// --------------------------------------------------------
// Type: PROVIDER_FILTER_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROVIDER_FILTER_INFO = extern struct {
    Id: u8,
    Version: u8,
    MessageOffset: u32,
    Reserved: u32,
    PropertyCount: u32,
    EventPropertyInfoArray: ?[*]EVENT_PROPERTY_INFO,
};
// --------------------------------------------------------
// Type: EVENT_FIELD_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EVENT_FIELD_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: PROVIDER_FIELD_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROVIDER_FIELD_INFO = extern struct {
    NameOffset: u32,
    DescriptionOffset: u32,
    Value: u64,
};
// --------------------------------------------------------
// Type: PROVIDER_FIELD_INFOARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROVIDER_FIELD_INFOARRAY = extern struct {
    NumberOfElements: u32,
    FieldType: EVENT_FIELD_TYPE,
    FieldInfoArray: ?[*]PROVIDER_FIELD_INFO,
};
// --------------------------------------------------------
// Type: TRACE_PROVIDER_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRACE_PROVIDER_INFO = extern struct {
    ProviderGuid: Guid,
    SchemaSource: u32,
    ProviderNameOffset: u32,
};
// --------------------------------------------------------
// Type: PROVIDER_ENUMERATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROVIDER_ENUMERATION_INFO = extern struct {
    NumberOfProviders: u32,
    Reserved: u32,
    TraceProviderInfoArray: ?[*]TRACE_PROVIDER_INFO,
};
// --------------------------------------------------------
// Type: PROVIDER_EVENT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PROVIDER_EVENT_INFO = extern struct {
    NumberOfEvents: u32,
    Reserved: u32,
    EventDescriptorsArray: ?[*]EVENT_DESCRIPTOR,
};
// --------------------------------------------------------
// Type: TDH_CONTEXT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TDH_CONTEXT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: TDH_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TDH_CONTEXT = extern struct {
    ParameterValue: u64,
    ParameterType: TDH_CONTEXT_TYPE,
    ParameterSize: u32,
};
// --------------------------------------------------------
// Type: CTraceRelogger
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CTraceRelogger = opaque {
};
// --------------------------------------------------------
// Type: ITraceEvent
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITraceEvent = *opaque{
    // TODO: Method 'Clone'
    // TODO: Method 'GetUserContext'
    // TODO: Method 'GetEventRecord'
    // TODO: Method 'SetPayload'
    // TODO: Method 'SetEventDescriptor'
    // TODO: Method 'SetProcessId'
    // TODO: Method 'SetProcessorIndex'
    // TODO: Method 'SetThreadId'
    // TODO: Method 'SetThreadTimes'
    // TODO: Method 'SetActivityId'
    // TODO: Method 'SetTimeStamp'
    // TODO: Method 'SetProviderId'
};
// --------------------------------------------------------
// Type: ITraceEventCallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITraceEventCallback = *opaque{
    // TODO: Method 'OnBeginProcessTrace'
    // TODO: Method 'OnFinalizeProcessTrace'
    // TODO: Method 'OnEvent'
};
// --------------------------------------------------------
// Type: ITraceRelogger
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const ITraceRelogger = *opaque{
    // TODO: Method 'AddLogfileTraceStream'
    // TODO: Method 'AddRealtimeTraceStream'
    // TODO: Method 'RegisterCallback'
    // TODO: Method 'Inject'
    // TODO: Method 'CreateEventInstance'
    // TODO: Method 'ProcessTrace'
    // TODO: Method 'SetOutputFilename'
    // TODO: Method 'SetCompressionMode'
    // TODO: Method 'Cancel'
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn StartTraceW(
    TraceHandle: ?*u64,
    InstanceName: ?*u16,
    Properties: ?*EVENT_TRACE_PROPERTIES,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn StartTraceA(
    TraceHandle: ?*u64,
    InstanceName: ?*i8,
    Properties: ?*EVENT_TRACE_PROPERTIES,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn StopTraceW(
    TraceHandle: u64,
    InstanceName: ?*u16,
    Properties: ?*EVENT_TRACE_PROPERTIES,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn StopTraceA(
    TraceHandle: u64,
    InstanceName: ?*i8,
    Properties: ?*EVENT_TRACE_PROPERTIES,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn QueryTraceW(
    TraceHandle: u64,
    InstanceName: ?*u16,
    Properties: ?*EVENT_TRACE_PROPERTIES,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn QueryTraceA(
    TraceHandle: u64,
    InstanceName: ?*i8,
    Properties: ?*EVENT_TRACE_PROPERTIES,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn UpdateTraceW(
    TraceHandle: u64,
    InstanceName: ?*u16,
    Properties: ?*EVENT_TRACE_PROPERTIES,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn UpdateTraceA(
    TraceHandle: u64,
    InstanceName: ?*i8,
    Properties: ?*EVENT_TRACE_PROPERTIES,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn FlushTraceW(
    TraceHandle: u64,
    InstanceName: ?*u16,
    Properties: ?*EVENT_TRACE_PROPERTIES,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn FlushTraceA(
    TraceHandle: u64,
    InstanceName: ?*i8,
    Properties: ?*EVENT_TRACE_PROPERTIES,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn ControlTraceW(
    TraceHandle: u64,
    InstanceName: ?*u16,
    Properties: ?*EVENT_TRACE_PROPERTIES,
    ControlCode: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn ControlTraceA(
    TraceHandle: u64,
    InstanceName: ?*i8,
    Properties: ?*EVENT_TRACE_PROPERTIES,
    ControlCode: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn QueryAllTracesW(
    PropertyArray: ?*?*EVENT_TRACE_PROPERTIES,
    PropertyArrayCount: u32,
    LoggerCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn QueryAllTracesA(
    PropertyArray: ?*?*EVENT_TRACE_PROPERTIES,
    PropertyArrayCount: u32,
    LoggerCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn EnableTrace(
    Enable: u32,
    EnableFlag: u32,
    EnableLevel: u32,
    ControlGuid: ?*Guid,
    TraceHandle: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn EnableTraceEx(
    ProviderId: ?*Guid,
    SourceId: ?*Guid,
    TraceHandle: u64,
    IsEnabled: u32,
    Level: u8,
    MatchAnyKeyword: u64,
    MatchAllKeyword: u64,
    EnableProperty: u32,
    EnableFilterDesc: ?*EVENT_FILTER_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn EnableTraceEx2(
    TraceHandle: u64,
    ProviderId: ?*Guid,
    ControlCode: u32,
    Level: u8,
    MatchAnyKeyword: u64,
    MatchAllKeyword: u64,
    Timeout: u32,
    EnableParameters: ?*ENABLE_TRACE_PARAMETERS,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn EnumerateTraceGuidsEx(
    TraceQueryInfoClass: TRACE_QUERY_INFO_CLASS,
    InBuffer: ?*opaque{},
    InBufferSize: u32,
    OutBuffer: ?*opaque{},
    OutBufferSize: u32,
    ReturnLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn TraceSetInformation(
    SessionHandle: u64,
    InformationClass: TRACE_QUERY_INFO_CLASS,
    TraceInformation: ?*opaque{},
    InformationLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn TraceQueryInformation(
    SessionHandle: u64,
    InformationClass: TRACE_QUERY_INFO_CLASS,
    TraceInformation: ?*opaque{},
    InformationLength: u32,
    ReturnLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn CreateTraceInstanceId(
    RegHandle: HANDLE,
    InstInfo: ?*EVENT_INSTANCE_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn TraceEvent(
    TraceHandle: u64,
    EventTrace: ?*EVENT_TRACE_HEADER,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn TraceEventInstance(
    TraceHandle: u64,
    EventTrace: ?*EVENT_INSTANCE_HEADER,
    InstInfo: ?*EVENT_INSTANCE_INFO,
    ParentInstInfo: ?*EVENT_INSTANCE_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegisterTraceGuidsW(
    RequestAddress: WMIDPREQUEST,
    RequestContext: ?*opaque{},
    ControlGuid: ?*Guid,
    GuidCount: u32,
    TraceGuidReg: ?*TRACE_GUID_REGISTRATION,
    MofImagePath: ?*u16,
    MofResourceName: ?*u16,
    RegistrationHandle: ?*u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RegisterTraceGuidsA(
    RequestAddress: WMIDPREQUEST,
    RequestContext: ?*opaque{},
    ControlGuid: ?*Guid,
    GuidCount: u32,
    TraceGuidReg: ?*TRACE_GUID_REGISTRATION,
    MofImagePath: ?*i8,
    MofResourceName: ?*i8,
    RegistrationHandle: ?*u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn EnumerateTraceGuids(
    GuidPropertiesArray: ?*?*TRACE_GUID_PROPERTIES,
    PropertyArrayCount: u32,
    GuidCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn UnregisterTraceGuids(
    RegistrationHandle: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetTraceLoggerHandle(
    Buffer: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u64;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetTraceEnableLevel(
    TraceHandle: u64,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn GetTraceEnableFlags(
    TraceHandle: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn OpenTraceW(
    Logfile: ?*EVENT_TRACE_LOGFILEW,
) callconv(@import("std").os.windows.WINAPI) u64;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn ProcessTrace(
    HandleArray: ?*u64,
    HandleCount: u32,
    StartTime: ?*FILETIME,
    EndTime: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn CloseTrace(
    TraceHandle: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn QueryTraceProcessingHandle(
    ProcessingHandle: u64,
    InformationClass: ETW_PROCESS_HANDLE_INFO_TYPE,
    InBuffer: ?*opaque{},
    InBufferSize: u32,
    OutBuffer: ?*opaque{},
    OutBufferSize: u32,
    ReturnLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn OpenTraceA(
    Logfile: ?*EVENT_TRACE_LOGFILEA,
) callconv(@import("std").os.windows.WINAPI) u64;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn SetTraceCallback(
    pGuid: ?*Guid,
    EventCallback: PEVENT_CALLBACK,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RemoveTraceCallback(
    pGuid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn TraceMessage(
    LoggerHandle: u64,
    MessageFlags: u32,
    MessageGuid: ?*Guid,
    MessageNumber: u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn TraceMessageVa(
    LoggerHandle: u64,
    MessageFlags: u32,
    MessageGuid: ?*Guid,
    MessageNumber: u16,
    MessageArgList: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn EventRegister(
    ProviderId: ?*Guid,
    EnableCallback: PENABLECALLBACK,
    CallbackContext: ?*opaque{},
    RegHandle: ?*u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn EventUnregister(
    RegHandle: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn EventSetInformation(
    RegHandle: u64,
    InformationClass: EVENT_INFO_CLASS,
    EventInformation: ?*opaque{},
    InformationLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn EventEnabled(
    RegHandle: u64,
    EventDescriptor: ?*EVENT_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn EventProviderEnabled(
    RegHandle: u64,
    Level: u8,
    Keyword: u64,
) callconv(@import("std").os.windows.WINAPI) u8;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn EventWrite(
    RegHandle: u64,
    EventDescriptor: ?*EVENT_DESCRIPTOR,
    UserDataCount: u32,
    UserData: ?*EVENT_DATA_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn EventWriteTransfer(
    RegHandle: u64,
    EventDescriptor: ?*EVENT_DESCRIPTOR,
    ActivityId: ?*Guid,
    RelatedActivityId: ?*Guid,
    UserDataCount: u32,
    UserData: ?*EVENT_DATA_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn EventWriteEx(
    RegHandle: u64,
    EventDescriptor: ?*EVENT_DESCRIPTOR,
    Filter: u64,
    Flags: u32,
    ActivityId: ?*Guid,
    RelatedActivityId: ?*Guid,
    UserDataCount: u32,
    UserData: ?*EVENT_DATA_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn EventWriteString(
    RegHandle: u64,
    Level: u8,
    Keyword: u64,
    String: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn EventActivityIdControl(
    ControlCode: u32,
    ActivityId: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn EventAccessControl(
    Guid: ?*Guid,
    Operation: u32,
    Sid: ?*opaque{},
    Rights: u32,
    AllowOrDeny: u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn EventAccessQuery(
    Guid: ?*Guid,
    Buffer: ?*opaque{},
    BufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn EventAccessRemove(
    Guid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "tdh" fn TdhCreatePayloadFilter(
    ProviderGuid: ?*Guid,
    EventDescriptor: ?*EVENT_DESCRIPTOR,
    EventMatchANY: u8,
    PayloadPredicateCount: u32,
    PayloadPredicates: ?*PAYLOAD_FILTER_PREDICATE,
    PayloadFilter: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "tdh" fn TdhDeletePayloadFilter(
    PayloadFilter: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "tdh" fn TdhAggregatePayloadFilters(
    PayloadFilterCount: u32,
    PayloadFilterPtrs: ?*?*opaque{},
    EventMatchALLFlags: ?*u8,
    EventFilterDescriptor: ?*EVENT_FILTER_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "tdh" fn TdhCleanupPayloadEventFilterDescriptor(
    EventFilterDescriptor: ?*EVENT_FILTER_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TDH" fn TdhGetEventInformation(
    Event: ?*EVENT_RECORD,
    TdhContextCount: u32,
    TdhContext: ?*TDH_CONTEXT,
    Buffer: ?*TRACE_EVENT_INFO,
    BufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TDH" fn TdhGetEventMapInformation(
    pEvent: ?*EVENT_RECORD,
    pMapName: ?*u16,
    pBuffer: ?*EVENT_MAP_INFO,
    pBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TDH" fn TdhGetPropertySize(
    pEvent: ?*EVENT_RECORD,
    TdhContextCount: u32,
    pTdhContext: ?*TDH_CONTEXT,
    PropertyDataCount: u32,
    pPropertyData: ?*PROPERTY_DATA_DESCRIPTOR,
    pPropertySize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TDH" fn TdhGetProperty(
    pEvent: ?*EVENT_RECORD,
    TdhContextCount: u32,
    pTdhContext: ?*TDH_CONTEXT,
    PropertyDataCount: u32,
    pPropertyData: ?*PROPERTY_DATA_DESCRIPTOR,
    BufferSize: u32,
    pBuffer: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TDH" fn TdhEnumerateProviders(
    pBuffer: ?*PROVIDER_ENUMERATION_INFO,
    pBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TDH" fn TdhQueryProviderFieldInformation(
    pGuid: ?*Guid,
    EventFieldValue: u64,
    EventFieldType: EVENT_FIELD_TYPE,
    pBuffer: ?*PROVIDER_FIELD_INFOARRAY,
    pBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TDH" fn TdhEnumerateProviderFieldInformation(
    pGuid: ?*Guid,
    EventFieldType: EVENT_FIELD_TYPE,
    pBuffer: ?*PROVIDER_FIELD_INFOARRAY,
    pBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "tdh" fn TdhEnumerateProviderFilters(
    Guid: ?*Guid,
    TdhContextCount: u32,
    TdhContext: ?*TDH_CONTEXT,
    FilterCount: ?*u32,
    Buffer: ?*?*PROVIDER_FILTER_INFO,
    BufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TDH" fn TdhLoadManifest(
    Manifest: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TDH" fn TdhLoadManifestFromMemory(
    pData: ?*opaque{},
    cbData: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TDH" fn TdhUnloadManifest(
    Manifest: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TDH" fn TdhUnloadManifestFromMemory(
    pData: ?*opaque{},
    cbData: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TDH" fn TdhFormatProperty(
    EventInfo: ?*TRACE_EVENT_INFO,
    MapInfo: ?*EVENT_MAP_INFO,
    PointerSize: u32,
    PropertyInType: u16,
    PropertyOutType: u16,
    PropertyLength: u16,
    UserDataLength: u16,
    UserData: ?*u8,
    BufferSize: ?*u32,
    Buffer: ?*u16,
    UserDataConsumed: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "tdh" fn TdhOpenDecodingHandle(
    Handle: ?*TDH_HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "tdh" fn TdhSetDecodingParameter(
    Handle: TDH_HANDLE,
    TdhContext: ?*TDH_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "tdh" fn TdhGetDecodingParameter(
    Handle: TDH_HANDLE,
    TdhContext: ?*TDH_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "tdh" fn TdhGetWppProperty(
    Handle: TDH_HANDLE,
    EventRecord: ?*EVENT_RECORD,
    PropertyName: ?*u16,
    BufferSize: ?*u32,
    Buffer: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "tdh" fn TdhGetWppMessage(
    Handle: TDH_HANDLE,
    EventRecord: ?*EVENT_RECORD,
    BufferSize: ?*u32,
    Buffer: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "tdh" fn TdhCloseDecodingHandle(
    Handle: TDH_HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "tdh" fn TdhLoadManifestFromBinary(
    BinaryPath: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TDH" fn TdhEnumerateManifestProviderEvents(
    ProviderGuid: ?*Guid,
    Buffer: ?*PROVIDER_EVENT_INFO,
    BufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "TDH" fn TdhGetManifestEventInformation(
    ProviderGuid: ?*Guid,
    EventDescriptor: ?*EVENT_DESCRIPTOR,
    Buffer: ?*TRACE_EVENT_INFO,
    BufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn CveEventWrite(
    CveId: ?*u16,
    AdditionalDetails: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const PEVENT_TRACE_BUFFER_CALLBACK = PEVENT_TRACE_BUFFER_CALLBACKA;
        pub const EVENT_TRACE_LOGFILE = EVENT_TRACE_LOGFILEA;
        pub const StartTrace = StartTraceA;
        pub const StopTrace = StopTraceA;
        pub const QueryTrace = QueryTraceA;
        pub const UpdateTrace = UpdateTraceA;
        pub const FlushTrace = FlushTraceA;
        pub const ControlTrace = ControlTraceA;
        pub const QueryAllTraces = QueryAllTracesA;
        pub const RegisterTraceGuids = RegisterTraceGuidsA;
        pub const OpenTrace = OpenTraceA;
    },
    .wide => struct {
        pub const PEVENT_TRACE_BUFFER_CALLBACK = PEVENT_TRACE_BUFFER_CALLBACKW;
        pub const EVENT_TRACE_LOGFILE = EVENT_TRACE_LOGFILEW;
        pub const StartTrace = StartTraceW;
        pub const StopTrace = StopTraceW;
        pub const QueryTrace = QueryTraceW;
        pub const UpdateTrace = UpdateTraceW;
        pub const FlushTrace = FlushTraceW;
        pub const ControlTrace = ControlTraceW;
        pub const QueryAllTraces = QueryAllTracesW;
        pub const RegisterTraceGuids = RegisterTraceGuidsW;
        pub const OpenTrace = OpenTraceW;
    },
    else => if (@import("builtin").is_test) struct {
        pub const PEVENT_TRACE_BUFFER_CALLBACK = *opaque{};
        pub const EVENT_TRACE_LOGFILE = *opaque{};
        pub const StartTrace = *opaque{};
        pub const StopTrace = *opaque{};
        pub const QueryTrace = *opaque{};
        pub const UpdateTrace = *opaque{};
        pub const FlushTrace = *opaque{};
        pub const ControlTrace = *opaque{};
        pub const QueryAllTraces = *opaque{};
        pub const RegisterTraceGuids = *opaque{};
        pub const OpenTrace = *opaque{};
    } else struct {
        pub const PEVENT_TRACE_BUFFER_CALLBACK = @compileError("'PEVENT_TRACE_BUFFER_CALLBACK' requires that UNICODE be set to true or false in the root module");
        pub const EVENT_TRACE_LOGFILE = @compileError("'EVENT_TRACE_LOGFILE' requires that UNICODE be set to true or false in the root module");
        pub const StartTrace = @compileError("'StartTrace' requires that UNICODE be set to true or false in the root module");
        pub const StopTrace = @compileError("'StopTrace' requires that UNICODE be set to true or false in the root module");
        pub const QueryTrace = @compileError("'QueryTrace' requires that UNICODE be set to true or false in the root module");
        pub const UpdateTrace = @compileError("'UpdateTrace' requires that UNICODE be set to true or false in the root module");
        pub const FlushTrace = @compileError("'FlushTrace' requires that UNICODE be set to true or false in the root module");
        pub const ControlTrace = @compileError("'ControlTrace' requires that UNICODE be set to true or false in the root module");
        pub const QueryAllTraces = @compileError("'QueryAllTraces' requires that UNICODE be set to true or false in the root module");
        pub const RegisterTraceGuids = @compileError("'RegisterTraceGuids' requires that UNICODE be set to true or false in the root module");
        pub const OpenTrace = @compileError("'OpenTrace' requires that UNICODE be set to true or false in the root module");
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const LARGE_INTEGER = @import("systemservices.zig").LARGE_INTEGER;
const TIME_ZONE_INFORMATION = @import("windowsprogramming.zig").TIME_ZONE_INFORMATION;
const HANDLE = @import("systemservices.zig").HANDLE;
const FILETIME = @import("windowsprogramming.zig").FILETIME;

test "" {
    const constant_export_count = 0;
    const type_export_count = 98;
    const func_count = 79;
    const unicode_alias_count = 11;
    const type_import_count = 5;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
