//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: DOT11_BSS_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_BSS_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_SSID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_SSID = extern struct {
    uSSIDLength: u32,
    ucSSID: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_AUTH_ALGORITHM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_AUTH_ALGORITHM = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_CIPHER_ALGORITHM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_CIPHER_ALGORITHM = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_AUTH_CIPHER_PAIR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_AUTH_CIPHER_PAIR = extern struct {
    AuthAlgoId: DOT11_AUTH_ALGORITHM,
    CipherAlgoId: DOT11_CIPHER_ALGORITHM,
};
// --------------------------------------------------------
// Type: DOT11_OI
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_OI = extern struct {
    OILength: u16,
    OI: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_ACCESSNETWORKOPTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_ACCESSNETWORKOPTIONS = extern struct {
    AccessNetworkType: u8,
    Internet: u8,
    ASRA: u8,
    ESR: u8,
    UESA: u8,
};
// --------------------------------------------------------
// Type: DOT11_VENUEINFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_VENUEINFO = extern struct {
    VenueGroup: u8,
    VenueType: u8,
};
// --------------------------------------------------------
// Type: NDIS_STATISTICS_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_STATISTICS_VALUE = extern struct {
    Oid: u32,
    DataLength: u32,
    Data: ?[*]u8,
};
// --------------------------------------------------------
// Type: NDIS_STATISTICS_VALUE_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_STATISTICS_VALUE_EX = extern struct {
    Oid: u32,
    DataLength: u32,
    Length: u32,
    Data: ?[*]u8,
};
// --------------------------------------------------------
// Type: NDIS_VAR_DATA_DESC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_VAR_DATA_DESC = extern struct {
    Length: u16,
    MaximumLength: u16,
    Offset: ?*opaque{},
};
// --------------------------------------------------------
// Type: NDIS_OBJECT_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_OBJECT_HEADER = extern struct {
    Type: u8,
    Revision: u8,
    Size: u16,
};
// --------------------------------------------------------
// Type: NDIS_REQUEST_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_REQUEST_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: NDIS_STATISTICS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_STATISTICS_INFO = extern struct {
    Header: NDIS_OBJECT_HEADER,
    SupportedStatistics: u32,
    ifInDiscards: u64,
    ifInErrors: u64,
    ifHCInOctets: u64,
    ifHCInUcastPkts: u64,
    ifHCInMulticastPkts: u64,
    ifHCInBroadcastPkts: u64,
    ifHCOutOctets: u64,
    ifHCOutUcastPkts: u64,
    ifHCOutMulticastPkts: u64,
    ifHCOutBroadcastPkts: u64,
    ifOutErrors: u64,
    ifOutDiscards: u64,
    ifHCInUcastOctets: u64,
    ifHCInMulticastOctets: u64,
    ifHCInBroadcastOctets: u64,
    ifHCOutUcastOctets: u64,
    ifHCOutMulticastOctets: u64,
    ifHCOutBroadcastOctets: u64,
};
// --------------------------------------------------------
// Type: NDIS_INTERRUPT_MODERATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_INTERRUPT_MODERATION = *opaque{
};
// --------------------------------------------------------
// Type: NDIS_INTERRUPT_MODERATION_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_INTERRUPT_MODERATION_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Flags: u32,
    InterruptModeration: NDIS_INTERRUPT_MODERATION,
};
// --------------------------------------------------------
// Type: NDIS_TIMEOUT_DPC_REQUEST_CAPABILITIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_TIMEOUT_DPC_REQUEST_CAPABILITIES = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Flags: u32,
    TimeoutArrayLength: u32,
    TimeoutArray: ?[*]u32,
};
// --------------------------------------------------------
// Type: NDIS_PCI_DEVICE_CUSTOM_PROPERTIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_PCI_DEVICE_CUSTOM_PROPERTIES = extern struct {
    Header: NDIS_OBJECT_HEADER,
    DeviceType: u32,
    CurrentSpeedAndMode: u32,
    CurrentPayloadSize: u32,
    MaxPayloadSize: u32,
    MaxReadRequestSize: u32,
    CurrentLinkSpeed: u32,
    CurrentLinkWidth: u32,
    MaxLinkSpeed: u32,
    MaxLinkWidth: u32,
    PciExpressVersion: u32,
    InterruptType: u32,
    MaxInterruptMessages: u32,
};
// --------------------------------------------------------
// Type: NDIS_802_11_STATUS_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_802_11_STATUS_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: NDIS_802_11_STATUS_INDICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_802_11_STATUS_INDICATION = extern struct {
    StatusType: NDIS_802_11_STATUS_TYPE,
};
// --------------------------------------------------------
// Type: NDIS_802_11_AUTHENTICATION_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_802_11_AUTHENTICATION_REQUEST = extern struct {
    Length: u32,
    Bssid: ?[*]u8,
    Flags: u32,
};
// --------------------------------------------------------
// Type: PMKID_CANDIDATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PMKID_CANDIDATE = extern struct {
    BSSID: ?[*]u8,
    Flags: u32,
};
// --------------------------------------------------------
// Type: NDIS_802_11_PMKID_CANDIDATE_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_802_11_PMKID_CANDIDATE_LIST = extern struct {
    Version: u32,
    NumCandidates: u32,
    CandidateList: ?[*]PMKID_CANDIDATE,
};
// --------------------------------------------------------
// Type: NDIS_802_11_NETWORK_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_802_11_NETWORK_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: NDIS_802_11_NETWORK_TYPE_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_802_11_NETWORK_TYPE_LIST = extern struct {
    NumberOfItems: u32,
    NetworkType: ?[*]NDIS_802_11_NETWORK_TYPE,
};
// --------------------------------------------------------
// Type: NDIS_802_11_POWER_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_802_11_POWER_MODE = *opaque{
};
// --------------------------------------------------------
// Type: NDIS_802_11_CONFIGURATION_FH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_802_11_CONFIGURATION_FH = extern struct {
    Length: u32,
    HopPattern: u32,
    HopSet: u32,
    DwellTime: u32,
};
// --------------------------------------------------------
// Type: NDIS_802_11_CONFIGURATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_802_11_CONFIGURATION = extern struct {
    Length: u32,
    BeaconPeriod: u32,
    ATIMWindow: u32,
    DSConfig: u32,
    FHConfig: NDIS_802_11_CONFIGURATION_FH,
};
// --------------------------------------------------------
// Type: NDIS_802_11_STATISTICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_802_11_STATISTICS = extern struct {
    Length: u32,
    TransmittedFragmentCount: LARGE_INTEGER,
    MulticastTransmittedFrameCount: LARGE_INTEGER,
    FailedCount: LARGE_INTEGER,
    RetryCount: LARGE_INTEGER,
    MultipleRetryCount: LARGE_INTEGER,
    RTSSuccessCount: LARGE_INTEGER,
    RTSFailureCount: LARGE_INTEGER,
    ACKFailureCount: LARGE_INTEGER,
    FrameDuplicateCount: LARGE_INTEGER,
    ReceivedFragmentCount: LARGE_INTEGER,
    MulticastReceivedFrameCount: LARGE_INTEGER,
    FCSErrorCount: LARGE_INTEGER,
    TKIPLocalMICFailures: LARGE_INTEGER,
    TKIPICVErrorCount: LARGE_INTEGER,
    TKIPCounterMeasuresInvoked: LARGE_INTEGER,
    TKIPReplays: LARGE_INTEGER,
    CCMPFormatErrors: LARGE_INTEGER,
    CCMPReplays: LARGE_INTEGER,
    CCMPDecryptErrors: LARGE_INTEGER,
    FourWayHandshakeFailures: LARGE_INTEGER,
    WEPUndecryptableCount: LARGE_INTEGER,
    WEPICVErrorCount: LARGE_INTEGER,
    DecryptSuccessCount: LARGE_INTEGER,
    DecryptFailureCount: LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: NDIS_802_11_KEY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_802_11_KEY = extern struct {
    Length: u32,
    KeyIndex: u32,
    KeyLength: u32,
    BSSID: ?[*]u8,
    KeyRSC: u64,
    KeyMaterial: ?[*]u8,
};
// --------------------------------------------------------
// Type: NDIS_802_11_REMOVE_KEY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_802_11_REMOVE_KEY = extern struct {
    Length: u32,
    KeyIndex: u32,
    BSSID: ?[*]u8,
};
// --------------------------------------------------------
// Type: NDIS_802_11_WEP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_802_11_WEP = extern struct {
    Length: u32,
    KeyIndex: u32,
    KeyLength: u32,
    KeyMaterial: ?[*]u8,
};
// --------------------------------------------------------
// Type: NDIS_802_11_NETWORK_INFRASTRUCTURE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_802_11_NETWORK_INFRASTRUCTURE = *opaque{
};
// --------------------------------------------------------
// Type: NDIS_802_11_AUTHENTICATION_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_802_11_AUTHENTICATION_MODE = *opaque{
};
// --------------------------------------------------------
// Type: NDIS_802_11_SSID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_802_11_SSID = extern struct {
    SsidLength: u32,
    Ssid: ?[*]u8,
};
// --------------------------------------------------------
// Type: NDIS_WLAN_BSSID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_WLAN_BSSID = extern struct {
    Length: u32,
    MacAddress: ?[*]u8,
    Reserved: ?[*]u8,
    Ssid: NDIS_802_11_SSID,
    Privacy: u32,
    Rssi: i32,
    NetworkTypeInUse: NDIS_802_11_NETWORK_TYPE,
    Configuration: NDIS_802_11_CONFIGURATION,
    InfrastructureMode: NDIS_802_11_NETWORK_INFRASTRUCTURE,
    SupportedRates: ?[*]u8,
};
// --------------------------------------------------------
// Type: NDIS_802_11_BSSID_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_802_11_BSSID_LIST = extern struct {
    NumberOfItems: u32,
    Bssid: ?[*]NDIS_WLAN_BSSID,
};
// --------------------------------------------------------
// Type: NDIS_WLAN_BSSID_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_WLAN_BSSID_EX = extern struct {
    Length: u32,
    MacAddress: ?[*]u8,
    Reserved: ?[*]u8,
    Ssid: NDIS_802_11_SSID,
    Privacy: u32,
    Rssi: i32,
    NetworkTypeInUse: NDIS_802_11_NETWORK_TYPE,
    Configuration: NDIS_802_11_CONFIGURATION,
    InfrastructureMode: NDIS_802_11_NETWORK_INFRASTRUCTURE,
    SupportedRates: ?[*]u8,
    IELength: u32,
    IEs: ?[*]u8,
};
// --------------------------------------------------------
// Type: NDIS_802_11_BSSID_LIST_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_802_11_BSSID_LIST_EX = extern struct {
    NumberOfItems: u32,
    Bssid: ?[*]NDIS_WLAN_BSSID_EX,
};
// --------------------------------------------------------
// Type: NDIS_802_11_FIXED_IEs
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_802_11_FIXED_IEs = extern struct {
    Timestamp: ?[*]u8,
    BeaconInterval: u16,
    Capabilities: u16,
};
// --------------------------------------------------------
// Type: NDIS_802_11_VARIABLE_IEs
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_802_11_VARIABLE_IEs = extern struct {
    ElementID: u8,
    Length: u8,
    data: ?[*]u8,
};
// --------------------------------------------------------
// Type: NDIS_802_11_PRIVACY_FILTER
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_802_11_PRIVACY_FILTER = *opaque{
};
// --------------------------------------------------------
// Type: NDIS_802_11_WEP_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_802_11_WEP_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: NDIS_802_11_RELOAD_DEFAULTS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_802_11_RELOAD_DEFAULTS = *opaque{
};
// --------------------------------------------------------
// Type: NDIS_802_11_AI_REQFI
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_802_11_AI_REQFI = extern struct {
    Capabilities: u16,
    ListenInterval: u16,
    CurrentAPAddress: ?[*]u8,
};
// --------------------------------------------------------
// Type: NDIS_802_11_AI_RESFI
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_802_11_AI_RESFI = extern struct {
    Capabilities: u16,
    StatusCode: u16,
    AssociationId: u16,
};
// --------------------------------------------------------
// Type: NDIS_802_11_ASSOCIATION_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_802_11_ASSOCIATION_INFORMATION = extern struct {
    Length: u32,
    AvailableRequestFixedIEs: u16,
    RequestFixedIEs: NDIS_802_11_AI_REQFI,
    RequestIELength: u32,
    OffsetRequestIEs: u32,
    AvailableResponseFixedIEs: u16,
    ResponseFixedIEs: NDIS_802_11_AI_RESFI,
    ResponseIELength: u32,
    OffsetResponseIEs: u32,
};
// --------------------------------------------------------
// Type: NDIS_802_11_AUTHENTICATION_EVENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_802_11_AUTHENTICATION_EVENT = extern struct {
    Status: NDIS_802_11_STATUS_INDICATION,
    Request: ?[*]NDIS_802_11_AUTHENTICATION_REQUEST,
};
// --------------------------------------------------------
// Type: NDIS_802_11_TEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_802_11_TEST = extern struct {
    Length: u32,
    Type: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: NDIS_802_11_MEDIA_STREAM_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_802_11_MEDIA_STREAM_MODE = *opaque{
};
// --------------------------------------------------------
// Type: BSSID_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BSSID_INFO = extern struct {
    BSSID: ?[*]u8,
    PMKID: ?[*]u8,
};
// --------------------------------------------------------
// Type: NDIS_802_11_PMKID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_802_11_PMKID = extern struct {
    Length: u32,
    BSSIDInfoCount: u32,
    BSSIDInfo: ?[*]BSSID_INFO,
};
// --------------------------------------------------------
// Type: NDIS_802_11_AUTHENTICATION_ENCRYPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_802_11_AUTHENTICATION_ENCRYPTION = extern struct {
    AuthModeSupported: NDIS_802_11_AUTHENTICATION_MODE,
    EncryptStatusSupported: NDIS_802_11_WEP_STATUS,
};
// --------------------------------------------------------
// Type: NDIS_802_11_CAPABILITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_802_11_CAPABILITY = extern struct {
    Length: u32,
    Version: u32,
    NoOfPMKIDs: u32,
    NoOfAuthEncryptPairsSupported: u32,
    AuthenticationEncryptionSupported: ?[*]NDIS_802_11_AUTHENTICATION_ENCRYPTION,
};
// --------------------------------------------------------
// Type: NDIS_802_11_NON_BCAST_SSID_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_802_11_NON_BCAST_SSID_LIST = extern struct {
    NumberOfItems: u32,
    Non_Bcast_Ssid: ?[*]NDIS_802_11_SSID,
};
// --------------------------------------------------------
// Type: NDIS_802_11_RADIO_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_802_11_RADIO_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: NDIS_CO_DEVICE_PROFILE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_CO_DEVICE_PROFILE = extern struct {
    DeviceDescription: NDIS_VAR_DATA_DESC,
    DevSpecificInfo: NDIS_VAR_DATA_DESC,
    ulTAPISupplementaryPassThru: u32,
    ulAddressModes: u32,
    ulNumAddresses: u32,
    ulBearerModes: u32,
    ulMaxTxRate: u32,
    ulMinTxRate: u32,
    ulMaxRxRate: u32,
    ulMinRxRate: u32,
    ulMediaModes: u32,
    ulGenerateToneModes: u32,
    ulGenerateToneMaxNumFreq: u32,
    ulGenerateDigitModes: u32,
    ulMonitorToneMaxNumFreq: u32,
    ulMonitorToneMaxNumEntries: u32,
    ulMonitorDigitModes: u32,
    ulGatherDigitsMinTimeout: u32,
    ulGatherDigitsMaxTimeout: u32,
    ulDevCapFlags: u32,
    ulMaxNumActiveCalls: u32,
    ulAnswerMode: u32,
    ulUUIAcceptSize: u32,
    ulUUIAnswerSize: u32,
    ulUUIMakeCallSize: u32,
    ulUUIDropSize: u32,
    ulUUISendUserUserInfoSize: u32,
    ulUUICallInfoSize: u32,
};
// --------------------------------------------------------
// Type: OFFLOAD_OPERATION_E
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OFFLOAD_OPERATION_E = *opaque{
};
// --------------------------------------------------------
// Type: OFFLOAD_ALGO_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OFFLOAD_ALGO_INFO = extern struct {
    algoIdentifier: u32,
    algoKeylen: u32,
    algoRounds: u32,
};
// --------------------------------------------------------
// Type: OFFLOAD_CONF_ALGO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OFFLOAD_CONF_ALGO = *opaque{
};
// --------------------------------------------------------
// Type: OFFLOAD_INTEGRITY_ALGO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const OFFLOAD_INTEGRITY_ALGO = *opaque{
};
// --------------------------------------------------------
// Type: OFFLOAD_SECURITY_ASSOCIATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OFFLOAD_SECURITY_ASSOCIATION = extern struct {
    Operation: OFFLOAD_OPERATION_E,
    SPI: u32,
    IntegrityAlgo: OFFLOAD_ALGO_INFO,
    ConfAlgo: OFFLOAD_ALGO_INFO,
    Reserved: OFFLOAD_ALGO_INFO,
};
// --------------------------------------------------------
// Type: OFFLOAD_IPSEC_ADD_SA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OFFLOAD_IPSEC_ADD_SA = extern struct {
    SrcAddr: u32,
    SrcMask: u32,
    DestAddr: u32,
    DestMask: u32,
    Protocol: u32,
    SrcPort: u16,
    DestPort: u16,
    SrcTunnelAddr: u32,
    DestTunnelAddr: u32,
    Flags: u16,
    NumSAs: i16,
    SecAssoc: ?[*]OFFLOAD_SECURITY_ASSOCIATION,
    OffloadHandle: HANDLE,
    KeyLen: u32,
    KeyMat: ?[*]u8,
};
// --------------------------------------------------------
// Type: OFFLOAD_IPSEC_DELETE_SA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OFFLOAD_IPSEC_DELETE_SA = extern struct {
    OffloadHandle: HANDLE,
};
// --------------------------------------------------------
// Type: UDP_ENCAP_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const UDP_ENCAP_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY = extern struct {
    UdpEncapType: UDP_ENCAP_TYPE,
    DstEncapPort: u16,
};
// --------------------------------------------------------
// Type: OFFLOAD_IPSEC_ADD_UDPESP_SA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OFFLOAD_IPSEC_ADD_UDPESP_SA = extern struct {
    SrcAddr: u32,
    SrcMask: u32,
    DstAddr: u32,
    DstMask: u32,
    Protocol: u32,
    SrcPort: u16,
    DstPort: u16,
    SrcTunnelAddr: u32,
    DstTunnelAddr: u32,
    Flags: u16,
    NumSAs: i16,
    SecAssoc: ?[*]OFFLOAD_SECURITY_ASSOCIATION,
    OffloadHandle: HANDLE,
    EncapTypeEntry: OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY,
    EncapTypeEntryOffldHandle: HANDLE,
    KeyLen: u32,
    KeyMat: ?[*]u8,
};
// --------------------------------------------------------
// Type: OFFLOAD_IPSEC_DELETE_UDPESP_SA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OFFLOAD_IPSEC_DELETE_UDPESP_SA = extern struct {
    OffloadHandle: HANDLE,
    EncapTypeEntryOffldHandle: HANDLE,
};
// --------------------------------------------------------
// Type: NDIS_MEDIUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_MEDIUM = *opaque{
};
// --------------------------------------------------------
// Type: NDIS_PHYSICAL_MEDIUM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_PHYSICAL_MEDIUM = *opaque{
};
// --------------------------------------------------------
// Type: TRANSPORT_HEADER_OFFSET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRANSPORT_HEADER_OFFSET = extern struct {
    ProtocolType: u16,
    HeaderOffset: u16,
};
// --------------------------------------------------------
// Type: NETWORK_ADDRESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETWORK_ADDRESS = extern struct {
    AddressLength: u16,
    AddressType: u16,
    Address: ?[*]u8,
};
// --------------------------------------------------------
// Type: NETWORK_ADDRESS_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETWORK_ADDRESS_LIST = extern struct {
    AddressCount: i32,
    AddressType: u16,
    Address: ?[*]NETWORK_ADDRESS,
};
// --------------------------------------------------------
// Type: NETWORK_ADDRESS_IP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETWORK_ADDRESS_IP = extern struct {
    sin_port: u16,
    in_addr: u32,
    sin_zero: ?[*]u8,
};
// --------------------------------------------------------
// Type: NETWORK_ADDRESS_IP6
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETWORK_ADDRESS_IP6 = extern struct {
    sin6_port: u16,
    sin6_flowinfo: u32,
    sin6_addr: ?[*]u16,
    sin6_scope_id: u32,
};
// --------------------------------------------------------
// Type: NETWORK_ADDRESS_IPX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NETWORK_ADDRESS_IPX = extern struct {
    NetworkAddress: u32,
    NodeAddress: ?[*]u8,
    Socket: u16,
};
// --------------------------------------------------------
// Type: NDIS_HARDWARE_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_HARDWARE_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: GEN_GET_TIME_CAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GEN_GET_TIME_CAPS = extern struct {
    Flags: u32,
    ClockPrecision: u32,
};
// --------------------------------------------------------
// Type: GEN_GET_NETCARD_TIME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GEN_GET_NETCARD_TIME = extern struct {
    ReadTime: u64,
};
// --------------------------------------------------------
// Type: NDIS_PM_PACKET_PATTERN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_PM_PACKET_PATTERN = extern struct {
    Priority: u32,
    Reserved: u32,
    MaskSize: u32,
    PatternOffset: u32,
    PatternSize: u32,
    PatternFlags: u32,
};
// --------------------------------------------------------
// Type: NDIS_DEVICE_POWER_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_DEVICE_POWER_STATE = *opaque{
};
// --------------------------------------------------------
// Type: NDIS_PM_WAKE_UP_CAPABILITIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_PM_WAKE_UP_CAPABILITIES = extern struct {
    MinMagicPacketWakeUp: NDIS_DEVICE_POWER_STATE,
    MinPatternWakeUp: NDIS_DEVICE_POWER_STATE,
    MinLinkChangeWakeUp: NDIS_DEVICE_POWER_STATE,
};
// --------------------------------------------------------
// Type: NDIS_PNP_CAPABILITIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_PNP_CAPABILITIES = extern struct {
    Flags: u32,
    WakeUpCapabilities: NDIS_PM_WAKE_UP_CAPABILITIES,
};
// --------------------------------------------------------
// Type: NDIS_FDDI_ATTACHMENT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_FDDI_ATTACHMENT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: NDIS_FDDI_RING_MGT_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_FDDI_RING_MGT_STATE = *opaque{
};
// --------------------------------------------------------
// Type: NDIS_FDDI_LCONNECTION_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_FDDI_LCONNECTION_STATE = *opaque{
};
// --------------------------------------------------------
// Type: NDIS_WAN_MEDIUM_SUBTYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_WAN_MEDIUM_SUBTYPE = *opaque{
};
// --------------------------------------------------------
// Type: NDIS_WAN_HEADER_FORMAT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_WAN_HEADER_FORMAT = *opaque{
};
// --------------------------------------------------------
// Type: NDIS_WAN_QUALITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_WAN_QUALITY = *opaque{
};
// --------------------------------------------------------
// Type: NDIS_WAN_PROTOCOL_CAPS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_WAN_PROTOCOL_CAPS = extern struct {
    Flags: u32,
    Reserved: u32,
};
// --------------------------------------------------------
// Type: NDIS_802_5_RING_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_802_5_RING_STATE = *opaque{
};
// --------------------------------------------------------
// Type: NDIS_MEDIA_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_MEDIA_STATE = *opaque{
};
// --------------------------------------------------------
// Type: NDIS_CO_LINK_SPEED
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_CO_LINK_SPEED = extern struct {
    Outbound: u32,
    Inbound: u32,
};
// --------------------------------------------------------
// Type: NDIS_LINK_SPEED
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_LINK_SPEED = extern struct {
    XmitLinkSpeed: u64,
    RcvLinkSpeed: u64,
};
// --------------------------------------------------------
// Type: NDIS_GUID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_GUID = extern struct {
    Guid: Guid,
    Anonymous: _Anonymous_e__Union,
    Size: u32,
    Flags: u32,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: NDIS_IRDA_PACKET_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_IRDA_PACKET_INFO = extern struct {
    ExtraBOFs: u32,
    MinTurnAroundTime: u32,
};
// --------------------------------------------------------
// Type: NDIS_SUPPORTED_PAUSE_FUNCTIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_SUPPORTED_PAUSE_FUNCTIONS = *opaque{
};
// --------------------------------------------------------
// Type: NDIS_LINK_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_LINK_STATE = extern struct {
    Header: NDIS_OBJECT_HEADER,
    MediaConnectState: NET_IF_MEDIA_CONNECT_STATE,
    MediaDuplexState: NET_IF_MEDIA_DUPLEX_STATE,
    XmitLinkSpeed: u64,
    RcvLinkSpeed: u64,
    PauseFunctions: NDIS_SUPPORTED_PAUSE_FUNCTIONS,
    AutoNegotiationFlags: u32,
};
// --------------------------------------------------------
// Type: NDIS_LINK_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_LINK_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    MediaDuplexState: NET_IF_MEDIA_DUPLEX_STATE,
    XmitLinkSpeed: u64,
    RcvLinkSpeed: u64,
    PauseFunctions: NDIS_SUPPORTED_PAUSE_FUNCTIONS,
    AutoNegotiationFlags: u32,
};
// --------------------------------------------------------
// Type: NDIS_OPER_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_OPER_STATE = extern struct {
    Header: NDIS_OBJECT_HEADER,
    OperationalStatus: NET_IF_OPER_STATUS,
    OperationalStatusFlags: u32,
};
// --------------------------------------------------------
// Type: NDIS_IP_OPER_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_IP_OPER_STATUS = extern struct {
    AddressFamily: u32,
    OperationalStatus: NET_IF_OPER_STATUS,
    OperationalStatusFlags: u32,
};
// --------------------------------------------------------
// Type: NDIS_IP_OPER_STATUS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_IP_OPER_STATUS_INFO = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Flags: u32,
    NumberofAddressFamiliesReturned: u32,
    IpOperationalStatus: ?[*]NDIS_IP_OPER_STATUS,
};
// --------------------------------------------------------
// Type: NDIS_IP_OPER_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_IP_OPER_STATE = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Flags: u32,
    IpOperationalStatus: NDIS_IP_OPER_STATUS,
};
// --------------------------------------------------------
// Type: NDIS_OFFLOAD_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_OFFLOAD_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    IPv4Checksum: u8,
    TCPIPv4Checksum: u8,
    UDPIPv4Checksum: u8,
    TCPIPv6Checksum: u8,
    UDPIPv6Checksum: u8,
    LsoV1: u8,
    IPsecV1: u8,
    LsoV2IPv4: u8,
    LsoV2IPv6: u8,
    TcpConnectionIPv4: u8,
    TcpConnectionIPv6: u8,
    Flags: u32,
};
// --------------------------------------------------------
// Type: NDIS_TCP_LARGE_SEND_OFFLOAD_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_TCP_LARGE_SEND_OFFLOAD_V1 = extern struct {
    IPv4: _IPv4_e__Struct,
    // --------------------------------------------------------
    // Type: _IPv4_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _IPv4_e__Struct = extern struct {
        Encapsulation: u32,
        MaxOffLoadSize: u32,
        MinSegmentCount: u32,
        _bitfield: u32,
    };
};
// --------------------------------------------------------
// Type: NDIS_TCP_IP_CHECKSUM_OFFLOAD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_TCP_IP_CHECKSUM_OFFLOAD = extern struct {
    IPv4Transmit: _IPv4Transmit_e__Struct,
    IPv4Receive: _IPv4Receive_e__Struct,
    IPv6Transmit: _IPv6Transmit_e__Struct,
    IPv6Receive: _IPv6Receive_e__Struct,
    // --------------------------------------------------------
    // Type: _IPv6Receive_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _IPv6Receive_e__Struct = extern struct {
        Encapsulation: u32,
        _bitfield: u32,
    };
    // --------------------------------------------------------
    // Type: _IPv4Receive_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _IPv4Receive_e__Struct = extern struct {
        Encapsulation: u32,
        _bitfield: u32,
    };
    // --------------------------------------------------------
    // Type: _IPv6Transmit_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _IPv6Transmit_e__Struct = extern struct {
        Encapsulation: u32,
        _bitfield: u32,
    };
    // --------------------------------------------------------
    // Type: _IPv4Transmit_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _IPv4Transmit_e__Struct = extern struct {
        Encapsulation: u32,
        _bitfield: u32,
    };
};
// --------------------------------------------------------
// Type: NDIS_IPSEC_OFFLOAD_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_IPSEC_OFFLOAD_V1 = extern struct {
    Supported: _Supported_e__Struct,
    IPv4AH: _IPv4AH_e__Struct,
    IPv4ESP: _IPv4ESP_e__Struct,
    // --------------------------------------------------------
    // Type: _IPv4AH_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _IPv4AH_e__Struct = extern struct {
        _bitfield: u32,
    };
    // --------------------------------------------------------
    // Type: _IPv4ESP_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _IPv4ESP_e__Struct = extern struct {
        _bitfield: u32,
    };
    // --------------------------------------------------------
    // Type: _Supported_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Supported_e__Struct = extern struct {
        Encapsulation: u32,
        AhEspCombined: u32,
        TransportTunnelCombined: u32,
        IPv4Options: u32,
        Flags: u32,
    };
};
// --------------------------------------------------------
// Type: NDIS_TCP_LARGE_SEND_OFFLOAD_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_TCP_LARGE_SEND_OFFLOAD_V2 = extern struct {
    IPv4: _IPv4_e__Struct,
    IPv6: _IPv6_e__Struct,
    // --------------------------------------------------------
    // Type: _IPv4_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _IPv4_e__Struct = extern struct {
        Encapsulation: u32,
        MaxOffLoadSize: u32,
        MinSegmentCount: u32,
    };
    // --------------------------------------------------------
    // Type: _IPv6_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _IPv6_e__Struct = extern struct {
        Encapsulation: u32,
        MaxOffLoadSize: u32,
        MinSegmentCount: u32,
        _bitfield: u32,
    };
};
// --------------------------------------------------------
// Type: NDIS_OFFLOAD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_OFFLOAD = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Checksum: NDIS_TCP_IP_CHECKSUM_OFFLOAD,
    LsoV1: NDIS_TCP_LARGE_SEND_OFFLOAD_V1,
    IPsecV1: NDIS_IPSEC_OFFLOAD_V1,
    LsoV2: NDIS_TCP_LARGE_SEND_OFFLOAD_V2,
    Flags: u32,
};
// --------------------------------------------------------
// Type: NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1 = extern struct {
    IPv4: _IPv4_e__Struct,
    // --------------------------------------------------------
    // Type: _IPv4_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _IPv4_e__Struct = extern struct {
        Encapsulation: u32,
        MaxOffLoadSize: u32,
        MinSegmentCount: u32,
        TcpOptions: u32,
        IpOptions: u32,
    };
};
// --------------------------------------------------------
// Type: NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD = extern struct {
    IPv4Transmit: _IPv4Transmit_e__Struct,
    IPv4Receive: _IPv4Receive_e__Struct,
    IPv6Transmit: _IPv6Transmit_e__Struct,
    IPv6Receive: _IPv6Receive_e__Struct,
    // --------------------------------------------------------
    // Type: _IPv6Receive_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _IPv6Receive_e__Struct = extern struct {
        Encapsulation: u32,
        IpExtensionHeadersSupported: u32,
        TcpOptionsSupported: u32,
        TcpChecksum: u32,
        UdpChecksum: u32,
    };
    // --------------------------------------------------------
    // Type: _IPv4Receive_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _IPv4Receive_e__Struct = extern struct {
        Encapsulation: u32,
        IpOptionsSupported: u32,
        TcpOptionsSupported: u32,
        TcpChecksum: u32,
        UdpChecksum: u32,
        IpChecksum: u32,
    };
    // --------------------------------------------------------
    // Type: _IPv4Transmit_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _IPv4Transmit_e__Struct = extern struct {
        Encapsulation: u32,
        IpOptionsSupported: u32,
        TcpOptionsSupported: u32,
        TcpChecksum: u32,
        UdpChecksum: u32,
        IpChecksum: u32,
    };
    // --------------------------------------------------------
    // Type: _IPv6Transmit_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _IPv6Transmit_e__Struct = extern struct {
        Encapsulation: u32,
        IpExtensionHeadersSupported: u32,
        TcpOptionsSupported: u32,
        TcpChecksum: u32,
        UdpChecksum: u32,
    };
};
// --------------------------------------------------------
// Type: NDIS_WMI_IPSEC_OFFLOAD_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_WMI_IPSEC_OFFLOAD_V1 = extern struct {
    Supported: _Supported_e__Struct,
    IPv4AH: _IPv4AH_e__Struct,
    IPv4ESP: _IPv4ESP_e__Struct,
    // --------------------------------------------------------
    // Type: _IPv4AH_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _IPv4AH_e__Struct = extern struct {
        Md5: u32,
        Sha_1: u32,
        Transport: u32,
        Tunnel: u32,
        Send: u32,
        Receive: u32,
    };
    // --------------------------------------------------------
    // Type: _Supported_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Supported_e__Struct = extern struct {
        Encapsulation: u32,
        AhEspCombined: u32,
        TransportTunnelCombined: u32,
        IPv4Options: u32,
        Flags: u32,
    };
    // --------------------------------------------------------
    // Type: _IPv4ESP_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _IPv4ESP_e__Struct = extern struct {
        Des: u32,
        Reserved: u32,
        TripleDes: u32,
        NullEsp: u32,
        Transport: u32,
        Tunnel: u32,
        Send: u32,
        Receive: u32,
    };
};
// --------------------------------------------------------
// Type: NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2 = extern struct {
    IPv4: _IPv4_e__Struct,
    IPv6: _IPv6_e__Struct,
    // --------------------------------------------------------
    // Type: _IPv4_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _IPv4_e__Struct = extern struct {
        Encapsulation: u32,
        MaxOffLoadSize: u32,
        MinSegmentCount: u32,
    };
    // --------------------------------------------------------
    // Type: _IPv6_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _IPv6_e__Struct = extern struct {
        Encapsulation: u32,
        MaxOffLoadSize: u32,
        MinSegmentCount: u32,
        IpExtensionHeadersSupported: u32,
        TcpOptionsSupported: u32,
    };
};
// --------------------------------------------------------
// Type: NDIS_WMI_OFFLOAD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_WMI_OFFLOAD = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Checksum: NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD,
    LsoV1: NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1,
    IPsecV1: NDIS_WMI_IPSEC_OFFLOAD_V1,
    LsoV2: NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2,
    Flags: u32,
};
// --------------------------------------------------------
// Type: NDIS_TCP_CONNECTION_OFFLOAD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_TCP_CONNECTION_OFFLOAD = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Encapsulation: u32,
    _bitfield: u32,
    TcpConnectionOffloadCapacity: u32,
    Flags: u32,
};
// --------------------------------------------------------
// Type: NDIS_WMI_TCP_CONNECTION_OFFLOAD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_WMI_TCP_CONNECTION_OFFLOAD = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Encapsulation: u32,
    SupportIPv4: u32,
    SupportIPv6: u32,
    SupportIPv6ExtensionHeaders: u32,
    SupportSack: u32,
    TcpConnectionOffloadCapacity: u32,
    Flags: u32,
};
// --------------------------------------------------------
// Type: NDIS_PORT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_PORT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: NDIS_PORT_AUTHORIZATION_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_PORT_AUTHORIZATION_STATE = *opaque{
};
// --------------------------------------------------------
// Type: NDIS_PORT_CONTROL_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_PORT_CONTROL_STATE = *opaque{
};
// --------------------------------------------------------
// Type: NDIS_PORT_AUTHENTICATION_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_PORT_AUTHENTICATION_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    SendControlState: NDIS_PORT_CONTROL_STATE,
    RcvControlState: NDIS_PORT_CONTROL_STATE,
    SendAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE,
    RcvAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE,
};
// --------------------------------------------------------
// Type: NDIS_NETWORK_CHANGE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_NETWORK_CHANGE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: NDIS_WMI_METHOD_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_WMI_METHOD_HEADER = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PortNumber: u32,
    NetLuid: NET_LUID_LH,
    RequestId: u64,
    Timeout: u32,
    Padding: ?[*]u8,
};
// --------------------------------------------------------
// Type: NDIS_WMI_SET_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_WMI_SET_HEADER = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PortNumber: u32,
    NetLuid: NET_LUID_LH,
    RequestId: u64,
    Timeout: u32,
    Padding: ?[*]u8,
};
// --------------------------------------------------------
// Type: NDIS_WMI_EVENT_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_WMI_EVENT_HEADER = extern struct {
    Header: NDIS_OBJECT_HEADER,
    IfIndex: u32,
    NetLuid: NET_LUID_LH,
    RequestId: u64,
    PortNumber: u32,
    DeviceNameLength: u32,
    DeviceNameOffset: u32,
    Padding: ?[*]u8,
};
// --------------------------------------------------------
// Type: NDIS_WMI_ENUM_ADAPTER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_WMI_ENUM_ADAPTER = extern struct {
    Header: NDIS_OBJECT_HEADER,
    IfIndex: u32,
    NetLuid: NET_LUID_LH,
    DeviceNameLength: u16,
    DeviceName: ?[*]i8,
};
// --------------------------------------------------------
// Type: NDIS_WMI_OUTPUT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_WMI_OUTPUT_INFO = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Flags: u32,
    SupportedRevision: u8,
    DataOffset: u32,
};
// --------------------------------------------------------
// Type: NDIS_RECEIVE_SCALE_CAPABILITIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_RECEIVE_SCALE_CAPABILITIES = extern struct {
    Header: NDIS_OBJECT_HEADER,
    CapabilitiesFlags: u32,
    NumberOfInterruptMessages: u32,
    NumberOfReceiveQueues: u32,
};
// --------------------------------------------------------
// Type: NDIS_RECEIVE_SCALE_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_RECEIVE_SCALE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Flags: u16,
    BaseCpuNumber: u16,
    HashInformation: u32,
    IndirectionTableSize: u16,
    IndirectionTableOffset: u32,
    HashSecretKeySize: u16,
    HashSecretKeyOffset: u32,
};
// --------------------------------------------------------
// Type: NDIS_RECEIVE_HASH_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_RECEIVE_HASH_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Flags: u32,
    HashInformation: u32,
    HashSecretKeySize: u16,
    HashSecretKeyOffset: u32,
};
// --------------------------------------------------------
// Type: NDIS_PROCESSOR_VENDOR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NDIS_PROCESSOR_VENDOR = *opaque{
};
// --------------------------------------------------------
// Type: NDIS_PORT_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_PORT_STATE = extern struct {
    Header: NDIS_OBJECT_HEADER,
    MediaConnectState: NET_IF_MEDIA_CONNECT_STATE,
    XmitLinkSpeed: u64,
    RcvLinkSpeed: u64,
    Direction: NET_IF_DIRECTION_TYPE,
    SendControlState: NDIS_PORT_CONTROL_STATE,
    RcvControlState: NDIS_PORT_CONTROL_STATE,
    SendAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE,
    RcvAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE,
    Flags: u32,
};
// --------------------------------------------------------
// Type: NDIS_PORT_CHARACTERISTICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_PORT_CHARACTERISTICS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PortNumber: u32,
    Flags: u32,
    Type: NDIS_PORT_TYPE,
    MediaConnectState: NET_IF_MEDIA_CONNECT_STATE,
    XmitLinkSpeed: u64,
    RcvLinkSpeed: u64,
    Direction: NET_IF_DIRECTION_TYPE,
    SendControlState: NDIS_PORT_CONTROL_STATE,
    RcvControlState: NDIS_PORT_CONTROL_STATE,
    SendAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE,
    RcvAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE,
};
// --------------------------------------------------------
// Type: NDIS_PORT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_PORT = extern struct {
    Next: ?*NDIS_PORT,
    NdisReserved: ?*opaque{},
    MiniportReserved: ?*opaque{},
    ProtocolReserved: ?*opaque{},
    PortCharacteristics: NDIS_PORT_CHARACTERISTICS,
};
// --------------------------------------------------------
// Type: NDIS_PORT_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_PORT_ARRAY = extern struct {
    Header: NDIS_OBJECT_HEADER,
    NumberOfPorts: u32,
    OffsetFirstPort: u32,
    ElementSize: u32,
    Ports: ?[*]NDIS_PORT_CHARACTERISTICS,
};
// --------------------------------------------------------
// Type: NDIS_TIMESTAMP_CAPABILITY_FLAGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_TIMESTAMP_CAPABILITY_FLAGS = extern struct {
    PtpV2OverUdpIPv4EventMsgReceiveHw: u8,
    PtpV2OverUdpIPv4AllMsgReceiveHw: u8,
    PtpV2OverUdpIPv4EventMsgTransmitHw: u8,
    PtpV2OverUdpIPv4AllMsgTransmitHw: u8,
    PtpV2OverUdpIPv6EventMsgReceiveHw: u8,
    PtpV2OverUdpIPv6AllMsgReceiveHw: u8,
    PtpV2OverUdpIPv6EventMsgTransmitHw: u8,
    PtpV2OverUdpIPv6AllMsgTransmitHw: u8,
    AllReceiveHw: u8,
    AllTransmitHw: u8,
    TaggedTransmitHw: u8,
    AllReceiveSw: u8,
    AllTransmitSw: u8,
    TaggedTransmitSw: u8,
};
// --------------------------------------------------------
// Type: NDIS_TIMESTAMP_CAPABILITIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_TIMESTAMP_CAPABILITIES = extern struct {
    Header: NDIS_OBJECT_HEADER,
    HardwareClockFrequencyHz: u64,
    CrossTimestamp: u8,
    Reserved1: u64,
    Reserved2: u64,
    TimestampFlags: NDIS_TIMESTAMP_CAPABILITY_FLAGS,
};
// --------------------------------------------------------
// Type: NDIS_HARDWARE_CROSSTIMESTAMP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_HARDWARE_CROSSTIMESTAMP = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Flags: u32,
    SystemTimestamp1: u64,
    HardwareClockTimestamp: u64,
    SystemTimestamp2: u64,
};
// --------------------------------------------------------
// Type: DOT11_BSSID_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_BSSID_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    BSSIDs: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_PHY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_PHY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_RATE_SET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_RATE_SET = extern struct {
    uRateSetLength: u32,
    ucRateSet: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_WFD_SESSION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WFD_SESSION_INFO = extern struct {
    uSessionInfoLength: u16,
    ucSessionInfo: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_OFFLOAD_CAPABILITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_OFFLOAD_CAPABILITY = extern struct {
    uReserved: u32,
    uFlags: u32,
    uSupportedWEPAlgorithms: u32,
    uNumOfReplayWindows: u32,
    uMaxWEPKeyMappingLength: u32,
    uSupportedAuthAlgorithms: u32,
    uMaxAuthKeyMappingLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_CURRENT_OFFLOAD_CAPABILITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_CURRENT_OFFLOAD_CAPABILITY = extern struct {
    uReserved: u32,
    uFlags: u32,
};
// --------------------------------------------------------
// Type: DOT11_OFFLOAD_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_OFFLOAD_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_IV48_COUNTER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_IV48_COUNTER = extern struct {
    uIV32Counter: u32,
    usIV16Counter: u16,
};
// --------------------------------------------------------
// Type: DOT11_WEP_OFFLOAD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WEP_OFFLOAD = extern struct {
    uReserved: u32,
    hOffloadContext: HANDLE,
    hOffload: HANDLE,
    dot11OffloadType: DOT11_OFFLOAD_TYPE,
    dwAlgorithm: u32,
    bRowIsOutbound: u8,
    bUseDefault: u8,
    uFlags: u32,
    ucMacAddress: ?[*]u8,
    uNumOfRWsOnPeer: u32,
    uNumOfRWsOnMe: u32,
    dot11IV48Counters: ?[*]DOT11_IV48_COUNTER,
    usDot11RWBitMaps: ?[*]u16,
    usKeyLength: u16,
    ucKey: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_WEP_UPLOAD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WEP_UPLOAD = extern struct {
    uReserved: u32,
    dot11OffloadType: DOT11_OFFLOAD_TYPE,
    hOffload: HANDLE,
    uNumOfRWsUsed: u32,
    dot11IV48Counters: ?[*]DOT11_IV48_COUNTER,
    usDot11RWBitMaps: ?[*]u16,
};
// --------------------------------------------------------
// Type: DOT11_KEY_DIRECTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_KEY_DIRECTION = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_DEFAULT_WEP_OFFLOAD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_DEFAULT_WEP_OFFLOAD = extern struct {
    uReserved: u32,
    hOffloadContext: HANDLE,
    hOffload: HANDLE,
    dwIndex: u32,
    dot11OffloadType: DOT11_OFFLOAD_TYPE,
    dwAlgorithm: u32,
    uFlags: u32,
    dot11KeyDirection: DOT11_KEY_DIRECTION,
    ucMacAddress: ?[*]u8,
    uNumOfRWsOnMe: u32,
    dot11IV48Counters: ?[*]DOT11_IV48_COUNTER,
    usDot11RWBitMaps: ?[*]u16,
    usKeyLength: u16,
    ucKey: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_DEFAULT_WEP_UPLOAD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_DEFAULT_WEP_UPLOAD = extern struct {
    uReserved: u32,
    dot11OffloadType: DOT11_OFFLOAD_TYPE,
    hOffload: HANDLE,
    uNumOfRWsUsed: u32,
    dot11IV48Counters: ?[*]DOT11_IV48_COUNTER,
    usDot11RWBitMaps: ?[*]u16,
};
// --------------------------------------------------------
// Type: DOT11_OPERATION_MODE_CAPABILITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_OPERATION_MODE_CAPABILITY = extern struct {
    uReserved: u32,
    uMajorVersion: u32,
    uMinorVersion: u32,
    uNumOfTXBuffers: u32,
    uNumOfRXBuffers: u32,
    uOpModeCapability: u32,
};
// --------------------------------------------------------
// Type: DOT11_CURRENT_OPERATION_MODE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_CURRENT_OPERATION_MODE = extern struct {
    uReserved: u32,
    uCurrentOpMode: u32,
};
// --------------------------------------------------------
// Type: DOT11_SCAN_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_SCAN_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_SCAN_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_SCAN_REQUEST = extern struct {
    dot11BSSType: DOT11_BSS_TYPE,
    dot11BSSID: ?[*]u8,
    dot11SSID: DOT11_SSID,
    dot11ScanType: DOT11_SCAN_TYPE,
    bRestrictedScan: u8,
    bUseRequestIE: u8,
    uRequestIDsOffset: u32,
    uNumOfRequestIDs: u32,
    uPhyTypesOffset: u32,
    uNumOfPhyTypes: u32,
    uIEsOffset: u32,
    uIEsLength: u32,
    ucBuffer: ?[*]u8,
};
// --------------------------------------------------------
// Type: CH_DESCRIPTION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CH_DESCRIPTION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_PHY_TYPE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_PHY_TYPE_INFO = extern struct {
    dot11PhyType: DOT11_PHY_TYPE,
    bUseParameters: u8,
    uProbeDelay: u32,
    uMinChannelTime: u32,
    uMaxChannelTime: u32,
    ChDescriptionType: CH_DESCRIPTION_TYPE,
    uChannelListSize: u32,
    ucChannelListBuffer: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_SCAN_REQUEST_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_SCAN_REQUEST_V2 = extern struct {
    dot11BSSType: DOT11_BSS_TYPE,
    dot11BSSID: ?[*]u8,
    dot11ScanType: DOT11_SCAN_TYPE,
    bRestrictedScan: u8,
    udot11SSIDsOffset: u32,
    uNumOfdot11SSIDs: u32,
    bUseRequestIE: u8,
    uRequestIDsOffset: u32,
    uNumOfRequestIDs: u32,
    uPhyTypeInfosOffset: u32,
    uNumOfPhyTypeInfos: u32,
    uIEsOffset: u32,
    uIEsLength: u32,
    ucBuffer: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_PHY_TYPE_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_PHY_TYPE_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11PhyType: ?[*]DOT11_PHY_TYPE,
};
// --------------------------------------------------------
// Type: DOT11_BSS_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_BSS_DESCRIPTION = extern struct {
    uReserved: u32,
    dot11BSSID: ?[*]u8,
    dot11BSSType: DOT11_BSS_TYPE,
    usBeaconPeriod: u16,
    ullTimestamp: u64,
    usCapabilityInformation: u16,
    uBufferLength: u32,
    ucBuffer: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_JOIN_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_JOIN_REQUEST = extern struct {
    uJoinFailureTimeout: u32,
    OperationalRateSet: DOT11_RATE_SET,
    uChCenterFrequency: u32,
    dot11BSSDescription: DOT11_BSS_DESCRIPTION,
};
// --------------------------------------------------------
// Type: DOT11_START_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_START_REQUEST = extern struct {
    uStartFailureTimeout: u32,
    OperationalRateSet: DOT11_RATE_SET,
    uChCenterFrequency: u32,
    dot11BSSDescription: DOT11_BSS_DESCRIPTION,
};
// --------------------------------------------------------
// Type: DOT11_UPDATE_IE_OP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_UPDATE_IE_OP = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_UPDATE_IE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_UPDATE_IE = extern struct {
    dot11UpdateIEOp: DOT11_UPDATE_IE_OP,
    uBufferLength: u32,
    ucBuffer: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_RESET_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_RESET_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_RESET_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_RESET_REQUEST = extern struct {
    dot11ResetType: DOT11_RESET_TYPE,
    dot11MacAddress: ?[*]u8,
    bSetDefaultMIB: u8,
};
// --------------------------------------------------------
// Type: DOT11_OPTIONAL_CAPABILITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_OPTIONAL_CAPABILITY = extern struct {
    uReserved: u32,
    bDot11PCF: u8,
    bDot11PCFMPDUTransferToPC: u8,
    bStrictlyOrderedServiceClass: u8,
};
// --------------------------------------------------------
// Type: DOT11_CURRENT_OPTIONAL_CAPABILITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_CURRENT_OPTIONAL_CAPABILITY = extern struct {
    uReserved: u32,
    bDot11CFPollable: u8,
    bDot11PCF: u8,
    bDot11PCFMPDUTransferToPC: u8,
    bStrictlyOrderedServiceClass: u8,
};
// --------------------------------------------------------
// Type: DOT11_POWER_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_POWER_MODE = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_POWER_MGMT_MODE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_POWER_MGMT_MODE = extern struct {
    dot11PowerMode: DOT11_POWER_MODE,
    uPowerSaveLevel: u32,
    usListenInterval: u16,
    usAID: u16,
    bReceiveDTIMs: u8,
};
// --------------------------------------------------------
// Type: DOT11_COUNTERS_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_COUNTERS_ENTRY = extern struct {
    uTransmittedFragmentCount: u32,
    uMulticastTransmittedFrameCount: u32,
    uFailedCount: u32,
    uRetryCount: u32,
    uMultipleRetryCount: u32,
    uFrameDuplicateCount: u32,
    uRTSSuccessCount: u32,
    uRTSFailureCount: u32,
    uACKFailureCount: u32,
    uReceivedFragmentCount: u32,
    uMulticastReceivedFrameCount: u32,
    uFCSErrorCount: u32,
    uTransmittedFrameCount: u32,
};
// --------------------------------------------------------
// Type: DOT11_SUPPORTED_PHY_TYPES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_SUPPORTED_PHY_TYPES = extern struct {
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11PHYType: ?[*]DOT11_PHY_TYPE,
};
// --------------------------------------------------------
// Type: DOT11_TEMP_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_TEMP_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_DIVERSITY_SUPPORT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_DIVERSITY_SUPPORT = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_SUPPORTED_POWER_LEVELS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_SUPPORTED_POWER_LEVELS = extern struct {
    uNumOfSupportedPowerLevels: u32,
    uTxPowerLevelValues: ?[*]u32,
};
// --------------------------------------------------------
// Type: DOT11_REG_DOMAIN_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_REG_DOMAIN_VALUE = extern struct {
    uRegDomainsSupportIndex: u32,
    uRegDomainsSupportValue: u32,
};
// --------------------------------------------------------
// Type: DOT11_REG_DOMAINS_SUPPORT_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_REG_DOMAINS_SUPPORT_VALUE = extern struct {
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11RegDomainValue: ?[*]DOT11_REG_DOMAIN_VALUE,
};
// --------------------------------------------------------
// Type: DOT11_SUPPORTED_ANTENNA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_SUPPORTED_ANTENNA = extern struct {
    uAntennaListIndex: u32,
    bSupportedAntenna: u8,
};
// --------------------------------------------------------
// Type: DOT11_SUPPORTED_ANTENNA_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_SUPPORTED_ANTENNA_LIST = extern struct {
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11SupportedAntenna: ?[*]DOT11_SUPPORTED_ANTENNA,
};
// --------------------------------------------------------
// Type: DOT11_DIVERSITY_SELECTION_RX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_DIVERSITY_SELECTION_RX = extern struct {
    uAntennaListIndex: u32,
    bDiversitySelectionRX: u8,
};
// --------------------------------------------------------
// Type: DOT11_DIVERSITY_SELECTION_RX_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_DIVERSITY_SELECTION_RX_LIST = extern struct {
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11DiversitySelectionRx: ?[*]DOT11_DIVERSITY_SELECTION_RX,
};
// --------------------------------------------------------
// Type: DOT11_SUPPORTED_DATA_RATES_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_SUPPORTED_DATA_RATES_VALUE = extern struct {
    ucSupportedTxDataRatesValue: ?[*]u8,
    ucSupportedRxDataRatesValue: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_SUPPORTED_DATA_RATES_VALUE_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_SUPPORTED_DATA_RATES_VALUE_V2 = extern struct {
    ucSupportedTxDataRatesValue: ?[*]u8,
    ucSupportedRxDataRatesValue: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_MULTI_DOMAIN_CAPABILITY_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_MULTI_DOMAIN_CAPABILITY_ENTRY = extern struct {
    uMultiDomainCapabilityIndex: u32,
    uFirstChannelNumber: u32,
    uNumberOfChannels: u32,
    lMaximumTransmitPowerLevel: i32,
};
// --------------------------------------------------------
// Type: DOT11_MD_CAPABILITY_ENTRY_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_MD_CAPABILITY_ENTRY_LIST = extern struct {
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11MDCapabilityEntry: ?[*]DOT11_MULTI_DOMAIN_CAPABILITY_ENTRY,
};
// --------------------------------------------------------
// Type: DOT11_HOP_ALGO_ADOPTED
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_HOP_ALGO_ADOPTED = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_HOPPING_PATTERN_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_HOPPING_PATTERN_ENTRY = extern struct {
    uHoppingPatternIndex: u32,
    uRandomTableFieldNumber: u32,
};
// --------------------------------------------------------
// Type: DOT11_HOPPING_PATTERN_ENTRY_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_HOPPING_PATTERN_ENTRY_LIST = extern struct {
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11HoppingPatternEntry: ?[*]DOT11_HOPPING_PATTERN_ENTRY,
};
// --------------------------------------------------------
// Type: DOT11_WPA_TSC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WPA_TSC = extern struct {
    uReserved: u32,
    dot11OffloadType: DOT11_OFFLOAD_TYPE,
    hOffload: HANDLE,
    dot11IV48Counter: DOT11_IV48_COUNTER,
};
// --------------------------------------------------------
// Type: DOT11_RSSI_RANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_RSSI_RANGE = extern struct {
    dot11PhyType: DOT11_PHY_TYPE,
    uRSSIMin: u32,
    uRSSIMax: u32,
};
// --------------------------------------------------------
// Type: DOT11_NIC_SPECIFIC_EXTENSION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_NIC_SPECIFIC_EXTENSION = extern struct {
    uBufferLength: u32,
    uTotalBufferLength: u32,
    ucBuffer: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_AP_JOIN_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_AP_JOIN_REQUEST = extern struct {
    uJoinFailureTimeout: u32,
    OperationalRateSet: DOT11_RATE_SET,
    uChCenterFrequency: u32,
    dot11BSSDescription: DOT11_BSS_DESCRIPTION,
};
// --------------------------------------------------------
// Type: DOT11_RECV_SENSITIVITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_RECV_SENSITIVITY = extern struct {
    ucDataRate: u8,
    lRSSIMin: i32,
    lRSSIMax: i32,
};
// --------------------------------------------------------
// Type: DOT11_RECV_SENSITIVITY_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_RECV_SENSITIVITY_LIST = extern struct {
    Anonymous: _Anonymous_e__Union,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11RecvSensitivity: ?[*]DOT11_RECV_SENSITIVITY,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: DOT11_AC_PARAM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_AC_PARAM = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_WME_AC_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WME_AC_PARAMETERS = extern struct {
    ucAccessCategoryIndex: u8,
    ucAIFSN: u8,
    ucECWmin: u8,
    ucECWmax: u8,
    usTXOPLimit: u16,
};
// --------------------------------------------------------
// Type: _DOT11_WME_AC_PARAMTERS_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _DOT11_WME_AC_PARAMTERS_LIST = extern struct {
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11WMEACParameters: ?[*]DOT11_WME_AC_PARAMETERS,
};
// --------------------------------------------------------
// Type: DOT11_WME_UPDATE_IE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WME_UPDATE_IE = extern struct {
    uParamElemMinBeaconIntervals: u32,
    uWMEInfoElemOffset: u32,
    uWMEInfoElemLength: u32,
    uWMEParamElemOffset: u32,
    uWMEParamElemLength: u32,
    ucBuffer: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_QOS_TX_DURATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_QOS_TX_DURATION = extern struct {
    uNominalMSDUSize: u32,
    uMinPHYRate: u32,
    uDuration: u32,
};
// --------------------------------------------------------
// Type: DOT11_QOS_TX_MEDIUM_TIME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_QOS_TX_MEDIUM_TIME = extern struct {
    dot11PeerAddress: ?[*]u8,
    ucQoSPriority: u8,
    uMediumTimeAdmited: u32,
};
// --------------------------------------------------------
// Type: DOT11_SUPPORTED_OFDM_FREQUENCY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_SUPPORTED_OFDM_FREQUENCY = extern struct {
    uCenterFrequency: u32,
};
// --------------------------------------------------------
// Type: DOT11_SUPPORTED_OFDM_FREQUENCY_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_SUPPORTED_OFDM_FREQUENCY_LIST = extern struct {
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11SupportedOFDMFrequency: ?[*]DOT11_SUPPORTED_OFDM_FREQUENCY,
};
// --------------------------------------------------------
// Type: DOT11_SUPPORTED_DSSS_CHANNEL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_SUPPORTED_DSSS_CHANNEL = extern struct {
    uChannel: u32,
};
// --------------------------------------------------------
// Type: DOT11_SUPPORTED_DSSS_CHANNEL_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_SUPPORTED_DSSS_CHANNEL_LIST = extern struct {
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11SupportedDSSSChannel: ?[*]DOT11_SUPPORTED_DSSS_CHANNEL,
};
// --------------------------------------------------------
// Type: DOT11_BYTE_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_BYTE_ARRAY = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfBytes: u32,
    uTotalNumOfBytes: u32,
    ucBuffer: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO = *opaque{
    // --------------------------------------------------------
    // Type: _FHSS_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _FHSS_e__Struct = extern struct {
        uHopPattern: u32,
        uHopSet: u32,
        uDwellTime: u32,
    };
};
// --------------------------------------------------------
// Type: DOT11_BSS_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_BSS_ENTRY = extern struct {
    uPhyId: u32,
    PhySpecificInfo: DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO,
    dot11BSSID: ?[*]u8,
    dot11BSSType: DOT11_BSS_TYPE,
    lRSSI: i32,
    uLinkQuality: u32,
    bInRegDomain: u8,
    usBeaconPeriod: u16,
    ullTimestamp: u64,
    ullHostTimestamp: u64,
    usCapabilityInformation: u16,
    uBufferLength: u32,
    ucBuffer: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_SSID_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_SSID_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    SSIDs: ?[*]DOT11_SSID,
};
// --------------------------------------------------------
// Type: DOT11_MAC_ADDRESS_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_MAC_ADDRESS_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    MacAddrs: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_PMKID_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_PMKID_ENTRY = extern struct {
    BSSID: ?[*]u8,
    PMKID: ?[*]u8,
    uFlags: u32,
};
// --------------------------------------------------------
// Type: DOT11_PMKID_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_PMKID_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    PMKIDs: ?[*]DOT11_PMKID_ENTRY,
};
// --------------------------------------------------------
// Type: DOT11_PHY_FRAME_STATISTICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_PHY_FRAME_STATISTICS = extern struct {
    ullTransmittedFrameCount: u64,
    ullMulticastTransmittedFrameCount: u64,
    ullFailedCount: u64,
    ullRetryCount: u64,
    ullMultipleRetryCount: u64,
    ullMaxTXLifetimeExceededCount: u64,
    ullTransmittedFragmentCount: u64,
    ullRTSSuccessCount: u64,
    ullRTSFailureCount: u64,
    ullACKFailureCount: u64,
    ullReceivedFrameCount: u64,
    ullMulticastReceivedFrameCount: u64,
    ullPromiscuousReceivedFrameCount: u64,
    ullMaxRXLifetimeExceededCount: u64,
    ullFrameDuplicateCount: u64,
    ullReceivedFragmentCount: u64,
    ullPromiscuousReceivedFragmentCount: u64,
    ullFCSErrorCount: u64,
};
// --------------------------------------------------------
// Type: DOT11_MAC_FRAME_STATISTICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_MAC_FRAME_STATISTICS = extern struct {
    ullTransmittedFrameCount: u64,
    ullReceivedFrameCount: u64,
    ullTransmittedFailureFrameCount: u64,
    ullReceivedFailureFrameCount: u64,
    ullWEPExcludedCount: u64,
    ullTKIPLocalMICFailures: u64,
    ullTKIPReplays: u64,
    ullTKIPICVErrorCount: u64,
    ullCCMPReplays: u64,
    ullCCMPDecryptErrors: u64,
    ullWEPUndecryptableCount: u64,
    ullWEPICVErrorCount: u64,
    ullDecryptSuccessCount: u64,
    ullDecryptFailureCount: u64,
};
// --------------------------------------------------------
// Type: DOT11_STATISTICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_STATISTICS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ullFourWayHandshakeFailures: u64,
    ullTKIPCounterMeasuresInvoked: u64,
    ullReserved: u64,
    MacUcastCounters: DOT11_MAC_FRAME_STATISTICS,
    MacMcastCounters: DOT11_MAC_FRAME_STATISTICS,
    PhyCounters: ?[*]DOT11_PHY_FRAME_STATISTICS,
};
// --------------------------------------------------------
// Type: DOT11_PRIVACY_EXEMPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_PRIVACY_EXEMPTION = extern struct {
    usEtherType: u16,
    usExemptionActionType: u16,
    usExemptionPacketType: u16,
};
// --------------------------------------------------------
// Type: DOT11_PRIVACY_EXEMPTION_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_PRIVACY_EXEMPTION_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    PrivacyExemptionEntries: ?[*]DOT11_PRIVACY_EXEMPTION,
};
// --------------------------------------------------------
// Type: DOT11_AUTH_ALGORITHM_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_AUTH_ALGORITHM_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    AlgorithmIds: ?[*]DOT11_AUTH_ALGORITHM,
};
// --------------------------------------------------------
// Type: DOT11_AUTH_CIPHER_PAIR_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_AUTH_CIPHER_PAIR_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    AuthCipherPairs: ?[*]DOT11_AUTH_CIPHER_PAIR,
};
// --------------------------------------------------------
// Type: DOT11_CIPHER_ALGORITHM_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_CIPHER_ALGORITHM_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    AlgorithmIds: ?[*]DOT11_CIPHER_ALGORITHM,
};
// --------------------------------------------------------
// Type: DOT11_CIPHER_DEFAULT_KEY_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_CIPHER_DEFAULT_KEY_VALUE = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uKeyIndex: u32,
    AlgorithmId: DOT11_CIPHER_ALGORITHM,
    MacAddr: ?[*]u8,
    bDelete: u8,
    bStatic: u8,
    usKeyLength: u16,
    ucKey: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_KEY_ALGO_TKIP_MIC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_KEY_ALGO_TKIP_MIC = extern struct {
    ucIV48Counter: ?[*]u8,
    ulTKIPKeyLength: u32,
    ulMICKeyLength: u32,
    ucTKIPMICKeys: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_KEY_ALGO_CCMP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_KEY_ALGO_CCMP = extern struct {
    ucIV48Counter: ?[*]u8,
    ulCCMPKeyLength: u32,
    ucCCMPKey: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_KEY_ALGO_GCMP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_KEY_ALGO_GCMP = extern struct {
    ucIV48Counter: ?[*]u8,
    ulGCMPKeyLength: u32,
    ucGCMPKey: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_KEY_ALGO_GCMP_256
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_KEY_ALGO_GCMP_256 = extern struct {
    ucIV48Counter: ?[*]u8,
    ulGCMP256KeyLength: u32,
    ucGCMP256Key: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_KEY_ALGO_BIP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_KEY_ALGO_BIP = extern struct {
    ucIPN: ?[*]u8,
    ulBIPKeyLength: u32,
    ucBIPKey: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_KEY_ALGO_BIP_GMAC_256
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_KEY_ALGO_BIP_GMAC_256 = extern struct {
    ucIPN: ?[*]u8,
    ulBIPGmac256KeyLength: u32,
    ucBIPGmac256Key: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_DIRECTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_DIRECTION = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_CIPHER_KEY_MAPPING_KEY_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_CIPHER_KEY_MAPPING_KEY_VALUE = extern struct {
    PeerMacAddr: ?[*]u8,
    AlgorithmId: DOT11_CIPHER_ALGORITHM,
    Direction: DOT11_DIRECTION,
    bDelete: u8,
    bStatic: u8,
    usKeyLength: u16,
    ucKey: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_ASSOCIATION_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_ASSOCIATION_STATE = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_ASSOCIATION_INFO_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_ASSOCIATION_INFO_EX = extern struct {
    PeerMacAddress: ?[*]u8,
    BSSID: ?[*]u8,
    usCapabilityInformation: u16,
    usListenInterval: u16,
    ucPeerSupportedRates: ?[*]u8,
    usAssociationID: u16,
    dot11AssociationState: DOT11_ASSOCIATION_STATE,
    dot11PowerMode: DOT11_POWER_MODE,
    liAssociationUpTime: LARGE_INTEGER,
    ullNumOfTxPacketSuccesses: u64,
    ullNumOfTxPacketFailures: u64,
    ullNumOfRxPacketSuccesses: u64,
    ullNumOfRxPacketFailures: u64,
};
// --------------------------------------------------------
// Type: DOT11_ASSOCIATION_INFO_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_ASSOCIATION_INFO_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11AssocInfo: ?[*]DOT11_ASSOCIATION_INFO_EX,
};
// --------------------------------------------------------
// Type: DOT11_PHY_ID_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_PHY_ID_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11PhyId: ?[*]u32,
};
// --------------------------------------------------------
// Type: DOT11_EXTSTA_CAPABILITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_EXTSTA_CAPABILITY = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uScanSSIDListSize: u32,
    uDesiredBSSIDListSize: u32,
    uDesiredSSIDListSize: u32,
    uExcludedMacAddressListSize: u32,
    uPrivacyExemptionListSize: u32,
    uKeyMappingTableSize: u32,
    uDefaultKeyTableSize: u32,
    uWEPKeyValueMaxLength: u32,
    uPMKIDCacheSize: u32,
    uMaxNumPerSTADefaultKeyTables: u32,
};
// --------------------------------------------------------
// Type: DOT11_DATA_RATE_MAPPING_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_DATA_RATE_MAPPING_ENTRY = extern struct {
    ucDataRateIndex: u8,
    ucDataRateFlag: u8,
    usDataRateValue: u16,
};
// --------------------------------------------------------
// Type: DOT11_DATA_RATE_MAPPING_TABLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_DATA_RATE_MAPPING_TABLE = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uDataRateMappingLength: u32,
    DataRateMappingEntries: ?[*]DOT11_DATA_RATE_MAPPING_ENTRY,
};
// --------------------------------------------------------
// Type: DOT11_COUNTRY_OR_REGION_STRING_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_COUNTRY_OR_REGION_STRING_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    CountryOrRegionStrings: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_PORT_STATE_NOTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_PORT_STATE_NOTIFICATION = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerMac: ?[*]u8,
    bOpen: u8,
};
// --------------------------------------------------------
// Type: DOT11_IBSS_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_IBSS_PARAMS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    bJoinOnly: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_QOS_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_QOS_PARAMS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ucEnabledQoSProtocolFlags: u8,
};
// --------------------------------------------------------
// Type: DOT11_ASSOCIATION_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_ASSOCIATION_PARAMS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    BSSID: ?[*]u8,
    uAssocRequestIEsOffset: u32,
    uAssocRequestIEsLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_FRAGMENT_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_FRAGMENT_DESCRIPTOR = extern struct {
    uOffset: u32,
    uLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_PER_MSDU_COUNTERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_PER_MSDU_COUNTERS = extern struct {
    uTransmittedFragmentCount: u32,
    uRetryCount: u32,
    uRTSSuccessCount: u32,
    uRTSFailureCount: u32,
    uACKFailureCount: u32,
};
// --------------------------------------------------------
// Type: DOT11_HRDSSS_PHY_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_HRDSSS_PHY_ATTRIBUTES = extern struct {
    bShortPreambleOptionImplemented: u8,
    bPBCCOptionImplemented: u8,
    bChannelAgilityPresent: u8,
    uHRCCAModeSupported: u32,
};
// --------------------------------------------------------
// Type: DOT11_OFDM_PHY_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_OFDM_PHY_ATTRIBUTES = extern struct {
    uFrequencyBandsSupported: u32,
};
// --------------------------------------------------------
// Type: DOT11_ERP_PHY_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_ERP_PHY_ATTRIBUTES = extern struct {
    HRDSSSAttributes: DOT11_HRDSSS_PHY_ATTRIBUTES,
    bERPPBCCOptionImplemented: u8,
    bDSSSOFDMOptionImplemented: u8,
    bShortSlotTimeOptionImplemented: u8,
};
// --------------------------------------------------------
// Type: DOT11_PHY_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_PHY_ATTRIBUTES = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PhyType: DOT11_PHY_TYPE,
    bHardwarePhyState: u8,
    bSoftwarePhyState: u8,
    bCFPollable: u8,
    uMPDUMaxLength: u32,
    TempType: DOT11_TEMP_TYPE,
    DiversitySupport: DOT11_DIVERSITY_SUPPORT,
    PhySpecificAttributes: _PhySpecificAttributes_e__Union,
    uNumberSupportedPowerLevels: u32,
    TxPowerLevels: ?[*]u32,
    uNumDataRateMappingEntries: u32,
    DataRateMappingEntries: ?[*]DOT11_DATA_RATE_MAPPING_ENTRY,
    SupportedDataRatesValue: DOT11_SUPPORTED_DATA_RATES_VALUE_V2,
    // --------------------------------------------------------
    // Type: _PhySpecificAttributes_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _PhySpecificAttributes_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: DOT11_EXTSTA_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_EXTSTA_ATTRIBUTES = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uScanSSIDListSize: u32,
    uDesiredBSSIDListSize: u32,
    uDesiredSSIDListSize: u32,
    uExcludedMacAddressListSize: u32,
    uPrivacyExemptionListSize: u32,
    uKeyMappingTableSize: u32,
    uDefaultKeyTableSize: u32,
    uWEPKeyValueMaxLength: u32,
    uPMKIDCacheSize: u32,
    uMaxNumPerSTADefaultKeyTables: u32,
    bStrictlyOrderedServiceClassImplemented: u8,
    ucSupportedQoSProtocolFlags: u8,
    bSafeModeImplemented: u8,
    uNumSupportedCountryOrRegionStrings: u32,
    pSupportedCountryOrRegionStrings: ?*u8,
    uInfraNumSupportedUcastAlgoPairs: u32,
    pInfraSupportedUcastAlgoPairs: ?*DOT11_AUTH_CIPHER_PAIR,
    uInfraNumSupportedMcastAlgoPairs: u32,
    pInfraSupportedMcastAlgoPairs: ?*DOT11_AUTH_CIPHER_PAIR,
    uAdhocNumSupportedUcastAlgoPairs: u32,
    pAdhocSupportedUcastAlgoPairs: ?*DOT11_AUTH_CIPHER_PAIR,
    uAdhocNumSupportedMcastAlgoPairs: u32,
    pAdhocSupportedMcastAlgoPairs: ?*DOT11_AUTH_CIPHER_PAIR,
    bAutoPowerSaveMode: u8,
    uMaxNetworkOffloadListSize: u32,
    bMFPCapable: u8,
    uInfraNumSupportedMcastMgmtAlgoPairs: u32,
    pInfraSupportedMcastMgmtAlgoPairs: ?*DOT11_AUTH_CIPHER_PAIR,
    bNeighborReportSupported: u8,
    bAPChannelReportSupported: u8,
    bActionFramesSupported: u8,
    bANQPQueryOffloadSupported: u8,
    bHESSIDConnectionSupported: u8,
};
// --------------------------------------------------------
// Type: DOT11_RECV_EXTENSION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_RECV_EXTENSION_INFO = extern struct {
    uVersion: u32,
    pvReserved: ?*opaque{},
    dot11PhyType: DOT11_PHY_TYPE,
    uChCenterFrequency: u32,
    lRSSI: i32,
    lRSSIMin: i32,
    lRSSIMax: i32,
    uRSSI: u32,
    ucPriority: u8,
    ucDataRate: u8,
    ucPeerMacAddress: ?[*]u8,
    dwExtendedStatus: u32,
    hWEPOffloadContext: HANDLE,
    hAuthOffloadContext: HANDLE,
    usWEPAppliedMask: u16,
    usWPAMSDUPriority: u16,
    dot11LowestIV48Counter: DOT11_IV48_COUNTER,
    usDot11LeftRWBitMap: u16,
    dot11HighestIV48Counter: DOT11_IV48_COUNTER,
    usDot11RightRWBitMap: u16,
    usNumberOfMPDUsReceived: u16,
    usNumberOfFragments: u16,
    pNdisPackets: ?[*]?*opaque{},
};
// --------------------------------------------------------
// Type: DOT11_RECV_EXTENSION_INFO_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_RECV_EXTENSION_INFO_V2 = extern struct {
    uVersion: u32,
    pvReserved: ?*opaque{},
    dot11PhyType: DOT11_PHY_TYPE,
    uChCenterFrequency: u32,
    lRSSI: i32,
    uRSSI: u32,
    ucPriority: u8,
    ucDataRate: u8,
    ucPeerMacAddress: ?[*]u8,
    dwExtendedStatus: u32,
    hWEPOffloadContext: HANDLE,
    hAuthOffloadContext: HANDLE,
    usWEPAppliedMask: u16,
    usWPAMSDUPriority: u16,
    dot11LowestIV48Counter: DOT11_IV48_COUNTER,
    usDot11LeftRWBitMap: u16,
    dot11HighestIV48Counter: DOT11_IV48_COUNTER,
    usDot11RightRWBitMap: u16,
    usNumberOfMPDUsReceived: u16,
    usNumberOfFragments: u16,
    pNdisPackets: ?[*]?*opaque{},
};
// --------------------------------------------------------
// Type: DOT11_STATUS_INDICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_STATUS_INDICATION = extern struct {
    uStatusType: u32,
    ndisStatus: i32,
};
// --------------------------------------------------------
// Type: DOT11_MPDU_MAX_LENGTH_INDICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_MPDU_MAX_LENGTH_INDICATION = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uPhyId: u32,
    uMPDUMaxLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_ASSOCIATION_START_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_ASSOCIATION_START_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    MacAddr: ?[*]u8,
    SSID: DOT11_SSID,
    uIHVDataOffset: u32,
    uIHVDataSize: u32,
};
// --------------------------------------------------------
// Type: DOT11_ENCAP_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_ENCAP_ENTRY = extern struct {
    usEtherType: u16,
    usEncapType: u16,
};
// --------------------------------------------------------
// Type: DOT11_DS_INFO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_DS_INFO = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_ASSOCIATION_COMPLETION_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_ASSOCIATION_COMPLETION_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    MacAddr: ?[*]u8,
    uStatus: u32,
    bReAssocReq: u8,
    bReAssocResp: u8,
    uAssocReqOffset: u32,
    uAssocReqSize: u32,
    uAssocRespOffset: u32,
    uAssocRespSize: u32,
    uBeaconOffset: u32,
    uBeaconSize: u32,
    uIHVDataOffset: u32,
    uIHVDataSize: u32,
    AuthAlgo: DOT11_AUTH_ALGORITHM,
    UnicastCipher: DOT11_CIPHER_ALGORITHM,
    MulticastCipher: DOT11_CIPHER_ALGORITHM,
    uActivePhyListOffset: u32,
    uActivePhyListSize: u32,
    bFourAddressSupported: u8,
    bPortAuthorized: u8,
    ucActiveQoSProtocol: u8,
    DSInfo: DOT11_DS_INFO,
    uEncapTableOffset: u32,
    uEncapTableSize: u32,
    MulticastMgmtCipher: DOT11_CIPHER_ALGORITHM,
    uAssocComebackTime: u32,
};
// --------------------------------------------------------
// Type: DOT11_CONNECTION_START_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_CONNECTION_START_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    BSSType: DOT11_BSS_TYPE,
    AdhocBSSID: ?[*]u8,
    AdhocSSID: DOT11_SSID,
};
// --------------------------------------------------------
// Type: DOT11_CONNECTION_COMPLETION_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_CONNECTION_COMPLETION_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uStatus: u32,
};
// --------------------------------------------------------
// Type: DOT11_ROAMING_START_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_ROAMING_START_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    AdhocBSSID: ?[*]u8,
    AdhocSSID: DOT11_SSID,
    uRoamingReason: u32,
};
// --------------------------------------------------------
// Type: DOT11_ROAMING_COMPLETION_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_ROAMING_COMPLETION_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uStatus: u32,
};
// --------------------------------------------------------
// Type: DOT11_DISASSOCIATION_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_DISASSOCIATION_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    MacAddr: ?[*]u8,
    uReason: u32,
    uIHVDataOffset: u32,
    uIHVDataSize: u32,
};
// --------------------------------------------------------
// Type: DOT11_TKIPMIC_FAILURE_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_TKIPMIC_FAILURE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    bDefaultKeyFailure: u8,
    uKeyIndex: u32,
    PeerMac: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_PMKID_CANDIDATE_LIST_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_PMKID_CANDIDATE_LIST_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uCandidateListSize: u32,
    uCandidateListOffset: u32,
};
// --------------------------------------------------------
// Type: DOT11_BSSID_CANDIDATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_BSSID_CANDIDATE = extern struct {
    BSSID: ?[*]u8,
    uFlags: u32,
};
// --------------------------------------------------------
// Type: DOT11_PHY_STATE_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_PHY_STATE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uPhyId: u32,
    bHardwarePhyState: u8,
    bSoftwarePhyState: u8,
};
// --------------------------------------------------------
// Type: DOT11_LINK_QUALITY_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_LINK_QUALITY_ENTRY = extern struct {
    PeerMacAddr: ?[*]u8,
    ucLinkQuality: u8,
};
// --------------------------------------------------------
// Type: DOT11_LINK_QUALITY_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_LINK_QUALITY_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uLinkQualityListSize: u32,
    uLinkQualityListOffset: u32,
};
// --------------------------------------------------------
// Type: DOT11_EXTSTA_SEND_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_EXTSTA_SEND_CONTEXT = extern struct {
    Header: NDIS_OBJECT_HEADER,
    usExemptionActionType: u16,
    uPhyId: u32,
    uDelayedSleepValue: u32,
    pvMediaSpecificInfo: ?*opaque{},
    uSendFlags: u32,
};
// --------------------------------------------------------
// Type: DOT11_EXTSTA_RECV_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_EXTSTA_RECV_CONTEXT = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uReceiveFlags: u32,
    uPhyId: u32,
    uChCenterFrequency: u32,
    usNumberOfMPDUsReceived: u16,
    lRSSI: i32,
    ucDataRate: u8,
    uSizeMediaSpecificInfo: u32,
    pvMediaSpecificInfo: ?*opaque{},
    ullTimestamp: u64,
};
// --------------------------------------------------------
// Type: DOT11_EXTAP_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_EXTAP_ATTRIBUTES = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uScanSSIDListSize: u32,
    uDesiredSSIDListSize: u32,
    uPrivacyExemptionListSize: u32,
    uAssociationTableSize: u32,
    uDefaultKeyTableSize: u32,
    uWEPKeyValueMaxLength: u32,
    bStrictlyOrderedServiceClassImplemented: u8,
    uNumSupportedCountryOrRegionStrings: u32,
    pSupportedCountryOrRegionStrings: ?*u8,
    uInfraNumSupportedUcastAlgoPairs: u32,
    pInfraSupportedUcastAlgoPairs: ?*DOT11_AUTH_CIPHER_PAIR,
    uInfraNumSupportedMcastAlgoPairs: u32,
    pInfraSupportedMcastAlgoPairs: ?*DOT11_AUTH_CIPHER_PAIR,
};
// --------------------------------------------------------
// Type: DOT11_INCOMING_ASSOC_STARTED_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_INCOMING_ASSOC_STARTED_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerMacAddr: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_INCOMING_ASSOC_REQUEST_RECEIVED_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_INCOMING_ASSOC_REQUEST_RECEIVED_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerMacAddr: ?[*]u8,
    bReAssocReq: u8,
    uAssocReqOffset: u32,
    uAssocReqSize: u32,
};
// --------------------------------------------------------
// Type: DOT11_INCOMING_ASSOC_COMPLETION_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_INCOMING_ASSOC_COMPLETION_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerMacAddr: ?[*]u8,
    uStatus: u32,
    ucErrorSource: u8,
    bReAssocReq: u8,
    bReAssocResp: u8,
    uAssocReqOffset: u32,
    uAssocReqSize: u32,
    uAssocRespOffset: u32,
    uAssocRespSize: u32,
    AuthAlgo: DOT11_AUTH_ALGORITHM,
    UnicastCipher: DOT11_CIPHER_ALGORITHM,
    MulticastCipher: DOT11_CIPHER_ALGORITHM,
    uActivePhyListOffset: u32,
    uActivePhyListSize: u32,
    uBeaconOffset: u32,
    uBeaconSize: u32,
};
// --------------------------------------------------------
// Type: DOT11_STOP_AP_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_STOP_AP_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ulReason: u32,
};
// --------------------------------------------------------
// Type: DOT11_PHY_FREQUENCY_ADOPTED_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_PHY_FREQUENCY_ADOPTED_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ulPhyId: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: DOT11_CAN_SUSTAIN_AP_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_CAN_SUSTAIN_AP_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ulReason: u32,
};
// --------------------------------------------------------
// Type: DOT11_AVAILABLE_CHANNEL_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_AVAILABLE_CHANNEL_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    uChannelNumber: ?[*]u32,
};
// --------------------------------------------------------
// Type: DOT11_AVAILABLE_FREQUENCY_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_AVAILABLE_FREQUENCY_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    uFrequencyValue: ?[*]u32,
};
// --------------------------------------------------------
// Type: DOT11_DISASSOCIATE_PEER_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_DISASSOCIATE_PEER_REQUEST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerMacAddr: ?[*]u8,
    usReason: u16,
};
// --------------------------------------------------------
// Type: DOT11_INCOMING_ASSOC_DECISION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_INCOMING_ASSOC_DECISION = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerMacAddr: ?[*]u8,
    bAccept: u8,
    usReasonCode: u16,
    uAssocResponseIEsOffset: u32,
    uAssocResponseIEsLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_INCOMING_ASSOC_DECISION_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_INCOMING_ASSOC_DECISION_V2 = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerMacAddr: ?[*]u8,
    bAccept: u8,
    usReasonCode: u16,
    uAssocResponseIEsOffset: u32,
    uAssocResponseIEsLength: u32,
    WFDStatus: u8,
};
// --------------------------------------------------------
// Type: DOT11_ADDITIONAL_IE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_ADDITIONAL_IE = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uBeaconIEsOffset: u32,
    uBeaconIEsLength: u32,
    uResponseIEsOffset: u32,
    uResponseIEsLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_PEER_STATISTICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_PEER_STATISTICS = extern struct {
    ullDecryptSuccessCount: u64,
    ullDecryptFailureCount: u64,
    ullTxPacketSuccessCount: u64,
    ullTxPacketFailureCount: u64,
    ullRxPacketSuccessCount: u64,
    ullRxPacketFailureCount: u64,
};
// --------------------------------------------------------
// Type: DOT11_PEER_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_PEER_INFO = extern struct {
    MacAddress: ?[*]u8,
    usCapabilityInformation: u16,
    AuthAlgo: DOT11_AUTH_ALGORITHM,
    UnicastCipherAlgo: DOT11_CIPHER_ALGORITHM,
    MulticastCipherAlgo: DOT11_CIPHER_ALGORITHM,
    bWpsEnabled: u8,
    usListenInterval: u16,
    ucSupportedRates: ?[*]u8,
    usAssociationID: u16,
    AssociationState: DOT11_ASSOCIATION_STATE,
    PowerMode: DOT11_POWER_MODE,
    liAssociationUpTime: LARGE_INTEGER,
    Statistics: DOT11_PEER_STATISTICS,
};
// --------------------------------------------------------
// Type: DOT11_PEER_INFO_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_PEER_INFO_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    PeerInfo: ?[*]DOT11_PEER_INFO,
};
// --------------------------------------------------------
// Type: DOT11_VWIFI_COMBINATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_VWIFI_COMBINATION = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumInfrastructure: u32,
    uNumAdhoc: u32,
    uNumSoftAP: u32,
};
// --------------------------------------------------------
// Type: DOT11_VWIFI_COMBINATION_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_VWIFI_COMBINATION_V2 = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumInfrastructure: u32,
    uNumAdhoc: u32,
    uNumSoftAP: u32,
    uNumVirtualStation: u32,
};
// --------------------------------------------------------
// Type: DOT11_VWIFI_COMBINATION_V3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_VWIFI_COMBINATION_V3 = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumInfrastructure: u32,
    uNumAdhoc: u32,
    uNumSoftAP: u32,
    uNumVirtualStation: u32,
    uNumWFDGroup: u32,
};
// --------------------------------------------------------
// Type: DOT11_VWIFI_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_VWIFI_ATTRIBUTES = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uTotalNumOfEntries: u32,
    Combinations: ?[*]DOT11_VWIFI_COMBINATION,
};
// --------------------------------------------------------
// Type: DOT11_MAC_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_MAC_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uOpmodeMask: u32,
};
// --------------------------------------------------------
// Type: DOT11_MAC_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_MAC_INFO = extern struct {
    uReserved: u32,
    uNdisPortNumber: u32,
    MacAddr: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_WFD_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WFD_ATTRIBUTES = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumConcurrentGORole: u32,
    uNumConcurrentClientRole: u32,
    WPSVersionsSupported: u32,
    bServiceDiscoverySupported: u8,
    bClientDiscoverabilitySupported: u8,
    bInfrastructureManagementSupported: u8,
    uMaxSecondaryDeviceTypeListSize: u32,
    DeviceAddress: ?[*]u8,
    uInterfaceAddressListCount: u32,
    pInterfaceAddressList: ?*u8,
    uNumSupportedCountryOrRegionStrings: u32,
    pSupportedCountryOrRegionStrings: ?*u8,
    uDiscoveryFilterListSize: u32,
    uGORoleClientTableSize: u32,
};
// --------------------------------------------------------
// Type: DOT11_WFD_DEVICE_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WFD_DEVICE_TYPE = extern struct {
    CategoryID: u16,
    SubCategoryID: u16,
    OUI: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_WPS_DEVICE_NAME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WPS_DEVICE_NAME = extern struct {
    uDeviceNameLength: u32,
    ucDeviceName: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_WFD_CONFIGURATION_TIMEOUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WFD_CONFIGURATION_TIMEOUT = extern struct {
    GOTimeout: u8,
    ClientTimeout: u8,
};
// --------------------------------------------------------
// Type: DOT11_WFD_GROUP_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WFD_GROUP_ID = extern struct {
    DeviceAddress: ?[*]u8,
    SSID: DOT11_SSID,
};
// --------------------------------------------------------
// Type: DOT11_WFD_GO_INTENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WFD_GO_INTENT = extern struct {
    _bitfield: u8,
};
// --------------------------------------------------------
// Type: DOT11_WFD_CHANNEL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WFD_CHANNEL = extern struct {
    CountryRegionString: ?[*]u8,
    OperatingClass: u8,
    ChannelNumber: u8,
};
// --------------------------------------------------------
// Type: DOT11_WPS_CONFIG_METHOD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_WPS_CONFIG_METHOD = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_WPS_DEVICE_PASSWORD_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_WPS_DEVICE_PASSWORD_ID = *opaque{
};
// --------------------------------------------------------
// Type: WFDSVC_CONNECTION_CAPABILITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WFDSVC_CONNECTION_CAPABILITY = extern struct {
    bNew: u8,
    bClient: u8,
    bGO: u8,
};
// --------------------------------------------------------
// Type: DOT11_WFD_SERVICE_HASH_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WFD_SERVICE_HASH_LIST = extern struct {
    ServiceHashCount: u16,
    ServiceHash: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_WFD_ADVERTISEMENT_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WFD_ADVERTISEMENT_ID = extern struct {
    AdvertisementID: u32,
    ServiceAddress: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_WFD_SESSION_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WFD_SESSION_ID = extern struct {
    SessionID: u32,
    SessionAddress: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_WFD_ADVERTISED_SERVICE_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WFD_ADVERTISED_SERVICE_DESCRIPTOR = extern struct {
    AdvertisementID: u32,
    ConfigMethods: u16,
    ServiceNameLength: u8,
    ServiceName: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_WFD_ADVERTISED_SERVICE_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WFD_ADVERTISED_SERVICE_LIST = extern struct {
    ServiceCount: u16,
    AdvertisedService: ?[*]DOT11_WFD_ADVERTISED_SERVICE_DESCRIPTOR,
};
// --------------------------------------------------------
// Type: DOT11_WFD_DISCOVER_COMPLETE_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WFD_DISCOVER_COMPLETE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Status: i32,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    uListOffset: u32,
    uListLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_GO_NEGOTIATION_REQUEST_SEND_COMPLETE_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_GO_NEGOTIATION_REQUEST_SEND_COMPLETE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: ?[*]u8,
    DialogToken: u8,
    Status: i32,
    uIEsOffset: u32,
    uIEsLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_RECEIVED_GO_NEGOTIATION_REQUEST_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_RECEIVED_GO_NEGOTIATION_REQUEST_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: ?[*]u8,
    DialogToken: u8,
    RequestContext: ?*opaque{},
    uIEsOffset: u32,
    uIEsLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_GO_NEGOTIATION_RESPONSE_SEND_COMPLETE_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_GO_NEGOTIATION_RESPONSE_SEND_COMPLETE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: ?[*]u8,
    DialogToken: u8,
    Status: i32,
    uIEsOffset: u32,
    uIEsLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_RECEIVED_GO_NEGOTIATION_RESPONSE_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_RECEIVED_GO_NEGOTIATION_RESPONSE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: ?[*]u8,
    DialogToken: u8,
    ResponseContext: ?*opaque{},
    uIEsOffset: u32,
    uIEsLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_GO_NEGOTIATION_CONFIRMATION_SEND_COMPLETE_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_GO_NEGOTIATION_CONFIRMATION_SEND_COMPLETE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: ?[*]u8,
    DialogToken: u8,
    Status: i32,
    uIEsOffset: u32,
    uIEsLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_RECEIVED_GO_NEGOTIATION_CONFIRMATION_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_RECEIVED_GO_NEGOTIATION_CONFIRMATION_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: ?[*]u8,
    DialogToken: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_INVITATION_REQUEST_SEND_COMPLETE_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_INVITATION_REQUEST_SEND_COMPLETE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: ?[*]u8,
    ReceiverAddress: ?[*]u8,
    DialogToken: u8,
    Status: i32,
    uIEsOffset: u32,
    uIEsLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_RECEIVED_INVITATION_REQUEST_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_RECEIVED_INVITATION_REQUEST_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    TransmitterDeviceAddress: ?[*]u8,
    BSSID: ?[*]u8,
    DialogToken: u8,
    RequestContext: ?*opaque{},
    uIEsOffset: u32,
    uIEsLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_INVITATION_RESPONSE_SEND_COMPLETE_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_INVITATION_RESPONSE_SEND_COMPLETE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ReceiverDeviceAddress: ?[*]u8,
    DialogToken: u8,
    Status: i32,
    uIEsOffset: u32,
    uIEsLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_RECEIVED_INVITATION_RESPONSE_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_RECEIVED_INVITATION_RESPONSE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    TransmitterDeviceAddress: ?[*]u8,
    BSSID: ?[*]u8,
    DialogToken: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_PROVISION_DISCOVERY_REQUEST_SEND_COMPLETE_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_PROVISION_DISCOVERY_REQUEST_SEND_COMPLETE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: ?[*]u8,
    ReceiverAddress: ?[*]u8,
    DialogToken: u8,
    Status: i32,
    uIEsOffset: u32,
    uIEsLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_RECEIVED_PROVISION_DISCOVERY_REQUEST_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_RECEIVED_PROVISION_DISCOVERY_REQUEST_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    TransmitterDeviceAddress: ?[*]u8,
    BSSID: ?[*]u8,
    DialogToken: u8,
    RequestContext: ?*opaque{},
    uIEsOffset: u32,
    uIEsLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_PROVISION_DISCOVERY_RESPONSE_SEND_COMPLETE_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_PROVISION_DISCOVERY_RESPONSE_SEND_COMPLETE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ReceiverDeviceAddress: ?[*]u8,
    DialogToken: u8,
    Status: i32,
    uIEsOffset: u32,
    uIEsLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_RECEIVED_PROVISION_DISCOVERY_RESPONSE_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_RECEIVED_PROVISION_DISCOVERY_RESPONSE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    TransmitterDeviceAddress: ?[*]u8,
    BSSID: ?[*]u8,
    DialogToken: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_ANQP_QUERY_RESULT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_ANQP_QUERY_RESULT = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_ANQP_QUERY_COMPLETE_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_ANQP_QUERY_COMPLETE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Status: DOT11_ANQP_QUERY_RESULT,
    hContext: HANDLE,
    uResponseLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_WFD_DEVICE_CAPABILITY_CONFIG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WFD_DEVICE_CAPABILITY_CONFIG = extern struct {
    Header: NDIS_OBJECT_HEADER,
    bServiceDiscoveryEnabled: u8,
    bClientDiscoverabilityEnabled: u8,
    bConcurrentOperationSupported: u8,
    bInfrastructureManagementEnabled: u8,
    bDeviceLimitReached: u8,
    bInvitationProcedureEnabled: u8,
    WPSVersionsEnabled: u32,
};
// --------------------------------------------------------
// Type: DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG = extern struct {
    Header: NDIS_OBJECT_HEADER,
    bPersistentGroupEnabled: u8,
    bIntraBSSDistributionSupported: u8,
    bCrossConnectionSupported: u8,
    bPersistentReconnectSupported: u8,
    bGroupFormationEnabled: u8,
    uMaximumGroupLimit: u32,
};
// --------------------------------------------------------
// Type: DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG_V2 = extern struct {
    Header: NDIS_OBJECT_HEADER,
    bPersistentGroupEnabled: u8,
    bIntraBSSDistributionSupported: u8,
    bCrossConnectionSupported: u8,
    bPersistentReconnectSupported: u8,
    bGroupFormationEnabled: u8,
    uMaximumGroupLimit: u32,
    bEapolKeyIpAddressAllocationSupported: u8,
};
// --------------------------------------------------------
// Type: DOT11_WFD_DEVICE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WFD_DEVICE_INFO = extern struct {
    Header: NDIS_OBJECT_HEADER,
    DeviceAddress: ?[*]u8,
    ConfigMethods: u16,
    PrimaryDeviceType: DOT11_WFD_DEVICE_TYPE,
    DeviceName: DOT11_WPS_DEVICE_NAME,
};
// --------------------------------------------------------
// Type: DOT11_WFD_SECONDARY_DEVICE_TYPE_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WFD_SECONDARY_DEVICE_TYPE_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    SecondaryDeviceTypes: ?[*]DOT11_WFD_DEVICE_TYPE,
};
// --------------------------------------------------------
// Type: DOT11_WFD_DISCOVER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_WFD_DISCOVER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_WFD_SCAN_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_WFD_SCAN_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_WFD_DISCOVER_DEVICE_FILTER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WFD_DISCOVER_DEVICE_FILTER = extern struct {
    DeviceID: ?[*]u8,
    ucBitmask: u8,
    GroupSSID: DOT11_SSID,
};
// --------------------------------------------------------
// Type: DOT11_WFD_DISCOVER_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WFD_DISCOVER_REQUEST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    DiscoverType: DOT11_WFD_DISCOVER_TYPE,
    ScanType: DOT11_WFD_SCAN_TYPE,
    uDiscoverTimeout: u32,
    uDeviceFilterListOffset: u32,
    uNumDeviceFilters: u32,
    uIEsOffset: u32,
    uIEsLength: u32,
    bForceScanLegacyNetworks: u8,
};
// --------------------------------------------------------
// Type: DOT11_WFD_DEVICE_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WFD_DEVICE_ENTRY = extern struct {
    uPhyId: u32,
    PhySpecificInfo: DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO,
    dot11BSSID: ?[*]u8,
    dot11BSSType: DOT11_BSS_TYPE,
    TransmitterAddress: ?[*]u8,
    lRSSI: i32,
    uLinkQuality: u32,
    usBeaconPeriod: u16,
    ullTimestamp: u64,
    ullBeaconHostTimestamp: u64,
    ullProbeResponseHostTimestamp: u64,
    usCapabilityInformation: u16,
    uBeaconIEsOffset: u32,
    uBeaconIEsLength: u32,
    uProbeResponseIEsOffset: u32,
    uProbeResponseIEsLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_WFD_ADDITIONAL_IE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WFD_ADDITIONAL_IE = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uBeaconIEsOffset: u32,
    uBeaconIEsLength: u32,
    uProbeResponseIEsOffset: u32,
    uProbeResponseIEsLength: u32,
    uDefaultRequestIEsOffset: u32,
    uDefaultRequestIEsLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_SEND_GO_NEGOTIATION_REQUEST_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_SEND_GO_NEGOTIATION_REQUEST_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: ?[*]u8,
    DialogToken: u8,
    uSendTimeout: u32,
    GroupOwnerIntent: DOT11_WFD_GO_INTENT,
    MinimumConfigTimeout: DOT11_WFD_CONFIGURATION_TIMEOUT,
    IntendedInterfaceAddress: ?[*]u8,
    GroupCapability: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_SEND_GO_NEGOTIATION_RESPONSE_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_SEND_GO_NEGOTIATION_RESPONSE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: ?[*]u8,
    DialogToken: u8,
    RequestContext: ?*opaque{},
    uSendTimeout: u32,
    Status: u8,
    GroupOwnerIntent: DOT11_WFD_GO_INTENT,
    MinimumConfigTimeout: DOT11_WFD_CONFIGURATION_TIMEOUT,
    IntendedInterfaceAddress: ?[*]u8,
    GroupCapability: u8,
    GroupID: DOT11_WFD_GROUP_ID,
    bUseGroupID: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_SEND_GO_NEGOTIATION_CONFIRMATION_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_SEND_GO_NEGOTIATION_CONFIRMATION_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: ?[*]u8,
    DialogToken: u8,
    ResponseContext: ?*opaque{},
    uSendTimeout: u32,
    Status: u8,
    GroupCapability: u8,
    GroupID: DOT11_WFD_GROUP_ID,
    bUseGroupID: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_WFD_INVITATION_FLAGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WFD_INVITATION_FLAGS = extern struct {
    _bitfield: u8,
};
// --------------------------------------------------------
// Type: DOT11_SEND_INVITATION_REQUEST_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_SEND_INVITATION_REQUEST_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    DialogToken: u8,
    PeerDeviceAddress: ?[*]u8,
    uSendTimeout: u32,
    MinimumConfigTimeout: DOT11_WFD_CONFIGURATION_TIMEOUT,
    InvitationFlags: DOT11_WFD_INVITATION_FLAGS,
    GroupBSSID: ?[*]u8,
    bUseGroupBSSID: u8,
    OperatingChannel: DOT11_WFD_CHANNEL,
    bUseSpecifiedOperatingChannel: u8,
    GroupID: DOT11_WFD_GROUP_ID,
    bLocalGO: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_SEND_INVITATION_RESPONSE_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_SEND_INVITATION_RESPONSE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ReceiverDeviceAddress: ?[*]u8,
    DialogToken: u8,
    RequestContext: ?*opaque{},
    uSendTimeout: u32,
    Status: u8,
    MinimumConfigTimeout: DOT11_WFD_CONFIGURATION_TIMEOUT,
    GroupBSSID: ?[*]u8,
    bUseGroupBSSID: u8,
    OperatingChannel: DOT11_WFD_CHANNEL,
    bUseSpecifiedOperatingChannel: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_SEND_PROVISION_DISCOVERY_REQUEST_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_SEND_PROVISION_DISCOVERY_REQUEST_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    DialogToken: u8,
    PeerDeviceAddress: ?[*]u8,
    uSendTimeout: u32,
    GroupCapability: u8,
    GroupID: DOT11_WFD_GROUP_ID,
    bUseGroupID: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_SEND_PROVISION_DISCOVERY_RESPONSE_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_SEND_PROVISION_DISCOVERY_RESPONSE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ReceiverDeviceAddress: ?[*]u8,
    DialogToken: u8,
    RequestContext: ?*opaque{},
    uSendTimeout: u32,
    uIEsOffset: u32,
    uIEsLength: u32,
};
// --------------------------------------------------------
// Type: DOT11_WFD_DEVICE_LISTEN_CHANNEL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WFD_DEVICE_LISTEN_CHANNEL = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ChannelNumber: u8,
};
// --------------------------------------------------------
// Type: DOT11_WFD_GROUP_START_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WFD_GROUP_START_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    AdvertisedOperatingChannel: DOT11_WFD_CHANNEL,
};
// --------------------------------------------------------
// Type: DOT11_WFD_GROUP_JOIN_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_WFD_GROUP_JOIN_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    GOOperatingChannel: DOT11_WFD_CHANNEL,
    GOConfigTime: u32,
    bInGroupFormation: u8,
    bWaitForWPSReady: u8,
};
// --------------------------------------------------------
// Type: DOT11_POWER_MGMT_AUTO_MODE_ENABLED_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_POWER_MGMT_AUTO_MODE_ENABLED_INFO = extern struct {
    Header: NDIS_OBJECT_HEADER,
    bEnabled: u8,
};
// --------------------------------------------------------
// Type: DOT11_POWER_MODE_REASON
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_POWER_MODE_REASON = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_POWER_MGMT_MODE_STATUS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_POWER_MGMT_MODE_STATUS_INFO = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PowerSaveMode: DOT11_POWER_MODE,
    uPowerSaveLevel: u32,
    Reason: DOT11_POWER_MODE_REASON,
};
// --------------------------------------------------------
// Type: DOT11_CHANNEL_HINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_CHANNEL_HINT = extern struct {
    Dot11PhyType: DOT11_PHY_TYPE,
    uChannelNumber: u32,
};
// --------------------------------------------------------
// Type: DOT11_OFFLOAD_NETWORK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_OFFLOAD_NETWORK = extern struct {
    Ssid: DOT11_SSID,
    UnicastCipher: DOT11_CIPHER_ALGORITHM,
    AuthAlgo: DOT11_AUTH_ALGORITHM,
    Dot11ChannelHints: ?[*]DOT11_CHANNEL_HINT,
};
// --------------------------------------------------------
// Type: DOT11_OFFLOAD_NETWORK_LIST_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_OFFLOAD_NETWORK_LIST_INFO = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ulFlags: u32,
    FastScanPeriod: u32,
    FastScanIterations: u32,
    SlowScanPeriod: u32,
    uNumOfEntries: u32,
    offloadNetworkList: ?[*]DOT11_OFFLOAD_NETWORK,
};
// --------------------------------------------------------
// Type: DOT11_OFFLOAD_NETWORK_STATUS_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_OFFLOAD_NETWORK_STATUS_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Status: i32,
};
// --------------------------------------------------------
// Type: DOT11_MANUFACTURING_TEST_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_MANUFACTURING_TEST_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_MANUFACTURING_TEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_MANUFACTURING_TEST = extern struct {
    dot11ManufacturingTestType: DOT11_MANUFACTURING_TEST_TYPE,
    uBufferLength: u32,
    ucBuffer: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_MANUFACTURING_SELF_TEST_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_MANUFACTURING_SELF_TEST_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_MANUFACTURING_SELF_TEST_SET_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_MANUFACTURING_SELF_TEST_SET_PARAMS = extern struct {
    SelfTestType: DOT11_MANUFACTURING_SELF_TEST_TYPE,
    uTestID: u32,
    uPinBitMask: u32,
    pvContext: ?*opaque{},
    uBufferLength: u32,
    ucBufferIn: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_MANUFACTURING_SELF_TEST_QUERY_RESULTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_MANUFACTURING_SELF_TEST_QUERY_RESULTS = extern struct {
    SelfTestType: DOT11_MANUFACTURING_SELF_TEST_TYPE,
    uTestID: u32,
    bResult: u8,
    uPinFailedBitMask: u32,
    pvContext: ?*opaque{},
    uBytesWrittenOut: u32,
    ucBufferOut: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_BAND
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_BAND = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_MANUFACTURING_FUNCTIONAL_TEST_RX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_MANUFACTURING_FUNCTIONAL_TEST_RX = extern struct {
    bEnabled: u8,
    Dot11Band: DOT11_BAND,
    uChannel: u32,
    PowerLevel: i32,
};
// --------------------------------------------------------
// Type: DOT11_MANUFACTURING_FUNCTIONAL_TEST_TX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_MANUFACTURING_FUNCTIONAL_TEST_TX = extern struct {
    bEnable: u8,
    bOpenLoop: u8,
    Dot11Band: DOT11_BAND,
    uChannel: u32,
    uSetPowerLevel: u32,
    ADCPowerLevel: i32,
};
// --------------------------------------------------------
// Type: DOT11_MANUFACTURING_FUNCTIONAL_TEST_QUERY_ADC
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_MANUFACTURING_FUNCTIONAL_TEST_QUERY_ADC = extern struct {
    Dot11Band: DOT11_BAND,
    uChannel: u32,
    ADCPowerLevel: i32,
};
// --------------------------------------------------------
// Type: DOT11_MANUFACTURING_TEST_SET_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_MANUFACTURING_TEST_SET_DATA = extern struct {
    uKey: u32,
    uOffset: u32,
    uBufferLength: u32,
    ucBufferIn: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_MANUFACTURING_TEST_QUERY_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_MANUFACTURING_TEST_QUERY_DATA = extern struct {
    uKey: u32,
    uOffset: u32,
    uBufferLength: u32,
    uBytesRead: u32,
    ucBufferOut: ?[*]u8,
};
// --------------------------------------------------------
// Type: DOT11_MANUFACTURING_TEST_SLEEP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_MANUFACTURING_TEST_SLEEP = extern struct {
    uSleepTime: u32,
    pvContext: ?*opaque{},
};
// --------------------------------------------------------
// Type: DOT11_MANUFACTURING_CALLBACK_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_MANUFACTURING_CALLBACK_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_MANUFACTURING_CALLBACK_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_MANUFACTURING_CALLBACK_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    dot11ManufacturingCallbackType: DOT11_MANUFACTURING_CALLBACK_TYPE,
    uStatus: u32,
    pvContext: ?*opaque{},
};
// --------------------------------------------------------
// Type: WLAN_PROFILE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_PROFILE_INFO = extern struct {
    strProfileName: ?[*]u16,
    dwFlags: u32,
};
// --------------------------------------------------------
// Type: DOT11_NETWORK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_NETWORK = extern struct {
    dot11Ssid: DOT11_SSID,
    dot11BssType: DOT11_BSS_TYPE,
};
// --------------------------------------------------------
// Type: WLAN_RAW_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_RAW_DATA = extern struct {
    dwDataSize: u32,
    DataBlob: ?[*]u8,
};
// --------------------------------------------------------
// Type: WLAN_RAW_DATA_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_RAW_DATA_LIST = extern struct {
    dwTotalSize: u32,
    dwNumberOfItems: u32,
    DataList: ?[*]_Anonymous_e__Struct,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        dwDataOffset: u32,
        dwDataSize: u32,
    };
};
// --------------------------------------------------------
// Type: WLAN_CONNECTION_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLAN_CONNECTION_MODE = *opaque{
};
// --------------------------------------------------------
// Type: WLAN_RATE_SET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_RATE_SET = extern struct {
    uRateSetLength: u32,
    usRateSet: ?[*]u16,
};
// --------------------------------------------------------
// Type: WLAN_AVAILABLE_NETWORK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_AVAILABLE_NETWORK = extern struct {
    strProfileName: ?[*]u16,
    dot11Ssid: DOT11_SSID,
    dot11BssType: DOT11_BSS_TYPE,
    uNumberOfBssids: u32,
    bNetworkConnectable: BOOL,
    wlanNotConnectableReason: u32,
    uNumberOfPhyTypes: u32,
    dot11PhyTypes: ?[*]DOT11_PHY_TYPE,
    bMorePhyTypes: BOOL,
    wlanSignalQuality: u32,
    bSecurityEnabled: BOOL,
    dot11DefaultAuthAlgorithm: DOT11_AUTH_ALGORITHM,
    dot11DefaultCipherAlgorithm: DOT11_CIPHER_ALGORITHM,
    dwFlags: u32,
    dwReserved: u32,
};
// --------------------------------------------------------
// Type: WLAN_AVAILABLE_NETWORK_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_AVAILABLE_NETWORK_V2 = extern struct {
    strProfileName: ?[*]u16,
    dot11Ssid: DOT11_SSID,
    dot11BssType: DOT11_BSS_TYPE,
    uNumberOfBssids: u32,
    bNetworkConnectable: BOOL,
    wlanNotConnectableReason: u32,
    uNumberOfPhyTypes: u32,
    dot11PhyTypes: ?[*]DOT11_PHY_TYPE,
    bMorePhyTypes: BOOL,
    wlanSignalQuality: u32,
    bSecurityEnabled: BOOL,
    dot11DefaultAuthAlgorithm: DOT11_AUTH_ALGORITHM,
    dot11DefaultCipherAlgorithm: DOT11_CIPHER_ALGORITHM,
    dwFlags: u32,
    AccessNetworkOptions: DOT11_ACCESSNETWORKOPTIONS,
    dot11HESSID: ?[*]u8,
    VenueInfo: DOT11_VENUEINFO,
    dwReserved: u32,
};
// --------------------------------------------------------
// Type: WLAN_BSS_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_BSS_ENTRY = extern struct {
    dot11Ssid: DOT11_SSID,
    uPhyId: u32,
    dot11Bssid: ?[*]u8,
    dot11BssType: DOT11_BSS_TYPE,
    dot11BssPhyType: DOT11_PHY_TYPE,
    lRssi: i32,
    uLinkQuality: u32,
    bInRegDomain: u8,
    usBeaconPeriod: u16,
    ullTimestamp: u64,
    ullHostTimestamp: u64,
    usCapabilityInformation: u16,
    ulChCenterFrequency: u32,
    wlanRateSet: WLAN_RATE_SET,
    ulIeOffset: u32,
    ulIeSize: u32,
};
// --------------------------------------------------------
// Type: WLAN_BSS_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_BSS_LIST = extern struct {
    dwTotalSize: u32,
    dwNumberOfItems: u32,
    wlanBssEntries: ?[*]WLAN_BSS_ENTRY,
};
// --------------------------------------------------------
// Type: WLAN_INTERFACE_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLAN_INTERFACE_STATE = *opaque{
};
// --------------------------------------------------------
// Type: WLAN_ADHOC_NETWORK_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLAN_ADHOC_NETWORK_STATE = *opaque{
};
// --------------------------------------------------------
// Type: WLAN_INTERFACE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_INTERFACE_INFO = extern struct {
    InterfaceGuid: Guid,
    strInterfaceDescription: ?[*]u16,
    isState: WLAN_INTERFACE_STATE,
};
// --------------------------------------------------------
// Type: WLAN_ASSOCIATION_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_ASSOCIATION_ATTRIBUTES = extern struct {
    dot11Ssid: DOT11_SSID,
    dot11BssType: DOT11_BSS_TYPE,
    dot11Bssid: ?[*]u8,
    dot11PhyType: DOT11_PHY_TYPE,
    uDot11PhyIndex: u32,
    wlanSignalQuality: u32,
    ulRxRate: u32,
    ulTxRate: u32,
};
// --------------------------------------------------------
// Type: WLAN_SECURITY_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_SECURITY_ATTRIBUTES = extern struct {
    bSecurityEnabled: BOOL,
    bOneXEnabled: BOOL,
    dot11AuthAlgorithm: DOT11_AUTH_ALGORITHM,
    dot11CipherAlgorithm: DOT11_CIPHER_ALGORITHM,
};
// --------------------------------------------------------
// Type: WLAN_CONNECTION_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_CONNECTION_ATTRIBUTES = extern struct {
    isState: WLAN_INTERFACE_STATE,
    wlanConnectionMode: WLAN_CONNECTION_MODE,
    strProfileName: ?[*]u16,
    wlanAssociationAttributes: WLAN_ASSOCIATION_ATTRIBUTES,
    wlanSecurityAttributes: WLAN_SECURITY_ATTRIBUTES,
};
// --------------------------------------------------------
// Type: DOT11_RADIO_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_RADIO_STATE = *opaque{
};
// --------------------------------------------------------
// Type: WLAN_PHY_RADIO_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_PHY_RADIO_STATE = extern struct {
    dwPhyIndex: u32,
    dot11SoftwareRadioState: DOT11_RADIO_STATE,
    dot11HardwareRadioState: DOT11_RADIO_STATE,
};
// --------------------------------------------------------
// Type: WLAN_RADIO_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_RADIO_STATE = extern struct {
    dwNumberOfPhys: u32,
    PhyRadioState: ?[*]WLAN_PHY_RADIO_STATE,
};
// --------------------------------------------------------
// Type: WLAN_OPERATIONAL_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLAN_OPERATIONAL_STATE = *opaque{
};
// --------------------------------------------------------
// Type: WLAN_INTERFACE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLAN_INTERFACE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WLAN_INTERFACE_CAPABILITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_INTERFACE_CAPABILITY = extern struct {
    interfaceType: WLAN_INTERFACE_TYPE,
    bDot11DSupported: BOOL,
    dwMaxDesiredSsidListSize: u32,
    dwMaxDesiredBssidListSize: u32,
    dwNumberOfSupportedPhys: u32,
    dot11PhyTypes: ?[*]DOT11_PHY_TYPE,
};
// --------------------------------------------------------
// Type: WLAN_AUTH_CIPHER_PAIR_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_AUTH_CIPHER_PAIR_LIST = extern struct {
    dwNumberOfItems: u32,
    pAuthCipherPairList: ?[*]DOT11_AUTH_CIPHER_PAIR,
};
// --------------------------------------------------------
// Type: WLAN_COUNTRY_OR_REGION_STRING_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_COUNTRY_OR_REGION_STRING_LIST = extern struct {
    dwNumberOfItems: u32,
    pCountryOrRegionStringList: ?[*]u8,
};
// --------------------------------------------------------
// Type: WLAN_PROFILE_INFO_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_PROFILE_INFO_LIST = extern struct {
    dwNumberOfItems: u32,
    dwIndex: u32,
    ProfileInfo: ?[*]WLAN_PROFILE_INFO,
};
// --------------------------------------------------------
// Type: WLAN_AVAILABLE_NETWORK_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_AVAILABLE_NETWORK_LIST = extern struct {
    dwNumberOfItems: u32,
    dwIndex: u32,
    Network: ?[*]WLAN_AVAILABLE_NETWORK,
};
// --------------------------------------------------------
// Type: WLAN_AVAILABLE_NETWORK_LIST_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_AVAILABLE_NETWORK_LIST_V2 = extern struct {
    dwNumberOfItems: u32,
    dwIndex: u32,
    Network: ?[*]WLAN_AVAILABLE_NETWORK_V2,
};
// --------------------------------------------------------
// Type: WLAN_INTERFACE_INFO_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_INTERFACE_INFO_LIST = extern struct {
    dwNumberOfItems: u32,
    dwIndex: u32,
    InterfaceInfo: ?[*]WLAN_INTERFACE_INFO,
};
// --------------------------------------------------------
// Type: DOT11_NETWORK_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DOT11_NETWORK_LIST = extern struct {
    dwNumberOfItems: u32,
    dwIndex: u32,
    Network: ?[*]DOT11_NETWORK,
};
// --------------------------------------------------------
// Type: WLAN_POWER_SETTING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLAN_POWER_SETTING = *opaque{
};
// --------------------------------------------------------
// Type: WLAN_CONNECTION_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_CONNECTION_PARAMETERS = extern struct {
    wlanConnectionMode: WLAN_CONNECTION_MODE,
    strProfile: ?*u16,
    pDot11Ssid: ?*DOT11_SSID,
    pDesiredBssidList: ?*DOT11_BSSID_LIST,
    dot11BssType: DOT11_BSS_TYPE,
    dwFlags: u32,
};
// --------------------------------------------------------
// Type: WLAN_CONNECTION_PARAMETERS_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_CONNECTION_PARAMETERS_V2 = extern struct {
    wlanConnectionMode: WLAN_CONNECTION_MODE,
    strProfile: ?*u16,
    pDot11Ssid: ?*DOT11_SSID,
    pDot11Hessid: ?*u8,
    pDesiredBssidList: ?*DOT11_BSSID_LIST,
    dot11BssType: DOT11_BSS_TYPE,
    dwFlags: u32,
    pDot11AccessNetworkOptions: ?*DOT11_ACCESSNETWORKOPTIONS,
};
// --------------------------------------------------------
// Type: WLAN_MSM_NOTIFICATION_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_MSM_NOTIFICATION_DATA = extern struct {
    wlanConnectionMode: WLAN_CONNECTION_MODE,
    strProfileName: ?[*]u16,
    dot11Ssid: DOT11_SSID,
    dot11BssType: DOT11_BSS_TYPE,
    dot11MacAddr: ?[*]u8,
    bSecurityEnabled: BOOL,
    bFirstPeer: BOOL,
    bLastPeer: BOOL,
    wlanReasonCode: u32,
};
// --------------------------------------------------------
// Type: WLAN_CONNECTION_NOTIFICATION_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_CONNECTION_NOTIFICATION_DATA = extern struct {
    wlanConnectionMode: WLAN_CONNECTION_MODE,
    strProfileName: ?[*]u16,
    dot11Ssid: DOT11_SSID,
    dot11BssType: DOT11_BSS_TYPE,
    bSecurityEnabled: BOOL,
    wlanReasonCode: u32,
    dwFlags: u32,
    strProfileXml: ?[*]u16,
};
// --------------------------------------------------------
// Type: WLAN_DEVICE_SERVICE_NOTIFICATION_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_DEVICE_SERVICE_NOTIFICATION_DATA = extern struct {
    DeviceService: Guid,
    dwOpCode: u32,
    dwDataSize: u32,
    DataBlob: ?[*]u8,
};
// --------------------------------------------------------
// Type: WLAN_NOTIFICATION_ACM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLAN_NOTIFICATION_ACM = *opaque{
};
// --------------------------------------------------------
// Type: WLAN_NOTIFICATION_MSM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLAN_NOTIFICATION_MSM = *opaque{
};
// --------------------------------------------------------
// Type: WLAN_NOTIFICATION_SECURITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLAN_NOTIFICATION_SECURITY = *opaque{
};
// --------------------------------------------------------
// Type: WLAN_NOTIFICATION_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLAN_NOTIFICATION_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WLAN_OPCODE_VALUE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLAN_OPCODE_VALUE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WLAN_INTF_OPCODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLAN_INTF_OPCODE = *opaque{
};
// --------------------------------------------------------
// Type: WLAN_AUTOCONF_OPCODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLAN_AUTOCONF_OPCODE = *opaque{
};
// --------------------------------------------------------
// Type: WLAN_IHV_CONTROL_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLAN_IHV_CONTROL_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WLAN_FILTER_LIST_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLAN_FILTER_LIST_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WLAN_PHY_FRAME_STATISTICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_PHY_FRAME_STATISTICS = extern struct {
    ullTransmittedFrameCount: u64,
    ullMulticastTransmittedFrameCount: u64,
    ullFailedCount: u64,
    ullRetryCount: u64,
    ullMultipleRetryCount: u64,
    ullMaxTXLifetimeExceededCount: u64,
    ullTransmittedFragmentCount: u64,
    ullRTSSuccessCount: u64,
    ullRTSFailureCount: u64,
    ullACKFailureCount: u64,
    ullReceivedFrameCount: u64,
    ullMulticastReceivedFrameCount: u64,
    ullPromiscuousReceivedFrameCount: u64,
    ullMaxRXLifetimeExceededCount: u64,
    ullFrameDuplicateCount: u64,
    ullReceivedFragmentCount: u64,
    ullPromiscuousReceivedFragmentCount: u64,
    ullFCSErrorCount: u64,
};
// --------------------------------------------------------
// Type: WLAN_MAC_FRAME_STATISTICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_MAC_FRAME_STATISTICS = extern struct {
    ullTransmittedFrameCount: u64,
    ullReceivedFrameCount: u64,
    ullWEPExcludedCount: u64,
    ullTKIPLocalMICFailures: u64,
    ullTKIPReplays: u64,
    ullTKIPICVErrorCount: u64,
    ullCCMPReplays: u64,
    ullCCMPDecryptErrors: u64,
    ullWEPUndecryptableCount: u64,
    ullWEPICVErrorCount: u64,
    ullDecryptSuccessCount: u64,
    ullDecryptFailureCount: u64,
};
// --------------------------------------------------------
// Type: WLAN_STATISTICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_STATISTICS = extern struct {
    ullFourWayHandshakeFailures: u64,
    ullTKIPCounterMeasuresInvoked: u64,
    ullReserved: u64,
    MacUcastCounters: WLAN_MAC_FRAME_STATISTICS,
    MacMcastCounters: WLAN_MAC_FRAME_STATISTICS,
    dwNumberOfPhys: u32,
    PhyCounters: ?[*]WLAN_PHY_FRAME_STATISTICS,
};
// --------------------------------------------------------
// Type: WLAN_SECURABLE_OBJECT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLAN_SECURABLE_OBJECT = *opaque{
};
// --------------------------------------------------------
// Type: WLAN_DEVICE_SERVICE_GUID_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_DEVICE_SERVICE_GUID_LIST = extern struct {
    dwNumberOfItems: u32,
    dwIndex: u32,
    DeviceService: ?[*]Guid,
};
// --------------------------------------------------------
// Type: WFD_ROLE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WFD_ROLE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WFD_GROUP_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WFD_GROUP_ID = extern struct {
    DeviceAddress: ?[*]u8,
    GroupSSID: DOT11_SSID,
};
// --------------------------------------------------------
// Type: WL_DISPLAY_PAGES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WL_DISPLAY_PAGES = *opaque{
};
// --------------------------------------------------------
// Type: WLAN_HOSTED_NETWORK_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLAN_HOSTED_NETWORK_STATE = *opaque{
};
// --------------------------------------------------------
// Type: WLAN_HOSTED_NETWORK_REASON
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLAN_HOSTED_NETWORK_REASON = *opaque{
};
// --------------------------------------------------------
// Type: WLAN_HOSTED_NETWORK_PEER_AUTH_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLAN_HOSTED_NETWORK_PEER_AUTH_STATE = *opaque{
};
// --------------------------------------------------------
// Type: WLAN_HOSTED_NETWORK_PEER_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_HOSTED_NETWORK_PEER_STATE = extern struct {
    PeerMacAddress: ?[*]u8,
    PeerAuthState: WLAN_HOSTED_NETWORK_PEER_AUTH_STATE,
};
// --------------------------------------------------------
// Type: WLAN_HOSTED_NETWORK_RADIO_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_HOSTED_NETWORK_RADIO_STATE = extern struct {
    dot11SoftwareRadioState: DOT11_RADIO_STATE,
    dot11HardwareRadioState: DOT11_RADIO_STATE,
};
// --------------------------------------------------------
// Type: WLAN_HOSTED_NETWORK_NOTIFICATION_CODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLAN_HOSTED_NETWORK_NOTIFICATION_CODE = *opaque{
};
// --------------------------------------------------------
// Type: WLAN_HOSTED_NETWORK_STATE_CHANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_HOSTED_NETWORK_STATE_CHANGE = extern struct {
    OldState: WLAN_HOSTED_NETWORK_STATE,
    NewState: WLAN_HOSTED_NETWORK_STATE,
    StateChangeReason: WLAN_HOSTED_NETWORK_REASON,
};
// --------------------------------------------------------
// Type: WLAN_HOSTED_NETWORK_DATA_PEER_STATE_CHANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_HOSTED_NETWORK_DATA_PEER_STATE_CHANGE = extern struct {
    OldState: WLAN_HOSTED_NETWORK_PEER_STATE,
    NewState: WLAN_HOSTED_NETWORK_PEER_STATE,
    PeerStateChangeReason: WLAN_HOSTED_NETWORK_REASON,
};
// --------------------------------------------------------
// Type: WLAN_HOSTED_NETWORK_OPCODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WLAN_HOSTED_NETWORK_OPCODE = *opaque{
};
// --------------------------------------------------------
// Type: WLAN_HOSTED_NETWORK_CONNECTION_SETTINGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_HOSTED_NETWORK_CONNECTION_SETTINGS = extern struct {
    hostedNetworkSSID: DOT11_SSID,
    dwMaxNumberOfPeers: u32,
};
// --------------------------------------------------------
// Type: WLAN_HOSTED_NETWORK_SECURITY_SETTINGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_HOSTED_NETWORK_SECURITY_SETTINGS = extern struct {
    dot11AuthAlgo: DOT11_AUTH_ALGORITHM,
    dot11CipherAlgo: DOT11_CIPHER_ALGORITHM,
};
// --------------------------------------------------------
// Type: WLAN_HOSTED_NETWORK_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WLAN_HOSTED_NETWORK_STATUS = extern struct {
    HostedNetworkState: WLAN_HOSTED_NETWORK_STATE,
    IPDeviceID: Guid,
    wlanHostedNetworkBSSID: ?[*]u8,
    dot11PhyType: DOT11_PHY_TYPE,
    ulChannelFrequency: u32,
    dwNumberOfPeers: u32,
    PeerList: ?[*]WLAN_HOSTED_NETWORK_PEER_STATE,
};
// --------------------------------------------------------
// Type: WFD_OPEN_SESSION_COMPLETE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WFD_OPEN_SESSION_COMPLETE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: ONEX_AUTH_IDENTITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ONEX_AUTH_IDENTITY = *opaque{
};
// --------------------------------------------------------
// Type: ONEX_AUTH_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ONEX_AUTH_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: ONEX_REASON_CODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ONEX_REASON_CODE = *opaque{
};
// --------------------------------------------------------
// Type: ONEX_NOTIFICATION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ONEX_NOTIFICATION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: ONEX_AUTH_RESTART_REASON
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ONEX_AUTH_RESTART_REASON = *opaque{
};
// --------------------------------------------------------
// Type: ONEX_VARIABLE_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ONEX_VARIABLE_BLOB = extern struct {
    dwSize: u32,
    dwOffset: u32,
};
// --------------------------------------------------------
// Type: ONEX_AUTH_PARAMS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ONEX_AUTH_PARAMS = extern struct {
    fUpdatePending: BOOL,
    oneXConnProfile: ONEX_VARIABLE_BLOB,
    authIdentity: ONEX_AUTH_IDENTITY,
    dwQuarantineState: u32,
    _bitfield: u32,
    dwSessionId: u32,
    hUserToken: HANDLE,
    OneXUserProfile: ONEX_VARIABLE_BLOB,
    Identity: ONEX_VARIABLE_BLOB,
    UserName: ONEX_VARIABLE_BLOB,
    Domain: ONEX_VARIABLE_BLOB,
};
// --------------------------------------------------------
// Type: ONEX_EAP_ERROR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ONEX_EAP_ERROR = extern struct {
    dwWinError: u32,
    type: EAP_METHOD_TYPE,
    dwReasonCode: u32,
    rootCauseGuid: Guid,
    repairGuid: Guid,
    helpLinkGuid: Guid,
    _bitfield: u32,
    RootCauseString: ONEX_VARIABLE_BLOB,
    RepairString: ONEX_VARIABLE_BLOB,
};
// --------------------------------------------------------
// Type: ONEX_STATUS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ONEX_STATUS = extern struct {
    authStatus: ONEX_AUTH_STATUS,
    dwReason: u32,
    dwError: u32,
};
// --------------------------------------------------------
// Type: ONEX_EAP_METHOD_BACKEND_SUPPORT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ONEX_EAP_METHOD_BACKEND_SUPPORT = *opaque{
};
// --------------------------------------------------------
// Type: ONEX_RESULT_UPDATE_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ONEX_RESULT_UPDATE_DATA = extern struct {
    oneXStatus: ONEX_STATUS,
    BackendSupport: ONEX_EAP_METHOD_BACKEND_SUPPORT,
    fBackendEngaged: BOOL,
    _bitfield: u32,
    authParams: ONEX_VARIABLE_BLOB,
    eapError: ONEX_VARIABLE_BLOB,
};
// --------------------------------------------------------
// Type: ONEX_USER_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ONEX_USER_INFO = extern struct {
    authIdentity: ONEX_AUTH_IDENTITY,
    _bitfield: u32,
    UserName: ONEX_VARIABLE_BLOB,
    DomainName: ONEX_VARIABLE_BLOB,
};
// --------------------------------------------------------
// Type: Dot11AdHocManager
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const Dot11AdHocManager = opaque {
};
// --------------------------------------------------------
// Type: DOT11_ADHOC_CIPHER_ALGORITHM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_ADHOC_CIPHER_ALGORITHM = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_ADHOC_AUTH_ALGORITHM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_ADHOC_AUTH_ALGORITHM = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_ADHOC_NETWORK_CONNECTION_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_ADHOC_NETWORK_CONNECTION_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: DOT11_ADHOC_CONNECT_FAIL_REASON
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DOT11_ADHOC_CONNECT_FAIL_REASON = *opaque{
};
// --------------------------------------------------------
// Type: IDot11AdHocManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDot11AdHocManager = *opaque{
    // TODO: Method 'CreateNetwork'
    // TODO: Method 'CommitCreatedNetwork'
    // TODO: Method 'GetIEnumDot11AdHocNetworks'
    // TODO: Method 'GetIEnumDot11AdHocInterfaces'
    // TODO: Method 'GetNetwork'
};
// --------------------------------------------------------
// Type: IDot11AdHocManagerNotificationSink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDot11AdHocManagerNotificationSink = *opaque{
    // TODO: Method 'OnNetworkAdd'
    // TODO: Method 'OnNetworkRemove'
    // TODO: Method 'OnInterfaceAdd'
    // TODO: Method 'OnInterfaceRemove'
};
// --------------------------------------------------------
// Type: IEnumDot11AdHocNetworks
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumDot11AdHocNetworks = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IDot11AdHocNetwork
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDot11AdHocNetwork = *opaque{
    // TODO: Method 'GetStatus'
    // TODO: Method 'GetSSID'
    // TODO: Method 'HasProfile'
    // TODO: Method 'GetProfileName'
    // TODO: Method 'DeleteProfile'
    // TODO: Method 'GetSignalQuality'
    // TODO: Method 'GetSecuritySetting'
    // TODO: Method 'GetContextGuid'
    // TODO: Method 'GetSignature'
    // TODO: Method 'GetInterface'
    // TODO: Method 'Connect'
    // TODO: Method 'Disconnect'
};
// --------------------------------------------------------
// Type: IDot11AdHocNetworkNotificationSink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDot11AdHocNetworkNotificationSink = *opaque{
    // TODO: Method 'OnStatusChange'
    // TODO: Method 'OnConnectFail'
};
// --------------------------------------------------------
// Type: IDot11AdHocInterface
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDot11AdHocInterface = *opaque{
    // TODO: Method 'GetDeviceSignature'
    // TODO: Method 'GetFriendlyName'
    // TODO: Method 'IsDot11d'
    // TODO: Method 'IsAdHocCapable'
    // TODO: Method 'IsRadioOn'
    // TODO: Method 'GetActiveNetwork'
    // TODO: Method 'GetIEnumSecuritySettings'
    // TODO: Method 'GetIEnumDot11AdHocNetworks'
    // TODO: Method 'GetStatus'
};
// --------------------------------------------------------
// Type: IEnumDot11AdHocInterfaces
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumDot11AdHocInterfaces = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IEnumDot11AdHocSecuritySettings
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumDot11AdHocSecuritySettings = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IDot11AdHocSecuritySettings
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDot11AdHocSecuritySettings = *opaque{
    // TODO: Method 'GetDot11AuthAlgorithm'
    // TODO: Method 'GetDot11CipherAlgorithm'
};
// --------------------------------------------------------
// Type: IDot11AdHocInterfaceNotificationSink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDot11AdHocInterfaceNotificationSink = *opaque{
    // TODO: Method 'OnConnectionStatusChange'
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanOpenHandle(
    dwClientVersion: u32,
    pReserved: ?*opaque{},
    pdwNegotiatedVersion: ?*u32,
    phClientHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanCloseHandle(
    hClientHandle: HANDLE,
    pReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanEnumInterfaces(
    hClientHandle: HANDLE,
    pReserved: ?*opaque{},
    ppInterfaceList: ?*?*WLAN_INTERFACE_INFO_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanSetAutoConfigParameter(
    hClientHandle: HANDLE,
    OpCode: WLAN_AUTOCONF_OPCODE,
    dwDataSize: u32,
    pData: ?*opaque{},
    pReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanQueryAutoConfigParameter(
    hClientHandle: HANDLE,
    OpCode: WLAN_AUTOCONF_OPCODE,
    pReserved: ?*opaque{},
    pdwDataSize: ?*u32,
    ppData: ?*?*opaque{},
    pWlanOpcodeValueType: ?*WLAN_OPCODE_VALUE_TYPE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanGetInterfaceCapability(
    hClientHandle: HANDLE,
    pInterfaceGuid: ?*Guid,
    pReserved: ?*opaque{},
    ppCapability: ?*?*WLAN_INTERFACE_CAPABILITY,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanSetInterface(
    hClientHandle: HANDLE,
    pInterfaceGuid: ?*Guid,
    OpCode: WLAN_INTF_OPCODE,
    dwDataSize: u32,
    pData: ?*opaque{},
    pReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanQueryInterface(
    hClientHandle: HANDLE,
    pInterfaceGuid: ?*Guid,
    OpCode: WLAN_INTF_OPCODE,
    pReserved: ?*opaque{},
    pdwDataSize: ?*u32,
    ppData: ?*?*opaque{},
    pWlanOpcodeValueType: ?*WLAN_OPCODE_VALUE_TYPE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanIhvControl(
    hClientHandle: HANDLE,
    pInterfaceGuid: ?*Guid,
    Type: WLAN_IHV_CONTROL_TYPE,
    dwInBufferSize: u32,
    pInBuffer: ?*opaque{},
    dwOutBufferSize: u32,
    pOutBuffer: ?*opaque{},
    pdwBytesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanScan(
    hClientHandle: HANDLE,
    pInterfaceGuid: ?*Guid,
    pDot11Ssid: ?*DOT11_SSID,
    pIeData: ?*WLAN_RAW_DATA,
    pReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanGetAvailableNetworkList(
    hClientHandle: HANDLE,
    pInterfaceGuid: ?*Guid,
    dwFlags: u32,
    pReserved: ?*opaque{},
    ppAvailableNetworkList: ?*?*WLAN_AVAILABLE_NETWORK_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanGetAvailableNetworkList2(
    hClientHandle: HANDLE,
    pInterfaceGuid: ?*Guid,
    dwFlags: u32,
    pReserved: ?*opaque{},
    ppAvailableNetworkList: ?*?*WLAN_AVAILABLE_NETWORK_LIST_V2,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanGetNetworkBssList(
    hClientHandle: HANDLE,
    pInterfaceGuid: ?*Guid,
    pDot11Ssid: ?*DOT11_SSID,
    dot11BssType: DOT11_BSS_TYPE,
    bSecurityEnabled: BOOL,
    pReserved: ?*opaque{},
    ppWlanBssList: ?*?*WLAN_BSS_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanConnect(
    hClientHandle: HANDLE,
    pInterfaceGuid: ?*Guid,
    pConnectionParameters: ?*WLAN_CONNECTION_PARAMETERS,
    pReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanConnect2(
    hClientHandle: HANDLE,
    pInterfaceGuid: ?*Guid,
    pConnectionParameters: ?*WLAN_CONNECTION_PARAMETERS_V2,
    pReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanDisconnect(
    hClientHandle: HANDLE,
    pInterfaceGuid: ?*Guid,
    pReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanRegisterNotification(
    hClientHandle: HANDLE,
    dwNotifSource: u32,
    bIgnoreDuplicate: BOOL,
    funcCallback: WLAN_NOTIFICATION_CALLBACK,
    pCallbackContext: ?*opaque{},
    pReserved: ?*opaque{},
    pdwPrevNotifSource: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanGetProfile(
    hClientHandle: HANDLE,
    pInterfaceGuid: ?*Guid,
    strProfileName: ?*u16,
    pReserved: ?*opaque{},
    pstrProfileXml: ?*?*u16,
    pdwFlags: ?*u32,
    pdwGrantedAccess: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanSetProfileEapUserData(
    hClientHandle: HANDLE,
    pInterfaceGuid: ?*Guid,
    strProfileName: ?*u16,
    eapType: EAP_METHOD_TYPE,
    dwFlags: u32,
    dwEapUserDataSize: u32,
    pbEapUserData: ?*u8,
    pReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanSetProfileEapXmlUserData(
    hClientHandle: HANDLE,
    pInterfaceGuid: ?*Guid,
    strProfileName: ?*u16,
    dwFlags: u32,
    strEapXmlUserData: ?*u16,
    pReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanSetProfile(
    hClientHandle: HANDLE,
    pInterfaceGuid: ?*Guid,
    dwFlags: u32,
    strProfileXml: ?*u16,
    strAllUserProfileSecurity: ?*u16,
    bOverwrite: BOOL,
    pReserved: ?*opaque{},
    pdwReasonCode: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanDeleteProfile(
    hClientHandle: HANDLE,
    pInterfaceGuid: ?*Guid,
    strProfileName: ?*u16,
    pReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanRenameProfile(
    hClientHandle: HANDLE,
    pInterfaceGuid: ?*Guid,
    strOldProfileName: ?*u16,
    strNewProfileName: ?*u16,
    pReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanGetProfileList(
    hClientHandle: HANDLE,
    pInterfaceGuid: ?*Guid,
    pReserved: ?*opaque{},
    ppProfileList: ?*?*WLAN_PROFILE_INFO_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanSetProfileList(
    hClientHandle: HANDLE,
    pInterfaceGuid: ?*Guid,
    dwItems: u32,
    strProfileNames: ?*?*u16,
    pReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanSetProfilePosition(
    hClientHandle: HANDLE,
    pInterfaceGuid: ?*Guid,
    strProfileName: ?*u16,
    dwPosition: u32,
    pReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanSetProfileCustomUserData(
    hClientHandle: HANDLE,
    pInterfaceGuid: ?*Guid,
    strProfileName: ?*u16,
    dwDataSize: u32,
    pData: ?*u8,
    pReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanGetProfileCustomUserData(
    hClientHandle: HANDLE,
    pInterfaceGuid: ?*Guid,
    strProfileName: ?*u16,
    pReserved: ?*opaque{},
    pdwDataSize: ?*u32,
    ppData: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanSetFilterList(
    hClientHandle: HANDLE,
    wlanFilterListType: WLAN_FILTER_LIST_TYPE,
    pNetworkList: ?*DOT11_NETWORK_LIST,
    pReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanGetFilterList(
    hClientHandle: HANDLE,
    wlanFilterListType: WLAN_FILTER_LIST_TYPE,
    pReserved: ?*opaque{},
    ppNetworkList: ?*?*DOT11_NETWORK_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanSetPsdIEDataList(
    hClientHandle: HANDLE,
    strFormat: ?*u16,
    pPsdIEDataList: ?*WLAN_RAW_DATA_LIST,
    pReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanSaveTemporaryProfile(
    hClientHandle: HANDLE,
    pInterfaceGuid: ?*Guid,
    strProfileName: ?*u16,
    strAllUserProfileSecurity: ?*u16,
    dwFlags: u32,
    bOverWrite: BOOL,
    pReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanDeviceServiceCommand(
    hClientHandle: HANDLE,
    pInterfaceGuid: ?*Guid,
    pDeviceServiceGuid: ?*Guid,
    dwOpCode: u32,
    dwInBufferSize: u32,
    pInBuffer: ?*opaque{},
    dwOutBufferSize: u32,
    pOutBuffer: ?*opaque{},
    pdwBytesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanGetSupportedDeviceServices(
    hClientHandle: HANDLE,
    pInterfaceGuid: ?*Guid,
    ppDevSvcGuidList: ?*?*WLAN_DEVICE_SERVICE_GUID_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanRegisterDeviceServiceNotification(
    hClientHandle: HANDLE,
    pDevSvcGuidList: ?*WLAN_DEVICE_SERVICE_GUID_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanExtractPsdIEDataList(
    hClientHandle: HANDLE,
    dwIeDataSize: u32,
    pRawIeData: ?*u8,
    strFormat: ?*u16,
    pReserved: ?*opaque{},
    ppPsdIEDataList: ?*?*WLAN_RAW_DATA_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanReasonCodeToString(
    dwReasonCode: u32,
    dwBufferSize: u32,
    pStringBuffer: ?*u16,
    pReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "wlanapi" fn WlanAllocateMemory(
    dwMemorySize: u32,
) callconv(@import("std").os.windows.WINAPI) ?*opaque{};

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanFreeMemory(
    pMemory: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanSetSecuritySettings(
    hClientHandle: HANDLE,
    SecurableObject: WLAN_SECURABLE_OBJECT,
    strModifiedSDDL: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanGetSecuritySettings(
    hClientHandle: HANDLE,
    SecurableObject: WLAN_SECURABLE_OBJECT,
    pValueType: ?*WLAN_OPCODE_VALUE_TYPE,
    pstrCurrentSDDL: ?*?*u16,
    pdwGrantedAccess: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanUIEditProfile(
    dwClientVersion: u32,
    wstrProfileName: ?*u16,
    pInterfaceGuid: ?*Guid,
    hWnd: HWND,
    wlStartPage: WL_DISPLAY_PAGES,
    pReserved: ?*opaque{},
    pWlanReasonCode: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanHostedNetworkStartUsing(
    hClientHandle: HANDLE,
    pFailReason: ?*WLAN_HOSTED_NETWORK_REASON,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanHostedNetworkStopUsing(
    hClientHandle: HANDLE,
    pFailReason: ?*WLAN_HOSTED_NETWORK_REASON,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanHostedNetworkForceStart(
    hClientHandle: HANDLE,
    pFailReason: ?*WLAN_HOSTED_NETWORK_REASON,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanHostedNetworkForceStop(
    hClientHandle: HANDLE,
    pFailReason: ?*WLAN_HOSTED_NETWORK_REASON,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanHostedNetworkQueryProperty(
    hClientHandle: HANDLE,
    OpCode: WLAN_HOSTED_NETWORK_OPCODE,
    pdwDataSize: ?*u32,
    ppvData: ?*?*opaque{},
    pWlanOpcodeValueType: ?*WLAN_OPCODE_VALUE_TYPE,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanHostedNetworkSetProperty(
    hClientHandle: HANDLE,
    OpCode: WLAN_HOSTED_NETWORK_OPCODE,
    dwDataSize: u32,
    pvData: ?*opaque{},
    pFailReason: ?*WLAN_HOSTED_NETWORK_REASON,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanHostedNetworkInitSettings(
    hClientHandle: HANDLE,
    pFailReason: ?*WLAN_HOSTED_NETWORK_REASON,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanHostedNetworkRefreshSecuritySettings(
    hClientHandle: HANDLE,
    pFailReason: ?*WLAN_HOSTED_NETWORK_REASON,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanHostedNetworkQueryStatus(
    hClientHandle: HANDLE,
    ppWlanHostedNetworkStatus: ?*?*WLAN_HOSTED_NETWORK_STATUS,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanHostedNetworkSetSecondaryKey(
    hClientHandle: HANDLE,
    dwKeyLength: u32,
    pucKeyData: ?*u8,
    bIsPassPhrase: BOOL,
    bPersistent: BOOL,
    pFailReason: ?*WLAN_HOSTED_NETWORK_REASON,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanHostedNetworkQuerySecondaryKey(
    hClientHandle: HANDLE,
    pdwKeyLength: ?*u32,
    ppucKeyData: ?*?*u8,
    pbIsPassPhrase: ?*i32,
    pbPersistent: ?*i32,
    pFailReason: ?*WLAN_HOSTED_NETWORK_REASON,
    pvReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WlanRegisterVirtualStationNotification(
    hClientHandle: HANDLE,
    bRegister: BOOL,
    pReserved: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WFDOpenHandle(
    dwClientVersion: u32,
    pdwNegotiatedVersion: ?*u32,
    phClientHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WFDCloseHandle(
    hClientHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WFDStartOpenSession(
    hClientHandle: HANDLE,
    pDeviceAddress: ?*?*u8,
    pvContext: ?*opaque{},
    pfnCallback: WFD_OPEN_SESSION_COMPLETE_CALLBACK,
    phSessionHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WFDCancelOpenSession(
    hSessionHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WFDOpenLegacySession(
    hClientHandle: HANDLE,
    pLegacyMacAddress: ?*?*u8,
    phSessionHandle: ?*HANDLE,
    pGuidSessionInterface: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WFDCloseSession(
    hSessionHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "wlanapi" fn WFDUpdateDeviceVisibility(
    pDeviceAddress: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const LARGE_INTEGER = @import("systemservices.zig").LARGE_INTEGER;
const HANDLE = @import("systemservices.zig").HANDLE;
const NET_IF_MEDIA_CONNECT_STATE = @import("networkdrivers.zig").NET_IF_MEDIA_CONNECT_STATE;
const NET_IF_MEDIA_DUPLEX_STATE = @import("networkdrivers.zig").NET_IF_MEDIA_DUPLEX_STATE;
const NET_IF_OPER_STATUS = @import("networkdrivers.zig").NET_IF_OPER_STATUS;
const NET_LUID_LH = @import("iphelper.zig").NET_LUID_LH;
const NET_IF_DIRECTION_TYPE = @import("networkdrivers.zig").NET_IF_DIRECTION_TYPE;
const BOOL = @import("systemservices.zig").BOOL;
const EAP_METHOD_TYPE = @import("extensibleauthenticationprotocol.zig").EAP_METHOD_TYPE;
const HWND = @import("windowsandmessaging.zig").HWND;

test "" {
    const constant_export_count = 0;
    const type_export_count = 456;
    const func_count = 61;
    const unicode_alias_count = 0;
    const type_import_count = 11;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
