//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: PERF_COUNTERSET_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERF_COUNTERSET_INFO = extern struct {
    CounterSetGuid: Guid,
    ProviderGuid: Guid,
    NumCounters: u32,
    InstanceType: u32,
};
// --------------------------------------------------------
// Type: PERF_COUNTER_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERF_COUNTER_INFO = extern struct {
    CounterId: u32,
    Type: u32,
    Attrib: u64,
    Size: u32,
    DetailLevel: u32,
    Scale: i32,
    Offset: u32,
};
// --------------------------------------------------------
// Type: PERF_COUNTERSET_INSTANCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERF_COUNTERSET_INSTANCE = extern struct {
    CounterSetGuid: Guid,
    dwSize: u32,
    InstanceId: u32,
    InstanceNameOffset: u32,
    InstanceNameSize: u32,
};
// --------------------------------------------------------
// Type: PERF_COUNTER_IDENTITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERF_COUNTER_IDENTITY = extern struct {
    CounterSetGuid: Guid,
    BufferSize: u32,
    CounterId: u32,
    InstanceId: u32,
    MachineOffset: u32,
    NameOffset: u32,
    Reserved: u32,
};
// --------------------------------------------------------
// Type: PERFLIBREQUEST
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PERFLIBREQUEST = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PERF_MEM_ALLOC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PERF_MEM_ALLOC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PERF_MEM_FREE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PERF_MEM_FREE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PERF_PROVIDER_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERF_PROVIDER_CONTEXT = extern struct {
    ContextSize: u32,
    Reserved: u32,
    ControlCallback: PERFLIBREQUEST,
    MemAllocRoutine: PERF_MEM_ALLOC,
    MemFreeRoutine: PERF_MEM_FREE,
    pMemContext: ?*opaque{},
};
// --------------------------------------------------------
// Type: PERF_INSTANCE_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERF_INSTANCE_HEADER = extern struct {
    Size: u32,
    InstanceId: u32,
};
// --------------------------------------------------------
// Type: PerfRegInfoType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PerfRegInfoType = *opaque{
};
// --------------------------------------------------------
// Type: PERF_COUNTERSET_REG_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERF_COUNTERSET_REG_INFO = extern struct {
    CounterSetGuid: Guid,
    CounterSetType: u32,
    DetailLevel: u32,
    NumCounters: u32,
    InstanceType: u32,
};
// --------------------------------------------------------
// Type: PERF_COUNTER_REG_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERF_COUNTER_REG_INFO = extern struct {
    CounterId: u32,
    Type: u32,
    Attrib: u64,
    DetailLevel: u32,
    DefaultScale: i32,
    BaseCounterId: u32,
    PerfTimeId: u32,
    PerfFreqId: u32,
    MultiId: u32,
    AggregateFunc: u32,
    Reserved: u32,
};
// --------------------------------------------------------
// Type: PERF_STRING_BUFFER_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERF_STRING_BUFFER_HEADER = extern struct {
    dwSize: u32,
    dwCounters: u32,
};
// --------------------------------------------------------
// Type: PERF_STRING_COUNTER_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERF_STRING_COUNTER_HEADER = extern struct {
    dwCounterId: u32,
    dwOffset: u32,
};
// --------------------------------------------------------
// Type: PERF_COUNTER_IDENTIFIER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERF_COUNTER_IDENTIFIER = extern struct {
    CounterSetGuid: Guid,
    Status: u32,
    Size: u32,
    CounterId: u32,
    InstanceId: u32,
    Index: u32,
    Reserved: u32,
};
// --------------------------------------------------------
// Type: PERF_DATA_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERF_DATA_HEADER = extern struct {
    dwTotalSize: u32,
    dwNumCounters: u32,
    PerfTimeStamp: i64,
    PerfTime100NSec: i64,
    PerfFreq: i64,
    SystemTime: SYSTEMTIME,
};
// --------------------------------------------------------
// Type: PerfCounterDataType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PerfCounterDataType = *opaque{
};
// --------------------------------------------------------
// Type: PERF_COUNTER_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERF_COUNTER_HEADER = extern struct {
    dwStatus: u32,
    dwType: PerfCounterDataType,
    dwSize: u32,
    Reserved: u32,
};
// --------------------------------------------------------
// Type: PERF_MULTI_INSTANCES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERF_MULTI_INSTANCES = extern struct {
    dwTotalSize: u32,
    dwInstances: u32,
};
// --------------------------------------------------------
// Type: PERF_MULTI_COUNTERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERF_MULTI_COUNTERS = extern struct {
    dwSize: u32,
    dwCounters: u32,
};
// --------------------------------------------------------
// Type: PERF_COUNTER_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERF_COUNTER_DATA = extern struct {
    dwDataSize: u32,
    dwSize: u32,
};
// --------------------------------------------------------
// Type: PDH_RAW_COUNTER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PDH_RAW_COUNTER = extern struct {
    CStatus: u32,
    TimeStamp: FILETIME,
    FirstValue: i64,
    SecondValue: i64,
    MultiCount: u32,
};
// --------------------------------------------------------
// Type: PDH_RAW_COUNTER_ITEM_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PDH_RAW_COUNTER_ITEM_A = extern struct {
    szName: ?*i8,
    RawValue: PDH_RAW_COUNTER,
};
// --------------------------------------------------------
// Type: PDH_RAW_COUNTER_ITEM_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PDH_RAW_COUNTER_ITEM_W = extern struct {
    szName: ?*u16,
    RawValue: PDH_RAW_COUNTER,
};
// --------------------------------------------------------
// Type: PDH_FMT_COUNTERVALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PDH_FMT_COUNTERVALUE = extern struct {
    CStatus: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: PDH_FMT_COUNTERVALUE_ITEM_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PDH_FMT_COUNTERVALUE_ITEM_A = extern struct {
    szName: ?*i8,
    FmtValue: PDH_FMT_COUNTERVALUE,
};
// --------------------------------------------------------
// Type: PDH_FMT_COUNTERVALUE_ITEM_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PDH_FMT_COUNTERVALUE_ITEM_W = extern struct {
    szName: ?*u16,
    FmtValue: PDH_FMT_COUNTERVALUE,
};
// --------------------------------------------------------
// Type: PDH_STATISTICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PDH_STATISTICS = extern struct {
    dwFormat: u32,
    count: u32,
    min: PDH_FMT_COUNTERVALUE,
    max: PDH_FMT_COUNTERVALUE,
    mean: PDH_FMT_COUNTERVALUE,
};
// --------------------------------------------------------
// Type: PDH_COUNTER_PATH_ELEMENTS_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PDH_COUNTER_PATH_ELEMENTS_A = extern struct {
    szMachineName: ?*i8,
    szObjectName: ?*i8,
    szInstanceName: ?*i8,
    szParentInstance: ?*i8,
    dwInstanceIndex: u32,
    szCounterName: ?*i8,
};
// --------------------------------------------------------
// Type: PDH_COUNTER_PATH_ELEMENTS_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PDH_COUNTER_PATH_ELEMENTS_W = extern struct {
    szMachineName: ?*u16,
    szObjectName: ?*u16,
    szInstanceName: ?*u16,
    szParentInstance: ?*u16,
    dwInstanceIndex: u32,
    szCounterName: ?*u16,
};
// --------------------------------------------------------
// Type: PDH_DATA_ITEM_PATH_ELEMENTS_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PDH_DATA_ITEM_PATH_ELEMENTS_A = extern struct {
    szMachineName: ?*i8,
    ObjectGUID: Guid,
    dwItemId: u32,
    szInstanceName: ?*i8,
};
// --------------------------------------------------------
// Type: PDH_DATA_ITEM_PATH_ELEMENTS_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PDH_DATA_ITEM_PATH_ELEMENTS_W = extern struct {
    szMachineName: ?*u16,
    ObjectGUID: Guid,
    dwItemId: u32,
    szInstanceName: ?*u16,
};
// --------------------------------------------------------
// Type: PDH_COUNTER_INFO_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PDH_COUNTER_INFO_A = extern struct {
    dwLength: u32,
    dwType: u32,
    CVersion: u32,
    CStatus: u32,
    lScale: i32,
    lDefaultScale: i32,
    dwUserData: ?*opaque{},
    dwQueryUserData: ?*opaque{},
    szFullPath: ?*i8,
    Anonymous: _Anonymous_e__Union,
    szExplainText: ?*i8,
    DataBuffer: ?[*]u32,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            szMachineName: ?*i8,
            szObjectName: ?*i8,
            szInstanceName: ?*i8,
            szParentInstance: ?*i8,
            dwInstanceIndex: u32,
            szCounterName: ?*i8,
        };
    };
};
// --------------------------------------------------------
// Type: PDH_COUNTER_INFO_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PDH_COUNTER_INFO_W = extern struct {
    dwLength: u32,
    dwType: u32,
    CVersion: u32,
    CStatus: u32,
    lScale: i32,
    lDefaultScale: i32,
    dwUserData: ?*opaque{},
    dwQueryUserData: ?*opaque{},
    szFullPath: ?*u16,
    Anonymous: _Anonymous_e__Union,
    szExplainText: ?*u16,
    DataBuffer: ?[*]u32,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            szMachineName: ?*u16,
            szObjectName: ?*u16,
            szInstanceName: ?*u16,
            szParentInstance: ?*u16,
            dwInstanceIndex: u32,
            szCounterName: ?*u16,
        };
    };
};
// --------------------------------------------------------
// Type: PDH_TIME_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PDH_TIME_INFO = extern struct {
    StartTime: i64,
    EndTime: i64,
    SampleCount: u32,
};
// --------------------------------------------------------
// Type: PDH_RAW_LOG_RECORD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PDH_RAW_LOG_RECORD = extern struct {
    dwStructureSize: u32,
    dwRecordType: u32,
    dwItems: u32,
    RawBytes: ?[*]u8,
};
// --------------------------------------------------------
// Type: PDH_LOG_SERVICE_QUERY_INFO_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PDH_LOG_SERVICE_QUERY_INFO_A = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwLogQuota: u32,
    szLogFileCaption: ?*i8,
    szDefaultDir: ?*i8,
    szBaseFileName: ?*i8,
    dwFileType: u32,
    dwReserved: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous2_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous2_e__Struct = extern struct {
            TlNumberOfBuffers: u32,
            TlMinimumBuffers: u32,
            TlMaximumBuffers: u32,
            TlFreeBuffers: u32,
            TlBufferSize: u32,
            TlEventsLost: u32,
            TlLoggerThreadId: u32,
            TlBuffersWritten: u32,
            TlLogHandle: u32,
            TlLogFileName: ?*i8,
        };
        // --------------------------------------------------------
        // Type: _Anonymous1_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous1_e__Struct = extern struct {
            PdlAutoNameInterval: u32,
            PdlAutoNameUnits: u32,
            PdlCommandFilename: ?*i8,
            PdlCounterList: ?*i8,
            PdlAutoNameFormat: u32,
            PdlSampleInterval: u32,
            PdlLogStartTime: FILETIME,
            PdlLogEndTime: FILETIME,
        };
    };
};
// --------------------------------------------------------
// Type: PDH_LOG_SERVICE_QUERY_INFO_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PDH_LOG_SERVICE_QUERY_INFO_W = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwLogQuota: u32,
    szLogFileCaption: ?*u16,
    szDefaultDir: ?*u16,
    szBaseFileName: ?*u16,
    dwFileType: u32,
    dwReserved: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous2_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous2_e__Struct = extern struct {
            TlNumberOfBuffers: u32,
            TlMinimumBuffers: u32,
            TlMaximumBuffers: u32,
            TlFreeBuffers: u32,
            TlBufferSize: u32,
            TlEventsLost: u32,
            TlLoggerThreadId: u32,
            TlBuffersWritten: u32,
            TlLogHandle: u32,
            TlLogFileName: ?*u16,
        };
        // --------------------------------------------------------
        // Type: _Anonymous1_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous1_e__Struct = extern struct {
            PdlAutoNameInterval: u32,
            PdlAutoNameUnits: u32,
            PdlCommandFilename: ?*u16,
            PdlCounterList: ?*u16,
            PdlAutoNameFormat: u32,
            PdlSampleInterval: u32,
            PdlLogStartTime: FILETIME,
            PdlLogEndTime: FILETIME,
        };
    };
};
// --------------------------------------------------------
// Type: CounterPathCallBack
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CounterPathCallBack = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDH_BROWSE_DLG_CONFIG_HW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PDH_BROWSE_DLG_CONFIG_HW = extern struct {
    _bitfield: u32,
    hWndOwner: HWND,
    hDataSource: ?*opaque{},
    szReturnPathBuffer: ?*u16,
    cchReturnPathLength: u32,
    pCallBack: CounterPathCallBack,
    dwCallBackArg: ?*opaque{},
    CallBackStatus: i32,
    dwDefaultDetailLevel: u32,
    szDialogBoxCaption: ?*u16,
};
// --------------------------------------------------------
// Type: PDH_BROWSE_DLG_CONFIG_HA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PDH_BROWSE_DLG_CONFIG_HA = extern struct {
    _bitfield: u32,
    hWndOwner: HWND,
    hDataSource: ?*opaque{},
    szReturnPathBuffer: ?*i8,
    cchReturnPathLength: u32,
    pCallBack: CounterPathCallBack,
    dwCallBackArg: ?*opaque{},
    CallBackStatus: i32,
    dwDefaultDetailLevel: u32,
    szDialogBoxCaption: ?*i8,
};
// --------------------------------------------------------
// Type: PDH_BROWSE_DLG_CONFIG_W
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PDH_BROWSE_DLG_CONFIG_W = extern struct {
    _bitfield: u32,
    hWndOwner: HWND,
    szDataSource: ?*u16,
    szReturnPathBuffer: ?*u16,
    cchReturnPathLength: u32,
    pCallBack: CounterPathCallBack,
    dwCallBackArg: ?*opaque{},
    CallBackStatus: i32,
    dwDefaultDetailLevel: u32,
    szDialogBoxCaption: ?*u16,
};
// --------------------------------------------------------
// Type: PDH_BROWSE_DLG_CONFIG_A
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PDH_BROWSE_DLG_CONFIG_A = extern struct {
    _bitfield: u32,
    hWndOwner: HWND,
    szDataSource: ?*i8,
    szReturnPathBuffer: ?*i8,
    cchReturnPathLength: u32,
    pCallBack: CounterPathCallBack,
    dwCallBackArg: ?*opaque{},
    CallBackStatus: i32,
    dwDefaultDetailLevel: u32,
    szDialogBoxCaption: ?*i8,
};
// --------------------------------------------------------
// Type: PerfProviderHandle
// TypeLayoutAttr: sequential
// RAIIFree 'PerfStopProvider' (TODO: can we use this information?)
pub const PerfProviderHandle = ?*opaque{};
// --------------------------------------------------------
// Type: PerfQueryHandle
// TypeLayoutAttr: sequential
// RAIIFree 'PerfCloseQueryHandle' (TODO: can we use this information?)
pub const PerfQueryHandle = ?*opaque{};
// --------------------------------------------------------
// Type: PERF_DATA_BLOCK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERF_DATA_BLOCK = extern struct {
    Signature: ?[*]u16,
    LittleEndian: u32,
    Version: u32,
    Revision: u32,
    TotalByteLength: u32,
    HeaderLength: u32,
    NumObjectTypes: u32,
    DefaultObject: i32,
    SystemTime: SYSTEMTIME,
    PerfTime: LARGE_INTEGER,
    PerfFreq: LARGE_INTEGER,
    PerfTime100nSec: LARGE_INTEGER,
    SystemNameLength: u32,
    SystemNameOffset: u32,
};
// --------------------------------------------------------
// Type: PERF_OBJECT_TYPE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERF_OBJECT_TYPE = extern struct {
    TotalByteLength: u32,
    DefinitionLength: u32,
    HeaderLength: u32,
    ObjectNameTitleIndex: u32,
    ObjectNameTitle: ?*u16,
    ObjectHelpTitleIndex: u32,
    ObjectHelpTitle: ?*u16,
    DetailLevel: u32,
    NumCounters: u32,
    DefaultCounter: i32,
    NumInstances: i32,
    CodePage: u32,
    PerfTime: LARGE_INTEGER,
    PerfFreq: LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: PERF_COUNTER_DEFINITION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERF_COUNTER_DEFINITION = extern struct {
    ByteLength: u32,
    CounterNameTitleIndex: u32,
    CounterNameTitle: ?*u16,
    CounterHelpTitleIndex: u32,
    CounterHelpTitle: ?*u16,
    DefaultScale: i32,
    DetailLevel: u32,
    CounterType: u32,
    CounterSize: u32,
    CounterOffset: u32,
};
// --------------------------------------------------------
// Type: PERF_INSTANCE_DEFINITION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERF_INSTANCE_DEFINITION = extern struct {
    ByteLength: u32,
    ParentObjectTitleIndex: u32,
    ParentObjectInstance: u32,
    UniqueID: i32,
    NameOffset: u32,
    NameLength: u32,
};
// --------------------------------------------------------
// Type: PERF_COUNTER_BLOCK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PERF_COUNTER_BLOCK = extern struct {
    ByteLength: u32,
};
// --------------------------------------------------------
// Type: PM_COLLECT_PROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PM_COLLECT_PROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PM_CLOSE_PROC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PM_CLOSE_PROC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "loadperf" fn LoadPerfCounterTextStringsA(
    lpCommandLine: ?*i8,
    bQuietModeArg: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "loadperf" fn LoadPerfCounterTextStringsW(
    lpCommandLine: ?*u16,
    bQuietModeArg: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "loadperf" fn UnloadPerfCounterTextStringsW(
    lpCommandLine: ?*u16,
    bQuietModeArg: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "loadperf" fn UnloadPerfCounterTextStringsA(
    lpCommandLine: ?*i8,
    bQuietModeArg: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "loadperf" fn UpdatePerfNameFilesA(
    szNewCtrFilePath: ?*i8,
    szNewHlpFilePath: ?*i8,
    szLanguageID: ?*i8,
    dwFlags: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "loadperf" fn UpdatePerfNameFilesW(
    szNewCtrFilePath: ?*u16,
    szNewHlpFilePath: ?*u16,
    szLanguageID: ?*u16,
    dwFlags: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "loadperf" fn SetServiceAsTrustedA(
    szReserved: ?*i8,
    szServiceName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "loadperf" fn SetServiceAsTrustedW(
    szReserved: ?*u16,
    szServiceName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "loadperf" fn BackupPerfRegistryToFileW(
    szFileName: ?*u16,
    szCommentString: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "loadperf" fn RestorePerfRegistryFromFileW(
    szFileName: ?*u16,
    szLangId: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn PerfStartProvider(
    ProviderGuid: ?*Guid,
    ControlCallback: PERFLIBREQUEST,
    phProvider: ?*PerfProviderHandle,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn PerfStartProviderEx(
    ProviderGuid: ?*Guid,
    ProviderContext: ?*PERF_PROVIDER_CONTEXT,
    Provider: ?*PerfProviderHandle,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn PerfStopProvider(
    ProviderHandle: PerfProviderHandle,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn PerfSetCounterSetInfo(
    ProviderHandle: HANDLE,
    Template: ?*PERF_COUNTERSET_INFO,
    TemplateSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn PerfCreateInstance(
    ProviderHandle: PerfProviderHandle,
    CounterSetGuid: ?*Guid,
    Name: ?*u16,
    Id: u32,
) callconv(@import("std").os.windows.WINAPI) ?*PERF_COUNTERSET_INSTANCE;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn PerfDeleteInstance(
    Provider: PerfProviderHandle,
    InstanceBlock: ?*PERF_COUNTERSET_INSTANCE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn PerfQueryInstance(
    ProviderHandle: HANDLE,
    CounterSetGuid: ?*Guid,
    Name: ?*u16,
    Id: u32,
) callconv(@import("std").os.windows.WINAPI) ?*PERF_COUNTERSET_INSTANCE;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn PerfSetCounterRefValue(
    Provider: HANDLE,
    Instance: ?*PERF_COUNTERSET_INSTANCE,
    CounterId: u32,
    Address: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn PerfSetULongCounterValue(
    Provider: HANDLE,
    Instance: ?*PERF_COUNTERSET_INSTANCE,
    CounterId: u32,
    Value: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn PerfSetULongLongCounterValue(
    Provider: HANDLE,
    Instance: ?*PERF_COUNTERSET_INSTANCE,
    CounterId: u32,
    Value: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn PerfIncrementULongCounterValue(
    Provider: HANDLE,
    Instance: ?*PERF_COUNTERSET_INSTANCE,
    CounterId: u32,
    Value: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn PerfIncrementULongLongCounterValue(
    Provider: HANDLE,
    Instance: ?*PERF_COUNTERSET_INSTANCE,
    CounterId: u32,
    Value: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn PerfDecrementULongCounterValue(
    Provider: HANDLE,
    Instance: ?*PERF_COUNTERSET_INSTANCE,
    CounterId: u32,
    Value: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn PerfDecrementULongLongCounterValue(
    Provider: HANDLE,
    Instance: ?*PERF_COUNTERSET_INSTANCE,
    CounterId: u32,
    Value: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn PerfEnumerateCounterSet(
    szMachine: ?*u16,
    pCounterSetIds: ?*Guid,
    cCounterSetIds: u32,
    pcCounterSetIdsActual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn PerfEnumerateCounterSetInstances(
    szMachine: ?*u16,
    pCounterSetId: ?*Guid,
    pInstances: ?*PERF_INSTANCE_HEADER,
    cbInstances: u32,
    pcbInstancesActual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn PerfQueryCounterSetRegistrationInfo(
    szMachine: ?*u16,
    pCounterSetId: ?*Guid,
    requestCode: PerfRegInfoType,
    requestLangId: u32,
    pbRegInfo: ?*u8,
    cbRegInfo: u32,
    pcbRegInfoActual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn PerfOpenQueryHandle(
    szMachine: ?*u16,
    phQuery: ?*PerfQueryHandle,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn PerfCloseQueryHandle(
    hQuery: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn PerfQueryCounterInfo(
    hQuery: PerfQueryHandle,
    pCounters: ?*PERF_COUNTER_IDENTIFIER,
    cbCounters: u32,
    pcbCountersActual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn PerfQueryCounterData(
    hQuery: PerfQueryHandle,
    pCounterBlock: ?*PERF_DATA_HEADER,
    cbCounterBlock: u32,
    pcbCounterBlockActual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn PerfAddCounters(
    hQuery: PerfQueryHandle,
    pCounters: ?*PERF_COUNTER_IDENTIFIER,
    cbCounters: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn PerfDeleteCounters(
    hQuery: PerfQueryHandle,
    pCounters: ?*PERF_COUNTER_IDENTIFIER,
    cbCounters: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhGetDllVersion(
    lpdwVersion: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhOpenQueryW(
    szDataSource: ?*u16,
    dwUserData: ?*opaque{},
    phQuery: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhOpenQueryA(
    szDataSource: ?*i8,
    dwUserData: ?*opaque{},
    phQuery: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhAddCounterW(
    hQuery: ?*opaque{},
    szFullCounterPath: ?*u16,
    dwUserData: ?*opaque{},
    phCounter: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhAddCounterA(
    hQuery: ?*opaque{},
    szFullCounterPath: ?*i8,
    dwUserData: ?*opaque{},
    phCounter: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhAddEnglishCounterW(
    hQuery: ?*opaque{},
    szFullCounterPath: ?*u16,
    dwUserData: ?*opaque{},
    phCounter: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhAddEnglishCounterA(
    hQuery: ?*opaque{},
    szFullCounterPath: ?*i8,
    dwUserData: ?*opaque{},
    phCounter: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhCollectQueryDataWithTime(
    hQuery: ?*opaque{},
    pllTimeStamp: ?*i64,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhValidatePathExW(
    hDataSource: ?*opaque{},
    szFullPathBuffer: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhValidatePathExA(
    hDataSource: ?*opaque{},
    szFullPathBuffer: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhRemoveCounter(
    hCounter: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhCollectQueryData(
    hQuery: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhCloseQuery(
    hQuery: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhGetFormattedCounterValue(
    hCounter: ?*opaque{},
    dwFormat: u32,
    lpdwType: ?*u32,
    pValue: ?*PDH_FMT_COUNTERVALUE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhGetFormattedCounterArrayA(
    hCounter: ?*opaque{},
    dwFormat: u32,
    lpdwBufferSize: ?*u32,
    lpdwItemCount: ?*u32,
    ItemBuffer: ?*PDH_FMT_COUNTERVALUE_ITEM_A,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhGetFormattedCounterArrayW(
    hCounter: ?*opaque{},
    dwFormat: u32,
    lpdwBufferSize: ?*u32,
    lpdwItemCount: ?*u32,
    ItemBuffer: ?*PDH_FMT_COUNTERVALUE_ITEM_W,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhGetRawCounterValue(
    hCounter: ?*opaque{},
    lpdwType: ?*u32,
    pValue: ?*PDH_RAW_COUNTER,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhGetRawCounterArrayA(
    hCounter: ?*opaque{},
    lpdwBufferSize: ?*u32,
    lpdwItemCount: ?*u32,
    ItemBuffer: ?*PDH_RAW_COUNTER_ITEM_A,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhGetRawCounterArrayW(
    hCounter: ?*opaque{},
    lpdwBufferSize: ?*u32,
    lpdwItemCount: ?*u32,
    ItemBuffer: ?*PDH_RAW_COUNTER_ITEM_W,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhCalculateCounterFromRawValue(
    hCounter: ?*opaque{},
    dwFormat: u32,
    rawValue1: ?*PDH_RAW_COUNTER,
    rawValue2: ?*PDH_RAW_COUNTER,
    fmtValue: ?*PDH_FMT_COUNTERVALUE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhComputeCounterStatistics(
    hCounter: ?*opaque{},
    dwFormat: u32,
    dwFirstEntry: u32,
    dwNumEntries: u32,
    lpRawValueArray: ?*PDH_RAW_COUNTER,
    data: ?*PDH_STATISTICS,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhGetCounterInfoW(
    hCounter: ?*opaque{},
    bRetrieveExplainText: u8,
    pdwBufferSize: ?*u32,
    lpBuffer: ?*PDH_COUNTER_INFO_W,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhGetCounterInfoA(
    hCounter: ?*opaque{},
    bRetrieveExplainText: u8,
    pdwBufferSize: ?*u32,
    lpBuffer: ?*PDH_COUNTER_INFO_A,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhSetCounterScaleFactor(
    hCounter: ?*opaque{},
    lFactor: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhConnectMachineW(
    szMachineName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhConnectMachineA(
    szMachineName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhEnumMachinesW(
    szDataSource: ?*u16,
    mszMachineList: ?*u16,
    pcchBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhEnumMachinesA(
    szDataSource: ?*i8,
    mszMachineList: ?*i8,
    pcchBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhEnumObjectsW(
    szDataSource: ?*u16,
    szMachineName: ?*u16,
    mszObjectList: ?*u16,
    pcchBufferSize: ?*u32,
    dwDetailLevel: u32,
    bRefresh: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhEnumObjectsA(
    szDataSource: ?*i8,
    szMachineName: ?*i8,
    mszObjectList: ?*i8,
    pcchBufferSize: ?*u32,
    dwDetailLevel: u32,
    bRefresh: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhEnumObjectItemsW(
    szDataSource: ?*u16,
    szMachineName: ?*u16,
    szObjectName: ?*u16,
    mszCounterList: ?*u16,
    pcchCounterListLength: ?*u32,
    mszInstanceList: ?*u16,
    pcchInstanceListLength: ?*u32,
    dwDetailLevel: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhEnumObjectItemsA(
    szDataSource: ?*i8,
    szMachineName: ?*i8,
    szObjectName: ?*i8,
    mszCounterList: ?*i8,
    pcchCounterListLength: ?*u32,
    mszInstanceList: ?*i8,
    pcchInstanceListLength: ?*u32,
    dwDetailLevel: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhMakeCounterPathW(
    pCounterPathElements: ?*PDH_COUNTER_PATH_ELEMENTS_W,
    szFullPathBuffer: ?*u16,
    pcchBufferSize: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhMakeCounterPathA(
    pCounterPathElements: ?*PDH_COUNTER_PATH_ELEMENTS_A,
    szFullPathBuffer: ?*i8,
    pcchBufferSize: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhParseCounterPathW(
    szFullPathBuffer: ?*u16,
    pCounterPathElements: ?*PDH_COUNTER_PATH_ELEMENTS_W,
    pdwBufferSize: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhParseCounterPathA(
    szFullPathBuffer: ?*i8,
    pCounterPathElements: ?*PDH_COUNTER_PATH_ELEMENTS_A,
    pdwBufferSize: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhParseInstanceNameW(
    szInstanceString: ?*u16,
    szInstanceName: ?*u16,
    pcchInstanceNameLength: ?*u32,
    szParentName: ?*u16,
    pcchParentNameLength: ?*u32,
    lpIndex: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhParseInstanceNameA(
    szInstanceString: ?*i8,
    szInstanceName: ?*i8,
    pcchInstanceNameLength: ?*u32,
    szParentName: ?*i8,
    pcchParentNameLength: ?*u32,
    lpIndex: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhValidatePathW(
    szFullPathBuffer: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhValidatePathA(
    szFullPathBuffer: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhGetDefaultPerfObjectW(
    szDataSource: ?*u16,
    szMachineName: ?*u16,
    szDefaultObjectName: ?*u16,
    pcchBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhGetDefaultPerfObjectA(
    szDataSource: ?*i8,
    szMachineName: ?*i8,
    szDefaultObjectName: ?*i8,
    pcchBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhGetDefaultPerfCounterW(
    szDataSource: ?*u16,
    szMachineName: ?*u16,
    szObjectName: ?*u16,
    szDefaultCounterName: ?*u16,
    pcchBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhGetDefaultPerfCounterA(
    szDataSource: ?*i8,
    szMachineName: ?*i8,
    szObjectName: ?*i8,
    szDefaultCounterName: ?*i8,
    pcchBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhBrowseCountersW(
    pBrowseDlgData: ?*PDH_BROWSE_DLG_CONFIG_W,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhBrowseCountersA(
    pBrowseDlgData: ?*PDH_BROWSE_DLG_CONFIG_A,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhExpandCounterPathW(
    szWildCardPath: ?*u16,
    mszExpandedPathList: ?*u16,
    pcchPathListLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhExpandCounterPathA(
    szWildCardPath: ?*i8,
    mszExpandedPathList: ?*i8,
    pcchPathListLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhLookupPerfNameByIndexW(
    szMachineName: ?*u16,
    dwNameIndex: u32,
    szNameBuffer: ?*u16,
    pcchNameBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhLookupPerfNameByIndexA(
    szMachineName: ?*i8,
    dwNameIndex: u32,
    szNameBuffer: ?*i8,
    pcchNameBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhLookupPerfIndexByNameW(
    szMachineName: ?*u16,
    szNameBuffer: ?*u16,
    pdwIndex: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhLookupPerfIndexByNameA(
    szMachineName: ?*i8,
    szNameBuffer: ?*i8,
    pdwIndex: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhExpandWildCardPathA(
    szDataSource: ?*i8,
    szWildCardPath: ?*i8,
    mszExpandedPathList: ?*i8,
    pcchPathListLength: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhExpandWildCardPathW(
    szDataSource: ?*u16,
    szWildCardPath: ?*u16,
    mszExpandedPathList: ?*u16,
    pcchPathListLength: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhOpenLogW(
    szLogFileName: ?*u16,
    dwAccessFlags: u32,
    lpdwLogType: ?*u32,
    hQuery: ?*opaque{},
    dwMaxSize: u32,
    szUserCaption: ?*u16,
    phLog: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhOpenLogA(
    szLogFileName: ?*i8,
    dwAccessFlags: u32,
    lpdwLogType: ?*u32,
    hQuery: ?*opaque{},
    dwMaxSize: u32,
    szUserCaption: ?*i8,
    phLog: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhUpdateLogW(
    hLog: ?*opaque{},
    szUserString: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhUpdateLogA(
    hLog: ?*opaque{},
    szUserString: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhUpdateLogFileCatalog(
    hLog: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhGetLogFileSize(
    hLog: ?*opaque{},
    llSize: ?*i64,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhCloseLog(
    hLog: ?*opaque{},
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhSelectDataSourceW(
    hWndOwner: HWND,
    dwFlags: u32,
    szDataSource: ?*u16,
    pcchBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhSelectDataSourceA(
    hWndOwner: HWND,
    dwFlags: u32,
    szDataSource: ?*i8,
    pcchBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhIsRealTimeQuery(
    hQuery: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhSetQueryTimeRange(
    hQuery: ?*opaque{},
    pInfo: ?*PDH_TIME_INFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhGetDataSourceTimeRangeW(
    szDataSource: ?*u16,
    pdwNumEntries: ?*u32,
    pInfo: ?*PDH_TIME_INFO,
    pdwBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhGetDataSourceTimeRangeA(
    szDataSource: ?*i8,
    pdwNumEntries: ?*u32,
    pInfo: ?*PDH_TIME_INFO,
    pdwBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhCollectQueryDataEx(
    hQuery: ?*opaque{},
    dwIntervalTime: u32,
    hNewDataEvent: HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhFormatFromRawValue(
    dwCounterType: u32,
    dwFormat: u32,
    pTimeBase: ?*i64,
    pRawValue1: ?*PDH_RAW_COUNTER,
    pRawValue2: ?*PDH_RAW_COUNTER,
    pFmtValue: ?*PDH_FMT_COUNTERVALUE,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhGetCounterTimeBase(
    hCounter: ?*opaque{},
    pTimeBase: ?*i64,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhReadRawLogRecord(
    hLog: ?*opaque{},
    ftRecord: FILETIME,
    pRawLogRecord: ?*PDH_RAW_LOG_RECORD,
    pdwBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhSetDefaultRealTimeDataSource(
    dwDataSourceId: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhBindInputDataSourceW(
    phDataSource: ?*?*opaque{},
    LogFileNameList: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhBindInputDataSourceA(
    phDataSource: ?*?*opaque{},
    LogFileNameList: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhOpenQueryH(
    hDataSource: ?*opaque{},
    dwUserData: ?*opaque{},
    phQuery: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhEnumMachinesHW(
    hDataSource: ?*opaque{},
    mszMachineList: ?*u16,
    pcchBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhEnumMachinesHA(
    hDataSource: ?*opaque{},
    mszMachineList: ?*i8,
    pcchBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhEnumObjectsHW(
    hDataSource: ?*opaque{},
    szMachineName: ?*u16,
    mszObjectList: ?*u16,
    pcchBufferSize: ?*u32,
    dwDetailLevel: u32,
    bRefresh: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhEnumObjectsHA(
    hDataSource: ?*opaque{},
    szMachineName: ?*i8,
    mszObjectList: ?*i8,
    pcchBufferSize: ?*u32,
    dwDetailLevel: u32,
    bRefresh: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhEnumObjectItemsHW(
    hDataSource: ?*opaque{},
    szMachineName: ?*u16,
    szObjectName: ?*u16,
    mszCounterList: ?*u16,
    pcchCounterListLength: ?*u32,
    mszInstanceList: ?*u16,
    pcchInstanceListLength: ?*u32,
    dwDetailLevel: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhEnumObjectItemsHA(
    hDataSource: ?*opaque{},
    szMachineName: ?*i8,
    szObjectName: ?*i8,
    mszCounterList: ?*i8,
    pcchCounterListLength: ?*u32,
    mszInstanceList: ?*i8,
    pcchInstanceListLength: ?*u32,
    dwDetailLevel: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhExpandWildCardPathHW(
    hDataSource: ?*opaque{},
    szWildCardPath: ?*u16,
    mszExpandedPathList: ?*u16,
    pcchPathListLength: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhExpandWildCardPathHA(
    hDataSource: ?*opaque{},
    szWildCardPath: ?*i8,
    mszExpandedPathList: ?*i8,
    pcchPathListLength: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhGetDataSourceTimeRangeH(
    hDataSource: ?*opaque{},
    pdwNumEntries: ?*u32,
    pInfo: ?*PDH_TIME_INFO,
    pdwBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhGetDefaultPerfObjectHW(
    hDataSource: ?*opaque{},
    szMachineName: ?*u16,
    szDefaultObjectName: ?*u16,
    pcchBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhGetDefaultPerfObjectHA(
    hDataSource: ?*opaque{},
    szMachineName: ?*i8,
    szDefaultObjectName: ?*i8,
    pcchBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhGetDefaultPerfCounterHW(
    hDataSource: ?*opaque{},
    szMachineName: ?*u16,
    szObjectName: ?*u16,
    szDefaultCounterName: ?*u16,
    pcchBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhGetDefaultPerfCounterHA(
    hDataSource: ?*opaque{},
    szMachineName: ?*i8,
    szObjectName: ?*i8,
    szDefaultCounterName: ?*i8,
    pcchBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhBrowseCountersHW(
    pBrowseDlgData: ?*PDH_BROWSE_DLG_CONFIG_HW,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhBrowseCountersHA(
    pBrowseDlgData: ?*PDH_BROWSE_DLG_CONFIG_HA,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhVerifySQLDBW(
    szDataSource: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhVerifySQLDBA(
    szDataSource: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhCreateSQLTablesW(
    szDataSource: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhCreateSQLTablesA(
    szDataSource: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhEnumLogSetNamesW(
    szDataSource: ?*u16,
    mszDataSetNameList: ?*u16,
    pcchBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhEnumLogSetNamesA(
    szDataSource: ?*i8,
    mszDataSetNameList: ?*i8,
    pcchBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhGetLogSetGUID(
    hLog: ?*opaque{},
    pGuid: ?*Guid,
    pRunId: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// set_last_errror=False (can and should we use this?)
pub extern "pdh" fn PdhSetLogSetRunID(
    hLog: ?*opaque{},
    RunId: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const PDH_RAW_COUNTER_ITEM_ = PDH_RAW_COUNTER_ITEM_A;
        pub const PDH_FMT_COUNTERVALUE_ITEM_ = PDH_FMT_COUNTERVALUE_ITEM_A;
        pub const PDH_COUNTER_PATH_ELEMENTS_ = PDH_COUNTER_PATH_ELEMENTS_A;
        pub const PDH_DATA_ITEM_PATH_ELEMENTS_ = PDH_DATA_ITEM_PATH_ELEMENTS_A;
        pub const PDH_COUNTER_INFO_ = PDH_COUNTER_INFO_A;
        pub const PDH_LOG_SERVICE_QUERY_INFO_ = PDH_LOG_SERVICE_QUERY_INFO_A;
        pub const PDH_BROWSE_DLG_CONFIG_H = PDH_BROWSE_DLG_CONFIG_HA;
        pub const PDH_BROWSE_DLG_CONFIG_ = PDH_BROWSE_DLG_CONFIG_A;
        pub const LoadPerfCounterTextStrings = LoadPerfCounterTextStringsA;
        pub const UnloadPerfCounterTextStrings = UnloadPerfCounterTextStringsA;
        pub const UpdatePerfNameFiles = UpdatePerfNameFilesA;
        pub const SetServiceAsTrusted = SetServiceAsTrustedA;
        pub const PdhOpenQuery = PdhOpenQueryA;
        pub const PdhAddCounter = PdhAddCounterA;
        pub const PdhAddEnglishCounter = PdhAddEnglishCounterA;
        pub const PdhValidatePathEx = PdhValidatePathExA;
        pub const PdhGetFormattedCounterArray = PdhGetFormattedCounterArrayA;
        pub const PdhGetRawCounterArray = PdhGetRawCounterArrayA;
        pub const PdhGetCounterInfo = PdhGetCounterInfoA;
        pub const PdhConnectMachine = PdhConnectMachineA;
        pub const PdhEnumMachines = PdhEnumMachinesA;
        pub const PdhEnumObjects = PdhEnumObjectsA;
        pub const PdhEnumObjectItems = PdhEnumObjectItemsA;
        pub const PdhMakeCounterPath = PdhMakeCounterPathA;
        pub const PdhParseCounterPath = PdhParseCounterPathA;
        pub const PdhParseInstanceName = PdhParseInstanceNameA;
        pub const PdhValidatePath = PdhValidatePathA;
        pub const PdhGetDefaultPerfObject = PdhGetDefaultPerfObjectA;
        pub const PdhGetDefaultPerfCounter = PdhGetDefaultPerfCounterA;
        pub const PdhBrowseCounters = PdhBrowseCountersA;
        pub const PdhExpandCounterPath = PdhExpandCounterPathA;
        pub const PdhLookupPerfNameByIndex = PdhLookupPerfNameByIndexA;
        pub const PdhLookupPerfIndexByName = PdhLookupPerfIndexByNameA;
        pub const PdhExpandWildCardPath = PdhExpandWildCardPathA;
        pub const PdhOpenLog = PdhOpenLogA;
        pub const PdhUpdateLog = PdhUpdateLogA;
        pub const PdhSelectDataSource = PdhSelectDataSourceA;
        pub const PdhGetDataSourceTimeRange = PdhGetDataSourceTimeRangeA;
        pub const PdhBindInputDataSource = PdhBindInputDataSourceA;
        pub const PdhEnumMachinesH = PdhEnumMachinesHA;
        pub const PdhEnumObjectsH = PdhEnumObjectsHA;
        pub const PdhEnumObjectItemsH = PdhEnumObjectItemsHA;
        pub const PdhExpandWildCardPathH = PdhExpandWildCardPathHA;
        pub const PdhGetDefaultPerfObjectH = PdhGetDefaultPerfObjectHA;
        pub const PdhGetDefaultPerfCounterH = PdhGetDefaultPerfCounterHA;
        pub const PdhBrowseCountersH = PdhBrowseCountersHA;
        pub const PdhVerifySQLDB = PdhVerifySQLDBA;
        pub const PdhCreateSQLTables = PdhCreateSQLTablesA;
        pub const PdhEnumLogSetNames = PdhEnumLogSetNamesA;
    },
    .wide => struct {
        pub const PDH_RAW_COUNTER_ITEM_ = PDH_RAW_COUNTER_ITEM_W;
        pub const PDH_FMT_COUNTERVALUE_ITEM_ = PDH_FMT_COUNTERVALUE_ITEM_W;
        pub const PDH_COUNTER_PATH_ELEMENTS_ = PDH_COUNTER_PATH_ELEMENTS_W;
        pub const PDH_DATA_ITEM_PATH_ELEMENTS_ = PDH_DATA_ITEM_PATH_ELEMENTS_W;
        pub const PDH_COUNTER_INFO_ = PDH_COUNTER_INFO_W;
        pub const PDH_LOG_SERVICE_QUERY_INFO_ = PDH_LOG_SERVICE_QUERY_INFO_W;
        pub const PDH_BROWSE_DLG_CONFIG_H = PDH_BROWSE_DLG_CONFIG_HW;
        pub const PDH_BROWSE_DLG_CONFIG_ = PDH_BROWSE_DLG_CONFIG_W;
        pub const LoadPerfCounterTextStrings = LoadPerfCounterTextStringsW;
        pub const UnloadPerfCounterTextStrings = UnloadPerfCounterTextStringsW;
        pub const UpdatePerfNameFiles = UpdatePerfNameFilesW;
        pub const SetServiceAsTrusted = SetServiceAsTrustedW;
        pub const PdhOpenQuery = PdhOpenQueryW;
        pub const PdhAddCounter = PdhAddCounterW;
        pub const PdhAddEnglishCounter = PdhAddEnglishCounterW;
        pub const PdhValidatePathEx = PdhValidatePathExW;
        pub const PdhGetFormattedCounterArray = PdhGetFormattedCounterArrayW;
        pub const PdhGetRawCounterArray = PdhGetRawCounterArrayW;
        pub const PdhGetCounterInfo = PdhGetCounterInfoW;
        pub const PdhConnectMachine = PdhConnectMachineW;
        pub const PdhEnumMachines = PdhEnumMachinesW;
        pub const PdhEnumObjects = PdhEnumObjectsW;
        pub const PdhEnumObjectItems = PdhEnumObjectItemsW;
        pub const PdhMakeCounterPath = PdhMakeCounterPathW;
        pub const PdhParseCounterPath = PdhParseCounterPathW;
        pub const PdhParseInstanceName = PdhParseInstanceNameW;
        pub const PdhValidatePath = PdhValidatePathW;
        pub const PdhGetDefaultPerfObject = PdhGetDefaultPerfObjectW;
        pub const PdhGetDefaultPerfCounter = PdhGetDefaultPerfCounterW;
        pub const PdhBrowseCounters = PdhBrowseCountersW;
        pub const PdhExpandCounterPath = PdhExpandCounterPathW;
        pub const PdhLookupPerfNameByIndex = PdhLookupPerfNameByIndexW;
        pub const PdhLookupPerfIndexByName = PdhLookupPerfIndexByNameW;
        pub const PdhExpandWildCardPath = PdhExpandWildCardPathW;
        pub const PdhOpenLog = PdhOpenLogW;
        pub const PdhUpdateLog = PdhUpdateLogW;
        pub const PdhSelectDataSource = PdhSelectDataSourceW;
        pub const PdhGetDataSourceTimeRange = PdhGetDataSourceTimeRangeW;
        pub const PdhBindInputDataSource = PdhBindInputDataSourceW;
        pub const PdhEnumMachinesH = PdhEnumMachinesHW;
        pub const PdhEnumObjectsH = PdhEnumObjectsHW;
        pub const PdhEnumObjectItemsH = PdhEnumObjectItemsHW;
        pub const PdhExpandWildCardPathH = PdhExpandWildCardPathHW;
        pub const PdhGetDefaultPerfObjectH = PdhGetDefaultPerfObjectHW;
        pub const PdhGetDefaultPerfCounterH = PdhGetDefaultPerfCounterHW;
        pub const PdhBrowseCountersH = PdhBrowseCountersHW;
        pub const PdhVerifySQLDB = PdhVerifySQLDBW;
        pub const PdhCreateSQLTables = PdhCreateSQLTablesW;
        pub const PdhEnumLogSetNames = PdhEnumLogSetNamesW;
    },
    else => if (@import("builtin").is_test) struct {
        pub const PDH_RAW_COUNTER_ITEM_ = *opaque{};
        pub const PDH_FMT_COUNTERVALUE_ITEM_ = *opaque{};
        pub const PDH_COUNTER_PATH_ELEMENTS_ = *opaque{};
        pub const PDH_DATA_ITEM_PATH_ELEMENTS_ = *opaque{};
        pub const PDH_COUNTER_INFO_ = *opaque{};
        pub const PDH_LOG_SERVICE_QUERY_INFO_ = *opaque{};
        pub const PDH_BROWSE_DLG_CONFIG_H = *opaque{};
        pub const PDH_BROWSE_DLG_CONFIG_ = *opaque{};
        pub const LoadPerfCounterTextStrings = *opaque{};
        pub const UnloadPerfCounterTextStrings = *opaque{};
        pub const UpdatePerfNameFiles = *opaque{};
        pub const SetServiceAsTrusted = *opaque{};
        pub const PdhOpenQuery = *opaque{};
        pub const PdhAddCounter = *opaque{};
        pub const PdhAddEnglishCounter = *opaque{};
        pub const PdhValidatePathEx = *opaque{};
        pub const PdhGetFormattedCounterArray = *opaque{};
        pub const PdhGetRawCounterArray = *opaque{};
        pub const PdhGetCounterInfo = *opaque{};
        pub const PdhConnectMachine = *opaque{};
        pub const PdhEnumMachines = *opaque{};
        pub const PdhEnumObjects = *opaque{};
        pub const PdhEnumObjectItems = *opaque{};
        pub const PdhMakeCounterPath = *opaque{};
        pub const PdhParseCounterPath = *opaque{};
        pub const PdhParseInstanceName = *opaque{};
        pub const PdhValidatePath = *opaque{};
        pub const PdhGetDefaultPerfObject = *opaque{};
        pub const PdhGetDefaultPerfCounter = *opaque{};
        pub const PdhBrowseCounters = *opaque{};
        pub const PdhExpandCounterPath = *opaque{};
        pub const PdhLookupPerfNameByIndex = *opaque{};
        pub const PdhLookupPerfIndexByName = *opaque{};
        pub const PdhExpandWildCardPath = *opaque{};
        pub const PdhOpenLog = *opaque{};
        pub const PdhUpdateLog = *opaque{};
        pub const PdhSelectDataSource = *opaque{};
        pub const PdhGetDataSourceTimeRange = *opaque{};
        pub const PdhBindInputDataSource = *opaque{};
        pub const PdhEnumMachinesH = *opaque{};
        pub const PdhEnumObjectsH = *opaque{};
        pub const PdhEnumObjectItemsH = *opaque{};
        pub const PdhExpandWildCardPathH = *opaque{};
        pub const PdhGetDefaultPerfObjectH = *opaque{};
        pub const PdhGetDefaultPerfCounterH = *opaque{};
        pub const PdhBrowseCountersH = *opaque{};
        pub const PdhVerifySQLDB = *opaque{};
        pub const PdhCreateSQLTables = *opaque{};
        pub const PdhEnumLogSetNames = *opaque{};
    } else struct {
        pub const PDH_RAW_COUNTER_ITEM_ = @compileError("'PDH_RAW_COUNTER_ITEM_' requires that UNICODE be set to true or false in the root module");
        pub const PDH_FMT_COUNTERVALUE_ITEM_ = @compileError("'PDH_FMT_COUNTERVALUE_ITEM_' requires that UNICODE be set to true or false in the root module");
        pub const PDH_COUNTER_PATH_ELEMENTS_ = @compileError("'PDH_COUNTER_PATH_ELEMENTS_' requires that UNICODE be set to true or false in the root module");
        pub const PDH_DATA_ITEM_PATH_ELEMENTS_ = @compileError("'PDH_DATA_ITEM_PATH_ELEMENTS_' requires that UNICODE be set to true or false in the root module");
        pub const PDH_COUNTER_INFO_ = @compileError("'PDH_COUNTER_INFO_' requires that UNICODE be set to true or false in the root module");
        pub const PDH_LOG_SERVICE_QUERY_INFO_ = @compileError("'PDH_LOG_SERVICE_QUERY_INFO_' requires that UNICODE be set to true or false in the root module");
        pub const PDH_BROWSE_DLG_CONFIG_H = @compileError("'PDH_BROWSE_DLG_CONFIG_H' requires that UNICODE be set to true or false in the root module");
        pub const PDH_BROWSE_DLG_CONFIG_ = @compileError("'PDH_BROWSE_DLG_CONFIG_' requires that UNICODE be set to true or false in the root module");
        pub const LoadPerfCounterTextStrings = @compileError("'LoadPerfCounterTextStrings' requires that UNICODE be set to true or false in the root module");
        pub const UnloadPerfCounterTextStrings = @compileError("'UnloadPerfCounterTextStrings' requires that UNICODE be set to true or false in the root module");
        pub const UpdatePerfNameFiles = @compileError("'UpdatePerfNameFiles' requires that UNICODE be set to true or false in the root module");
        pub const SetServiceAsTrusted = @compileError("'SetServiceAsTrusted' requires that UNICODE be set to true or false in the root module");
        pub const PdhOpenQuery = @compileError("'PdhOpenQuery' requires that UNICODE be set to true or false in the root module");
        pub const PdhAddCounter = @compileError("'PdhAddCounter' requires that UNICODE be set to true or false in the root module");
        pub const PdhAddEnglishCounter = @compileError("'PdhAddEnglishCounter' requires that UNICODE be set to true or false in the root module");
        pub const PdhValidatePathEx = @compileError("'PdhValidatePathEx' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetFormattedCounterArray = @compileError("'PdhGetFormattedCounterArray' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetRawCounterArray = @compileError("'PdhGetRawCounterArray' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetCounterInfo = @compileError("'PdhGetCounterInfo' requires that UNICODE be set to true or false in the root module");
        pub const PdhConnectMachine = @compileError("'PdhConnectMachine' requires that UNICODE be set to true or false in the root module");
        pub const PdhEnumMachines = @compileError("'PdhEnumMachines' requires that UNICODE be set to true or false in the root module");
        pub const PdhEnumObjects = @compileError("'PdhEnumObjects' requires that UNICODE be set to true or false in the root module");
        pub const PdhEnumObjectItems = @compileError("'PdhEnumObjectItems' requires that UNICODE be set to true or false in the root module");
        pub const PdhMakeCounterPath = @compileError("'PdhMakeCounterPath' requires that UNICODE be set to true or false in the root module");
        pub const PdhParseCounterPath = @compileError("'PdhParseCounterPath' requires that UNICODE be set to true or false in the root module");
        pub const PdhParseInstanceName = @compileError("'PdhParseInstanceName' requires that UNICODE be set to true or false in the root module");
        pub const PdhValidatePath = @compileError("'PdhValidatePath' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetDefaultPerfObject = @compileError("'PdhGetDefaultPerfObject' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetDefaultPerfCounter = @compileError("'PdhGetDefaultPerfCounter' requires that UNICODE be set to true or false in the root module");
        pub const PdhBrowseCounters = @compileError("'PdhBrowseCounters' requires that UNICODE be set to true or false in the root module");
        pub const PdhExpandCounterPath = @compileError("'PdhExpandCounterPath' requires that UNICODE be set to true or false in the root module");
        pub const PdhLookupPerfNameByIndex = @compileError("'PdhLookupPerfNameByIndex' requires that UNICODE be set to true or false in the root module");
        pub const PdhLookupPerfIndexByName = @compileError("'PdhLookupPerfIndexByName' requires that UNICODE be set to true or false in the root module");
        pub const PdhExpandWildCardPath = @compileError("'PdhExpandWildCardPath' requires that UNICODE be set to true or false in the root module");
        pub const PdhOpenLog = @compileError("'PdhOpenLog' requires that UNICODE be set to true or false in the root module");
        pub const PdhUpdateLog = @compileError("'PdhUpdateLog' requires that UNICODE be set to true or false in the root module");
        pub const PdhSelectDataSource = @compileError("'PdhSelectDataSource' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetDataSourceTimeRange = @compileError("'PdhGetDataSourceTimeRange' requires that UNICODE be set to true or false in the root module");
        pub const PdhBindInputDataSource = @compileError("'PdhBindInputDataSource' requires that UNICODE be set to true or false in the root module");
        pub const PdhEnumMachinesH = @compileError("'PdhEnumMachinesH' requires that UNICODE be set to true or false in the root module");
        pub const PdhEnumObjectsH = @compileError("'PdhEnumObjectsH' requires that UNICODE be set to true or false in the root module");
        pub const PdhEnumObjectItemsH = @compileError("'PdhEnumObjectItemsH' requires that UNICODE be set to true or false in the root module");
        pub const PdhExpandWildCardPathH = @compileError("'PdhExpandWildCardPathH' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetDefaultPerfObjectH = @compileError("'PdhGetDefaultPerfObjectH' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetDefaultPerfCounterH = @compileError("'PdhGetDefaultPerfCounterH' requires that UNICODE be set to true or false in the root module");
        pub const PdhBrowseCountersH = @compileError("'PdhBrowseCountersH' requires that UNICODE be set to true or false in the root module");
        pub const PdhVerifySQLDB = @compileError("'PdhVerifySQLDB' requires that UNICODE be set to true or false in the root module");
        pub const PdhCreateSQLTables = @compileError("'PdhCreateSQLTables' requires that UNICODE be set to true or false in the root module");
        pub const PdhEnumLogSetNames = @compileError("'PdhEnumLogSetNames' requires that UNICODE be set to true or false in the root module");
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const SYSTEMTIME = @import("windowsprogramming.zig").SYSTEMTIME;
const FILETIME = @import("windowsprogramming.zig").FILETIME;
const HWND = @import("windowsandmessaging.zig").HWND;
const LARGE_INTEGER = @import("systemservices.zig").LARGE_INTEGER;
const BOOL = @import("systemservices.zig").BOOL;
const HANDLE = @import("systemservices.zig").HANDLE;

test "" {
    const constant_export_count = 0;
    const type_export_count = 52;
    const func_count = 131;
    const unicode_alias_count = 49;
    const type_import_count = 7;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
