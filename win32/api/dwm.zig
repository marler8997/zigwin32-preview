//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//
pub const c_DwmMaxQueuedBuffers : u32 = 8;
pub const c_DwmMaxMonitors : u32 = 16;
pub const c_DwmMaxAdapters : u32 = 16;

//
// types
//
// --------------------------------------------------------
// Type: DWM_BLURBEHIND
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DWM_BLURBEHIND = *opaque{
};
// --------------------------------------------------------
// Type: DWMWINDOWATTRIBUTE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWMWINDOWATTRIBUTE = *opaque{
};
// --------------------------------------------------------
// Type: DWMNCRENDERINGPOLICY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWMNCRENDERINGPOLICY = *opaque{
};
// --------------------------------------------------------
// Type: DWMFLIP3DWINDOWPOLICY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWMFLIP3DWINDOWPOLICY = *opaque{
};
// --------------------------------------------------------
// Type: DWM_THUMBNAIL_PROPERTIES
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DWM_THUMBNAIL_PROPERTIES = *opaque{
};
// --------------------------------------------------------
// Type: UNSIGNED_RATIO
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const UNSIGNED_RATIO = *opaque{
};
// --------------------------------------------------------
// Type: DWM_TIMING_INFO
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DWM_TIMING_INFO = *opaque{
};
// --------------------------------------------------------
// Type: DWM_SOURCE_FRAME_SAMPLING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWM_SOURCE_FRAME_SAMPLING = *opaque{
};
// --------------------------------------------------------
// Type: DWM_PRESENT_PARAMETERS
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DWM_PRESENT_PARAMETERS = *opaque{
};
// --------------------------------------------------------
// Type: DWMTRANSITION_OWNEDWINDOW_TARGET
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWMTRANSITION_OWNEDWINDOW_TARGET = *opaque{
};
// --------------------------------------------------------
// Type: GESTURE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const GESTURE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DWM_SHOWCONTACT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWM_SHOWCONTACT = *opaque{
};
// --------------------------------------------------------
// Type: DWM_TAB_WINDOW_REQUIREMENTS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWM_TAB_WINDOW_REQUIREMENTS = *opaque{
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmDefWindowProc(
    hWnd: HWND,
    msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
    plResult: ?*LRESULT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmEnableBlurBehindWindow(
    hWnd: HWND,
    pBlurBehind: ?*DWM_BLURBEHIND,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmEnableComposition(
    uCompositionAction: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmEnableMMCSS(
    fEnableMMCSS: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmExtendFrameIntoClientArea(
    hWnd: HWND,
    pMarInset: ?*MARGINS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmGetColorizationColor(
    pcrColorization: ?*u32,
    pfOpaqueBlend: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmGetCompositionTimingInfo(
    hwnd: HWND,
    pTimingInfo: ?*DWM_TIMING_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmGetWindowAttribute(
    hwnd: HWND,
    dwAttribute: u32,
    pvAttribute: ?*opaque{},
    cbAttribute: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmIsCompositionEnabled(
    pfEnabled: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmModifyPreviousDxFrameDuration(
    hwnd: HWND,
    cRefreshes: i32,
    fRelative: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmQueryThumbnailSourceSize(
    hThumbnail: ?*opaque{},
    pSize: ?*SIZE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmRegisterThumbnail(
    hwndDestination: HWND,
    hwndSource: HWND,
    phThumbnailId: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmSetDxFrameDuration(
    hwnd: HWND,
    cRefreshes: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmSetPresentParameters(
    hwnd: HWND,
    pPresentParams: ?*DWM_PRESENT_PARAMETERS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmSetWindowAttribute(
    hwnd: HWND,
    dwAttribute: u32,
    pvAttribute: ?*opaque{},
    cbAttribute: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmUnregisterThumbnail(
    hThumbnailId: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmUpdateThumbnailProperties(
    hThumbnailId: ?*opaque{},
    ptnProperties: ?*DWM_THUMBNAIL_PROPERTIES,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmSetIconicThumbnail(
    hwnd: HWND,
    hbmp: HBITMAP,
    dwSITFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmSetIconicLivePreviewBitmap(
    hwnd: HWND,
    hbmp: HBITMAP,
    pptClient: ?*POINT,
    dwSITFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmInvalidateIconicBitmaps(
    hwnd: HWND,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmAttachMilContent(
    hwnd: HWND,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmDetachMilContent(
    hwnd: HWND,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmFlush(
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmGetGraphicsStreamTransformHint(
    uIndex: u32,
    pTransform: ?*MilMatrix3x2D,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmGetGraphicsStreamClient(
    uIndex: u32,
    pClientUuid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmGetTransportAttributes(
    pfIsRemoting: ?*i32,
    pfIsConnected: ?*i32,
    pDwGeneration: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmTransitionOwnedWindow(
    hwnd: HWND,
    target: DWMTRANSITION_OWNEDWINDOW_TARGET,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmRenderGesture(
    gt: GESTURE_TYPE,
    cContacts: u32,
    pdwPointerID: ?*u32,
    pPoints: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmTetherContact(
    dwPointerID: u32,
    fEnable: BOOL,
    ptTether: POINT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmShowContact(
    dwPointerID: u32,
    eShowContact: DWM_SHOWCONTACT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "dwmapi" fn DwmGetUnmetTabRequirements(
    appWindow: HWND,
    value: ?*DWM_TAB_WINDOW_REQUIREMENTS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const HWND = @import("windowsandmessaging.zig").HWND;
const WPARAM = @import("windowsandmessaging.zig").WPARAM;
const LPARAM = @import("windowsandmessaging.zig").LPARAM;
const LRESULT = @import("systemservices.zig").LRESULT;
const BOOL = @import("systemservices.zig").BOOL;
const HRESULT = @import("com.zig").HRESULT;
const MARGINS = @import("controls.zig").MARGINS;
const SIZE = @import("displaydevices.zig").SIZE;
const HBITMAP = @import("gdi.zig").HBITMAP;
const POINT = @import("displaydevices.zig").POINT;
const MilMatrix3x2D = @import("wpfbitmapeffects.zig").MilMatrix3x2D;

test "" {
    const constant_export_count = 3;
    const type_export_count = 13;
    const func_count = 31;
    const unicode_alias_count = 0;
    const type_import_count = 12;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
