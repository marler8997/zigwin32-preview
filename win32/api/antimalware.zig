//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: AMSI_RESULT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AMSI_RESULT = *opaque{
};
// --------------------------------------------------------
// Type: AMSI_ATTRIBUTE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AMSI_ATTRIBUTE = *opaque{
};
// --------------------------------------------------------
// Type: AMSI_UAC_REQUEST_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AMSI_UAC_REQUEST_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: AMSI_UAC_TRUST_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AMSI_UAC_TRUST_STATE = *opaque{
};
// --------------------------------------------------------
// Type: AMSI_UAC_MSI_ACTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const AMSI_UAC_MSI_ACTION = *opaque{
};
// --------------------------------------------------------
// Type: AMSI_UAC_REQUEST_EXE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AMSI_UAC_REQUEST_EXE_INFO = extern struct {
    ulLength: u32,
    lpwszApplicationName: ?*u16,
    lpwszCommandLine: ?*u16,
    lpwszDLLParameter: ?*u16,
};
// --------------------------------------------------------
// Type: AMSI_UAC_REQUEST_COM_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AMSI_UAC_REQUEST_COM_INFO = extern struct {
    ulLength: u32,
    lpwszServerBinary: ?*u16,
    lpwszRequestor: ?*u16,
    Clsid: Guid,
};
// --------------------------------------------------------
// Type: AMSI_UAC_REQUEST_MSI_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AMSI_UAC_REQUEST_MSI_INFO = extern struct {
    ulLength: u32,
    MsiAction: AMSI_UAC_MSI_ACTION,
    lpwszProductName: ?*u16,
    lpwszVersion: ?*u16,
    lpwszLanguage: ?*u16,
    lpwszManufacturer: ?*u16,
    lpwszPackagePath: ?*u16,
    lpwszPackageSource: ?*u16,
    ulUpdates: u32,
    ppwszUpdates: ?*?*u16,
    ppwszUpdateSources: ?*?*u16,
};
// --------------------------------------------------------
// Type: AMSI_UAC_REQUEST_AX_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AMSI_UAC_REQUEST_AX_INFO = extern struct {
    ulLength: u32,
    lpwszLocalInstallPath: ?*u16,
    lpwszSourceURL: ?*u16,
};
// --------------------------------------------------------
// Type: AMSI_UAC_REQUEST_PACKAGED_APP_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AMSI_UAC_REQUEST_PACKAGED_APP_INFO = extern struct {
    ulLength: u32,
    lpwszApplicationName: ?*u16,
    lpwszCommandLine: ?*u16,
    lpPackageFamilyName: ?*u16,
    lpApplicationId: ?*u16,
};
// --------------------------------------------------------
// Type: AMSI_UAC_REQUEST_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const AMSI_UAC_REQUEST_CONTEXT = extern struct {
    ulLength: u32,
    ulRequestorProcessId: u32,
    UACTrustState: AMSI_UAC_TRUST_STATE,
    Type: AMSI_UAC_REQUEST_TYPE,
    RequestType: _RequestType_e__Union,
    bAutoElevateRequest: BOOL,
    // --------------------------------------------------------
    // Type: _RequestType_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _RequestType_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IAmsiStream
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAmsiStream = *opaque{
    // TODO: Method 'GetAttribute'
    // TODO: Method 'Read'
};
// --------------------------------------------------------
// Type: IAntimalwareProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAntimalwareProvider = *opaque{
    // TODO: Method 'Scan'
    // TODO: Method 'CloseSession'
    // TODO: Method 'DisplayName'
};
// --------------------------------------------------------
// Type: IAntimalwareUacProvider
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAntimalwareUacProvider = *opaque{
    // TODO: Method 'UacScan'
    // TODO: Method 'DisplayName'
};
// --------------------------------------------------------
// Type: IAntimalware
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IAntimalware = *opaque{
    // TODO: Method 'Scan'
    // TODO: Method 'CloseSession'
};
// --------------------------------------------------------
// Type: CAntimalware
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const CAntimalware = opaque {
};
// --------------------------------------------------------
// Type: HAMSICONTEXT__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HAMSICONTEXT__ = extern struct {
    unused: i32,
};
// --------------------------------------------------------
// Type: HAMSISESSION__
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const HAMSISESSION__ = extern struct {
    unused: i32,
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "Amsi" fn AmsiInitialize(
    appName: ?*u16,
    amsiContext: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "Amsi" fn AmsiUninitialize(
    amsiContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "Amsi" fn AmsiOpenSession(
    amsiContext: ?*opaque{},
    amsiSession: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "Amsi" fn AmsiCloseSession(
    amsiContext: ?*opaque{},
    amsiSession: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "Amsi" fn AmsiScanBuffer(
    amsiContext: ?*opaque{},
    buffer: ?*opaque{},
    length: u32,
    contentName: ?*u16,
    amsiSession: ?*opaque{},
    result: ?*AMSI_RESULT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "Amsi" fn AmsiScanString(
    amsiContext: ?*opaque{},
    string: ?*u16,
    contentName: ?*u16,
    amsiSession: ?*opaque{},
    result: ?*AMSI_RESULT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("systemservices.zig").BOOL;
const HRESULT = @import("com.zig").HRESULT;

test "" {
    const constant_export_count = 0;
    const type_export_count = 18;
    const func_count = 6;
    const unicode_alias_count = 0;
    const type_import_count = 3;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
