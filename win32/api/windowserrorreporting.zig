//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: WER_REPORT_UI
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WER_REPORT_UI = *opaque{
};
// --------------------------------------------------------
// Type: WER_REGISTER_FILE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WER_REGISTER_FILE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WER_FILE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WER_FILE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WER_SUBMIT_RESULT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WER_SUBMIT_RESULT = *opaque{
};
// --------------------------------------------------------
// Type: WER_REPORT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WER_REPORT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WER_REPORT_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WER_REPORT_INFORMATION = extern struct {
    dwSize: u32,
    hProcess: HANDLE,
    wzConsentKey: ?[*]u16,
    wzFriendlyEventName: ?[*]u16,
    wzApplicationName: ?[*]u16,
    wzApplicationPath: ?[*]u16,
    wzDescription: ?[*]u16,
    hwndParent: HWND,
};
// --------------------------------------------------------
// Type: WER_REPORT_INFORMATION_V3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WER_REPORT_INFORMATION_V3 = extern struct {
    dwSize: u32,
    hProcess: HANDLE,
    wzConsentKey: ?[*]u16,
    wzFriendlyEventName: ?[*]u16,
    wzApplicationName: ?[*]u16,
    wzApplicationPath: ?[*]u16,
    wzDescription: ?[*]u16,
    hwndParent: HWND,
    wzNamespacePartner: ?[*]u16,
    wzNamespaceGroup: ?[*]u16,
};
// --------------------------------------------------------
// Type: WER_DUMP_CUSTOM_OPTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WER_DUMP_CUSTOM_OPTIONS = extern struct {
    dwSize: u32,
    dwMask: u32,
    dwDumpFlags: u32,
    bOnlyThisThread: BOOL,
    dwExceptionThreadFlags: u32,
    dwOtherThreadFlags: u32,
    dwExceptionThreadExFlags: u32,
    dwOtherThreadExFlags: u32,
    dwPreferredModuleFlags: u32,
    dwOtherModuleFlags: u32,
    wzPreferredModuleList: ?[*]u16,
};
// --------------------------------------------------------
// Type: WER_DUMP_CUSTOM_OPTIONS_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WER_DUMP_CUSTOM_OPTIONS_V2 = extern struct {
    dwSize: u32,
    dwMask: u32,
    dwDumpFlags: u32,
    bOnlyThisThread: BOOL,
    dwExceptionThreadFlags: u32,
    dwOtherThreadFlags: u32,
    dwExceptionThreadExFlags: u32,
    dwOtherThreadExFlags: u32,
    dwPreferredModuleFlags: u32,
    dwOtherModuleFlags: u32,
    wzPreferredModuleList: ?[*]u16,
    dwPreferredModuleResetFlags: u32,
    dwOtherModuleResetFlags: u32,
};
// --------------------------------------------------------
// Type: WER_REPORT_INFORMATION_V4
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WER_REPORT_INFORMATION_V4 = extern struct {
    dwSize: u32,
    hProcess: HANDLE,
    wzConsentKey: ?[*]u16,
    wzFriendlyEventName: ?[*]u16,
    wzApplicationName: ?[*]u16,
    wzApplicationPath: ?[*]u16,
    wzDescription: ?[*]u16,
    hwndParent: HWND,
    wzNamespacePartner: ?[*]u16,
    wzNamespaceGroup: ?[*]u16,
    rgbApplicationIdentity: ?[*]u8,
    hSnapshot: HANDLE,
    hDeleteFilesImpersonationToken: HANDLE,
};
// --------------------------------------------------------
// Type: WER_REPORT_INFORMATION_V5
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WER_REPORT_INFORMATION_V5 = extern struct {
    dwSize: u32,
    hProcess: HANDLE,
    wzConsentKey: ?[*]u16,
    wzFriendlyEventName: ?[*]u16,
    wzApplicationName: ?[*]u16,
    wzApplicationPath: ?[*]u16,
    wzDescription: ?[*]u16,
    hwndParent: HWND,
    wzNamespacePartner: ?[*]u16,
    wzNamespaceGroup: ?[*]u16,
    rgbApplicationIdentity: ?[*]u8,
    hSnapshot: HANDLE,
    hDeleteFilesImpersonationToken: HANDLE,
    submitResultMax: WER_SUBMIT_RESULT,
};
// --------------------------------------------------------
// Type: WER_DUMP_CUSTOM_OPTIONS_V3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WER_DUMP_CUSTOM_OPTIONS_V3 = extern struct {
    dwSize: u32,
    dwMask: u32,
    dwDumpFlags: u32,
    bOnlyThisThread: BOOL,
    dwExceptionThreadFlags: u32,
    dwOtherThreadFlags: u32,
    dwExceptionThreadExFlags: u32,
    dwOtherThreadExFlags: u32,
    dwPreferredModuleFlags: u32,
    dwOtherModuleFlags: u32,
    wzPreferredModuleList: ?[*]u16,
    dwPreferredModuleResetFlags: u32,
    dwOtherModuleResetFlags: u32,
    pvDumpKey: ?*opaque{},
    hSnapshot: HANDLE,
    dwThreadID: u32,
};
// --------------------------------------------------------
// Type: WER_EXCEPTION_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WER_EXCEPTION_INFORMATION = extern struct {
    pExceptionPointers: ?*EXCEPTION_POINTERS,
    bClientPointers: BOOL,
};
// --------------------------------------------------------
// Type: WER_CONSENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WER_CONSENT = *opaque{
};
// --------------------------------------------------------
// Type: WER_DUMP_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WER_DUMP_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WER_RUNTIME_EXCEPTION_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WER_RUNTIME_EXCEPTION_INFORMATION = extern struct {
    dwSize: u32,
    hProcess: HANDLE,
    hThread: HANDLE,
    exceptionRecord: EXCEPTION_RECORD,
    context: CONTEXT,
    pwszReportId: ?*u16,
    bIsFatal: BOOL,
    dwReserved: u32,
};
// --------------------------------------------------------
// Type: PFN_WER_RUNTIME_EXCEPTION_EVENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_WER_RUNTIME_EXCEPTION_EVENT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_WER_RUNTIME_EXCEPTION_EVENT_SIGNATURE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_WER_RUNTIME_EXCEPTION_EVENT_SIGNATURE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFN_WER_RUNTIME_EXCEPTION_DEBUGGER_LAUNCH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFN_WER_RUNTIME_EXCEPTION_DEBUGGER_LAUNCH = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: REPORT_STORE_TYPES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const REPORT_STORE_TYPES = *opaque{
};
// --------------------------------------------------------
// Type: WER_REPORT_PARAMETER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WER_REPORT_PARAMETER = extern struct {
    Name: ?[*]u16,
    Value: ?[*]u16,
};
// --------------------------------------------------------
// Type: WER_REPORT_SIGNATURE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WER_REPORT_SIGNATURE = extern struct {
    EventName: ?[*]u16,
    Parameters: ?[*]WER_REPORT_PARAMETER,
};
// --------------------------------------------------------
// Type: WER_REPORT_METADATA_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WER_REPORT_METADATA_V2 = extern struct {
    Signature: WER_REPORT_SIGNATURE,
    BucketId: Guid,
    ReportId: Guid,
    CreationTime: FILETIME,
    SizeInBytes: u64,
    CabId: ?[*]u16,
    ReportStatus: u32,
    ReportIntegratorId: Guid,
    NumberOfFiles: u32,
    SizeOfFileNames: u32,
    FileNames: ?*u16,
};
// --------------------------------------------------------
// Type: WER_REPORT_METADATA_V3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WER_REPORT_METADATA_V3 = extern struct {
    Signature: WER_REPORT_SIGNATURE,
    BucketId: Guid,
    ReportId: Guid,
    CreationTime: FILETIME,
    SizeInBytes: u64,
    CabId: ?[*]u16,
    ReportStatus: u32,
    ReportIntegratorId: Guid,
    NumberOfFiles: u32,
    SizeOfFileNames: u32,
    FileNames: ?*u16,
    FriendlyEventName: ?[*]u16,
    ApplicationName: ?[*]u16,
    ApplicationPath: ?[*]u16,
    Description: ?[*]u16,
    BucketIdString: ?[*]u16,
    LegacyBucketId: u64,
};
// --------------------------------------------------------
// Type: WER_REPORT_METADATA_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WER_REPORT_METADATA_V1 = extern struct {
    Signature: WER_REPORT_SIGNATURE,
    BucketId: Guid,
    ReportId: Guid,
    CreationTime: FILETIME,
    SizeInBytes: u64,
};
// --------------------------------------------------------
// Type: EFaultRepRetVal
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EFaultRepRetVal = *opaque{
};
// --------------------------------------------------------
// Type: pfn_REPORTFAULT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const pfn_REPORTFAULT = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: pfn_ADDEREXCLUDEDAPPLICATIONA
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const pfn_ADDEREXCLUDEDAPPLICATIONA = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: pfn_ADDEREXCLUDEDAPPLICATIONW
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const pfn_ADDEREXCLUDEDAPPLICATIONW = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "wer" fn WerReportCreate(
    pwzEventType: ?*u16,
    repType: WER_REPORT_TYPE,
    pReportInformation: ?*WER_REPORT_INFORMATION,
    phReportHandle: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "wer" fn WerReportSetParameter(
    hReportHandle: ?*opaque{},
    dwparamID: u32,
    pwzName: ?*u16,
    pwzValue: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "wer" fn WerReportAddFile(
    hReportHandle: ?*opaque{},
    pwzPath: ?*u16,
    repFileType: WER_FILE_TYPE,
    dwFileFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "wer" fn WerReportSetUIOption(
    hReportHandle: ?*opaque{},
    repUITypeID: WER_REPORT_UI,
    pwzValue: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "wer" fn WerReportSubmit(
    hReportHandle: ?*opaque{},
    consent: WER_CONSENT,
    dwFlags: u32,
    pSubmitResult: ?*WER_SUBMIT_RESULT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "wer" fn WerReportAddDump(
    hReportHandle: ?*opaque{},
    hProcess: HANDLE,
    hThread: HANDLE,
    dumpType: WER_DUMP_TYPE,
    pExceptionParam: ?*WER_EXCEPTION_INFORMATION,
    pDumpCustomOptions: ?*WER_DUMP_CUSTOM_OPTIONS,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "wer" fn WerReportCloseHandle(
    hReportHandle: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WerRegisterFile(
    pwzFile: ?*u16,
    regFileType: WER_REGISTER_FILE_TYPE,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WerUnregisterFile(
    pwzFilePath: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WerRegisterMemoryBlock(
    pvAddress: ?*opaque{},
    dwSize: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WerUnregisterMemoryBlock(
    pvAddress: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WerRegisterExcludedMemoryBlock(
    address: ?*opaque{},
    size: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WerUnregisterExcludedMemoryBlock(
    address: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WerRegisterCustomMetadata(
    key: ?*u16,
    value: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WerUnregisterCustomMetadata(
    key: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WerRegisterAdditionalProcess(
    processId: u32,
    captureExtraInfoForThreadId: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WerUnregisterAdditionalProcess(
    processId: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WerRegisterAppLocalDump(
    localAppDataRelativePath: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WerUnregisterAppLocalDump(
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WerSetFlags(
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WerGetFlags(
    hProcess: HANDLE,
    pdwFlags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "wer" fn WerAddExcludedApplication(
    pwzExeName: ?*u16,
    bAllUsers: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "wer" fn WerRemoveExcludedApplication(
    pwzExeName: ?*u16,
    bAllUsers: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WerRegisterRuntimeExceptionModule(
    pwszOutOfProcessCallbackDll: ?*u16,
    pContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn WerUnregisterRuntimeExceptionModule(
    pwszOutOfProcessCallbackDll: ?*u16,
    pContext: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "wer" fn WerStoreOpen(
    repStoreType: REPORT_STORE_TYPES,
    phReportStore: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "wer" fn WerStoreClose(
    hReportStore: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "wer" fn WerStoreGetFirstReportKey(
    hReportStore: ?*opaque{},
    ppszReportKey: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "wer" fn WerStoreGetNextReportKey(
    hReportStore: ?*opaque{},
    ppszReportKey: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "wer" fn WerStoreQueryReportMetadataV2(
    hReportStore: ?*opaque{},
    pszReportKey: ?*u16,
    pReportMetadata: ?*WER_REPORT_METADATA_V2,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "wer" fn WerStoreQueryReportMetadataV3(
    hReportStore: ?*opaque{},
    pszReportKey: ?*u16,
    pReportMetadata: ?*WER_REPORT_METADATA_V3,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "wer" fn WerFreeString(
    pwszStr: ?*u16,
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "wer" fn WerStorePurge(
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "wer" fn WerStoreGetReportCount(
    hReportStore: ?*opaque{},
    pdwReportCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "wer" fn WerStoreGetSizeOnDisk(
    hReportStore: ?*opaque{},
    pqwSizeInBytes: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "wer" fn WerStoreQueryReportMetadataV1(
    hReportStore: ?*opaque{},
    pszReportKey: ?*u16,
    pReportMetadata: ?*WER_REPORT_METADATA_V1,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "wer" fn WerStoreUploadReport(
    hReportStore: ?*opaque{},
    pszReportKey: ?*u16,
    dwFlags: u32,
    pSubmitResult: ?*WER_SUBMIT_RESULT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// set_last_errror=False (can and should we use this?)
pub extern "faultrep" fn ReportFault(
    pep: ?*EXCEPTION_POINTERS,
    dwOpt: u32,
) callconv(@import("std").os.windows.WINAPI) EFaultRepRetVal;

// set_last_errror=True (can and should we use this?)
pub extern "faultrep" fn AddERExcludedApplicationA(
    szApplication: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=True (can and should we use this?)
pub extern "faultrep" fn AddERExcludedApplicationW(
    wszApplication: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// set_last_errror=False (can and should we use this?)
pub extern "faultrep" fn WerReportHang(
    hwndHungApp: HWND,
    pwzHungApplicationName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const pfn_ADDEREXCLUDEDAPPLICATION = pfn_ADDEREXCLUDEDAPPLICATIONA;
        pub const AddERExcludedApplication = AddERExcludedApplicationA;
    },
    .wide => struct {
        pub const pfn_ADDEREXCLUDEDAPPLICATION = pfn_ADDEREXCLUDEDAPPLICATIONW;
        pub const AddERExcludedApplication = AddERExcludedApplicationW;
    },
    else => if (@import("builtin").is_test) struct {
        pub const pfn_ADDEREXCLUDEDAPPLICATION = *opaque{};
        pub const AddERExcludedApplication = *opaque{};
    } else struct {
        pub const pfn_ADDEREXCLUDEDAPPLICATION = @compileError("'pfn_ADDEREXCLUDEDAPPLICATION' requires that UNICODE be set to true or false in the root module");
        pub const AddERExcludedApplication = @compileError("'AddERExcludedApplication' requires that UNICODE be set to true or false in the root module");
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const HANDLE = @import("systemservices.zig").HANDLE;
const HWND = @import("windowsandmessaging.zig").HWND;
const BOOL = @import("systemservices.zig").BOOL;
const EXCEPTION_POINTERS = @import("debug.zig").EXCEPTION_POINTERS;
const EXCEPTION_RECORD = @import("debug.zig").EXCEPTION_RECORD;
const CONTEXT = @import("debug.zig").CONTEXT;
const FILETIME = @import("windowsprogramming.zig").FILETIME;
const HRESULT = @import("com.zig").HRESULT;

test "" {
    const constant_export_count = 0;
    const type_export_count = 29;
    const func_count = 41;
    const unicode_alias_count = 2;
    const type_import_count = 9;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
