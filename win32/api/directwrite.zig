//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: DWRITE_FONT_AXIS_TAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_FONT_AXIS_TAG = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_FONT_FILE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_FONT_FILE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_FONT_FACE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_FONT_FACE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_FONT_SIMULATIONS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_FONT_SIMULATIONS = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_FONT_WEIGHT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_FONT_WEIGHT = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_FONT_STRETCH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_FONT_STRETCH = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_FONT_STYLE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_FONT_STYLE = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_INFORMATIONAL_STRING_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_INFORMATIONAL_STRING_ID = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_FONT_METRICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_FONT_METRICS = extern struct {
    designUnitsPerEm: u16,
    ascent: u16,
    descent: u16,
    lineGap: i16,
    capHeight: u16,
    xHeight: u16,
    underlinePosition: i16,
    underlineThickness: u16,
    strikethroughPosition: i16,
    strikethroughThickness: u16,
};
// --------------------------------------------------------
// Type: DWRITE_GLYPH_METRICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_GLYPH_METRICS = extern struct {
    leftSideBearing: i32,
    advanceWidth: u32,
    rightSideBearing: i32,
    topSideBearing: i32,
    advanceHeight: u32,
    bottomSideBearing: i32,
    verticalOriginY: i32,
};
// --------------------------------------------------------
// Type: DWRITE_GLYPH_OFFSET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_GLYPH_OFFSET = extern struct {
    advanceOffset: f32,
    ascenderOffset: f32,
};
// --------------------------------------------------------
// Type: DWRITE_FACTORY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_FACTORY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IDWriteFontFileLoader
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontFileLoader = *opaque{
    // TODO: Method 'CreateStreamFromKey'
};
// --------------------------------------------------------
// Type: IDWriteLocalFontFileLoader
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteLocalFontFileLoader = *opaque{
    // TODO: Method 'GetFilePathLengthFromKey'
    // TODO: Method 'GetFilePathFromKey'
    // TODO: Method 'GetLastWriteTimeFromKey'
};
// --------------------------------------------------------
// Type: IDWriteFontFileStream
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontFileStream = *opaque{
    // TODO: Method 'ReadFileFragment'
    // TODO: Method 'ReleaseFileFragment'
    // TODO: Method 'GetFileSize'
    // TODO: Method 'GetLastWriteTime'
};
// --------------------------------------------------------
// Type: IDWriteFontFile
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontFile = *opaque{
    // TODO: Method 'GetReferenceKey'
    // TODO: Method 'GetLoader'
    // TODO: Method 'Analyze'
};
// --------------------------------------------------------
// Type: DWRITE_PIXEL_GEOMETRY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_PIXEL_GEOMETRY = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_RENDERING_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_RENDERING_MODE = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_MATRIX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_MATRIX = extern struct {
    m11: f32,
    m12: f32,
    m21: f32,
    m22: f32,
    dx: f32,
    dy: f32,
};
// --------------------------------------------------------
// Type: IDWriteRenderingParams
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteRenderingParams = *opaque{
    // TODO: Method 'GetGamma'
    // TODO: Method 'GetEnhancedContrast'
    // TODO: Method 'GetClearTypeLevel'
    // TODO: Method 'GetPixelGeometry'
    // TODO: Method 'GetRenderingMode'
};
// --------------------------------------------------------
// Type: IDWriteFontFace
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontFace = *opaque{
    // TODO: Method 'GetType'
    // TODO: Method 'GetFiles'
    // TODO: Method 'GetIndex'
    // TODO: Method 'GetSimulations'
    // TODO: Method 'IsSymbolFont'
    // TODO: Method 'GetMetrics'
    // TODO: Method 'GetGlyphCount'
    // TODO: Method 'GetDesignGlyphMetrics'
    // TODO: Method 'GetGlyphIndicesA'
    // TODO: Method 'TryGetFontTable'
    // TODO: Method 'ReleaseFontTable'
    // TODO: Method 'GetGlyphRunOutline'
    // TODO: Method 'GetRecommendedRenderingMode'
    // TODO: Method 'GetGdiCompatibleMetrics'
    // TODO: Method 'GetGdiCompatibleGlyphMetrics'
};
// --------------------------------------------------------
// Type: IDWriteFontCollectionLoader
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontCollectionLoader = *opaque{
    // TODO: Method 'CreateEnumeratorFromKey'
};
// --------------------------------------------------------
// Type: IDWriteFontFileEnumerator
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontFileEnumerator = *opaque{
    // TODO: Method 'MoveNext'
    // TODO: Method 'GetCurrentFontFile'
};
// --------------------------------------------------------
// Type: IDWriteLocalizedStrings
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteLocalizedStrings = *opaque{
    // TODO: Method 'GetCount'
    // TODO: Method 'FindLocaleName'
    // TODO: Method 'GetLocaleNameLength'
    // TODO: Method 'GetLocaleName'
    // TODO: Method 'GetStringLength'
    // TODO: Method 'GetString'
};
// --------------------------------------------------------
// Type: IDWriteFontCollection
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontCollection = *opaque{
    // TODO: Method 'GetFontFamilyCount'
    // TODO: Method 'GetFontFamily'
    // TODO: Method 'FindFamilyName'
    // TODO: Method 'GetFontFromFontFace'
};
// --------------------------------------------------------
// Type: IDWriteFontList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontList = *opaque{
    // TODO: Method 'GetFontCollection'
    // TODO: Method 'GetFontCount'
    // TODO: Method 'GetFont'
};
// --------------------------------------------------------
// Type: IDWriteFontFamily
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontFamily = *opaque{
    // TODO: Method 'GetFamilyNames'
    // TODO: Method 'GetFirstMatchingFont'
    // TODO: Method 'GetMatchingFonts'
};
// --------------------------------------------------------
// Type: IDWriteFont
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFont = *opaque{
    // TODO: Method 'GetFontFamily'
    // TODO: Method 'GetWeight'
    // TODO: Method 'GetStretch'
    // TODO: Method 'GetStyle'
    // TODO: Method 'IsSymbolFont'
    // TODO: Method 'GetFaceNames'
    // TODO: Method 'GetInformationalStrings'
    // TODO: Method 'GetSimulations'
    // TODO: Method 'GetMetrics'
    // TODO: Method 'HasCharacter'
    // TODO: Method 'CreateFontFace'
};
// --------------------------------------------------------
// Type: DWRITE_READING_DIRECTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_READING_DIRECTION = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_FLOW_DIRECTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_FLOW_DIRECTION = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_TEXT_ALIGNMENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_TEXT_ALIGNMENT = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_PARAGRAPH_ALIGNMENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_PARAGRAPH_ALIGNMENT = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_WORD_WRAPPING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_WORD_WRAPPING = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_LINE_SPACING_METHOD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_LINE_SPACING_METHOD = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_TRIMMING_GRANULARITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_TRIMMING_GRANULARITY = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_FONT_FEATURE_TAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_FONT_FEATURE_TAG = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_TEXT_RANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_TEXT_RANGE = extern struct {
    startPosition: u32,
    length: u32,
};
// --------------------------------------------------------
// Type: DWRITE_FONT_FEATURE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_FONT_FEATURE = extern struct {
    nameTag: DWRITE_FONT_FEATURE_TAG,
    parameter: u32,
};
// --------------------------------------------------------
// Type: DWRITE_TYPOGRAPHIC_FEATURES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_TYPOGRAPHIC_FEATURES = extern struct {
    features: ?*DWRITE_FONT_FEATURE,
    featureCount: u32,
};
// --------------------------------------------------------
// Type: DWRITE_TRIMMING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_TRIMMING = extern struct {
    granularity: DWRITE_TRIMMING_GRANULARITY,
    delimiter: u32,
    delimiterCount: u32,
};
// --------------------------------------------------------
// Type: IDWriteTextFormat
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteTextFormat = *opaque{
    // TODO: Method 'SetTextAlignment'
    // TODO: Method 'SetParagraphAlignment'
    // TODO: Method 'SetWordWrapping'
    // TODO: Method 'SetReadingDirection'
    // TODO: Method 'SetFlowDirection'
    // TODO: Method 'SetIncrementalTabStop'
    // TODO: Method 'SetTrimming'
    // TODO: Method 'SetLineSpacing'
    // TODO: Method 'GetTextAlignment'
    // TODO: Method 'GetParagraphAlignment'
    // TODO: Method 'GetWordWrapping'
    // TODO: Method 'GetReadingDirection'
    // TODO: Method 'GetFlowDirection'
    // TODO: Method 'GetIncrementalTabStop'
    // TODO: Method 'GetTrimming'
    // TODO: Method 'GetLineSpacing'
    // TODO: Method 'GetFontCollection'
    // TODO: Method 'GetFontFamilyNameLength'
    // TODO: Method 'GetFontFamilyName'
    // TODO: Method 'GetFontWeight'
    // TODO: Method 'GetFontStyle'
    // TODO: Method 'GetFontStretch'
    // TODO: Method 'GetFontSize'
    // TODO: Method 'GetLocaleNameLength'
    // TODO: Method 'GetLocaleName'
};
// --------------------------------------------------------
// Type: IDWriteTypography
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteTypography = *opaque{
    // TODO: Method 'AddFontFeature'
    // TODO: Method 'GetFontFeatureCount'
    // TODO: Method 'GetFontFeature'
};
// --------------------------------------------------------
// Type: DWRITE_SCRIPT_SHAPES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_SCRIPT_SHAPES = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_SCRIPT_ANALYSIS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_SCRIPT_ANALYSIS = extern struct {
    script: u16,
    shapes: DWRITE_SCRIPT_SHAPES,
};
// --------------------------------------------------------
// Type: DWRITE_BREAK_CONDITION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_BREAK_CONDITION = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_LINE_BREAKPOINT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_LINE_BREAKPOINT = extern struct {
    _bitfield: u8,
};
// --------------------------------------------------------
// Type: DWRITE_NUMBER_SUBSTITUTION_METHOD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_NUMBER_SUBSTITUTION_METHOD = *opaque{
};
// --------------------------------------------------------
// Type: IDWriteNumberSubstitution
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteNumberSubstitution = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_SHAPING_TEXT_PROPERTIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_SHAPING_TEXT_PROPERTIES = extern struct {
    _bitfield: u16,
};
// --------------------------------------------------------
// Type: DWRITE_SHAPING_GLYPH_PROPERTIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_SHAPING_GLYPH_PROPERTIES = extern struct {
    _bitfield: u16,
};
// --------------------------------------------------------
// Type: IDWriteTextAnalysisSource
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteTextAnalysisSource = *opaque{
    // TODO: Method 'GetTextAtPosition'
    // TODO: Method 'GetTextBeforePosition'
    // TODO: Method 'GetParagraphReadingDirection'
    // TODO: Method 'GetLocaleName'
    // TODO: Method 'GetNumberSubstitution'
};
// --------------------------------------------------------
// Type: IDWriteTextAnalysisSink
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteTextAnalysisSink = *opaque{
    // TODO: Method 'SetScriptAnalysis'
    // TODO: Method 'SetLineBreakpoints'
    // TODO: Method 'SetBidiLevel'
    // TODO: Method 'SetNumberSubstitution'
};
// --------------------------------------------------------
// Type: IDWriteTextAnalyzer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteTextAnalyzer = *opaque{
    // TODO: Method 'AnalyzeScript'
    // TODO: Method 'AnalyzeBidi'
    // TODO: Method 'AnalyzeNumberSubstitution'
    // TODO: Method 'AnalyzeLineBreakpoints'
    // TODO: Method 'GetGlyphs'
    // TODO: Method 'GetGlyphPlacements'
    // TODO: Method 'GetGdiCompatibleGlyphPlacements'
};
// --------------------------------------------------------
// Type: DWRITE_GLYPH_RUN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_GLYPH_RUN = extern struct {
    fontFace: IDWriteFontFace,
    fontEmSize: f32,
    glyphCount: u32,
    glyphIndices: ?*u16,
    glyphAdvances: ?*f32,
    glyphOffsets: ?*DWRITE_GLYPH_OFFSET,
    isSideways: BOOL,
    bidiLevel: u32,
};
// --------------------------------------------------------
// Type: DWRITE_GLYPH_RUN_DESCRIPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_GLYPH_RUN_DESCRIPTION = extern struct {
    localeName: ?*u16,
    string: ?*u16,
    stringLength: u32,
    clusterMap: ?*u16,
    textPosition: u32,
};
// --------------------------------------------------------
// Type: DWRITE_UNDERLINE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_UNDERLINE = extern struct {
    width: f32,
    thickness: f32,
    offset: f32,
    runHeight: f32,
    readingDirection: DWRITE_READING_DIRECTION,
    flowDirection: DWRITE_FLOW_DIRECTION,
    localeName: ?*u16,
    measuringMode: DWRITE_MEASURING_MODE,
};
// --------------------------------------------------------
// Type: DWRITE_STRIKETHROUGH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_STRIKETHROUGH = extern struct {
    width: f32,
    thickness: f32,
    offset: f32,
    readingDirection: DWRITE_READING_DIRECTION,
    flowDirection: DWRITE_FLOW_DIRECTION,
    localeName: ?*u16,
    measuringMode: DWRITE_MEASURING_MODE,
};
// --------------------------------------------------------
// Type: DWRITE_LINE_METRICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_LINE_METRICS = extern struct {
    length: u32,
    trailingWhitespaceLength: u32,
    newlineLength: u32,
    height: f32,
    baseline: f32,
    isTrimmed: BOOL,
};
// --------------------------------------------------------
// Type: DWRITE_CLUSTER_METRICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_CLUSTER_METRICS = extern struct {
    width: f32,
    length: u16,
    _bitfield: u16,
};
// --------------------------------------------------------
// Type: DWRITE_TEXT_METRICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_TEXT_METRICS = extern struct {
    left: f32,
    top: f32,
    width: f32,
    widthIncludingTrailingWhitespace: f32,
    height: f32,
    layoutWidth: f32,
    layoutHeight: f32,
    maxBidiReorderingDepth: u32,
    lineCount: u32,
};
// --------------------------------------------------------
// Type: DWRITE_INLINE_OBJECT_METRICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_INLINE_OBJECT_METRICS = extern struct {
    width: f32,
    height: f32,
    baseline: f32,
    supportsSideways: BOOL,
};
// --------------------------------------------------------
// Type: DWRITE_OVERHANG_METRICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_OVERHANG_METRICS = extern struct {
    left: f32,
    top: f32,
    right: f32,
    bottom: f32,
};
// --------------------------------------------------------
// Type: DWRITE_HIT_TEST_METRICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_HIT_TEST_METRICS = extern struct {
    textPosition: u32,
    length: u32,
    left: f32,
    top: f32,
    width: f32,
    height: f32,
    bidiLevel: u32,
    isText: BOOL,
    isTrimmed: BOOL,
};
// --------------------------------------------------------
// Type: IDWriteInlineObject
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteInlineObject = *opaque{
    // TODO: Method 'Draw'
    // TODO: Method 'GetMetrics'
    // TODO: Method 'GetOverhangMetrics'
    // TODO: Method 'GetBreakConditions'
};
// --------------------------------------------------------
// Type: IDWritePixelSnapping
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWritePixelSnapping = *opaque{
    // TODO: Method 'IsPixelSnappingDisabled'
    // TODO: Method 'GetCurrentTransform'
    // TODO: Method 'GetPixelsPerDip'
};
// --------------------------------------------------------
// Type: IDWriteTextRenderer
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteTextRenderer = *opaque{
    // TODO: Method 'DrawGlyphRun'
    // TODO: Method 'DrawUnderline'
    // TODO: Method 'DrawStrikethrough'
    // TODO: Method 'DrawInlineObject'
};
// --------------------------------------------------------
// Type: IDWriteTextLayout
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteTextLayout = *opaque{
    // TODO: Method 'SetMaxWidth'
    // TODO: Method 'SetMaxHeight'
    // TODO: Method 'SetFontCollection'
    // TODO: Method 'SetFontFamilyName'
    // TODO: Method 'SetFontWeight'
    // TODO: Method 'SetFontStyle'
    // TODO: Method 'SetFontStretch'
    // TODO: Method 'SetFontSize'
    // TODO: Method 'SetUnderline'
    // TODO: Method 'SetStrikethrough'
    // TODO: Method 'SetDrawingEffect'
    // TODO: Method 'SetInlineObject'
    // TODO: Method 'SetTypography'
    // TODO: Method 'SetLocaleName'
    // TODO: Method 'GetMaxWidth'
    // TODO: Method 'GetMaxHeight'
    // TODO: Method 'GetFontCollection'
    // TODO: Method 'GetFontFamilyNameLength'
    // TODO: Method 'GetFontFamilyName'
    // TODO: Method 'GetFontWeight'
    // TODO: Method 'GetFontStyle'
    // TODO: Method 'GetFontStretch'
    // TODO: Method 'GetFontSize'
    // TODO: Method 'GetUnderline'
    // TODO: Method 'GetStrikethrough'
    // TODO: Method 'GetDrawingEffect'
    // TODO: Method 'GetInlineObject'
    // TODO: Method 'GetTypography'
    // TODO: Method 'GetLocaleNameLength'
    // TODO: Method 'GetLocaleName'
    // TODO: Method 'Draw'
    // TODO: Method 'GetLineMetrics'
    // TODO: Method 'GetMetrics'
    // TODO: Method 'GetOverhangMetrics'
    // TODO: Method 'GetClusterMetrics'
    // TODO: Method 'DetermineMinWidth'
    // TODO: Method 'HitTestPoint'
    // TODO: Method 'HitTestTextPosition'
    // TODO: Method 'HitTestTextRange'
};
// --------------------------------------------------------
// Type: IDWriteBitmapRenderTarget
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteBitmapRenderTarget = *opaque{
    // TODO: Method 'DrawGlyphRun'
    // TODO: Method 'GetMemoryDC'
    // TODO: Method 'GetPixelsPerDip'
    // TODO: Method 'SetPixelsPerDip'
    // TODO: Method 'GetCurrentTransform'
    // TODO: Method 'SetCurrentTransform'
    // TODO: Method 'GetSize'
    // TODO: Method 'Resize'
};
// --------------------------------------------------------
// Type: IDWriteGdiInterop
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteGdiInterop = *opaque{
    // TODO: Method 'CreateFontFromLOGFONT'
    // TODO: Method 'ConvertFontToLOGFONT'
    // TODO: Method 'ConvertFontFaceToLOGFONT'
    // TODO: Method 'CreateFontFaceFromHdc'
    // TODO: Method 'CreateBitmapRenderTarget'
};
// --------------------------------------------------------
// Type: DWRITE_TEXTURE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_TEXTURE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IDWriteGlyphRunAnalysis
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteGlyphRunAnalysis = *opaque{
    // TODO: Method 'GetAlphaTextureBounds'
    // TODO: Method 'CreateAlphaTexture'
    // TODO: Method 'GetAlphaBlendParams'
};
// --------------------------------------------------------
// Type: IDWriteFactory
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFactory = *opaque{
    // TODO: Method 'GetSystemFontCollection'
    // TODO: Method 'CreateCustomFontCollection'
    // TODO: Method 'RegisterFontCollectionLoader'
    // TODO: Method 'UnregisterFontCollectionLoader'
    // TODO: Method 'CreateFontFileReference'
    // TODO: Method 'CreateCustomFontFileReference'
    // TODO: Method 'CreateFontFace'
    // TODO: Method 'CreateRenderingParams'
    // TODO: Method 'CreateMonitorRenderingParams'
    // TODO: Method 'CreateCustomRenderingParams'
    // TODO: Method 'RegisterFontFileLoader'
    // TODO: Method 'UnregisterFontFileLoader'
    // TODO: Method 'CreateTextFormat'
    // TODO: Method 'CreateTypography'
    // TODO: Method 'GetGdiInterop'
    // TODO: Method 'CreateTextLayout'
    // TODO: Method 'CreateGdiCompatibleTextLayout'
    // TODO: Method 'CreateEllipsisTrimmingSign'
    // TODO: Method 'CreateTextAnalyzer'
    // TODO: Method 'CreateNumberSubstitution'
    // TODO: Method 'CreateGlyphRunAnalysis'
};
// --------------------------------------------------------
// Type: DWRITE_PANOSE_FAMILY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_PANOSE_FAMILY = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_PANOSE_SERIF_STYLE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_PANOSE_SERIF_STYLE = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_PANOSE_WEIGHT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_PANOSE_WEIGHT = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_PANOSE_PROPORTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_PANOSE_PROPORTION = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_PANOSE_CONTRAST
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_PANOSE_CONTRAST = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_PANOSE_STROKE_VARIATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_PANOSE_STROKE_VARIATION = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_PANOSE_ARM_STYLE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_PANOSE_ARM_STYLE = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_PANOSE_LETTERFORM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_PANOSE_LETTERFORM = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_PANOSE_MIDLINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_PANOSE_MIDLINE = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_PANOSE_XHEIGHT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_PANOSE_XHEIGHT = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_PANOSE_TOOL_KIND
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_PANOSE_TOOL_KIND = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_PANOSE_SPACING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_PANOSE_SPACING = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_PANOSE_ASPECT_RATIO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_PANOSE_ASPECT_RATIO = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_PANOSE_SCRIPT_TOPOLOGY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_PANOSE_SCRIPT_TOPOLOGY = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_PANOSE_SCRIPT_FORM
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_PANOSE_SCRIPT_FORM = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_PANOSE_FINIALS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_PANOSE_FINIALS = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_PANOSE_XASCENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_PANOSE_XASCENT = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_PANOSE_DECORATIVE_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_PANOSE_DECORATIVE_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_PANOSE_ASPECT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_PANOSE_ASPECT = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_PANOSE_FILL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_PANOSE_FILL = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_PANOSE_LINING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_PANOSE_LINING = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_PANOSE_DECORATIVE_TOPOLOGY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_PANOSE_CHARACTER_RANGES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_PANOSE_CHARACTER_RANGES = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_PANOSE_SYMBOL_KIND
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_PANOSE_SYMBOL_KIND = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_PANOSE_SYMBOL_ASPECT_RATIO
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_OUTLINE_THRESHOLD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_OUTLINE_THRESHOLD = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_BASELINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_BASELINE = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_VERTICAL_GLYPH_ORIENTATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_VERTICAL_GLYPH_ORIENTATION = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_GLYPH_ORIENTATION_ANGLE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_GLYPH_ORIENTATION_ANGLE = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_FONT_METRICS1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_FONT_METRICS1 = extern struct {
    __AnonymousBase_DWrite_1_L627_C38: DWRITE_FONT_METRICS,
    glyphBoxLeft: i16,
    glyphBoxTop: i16,
    glyphBoxRight: i16,
    glyphBoxBottom: i16,
    subscriptPositionX: i16,
    subscriptPositionY: i16,
    subscriptSizeX: i16,
    subscriptSizeY: i16,
    superscriptPositionX: i16,
    superscriptPositionY: i16,
    superscriptSizeX: i16,
    superscriptSizeY: i16,
    hasTypographicMetrics: BOOL,
};
// --------------------------------------------------------
// Type: DWRITE_CARET_METRICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_CARET_METRICS = extern struct {
    slopeRise: i16,
    slopeRun: i16,
    offset: i16,
};
// --------------------------------------------------------
// Type: DWRITE_PANOSE
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const DWRITE_PANOSE = *opaque{
    // --------------------------------------------------------
    // Type: _symbol_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _symbol_e__Struct = extern struct {
        familyKind: u8,
        symbolKind: u8,
        weight: u8,
        spacing: u8,
        aspectRatioAndContrast: u8,
        aspectRatio94: u8,
        aspectRatio119: u8,
        aspectRatio157: u8,
        aspectRatio163: u8,
        aspectRatio211: u8,
    };
    // --------------------------------------------------------
    // Type: _script_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _script_e__Struct = extern struct {
        familyKind: u8,
        toolKind: u8,
        weight: u8,
        spacing: u8,
        aspectRatio: u8,
        contrast: u8,
        scriptTopology: u8,
        scriptForm: u8,
        finials: u8,
        xAscent: u8,
    };
    // --------------------------------------------------------
    // Type: _decorative_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _decorative_e__Struct = extern struct {
        familyKind: u8,
        decorativeClass: u8,
        weight: u8,
        aspect: u8,
        contrast: u8,
        serifVariant: u8,
        fill: u8,
        lining: u8,
        decorativeTopology: u8,
        characterRange: u8,
    };
    // --------------------------------------------------------
    // Type: _text_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _text_e__Struct = extern struct {
        familyKind: u8,
        serifStyle: u8,
        weight: u8,
        proportion: u8,
        contrast: u8,
        strokeVariation: u8,
        armStyle: u8,
        letterform: u8,
        midline: u8,
        xHeight: u8,
    };
};
// --------------------------------------------------------
// Type: DWRITE_UNICODE_RANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_UNICODE_RANGE = extern struct {
    first: u32,
    last: u32,
};
// --------------------------------------------------------
// Type: DWRITE_SCRIPT_PROPERTIES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_SCRIPT_PROPERTIES = extern struct {
    isoScriptCode: u32,
    isoScriptNumber: u32,
    clusterLookahead: u32,
    justificationCharacter: u32,
    _bitfield: u32,
};
// --------------------------------------------------------
// Type: DWRITE_JUSTIFICATION_OPPORTUNITY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_JUSTIFICATION_OPPORTUNITY = extern struct {
    expansionMinimum: f32,
    expansionMaximum: f32,
    compressionMaximum: f32,
    _bitfield: u32,
};
// --------------------------------------------------------
// Type: IDWriteFactory1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFactory1 = *opaque{
    // TODO: Method 'GetEudcFontCollection'
    // TODO: Method 'CreateCustomRenderingParams'
};
// --------------------------------------------------------
// Type: IDWriteFontFace1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontFace1 = *opaque{
    // TODO: Method 'GetMetrics'
    // TODO: Method 'GetGdiCompatibleMetrics'
    // TODO: Method 'GetCaretMetrics'
    // TODO: Method 'GetUnicodeRanges'
    // TODO: Method 'IsMonospacedFont'
    // TODO: Method 'GetDesignGlyphAdvances'
    // TODO: Method 'GetGdiCompatibleGlyphAdvances'
    // TODO: Method 'GetKerningPairAdjustments'
    // TODO: Method 'HasKerningPairs'
    // TODO: Method 'GetRecommendedRenderingMode'
    // TODO: Method 'GetVerticalGlyphVariants'
    // TODO: Method 'HasVerticalGlyphVariants'
};
// --------------------------------------------------------
// Type: IDWriteFont1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFont1 = *opaque{
    // TODO: Method 'GetMetrics'
    // TODO: Method 'GetPanose'
    // TODO: Method 'GetUnicodeRanges'
    // TODO: Method 'IsMonospacedFont'
};
// --------------------------------------------------------
// Type: IDWriteRenderingParams1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteRenderingParams1 = *opaque{
    // TODO: Method 'GetGrayscaleEnhancedContrast'
};
// --------------------------------------------------------
// Type: IDWriteTextAnalyzer1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteTextAnalyzer1 = *opaque{
    // TODO: Method 'ApplyCharacterSpacing'
    // TODO: Method 'GetBaseline'
    // TODO: Method 'AnalyzeVerticalGlyphOrientation'
    // TODO: Method 'GetGlyphOrientationTransform'
    // TODO: Method 'GetScriptProperties'
    // TODO: Method 'GetTextComplexity'
    // TODO: Method 'GetJustificationOpportunities'
    // TODO: Method 'JustifyGlyphAdvances'
    // TODO: Method 'GetJustifiedGlyphs'
};
// --------------------------------------------------------
// Type: IDWriteTextAnalysisSource1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteTextAnalysisSource1 = *opaque{
    // TODO: Method 'GetVerticalGlyphOrientation'
};
// --------------------------------------------------------
// Type: IDWriteTextAnalysisSink1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteTextAnalysisSink1 = *opaque{
    // TODO: Method 'SetGlyphOrientation'
};
// --------------------------------------------------------
// Type: IDWriteTextLayout1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteTextLayout1 = *opaque{
    // TODO: Method 'SetPairKerning'
    // TODO: Method 'GetPairKerning'
    // TODO: Method 'SetCharacterSpacing'
    // TODO: Method 'GetCharacterSpacing'
};
// --------------------------------------------------------
// Type: DWRITE_TEXT_ANTIALIAS_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_TEXT_ANTIALIAS_MODE = *opaque{
};
// --------------------------------------------------------
// Type: IDWriteBitmapRenderTarget1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteBitmapRenderTarget1 = *opaque{
    // TODO: Method 'GetTextAntialiasMode'
    // TODO: Method 'SetTextAntialiasMode'
};
// --------------------------------------------------------
// Type: DWRITE_OPTICAL_ALIGNMENT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_OPTICAL_ALIGNMENT = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_GRID_FIT_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_GRID_FIT_MODE = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_TEXT_METRICS1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_TEXT_METRICS1 = extern struct {
    Base: DWRITE_TEXT_METRICS,
    heightIncludingTrailingWhitespace: f32,
};
// --------------------------------------------------------
// Type: IDWriteTextRenderer1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteTextRenderer1 = *opaque{
    // TODO: Method 'DrawGlyphRun'
    // TODO: Method 'DrawUnderline'
    // TODO: Method 'DrawStrikethrough'
    // TODO: Method 'DrawInlineObject'
};
// --------------------------------------------------------
// Type: IDWriteTextFormat1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteTextFormat1 = *opaque{
    // TODO: Method 'SetVerticalGlyphOrientation'
    // TODO: Method 'GetVerticalGlyphOrientation'
    // TODO: Method 'SetLastLineWrapping'
    // TODO: Method 'GetLastLineWrapping'
    // TODO: Method 'SetOpticalAlignment'
    // TODO: Method 'GetOpticalAlignment'
    // TODO: Method 'SetFontFallback'
    // TODO: Method 'GetFontFallback'
};
// --------------------------------------------------------
// Type: IDWriteTextLayout2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteTextLayout2 = *opaque{
    // TODO: Method 'GetMetrics'
    // TODO: Method 'SetVerticalGlyphOrientation'
    // TODO: Method 'GetVerticalGlyphOrientation'
    // TODO: Method 'SetLastLineWrapping'
    // TODO: Method 'GetLastLineWrapping'
    // TODO: Method 'SetOpticalAlignment'
    // TODO: Method 'GetOpticalAlignment'
    // TODO: Method 'SetFontFallback'
    // TODO: Method 'GetFontFallback'
};
// --------------------------------------------------------
// Type: IDWriteTextAnalyzer2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteTextAnalyzer2 = *opaque{
    // TODO: Method 'GetGlyphOrientationTransform'
    // TODO: Method 'GetTypographicFeatures'
    // TODO: Method 'CheckTypographicFeature'
};
// --------------------------------------------------------
// Type: IDWriteFontFallback
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontFallback = *opaque{
    // TODO: Method 'MapCharacters'
};
// --------------------------------------------------------
// Type: IDWriteFontFallbackBuilder
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontFallbackBuilder = *opaque{
    // TODO: Method 'AddMapping'
    // TODO: Method 'AddMappings'
    // TODO: Method 'CreateFontFallback'
};
// --------------------------------------------------------
// Type: IDWriteFont2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFont2 = *opaque{
    // TODO: Method 'IsColorFont'
};
// --------------------------------------------------------
// Type: IDWriteFontFace2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontFace2 = *opaque{
    // TODO: Method 'IsColorFont'
    // TODO: Method 'GetColorPaletteCount'
    // TODO: Method 'GetPaletteEntryCount'
    // TODO: Method 'GetPaletteEntries'
    // TODO: Method 'GetRecommendedRenderingMode'
};
// --------------------------------------------------------
// Type: DWRITE_COLOR_GLYPH_RUN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_COLOR_GLYPH_RUN = extern struct {
    glyphRun: DWRITE_GLYPH_RUN,
    glyphRunDescription: ?*DWRITE_GLYPH_RUN_DESCRIPTION,
    baselineOriginX: f32,
    baselineOriginY: f32,
    runColor: DXGI_RGBA,
    paletteIndex: u16,
};
// --------------------------------------------------------
// Type: IDWriteColorGlyphRunEnumerator
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteColorGlyphRunEnumerator = *opaque{
    // TODO: Method 'MoveNext'
    // TODO: Method 'GetCurrentRun'
};
// --------------------------------------------------------
// Type: IDWriteRenderingParams2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteRenderingParams2 = *opaque{
    // TODO: Method 'GetGridFitMode'
};
// --------------------------------------------------------
// Type: IDWriteFactory2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFactory2 = *opaque{
    // TODO: Method 'GetSystemFontFallback'
    // TODO: Method 'CreateFontFallbackBuilder'
    // TODO: Method 'TranslateColorGlyphRun'
    // TODO: Method 'CreateCustomRenderingParams'
    // TODO: Method 'CreateGlyphRunAnalysis'
};
// --------------------------------------------------------
// Type: DWRITE_FONT_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_FONT_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_FONT_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_FONT_PROPERTY = extern struct {
    propertyId: DWRITE_FONT_PROPERTY_ID,
    propertyValue: ?*u16,
    localeName: ?*u16,
};
// --------------------------------------------------------
// Type: DWRITE_LOCALITY
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_LOCALITY = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_RENDERING_MODE1
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_RENDERING_MODE1 = *opaque{
};
// --------------------------------------------------------
// Type: IDWriteRenderingParams3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteRenderingParams3 = *opaque{
    // TODO: Method 'GetRenderingMode1'
};
// --------------------------------------------------------
// Type: IDWriteFactory3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFactory3 = *opaque{
    // TODO: Method 'CreateGlyphRunAnalysis'
    // TODO: Method 'CreateCustomRenderingParams'
    // TODO: Method 'CreateFontFaceReference'
    // TODO: Method 'CreateFontFaceReference'
    // TODO: Method 'GetSystemFontSet'
    // TODO: Method 'CreateFontSetBuilder'
    // TODO: Method 'CreateFontCollectionFromFontSet'
    // TODO: Method 'GetSystemFontCollection'
    // TODO: Method 'GetFontDownloadQueue'
};
// --------------------------------------------------------
// Type: IDWriteFontSet
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontSet = *opaque{
    // TODO: Method 'GetFontCount'
    // TODO: Method 'GetFontFaceReference'
    // TODO: Method 'FindFontFaceReference'
    // TODO: Method 'FindFontFace'
    // TODO: Method 'GetPropertyValues'
    // TODO: Method 'GetPropertyValues'
    // TODO: Method 'GetPropertyValues'
    // TODO: Method 'GetPropertyOccurrenceCount'
    // TODO: Method 'GetMatchingFonts'
    // TODO: Method 'GetMatchingFonts'
};
// --------------------------------------------------------
// Type: IDWriteFontSetBuilder
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontSetBuilder = *opaque{
    // TODO: Method 'AddFontFaceReference'
    // TODO: Method 'AddFontFaceReference'
    // TODO: Method 'AddFontSet'
    // TODO: Method 'CreateFontSet'
};
// --------------------------------------------------------
// Type: IDWriteFontCollection1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontCollection1 = *opaque{
    // TODO: Method 'GetFontSet'
    // TODO: Method 'GetFontFamily'
};
// --------------------------------------------------------
// Type: IDWriteFontFamily1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontFamily1 = *opaque{
    // TODO: Method 'GetFontLocality'
    // TODO: Method 'GetFont'
    // TODO: Method 'GetFontFaceReference'
};
// --------------------------------------------------------
// Type: IDWriteFontList1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontList1 = *opaque{
    // TODO: Method 'GetFontLocality'
    // TODO: Method 'GetFont'
    // TODO: Method 'GetFontFaceReference'
};
// --------------------------------------------------------
// Type: IDWriteFontFaceReference
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontFaceReference = *opaque{
    // TODO: Method 'CreateFontFace'
    // TODO: Method 'CreateFontFaceWithSimulations'
    // TODO: Method 'Equals'
    // TODO: Method 'GetFontFaceIndex'
    // TODO: Method 'GetSimulations'
    // TODO: Method 'GetFontFile'
    // TODO: Method 'GetLocalFileSize'
    // TODO: Method 'GetFileSize'
    // TODO: Method 'GetFileTime'
    // TODO: Method 'GetLocality'
    // TODO: Method 'EnqueueFontDownloadRequest'
    // TODO: Method 'EnqueueCharacterDownloadRequest'
    // TODO: Method 'EnqueueGlyphDownloadRequest'
    // TODO: Method 'EnqueueFileFragmentDownloadRequest'
};
// --------------------------------------------------------
// Type: IDWriteFont3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFont3 = *opaque{
    // TODO: Method 'CreateFontFace'
    // TODO: Method 'Equals'
    // TODO: Method 'GetFontFaceReference'
    // TODO: Method 'HasCharacter'
    // TODO: Method 'GetLocality'
};
// --------------------------------------------------------
// Type: IDWriteFontFace3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontFace3 = *opaque{
    // TODO: Method 'GetFontFaceReference'
    // TODO: Method 'GetPanose'
    // TODO: Method 'GetWeight'
    // TODO: Method 'GetStretch'
    // TODO: Method 'GetStyle'
    // TODO: Method 'GetFamilyNames'
    // TODO: Method 'GetFaceNames'
    // TODO: Method 'GetInformationalStrings'
    // TODO: Method 'HasCharacter'
    // TODO: Method 'GetRecommendedRenderingMode'
    // TODO: Method 'IsCharacterLocal'
    // TODO: Method 'IsGlyphLocal'
    // TODO: Method 'AreCharactersLocal'
    // TODO: Method 'AreGlyphsLocal'
};
// --------------------------------------------------------
// Type: IDWriteStringList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteStringList = *opaque{
    // TODO: Method 'GetCount'
    // TODO: Method 'GetLocaleNameLength'
    // TODO: Method 'GetLocaleName'
    // TODO: Method 'GetStringLength'
    // TODO: Method 'GetString'
};
// --------------------------------------------------------
// Type: IDWriteFontDownloadListener
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontDownloadListener = *opaque{
    // TODO: Method 'DownloadCompleted'
};
// --------------------------------------------------------
// Type: IDWriteFontDownloadQueue
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontDownloadQueue = *opaque{
    // TODO: Method 'AddListener'
    // TODO: Method 'RemoveListener'
    // TODO: Method 'IsEmpty'
    // TODO: Method 'BeginDownload'
    // TODO: Method 'CancelDownload'
    // TODO: Method 'GetGenerationCount'
};
// --------------------------------------------------------
// Type: IDWriteGdiInterop1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteGdiInterop1 = *opaque{
    // TODO: Method 'CreateFontFromLOGFONT'
    // TODO: Method 'GetFontSignature'
    // TODO: Method 'GetFontSignature'
    // TODO: Method 'GetMatchingFontsByLOGFONT'
};
// --------------------------------------------------------
// Type: DWRITE_LINE_METRICS1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_LINE_METRICS1 = extern struct {
    Base: DWRITE_LINE_METRICS,
    leadingBefore: f32,
    leadingAfter: f32,
};
// --------------------------------------------------------
// Type: DWRITE_FONT_LINE_GAP_USAGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_FONT_LINE_GAP_USAGE = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_LINE_SPACING
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_LINE_SPACING = extern struct {
    method: DWRITE_LINE_SPACING_METHOD,
    height: f32,
    baseline: f32,
    leadingBefore: f32,
    fontLineGapUsage: DWRITE_FONT_LINE_GAP_USAGE,
};
// --------------------------------------------------------
// Type: IDWriteTextFormat2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteTextFormat2 = *opaque{
    // TODO: Method 'SetLineSpacing'
    // TODO: Method 'GetLineSpacing'
};
// --------------------------------------------------------
// Type: IDWriteTextLayout3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteTextLayout3 = *opaque{
    // TODO: Method 'InvalidateLayout'
    // TODO: Method 'SetLineSpacing'
    // TODO: Method 'GetLineSpacing'
    // TODO: Method 'GetLineMetrics'
};
// --------------------------------------------------------
// Type: DWRITE_COLOR_GLYPH_RUN1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_COLOR_GLYPH_RUN1 = extern struct {
    Base: DWRITE_COLOR_GLYPH_RUN,
    glyphImageFormat: DWRITE_GLYPH_IMAGE_FORMATS,
    measuringMode: DWRITE_MEASURING_MODE,
};
// --------------------------------------------------------
// Type: DWRITE_GLYPH_IMAGE_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_GLYPH_IMAGE_DATA = extern struct {
    imageData: ?*opaque{},
    imageDataSize: u32,
    uniqueDataId: u32,
    pixelsPerEm: u32,
    pixelSize: D2D_SIZE_U,
    horizontalLeftOrigin: POINT,
    horizontalRightOrigin: POINT,
    verticalTopOrigin: POINT,
    verticalBottomOrigin: POINT,
};
// --------------------------------------------------------
// Type: IDWriteColorGlyphRunEnumerator1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteColorGlyphRunEnumerator1 = *opaque{
    // TODO: Method 'GetCurrentRun'
};
// --------------------------------------------------------
// Type: IDWriteFontFace4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontFace4 = *opaque{
    // TODO: Method 'GetGlyphImageFormats'
    // TODO: Method 'GetGlyphImageFormats'
    // TODO: Method 'GetGlyphImageData'
    // TODO: Method 'ReleaseGlyphImageData'
};
// --------------------------------------------------------
// Type: IDWriteFactory4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFactory4 = *opaque{
    // TODO: Method 'TranslateColorGlyphRun'
    // TODO: Method 'ComputeGlyphOrigins'
    // TODO: Method 'ComputeGlyphOrigins'
};
// --------------------------------------------------------
// Type: IDWriteFontSetBuilder1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontSetBuilder1 = *opaque{
    // TODO: Method 'AddFontFile'
};
// --------------------------------------------------------
// Type: IDWriteAsyncResult
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteAsyncResult = *opaque{
    // TODO: Method 'GetWaitHandle'
    // TODO: Method 'GetResult'
};
// --------------------------------------------------------
// Type: DWRITE_FILE_FRAGMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_FILE_FRAGMENT = extern struct {
    fileOffset: u64,
    fragmentSize: u64,
};
// --------------------------------------------------------
// Type: IDWriteRemoteFontFileStream
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteRemoteFontFileStream = *opaque{
    // TODO: Method 'GetLocalFileSize'
    // TODO: Method 'GetFileFragmentLocality'
    // TODO: Method 'GetLocality'
    // TODO: Method 'BeginDownload'
};
// --------------------------------------------------------
// Type: DWRITE_CONTAINER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_CONTAINER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IDWriteRemoteFontFileLoader
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteRemoteFontFileLoader = *opaque{
    // TODO: Method 'CreateRemoteStreamFromKey'
    // TODO: Method 'GetLocalityFromKey'
    // TODO: Method 'CreateFontFileReferenceFromUrl'
};
// --------------------------------------------------------
// Type: IDWriteInMemoryFontFileLoader
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteInMemoryFontFileLoader = *opaque{
    // TODO: Method 'CreateInMemoryFontFileReference'
    // TODO: Method 'GetFileCount'
};
// --------------------------------------------------------
// Type: IDWriteFactory5
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFactory5 = *opaque{
    // TODO: Method 'CreateFontSetBuilder'
    // TODO: Method 'CreateInMemoryFontFileLoader'
    // TODO: Method 'CreateHttpFontFileLoader'
    // TODO: Method 'AnalyzeContainerType'
    // TODO: Method 'UnpackFontFile'
};
// --------------------------------------------------------
// Type: DWRITE_FONT_AXIS_VALUE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_FONT_AXIS_VALUE = extern struct {
    axisTag: DWRITE_FONT_AXIS_TAG,
    value: f32,
};
// --------------------------------------------------------
// Type: DWRITE_FONT_AXIS_RANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DWRITE_FONT_AXIS_RANGE = extern struct {
    axisTag: DWRITE_FONT_AXIS_TAG,
    minValue: f32,
    maxValue: f32,
};
// --------------------------------------------------------
// Type: DWRITE_FONT_FAMILY_MODEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_FONT_FAMILY_MODEL = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_AUTOMATIC_FONT_AXES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_AUTOMATIC_FONT_AXES = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_FONT_AXIS_ATTRIBUTES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_FONT_AXIS_ATTRIBUTES = *opaque{
};
// --------------------------------------------------------
// Type: IDWriteFactory6
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFactory6 = *opaque{
    // TODO: Method 'CreateFontFaceReference'
    // TODO: Method 'CreateFontResource'
    // TODO: Method 'GetSystemFontSet'
    // TODO: Method 'GetSystemFontCollection'
    // TODO: Method 'CreateFontCollectionFromFontSet'
    // TODO: Method 'CreateFontSetBuilder'
    // TODO: Method 'CreateTextFormat'
};
// --------------------------------------------------------
// Type: IDWriteFontFace5
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontFace5 = *opaque{
    // TODO: Method 'GetFontAxisValueCount'
    // TODO: Method 'GetFontAxisValues'
    // TODO: Method 'HasVariations'
    // TODO: Method 'GetFontResource'
    // TODO: Method 'Equals'
};
// --------------------------------------------------------
// Type: IDWriteFontResource
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontResource = *opaque{
    // TODO: Method 'GetFontFile'
    // TODO: Method 'GetFontFaceIndex'
    // TODO: Method 'GetFontAxisCount'
    // TODO: Method 'GetDefaultFontAxisValues'
    // TODO: Method 'GetFontAxisRanges'
    // TODO: Method 'GetFontAxisAttributes'
    // TODO: Method 'GetAxisNames'
    // TODO: Method 'GetAxisValueNameCount'
    // TODO: Method 'GetAxisValueNames'
    // TODO: Method 'HasVariations'
    // TODO: Method 'CreateFontFace'
    // TODO: Method 'CreateFontFaceReference'
};
// --------------------------------------------------------
// Type: IDWriteFontFaceReference1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontFaceReference1 = *opaque{
    // TODO: Method 'CreateFontFace'
    // TODO: Method 'GetFontAxisValueCount'
    // TODO: Method 'GetFontAxisValues'
};
// --------------------------------------------------------
// Type: IDWriteFontSetBuilder2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontSetBuilder2 = *opaque{
    // TODO: Method 'AddFont'
    // TODO: Method 'AddFontFile'
};
// --------------------------------------------------------
// Type: IDWriteFontSet1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontSet1 = *opaque{
    // TODO: Method 'GetMatchingFonts'
    // TODO: Method 'GetFirstFontResources'
    // TODO: Method 'GetFilteredFonts'
    // TODO: Method 'GetFilteredFonts'
    // TODO: Method 'GetFilteredFonts'
    // TODO: Method 'GetFilteredFontIndices'
    // TODO: Method 'GetFilteredFontIndices'
    // TODO: Method 'GetFontAxisRanges'
    // TODO: Method 'GetFontAxisRanges'
    // TODO: Method 'GetFontFaceReference'
    // TODO: Method 'CreateFontResource'
    // TODO: Method 'CreateFontFace'
    // TODO: Method 'GetFontLocality'
};
// --------------------------------------------------------
// Type: IDWriteFontList2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontList2 = *opaque{
    // TODO: Method 'GetFontSet'
};
// --------------------------------------------------------
// Type: IDWriteFontFamily2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontFamily2 = *opaque{
    // TODO: Method 'GetMatchingFonts'
    // TODO: Method 'GetFontSet'
};
// --------------------------------------------------------
// Type: IDWriteFontCollection2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontCollection2 = *opaque{
    // TODO: Method 'GetFontFamily'
    // TODO: Method 'GetMatchingFonts'
    // TODO: Method 'GetFontFamilyModel'
    // TODO: Method 'GetFontSet'
};
// --------------------------------------------------------
// Type: IDWriteTextLayout4
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteTextLayout4 = *opaque{
    // TODO: Method 'SetFontAxisValues'
    // TODO: Method 'GetFontAxisValueCount'
    // TODO: Method 'GetFontAxisValues'
    // TODO: Method 'GetAutomaticFontAxes'
    // TODO: Method 'SetAutomaticFontAxes'
};
// --------------------------------------------------------
// Type: IDWriteTextFormat3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteTextFormat3 = *opaque{
    // TODO: Method 'SetFontAxisValues'
    // TODO: Method 'GetFontAxisValueCount'
    // TODO: Method 'GetFontAxisValues'
    // TODO: Method 'GetAutomaticFontAxes'
    // TODO: Method 'SetAutomaticFontAxes'
};
// --------------------------------------------------------
// Type: IDWriteFontFallback1
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontFallback1 = *opaque{
    // TODO: Method 'MapCharacters'
};
// --------------------------------------------------------
// Type: IDWriteFontSet2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontSet2 = *opaque{
    // TODO: Method 'GetExpirationEvent'
};
// --------------------------------------------------------
// Type: IDWriteFontCollection3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontCollection3 = *opaque{
    // TODO: Method 'GetExpirationEvent'
};
// --------------------------------------------------------
// Type: IDWriteFactory7
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFactory7 = *opaque{
    // TODO: Method 'GetSystemFontSet'
    // TODO: Method 'GetSystemFontCollection'
};
// --------------------------------------------------------
// Type: DWRITE_FONT_SOURCE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_FONT_SOURCE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IDWriteFontSet3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDWriteFontSet3 = *opaque{
    // TODO: Method 'GetFontSourceType'
    // TODO: Method 'GetFontSourceNameLength'
    // TODO: Method 'GetFontSourceName'
};
// --------------------------------------------------------
// Type: DWRITE_MEASURING_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_MEASURING_MODE = *opaque{
};
// --------------------------------------------------------
// Type: DWRITE_GLYPH_IMAGE_FORMATS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DWRITE_GLYPH_IMAGE_FORMATS = *opaque{
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "DWrite" fn DWriteCreateFactory(
    factoryType: DWRITE_FACTORY_TYPE,
    iid: ?*Guid,
    factory: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("systemservices.zig").BOOL;
const DXGI_RGBA = @import("dxgi.zig").DXGI_RGBA;
const D2D_SIZE_U = @import("direct2d.zig").D2D_SIZE_U;
const POINT = @import("displaydevices.zig").POINT;
const IUnknown = @import("com.zig").IUnknown;
const HRESULT = @import("com.zig").HRESULT;

test "" {
    const constant_export_count = 0;
    const type_export_count = 192;
    const func_count = 1;
    const unicode_alias_count = 0;
    const type_import_count = 7;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
