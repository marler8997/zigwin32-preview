//! NOTE: this source file is autogenerated, DO NOT MODIFY

//
// constants
//

//
// types
//
// --------------------------------------------------------
// Type: FWP_DIRECTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWP_DIRECTION = *opaque{
};
// --------------------------------------------------------
// Type: FWP_IP_VERSION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWP_IP_VERSION = *opaque{
};
// --------------------------------------------------------
// Type: FWP_AF
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWP_AF = *opaque{
};
// --------------------------------------------------------
// Type: FWP_ETHER_ENCAP_METHOD
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWP_ETHER_ENCAP_METHOD = *opaque{
};
// --------------------------------------------------------
// Type: FWP_DATA_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWP_DATA_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: FWP_BITMAP_ARRAY64_
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWP_BITMAP_ARRAY64_ = extern struct {
    bitmapArray64: ?[*]u8,
};
// --------------------------------------------------------
// Type: FWP_BYTE_ARRAY6
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWP_BYTE_ARRAY6 = extern struct {
    byteArray6: ?[*]u8,
};
// --------------------------------------------------------
// Type: FWP_BYTE_ARRAY16
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWP_BYTE_ARRAY16 = extern struct {
    byteArray16: ?[*]u8,
};
// --------------------------------------------------------
// Type: FWP_BYTE_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWP_BYTE_BLOB = extern struct {
    size: u32,
    data: ?*u8,
};
// --------------------------------------------------------
// Type: FWP_TOKEN_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWP_TOKEN_INFORMATION = extern struct {
    sidCount: u32,
    sids: ?*SID_AND_ATTRIBUTES,
    restrictedSidCount: u32,
    restrictedSids: ?*SID_AND_ATTRIBUTES,
};
// --------------------------------------------------------
// Type: FWP_VALUE0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWP_VALUE0 = extern struct {
    type: FWP_DATA_TYPE,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: FWP_MATCH_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWP_MATCH_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: FWP_V4_ADDR_AND_MASK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWP_V4_ADDR_AND_MASK = extern struct {
    addr: u32,
    mask: u32,
};
// --------------------------------------------------------
// Type: FWP_V6_ADDR_AND_MASK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWP_V6_ADDR_AND_MASK = extern struct {
    addr: ?[*]u8,
    prefixLength: u8,
};
// --------------------------------------------------------
// Type: FWP_RANGE0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWP_RANGE0 = extern struct {
    valueLow: FWP_VALUE0,
    valueHigh: FWP_VALUE0,
};
// --------------------------------------------------------
// Type: FWP_CONDITION_VALUE0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWP_CONDITION_VALUE0 = extern struct {
    type: FWP_DATA_TYPE,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: FWP_CLASSIFY_OPTION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWP_CLASSIFY_OPTION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: FWP_VSWITCH_NETWORK_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWP_VSWITCH_NETWORK_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: FWP_FILTER_ENUM_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWP_FILTER_ENUM_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: FWPM_DISPLAY_DATA0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_DISPLAY_DATA0 = extern struct {
    name: ?*u16,
    description: ?*u16,
};
// --------------------------------------------------------
// Type: IPSEC_VIRTUAL_IF_TUNNEL_INFO0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_VIRTUAL_IF_TUNNEL_INFO0 = extern struct {
    virtualIfTunnelId: u64,
    trafficSelectorId: u64,
};
// --------------------------------------------------------
// Type: IKEEXT_KEY_MODULE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IKEEXT_KEY_MODULE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IKEEXT_AUTHENTICATION_METHOD_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IKEEXT_AUTHENTICATION_METHOD_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IKEEXT_PRESHARED_KEY_AUTHENTICATION0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_PRESHARED_KEY_AUTHENTICATION0 = extern struct {
    presharedKey: FWP_BYTE_BLOB,
};
// --------------------------------------------------------
// Type: IKEEXT_PRESHARED_KEY_AUTHENTICATION1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_PRESHARED_KEY_AUTHENTICATION1 = extern struct {
    presharedKey: FWP_BYTE_BLOB,
    flags: u32,
};
// --------------------------------------------------------
// Type: IKEEXT_CERT_ROOT_CONFIG0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_CERT_ROOT_CONFIG0 = extern struct {
    certData: FWP_BYTE_BLOB,
    flags: u32,
};
// --------------------------------------------------------
// Type: IKEEXT_CERT_CONFIG_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IKEEXT_CERT_CONFIG_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IKEEXT_CERTIFICATE_AUTHENTICATION0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_CERTIFICATE_AUTHENTICATION0 = extern struct {
    inboundConfigType: IKEEXT_CERT_CONFIG_TYPE,
    Anonymous1: _Anonymous1_e__Union,
    outboundConfigType: IKEEXT_CERT_CONFIG_TYPE,
    Anonymous2: _Anonymous2_e__Union,
    flags: u32,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            outboundRootArraySize: u32,
            outboundRootArray: ?*IKEEXT_CERT_ROOT_CONFIG0,
        };
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            inboundRootArraySize: u32,
            inboundRootArray: ?*IKEEXT_CERT_ROOT_CONFIG0,
        };
    };
};
// --------------------------------------------------------
// Type: IKEEXT_CERTIFICATE_AUTHENTICATION1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_CERTIFICATE_AUTHENTICATION1 = extern struct {
    inboundConfigType: IKEEXT_CERT_CONFIG_TYPE,
    Anonymous1: _Anonymous1_e__Union,
    outboundConfigType: IKEEXT_CERT_CONFIG_TYPE,
    Anonymous2: _Anonymous2_e__Union,
    flags: u32,
    localCertLocationUrl: FWP_BYTE_BLOB,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            outboundRootArraySize: u32,
            outboundRootArray: ?*IKEEXT_CERT_ROOT_CONFIG0,
        };
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            inboundRootArraySize: u32,
            inboundRootArray: ?*IKEEXT_CERT_ROOT_CONFIG0,
        };
    };
};
// --------------------------------------------------------
// Type: IKEEXT_CERT_CRITERIA_NAME_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IKEEXT_CERT_CRITERIA_NAME_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IKEEXT_CERT_EKUS0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_CERT_EKUS0 = extern struct {
    numEku: u32,
    eku: ?*?*i8,
};
// --------------------------------------------------------
// Type: IKEEXT_CERT_NAME0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_CERT_NAME0 = extern struct {
    nameType: IKEEXT_CERT_CRITERIA_NAME_TYPE,
    certName: ?*u16,
};
// --------------------------------------------------------
// Type: IKEEXT_CERTIFICATE_CRITERIA0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_CERTIFICATE_CRITERIA0 = extern struct {
    certData: FWP_BYTE_BLOB,
    certHash: FWP_BYTE_BLOB,
    eku: ?*IKEEXT_CERT_EKUS0,
    name: ?*IKEEXT_CERT_NAME0,
    flags: u32,
};
// --------------------------------------------------------
// Type: IKEEXT_CERTIFICATE_AUTHENTICATION2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_CERTIFICATE_AUTHENTICATION2 = extern struct {
    inboundConfigType: IKEEXT_CERT_CONFIG_TYPE,
    Anonymous1: _Anonymous1_e__Union,
    outboundConfigType: IKEEXT_CERT_CONFIG_TYPE,
    Anonymous2: _Anonymous2_e__Union,
    flags: u32,
    localCertLocationUrl: FWP_BYTE_BLOB,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous2_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous2_e__Struct = extern struct {
            outboundEnterpriseStoreArraySize: u32,
            outboundEnterpriseStoreCriteria: ?*IKEEXT_CERTIFICATE_CRITERIA0,
        };
        // --------------------------------------------------------
        // Type: _Anonymous3_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous3_e__Struct = extern struct {
            outboundRootStoreArraySize: u32,
            outboundTrustedRootStoreCriteria: ?*IKEEXT_CERTIFICATE_CRITERIA0,
        };
        // --------------------------------------------------------
        // Type: _Anonymous1_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous1_e__Struct = extern struct {
            outboundRootArraySize: u32,
            outboundRootCriteria: ?*IKEEXT_CERTIFICATE_CRITERIA0,
        };
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous3_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous3_e__Struct = extern struct {
            inboundRootStoreArraySize: u32,
            inboundTrustedRootStoreCriteria: ?*IKEEXT_CERTIFICATE_CRITERIA0,
        };
        // --------------------------------------------------------
        // Type: _Anonymous1_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous1_e__Struct = extern struct {
            inboundRootArraySize: u32,
            inboundRootCriteria: ?*IKEEXT_CERTIFICATE_CRITERIA0,
        };
        // --------------------------------------------------------
        // Type: _Anonymous2_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous2_e__Struct = extern struct {
            inboundEnterpriseStoreArraySize: u32,
            inboundEnterpriseStoreCriteria: ?*IKEEXT_CERTIFICATE_CRITERIA0,
        };
    };
};
// --------------------------------------------------------
// Type: IKEEXT_IPV6_CGA_AUTHENTICATION0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_IPV6_CGA_AUTHENTICATION0 = extern struct {
    keyContainerName: ?*u16,
    cspName: ?*u16,
    cspType: u32,
    cgaModifier: FWP_BYTE_ARRAY16,
    cgaCollisionCount: u8,
};
// --------------------------------------------------------
// Type: IKEEXT_KERBEROS_AUTHENTICATION0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_KERBEROS_AUTHENTICATION0 = extern struct {
    flags: u32,
};
// --------------------------------------------------------
// Type: IKEEXT_KERBEROS_AUTHENTICATION1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_KERBEROS_AUTHENTICATION1 = extern struct {
    flags: u32,
    proxyServer: ?*u16,
};
// --------------------------------------------------------
// Type: IKEEXT_RESERVED_AUTHENTICATION0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_RESERVED_AUTHENTICATION0 = extern struct {
    flags: u32,
};
// --------------------------------------------------------
// Type: IKEEXT_NTLM_V2_AUTHENTICATION0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_NTLM_V2_AUTHENTICATION0 = extern struct {
    flags: u32,
};
// --------------------------------------------------------
// Type: IKEEXT_EAP_AUTHENTICATION0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_EAP_AUTHENTICATION0 = extern struct {
    flags: u32,
};
// --------------------------------------------------------
// Type: IKEEXT_AUTHENTICATION_METHOD0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_AUTHENTICATION_METHOD0 = extern struct {
    authenticationMethodType: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IKEEXT_AUTHENTICATION_METHOD1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_AUTHENTICATION_METHOD1 = extern struct {
    authenticationMethodType: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IKEEXT_AUTHENTICATION_METHOD2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_AUTHENTICATION_METHOD2 = extern struct {
    authenticationMethodType: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IKEEXT_CIPHER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IKEEXT_CIPHER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IKEEXT_CIPHER_ALGORITHM0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_CIPHER_ALGORITHM0 = extern struct {
    algoIdentifier: IKEEXT_CIPHER_TYPE,
    keyLen: u32,
    rounds: u32,
};
// --------------------------------------------------------
// Type: IKEEXT_INTEGRITY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IKEEXT_INTEGRITY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IKEEXT_INTEGRITY_ALGORITHM0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_INTEGRITY_ALGORITHM0 = extern struct {
    algoIdentifier: IKEEXT_INTEGRITY_TYPE,
};
// --------------------------------------------------------
// Type: IKEEXT_DH_GROUP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IKEEXT_DH_GROUP = *opaque{
};
// --------------------------------------------------------
// Type: IKEEXT_PROPOSAL0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_PROPOSAL0 = extern struct {
    cipherAlgorithm: IKEEXT_CIPHER_ALGORITHM0,
    integrityAlgorithm: IKEEXT_INTEGRITY_ALGORITHM0,
    maxLifetimeSeconds: u32,
    dhGroup: IKEEXT_DH_GROUP,
    quickModeLimit: u32,
};
// --------------------------------------------------------
// Type: IKEEXT_POLICY0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_POLICY0 = extern struct {
    softExpirationTime: u32,
    numAuthenticationMethods: u32,
    authenticationMethods: ?*IKEEXT_AUTHENTICATION_METHOD0,
    initiatorImpersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE,
    numIkeProposals: u32,
    ikeProposals: ?*IKEEXT_PROPOSAL0,
    flags: u32,
    maxDynamicFilters: u32,
};
// --------------------------------------------------------
// Type: IKEEXT_POLICY1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_POLICY1 = extern struct {
    softExpirationTime: u32,
    numAuthenticationMethods: u32,
    authenticationMethods: ?*IKEEXT_AUTHENTICATION_METHOD1,
    initiatorImpersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE,
    numIkeProposals: u32,
    ikeProposals: ?*IKEEXT_PROPOSAL0,
    flags: u32,
    maxDynamicFilters: u32,
    retransmitDurationSecs: u32,
};
// --------------------------------------------------------
// Type: IKEEXT_POLICY2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_POLICY2 = extern struct {
    softExpirationTime: u32,
    numAuthenticationMethods: u32,
    authenticationMethods: ?*IKEEXT_AUTHENTICATION_METHOD2,
    initiatorImpersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE,
    numIkeProposals: u32,
    ikeProposals: ?*IKEEXT_PROPOSAL0,
    flags: u32,
    maxDynamicFilters: u32,
    retransmitDurationSecs: u32,
};
// --------------------------------------------------------
// Type: IKEEXT_EM_POLICY0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_EM_POLICY0 = extern struct {
    numAuthenticationMethods: u32,
    authenticationMethods: ?*IKEEXT_AUTHENTICATION_METHOD0,
    initiatorImpersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE,
};
// --------------------------------------------------------
// Type: IKEEXT_EM_POLICY1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_EM_POLICY1 = extern struct {
    numAuthenticationMethods: u32,
    authenticationMethods: ?*IKEEXT_AUTHENTICATION_METHOD1,
    initiatorImpersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE,
};
// --------------------------------------------------------
// Type: IKEEXT_EM_POLICY2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_EM_POLICY2 = extern struct {
    numAuthenticationMethods: u32,
    authenticationMethods: ?*IKEEXT_AUTHENTICATION_METHOD2,
    initiatorImpersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE,
};
// --------------------------------------------------------
// Type: IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0 = extern struct {
    currentActiveMainModes: u32,
    totalMainModesStarted: u32,
    totalSuccessfulMainModes: u32,
    totalFailedMainModes: u32,
    totalResponderMainModes: u32,
    currentNewResponderMainModes: u32,
    currentActiveQuickModes: u32,
    totalQuickModesStarted: u32,
    totalSuccessfulQuickModes: u32,
    totalFailedQuickModes: u32,
    totalAcquires: u32,
    totalReinitAcquires: u32,
    currentActiveExtendedModes: u32,
    totalExtendedModesStarted: u32,
    totalSuccessfulExtendedModes: u32,
    totalFailedExtendedModes: u32,
    totalImpersonationExtendedModes: u32,
    totalImpersonationMainModes: u32,
};
// --------------------------------------------------------
// Type: IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1 = extern struct {
    currentActiveMainModes: u32,
    totalMainModesStarted: u32,
    totalSuccessfulMainModes: u32,
    totalFailedMainModes: u32,
    totalResponderMainModes: u32,
    currentNewResponderMainModes: u32,
    currentActiveQuickModes: u32,
    totalQuickModesStarted: u32,
    totalSuccessfulQuickModes: u32,
    totalFailedQuickModes: u32,
    totalAcquires: u32,
    totalReinitAcquires: u32,
    currentActiveExtendedModes: u32,
    totalExtendedModesStarted: u32,
    totalSuccessfulExtendedModes: u32,
    totalFailedExtendedModes: u32,
    totalImpersonationExtendedModes: u32,
    totalImpersonationMainModes: u32,
};
// --------------------------------------------------------
// Type: IKEEXT_KEYMODULE_STATISTICS0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_KEYMODULE_STATISTICS0 = extern struct {
    v4Statistics: IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0,
    v6Statistics: IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0,
    errorFrequencyTable: ?[*]u32,
    mainModeNegotiationTime: u32,
    quickModeNegotiationTime: u32,
    extendedModeNegotiationTime: u32,
};
// --------------------------------------------------------
// Type: IKEEXT_KEYMODULE_STATISTICS1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_KEYMODULE_STATISTICS1 = extern struct {
    v4Statistics: IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1,
    v6Statistics: IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1,
    errorFrequencyTable: ?[*]u32,
    mainModeNegotiationTime: u32,
    quickModeNegotiationTime: u32,
    extendedModeNegotiationTime: u32,
};
// --------------------------------------------------------
// Type: IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0 = extern struct {
    totalSocketReceiveFailures: u32,
    totalSocketSendFailures: u32,
};
// --------------------------------------------------------
// Type: IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1 = extern struct {
    totalSocketReceiveFailures: u32,
    totalSocketSendFailures: u32,
};
// --------------------------------------------------------
// Type: IKEEXT_COMMON_STATISTICS0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_COMMON_STATISTICS0 = extern struct {
    v4Statistics: IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0,
    v6Statistics: IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0,
    totalPacketsReceived: u32,
    totalInvalidPacketsReceived: u32,
    currentQueuedWorkitems: u32,
};
// --------------------------------------------------------
// Type: IKEEXT_COMMON_STATISTICS1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_COMMON_STATISTICS1 = extern struct {
    v4Statistics: IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1,
    v6Statistics: IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1,
    totalPacketsReceived: u32,
    totalInvalidPacketsReceived: u32,
    currentQueuedWorkitems: u32,
};
// --------------------------------------------------------
// Type: IKEEXT_STATISTICS0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_STATISTICS0 = extern struct {
    ikeStatistics: IKEEXT_KEYMODULE_STATISTICS0,
    authipStatistics: IKEEXT_KEYMODULE_STATISTICS0,
    commonStatistics: IKEEXT_COMMON_STATISTICS0,
};
// --------------------------------------------------------
// Type: IKEEXT_STATISTICS1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_STATISTICS1 = extern struct {
    ikeStatistics: IKEEXT_KEYMODULE_STATISTICS1,
    authipStatistics: IKEEXT_KEYMODULE_STATISTICS1,
    ikeV2Statistics: IKEEXT_KEYMODULE_STATISTICS1,
    commonStatistics: IKEEXT_COMMON_STATISTICS1,
};
// --------------------------------------------------------
// Type: IKEEXT_TRAFFIC0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_TRAFFIC0 = extern struct {
    ipVersion: FWP_IP_VERSION,
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    authIpFilterId: u64,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IKEEXT_COOKIE_PAIR0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_COOKIE_PAIR0 = extern struct {
    initiator: u64,
    responder: u64,
};
// --------------------------------------------------------
// Type: IKEEXT_CERTIFICATE_CREDENTIAL0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_CERTIFICATE_CREDENTIAL0 = extern struct {
    subjectName: FWP_BYTE_BLOB,
    certHash: FWP_BYTE_BLOB,
    flags: u32,
};
// --------------------------------------------------------
// Type: IKEEXT_NAME_CREDENTIAL0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_NAME_CREDENTIAL0 = extern struct {
    principalName: ?*u16,
};
// --------------------------------------------------------
// Type: IKEEXT_CREDENTIAL0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_CREDENTIAL0 = extern struct {
    authenticationMethodType: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    impersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IKEEXT_CREDENTIAL_PAIR0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_CREDENTIAL_PAIR0 = extern struct {
    localCredentials: IKEEXT_CREDENTIAL0,
    peerCredentials: IKEEXT_CREDENTIAL0,
};
// --------------------------------------------------------
// Type: IKEEXT_CREDENTIALS0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_CREDENTIALS0 = extern struct {
    numCredentials: u32,
    credentials: ?*IKEEXT_CREDENTIAL_PAIR0,
};
// --------------------------------------------------------
// Type: IKEEXT_SA_DETAILS0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_SA_DETAILS0 = extern struct {
    saId: u64,
    keyModuleType: IKEEXT_KEY_MODULE_TYPE,
    ipVersion: FWP_IP_VERSION,
    Anonymous: _Anonymous_e__Union,
    ikeTraffic: IKEEXT_TRAFFIC0,
    ikeProposal: IKEEXT_PROPOSAL0,
    cookiePair: IKEEXT_COOKIE_PAIR0,
    ikeCredentials: IKEEXT_CREDENTIALS0,
    ikePolicyKey: Guid,
    virtualIfTunnelId: u64,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IKEEXT_CERTIFICATE_CREDENTIAL1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_CERTIFICATE_CREDENTIAL1 = extern struct {
    subjectName: FWP_BYTE_BLOB,
    certHash: FWP_BYTE_BLOB,
    flags: u32,
    certificate: FWP_BYTE_BLOB,
};
// --------------------------------------------------------
// Type: IKEEXT_CREDENTIAL1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_CREDENTIAL1 = extern struct {
    authenticationMethodType: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    impersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IKEEXT_CREDENTIAL_PAIR1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_CREDENTIAL_PAIR1 = extern struct {
    localCredentials: IKEEXT_CREDENTIAL1,
    peerCredentials: IKEEXT_CREDENTIAL1,
};
// --------------------------------------------------------
// Type: IKEEXT_CREDENTIALS1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_CREDENTIALS1 = extern struct {
    numCredentials: u32,
    credentials: ?*IKEEXT_CREDENTIAL_PAIR1,
};
// --------------------------------------------------------
// Type: IKEEXT_SA_DETAILS1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_SA_DETAILS1 = extern struct {
    saId: u64,
    keyModuleType: IKEEXT_KEY_MODULE_TYPE,
    ipVersion: FWP_IP_VERSION,
    Anonymous: _Anonymous_e__Union,
    ikeTraffic: IKEEXT_TRAFFIC0,
    ikeProposal: IKEEXT_PROPOSAL0,
    cookiePair: IKEEXT_COOKIE_PAIR0,
    ikeCredentials: IKEEXT_CREDENTIALS1,
    ikePolicyKey: Guid,
    virtualIfTunnelId: u64,
    correlationKey: FWP_BYTE_BLOB,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IKEEXT_CREDENTIAL2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_CREDENTIAL2 = extern struct {
    authenticationMethodType: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    impersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IKEEXT_CREDENTIAL_PAIR2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_CREDENTIAL_PAIR2 = extern struct {
    localCredentials: IKEEXT_CREDENTIAL2,
    peerCredentials: IKEEXT_CREDENTIAL2,
};
// --------------------------------------------------------
// Type: IKEEXT_CREDENTIALS2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_CREDENTIALS2 = extern struct {
    numCredentials: u32,
    credentials: ?*IKEEXT_CREDENTIAL_PAIR2,
};
// --------------------------------------------------------
// Type: IKEEXT_SA_DETAILS2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_SA_DETAILS2 = extern struct {
    saId: u64,
    keyModuleType: IKEEXT_KEY_MODULE_TYPE,
    ipVersion: FWP_IP_VERSION,
    Anonymous: _Anonymous_e__Union,
    ikeTraffic: IKEEXT_TRAFFIC0,
    ikeProposal: IKEEXT_PROPOSAL0,
    cookiePair: IKEEXT_COOKIE_PAIR0,
    ikeCredentials: IKEEXT_CREDENTIALS2,
    ikePolicyKey: Guid,
    virtualIfTunnelId: u64,
    correlationKey: FWP_BYTE_BLOB,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IKEEXT_SA_ENUM_TEMPLATE0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IKEEXT_SA_ENUM_TEMPLATE0 = extern struct {
    localSubNet: FWP_CONDITION_VALUE0,
    remoteSubNet: FWP_CONDITION_VALUE0,
    localMainModeCertHash: FWP_BYTE_BLOB,
};
// --------------------------------------------------------
// Type: IKEEXT_MM_SA_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IKEEXT_MM_SA_STATE = *opaque{
};
// --------------------------------------------------------
// Type: IKEEXT_QM_SA_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IKEEXT_QM_SA_STATE = *opaque{
};
// --------------------------------------------------------
// Type: IKEEXT_EM_SA_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IKEEXT_EM_SA_STATE = *opaque{
};
// --------------------------------------------------------
// Type: IKEEXT_SA_ROLE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IKEEXT_SA_ROLE = *opaque{
};
// --------------------------------------------------------
// Type: IPSEC_SA_LIFETIME0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_SA_LIFETIME0 = extern struct {
    lifetimeSeconds: u32,
    lifetimeKilobytes: u32,
    lifetimePackets: u32,
};
// --------------------------------------------------------
// Type: IPSEC_TRANSFORM_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IPSEC_TRANSFORM_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IPSEC_AUTH_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IPSEC_AUTH_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IPSEC_AUTH_TRANSFORM_ID0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_AUTH_TRANSFORM_ID0 = extern struct {
    authType: IPSEC_AUTH_TYPE,
    authConfig: u8,
};
// --------------------------------------------------------
// Type: IPSEC_AUTH_TRANSFORM0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_AUTH_TRANSFORM0 = extern struct {
    authTransformId: IPSEC_AUTH_TRANSFORM_ID0,
    cryptoModuleId: ?*Guid,
};
// --------------------------------------------------------
// Type: IPSEC_CIPHER_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IPSEC_CIPHER_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IPSEC_CIPHER_TRANSFORM_ID0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_CIPHER_TRANSFORM_ID0 = extern struct {
    cipherType: IPSEC_CIPHER_TYPE,
    cipherConfig: u8,
};
// --------------------------------------------------------
// Type: IPSEC_CIPHER_TRANSFORM0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_CIPHER_TRANSFORM0 = extern struct {
    cipherTransformId: IPSEC_CIPHER_TRANSFORM_ID0,
    cryptoModuleId: ?*Guid,
};
// --------------------------------------------------------
// Type: IPSEC_AUTH_AND_CIPHER_TRANSFORM0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_AUTH_AND_CIPHER_TRANSFORM0 = extern struct {
    authTransform: IPSEC_AUTH_TRANSFORM0,
    cipherTransform: IPSEC_CIPHER_TRANSFORM0,
};
// --------------------------------------------------------
// Type: IPSEC_SA_TRANSFORM0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_SA_TRANSFORM0 = extern struct {
    ipsecTransformType: IPSEC_TRANSFORM_TYPE,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IPSEC_PFS_GROUP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IPSEC_PFS_GROUP = *opaque{
};
// --------------------------------------------------------
// Type: IPSEC_PROPOSAL0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_PROPOSAL0 = extern struct {
    lifetime: IPSEC_SA_LIFETIME0,
    numSaTransforms: u32,
    saTransforms: ?*IPSEC_SA_TRANSFORM0,
    pfsGroup: IPSEC_PFS_GROUP,
};
// --------------------------------------------------------
// Type: IPSEC_SA_IDLE_TIMEOUT0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_SA_IDLE_TIMEOUT0 = extern struct {
    idleTimeoutSeconds: u32,
    idleTimeoutSecondsFailOver: u32,
};
// --------------------------------------------------------
// Type: IPSEC_TRAFFIC_SELECTOR0_
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_TRAFFIC_SELECTOR0_ = extern struct {
    protocolId: u8,
    portStart: u16,
    portEnd: u16,
    ipVersion: FWP_IP_VERSION,
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IPSEC_TRAFFIC_SELECTOR_POLICY0_
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_TRAFFIC_SELECTOR_POLICY0_ = extern struct {
    flags: u32,
    numLocalTrafficSelectors: u32,
    localTrafficSelectors: ?*IPSEC_TRAFFIC_SELECTOR0_,
    numRemoteTrafficSelectors: u32,
    remoteTrafficSelectors: ?*IPSEC_TRAFFIC_SELECTOR0_,
};
// --------------------------------------------------------
// Type: IPSEC_TRANSPORT_POLICY0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_TRANSPORT_POLICY0 = extern struct {
    numIpsecProposals: u32,
    ipsecProposals: ?*IPSEC_PROPOSAL0,
    flags: u32,
    ndAllowClearTimeoutSeconds: u32,
    saIdleTimeout: IPSEC_SA_IDLE_TIMEOUT0,
    emPolicy: ?*IKEEXT_EM_POLICY0,
};
// --------------------------------------------------------
// Type: IPSEC_TRANSPORT_POLICY1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_TRANSPORT_POLICY1 = extern struct {
    numIpsecProposals: u32,
    ipsecProposals: ?*IPSEC_PROPOSAL0,
    flags: u32,
    ndAllowClearTimeoutSeconds: u32,
    saIdleTimeout: IPSEC_SA_IDLE_TIMEOUT0,
    emPolicy: ?*IKEEXT_EM_POLICY1,
};
// --------------------------------------------------------
// Type: IPSEC_TRANSPORT_POLICY2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_TRANSPORT_POLICY2 = extern struct {
    numIpsecProposals: u32,
    ipsecProposals: ?*IPSEC_PROPOSAL0,
    flags: u32,
    ndAllowClearTimeoutSeconds: u32,
    saIdleTimeout: IPSEC_SA_IDLE_TIMEOUT0,
    emPolicy: ?*IKEEXT_EM_POLICY2,
};
// --------------------------------------------------------
// Type: IPSEC_TUNNEL_ENDPOINTS0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_TUNNEL_ENDPOINTS0 = extern struct {
    ipVersion: FWP_IP_VERSION,
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IPSEC_TUNNEL_ENDPOINT0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_TUNNEL_ENDPOINT0 = extern struct {
    ipVersion: FWP_IP_VERSION,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IPSEC_TUNNEL_ENDPOINTS2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_TUNNEL_ENDPOINTS2 = extern struct {
    ipVersion: FWP_IP_VERSION,
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    localIfLuid: u64,
    remoteFqdn: ?*u16,
    numAddresses: u32,
    remoteAddresses: ?*IPSEC_TUNNEL_ENDPOINT0,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IPSEC_TUNNEL_ENDPOINTS1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_TUNNEL_ENDPOINTS1 = extern struct {
    ipVersion: FWP_IP_VERSION,
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    localIfLuid: u64,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IPSEC_TUNNEL_POLICY0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_TUNNEL_POLICY0 = extern struct {
    flags: u32,
    numIpsecProposals: u32,
    ipsecProposals: ?*IPSEC_PROPOSAL0,
    tunnelEndpoints: IPSEC_TUNNEL_ENDPOINTS0,
    saIdleTimeout: IPSEC_SA_IDLE_TIMEOUT0,
    emPolicy: ?*IKEEXT_EM_POLICY0,
};
// --------------------------------------------------------
// Type: IPSEC_TUNNEL_POLICY1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_TUNNEL_POLICY1 = extern struct {
    flags: u32,
    numIpsecProposals: u32,
    ipsecProposals: ?*IPSEC_PROPOSAL0,
    tunnelEndpoints: IPSEC_TUNNEL_ENDPOINTS1,
    saIdleTimeout: IPSEC_SA_IDLE_TIMEOUT0,
    emPolicy: ?*IKEEXT_EM_POLICY1,
};
// --------------------------------------------------------
// Type: IPSEC_TUNNEL_POLICY2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_TUNNEL_POLICY2 = extern struct {
    flags: u32,
    numIpsecProposals: u32,
    ipsecProposals: ?*IPSEC_PROPOSAL0,
    tunnelEndpoints: IPSEC_TUNNEL_ENDPOINTS2,
    saIdleTimeout: IPSEC_SA_IDLE_TIMEOUT0,
    emPolicy: ?*IKEEXT_EM_POLICY2,
    fwdPathSaLifetime: u32,
};
// --------------------------------------------------------
// Type: IPSEC_TUNNEL_POLICY3_
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_TUNNEL_POLICY3_ = extern struct {
    flags: u32,
    numIpsecProposals: u32,
    ipsecProposals: ?*IPSEC_PROPOSAL0,
    tunnelEndpoints: IPSEC_TUNNEL_ENDPOINTS2,
    saIdleTimeout: IPSEC_SA_IDLE_TIMEOUT0,
    emPolicy: ?*IKEEXT_EM_POLICY2,
    fwdPathSaLifetime: u32,
    compartmentId: u32,
    numTrafficSelectorPolicy: u32,
    trafficSelectorPolicies: ?*IPSEC_TRAFFIC_SELECTOR_POLICY0_,
};
// --------------------------------------------------------
// Type: IPSEC_KEYING_POLICY0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_KEYING_POLICY0 = extern struct {
    numKeyMods: u32,
    keyModKeys: ?*Guid,
};
// --------------------------------------------------------
// Type: IPSEC_KEYING_POLICY1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_KEYING_POLICY1 = extern struct {
    numKeyMods: u32,
    keyModKeys: ?*Guid,
    flags: u32,
};
// --------------------------------------------------------
// Type: IPSEC_AGGREGATE_SA_STATISTICS0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_AGGREGATE_SA_STATISTICS0 = extern struct {
    activeSas: u32,
    pendingSaNegotiations: u32,
    totalSasAdded: u32,
    totalSasDeleted: u32,
    successfulRekeys: u32,
    activeTunnels: u32,
    offloadedSas: u32,
};
// --------------------------------------------------------
// Type: IPSEC_ESP_DROP_PACKET_STATISTICS0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_ESP_DROP_PACKET_STATISTICS0 = extern struct {
    invalidSpisOnInbound: u32,
    decryptionFailuresOnInbound: u32,
    authenticationFailuresOnInbound: u32,
    replayCheckFailuresOnInbound: u32,
    saNotInitializedOnInbound: u32,
};
// --------------------------------------------------------
// Type: IPSEC_AH_DROP_PACKET_STATISTICS0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_AH_DROP_PACKET_STATISTICS0 = extern struct {
    invalidSpisOnInbound: u32,
    authenticationFailuresOnInbound: u32,
    replayCheckFailuresOnInbound: u32,
    saNotInitializedOnInbound: u32,
};
// --------------------------------------------------------
// Type: IPSEC_AGGREGATE_DROP_PACKET_STATISTICS0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_AGGREGATE_DROP_PACKET_STATISTICS0 = extern struct {
    invalidSpisOnInbound: u32,
    decryptionFailuresOnInbound: u32,
    authenticationFailuresOnInbound: u32,
    udpEspValidationFailuresOnInbound: u32,
    replayCheckFailuresOnInbound: u32,
    invalidClearTextInbound: u32,
    saNotInitializedOnInbound: u32,
    receiveOverIncorrectSaInbound: u32,
    secureReceivesNotMatchingFilters: u32,
};
// --------------------------------------------------------
// Type: IPSEC_AGGREGATE_DROP_PACKET_STATISTICS1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_AGGREGATE_DROP_PACKET_STATISTICS1 = extern struct {
    invalidSpisOnInbound: u32,
    decryptionFailuresOnInbound: u32,
    authenticationFailuresOnInbound: u32,
    udpEspValidationFailuresOnInbound: u32,
    replayCheckFailuresOnInbound: u32,
    invalidClearTextInbound: u32,
    saNotInitializedOnInbound: u32,
    receiveOverIncorrectSaInbound: u32,
    secureReceivesNotMatchingFilters: u32,
    totalDropPacketsInbound: u32,
};
// --------------------------------------------------------
// Type: IPSEC_TRAFFIC_STATISTICS0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_TRAFFIC_STATISTICS0 = extern struct {
    encryptedByteCount: u64,
    authenticatedAHByteCount: u64,
    authenticatedESPByteCount: u64,
    transportByteCount: u64,
    tunnelByteCount: u64,
    offloadByteCount: u64,
};
// --------------------------------------------------------
// Type: IPSEC_TRAFFIC_STATISTICS1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_TRAFFIC_STATISTICS1 = extern struct {
    encryptedByteCount: u64,
    authenticatedAHByteCount: u64,
    authenticatedESPByteCount: u64,
    transportByteCount: u64,
    tunnelByteCount: u64,
    offloadByteCount: u64,
    totalSuccessfulPackets: u64,
};
// --------------------------------------------------------
// Type: IPSEC_STATISTICS0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_STATISTICS0 = extern struct {
    aggregateSaStatistics: IPSEC_AGGREGATE_SA_STATISTICS0,
    espDropPacketStatistics: IPSEC_ESP_DROP_PACKET_STATISTICS0,
    ahDropPacketStatistics: IPSEC_AH_DROP_PACKET_STATISTICS0,
    aggregateDropPacketStatistics: IPSEC_AGGREGATE_DROP_PACKET_STATISTICS0,
    inboundTrafficStatistics: IPSEC_TRAFFIC_STATISTICS0,
    outboundTrafficStatistics: IPSEC_TRAFFIC_STATISTICS0,
};
// --------------------------------------------------------
// Type: IPSEC_STATISTICS1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_STATISTICS1 = extern struct {
    aggregateSaStatistics: IPSEC_AGGREGATE_SA_STATISTICS0,
    espDropPacketStatistics: IPSEC_ESP_DROP_PACKET_STATISTICS0,
    ahDropPacketStatistics: IPSEC_AH_DROP_PACKET_STATISTICS0,
    aggregateDropPacketStatistics: IPSEC_AGGREGATE_DROP_PACKET_STATISTICS1,
    inboundTrafficStatistics: IPSEC_TRAFFIC_STATISTICS1,
    outboundTrafficStatistics: IPSEC_TRAFFIC_STATISTICS1,
};
// --------------------------------------------------------
// Type: IPSEC_SA_AUTH_INFORMATION0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_SA_AUTH_INFORMATION0 = extern struct {
    authTransform: IPSEC_AUTH_TRANSFORM0,
    authKey: FWP_BYTE_BLOB,
};
// --------------------------------------------------------
// Type: IPSEC_SA_CIPHER_INFORMATION0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_SA_CIPHER_INFORMATION0 = extern struct {
    cipherTransform: IPSEC_CIPHER_TRANSFORM0,
    cipherKey: FWP_BYTE_BLOB,
};
// --------------------------------------------------------
// Type: IPSEC_SA_AUTH_AND_CIPHER_INFORMATION0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_SA_AUTH_AND_CIPHER_INFORMATION0 = extern struct {
    saCipherInformation: IPSEC_SA_CIPHER_INFORMATION0,
    saAuthInformation: IPSEC_SA_AUTH_INFORMATION0,
};
// --------------------------------------------------------
// Type: IPSEC_SA0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_SA0 = extern struct {
    spi: u32,
    saTransformType: IPSEC_TRANSFORM_TYPE,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IPSEC_KEYMODULE_STATE0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_KEYMODULE_STATE0 = extern struct {
    keyModuleKey: Guid,
    stateBlob: FWP_BYTE_BLOB,
};
// --------------------------------------------------------
// Type: IPSEC_TOKEN_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IPSEC_TOKEN_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IPSEC_TOKEN_PRINCIPAL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IPSEC_TOKEN_PRINCIPAL = *opaque{
};
// --------------------------------------------------------
// Type: IPSEC_TOKEN_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IPSEC_TOKEN_MODE = *opaque{
};
// --------------------------------------------------------
// Type: IPSEC_TOKEN0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_TOKEN0 = extern struct {
    type: IPSEC_TOKEN_TYPE,
    principal: IPSEC_TOKEN_PRINCIPAL,
    mode: IPSEC_TOKEN_MODE,
    token: u64,
};
// --------------------------------------------------------
// Type: IPSEC_ID0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_ID0 = extern struct {
    mmTargetName: ?*u16,
    emTargetName: ?*u16,
    numTokens: u32,
    tokens: ?*IPSEC_TOKEN0,
    explicitCredentials: u64,
    logonId: u64,
};
// --------------------------------------------------------
// Type: IPSEC_SA_BUNDLE0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_SA_BUNDLE0 = extern struct {
    flags: u32,
    lifetime: IPSEC_SA_LIFETIME0,
    idleTimeoutSeconds: u32,
    ndAllowClearTimeoutSeconds: u32,
    ipsecId: ?*IPSEC_ID0,
    napContext: u32,
    qmSaId: u32,
    numSAs: u32,
    saList: ?*IPSEC_SA0,
    keyModuleState: ?*IPSEC_KEYMODULE_STATE0,
    ipVersion: FWP_IP_VERSION,
    Anonymous: _Anonymous_e__Union,
    mmSaId: u64,
    pfsGroup: IPSEC_PFS_GROUP,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IPSEC_SA_BUNDLE1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_SA_BUNDLE1 = extern struct {
    flags: u32,
    lifetime: IPSEC_SA_LIFETIME0,
    idleTimeoutSeconds: u32,
    ndAllowClearTimeoutSeconds: u32,
    ipsecId: ?*IPSEC_ID0,
    napContext: u32,
    qmSaId: u32,
    numSAs: u32,
    saList: ?*IPSEC_SA0,
    keyModuleState: ?*IPSEC_KEYMODULE_STATE0,
    ipVersion: FWP_IP_VERSION,
    Anonymous: _Anonymous_e__Union,
    mmSaId: u64,
    pfsGroup: IPSEC_PFS_GROUP,
    saLookupContext: Guid,
    qmFilterId: u64,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IPSEC_TRAFFIC_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IPSEC_TRAFFIC_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IPSEC_TRAFFIC0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_TRAFFIC0 = extern struct {
    ipVersion: FWP_IP_VERSION,
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    trafficType: IPSEC_TRAFFIC_TYPE,
    Anonymous3: _Anonymous3_e__Union,
    remotePort: u16,
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IPSEC_TRAFFIC1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_TRAFFIC1 = extern struct {
    ipVersion: FWP_IP_VERSION,
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    trafficType: IPSEC_TRAFFIC_TYPE,
    Anonymous3: _Anonymous3_e__Union,
    remotePort: u16,
    localPort: u16,
    ipProtocol: u8,
    localIfLuid: u64,
    realIfProfileId: u32,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IPSEC_V4_UDP_ENCAPSULATION0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_V4_UDP_ENCAPSULATION0 = extern struct {
    localUdpEncapPort: u16,
    remoteUdpEncapPort: u16,
};
// --------------------------------------------------------
// Type: IPSEC_GETSPI0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_GETSPI0 = extern struct {
    inboundIpsecTraffic: IPSEC_TRAFFIC0,
    ipVersion: FWP_IP_VERSION,
    Anonymous: _Anonymous_e__Union,
    rngCryptoModuleID: ?*Guid,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IPSEC_GETSPI1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_GETSPI1 = extern struct {
    inboundIpsecTraffic: IPSEC_TRAFFIC1,
    ipVersion: FWP_IP_VERSION,
    Anonymous: _Anonymous_e__Union,
    rngCryptoModuleID: ?*Guid,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IPSEC_SA_DETAILS0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_SA_DETAILS0 = extern struct {
    ipVersion: FWP_IP_VERSION,
    saDirection: FWP_DIRECTION,
    traffic: IPSEC_TRAFFIC0,
    saBundle: IPSEC_SA_BUNDLE0,
    Anonymous: _Anonymous_e__Union,
    transportFilter: ?*FWPM_FILTER0,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IPSEC_SA_DETAILS1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_SA_DETAILS1 = extern struct {
    ipVersion: FWP_IP_VERSION,
    saDirection: FWP_DIRECTION,
    traffic: IPSEC_TRAFFIC1,
    saBundle: IPSEC_SA_BUNDLE1,
    Anonymous: _Anonymous_e__Union,
    transportFilter: ?*FWPM_FILTER0,
    virtualIfTunnelInfo: IPSEC_VIRTUAL_IF_TUNNEL_INFO0,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IPSEC_SA_CONTEXT0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_SA_CONTEXT0 = extern struct {
    saContextId: u64,
    inboundSa: ?*IPSEC_SA_DETAILS0,
    outboundSa: ?*IPSEC_SA_DETAILS0,
};
// --------------------------------------------------------
// Type: IPSEC_SA_CONTEXT1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_SA_CONTEXT1 = extern struct {
    saContextId: u64,
    inboundSa: ?*IPSEC_SA_DETAILS1,
    outboundSa: ?*IPSEC_SA_DETAILS1,
};
// --------------------------------------------------------
// Type: IPSEC_SA_CONTEXT_ENUM_TEMPLATE0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_SA_CONTEXT_ENUM_TEMPLATE0 = extern struct {
    localSubNet: FWP_CONDITION_VALUE0,
    remoteSubNet: FWP_CONDITION_VALUE0,
};
// --------------------------------------------------------
// Type: IPSEC_SA_ENUM_TEMPLATE0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_SA_ENUM_TEMPLATE0 = extern struct {
    saDirection: FWP_DIRECTION,
};
// --------------------------------------------------------
// Type: IPSEC_SA_CONTEXT_SUBSCRIPTION0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_SA_CONTEXT_SUBSCRIPTION0 = extern struct {
    enumTemplate: ?*IPSEC_SA_CONTEXT_ENUM_TEMPLATE0,
    flags: u32,
    sessionKey: Guid,
};
// --------------------------------------------------------
// Type: IPSEC_SA_CONTEXT_EVENT_TYPE0
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IPSEC_SA_CONTEXT_EVENT_TYPE0 = *opaque{
};
// --------------------------------------------------------
// Type: IPSEC_SA_CONTEXT_CHANGE0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_SA_CONTEXT_CHANGE0 = extern struct {
    changeType: IPSEC_SA_CONTEXT_EVENT_TYPE0,
    saContextId: u64,
};
// --------------------------------------------------------
// Type: IPSEC_FAILURE_POINT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IPSEC_FAILURE_POINT = *opaque{
};
// --------------------------------------------------------
// Type: IPSEC_ADDRESS_INFO0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_ADDRESS_INFO0 = extern struct {
    numV4Addresses: u32,
    v4Addresses: ?*u32,
    numV6Addresses: u32,
    v6Addresses: ?*FWP_BYTE_ARRAY16,
};
// --------------------------------------------------------
// Type: IPSEC_DOSP_OPTIONS0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_DOSP_OPTIONS0 = extern struct {
    stateIdleTimeoutSeconds: u32,
    perIPRateLimitQueueIdleTimeoutSeconds: u32,
    ipV6IPsecUnauthDscp: u8,
    ipV6IPsecUnauthRateLimitBytesPerSec: u32,
    ipV6IPsecUnauthPerIPRateLimitBytesPerSec: u32,
    ipV6IPsecAuthDscp: u8,
    ipV6IPsecAuthRateLimitBytesPerSec: u32,
    icmpV6Dscp: u8,
    icmpV6RateLimitBytesPerSec: u32,
    ipV6FilterExemptDscp: u8,
    ipV6FilterExemptRateLimitBytesPerSec: u32,
    defBlockExemptDscp: u8,
    defBlockExemptRateLimitBytesPerSec: u32,
    maxStateEntries: u32,
    maxPerIPRateLimitQueues: u32,
    flags: u32,
    numPublicIFLuids: u32,
    publicIFLuids: ?*u64,
    numInternalIFLuids: u32,
    internalIFLuids: ?*u64,
    publicV6AddrMask: FWP_V6_ADDR_AND_MASK,
    internalV6AddrMask: FWP_V6_ADDR_AND_MASK,
};
// --------------------------------------------------------
// Type: IPSEC_DOSP_STATISTICS0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_DOSP_STATISTICS0 = extern struct {
    totalStateEntriesCreated: u64,
    currentStateEntries: u64,
    totalInboundAllowedIPv6IPsecUnauthPkts: u64,
    totalInboundRatelimitDiscardedIPv6IPsecUnauthPkts: u64,
    totalInboundPerIPRatelimitDiscardedIPv6IPsecUnauthPkts: u64,
    totalInboundOtherDiscardedIPv6IPsecUnauthPkts: u64,
    totalInboundAllowedIPv6IPsecAuthPkts: u64,
    totalInboundRatelimitDiscardedIPv6IPsecAuthPkts: u64,
    totalInboundOtherDiscardedIPv6IPsecAuthPkts: u64,
    totalInboundAllowedICMPv6Pkts: u64,
    totalInboundRatelimitDiscardedICMPv6Pkts: u64,
    totalInboundAllowedIPv6FilterExemptPkts: u64,
    totalInboundRatelimitDiscardedIPv6FilterExemptPkts: u64,
    totalInboundDiscardedIPv6FilterBlockPkts: u64,
    totalInboundAllowedDefBlockExemptPkts: u64,
    totalInboundRatelimitDiscardedDefBlockExemptPkts: u64,
    totalInboundDiscardedDefBlockPkts: u64,
    currentInboundIPv6IPsecUnauthPerIPRateLimitQueues: u64,
};
// --------------------------------------------------------
// Type: IPSEC_DOSP_STATE0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_DOSP_STATE0 = extern struct {
    publicHostV6Addr: ?[*]u8,
    internalHostV6Addr: ?[*]u8,
    totalInboundIPv6IPsecAuthPackets: u64,
    totalOutboundIPv6IPsecAuthPackets: u64,
    durationSecs: u32,
};
// --------------------------------------------------------
// Type: IPSEC_DOSP_STATE_ENUM_TEMPLATE0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_DOSP_STATE_ENUM_TEMPLATE0 = extern struct {
    publicV6AddrMask: FWP_V6_ADDR_AND_MASK,
    internalV6AddrMask: FWP_V6_ADDR_AND_MASK,
};
// --------------------------------------------------------
// Type: IPSEC_KEY_MANAGER0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_KEY_MANAGER0 = extern struct {
    keyManagerKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    keyDictationTimeoutHint: u8,
};
// --------------------------------------------------------
// Type: DL_ADDRESS_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DL_ADDRESS_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: FWPM_CHANGE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWPM_CHANGE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: FWPM_SERVICE_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWPM_SERVICE_STATE = *opaque{
};
// --------------------------------------------------------
// Type: FWPM_ENGINE_OPTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWPM_ENGINE_OPTION = *opaque{
};
// --------------------------------------------------------
// Type: FWPM_SESSION0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_SESSION0 = extern struct {
    sessionKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    txnWaitTimeoutInMSec: u32,
    processId: u32,
    sid: ?*SID,
    username: ?*u16,
    kernelMode: BOOL,
};
// --------------------------------------------------------
// Type: FWPM_SESSION_ENUM_TEMPLATE0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_SESSION_ENUM_TEMPLATE0 = extern struct {
    reserved: u64,
};
// --------------------------------------------------------
// Type: FWPM_PROVIDER0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_PROVIDER0 = extern struct {
    providerKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    providerData: FWP_BYTE_BLOB,
    serviceName: ?*u16,
};
// --------------------------------------------------------
// Type: FWPM_PROVIDER_ENUM_TEMPLATE0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_PROVIDER_ENUM_TEMPLATE0 = extern struct {
    reserved: u64,
};
// --------------------------------------------------------
// Type: FWPM_PROVIDER_CHANGE0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_PROVIDER_CHANGE0 = extern struct {
    changeType: FWPM_CHANGE_TYPE,
    providerKey: Guid,
};
// --------------------------------------------------------
// Type: FWPM_PROVIDER_SUBSCRIPTION0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_PROVIDER_SUBSCRIPTION0 = extern struct {
    enumTemplate: ?*FWPM_PROVIDER_ENUM_TEMPLATE0,
    flags: u32,
    sessionKey: Guid,
};
// --------------------------------------------------------
// Type: FWPM_CLASSIFY_OPTION0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_CLASSIFY_OPTION0 = extern struct {
    type: FWP_CLASSIFY_OPTION_TYPE,
    value: FWP_VALUE0,
};
// --------------------------------------------------------
// Type: FWPM_CLASSIFY_OPTIONS0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_CLASSIFY_OPTIONS0 = extern struct {
    numOptions: u32,
    options: ?*FWPM_CLASSIFY_OPTION0,
};
// --------------------------------------------------------
// Type: FWPM_PROVIDER_CONTEXT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWPM_PROVIDER_CONTEXT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: FWPM_PROVIDER_CONTEXT0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_PROVIDER_CONTEXT0 = extern struct {
    providerContextKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    providerKey: ?*Guid,
    providerData: FWP_BYTE_BLOB,
    type: FWPM_PROVIDER_CONTEXT_TYPE,
    Anonymous: _Anonymous_e__Union,
    providerContextId: u64,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: FWPM_PROVIDER_CONTEXT1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_PROVIDER_CONTEXT1 = extern struct {
    providerContextKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    providerKey: ?*Guid,
    providerData: FWP_BYTE_BLOB,
    type: FWPM_PROVIDER_CONTEXT_TYPE,
    Anonymous: _Anonymous_e__Union,
    providerContextId: u64,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: FWPM_PROVIDER_CONTEXT2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_PROVIDER_CONTEXT2 = extern struct {
    providerContextKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    providerKey: ?*Guid,
    providerData: FWP_BYTE_BLOB,
    type: FWPM_PROVIDER_CONTEXT_TYPE,
    Anonymous: _Anonymous_e__Union,
    providerContextId: u64,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: FWPM_PROVIDER_CONTEXT3_
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_PROVIDER_CONTEXT3_ = extern struct {
    providerContextKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    providerKey: ?*Guid,
    providerData: FWP_BYTE_BLOB,
    type: FWPM_PROVIDER_CONTEXT_TYPE,
    Anonymous: _Anonymous_e__Union,
    providerContextId: u64,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0 = extern struct {
    providerKey: ?*Guid,
    providerContextType: FWPM_PROVIDER_CONTEXT_TYPE,
};
// --------------------------------------------------------
// Type: FWPM_PROVIDER_CONTEXT_CHANGE0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_PROVIDER_CONTEXT_CHANGE0 = extern struct {
    changeType: FWPM_CHANGE_TYPE,
    providerContextKey: Guid,
    providerContextId: u64,
};
// --------------------------------------------------------
// Type: FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0 = extern struct {
    enumTemplate: ?*FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0,
    flags: u32,
    sessionKey: Guid,
};
// --------------------------------------------------------
// Type: FWPM_SUBLAYER0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_SUBLAYER0 = extern struct {
    subLayerKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    providerKey: ?*Guid,
    providerData: FWP_BYTE_BLOB,
    weight: u16,
};
// --------------------------------------------------------
// Type: FWPM_SUBLAYER_ENUM_TEMPLATE0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_SUBLAYER_ENUM_TEMPLATE0 = extern struct {
    providerKey: ?*Guid,
};
// --------------------------------------------------------
// Type: FWPM_SUBLAYER_CHANGE0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_SUBLAYER_CHANGE0 = extern struct {
    changeType: FWPM_CHANGE_TYPE,
    subLayerKey: Guid,
};
// --------------------------------------------------------
// Type: FWPM_SUBLAYER_SUBSCRIPTION0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_SUBLAYER_SUBSCRIPTION0 = extern struct {
    enumTemplate: ?*FWPM_SUBLAYER_ENUM_TEMPLATE0,
    flags: u32,
    sessionKey: Guid,
};
// --------------------------------------------------------
// Type: FWPM_FIELD_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWPM_FIELD_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: FWPM_FIELD0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_FIELD0 = extern struct {
    fieldKey: ?*Guid,
    type: FWPM_FIELD_TYPE,
    dataType: FWP_DATA_TYPE,
};
// --------------------------------------------------------
// Type: FWPM_LAYER0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_LAYER0 = extern struct {
    layerKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    numFields: u32,
    field: ?*FWPM_FIELD0,
    defaultSubLayerKey: Guid,
    layerId: u16,
};
// --------------------------------------------------------
// Type: FWPM_LAYER_ENUM_TEMPLATE0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_LAYER_ENUM_TEMPLATE0 = extern struct {
    reserved: u64,
};
// --------------------------------------------------------
// Type: FWPM_CALLOUT0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_CALLOUT0 = extern struct {
    calloutKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    providerKey: ?*Guid,
    providerData: FWP_BYTE_BLOB,
    applicableLayer: Guid,
    calloutId: u32,
};
// --------------------------------------------------------
// Type: FWPM_CALLOUT_ENUM_TEMPLATE0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_CALLOUT_ENUM_TEMPLATE0 = extern struct {
    providerKey: ?*Guid,
    layerKey: Guid,
};
// --------------------------------------------------------
// Type: FWPM_CALLOUT_CHANGE0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_CALLOUT_CHANGE0 = extern struct {
    changeType: FWPM_CHANGE_TYPE,
    calloutKey: Guid,
    calloutId: u32,
};
// --------------------------------------------------------
// Type: FWPM_CALLOUT_SUBSCRIPTION0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_CALLOUT_SUBSCRIPTION0 = extern struct {
    enumTemplate: ?*FWPM_CALLOUT_ENUM_TEMPLATE0,
    flags: u32,
    sessionKey: Guid,
};
// --------------------------------------------------------
// Type: FWPM_ACTION0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_ACTION0 = extern struct {
    type: u32,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: FWPM_FILTER_CONDITION0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_FILTER_CONDITION0 = extern struct {
    fieldKey: Guid,
    matchType: FWP_MATCH_TYPE,
    conditionValue: FWP_CONDITION_VALUE0,
};
// --------------------------------------------------------
// Type: FWPM_FILTER0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_FILTER0 = extern struct {
    filterKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    providerKey: ?*Guid,
    providerData: FWP_BYTE_BLOB,
    layerKey: Guid,
    subLayerKey: Guid,
    weight: FWP_VALUE0,
    numFilterConditions: u32,
    filterCondition: ?*FWPM_FILTER_CONDITION0,
    action: FWPM_ACTION0,
    Anonymous: _Anonymous_e__Union,
    reserved: ?*Guid,
    filterId: u64,
    effectiveWeight: FWP_VALUE0,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: FWPM_FILTER_ENUM_TEMPLATE0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_FILTER_ENUM_TEMPLATE0 = extern struct {
    providerKey: ?*Guid,
    layerKey: Guid,
    enumType: FWP_FILTER_ENUM_TYPE,
    flags: u32,
    providerContextTemplate: ?*FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0,
    numFilterConditions: u32,
    filterCondition: ?*FWPM_FILTER_CONDITION0,
    actionMask: u32,
    calloutKey: ?*Guid,
};
// --------------------------------------------------------
// Type: FWPM_FILTER_CHANGE0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_FILTER_CHANGE0 = extern struct {
    changeType: FWPM_CHANGE_TYPE,
    filterKey: Guid,
    filterId: u64,
};
// --------------------------------------------------------
// Type: FWPM_FILTER_SUBSCRIPTION0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_FILTER_SUBSCRIPTION0 = extern struct {
    enumTemplate: ?*FWPM_FILTER_ENUM_TEMPLATE0,
    flags: u32,
    sessionKey: Guid,
};
// --------------------------------------------------------
// Type: FWPM_LAYER_STATISTICS0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_LAYER_STATISTICS0 = extern struct {
    layerId: Guid,
    classifyPermitCount: u32,
    classifyBlockCount: u32,
    classifyVetoCount: u32,
    numCacheEntries: u32,
};
// --------------------------------------------------------
// Type: FWPM_STATISTICS0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_STATISTICS0 = extern struct {
    numLayerStatistics: u32,
    layerStatistics: ?*FWPM_LAYER_STATISTICS0,
    inboundAllowedConnectionsV4: u32,
    inboundBlockedConnectionsV4: u32,
    outboundAllowedConnectionsV4: u32,
    outboundBlockedConnectionsV4: u32,
    inboundAllowedConnectionsV6: u32,
    inboundBlockedConnectionsV6: u32,
    outboundAllowedConnectionsV6: u32,
    outboundBlockedConnectionsV6: u32,
    inboundActiveConnectionsV4: u32,
    outboundActiveConnectionsV4: u32,
    inboundActiveConnectionsV6: u32,
    outboundActiveConnectionsV6: u32,
    reauthDirInbound: u64,
    reauthDirOutbound: u64,
    reauthFamilyV4: u64,
    reauthFamilyV6: u64,
    reauthProtoOther: u64,
    reauthProtoIPv4: u64,
    reauthProtoIPv6: u64,
    reauthProtoICMP: u64,
    reauthProtoICMP6: u64,
    reauthProtoUDP: u64,
    reauthProtoTCP: u64,
    reauthReasonPolicyChange: u64,
    reauthReasonNewArrivalInterface: u64,
    reauthReasonNewNextHopInterface: u64,
    reauthReasonProfileCrossing: u64,
    reauthReasonClassifyCompletion: u64,
    reauthReasonIPSecPropertiesChanged: u64,
    reauthReasonMidStreamInspection: u64,
    reauthReasonSocketPropertyChanged: u64,
    reauthReasonNewInboundMCastBCastPacket: u64,
    reauthReasonEDPPolicyChanged: u64,
    reauthReasonPreclassifyLocalAddrLayerChange: u64,
    reauthReasonPreclassifyRemoteAddrLayerChange: u64,
    reauthReasonPreclassifyLocalPortLayerChange: u64,
    reauthReasonPreclassifyRemotePortLayerChange: u64,
    reauthReasonProxyHandleChanged: u64,
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT_HEADER0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_NET_EVENT_HEADER0 = extern struct {
    timeStamp: FILETIME,
    flags: u32,
    ipVersion: FWP_IP_VERSION,
    ipProtocol: u8,
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    localPort: u16,
    remotePort: u16,
    scopeId: u32,
    appId: FWP_BYTE_BLOB,
    userId: ?*SID,
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT_HEADER1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_NET_EVENT_HEADER1 = extern struct {
    timeStamp: FILETIME,
    flags: u32,
    ipVersion: FWP_IP_VERSION,
    ipProtocol: u8,
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    localPort: u16,
    remotePort: u16,
    scopeId: u32,
    appId: FWP_BYTE_BLOB,
    userId: ?*SID,
    Anonymous3: _Anonymous3_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            reserved1: FWP_AF,
            Anonymous: _Anonymous_e__Union,
            // --------------------------------------------------------
            // Type: _Anonymous_e__Union
            // TypeLayoutAttr: explicit
            // not generating the actual code for this type because it has an explicit layout
            pub const _Anonymous_e__Union = *opaque{
                // --------------------------------------------------------
                // Type: _Anonymous_e__Struct
                // TypeLayoutAttr: sequential
                // TODO: I think this is a struct, but not sure at this point, assuming it is for now
                pub const _Anonymous_e__Struct = extern struct {
                    reserved2: FWP_BYTE_ARRAY6,
                    reserved3: FWP_BYTE_ARRAY6,
                    reserved4: u32,
                    reserved5: u32,
                    reserved6: u16,
                    reserved7: u32,
                    reserved8: u32,
                    reserved9: u16,
                    reserved10: u64,
                };
            };
        };
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT_HEADER2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_NET_EVENT_HEADER2 = extern struct {
    timeStamp: FILETIME,
    flags: u32,
    ipVersion: FWP_IP_VERSION,
    ipProtocol: u8,
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    localPort: u16,
    remotePort: u16,
    scopeId: u32,
    appId: FWP_BYTE_BLOB,
    userId: ?*SID,
    addressFamily: FWP_AF,
    packageSid: ?*SID,
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT_HEADER3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_NET_EVENT_HEADER3 = extern struct {
    timeStamp: FILETIME,
    flags: u32,
    ipVersion: FWP_IP_VERSION,
    ipProtocol: u8,
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    localPort: u16,
    remotePort: u16,
    scopeId: u32,
    appId: FWP_BYTE_BLOB,
    userId: ?*SID,
    addressFamily: FWP_AF,
    packageSid: ?*SID,
    enterpriseId: ?*u16,
    policyFlags: u64,
    effectiveName: FWP_BYTE_BLOB,
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWPM_NET_EVENT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT_IKEEXT_MM_FAILURE0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_NET_EVENT_IKEEXT_MM_FAILURE0 = extern struct {
    failureErrorCode: u32,
    failurePoint: IPSEC_FAILURE_POINT,
    flags: u32,
    keyingModuleType: IKEEXT_KEY_MODULE_TYPE,
    mmState: IKEEXT_MM_SA_STATE,
    saRole: IKEEXT_SA_ROLE,
    mmAuthMethod: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    endCertHash: ?[*]u8,
    mmId: u64,
    mmFilterId: u64,
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT_IKEEXT_MM_FAILURE1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_NET_EVENT_IKEEXT_MM_FAILURE1 = extern struct {
    failureErrorCode: u32,
    failurePoint: IPSEC_FAILURE_POINT,
    flags: u32,
    keyingModuleType: IKEEXT_KEY_MODULE_TYPE,
    mmState: IKEEXT_MM_SA_STATE,
    saRole: IKEEXT_SA_ROLE,
    mmAuthMethod: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    endCertHash: ?[*]u8,
    mmId: u64,
    mmFilterId: u64,
    localPrincipalNameForAuth: ?*u16,
    remotePrincipalNameForAuth: ?*u16,
    numLocalPrincipalGroupSids: u32,
    localPrincipalGroupSids: ?*?*u16,
    numRemotePrincipalGroupSids: u32,
    remotePrincipalGroupSids: ?*?*u16,
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT_IKEEXT_MM_FAILURE2_
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_NET_EVENT_IKEEXT_MM_FAILURE2_ = extern struct {
    failureErrorCode: u32,
    failurePoint: IPSEC_FAILURE_POINT,
    flags: u32,
    keyingModuleType: IKEEXT_KEY_MODULE_TYPE,
    mmState: IKEEXT_MM_SA_STATE,
    saRole: IKEEXT_SA_ROLE,
    mmAuthMethod: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    endCertHash: ?[*]u8,
    mmId: u64,
    mmFilterId: u64,
    localPrincipalNameForAuth: ?*u16,
    remotePrincipalNameForAuth: ?*u16,
    numLocalPrincipalGroupSids: u32,
    localPrincipalGroupSids: ?*?*u16,
    numRemotePrincipalGroupSids: u32,
    remotePrincipalGroupSids: ?*?*u16,
    providerContextKey: ?*Guid,
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT_IKEEXT_QM_FAILURE0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_NET_EVENT_IKEEXT_QM_FAILURE0 = extern struct {
    failureErrorCode: u32,
    failurePoint: IPSEC_FAILURE_POINT,
    keyingModuleType: IKEEXT_KEY_MODULE_TYPE,
    qmState: IKEEXT_QM_SA_STATE,
    saRole: IKEEXT_SA_ROLE,
    saTrafficType: IPSEC_TRAFFIC_TYPE,
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    qmFilterId: u64,
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT_IKEEXT_QM_FAILURE1_
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_NET_EVENT_IKEEXT_QM_FAILURE1_ = extern struct {
    failureErrorCode: u32,
    failurePoint: IPSEC_FAILURE_POINT,
    keyingModuleType: IKEEXT_KEY_MODULE_TYPE,
    qmState: IKEEXT_QM_SA_STATE,
    saRole: IKEEXT_SA_ROLE,
    saTrafficType: IPSEC_TRAFFIC_TYPE,
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    qmFilterId: u64,
    mmSaLuid: u64,
    mmProviderContextKey: Guid,
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT_IKEEXT_EM_FAILURE0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_NET_EVENT_IKEEXT_EM_FAILURE0 = extern struct {
    failureErrorCode: u32,
    failurePoint: IPSEC_FAILURE_POINT,
    flags: u32,
    emState: IKEEXT_EM_SA_STATE,
    saRole: IKEEXT_SA_ROLE,
    emAuthMethod: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    endCertHash: ?[*]u8,
    mmId: u64,
    qmFilterId: u64,
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT_IKEEXT_EM_FAILURE1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_NET_EVENT_IKEEXT_EM_FAILURE1 = extern struct {
    failureErrorCode: u32,
    failurePoint: IPSEC_FAILURE_POINT,
    flags: u32,
    emState: IKEEXT_EM_SA_STATE,
    saRole: IKEEXT_SA_ROLE,
    emAuthMethod: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    endCertHash: ?[*]u8,
    mmId: u64,
    qmFilterId: u64,
    localPrincipalNameForAuth: ?*u16,
    remotePrincipalNameForAuth: ?*u16,
    numLocalPrincipalGroupSids: u32,
    localPrincipalGroupSids: ?*?*u16,
    numRemotePrincipalGroupSids: u32,
    remotePrincipalGroupSids: ?*?*u16,
    saTrafficType: IPSEC_TRAFFIC_TYPE,
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT_CLASSIFY_DROP0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_NET_EVENT_CLASSIFY_DROP0 = extern struct {
    filterId: u64,
    layerId: u16,
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT_CLASSIFY_DROP1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_NET_EVENT_CLASSIFY_DROP1 = extern struct {
    filterId: u64,
    layerId: u16,
    reauthReason: u32,
    originalProfile: u32,
    currentProfile: u32,
    msFwpDirection: u32,
    isLoopback: BOOL,
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT_CLASSIFY_DROP2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_NET_EVENT_CLASSIFY_DROP2 = extern struct {
    filterId: u64,
    layerId: u16,
    reauthReason: u32,
    originalProfile: u32,
    currentProfile: u32,
    msFwpDirection: u32,
    isLoopback: BOOL,
    vSwitchId: FWP_BYTE_BLOB,
    vSwitchSourcePort: u32,
    vSwitchDestinationPort: u32,
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT_CLASSIFY_DROP_MAC0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_NET_EVENT_CLASSIFY_DROP_MAC0 = extern struct {
    localMacAddr: FWP_BYTE_ARRAY6,
    remoteMacAddr: FWP_BYTE_ARRAY6,
    mediaType: u32,
    ifType: u32,
    etherType: u16,
    ndisPortNumber: u32,
    reserved: u32,
    vlanTag: u16,
    ifLuid: u64,
    filterId: u64,
    layerId: u16,
    reauthReason: u32,
    originalProfile: u32,
    currentProfile: u32,
    msFwpDirection: u32,
    isLoopback: BOOL,
    vSwitchId: FWP_BYTE_BLOB,
    vSwitchSourcePort: u32,
    vSwitchDestinationPort: u32,
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT_CLASSIFY_ALLOW0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_NET_EVENT_CLASSIFY_ALLOW0 = extern struct {
    filterId: u64,
    layerId: u16,
    reauthReason: u32,
    originalProfile: u32,
    currentProfile: u32,
    msFwpDirection: u32,
    isLoopback: BOOL,
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT_IPSEC_KERNEL_DROP0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_NET_EVENT_IPSEC_KERNEL_DROP0 = extern struct {
    failureStatus: i32,
    direction: FWP_DIRECTION,
    spi: u32,
    filterId: u64,
    layerId: u16,
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT_IPSEC_DOSP_DROP0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_NET_EVENT_IPSEC_DOSP_DROP0 = extern struct {
    ipVersion: FWP_IP_VERSION,
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    failureStatus: i32,
    direction: FWP_DIRECTION,
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: FWPM_APPC_NETWORK_CAPABILITY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWPM_APPC_NETWORK_CAPABILITY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT_CAPABILITY_DROP0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_NET_EVENT_CAPABILITY_DROP0 = extern struct {
    networkCapabilityId: FWPM_APPC_NETWORK_CAPABILITY_TYPE,
    filterId: u64,
    isLoopback: BOOL,
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT_CAPABILITY_ALLOW0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_NET_EVENT_CAPABILITY_ALLOW0 = extern struct {
    networkCapabilityId: FWPM_APPC_NETWORK_CAPABILITY_TYPE,
    filterId: u64,
    isLoopback: BOOL,
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT_LPM_PACKET_ARRIVAL0_
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_NET_EVENT_LPM_PACKET_ARRIVAL0_ = extern struct {
    spi: u32,
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_NET_EVENT0 = extern struct {
    header: FWPM_NET_EVENT_HEADER0,
    type: FWPM_NET_EVENT_TYPE,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_NET_EVENT1 = extern struct {
    header: FWPM_NET_EVENT_HEADER1,
    type: FWPM_NET_EVENT_TYPE,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_NET_EVENT2 = extern struct {
    header: FWPM_NET_EVENT_HEADER2,
    type: FWPM_NET_EVENT_TYPE,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_NET_EVENT3 = extern struct {
    header: FWPM_NET_EVENT_HEADER3,
    type: FWPM_NET_EVENT_TYPE,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT4_
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_NET_EVENT4_ = extern struct {
    header: FWPM_NET_EVENT_HEADER3,
    type: FWPM_NET_EVENT_TYPE,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT5_
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_NET_EVENT5_ = extern struct {
    header: FWPM_NET_EVENT_HEADER3,
    type: FWPM_NET_EVENT_TYPE,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT_ENUM_TEMPLATE0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_NET_EVENT_ENUM_TEMPLATE0 = extern struct {
    startTime: FILETIME,
    endTime: FILETIME,
    numFilterConditions: u32,
    filterCondition: ?*FWPM_FILTER_CONDITION0,
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT_SUBSCRIPTION0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_NET_EVENT_SUBSCRIPTION0 = extern struct {
    enumTemplate: ?*FWPM_NET_EVENT_ENUM_TEMPLATE0,
    flags: u32,
    sessionKey: Guid,
};
// --------------------------------------------------------
// Type: FWPM_SYSTEM_PORT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWPM_SYSTEM_PORT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: FWPM_SYSTEM_PORTS_BY_TYPE0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_SYSTEM_PORTS_BY_TYPE0 = extern struct {
    type: FWPM_SYSTEM_PORT_TYPE,
    numPorts: u32,
    ports: ?*u16,
};
// --------------------------------------------------------
// Type: FWPM_SYSTEM_PORTS0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_SYSTEM_PORTS0 = extern struct {
    numTypes: u32,
    types: ?*FWPM_SYSTEM_PORTS_BY_TYPE0,
};
// --------------------------------------------------------
// Type: FWPM_CONNECTION0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_CONNECTION0 = extern struct {
    connectionId: u64,
    ipVersion: FWP_IP_VERSION,
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    providerKey: ?*Guid,
    ipsecTrafficModeType: IPSEC_TRAFFIC_TYPE,
    keyModuleType: IKEEXT_KEY_MODULE_TYPE,
    mmCrypto: IKEEXT_PROPOSAL0,
    mmPeer: IKEEXT_CREDENTIAL2,
    emPeer: IKEEXT_CREDENTIAL2,
    bytesTransferredIn: u64,
    bytesTransferredOut: u64,
    bytesTransferredTotal: u64,
    startSysTime: FILETIME,
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: FWPM_CONNECTION_ENUM_TEMPLATE0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_CONNECTION_ENUM_TEMPLATE0 = extern struct {
    connectionId: u64,
    flags: u32,
};
// --------------------------------------------------------
// Type: FWPM_CONNECTION_SUBSCRIPTION0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_CONNECTION_SUBSCRIPTION0 = extern struct {
    enumTemplate: ?*FWPM_CONNECTION_ENUM_TEMPLATE0,
    flags: u32,
    sessionKey: Guid,
};
// --------------------------------------------------------
// Type: FWPM_CONNECTION_EVENT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWPM_CONNECTION_EVENT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: FWPM_VSWITCH_EVENT_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWPM_VSWITCH_EVENT_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: FWPM_VSWITCH_EVENT0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_VSWITCH_EVENT0 = extern struct {
    eventType: FWPM_VSWITCH_EVENT_TYPE,
    vSwitchId: ?*u16,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _reorderInfo_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _reorderInfo_e__Struct = extern struct {
            inRequiredPosition: BOOL,
            numvSwitchFilterExtensions: u32,
            vSwitchFilterExtensions: ?*?*u16,
        };
        // --------------------------------------------------------
        // Type: _positionInfo_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _positionInfo_e__Struct = extern struct {
            numvSwitchFilterExtensions: u32,
            vSwitchFilterExtensions: ?*?*u16,
        };
    };
};
// --------------------------------------------------------
// Type: FWPM_VSWITCH_EVENT_SUBSCRIPTION0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FWPM_VSWITCH_EVENT_SUBSCRIPTION0 = extern struct {
    flags: u32,
    sessionKey: Guid,
};
// --------------------------------------------------------
// Type: FWPM_PROVIDER_CHANGE_CALLBACK0
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWPM_PROVIDER_CHANGE_CALLBACK0 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FWPM_PROVIDER_CONTEXT_CHANGE_CALLBACK0
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWPM_PROVIDER_CONTEXT_CHANGE_CALLBACK0 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FWPM_SUBLAYER_CHANGE_CALLBACK0
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWPM_SUBLAYER_CHANGE_CALLBACK0 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FWPM_CALLOUT_CHANGE_CALLBACK0
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWPM_CALLOUT_CHANGE_CALLBACK0 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FWPM_FILTER_CHANGE_CALLBACK0
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWPM_FILTER_CHANGE_CALLBACK0 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: IPSEC_SA_CONTEXT_CALLBACK0
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IPSEC_SA_CONTEXT_CALLBACK0 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: IPSEC_KEY_MANAGER_KEY_DICTATION_CHECK0
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IPSEC_KEY_MANAGER_KEY_DICTATION_CHECK0 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: IPSEC_KEY_MANAGER_DICTATE_KEY0
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IPSEC_KEY_MANAGER_DICTATE_KEY0 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: IPSEC_KEY_MANAGER_NOTIFY_KEY0
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IPSEC_KEY_MANAGER_NOTIFY_KEY0 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: IPSEC_KEY_MANAGER_CALLBACKS0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPSEC_KEY_MANAGER_CALLBACKS0 = extern struct {
    reserved: Guid,
    flags: u32,
    keyDictationCheck: IPSEC_KEY_MANAGER_KEY_DICTATION_CHECK0,
    keyDictation: IPSEC_KEY_MANAGER_DICTATE_KEY0,
    keyNotify: IPSEC_KEY_MANAGER_NOTIFY_KEY0,
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT_CALLBACK0
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWPM_NET_EVENT_CALLBACK0 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT_CALLBACK1
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWPM_NET_EVENT_CALLBACK1 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT_CALLBACK2
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWPM_NET_EVENT_CALLBACK2 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT_CALLBACK3
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWPM_NET_EVENT_CALLBACK3 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FWPM_NET_EVENT_CALLBACK4
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWPM_NET_EVENT_CALLBACK4 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FWPM_SYSTEM_PORTS_CALLBACK0
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWPM_SYSTEM_PORTS_CALLBACK0 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FWPM_CONNECTION_CALLBACK0
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWPM_CONNECTION_CALLBACK0 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: FWPM_VSWITCH_EVENT_CALLBACK0
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FWPM_VSWITCH_EVENT_CALLBACK0 = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DL_OUI
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const DL_OUI = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        _bitfield: u8,
    };
};
// --------------------------------------------------------
// Type: DL_EI48
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const DL_EI48 = *opaque{
};
// --------------------------------------------------------
// Type: DL_EUI48
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const DL_EUI48 = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        Oui: DL_OUI,
        Ei48: DL_EI48,
    };
};
// --------------------------------------------------------
// Type: DL_EI64
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const DL_EI64 = *opaque{
};
// --------------------------------------------------------
// Type: DL_EUI64
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const DL_EUI64 = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        Oui: DL_OUI,
        Anonymous: _Anonymous_e__Union,
        // --------------------------------------------------------
        // Type: _Anonymous_e__Union
        // TypeLayoutAttr: explicit
        // not generating the actual code for this type because it has an explicit layout
        pub const _Anonymous_e__Union = *opaque{
            // --------------------------------------------------------
            // Type: _Anonymous_e__Struct
            // TypeLayoutAttr: sequential
            // TODO: I think this is a struct, but not sure at this point, assuming it is for now
            pub const _Anonymous_e__Struct = extern struct {
                Type: u8,
                Tse: u8,
                Ei48: DL_EI48,
            };
        };
    };
};
// --------------------------------------------------------
// Type: SNAP_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SNAP_HEADER = extern struct {
    Dsap: u8,
    Ssap: u8,
    Control: u8,
    Oui: ?[*]u8,
    Type: u16,
};
// --------------------------------------------------------
// Type: ETHERNET_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ETHERNET_HEADER = extern struct {
    Destination: DL_EUI48,
    Source: DL_EUI48,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: VLAN_TAG
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VLAN_TAG = extern struct {
    Anonymous: _Anonymous_e__Union,
    Type: u16,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: u16,
        };
    };
};
// --------------------------------------------------------
// Type: ICMP_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ICMP_HEADER = extern struct {
    Type: u8,
    Code: u8,
    Checksum: u16,
};
// --------------------------------------------------------
// Type: ICMP_MESSAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ICMP_MESSAGE = extern struct {
    Header: ICMP_HEADER,
    Data: _Data_e__Union,
    // --------------------------------------------------------
    // Type: _Data_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Data_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IPV4_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPV4_HEADER = extern struct {
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    TotalLength: u16,
    Identification: u16,
    Anonymous3: _Anonymous3_e__Union,
    TimeToLive: u8,
    Protocol: u8,
    HeaderChecksum: u16,
    SourceAddress: in_addr,
    DestinationAddress: in_addr,
    // --------------------------------------------------------
    // Type: _Anonymous3_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous3_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: u16,
        };
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: u8,
        };
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: u8,
        };
    };
};
// --------------------------------------------------------
// Type: IPV4_OPTION_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPV4_OPTION_HEADER = extern struct {
    Anonymous: _Anonymous_e__Union,
    OptionLength: u8,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: u8,
        };
    };
};
// --------------------------------------------------------
// Type: IPV4_OPTION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IPV4_OPTION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IPV4_TIMESTAMP_OPTION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPV4_TIMESTAMP_OPTION = extern struct {
    OptionHeader: IPV4_OPTION_HEADER,
    Pointer: u8,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: u8,
        };
    };
};
// --------------------------------------------------------
// Type: IP_OPTION_TIMESTAMP_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IP_OPTION_TIMESTAMP_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: IPV4_ROUTING_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPV4_ROUTING_HEADER = extern struct {
    OptionHeader: IPV4_OPTION_HEADER,
    Pointer: u8,
};
// --------------------------------------------------------
// Type: ICMP4_UNREACH_CODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ICMP4_UNREACH_CODE = *opaque{
};
// --------------------------------------------------------
// Type: ICMP4_TIME_EXCEED_CODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ICMP4_TIME_EXCEED_CODE = *opaque{
};
// --------------------------------------------------------
// Type: ICMPV4_ROUTER_SOLICIT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ICMPV4_ROUTER_SOLICIT = extern struct {
    RsHeader: ICMP_MESSAGE,
};
// --------------------------------------------------------
// Type: ICMPV4_ROUTER_ADVERT_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ICMPV4_ROUTER_ADVERT_HEADER = extern struct {
    RaHeader: ICMP_MESSAGE,
};
// --------------------------------------------------------
// Type: ICMPV4_ROUTER_ADVERT_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ICMPV4_ROUTER_ADVERT_ENTRY = extern struct {
    RouterAdvertAddr: in_addr,
    PreferenceLevel: i32,
};
// --------------------------------------------------------
// Type: ICMPV4_TIMESTAMP_MESSAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ICMPV4_TIMESTAMP_MESSAGE = extern struct {
    Header: ICMP_MESSAGE,
    OriginateTimestamp: u32,
    ReceiveTimestamp: u32,
    TransmitTimestamp: u32,
};
// --------------------------------------------------------
// Type: ICMPV4_ADDRESS_MASK_MESSAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ICMPV4_ADDRESS_MASK_MESSAGE = extern struct {
    Header: ICMP_MESSAGE,
    AddressMask: u32,
};
// --------------------------------------------------------
// Type: ARP_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ARP_HEADER = extern struct {
    HardwareAddressSpace: u16,
    ProtocolAddressSpace: u16,
    HardwareAddressLength: u8,
    ProtocolAddressLength: u8,
    Opcode: u16,
    SenderHardwareAddress: ?[*]u8,
};
// --------------------------------------------------------
// Type: ARP_OPCODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ARP_OPCODE = *opaque{
};
// --------------------------------------------------------
// Type: ARP_HARDWARE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ARP_HARDWARE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IGMP_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IGMP_HEADER = extern struct {
    Anonymous1: _Anonymous1_e__Union,
    Anonymous2: _Anonymous2_e__Union,
    Checksum: u16,
    MulticastAddress: in_addr,
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: u8,
        };
    };
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: IGMP_MAX_RESP_CODE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IGMP_MAX_RESP_CODE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IGMPV3_QUERY_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IGMPV3_QUERY_HEADER = extern struct {
    Type: u8,
    Anonymous1: _Anonymous1_e__Union,
    Checksum: u16,
    MulticastAddress: in_addr,
    _bitfield: u8,
    Anonymous2: _Anonymous2_e__Union,
    SourceCount: u16,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: u8,
        };
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: u8,
        };
    };
};
// --------------------------------------------------------
// Type: IGMPV3_REPORT_RECORD_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IGMPV3_REPORT_RECORD_HEADER = extern struct {
    Type: u8,
    AuxillaryDataLength: u8,
    SourceCount: u16,
    MulticastAddress: in_addr,
};
// --------------------------------------------------------
// Type: IGMPV3_REPORT_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IGMPV3_REPORT_HEADER = extern struct {
    Type: u8,
    Reserved: u8,
    Checksum: u16,
    Reserved2: u16,
    RecordCount: u16,
};
// --------------------------------------------------------
// Type: IPV6_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPV6_HEADER = extern struct {
    Anonymous: _Anonymous_e__Union,
    PayloadLength: u16,
    NextHeader: u8,
    HopLimit: u8,
    SourceAddress: in6_addr,
    DestinationAddress: in6_addr,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: u32,
        };
    };
};
// --------------------------------------------------------
// Type: IPV6_FRAGMENT_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPV6_FRAGMENT_HEADER = extern struct {
    NextHeader: u8,
    Reserved: u8,
    Anonymous: _Anonymous_e__Union,
    Id: u32,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: u16,
        };
    };
};
// --------------------------------------------------------
// Type: IPV6_EXTENSION_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPV6_EXTENSION_HEADER = extern struct {
    NextHeader: u8,
    Length: u8,
};
// --------------------------------------------------------
// Type: IPV6_OPTION_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPV6_OPTION_HEADER = extern struct {
    Type: u8,
    DataLength: u8,
};
// --------------------------------------------------------
// Type: IPV6_OPTION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IPV6_OPTION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IPV6_OPTION_JUMBOGRAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPV6_OPTION_JUMBOGRAM = extern struct {
    Header: IPV6_OPTION_HEADER,
    JumbogramLength: ?[*]u8,
};
// --------------------------------------------------------
// Type: IPV6_OPTION_ROUTER_ALERT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPV6_OPTION_ROUTER_ALERT = extern struct {
    Header: IPV6_OPTION_HEADER,
    Value: ?[*]u8,
};
// --------------------------------------------------------
// Type: IPV6_ROUTING_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IPV6_ROUTING_HEADER = extern struct {
    NextHeader: u8,
    Length: u8,
    RoutingType: u8,
    SegmentsLeft: u8,
    Reserved: ?[*]u8,
};
// --------------------------------------------------------
// Type: nd_router_solicit
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const nd_router_solicit = extern struct {
    nd_rs_hdr: ICMP_MESSAGE,
};
// --------------------------------------------------------
// Type: nd_router_advert
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const nd_router_advert = extern struct {
    nd_ra_hdr: ICMP_MESSAGE,
    nd_ra_reachable: u32,
    nd_ra_retransmit: u32,
};
// --------------------------------------------------------
// Type: IPV6_ROUTER_ADVERTISEMENT_FLAGS
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const IPV6_ROUTER_ADVERTISEMENT_FLAGS = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        _bitfield: u8,
    };
};
// --------------------------------------------------------
// Type: nd_neighbor_solicit
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const nd_neighbor_solicit = extern struct {
    nd_ns_hdr: ICMP_MESSAGE,
    nd_ns_target: in6_addr,
};
// --------------------------------------------------------
// Type: nd_neighbor_advert
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const nd_neighbor_advert = extern struct {
    nd_na_hdr: ICMP_MESSAGE,
    nd_na_target: in6_addr,
};
// --------------------------------------------------------
// Type: IPV6_NEIGHBOR_ADVERTISEMENT_FLAGS
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const IPV6_NEIGHBOR_ADVERTISEMENT_FLAGS = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        _bitfield: u8,
        Reserved2: ?[*]u8,
    };
};
// --------------------------------------------------------
// Type: nd_redirect
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const nd_redirect = extern struct {
    nd_rd_hdr: ICMP_MESSAGE,
    nd_rd_target: in6_addr,
    nd_rd_dst: in6_addr,
};
// --------------------------------------------------------
// Type: nd_opt_hdr
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const nd_opt_hdr = extern struct {
    nd_opt_type: u8,
    nd_opt_len: u8,
};
// --------------------------------------------------------
// Type: ND_OPTION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const ND_OPTION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: nd_opt_prefix_info
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const nd_opt_prefix_info = extern struct {
    nd_opt_pi_type: u8,
    nd_opt_pi_len: u8,
    nd_opt_pi_prefix_len: u8,
    Anonymous1: _Anonymous1_e__Union,
    nd_opt_pi_valid_time: u32,
    nd_opt_pi_preferred_time: u32,
    Anonymous2: _Anonymous2_e__Union,
    nd_opt_pi_prefix: in6_addr,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            nd_opt_pi_reserved3: ?[*]u8,
            nd_opt_pi_site_prefix_len: u8,
        };
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Flags_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Flags_e__Struct = extern struct {
            _bitfield: u8,
        };
    };
};
// --------------------------------------------------------
// Type: nd_opt_rd_hdr
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const nd_opt_rd_hdr = extern struct {
    nd_opt_rh_type: u8,
    nd_opt_rh_len: u8,
    nd_opt_rh_reserved1: u16,
    nd_opt_rh_reserved2: u32,
};
// --------------------------------------------------------
// Type: nd_opt_mtu
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const nd_opt_mtu = extern struct {
    nd_opt_mtu_type: u8,
    nd_opt_mtu_len: u8,
    nd_opt_mtu_reserved: u16,
    nd_opt_mtu_mtu: u32,
};
// --------------------------------------------------------
// Type: nd_opt_route_info
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const nd_opt_route_info = extern struct {
    nd_opt_ri_type: u8,
    nd_opt_ri_len: u8,
    nd_opt_ri_prefix_len: u8,
    Anonymous: _Anonymous_e__Union,
    nd_opt_ri_route_lifetime: u32,
    nd_opt_ri_prefix: in6_addr,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Flags_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Flags_e__Struct = extern struct {
            _bitfield: u8,
        };
    };
};
// --------------------------------------------------------
// Type: nd_opt_rdnss
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const nd_opt_rdnss = extern struct {
    nd_opt_rdnss_type: u8,
    nd_opt_rdnss_len: u8,
    nd_opt_rdnss_reserved: u16,
    nd_opt_rdnss_lifetime: u32,
};
// --------------------------------------------------------
// Type: nd_opt_dnssl
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const nd_opt_dnssl = extern struct {
    nd_opt_dnssl_type: u8,
    nd_opt_dnssl_len: u8,
    nd_opt_dnssl_reserved: u16,
    nd_opt_dnssl_lifetime: u32,
};
// --------------------------------------------------------
// Type: MLD_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MLD_HEADER = extern struct {
    IcmpHeader: ICMP_HEADER,
    MaxRespTime: u16,
    Reserved: u16,
    MulticastAddress: in6_addr,
};
// --------------------------------------------------------
// Type: MLD_MAX_RESP_CODE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MLD_MAX_RESP_CODE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: MLDV2_QUERY_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MLDV2_QUERY_HEADER = extern struct {
    IcmpHeader: ICMP_HEADER,
    Anonymous1: _Anonymous1_e__Union,
    Reserved: u16,
    MulticastAddress: in6_addr,
    _bitfield: u8,
    Anonymous2: _Anonymous2_e__Union,
    SourceCount: u16,
    // --------------------------------------------------------
    // Type: _Anonymous2_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous2_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: u8,
        };
    };
    // --------------------------------------------------------
    // Type: _Anonymous1_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous1_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            _bitfield: u16,
        };
    };
};
// --------------------------------------------------------
// Type: MLDV2_REPORT_RECORD_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MLDV2_REPORT_RECORD_HEADER = extern struct {
    Type: u8,
    AuxillaryDataLength: u8,
    SourceCount: u16,
    MulticastAddress: in6_addr,
};
// --------------------------------------------------------
// Type: MLDV2_REPORT_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MLDV2_REPORT_HEADER = extern struct {
    IcmpHeader: ICMP_HEADER,
    Reserved: u16,
    RecordCount: u16,
};
// --------------------------------------------------------
// Type: tcp_hdr
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const tcp_hdr = *opaque{
};
// --------------------------------------------------------
// Type: tcp_opt_mss
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const tcp_opt_mss = *opaque{
};
// --------------------------------------------------------
// Type: tcp_opt_ws
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tcp_opt_ws = extern struct {
    Kind: u8,
    Length: u8,
    ShiftCnt: u8,
};
// --------------------------------------------------------
// Type: tcp_opt_sack_permitted
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tcp_opt_sack_permitted = extern struct {
    Kind: u8,
    Length: u8,
};
// --------------------------------------------------------
// Type: tcp_opt_sack
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tcp_opt_sack = extern struct {
    Kind: u8,
    Length: u8,
    Block: ?[*]tcp_opt_sack_block,
    // --------------------------------------------------------
    // Type: tcp_opt_sack_block
    // TypeLayoutAttr: sequential
    // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
    pub const tcp_opt_sack_block = *opaque{
    };
};
// --------------------------------------------------------
// Type: tcp_opt_ts
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const tcp_opt_ts = *opaque{
};
// --------------------------------------------------------
// Type: tcp_opt_unknown
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tcp_opt_unknown = extern struct {
    Kind: u8,
    Length: u8,
};
// --------------------------------------------------------
// Type: tcp_opt_fastopen
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const tcp_opt_fastopen = extern struct {
    Kind: u8,
    Length: u8,
    Cookie: ?[*]u8,
};
// --------------------------------------------------------
// Type: DL_TUNNEL_ADDRESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DL_TUNNEL_ADDRESS = extern struct {
    CompartmentId: COMPARTMENT_ID,
    ScopeId: SCOPE_ID,
    IpAddress: ?[*]u8,
};
// --------------------------------------------------------
// Type: TUNNEL_SUB_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TUNNEL_SUB_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DL_TEREDO_ADDRESS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DL_TEREDO_ADDRESS = extern struct {
    Reserved: ?[*]u8,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _Anonymous_e__Struct = *opaque{
        };
    };
};
// --------------------------------------------------------
// Type: DL_TEREDO_ADDRESS_PRV
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DL_TEREDO_ADDRESS_PRV = extern struct {
    Reserved: ?[*]u8,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
        pub const _Anonymous_e__Struct = *opaque{
        };
    };
};
// --------------------------------------------------------
// Type: IPTLS_METADATA
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const IPTLS_METADATA = *opaque{
};
// --------------------------------------------------------
// Type: NPI_MODULEID_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NPI_MODULEID_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: NPI_MODULEID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NPI_MODULEID = extern struct {
    Length: u16,
    Type: NPI_MODULEID_TYPE,
    Anonymous: _Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: FALLBACK_INDEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FALLBACK_INDEX = *opaque{
};

//
// functions
//

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmFreeMemory0(
    p: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) void;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmEngineOpen0(
    serverName: ?*u16,
    authnService: u32,
    authIdentity: ?*SEC_WINNT_AUTH_IDENTITY_W,
    session: ?*FWPM_SESSION0,
    engineHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmEngineClose0(
    engineHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmEngineGetOption0(
    engineHandle: HANDLE,
    option: FWPM_ENGINE_OPTION,
    value: ?*?*FWP_VALUE0,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmEngineSetOption0(
    engineHandle: HANDLE,
    option: FWPM_ENGINE_OPTION,
    newValue: ?*FWP_VALUE0,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmEngineGetSecurityInfo0(
    engineHandle: HANDLE,
    securityInfo: u32,
    sidOwner: ?*?*opaque{},
    sidGroup: ?*?*opaque{},
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmEngineSetSecurityInfo0(
    engineHandle: HANDLE,
    securityInfo: u32,
    sidOwner: ?*SID,
    sidGroup: ?*SID,
    dacl: ?*ACL,
    sacl: ?*ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmSessionCreateEnumHandle0(
    engineHandle: HANDLE,
    enumTemplate: ?*FWPM_SESSION_ENUM_TEMPLATE0,
    enumHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmSessionEnum0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_SESSION0,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmSessionDestroyEnumHandle0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmTransactionBegin0(
    engineHandle: HANDLE,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmTransactionCommit0(
    engineHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmTransactionAbort0(
    engineHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderAdd0(
    engineHandle: HANDLE,
    provider: ?*FWPM_PROVIDER0,
    sd: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderDeleteByKey0(
    engineHandle: HANDLE,
    key: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderGetByKey0(
    engineHandle: HANDLE,
    key: ?*Guid,
    provider: ?*?*FWPM_PROVIDER0,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderCreateEnumHandle0(
    engineHandle: HANDLE,
    enumTemplate: ?*FWPM_PROVIDER_ENUM_TEMPLATE0,
    enumHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderEnum0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_PROVIDER0,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderDestroyEnumHandle0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderGetSecurityInfoByKey0(
    engineHandle: HANDLE,
    key: ?*Guid,
    securityInfo: u32,
    sidOwner: ?*?*opaque{},
    sidGroup: ?*?*opaque{},
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderSetSecurityInfoByKey0(
    engineHandle: HANDLE,
    key: ?*Guid,
    securityInfo: u32,
    sidOwner: ?*SID,
    sidGroup: ?*SID,
    dacl: ?*ACL,
    sacl: ?*ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderSubscribeChanges0(
    engineHandle: HANDLE,
    subscription: ?*FWPM_PROVIDER_SUBSCRIPTION0,
    callback: FWPM_PROVIDER_CHANGE_CALLBACK0,
    context: ?*opaque{},
    changeHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderUnsubscribeChanges0(
    engineHandle: HANDLE,
    changeHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderSubscriptionsGet0(
    engineHandle: HANDLE,
    entries: ?*?*?*FWPM_PROVIDER_SUBSCRIPTION0,
    numEntries: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderContextAdd0(
    engineHandle: HANDLE,
    providerContext: ?*FWPM_PROVIDER_CONTEXT0,
    sd: ?*opaque{},
    id: ?*u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderContextAdd1(
    engineHandle: HANDLE,
    providerContext: ?*FWPM_PROVIDER_CONTEXT1,
    sd: ?*opaque{},
    id: ?*u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderContextAdd2(
    engineHandle: HANDLE,
    providerContext: ?*FWPM_PROVIDER_CONTEXT2,
    sd: ?*opaque{},
    id: ?*u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderContextAdd3(
    engineHandle: HANDLE,
    providerContext: ?*FWPM_PROVIDER_CONTEXT3_,
    sd: ?*opaque{},
    id: ?*u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderContextDeleteById0(
    engineHandle: HANDLE,
    id: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderContextDeleteByKey0(
    engineHandle: HANDLE,
    key: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderContextGetById0(
    engineHandle: HANDLE,
    id: u64,
    providerContext: ?*?*FWPM_PROVIDER_CONTEXT0,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderContextGetById1(
    engineHandle: HANDLE,
    id: u64,
    providerContext: ?*?*FWPM_PROVIDER_CONTEXT1,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderContextGetById2(
    engineHandle: HANDLE,
    id: u64,
    providerContext: ?*?*FWPM_PROVIDER_CONTEXT2,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderContextGetById3(
    engineHandle: HANDLE,
    id: u64,
    providerContext: ?*?*FWPM_PROVIDER_CONTEXT3_,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderContextGetByKey0(
    engineHandle: HANDLE,
    key: ?*Guid,
    providerContext: ?*?*FWPM_PROVIDER_CONTEXT0,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderContextGetByKey1(
    engineHandle: HANDLE,
    key: ?*Guid,
    providerContext: ?*?*FWPM_PROVIDER_CONTEXT1,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderContextGetByKey2(
    engineHandle: HANDLE,
    key: ?*Guid,
    providerContext: ?*?*FWPM_PROVIDER_CONTEXT2,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderContextGetByKey3(
    engineHandle: HANDLE,
    key: ?*Guid,
    providerContext: ?*?*FWPM_PROVIDER_CONTEXT3_,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderContextCreateEnumHandle0(
    engineHandle: HANDLE,
    enumTemplate: ?*FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0,
    enumHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderContextEnum0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_PROVIDER_CONTEXT0,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderContextEnum1(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_PROVIDER_CONTEXT1,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderContextEnum2(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_PROVIDER_CONTEXT2,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderContextEnum3(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_PROVIDER_CONTEXT3_,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderContextDestroyEnumHandle0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderContextGetSecurityInfoByKey0(
    engineHandle: HANDLE,
    key: ?*Guid,
    securityInfo: u32,
    sidOwner: ?*?*opaque{},
    sidGroup: ?*?*opaque{},
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderContextSetSecurityInfoByKey0(
    engineHandle: HANDLE,
    key: ?*Guid,
    securityInfo: u32,
    sidOwner: ?*SID,
    sidGroup: ?*SID,
    dacl: ?*ACL,
    sacl: ?*ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderContextSubscribeChanges0(
    engineHandle: HANDLE,
    subscription: ?*FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0,
    callback: FWPM_PROVIDER_CONTEXT_CHANGE_CALLBACK0,
    context: ?*opaque{},
    changeHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderContextUnsubscribeChanges0(
    engineHandle: HANDLE,
    changeHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmProviderContextSubscriptionsGet0(
    engineHandle: HANDLE,
    entries: ?*?*?*FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0,
    numEntries: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmSubLayerAdd0(
    engineHandle: HANDLE,
    subLayer: ?*FWPM_SUBLAYER0,
    sd: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmSubLayerDeleteByKey0(
    engineHandle: HANDLE,
    key: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmSubLayerGetByKey0(
    engineHandle: HANDLE,
    key: ?*Guid,
    subLayer: ?*?*FWPM_SUBLAYER0,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmSubLayerCreateEnumHandle0(
    engineHandle: HANDLE,
    enumTemplate: ?*FWPM_SUBLAYER_ENUM_TEMPLATE0,
    enumHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmSubLayerEnum0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_SUBLAYER0,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmSubLayerDestroyEnumHandle0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmSubLayerGetSecurityInfoByKey0(
    engineHandle: HANDLE,
    key: ?*Guid,
    securityInfo: u32,
    sidOwner: ?*?*opaque{},
    sidGroup: ?*?*opaque{},
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmSubLayerSetSecurityInfoByKey0(
    engineHandle: HANDLE,
    key: ?*Guid,
    securityInfo: u32,
    sidOwner: ?*SID,
    sidGroup: ?*SID,
    dacl: ?*ACL,
    sacl: ?*ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmSubLayerSubscribeChanges0(
    engineHandle: HANDLE,
    subscription: ?*FWPM_SUBLAYER_SUBSCRIPTION0,
    callback: FWPM_SUBLAYER_CHANGE_CALLBACK0,
    context: ?*opaque{},
    changeHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmSubLayerUnsubscribeChanges0(
    engineHandle: HANDLE,
    changeHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmSubLayerSubscriptionsGet0(
    engineHandle: HANDLE,
    entries: ?*?*?*FWPM_SUBLAYER_SUBSCRIPTION0,
    numEntries: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmLayerGetById0(
    engineHandle: HANDLE,
    id: u16,
    layer: ?*?*FWPM_LAYER0,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmLayerGetByKey0(
    engineHandle: HANDLE,
    key: ?*Guid,
    layer: ?*?*FWPM_LAYER0,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmLayerCreateEnumHandle0(
    engineHandle: HANDLE,
    enumTemplate: ?*FWPM_LAYER_ENUM_TEMPLATE0,
    enumHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmLayerEnum0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_LAYER0,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmLayerDestroyEnumHandle0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmLayerGetSecurityInfoByKey0(
    engineHandle: HANDLE,
    key: ?*Guid,
    securityInfo: u32,
    sidOwner: ?*?*opaque{},
    sidGroup: ?*?*opaque{},
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmLayerSetSecurityInfoByKey0(
    engineHandle: HANDLE,
    key: ?*Guid,
    securityInfo: u32,
    sidOwner: ?*SID,
    sidGroup: ?*SID,
    dacl: ?*ACL,
    sacl: ?*ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmCalloutAdd0(
    engineHandle: HANDLE,
    callout: ?*FWPM_CALLOUT0,
    sd: ?*opaque{},
    id: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmCalloutDeleteById0(
    engineHandle: HANDLE,
    id: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmCalloutDeleteByKey0(
    engineHandle: HANDLE,
    key: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmCalloutGetById0(
    engineHandle: HANDLE,
    id: u32,
    callout: ?*?*FWPM_CALLOUT0,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmCalloutGetByKey0(
    engineHandle: HANDLE,
    key: ?*Guid,
    callout: ?*?*FWPM_CALLOUT0,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmCalloutCreateEnumHandle0(
    engineHandle: HANDLE,
    enumTemplate: ?*FWPM_CALLOUT_ENUM_TEMPLATE0,
    enumHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmCalloutEnum0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_CALLOUT0,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmCalloutDestroyEnumHandle0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmCalloutGetSecurityInfoByKey0(
    engineHandle: HANDLE,
    key: ?*Guid,
    securityInfo: u32,
    sidOwner: ?*?*opaque{},
    sidGroup: ?*?*opaque{},
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmCalloutSetSecurityInfoByKey0(
    engineHandle: HANDLE,
    key: ?*Guid,
    securityInfo: u32,
    sidOwner: ?*SID,
    sidGroup: ?*SID,
    dacl: ?*ACL,
    sacl: ?*ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmCalloutSubscribeChanges0(
    engineHandle: HANDLE,
    subscription: ?*FWPM_CALLOUT_SUBSCRIPTION0,
    callback: FWPM_CALLOUT_CHANGE_CALLBACK0,
    context: ?*opaque{},
    changeHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmCalloutUnsubscribeChanges0(
    engineHandle: HANDLE,
    changeHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmCalloutSubscriptionsGet0(
    engineHandle: HANDLE,
    entries: ?*?*?*FWPM_CALLOUT_SUBSCRIPTION0,
    numEntries: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmFilterAdd0(
    engineHandle: HANDLE,
    filter: ?*FWPM_FILTER0,
    sd: ?*opaque{},
    id: ?*u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmFilterDeleteById0(
    engineHandle: HANDLE,
    id: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmFilterDeleteByKey0(
    engineHandle: HANDLE,
    key: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmFilterGetById0(
    engineHandle: HANDLE,
    id: u64,
    filter: ?*?*FWPM_FILTER0,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmFilterGetByKey0(
    engineHandle: HANDLE,
    key: ?*Guid,
    filter: ?*?*FWPM_FILTER0,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmFilterCreateEnumHandle0(
    engineHandle: HANDLE,
    enumTemplate: ?*FWPM_FILTER_ENUM_TEMPLATE0,
    enumHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmFilterEnum0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_FILTER0,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmFilterDestroyEnumHandle0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmFilterGetSecurityInfoByKey0(
    engineHandle: HANDLE,
    key: ?*Guid,
    securityInfo: u32,
    sidOwner: ?*?*opaque{},
    sidGroup: ?*?*opaque{},
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmFilterSetSecurityInfoByKey0(
    engineHandle: HANDLE,
    key: ?*Guid,
    securityInfo: u32,
    sidOwner: ?*SID,
    sidGroup: ?*SID,
    dacl: ?*ACL,
    sacl: ?*ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmFilterSubscribeChanges0(
    engineHandle: HANDLE,
    subscription: ?*FWPM_FILTER_SUBSCRIPTION0,
    callback: FWPM_FILTER_CHANGE_CALLBACK0,
    context: ?*opaque{},
    changeHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmFilterUnsubscribeChanges0(
    engineHandle: HANDLE,
    changeHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmFilterSubscriptionsGet0(
    engineHandle: HANDLE,
    entries: ?*?*?*FWPM_FILTER_SUBSCRIPTION0,
    numEntries: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmGetAppIdFromFileName0(
    fileName: ?*u16,
    appId: ?*?*FWP_BYTE_BLOB,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmBitmapIndexGet0(
    engineHandle: HANDLE,
    fieldId: ?*Guid,
    idx: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmBitmapIndexFree0(
    engineHandle: HANDLE,
    fieldId: ?*Guid,
    idx: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmIPsecTunnelAdd0(
    engineHandle: HANDLE,
    flags: u32,
    mainModePolicy: ?*FWPM_PROVIDER_CONTEXT0,
    tunnelPolicy: ?*FWPM_PROVIDER_CONTEXT0,
    numFilterConditions: u32,
    filterConditions: ?*FWPM_FILTER_CONDITION0,
    sd: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmIPsecTunnelAdd1(
    engineHandle: HANDLE,
    flags: u32,
    mainModePolicy: ?*FWPM_PROVIDER_CONTEXT1,
    tunnelPolicy: ?*FWPM_PROVIDER_CONTEXT1,
    numFilterConditions: u32,
    filterConditions: ?*FWPM_FILTER_CONDITION0,
    keyModKey: ?*Guid,
    sd: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmIPsecTunnelAdd2(
    engineHandle: HANDLE,
    flags: u32,
    mainModePolicy: ?*FWPM_PROVIDER_CONTEXT2,
    tunnelPolicy: ?*FWPM_PROVIDER_CONTEXT2,
    numFilterConditions: u32,
    filterConditions: ?*FWPM_FILTER_CONDITION0,
    keyModKey: ?*Guid,
    sd: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmIPsecTunnelAdd3(
    engineHandle: HANDLE,
    flags: u32,
    mainModePolicy: ?*FWPM_PROVIDER_CONTEXT3_,
    tunnelPolicy: ?*FWPM_PROVIDER_CONTEXT3_,
    numFilterConditions: u32,
    filterConditions: ?*FWPM_FILTER_CONDITION0,
    keyModKey: ?*Guid,
    sd: ?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmIPsecTunnelDeleteByKey0(
    engineHandle: HANDLE,
    key: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecGetStatistics0(
    engineHandle: HANDLE,
    ipsecStatistics: ?*IPSEC_STATISTICS0,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecGetStatistics1(
    engineHandle: HANDLE,
    ipsecStatistics: ?*IPSEC_STATISTICS1,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecSaContextCreate0(
    engineHandle: HANDLE,
    outboundTraffic: ?*IPSEC_TRAFFIC0,
    inboundFilterId: ?*u64,
    id: ?*u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecSaContextCreate1(
    engineHandle: HANDLE,
    outboundTraffic: ?*IPSEC_TRAFFIC1,
    virtualIfTunnelInfo: ?*IPSEC_VIRTUAL_IF_TUNNEL_INFO0,
    inboundFilterId: ?*u64,
    id: ?*u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecSaContextDeleteById0(
    engineHandle: HANDLE,
    id: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecSaContextGetById0(
    engineHandle: HANDLE,
    id: u64,
    saContext: ?*?*IPSEC_SA_CONTEXT0,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecSaContextGetById1(
    engineHandle: HANDLE,
    id: u64,
    saContext: ?*?*IPSEC_SA_CONTEXT1,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecSaContextGetSpi0(
    engineHandle: HANDLE,
    id: u64,
    getSpi: ?*IPSEC_GETSPI0,
    inboundSpi: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecSaContextGetSpi1(
    engineHandle: HANDLE,
    id: u64,
    getSpi: ?*IPSEC_GETSPI1,
    inboundSpi: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecSaContextSetSpi0(
    engineHandle: HANDLE,
    id: u64,
    getSpi: ?*IPSEC_GETSPI1,
    inboundSpi: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecSaContextAddInbound0(
    engineHandle: HANDLE,
    id: u64,
    inboundBundle: ?*IPSEC_SA_BUNDLE0,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecSaContextAddOutbound0(
    engineHandle: HANDLE,
    id: u64,
    outboundBundle: ?*IPSEC_SA_BUNDLE0,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecSaContextAddInbound1(
    engineHandle: HANDLE,
    id: u64,
    inboundBundle: ?*IPSEC_SA_BUNDLE1,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecSaContextAddOutbound1(
    engineHandle: HANDLE,
    id: u64,
    outboundBundle: ?*IPSEC_SA_BUNDLE1,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecSaContextExpire0(
    engineHandle: HANDLE,
    id: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecSaContextUpdate0(
    engineHandle: HANDLE,
    flags: u64,
    newValues: ?*IPSEC_SA_CONTEXT1,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecSaContextCreateEnumHandle0(
    engineHandle: HANDLE,
    enumTemplate: ?*IPSEC_SA_CONTEXT_ENUM_TEMPLATE0,
    enumHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecSaContextEnum0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*IPSEC_SA_CONTEXT0,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecSaContextEnum1(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*IPSEC_SA_CONTEXT1,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecSaContextDestroyEnumHandle0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecSaContextSubscribe0(
    engineHandle: HANDLE,
    subscription: ?*IPSEC_SA_CONTEXT_SUBSCRIPTION0,
    callback: IPSEC_SA_CONTEXT_CALLBACK0,
    context: ?*opaque{},
    eventsHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecSaContextUnsubscribe0(
    engineHandle: HANDLE,
    eventsHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecSaContextSubscriptionsGet0(
    engineHandle: HANDLE,
    entries: ?*?*?*IPSEC_SA_CONTEXT_SUBSCRIPTION0,
    numEntries: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecSaCreateEnumHandle0(
    engineHandle: HANDLE,
    enumTemplate: ?*IPSEC_SA_ENUM_TEMPLATE0,
    enumHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecSaEnum0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*IPSEC_SA_DETAILS0,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecSaEnum1(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*IPSEC_SA_DETAILS1,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecSaDestroyEnumHandle0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecSaDbGetSecurityInfo0(
    engineHandle: HANDLE,
    securityInfo: u32,
    sidOwner: ?*?*opaque{},
    sidGroup: ?*?*opaque{},
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecSaDbSetSecurityInfo0(
    engineHandle: HANDLE,
    securityInfo: u32,
    sidOwner: ?*SID,
    sidGroup: ?*SID,
    dacl: ?*ACL,
    sacl: ?*ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecDospGetStatistics0(
    engineHandle: HANDLE,
    idpStatistics: ?*IPSEC_DOSP_STATISTICS0,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecDospStateCreateEnumHandle0(
    engineHandle: HANDLE,
    enumTemplate: ?*IPSEC_DOSP_STATE_ENUM_TEMPLATE0,
    enumHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecDospStateEnum0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*IPSEC_DOSP_STATE0,
    numEntries: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecDospStateDestroyEnumHandle0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecDospGetSecurityInfo0(
    engineHandle: HANDLE,
    securityInfo: u32,
    sidOwner: ?*?*opaque{},
    sidGroup: ?*?*opaque{},
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecDospSetSecurityInfo0(
    engineHandle: HANDLE,
    securityInfo: u32,
    sidOwner: ?*SID,
    sidGroup: ?*SID,
    dacl: ?*ACL,
    sacl: ?*ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecKeyManagerAddAndRegister0(
    engineHandle: HANDLE,
    keyManager: ?*IPSEC_KEY_MANAGER0,
    keyManagerCallbacks: ?*IPSEC_KEY_MANAGER_CALLBACKS0,
    keyMgmtHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecKeyManagerUnregisterAndDelete0(
    engineHandle: HANDLE,
    keyMgmtHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecKeyManagersGet0(
    engineHandle: HANDLE,
    entries: ?*?*?*IPSEC_KEY_MANAGER0,
    numEntries: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecKeyManagerGetSecurityInfoByKey0(
    engineHandle: HANDLE,
    reserved: ?*opaque{},
    securityInfo: u32,
    sidOwner: ?*?*opaque{},
    sidGroup: ?*?*opaque{},
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IPsecKeyManagerSetSecurityInfoByKey0(
    engineHandle: HANDLE,
    reserved: ?*opaque{},
    securityInfo: u32,
    sidOwner: ?*SID,
    sidGroup: ?*SID,
    dacl: ?*ACL,
    sacl: ?*ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IkeextGetStatistics0(
    engineHandle: HANDLE,
    ikeextStatistics: ?*IKEEXT_STATISTICS0,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IkeextGetStatistics1(
    engineHandle: HANDLE,
    ikeextStatistics: ?*IKEEXT_STATISTICS1,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IkeextSaDeleteById0(
    engineHandle: HANDLE,
    id: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IkeextSaGetById0(
    engineHandle: HANDLE,
    id: u64,
    sa: ?*?*IKEEXT_SA_DETAILS0,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IkeextSaGetById1(
    engineHandle: HANDLE,
    id: u64,
    saLookupContext: ?*Guid,
    sa: ?*?*IKEEXT_SA_DETAILS1,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IkeextSaGetById2(
    engineHandle: HANDLE,
    id: u64,
    saLookupContext: ?*Guid,
    sa: ?*?*IKEEXT_SA_DETAILS2,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IkeextSaCreateEnumHandle0(
    engineHandle: HANDLE,
    enumTemplate: ?*IKEEXT_SA_ENUM_TEMPLATE0,
    enumHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IkeextSaEnum0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*IKEEXT_SA_DETAILS0,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IkeextSaEnum1(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*IKEEXT_SA_DETAILS1,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IkeextSaEnum2(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*IKEEXT_SA_DETAILS2,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IkeextSaDestroyEnumHandle0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IkeextSaDbGetSecurityInfo0(
    engineHandle: HANDLE,
    securityInfo: u32,
    sidOwner: ?*?*opaque{},
    sidGroup: ?*?*opaque{},
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn IkeextSaDbSetSecurityInfo0(
    engineHandle: HANDLE,
    securityInfo: u32,
    sidOwner: ?*SID,
    sidGroup: ?*SID,
    dacl: ?*ACL,
    sacl: ?*ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmNetEventCreateEnumHandle0(
    engineHandle: HANDLE,
    enumTemplate: ?*FWPM_NET_EVENT_ENUM_TEMPLATE0,
    enumHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmNetEventEnum0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_NET_EVENT0,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmNetEventEnum1(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_NET_EVENT1,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmNetEventEnum2(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_NET_EVENT2,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmNetEventEnum3(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_NET_EVENT3,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmNetEventEnum4(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_NET_EVENT4_,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmNetEventEnum5(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_NET_EVENT5_,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmNetEventDestroyEnumHandle0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmNetEventsGetSecurityInfo0(
    engineHandle: HANDLE,
    securityInfo: u32,
    sidOwner: ?*?*opaque{},
    sidGroup: ?*?*opaque{},
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmNetEventsSetSecurityInfo0(
    engineHandle: HANDLE,
    securityInfo: u32,
    sidOwner: ?*SID,
    sidGroup: ?*SID,
    dacl: ?*ACL,
    sacl: ?*ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmNetEventSubscribe0(
    engineHandle: HANDLE,
    subscription: ?*FWPM_NET_EVENT_SUBSCRIPTION0,
    callback: FWPM_NET_EVENT_CALLBACK0,
    context: ?*opaque{},
    eventsHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmNetEventUnsubscribe0(
    engineHandle: HANDLE,
    eventsHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmNetEventSubscriptionsGet0(
    engineHandle: HANDLE,
    entries: ?*?*?*FWPM_NET_EVENT_SUBSCRIPTION0,
    numEntries: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmNetEventSubscribe1(
    engineHandle: HANDLE,
    subscription: ?*FWPM_NET_EVENT_SUBSCRIPTION0,
    callback: FWPM_NET_EVENT_CALLBACK1,
    context: ?*opaque{},
    eventsHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmNetEventSubscribe2(
    engineHandle: HANDLE,
    subscription: ?*FWPM_NET_EVENT_SUBSCRIPTION0,
    callback: FWPM_NET_EVENT_CALLBACK2,
    context: ?*opaque{},
    eventsHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmNetEventSubscribe3(
    engineHandle: HANDLE,
    subscription: ?*FWPM_NET_EVENT_SUBSCRIPTION0,
    callback: FWPM_NET_EVENT_CALLBACK3,
    context: ?*opaque{},
    eventsHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmNetEventSubscribe4(
    engineHandle: HANDLE,
    subscription: ?*FWPM_NET_EVENT_SUBSCRIPTION0,
    callback: FWPM_NET_EVENT_CALLBACK4,
    context: ?*opaque{},
    eventsHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmSystemPortsGet0(
    engineHandle: HANDLE,
    sysPorts: ?*?*FWPM_SYSTEM_PORTS0,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmSystemPortsSubscribe0(
    engineHandle: HANDLE,
    reserved: ?*opaque{},
    callback: FWPM_SYSTEM_PORTS_CALLBACK0,
    context: ?*opaque{},
    sysPortsHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmSystemPortsUnsubscribe0(
    engineHandle: HANDLE,
    sysPortsHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmConnectionGetById0(
    engineHandle: HANDLE,
    id: u64,
    connection: ?*?*FWPM_CONNECTION0,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmConnectionEnum0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_CONNECTION0,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmConnectionCreateEnumHandle0(
    engineHandle: HANDLE,
    enumTemplate: ?*FWPM_CONNECTION_ENUM_TEMPLATE0,
    enumHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmConnectionDestroyEnumHandle0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmConnectionGetSecurityInfo0(
    engineHandle: HANDLE,
    securityInfo: u32,
    sidOwner: ?*?*opaque{},
    sidGroup: ?*?*opaque{},
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmConnectionSetSecurityInfo0(
    engineHandle: HANDLE,
    securityInfo: u32,
    sidOwner: ?*SID,
    sidGroup: ?*SID,
    dacl: ?*ACL,
    sacl: ?*ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmConnectionSubscribe0(
    engineHandle: HANDLE,
    subscription: ?*FWPM_CONNECTION_SUBSCRIPTION0,
    callback: FWPM_CONNECTION_CALLBACK0,
    context: ?*opaque{},
    eventsHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmConnectionUnsubscribe0(
    engineHandle: HANDLE,
    eventsHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmvSwitchEventSubscribe0(
    engineHandle: HANDLE,
    subscription: ?*FWPM_VSWITCH_EVENT_SUBSCRIPTION0,
    callback: FWPM_VSWITCH_EVENT_CALLBACK0,
    context: ?*opaque{},
    subscriptionHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmvSwitchEventUnsubscribe0(
    engineHandle: HANDLE,
    subscriptionHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmvSwitchEventsGetSecurityInfo0(
    engineHandle: HANDLE,
    securityInfo: u32,
    sidOwner: ?*?*opaque{},
    sidGroup: ?*?*opaque{},
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: ?*?*opaque{},
) callconv(@import("std").os.windows.WINAPI) u32;

// set_last_errror=False (can and should we use this?)
pub extern "fwpuclnt" fn FwpmvSwitchEventsSetSecurityInfo0(
    engineHandle: HANDLE,
    securityInfo: u32,
    sidOwner: ?*SID,
    sidGroup: ?*SID,
    dacl: ?*ACL,
    sacl: ?*ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

//
// Unicode Symbol Aliases
//
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    else => if (@import("builtin").is_test) struct {
    } else struct {
    },
};

//
// type imports
//
const Guid = @import("../zig.zig").Guid;
const SID_AND_ATTRIBUTES = @import("security.zig").SID_AND_ATTRIBUTES;
const SID = @import("security.zig").SID;
const BOOL = @import("systemservices.zig").BOOL;
const FILETIME = @import("windowsprogramming.zig").FILETIME;
const in_addr = @import("winsock.zig").in_addr;
const in6_addr = @import("winsock.zig").in6_addr;
const COMPARTMENT_ID = @import("kernel.zig").COMPARTMENT_ID;
const SCOPE_ID = @import("winsock.zig").SCOPE_ID;
const SEC_WINNT_AUTH_IDENTITY_W = @import("security.zig").SEC_WINNT_AUTH_IDENTITY_W;
const HANDLE = @import("systemservices.zig").HANDLE;
const ACL = @import("security.zig").ACL;

test "" {
    const constant_export_count = 0;
    const type_export_count = 333;
    const func_count = 186;
    const unicode_alias_count = 0;
    const type_import_count = 12;
    @setEvalBranchQuota(0
        + constant_export_count
        + type_export_count
        + func_count
        + unicode_alias_count
        + type_import_count
        + 2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
