{
"constants": [
     {
         "name": "ClfsNullRecord"
        ,"type": {"kind":"Byte"}
        ,"value": 0
    }
    ,{
         "name": "ClfsDataRecord"
        ,"type": {"kind":"Byte"}
        ,"value": 1
    }
    ,{
         "name": "ClfsRestartRecord"
        ,"type": {"kind":"Byte"}
        ,"value": 2
    }
    ,{
         "name": "ClfsClientRecord"
        ,"type": {"kind":"Byte"}
        ,"value": 3
    }
    ,{
         "name": "ClsContainerInitializing"
        ,"type": {"kind":"UInt32"}
        ,"value": 1
    }
    ,{
         "name": "ClsContainerInactive"
        ,"type": {"kind":"UInt32"}
        ,"value": 2
    }
    ,{
         "name": "ClsContainerActive"
        ,"type": {"kind":"UInt32"}
        ,"value": 4
    }
    ,{
         "name": "ClsContainerActivePendingDelete"
        ,"type": {"kind":"UInt32"}
        ,"value": 8
    }
    ,{
         "name": "ClsContainerPendingArchive"
        ,"type": {"kind":"UInt32"}
        ,"value": 16
    }
    ,{
         "name": "ClsContainerPendingArchiveAndDelete"
        ,"type": {"kind":"UInt32"}
        ,"value": 32
    }
    ,{
         "name": "ClfsContainerInitializing"
        ,"type": {"kind":"UInt32"}
        ,"value": 1
    }
    ,{
         "name": "ClfsContainerInactive"
        ,"type": {"kind":"UInt32"}
        ,"value": 2
    }
    ,{
         "name": "ClfsContainerActive"
        ,"type": {"kind":"UInt32"}
        ,"value": 4
    }
    ,{
         "name": "ClfsContainerActivePendingDelete"
        ,"type": {"kind":"UInt32"}
        ,"value": 8
    }
    ,{
         "name": "ClfsContainerPendingArchive"
        ,"type": {"kind":"UInt32"}
        ,"value": 16
    }
    ,{
         "name": "ClfsContainerPendingArchiveAndDelete"
        ,"type": {"kind":"UInt32"}
        ,"value": 32
    }
    ,{
         "name": "CLFS_MAX_CONTAINER_INFO"
        ,"type": {"kind":"UInt32"}
        ,"value": 256
    }
    ,{
         "name": "CLFS_SCAN_INIT"
        ,"type": {"kind":"Byte"}
        ,"value": 1
    }
    ,{
         "name": "CLFS_SCAN_FORWARD"
        ,"type": {"kind":"Byte"}
        ,"value": 2
    }
    ,{
         "name": "CLFS_SCAN_BACKWARD"
        ,"type": {"kind":"Byte"}
        ,"value": 4
    }
    ,{
         "name": "CLFS_SCAN_CLOSE"
        ,"type": {"kind":"Byte"}
        ,"value": 8
    }
    ,{
         "name": "CLFS_SCAN_INITIALIZED"
        ,"type": {"kind":"Byte"}
        ,"value": 16
    }
    ,{
         "name": "CLFS_SCAN_BUFFERED"
        ,"type": {"kind":"Byte"}
        ,"value": 32
    }
],

"types_definitions": [
// --------------------------------------------------------
// Type: FIND_FIRST_EX_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FIND_FIRST_EX_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: FILE_NOTIFY_CHANGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FILE_NOTIFY_CHANGE = *opaque{
};
// --------------------------------------------------------
// Type: DEFINE_DOS_DEVICE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DEFINE_DOS_DEVICE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: FILE_CREATE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FILE_CREATE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: FILE_SHARE_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FILE_SHARE_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: FILE_FLAGS_AND_ATTRIBUTES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FILE_FLAGS_AND_ATTRIBUTES = *opaque{
};
// --------------------------------------------------------
// Type: FILE_ACCESS_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FILE_ACCESS_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: FindChangeNotifcationHandle
// TypeLayoutAttr: sequential
// RAIIFree 'FindCloseChangeNotification' (TODO: can we use this information?)
pub const FindChangeNotifcationHandle = {"kind":"IntPtr"};
// --------------------------------------------------------
// Type: FindFileHandle
// TypeLayoutAttr: sequential
// RAIIFree 'FindClose' (TODO: can we use this information?)
pub const FindFileHandle = {"kind":"IntPtr"};
// --------------------------------------------------------
// Type: FindFileNameHandle
// TypeLayoutAttr: sequential
// RAIIFree 'FindClose' (TODO: can we use this information?)
pub const FindFileNameHandle = {"kind":"IntPtr"};
// --------------------------------------------------------
// Type: FindStreamHandle
// TypeLayoutAttr: sequential
// RAIIFree 'FindClose' (TODO: can we use this information?)
pub const FindStreamHandle = {"kind":"IntPtr"};
// --------------------------------------------------------
// Type: FindVolumeHandle
// TypeLayoutAttr: sequential
// RAIIFree 'FindVolumeClose' (TODO: can we use this information?)
pub const FindVolumeHandle = {"kind":"IntPtr"};
// --------------------------------------------------------
// Type: FindVolumeMointPointHandle
// TypeLayoutAttr: sequential
// RAIIFree 'FindVolumeMountPointClose' (TODO: can we use this information?)
pub const FindVolumeMointPointHandle = {"kind":"IntPtr"};
// --------------------------------------------------------
// Type: FILE_ID_128
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_ID_128 = extern struct {
    Identifier: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: FILE_NOTIFY_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_NOTIFY_INFORMATION = extern struct {
    NextEntryOffset: {"kind":"UInt32"},
    Action: {"kind":"UInt32"},
    FileNameLength: {"kind":"UInt32"},
    FileName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: FILE_NOTIFY_EXTENDED_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_NOTIFY_EXTENDED_INFORMATION = extern struct {
    NextEntryOffset: {"kind":"UInt32"},
    Action: {"kind":"UInt32"},
    CreationTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    LastModificationTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    LastChangeTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    LastAccessTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    AllocatedLength: Windows.Win32.SystemServices.LARGE_INTEGER,
    FileSize: Windows.Win32.SystemServices.LARGE_INTEGER,
    FileAttributes: {"kind":"UInt32"},
    ReparsePointTag: {"kind":"UInt32"},
    FileId: Windows.Win32.SystemServices.LARGE_INTEGER,
    ParentFileId: Windows.Win32.SystemServices.LARGE_INTEGER,
    FileNameLength: {"kind":"UInt32"},
    FileName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: REPARSE_GUID_DATA_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REPARSE_GUID_DATA_BUFFER = extern struct {
    ReparseTag: {"kind":"UInt32"},
    ReparseDataLength: {"kind":"UInt16"},
    Reserved: {"kind":"UInt16"},
    ReparseGuid: Guid,
    GenericReparseBuffer: Windows.Win32.FileSystem.REPARSE_GUID_DATA_BUFFER+_GenericReparseBuffer_e__Struct,
    // --------------------------------------------------------
    // Type: _GenericReparseBuffer_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _GenericReparseBuffer_e__Struct = extern struct {
        DataBuffer: {"kind":"Array","child": {"kind":"Byte"}},
    };
};
// --------------------------------------------------------
// Type: TRANSACTION_OUTCOME
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TRANSACTION_OUTCOME = *opaque{
};
// --------------------------------------------------------
// Type: OVERLAPPED_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OVERLAPPED_ENTRY = extern struct {
    lpCompletionKey: {"kind":"UIntPtr"},
    lpOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},
    Internal: {"kind":"UIntPtr"},
    dwNumberOfBytesTransferred: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: WIN32_FIND_DATAA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WIN32_FIND_DATAA = extern struct {
    dwFileAttributes: {"kind":"UInt32"},
    ftCreationTime: Windows.Win32.WindowsProgramming.FILETIME,
    ftLastAccessTime: Windows.Win32.WindowsProgramming.FILETIME,
    ftLastWriteTime: Windows.Win32.WindowsProgramming.FILETIME,
    nFileSizeHigh: {"kind":"UInt32"},
    nFileSizeLow: {"kind":"UInt32"},
    dwReserved0: {"kind":"UInt32"},
    dwReserved1: {"kind":"UInt32"},
    cFileName: {"kind":"Array","child": {"kind":"SByte"}},
    cAlternateFileName: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: WIN32_FIND_DATAW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WIN32_FIND_DATAW = extern struct {
    dwFileAttributes: {"kind":"UInt32"},
    ftCreationTime: Windows.Win32.WindowsProgramming.FILETIME,
    ftLastAccessTime: Windows.Win32.WindowsProgramming.FILETIME,
    ftLastWriteTime: Windows.Win32.WindowsProgramming.FILETIME,
    nFileSizeHigh: {"kind":"UInt32"},
    nFileSizeLow: {"kind":"UInt32"},
    dwReserved0: {"kind":"UInt32"},
    dwReserved1: {"kind":"UInt32"},
    cFileName: {"kind":"Array","child": {"kind":"UInt16"}},
    cAlternateFileName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: FINDEX_INFO_LEVELS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FINDEX_INFO_LEVELS = *opaque{
};
// --------------------------------------------------------
// Type: FINDEX_SEARCH_OPS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FINDEX_SEARCH_OPS = *opaque{
};
// --------------------------------------------------------
// Type: READ_DIRECTORY_NOTIFY_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const READ_DIRECTORY_NOTIFY_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: GET_FILEEX_INFO_LEVELS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const GET_FILEEX_INFO_LEVELS = *opaque{
};
// --------------------------------------------------------
// Type: FILE_INFO_BY_HANDLE_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FILE_INFO_BY_HANDLE_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: LPOVERLAPPED_COMPLETION_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPOVERLAPPED_COMPLETION_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: STORAGE_QUERY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_QUERY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_PROPERTY_ID
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_PROPERTY_ID = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_PROPERTY_QUERY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_PROPERTY_QUERY = extern struct {
    PropertyId: Windows.Win32.FileSystem.STORAGE_PROPERTY_ID,
    QueryType: Windows.Win32.FileSystem.STORAGE_QUERY_TYPE,
    AdditionalParameters: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: STORAGE_DESCRIPTOR_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_DESCRIPTOR_HEADER = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STORAGE_DEVICE_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_DEVICE_DESCRIPTOR = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    DeviceType: {"kind":"Byte"},
    DeviceTypeModifier: {"kind":"Byte"},
    RemovableMedia: {"kind":"Byte"},
    CommandQueueing: {"kind":"Byte"},
    VendorIdOffset: {"kind":"UInt32"},
    ProductIdOffset: {"kind":"UInt32"},
    ProductRevisionOffset: {"kind":"UInt32"},
    SerialNumberOffset: {"kind":"UInt32"},
    BusType: Windows.Win32.SystemServices.STORAGE_BUS_TYPE,
    RawPropertiesLength: {"kind":"UInt32"},
    RawDeviceProperties: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: STORAGE_ADAPTER_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_ADAPTER_DESCRIPTOR = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    MaximumTransferLength: {"kind":"UInt32"},
    MaximumPhysicalPages: {"kind":"UInt32"},
    AlignmentMask: {"kind":"UInt32"},
    AdapterUsesPio: {"kind":"Byte"},
    AdapterScansDown: {"kind":"Byte"},
    CommandQueueing: {"kind":"Byte"},
    AcceleratedTransfer: {"kind":"Byte"},
    BusType: {"kind":"Byte"},
    BusMajorVersion: {"kind":"UInt16"},
    BusMinorVersion: {"kind":"UInt16"},
    SrbType: {"kind":"Byte"},
    AddressType: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    BytesPerCacheLine: {"kind":"UInt32"},
    BytesOffsetForCacheAlignment: {"kind":"UInt32"},
    BytesPerLogicalSector: {"kind":"UInt32"},
    BytesPerPhysicalSector: {"kind":"UInt32"},
    BytesOffsetForSectorAlignment: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    MediumProductType: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STORAGE_PORT_CODE_SET
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_PORT_CODE_SET = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_MINIPORT_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_MINIPORT_DESCRIPTOR = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Portdriver: Windows.Win32.FileSystem.STORAGE_PORT_CODE_SET,
    LUNResetSupported: {"kind":"Byte"},
    TargetResetSupported: {"kind":"Byte"},
    IoTimeoutValue: {"kind":"UInt16"},
    ExtraIoInfoSupported: {"kind":"Byte"},
    Reserved0: {"kind":"Array","child": {"kind":"Byte"}},
    Reserved1: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STORAGE_DEVICE_ID_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_DEVICE_ID_DESCRIPTOR = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    NumberOfIdentifiers: {"kind":"UInt32"},
    Identifiers: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: DEVICE_SEEK_PENALTY_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_SEEK_PENALTY_DESCRIPTOR = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    IncursSeekPenalty: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: DEVICE_WRITE_AGGREGATION_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_WRITE_AGGREGATION_DESCRIPTOR = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    BenefitsFromWriteAggregation: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: DEVICE_TRIM_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_TRIM_DESCRIPTOR = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    TrimEnabled: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: DEVICE_LB_PROVISIONING_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_LB_PROVISIONING_DESCRIPTOR = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    _bitfield: {"kind":"Byte"},
    Reserved1: {"kind":"Array","child": {"kind":"Byte"}},
    OptimalUnmapGranularity: {"kind":"UInt64"},
    UnmapGranularityAlignment: {"kind":"UInt64"},
    MaxUnmapLbaCount: {"kind":"UInt32"},
    MaxUnmapBlockDescriptorCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DEVICE_POWER_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_POWER_DESCRIPTOR = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    DeviceAttentionSupported: {"kind":"Byte"},
    AsynchronousNotificationSupported: {"kind":"Byte"},
    IdlePowerManagementEnabled: {"kind":"Byte"},
    D3ColdEnabled: {"kind":"Byte"},
    D3ColdSupported: {"kind":"Byte"},
    NoVerifyDuringIdlePower: {"kind":"Byte"},
    Reserved: {"kind":"Array","child": {"kind":"Byte"}},
    IdleTimeoutInMS: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DEVICE_COPY_OFFLOAD_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DEVICE_COPY_OFFLOAD_DESCRIPTOR = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    MaximumTokenLifetime: {"kind":"UInt32"},
    DefaultTokenLifetime: {"kind":"UInt32"},
    MaximumTransferSize: {"kind":"UInt64"},
    OptimalTransferCount: {"kind":"UInt64"},
    MaximumDataDescriptors: {"kind":"UInt32"},
    MaximumTransferLengthPerDescriptor: {"kind":"UInt32"},
    OptimalTransferLengthPerDescriptor: {"kind":"UInt32"},
    OptimalTransferLengthGranularity: {"kind":"UInt16"},
    Reserved: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: STORAGE_DEVICE_RESILIENCY_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_DEVICE_RESILIENCY_DESCRIPTOR = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    NameOffset: {"kind":"UInt32"},
    NumberOfLogicalCopies: {"kind":"UInt32"},
    NumberOfPhysicalCopies: {"kind":"UInt32"},
    PhysicalDiskRedundancy: {"kind":"UInt32"},
    NumberOfColumns: {"kind":"UInt32"},
    Interleave: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STORAGE_PROTOCOL_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_PROTOCOL_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_PROTOCOL_NVME_DATA_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_PROTOCOL_NVME_DATA_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_PROTOCOL_ATA_DATA_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_PROTOCOL_ATA_DATA_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_PROTOCOL_SPECIFIC_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_PROTOCOL_SPECIFIC_DATA = extern struct {
    ProtocolType: Windows.Win32.FileSystem.STORAGE_PROTOCOL_TYPE,
    DataType: {"kind":"UInt32"},
    ProtocolDataRequestValue: {"kind":"UInt32"},
    ProtocolDataRequestSubValue: {"kind":"UInt32"},
    ProtocolDataOffset: {"kind":"UInt32"},
    ProtocolDataLength: {"kind":"UInt32"},
    FixedProtocolReturnData: {"kind":"UInt32"},
    ProtocolDataRequestSubValue2: {"kind":"UInt32"},
    ProtocolDataRequestSubValue3: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STORAGE_PROTOCOL_DATA_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_PROTOCOL_DATA_DESCRIPTOR = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    ProtocolSpecificData: Windows.Win32.FileSystem.STORAGE_PROTOCOL_SPECIFIC_DATA,
};
// --------------------------------------------------------
// Type: STORAGE_TEMPERATURE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_TEMPERATURE_INFO = extern struct {
    Index: {"kind":"UInt16"},
    Temperature: {"kind":"Int16"},
    OverThreshold: {"kind":"Int16"},
    UnderThreshold: {"kind":"Int16"},
    OverThresholdChangable: {"kind":"Byte"},
    UnderThresholdChangable: {"kind":"Byte"},
    EventGenerated: {"kind":"Byte"},
    Reserved0: {"kind":"Byte"},
    Reserved1: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STORAGE_TEMPERATURE_DATA_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_TEMPERATURE_DATA_DESCRIPTOR = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    CriticalTemperature: {"kind":"Int16"},
    WarningTemperature: {"kind":"Int16"},
    InfoCount: {"kind":"UInt16"},
    Reserved0: {"kind":"Array","child": {"kind":"Byte"}},
    Reserved1: {"kind":"Array","child": {"kind":"UInt32"}},
    TemperatureInfo: {"kind":"Array","child": Windows.Win32.FileSystem.STORAGE_TEMPERATURE_INFO},
};
// --------------------------------------------------------
// Type: STORAGE_TEMPERATURE_THRESHOLD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_TEMPERATURE_THRESHOLD = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Flags: {"kind":"UInt16"},
    Index: {"kind":"UInt16"},
    Threshold: {"kind":"Int16"},
    OverThreshold: {"kind":"Byte"},
    Reserved: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: STORAGE_DEVICE_FORM_FACTOR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_DEVICE_FORM_FACTOR = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_COMPONENT_HEALTH_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_COMPONENT_HEALTH_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_SPEC_VERSION
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const STORAGE_SPEC_VERSION = *opaque{
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        MinorVersion: Windows.Win32.FileSystem.STORAGE_SPEC_VERSION+_Anonymous_e__Struct+_MinorVersion_e__Union,
        MajorVersion: {"kind":"UInt16"},
        // --------------------------------------------------------
        // Type: _MinorVersion_e__Union
        // TypeLayoutAttr: explicit
        // not generating the actual code for this type because it has an explicit layout
        pub const _MinorVersion_e__Union = *opaque{
            // --------------------------------------------------------
            // Type: _Anonymous_e__Struct
            // TypeLayoutAttr: sequential
            // TODO: I think this is a struct, but not sure at this point, assuming it is for now
            pub const _Anonymous_e__Struct = extern struct {
                SubMinor: {"kind":"Byte"},
                Minor: {"kind":"Byte"},
            };
        };
    };
};
// --------------------------------------------------------
// Type: STORAGE_PHYSICAL_DEVICE_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_PHYSICAL_DEVICE_DATA = extern struct {
    DeviceId: {"kind":"UInt32"},
    Role: {"kind":"UInt32"},
    HealthStatus: Windows.Win32.FileSystem.STORAGE_COMPONENT_HEALTH_STATUS,
    CommandProtocol: Windows.Win32.FileSystem.STORAGE_PROTOCOL_TYPE,
    SpecVersion: Windows.Win32.FileSystem.STORAGE_SPEC_VERSION,
    FormFactor: Windows.Win32.FileSystem.STORAGE_DEVICE_FORM_FACTOR,
    Vendor: {"kind":"Array","child": {"kind":"Byte"}},
    Model: {"kind":"Array","child": {"kind":"Byte"}},
    FirmwareRevision: {"kind":"Array","child": {"kind":"Byte"}},
    Capacity: {"kind":"UInt64"},
    PhysicalLocation: {"kind":"Array","child": {"kind":"Byte"}},
    Reserved: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: STORAGE_PHYSICAL_ADAPTER_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_PHYSICAL_ADAPTER_DATA = extern struct {
    AdapterId: {"kind":"UInt32"},
    HealthStatus: Windows.Win32.FileSystem.STORAGE_COMPONENT_HEALTH_STATUS,
    CommandProtocol: Windows.Win32.FileSystem.STORAGE_PROTOCOL_TYPE,
    SpecVersion: Windows.Win32.FileSystem.STORAGE_SPEC_VERSION,
    Vendor: {"kind":"Array","child": {"kind":"Byte"}},
    Model: {"kind":"Array","child": {"kind":"Byte"}},
    FirmwareRevision: {"kind":"Array","child": {"kind":"Byte"}},
    PhysicalLocation: {"kind":"Array","child": {"kind":"Byte"}},
    ExpanderConnected: {"kind":"Byte"},
    Reserved0: {"kind":"Array","child": {"kind":"Byte"}},
    Reserved1: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: STORAGE_PHYSICAL_NODE_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_PHYSICAL_NODE_DATA = extern struct {
    NodeId: {"kind":"UInt32"},
    AdapterCount: {"kind":"UInt32"},
    AdapterDataLength: {"kind":"UInt32"},
    AdapterDataOffset: {"kind":"UInt32"},
    DeviceCount: {"kind":"UInt32"},
    DeviceDataLength: {"kind":"UInt32"},
    DeviceDataOffset: {"kind":"UInt32"},
    Reserved: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    NodeCount: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
    Node: {"kind":"Array","child": Windows.Win32.FileSystem.STORAGE_PHYSICAL_NODE_DATA},
};
// --------------------------------------------------------
// Type: STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    LunMaxIoCount: {"kind":"UInt32"},
    AdapterMaxIoCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Attributes: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: STORAGE_ADAPTER_SERIAL_NUMBER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_ADAPTER_SERIAL_NUMBER = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    SerialNumber: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: WRITE_CACHE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WRITE_CACHE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: WRITE_CACHE_ENABLE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WRITE_CACHE_ENABLE = *opaque{
};
// --------------------------------------------------------
// Type: WRITE_CACHE_CHANGE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WRITE_CACHE_CHANGE = *opaque{
};
// --------------------------------------------------------
// Type: WRITE_THROUGH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WRITE_THROUGH = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_WRITE_CACHE_PROPERTY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_WRITE_CACHE_PROPERTY = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    WriteCacheType: Windows.Win32.FileSystem.WRITE_CACHE_TYPE,
    WriteCacheEnabled: Windows.Win32.FileSystem.WRITE_CACHE_ENABLE,
    WriteCacheChangeable: Windows.Win32.FileSystem.WRITE_CACHE_CHANGE,
    WriteThroughSupported: Windows.Win32.FileSystem.WRITE_THROUGH,
    FlushCacheSupported: {"kind":"Byte"},
    UserDefinedPowerProtection: {"kind":"Byte"},
    NVCacheEnabled: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: STORAGE_DEVICE_POWER_CAP_UNITS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STORAGE_DEVICE_POWER_CAP_UNITS = *opaque{
};
// --------------------------------------------------------
// Type: STORAGE_DEVICE_POWER_CAP
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_DEVICE_POWER_CAP = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Units: Windows.Win32.FileSystem.STORAGE_DEVICE_POWER_CAP_UNITS,
    MaxPower: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: STORAGE_HW_FIRMWARE_DOWNLOAD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_HW_FIRMWARE_DOWNLOAD = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    Slot: {"kind":"Byte"},
    Reserved: {"kind":"Array","child": {"kind":"Byte"}},
    Offset: {"kind":"UInt64"},
    BufferSize: {"kind":"UInt64"},
    ImageBuffer: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: STORAGE_HW_FIRMWARE_ACTIVATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_HW_FIRMWARE_ACTIVATE = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    Slot: {"kind":"Byte"},
    Reserved0: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: STORAGE_PROTOCOL_COMMAND
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STORAGE_PROTOCOL_COMMAND = extern struct {
    Version: {"kind":"UInt32"},
    Length: {"kind":"UInt32"},
    ProtocolType: Windows.Win32.FileSystem.STORAGE_PROTOCOL_TYPE,
    Flags: {"kind":"UInt32"},
    ReturnStatus: {"kind":"UInt32"},
    ErrorCode: {"kind":"UInt32"},
    CommandLength: {"kind":"UInt32"},
    ErrorInfoLength: {"kind":"UInt32"},
    DataToDeviceTransferLength: {"kind":"UInt32"},
    DataFromDeviceTransferLength: {"kind":"UInt32"},
    TimeOutValue: {"kind":"UInt32"},
    ErrorInfoOffset: {"kind":"UInt32"},
    DataToDeviceBufferOffset: {"kind":"UInt32"},
    DataFromDeviceBufferOffset: {"kind":"UInt32"},
    CommandSpecific: {"kind":"UInt32"},
    Reserved0: {"kind":"UInt32"},
    FixedProtocolReturnData: {"kind":"UInt32"},
    Reserved1: {"kind":"Array","child": {"kind":"UInt32"}},
    Command: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: MEDIA_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MEDIA_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: FORMAT_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FORMAT_PARAMETERS = extern struct {
    MediaType: Windows.Win32.FileSystem.MEDIA_TYPE,
    StartCylinderNumber: {"kind":"UInt32"},
    EndCylinderNumber: {"kind":"UInt32"},
    StartHeadNumber: {"kind":"UInt32"},
    EndHeadNumber: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: FORMAT_EX_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FORMAT_EX_PARAMETERS = extern struct {
    MediaType: Windows.Win32.FileSystem.MEDIA_TYPE,
    StartCylinderNumber: {"kind":"UInt32"},
    EndCylinderNumber: {"kind":"UInt32"},
    StartHeadNumber: {"kind":"UInt32"},
    EndHeadNumber: {"kind":"UInt32"},
    FormatGapLength: {"kind":"UInt16"},
    SectorsPerTrack: {"kind":"UInt16"},
    SectorNumber: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: DISK_GEOMETRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISK_GEOMETRY = extern struct {
    Cylinders: Windows.Win32.SystemServices.LARGE_INTEGER,
    MediaType: Windows.Win32.FileSystem.MEDIA_TYPE,
    TracksPerCylinder: {"kind":"UInt32"},
    SectorsPerTrack: {"kind":"UInt32"},
    BytesPerSector: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: PARTITION_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PARTITION_INFORMATION = extern struct {
    StartingOffset: Windows.Win32.SystemServices.LARGE_INTEGER,
    PartitionLength: Windows.Win32.SystemServices.LARGE_INTEGER,
    HiddenSectors: {"kind":"UInt32"},
    PartitionNumber: {"kind":"UInt32"},
    PartitionType: {"kind":"Byte"},
    BootIndicator: {"kind":"Byte"},
    RecognizedPartition: {"kind":"Byte"},
    RewritePartition: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: SET_PARTITION_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SET_PARTITION_INFORMATION = extern struct {
    PartitionType: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: DRIVE_LAYOUT_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DRIVE_LAYOUT_INFORMATION = extern struct {
    PartitionCount: {"kind":"UInt32"},
    Signature: {"kind":"UInt32"},
    PartitionEntry: {"kind":"Array","child": Windows.Win32.FileSystem.PARTITION_INFORMATION},
};
// --------------------------------------------------------
// Type: VERIFY_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VERIFY_INFORMATION = extern struct {
    StartingOffset: Windows.Win32.SystemServices.LARGE_INTEGER,
    Length: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: REASSIGN_BLOCKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REASSIGN_BLOCKS = extern struct {
    Reserved: {"kind":"UInt16"},
    Count: {"kind":"UInt16"},
    BlockNumber: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: REASSIGN_BLOCKS_EX
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const REASSIGN_BLOCKS_EX = *opaque{
};
// --------------------------------------------------------
// Type: PARTITION_STYLE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PARTITION_STYLE = *opaque{
};
// --------------------------------------------------------
// Type: PARTITION_INFORMATION_GPT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PARTITION_INFORMATION_GPT = extern struct {
    PartitionType: Guid,
    PartitionId: Guid,
    Attributes: {"kind":"UInt64"},
    Name: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: PARTITION_INFORMATION_MBR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PARTITION_INFORMATION_MBR = extern struct {
    PartitionType: {"kind":"Byte"},
    BootIndicator: {"kind":"Byte"},
    RecognizedPartition: {"kind":"Byte"},
    HiddenSectors: {"kind":"UInt32"},
    PartitionId: Guid,
};
// --------------------------------------------------------
// Type: CREATE_DISK_GPT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CREATE_DISK_GPT = extern struct {
    DiskId: Guid,
    MaxPartitionCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CREATE_DISK_MBR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CREATE_DISK_MBR = extern struct {
    Signature: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CREATE_DISK
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CREATE_DISK = extern struct {
    PartitionStyle: Windows.Win32.FileSystem.PARTITION_STYLE,
    Anonymous: Windows.Win32.FileSystem.CREATE_DISK+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: GET_LENGTH_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GET_LENGTH_INFORMATION = extern struct {
    Length: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: PARTITION_INFORMATION_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PARTITION_INFORMATION_EX = extern struct {
    PartitionStyle: Windows.Win32.FileSystem.PARTITION_STYLE,
    StartingOffset: Windows.Win32.SystemServices.LARGE_INTEGER,
    PartitionLength: Windows.Win32.SystemServices.LARGE_INTEGER,
    PartitionNumber: {"kind":"UInt32"},
    RewritePartition: {"kind":"Byte"},
    IsServicePartition: {"kind":"Byte"},
    Anonymous: Windows.Win32.FileSystem.PARTITION_INFORMATION_EX+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: DRIVE_LAYOUT_INFORMATION_GPT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DRIVE_LAYOUT_INFORMATION_GPT = extern struct {
    DiskId: Guid,
    StartingUsableOffset: Windows.Win32.SystemServices.LARGE_INTEGER,
    UsableLength: Windows.Win32.SystemServices.LARGE_INTEGER,
    MaxPartitionCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DRIVE_LAYOUT_INFORMATION_MBR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DRIVE_LAYOUT_INFORMATION_MBR = extern struct {
    Signature: {"kind":"UInt32"},
    CheckSum: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DRIVE_LAYOUT_INFORMATION_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DRIVE_LAYOUT_INFORMATION_EX = extern struct {
    PartitionStyle: {"kind":"UInt32"},
    PartitionCount: {"kind":"UInt32"},
    Anonymous: Windows.Win32.FileSystem.DRIVE_LAYOUT_INFORMATION_EX+_Anonymous_e__Union,
    PartitionEntry: {"kind":"Array","child": Windows.Win32.FileSystem.PARTITION_INFORMATION_EX},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: DISK_INT13_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISK_INT13_INFO = extern struct {
    DriveSelect: {"kind":"UInt16"},
    MaxCylinders: {"kind":"UInt32"},
    SectorsPerTrack: {"kind":"UInt16"},
    MaxHeads: {"kind":"UInt16"},
    NumberDrives: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: DISK_EX_INT13_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISK_EX_INT13_INFO = extern struct {
    ExBufferSize: {"kind":"UInt16"},
    ExFlags: {"kind":"UInt16"},
    ExCylinders: {"kind":"UInt32"},
    ExHeads: {"kind":"UInt32"},
    ExSectorsPerTrack: {"kind":"UInt32"},
    ExSectorsPerDrive: {"kind":"UInt64"},
    ExSectorSize: {"kind":"UInt16"},
    ExReserved: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: DISK_DETECTION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISK_DETECTION_INFO = extern struct {
    SizeOfDetectInfo: {"kind":"UInt32"},
    DetectionType: Windows.Win32.SystemServices.DETECTION_TYPE,
    Anonymous: Windows.Win32.FileSystem.DISK_DETECTION_INFO+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            Int13: Windows.Win32.FileSystem.DISK_INT13_INFO,
            ExInt13: Windows.Win32.FileSystem.DISK_EX_INT13_INFO,
        };
    };
};
// --------------------------------------------------------
// Type: DISK_PARTITION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISK_PARTITION_INFO = extern struct {
    SizeOfPartitionInfo: {"kind":"UInt32"},
    PartitionStyle: Windows.Win32.FileSystem.PARTITION_STYLE,
    Anonymous: Windows.Win32.FileSystem.DISK_PARTITION_INFO+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Mbr_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Mbr_e__Struct = extern struct {
            Signature: {"kind":"UInt32"},
            CheckSum: {"kind":"UInt32"},
        };
        // --------------------------------------------------------
        // Type: _Gpt_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Gpt_e__Struct = extern struct {
            DiskId: Guid,
        };
    };
};
// --------------------------------------------------------
// Type: DISK_GEOMETRY_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISK_GEOMETRY_EX = extern struct {
    Geometry: Windows.Win32.FileSystem.DISK_GEOMETRY,
    DiskSize: Windows.Win32.SystemServices.LARGE_INTEGER,
    Data: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: DISK_CACHE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISK_CACHE_INFORMATION = extern struct {
    ParametersSavable: {"kind":"Byte"},
    ReadCacheEnabled: {"kind":"Byte"},
    WriteCacheEnabled: {"kind":"Byte"},
    ReadRetentionPriority: Windows.Win32.SystemServices.DISK_CACHE_RETENTION_PRIORITY,
    WriteRetentionPriority: Windows.Win32.SystemServices.DISK_CACHE_RETENTION_PRIORITY,
    DisablePrefetchTransferLength: {"kind":"UInt16"},
    PrefetchScalar: {"kind":"Byte"},
    Anonymous: Windows.Win32.FileSystem.DISK_CACHE_INFORMATION+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _ScalarPrefetch_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _ScalarPrefetch_e__Struct = extern struct {
            Minimum: {"kind":"UInt16"},
            Maximum: {"kind":"UInt16"},
            MaximumBlocks: {"kind":"UInt16"},
        };
        // --------------------------------------------------------
        // Type: _BlockPrefetch_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _BlockPrefetch_e__Struct = extern struct {
            Minimum: {"kind":"UInt16"},
            Maximum: {"kind":"UInt16"},
        };
    };
};
// --------------------------------------------------------
// Type: DISK_GROW_PARTITION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISK_GROW_PARTITION = extern struct {
    PartitionNumber: {"kind":"UInt32"},
    BytesToGrow: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: DISK_PERFORMANCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISK_PERFORMANCE = extern struct {
    BytesRead: Windows.Win32.SystemServices.LARGE_INTEGER,
    BytesWritten: Windows.Win32.SystemServices.LARGE_INTEGER,
    ReadTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    WriteTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    IdleTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    ReadCount: {"kind":"UInt32"},
    WriteCount: {"kind":"UInt32"},
    QueueDepth: {"kind":"UInt32"},
    SplitCount: {"kind":"UInt32"},
    QueryTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    StorageDeviceNumber: {"kind":"UInt32"},
    StorageManagerName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: GET_DISK_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const GET_DISK_ATTRIBUTES = extern struct {
    Version: {"kind":"UInt32"},
    Reserved1: {"kind":"UInt32"},
    Attributes: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: SET_DISK_ATTRIBUTES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SET_DISK_ATTRIBUTES = extern struct {
    Version: {"kind":"UInt32"},
    Persist: {"kind":"Byte"},
    Reserved1: {"kind":"Array","child": {"kind":"Byte"}},
    Attributes: {"kind":"UInt64"},
    AttributesMask: {"kind":"UInt64"},
    Reserved2: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: NTFS_VOLUME_DATA_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTFS_VOLUME_DATA_BUFFER = extern struct {
    VolumeSerialNumber: Windows.Win32.SystemServices.LARGE_INTEGER,
    NumberSectors: Windows.Win32.SystemServices.LARGE_INTEGER,
    TotalClusters: Windows.Win32.SystemServices.LARGE_INTEGER,
    FreeClusters: Windows.Win32.SystemServices.LARGE_INTEGER,
    TotalReserved: Windows.Win32.SystemServices.LARGE_INTEGER,
    BytesPerSector: {"kind":"UInt32"},
    BytesPerCluster: {"kind":"UInt32"},
    BytesPerFileRecordSegment: {"kind":"UInt32"},
    ClustersPerFileRecordSegment: {"kind":"UInt32"},
    MftValidDataLength: Windows.Win32.SystemServices.LARGE_INTEGER,
    MftStartLcn: Windows.Win32.SystemServices.LARGE_INTEGER,
    Mft2StartLcn: Windows.Win32.SystemServices.LARGE_INTEGER,
    MftZoneStart: Windows.Win32.SystemServices.LARGE_INTEGER,
    MftZoneEnd: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: NTFS_EXTENDED_VOLUME_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTFS_EXTENDED_VOLUME_DATA = extern struct {
    ByteCount: {"kind":"UInt32"},
    MajorVersion: {"kind":"UInt16"},
    MinorVersion: {"kind":"UInt16"},
    BytesPerPhysicalSector: {"kind":"UInt32"},
    LfsMajorVersion: {"kind":"UInt16"},
    LfsMinorVersion: {"kind":"UInt16"},
    MaxDeviceTrimExtentCount: {"kind":"UInt32"},
    MaxDeviceTrimByteCount: {"kind":"UInt32"},
    MaxVolumeTrimExtentCount: {"kind":"UInt32"},
    MaxVolumeTrimByteCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STARTING_LCN_INPUT_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STARTING_LCN_INPUT_BUFFER = extern struct {
    StartingLcn: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: VOLUME_BITMAP_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VOLUME_BITMAP_BUFFER = extern struct {
    StartingLcn: Windows.Win32.SystemServices.LARGE_INTEGER,
    BitmapSize: Windows.Win32.SystemServices.LARGE_INTEGER,
    Buffer: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: STARTING_VCN_INPUT_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STARTING_VCN_INPUT_BUFFER = extern struct {
    StartingVcn: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: RETRIEVAL_POINTERS_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RETRIEVAL_POINTERS_BUFFER = extern struct {
    ExtentCount: {"kind":"UInt32"},
    StartingVcn: Windows.Win32.SystemServices.LARGE_INTEGER,
    Extents: {"kind":"Array","child": Windows.Win32.FileSystem.RETRIEVAL_POINTERS_BUFFER+_Anonymous_e__Struct},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        NextVcn: Windows.Win32.SystemServices.LARGE_INTEGER,
        Lcn: Windows.Win32.SystemServices.LARGE_INTEGER,
    };
};
// --------------------------------------------------------
// Type: NTFS_FILE_RECORD_INPUT_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTFS_FILE_RECORD_INPUT_BUFFER = extern struct {
    FileReferenceNumber: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: NTFS_FILE_RECORD_OUTPUT_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTFS_FILE_RECORD_OUTPUT_BUFFER = extern struct {
    FileReferenceNumber: Windows.Win32.SystemServices.LARGE_INTEGER,
    FileRecordLength: {"kind":"UInt32"},
    FileRecordBuffer: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: MOVE_FILE_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MOVE_FILE_DATA = extern struct {
    FileHandle: Windows.Win32.SystemServices.HANDLE,
    StartingVcn: Windows.Win32.SystemServices.LARGE_INTEGER,
    StartingLcn: Windows.Win32.SystemServices.LARGE_INTEGER,
    ClusterCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: FIND_BY_SID_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FIND_BY_SID_DATA = extern struct {
    Restart: {"kind":"UInt32"},
    Sid: Windows.Win32.Security.SID,
};
// --------------------------------------------------------
// Type: FIND_BY_SID_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FIND_BY_SID_OUTPUT = extern struct {
    NextEntryOffset: {"kind":"UInt32"},
    FileIndex: {"kind":"UInt32"},
    FileNameLength: {"kind":"UInt32"},
    FileName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: MFT_ENUM_DATA_V0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFT_ENUM_DATA_V0 = extern struct {
    StartFileReferenceNumber: {"kind":"UInt64"},
    LowUsn: {"kind":"Int64"},
    HighUsn: {"kind":"Int64"},
};
// --------------------------------------------------------
// Type: MFT_ENUM_DATA_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MFT_ENUM_DATA_V1 = extern struct {
    StartFileReferenceNumber: {"kind":"UInt64"},
    LowUsn: {"kind":"Int64"},
    HighUsn: {"kind":"Int64"},
    MinMajorVersion: {"kind":"UInt16"},
    MaxMajorVersion: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: CREATE_USN_JOURNAL_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CREATE_USN_JOURNAL_DATA = extern struct {
    MaximumSize: {"kind":"UInt64"},
    AllocationDelta: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: READ_FILE_USN_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const READ_FILE_USN_DATA = extern struct {
    MinMajorVersion: {"kind":"UInt16"},
    MaxMajorVersion: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: READ_USN_JOURNAL_DATA_V0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const READ_USN_JOURNAL_DATA_V0 = extern struct {
    StartUsn: {"kind":"Int64"},
    ReasonMask: {"kind":"UInt32"},
    ReturnOnlyOnClose: {"kind":"UInt32"},
    Timeout: {"kind":"UInt64"},
    BytesToWaitFor: {"kind":"UInt64"},
    UsnJournalID: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: READ_USN_JOURNAL_DATA_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const READ_USN_JOURNAL_DATA_V1 = extern struct {
    StartUsn: {"kind":"Int64"},
    ReasonMask: {"kind":"UInt32"},
    ReturnOnlyOnClose: {"kind":"UInt32"},
    Timeout: {"kind":"UInt64"},
    BytesToWaitFor: {"kind":"UInt64"},
    UsnJournalID: {"kind":"UInt64"},
    MinMajorVersion: {"kind":"UInt16"},
    MaxMajorVersion: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: USN_TRACK_MODIFIED_RANGES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USN_TRACK_MODIFIED_RANGES = extern struct {
    Flags: {"kind":"UInt32"},
    Unused: {"kind":"UInt32"},
    ChunkSize: {"kind":"UInt64"},
    FileSizeThreshold: {"kind":"Int64"},
};
// --------------------------------------------------------
// Type: USN_RANGE_TRACK_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USN_RANGE_TRACK_OUTPUT = extern struct {
    Usn: {"kind":"Int64"},
};
// --------------------------------------------------------
// Type: USN_RECORD_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USN_RECORD_V2 = extern struct {
    RecordLength: {"kind":"UInt32"},
    MajorVersion: {"kind":"UInt16"},
    MinorVersion: {"kind":"UInt16"},
    FileReferenceNumber: {"kind":"UInt64"},
    ParentFileReferenceNumber: {"kind":"UInt64"},
    Usn: {"kind":"Int64"},
    TimeStamp: Windows.Win32.SystemServices.LARGE_INTEGER,
    Reason: {"kind":"UInt32"},
    SourceInfo: {"kind":"UInt32"},
    SecurityId: {"kind":"UInt32"},
    FileAttributes: {"kind":"UInt32"},
    FileNameLength: {"kind":"UInt16"},
    FileNameOffset: {"kind":"UInt16"},
    FileName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: USN_RECORD_V3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USN_RECORD_V3 = extern struct {
    RecordLength: {"kind":"UInt32"},
    MajorVersion: {"kind":"UInt16"},
    MinorVersion: {"kind":"UInt16"},
    FileReferenceNumber: Windows.Win32.FileSystem.FILE_ID_128,
    ParentFileReferenceNumber: Windows.Win32.FileSystem.FILE_ID_128,
    Usn: {"kind":"Int64"},
    TimeStamp: Windows.Win32.SystemServices.LARGE_INTEGER,
    Reason: {"kind":"UInt32"},
    SourceInfo: {"kind":"UInt32"},
    SecurityId: {"kind":"UInt32"},
    FileAttributes: {"kind":"UInt32"},
    FileNameLength: {"kind":"UInt16"},
    FileNameOffset: {"kind":"UInt16"},
    FileName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: USN_RECORD_COMMON_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USN_RECORD_COMMON_HEADER = extern struct {
    RecordLength: {"kind":"UInt32"},
    MajorVersion: {"kind":"UInt16"},
    MinorVersion: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: USN_RECORD_EXTENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USN_RECORD_EXTENT = extern struct {
    Offset: {"kind":"Int64"},
    Length: {"kind":"Int64"},
};
// --------------------------------------------------------
// Type: USN_RECORD_V4
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USN_RECORD_V4 = extern struct {
    Header: Windows.Win32.FileSystem.USN_RECORD_COMMON_HEADER,
    FileReferenceNumber: Windows.Win32.FileSystem.FILE_ID_128,
    ParentFileReferenceNumber: Windows.Win32.FileSystem.FILE_ID_128,
    Usn: {"kind":"Int64"},
    Reason: {"kind":"UInt32"},
    SourceInfo: {"kind":"UInt32"},
    RemainingExtents: {"kind":"UInt32"},
    NumberOfExtents: {"kind":"UInt16"},
    ExtentSize: {"kind":"UInt16"},
    Extents: {"kind":"Array","child": Windows.Win32.FileSystem.USN_RECORD_EXTENT},
};
// --------------------------------------------------------
// Type: USN_JOURNAL_DATA_V0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USN_JOURNAL_DATA_V0 = extern struct {
    UsnJournalID: {"kind":"UInt64"},
    FirstUsn: {"kind":"Int64"},
    NextUsn: {"kind":"Int64"},
    LowestValidUsn: {"kind":"Int64"},
    MaxUsn: {"kind":"Int64"},
    MaximumSize: {"kind":"UInt64"},
    AllocationDelta: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: USN_JOURNAL_DATA_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USN_JOURNAL_DATA_V1 = extern struct {
    UsnJournalID: {"kind":"UInt64"},
    FirstUsn: {"kind":"Int64"},
    NextUsn: {"kind":"Int64"},
    LowestValidUsn: {"kind":"Int64"},
    MaxUsn: {"kind":"Int64"},
    MaximumSize: {"kind":"UInt64"},
    AllocationDelta: {"kind":"UInt64"},
    MinSupportedMajorVersion: {"kind":"UInt16"},
    MaxSupportedMajorVersion: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: USN_JOURNAL_DATA_V2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const USN_JOURNAL_DATA_V2 = extern struct {
    UsnJournalID: {"kind":"UInt64"},
    FirstUsn: {"kind":"Int64"},
    NextUsn: {"kind":"Int64"},
    LowestValidUsn: {"kind":"Int64"},
    MaxUsn: {"kind":"Int64"},
    MaximumSize: {"kind":"UInt64"},
    AllocationDelta: {"kind":"UInt64"},
    MinSupportedMajorVersion: {"kind":"UInt16"},
    MaxSupportedMajorVersion: {"kind":"UInt16"},
    Flags: {"kind":"UInt32"},
    RangeTrackChunkSize: {"kind":"UInt64"},
    RangeTrackFileSizeThreshold: {"kind":"Int64"},
};
// --------------------------------------------------------
// Type: DELETE_USN_JOURNAL_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DELETE_USN_JOURNAL_DATA = extern struct {
    UsnJournalID: {"kind":"UInt64"},
    DeleteFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MARK_HANDLE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MARK_HANDLE_INFO = extern struct {
    Anonymous: Windows.Win32.FileSystem.MARK_HANDLE_INFO+_Anonymous_e__Union,
    VolumeHandle: Windows.Win32.SystemServices.HANDLE,
    HandleInfo: {"kind":"UInt32"},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: FILESYSTEM_STATISTICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILESYSTEM_STATISTICS = extern struct {
    FileSystemType: {"kind":"UInt16"},
    Version: {"kind":"UInt16"},
    SizeOfCompleteStructure: {"kind":"UInt32"},
    UserFileReads: {"kind":"UInt32"},
    UserFileReadBytes: {"kind":"UInt32"},
    UserDiskReads: {"kind":"UInt32"},
    UserFileWrites: {"kind":"UInt32"},
    UserFileWriteBytes: {"kind":"UInt32"},
    UserDiskWrites: {"kind":"UInt32"},
    MetaDataReads: {"kind":"UInt32"},
    MetaDataReadBytes: {"kind":"UInt32"},
    MetaDataDiskReads: {"kind":"UInt32"},
    MetaDataWrites: {"kind":"UInt32"},
    MetaDataWriteBytes: {"kind":"UInt32"},
    MetaDataDiskWrites: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: FAT_STATISTICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FAT_STATISTICS = extern struct {
    CreateHits: {"kind":"UInt32"},
    SuccessfulCreates: {"kind":"UInt32"},
    FailedCreates: {"kind":"UInt32"},
    NonCachedReads: {"kind":"UInt32"},
    NonCachedReadBytes: {"kind":"UInt32"},
    NonCachedWrites: {"kind":"UInt32"},
    NonCachedWriteBytes: {"kind":"UInt32"},
    NonCachedDiskReads: {"kind":"UInt32"},
    NonCachedDiskWrites: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: EXFAT_STATISTICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EXFAT_STATISTICS = extern struct {
    CreateHits: {"kind":"UInt32"},
    SuccessfulCreates: {"kind":"UInt32"},
    FailedCreates: {"kind":"UInt32"},
    NonCachedReads: {"kind":"UInt32"},
    NonCachedReadBytes: {"kind":"UInt32"},
    NonCachedWrites: {"kind":"UInt32"},
    NonCachedWriteBytes: {"kind":"UInt32"},
    NonCachedDiskReads: {"kind":"UInt32"},
    NonCachedDiskWrites: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NTFS_STATISTICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTFS_STATISTICS = extern struct {
    LogFileFullExceptions: {"kind":"UInt32"},
    OtherExceptions: {"kind":"UInt32"},
    MftReads: {"kind":"UInt32"},
    MftReadBytes: {"kind":"UInt32"},
    MftWrites: {"kind":"UInt32"},
    MftWriteBytes: {"kind":"UInt32"},
    MftWritesUserLevel: Windows.Win32.FileSystem.NTFS_STATISTICS+_MftWritesUserLevel_e__Struct,
    MftWritesFlushForLogFileFull: {"kind":"UInt16"},
    MftWritesLazyWriter: {"kind":"UInt16"},
    MftWritesUserRequest: {"kind":"UInt16"},
    Mft2Writes: {"kind":"UInt32"},
    Mft2WriteBytes: {"kind":"UInt32"},
    Mft2WritesUserLevel: Windows.Win32.FileSystem.NTFS_STATISTICS+_Mft2WritesUserLevel_e__Struct,
    Mft2WritesFlushForLogFileFull: {"kind":"UInt16"},
    Mft2WritesLazyWriter: {"kind":"UInt16"},
    Mft2WritesUserRequest: {"kind":"UInt16"},
    RootIndexReads: {"kind":"UInt32"},
    RootIndexReadBytes: {"kind":"UInt32"},
    RootIndexWrites: {"kind":"UInt32"},
    RootIndexWriteBytes: {"kind":"UInt32"},
    BitmapReads: {"kind":"UInt32"},
    BitmapReadBytes: {"kind":"UInt32"},
    BitmapWrites: {"kind":"UInt32"},
    BitmapWriteBytes: {"kind":"UInt32"},
    BitmapWritesFlushForLogFileFull: {"kind":"UInt16"},
    BitmapWritesLazyWriter: {"kind":"UInt16"},
    BitmapWritesUserRequest: {"kind":"UInt16"},
    BitmapWritesUserLevel: Windows.Win32.FileSystem.NTFS_STATISTICS+_BitmapWritesUserLevel_e__Struct,
    MftBitmapReads: {"kind":"UInt32"},
    MftBitmapReadBytes: {"kind":"UInt32"},
    MftBitmapWrites: {"kind":"UInt32"},
    MftBitmapWriteBytes: {"kind":"UInt32"},
    MftBitmapWritesFlushForLogFileFull: {"kind":"UInt16"},
    MftBitmapWritesLazyWriter: {"kind":"UInt16"},
    MftBitmapWritesUserRequest: {"kind":"UInt16"},
    MftBitmapWritesUserLevel: Windows.Win32.FileSystem.NTFS_STATISTICS+_MftBitmapWritesUserLevel_e__Struct,
    UserIndexReads: {"kind":"UInt32"},
    UserIndexReadBytes: {"kind":"UInt32"},
    UserIndexWrites: {"kind":"UInt32"},
    UserIndexWriteBytes: {"kind":"UInt32"},
    LogFileReads: {"kind":"UInt32"},
    LogFileReadBytes: {"kind":"UInt32"},
    LogFileWrites: {"kind":"UInt32"},
    LogFileWriteBytes: {"kind":"UInt32"},
    Allocate: Windows.Win32.FileSystem.NTFS_STATISTICS+_Allocate_e__Struct,
    DiskResourcesExhausted: {"kind":"UInt32"},
    // --------------------------------------------------------
    // Type: _Allocate_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Allocate_e__Struct = extern struct {
        Calls: {"kind":"UInt32"},
        Clusters: {"kind":"UInt32"},
        Hints: {"kind":"UInt32"},
        RunsReturned: {"kind":"UInt32"},
        HintsHonored: {"kind":"UInt32"},
        HintsClusters: {"kind":"UInt32"},
        Cache: {"kind":"UInt32"},
        CacheClusters: {"kind":"UInt32"},
        CacheMiss: {"kind":"UInt32"},
        CacheMissClusters: {"kind":"UInt32"},
    };
    // --------------------------------------------------------
    // Type: _BitmapWritesUserLevel_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _BitmapWritesUserLevel_e__Struct = extern struct {
        Write: {"kind":"UInt16"},
        Create: {"kind":"UInt16"},
        SetInfo: {"kind":"UInt16"},
    };
    // --------------------------------------------------------
    // Type: _MftWritesUserLevel_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _MftWritesUserLevel_e__Struct = extern struct {
        Write: {"kind":"UInt16"},
        Create: {"kind":"UInt16"},
        SetInfo: {"kind":"UInt16"},
        Flush: {"kind":"UInt16"},
    };
    // --------------------------------------------------------
    // Type: _MftBitmapWritesUserLevel_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _MftBitmapWritesUserLevel_e__Struct = extern struct {
        Write: {"kind":"UInt16"},
        Create: {"kind":"UInt16"},
        SetInfo: {"kind":"UInt16"},
        Flush: {"kind":"UInt16"},
    };
    // --------------------------------------------------------
    // Type: _Mft2WritesUserLevel_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Mft2WritesUserLevel_e__Struct = extern struct {
        Write: {"kind":"UInt16"},
        Create: {"kind":"UInt16"},
        SetInfo: {"kind":"UInt16"},
        Flush: {"kind":"UInt16"},
    };
};
// --------------------------------------------------------
// Type: FILESYSTEM_STATISTICS_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILESYSTEM_STATISTICS_EX = extern struct {
    FileSystemType: {"kind":"UInt16"},
    Version: {"kind":"UInt16"},
    SizeOfCompleteStructure: {"kind":"UInt32"},
    UserFileReads: {"kind":"UInt64"},
    UserFileReadBytes: {"kind":"UInt64"},
    UserDiskReads: {"kind":"UInt64"},
    UserFileWrites: {"kind":"UInt64"},
    UserFileWriteBytes: {"kind":"UInt64"},
    UserDiskWrites: {"kind":"UInt64"},
    MetaDataReads: {"kind":"UInt64"},
    MetaDataReadBytes: {"kind":"UInt64"},
    MetaDataDiskReads: {"kind":"UInt64"},
    MetaDataWrites: {"kind":"UInt64"},
    MetaDataWriteBytes: {"kind":"UInt64"},
    MetaDataDiskWrites: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: NTFS_STATISTICS_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTFS_STATISTICS_EX = extern struct {
    LogFileFullExceptions: {"kind":"UInt32"},
    OtherExceptions: {"kind":"UInt32"},
    MftReads: {"kind":"UInt64"},
    MftReadBytes: {"kind":"UInt64"},
    MftWrites: {"kind":"UInt64"},
    MftWriteBytes: {"kind":"UInt64"},
    MftWritesUserLevel: Windows.Win32.FileSystem.NTFS_STATISTICS_EX+_MftWritesUserLevel_e__Struct,
    MftWritesFlushForLogFileFull: {"kind":"UInt32"},
    MftWritesLazyWriter: {"kind":"UInt32"},
    MftWritesUserRequest: {"kind":"UInt32"},
    Mft2Writes: {"kind":"UInt64"},
    Mft2WriteBytes: {"kind":"UInt64"},
    Mft2WritesUserLevel: Windows.Win32.FileSystem.NTFS_STATISTICS_EX+_Mft2WritesUserLevel_e__Struct,
    Mft2WritesFlushForLogFileFull: {"kind":"UInt32"},
    Mft2WritesLazyWriter: {"kind":"UInt32"},
    Mft2WritesUserRequest: {"kind":"UInt32"},
    RootIndexReads: {"kind":"UInt64"},
    RootIndexReadBytes: {"kind":"UInt64"},
    RootIndexWrites: {"kind":"UInt64"},
    RootIndexWriteBytes: {"kind":"UInt64"},
    BitmapReads: {"kind":"UInt64"},
    BitmapReadBytes: {"kind":"UInt64"},
    BitmapWrites: {"kind":"UInt64"},
    BitmapWriteBytes: {"kind":"UInt64"},
    BitmapWritesFlushForLogFileFull: {"kind":"UInt32"},
    BitmapWritesLazyWriter: {"kind":"UInt32"},
    BitmapWritesUserRequest: {"kind":"UInt32"},
    BitmapWritesUserLevel: Windows.Win32.FileSystem.NTFS_STATISTICS_EX+_BitmapWritesUserLevel_e__Struct,
    MftBitmapReads: {"kind":"UInt64"},
    MftBitmapReadBytes: {"kind":"UInt64"},
    MftBitmapWrites: {"kind":"UInt64"},
    MftBitmapWriteBytes: {"kind":"UInt64"},
    MftBitmapWritesFlushForLogFileFull: {"kind":"UInt32"},
    MftBitmapWritesLazyWriter: {"kind":"UInt32"},
    MftBitmapWritesUserRequest: {"kind":"UInt32"},
    MftBitmapWritesUserLevel: Windows.Win32.FileSystem.NTFS_STATISTICS_EX+_MftBitmapWritesUserLevel_e__Struct,
    UserIndexReads: {"kind":"UInt64"},
    UserIndexReadBytes: {"kind":"UInt64"},
    UserIndexWrites: {"kind":"UInt64"},
    UserIndexWriteBytes: {"kind":"UInt64"},
    LogFileReads: {"kind":"UInt64"},
    LogFileReadBytes: {"kind":"UInt64"},
    LogFileWrites: {"kind":"UInt64"},
    LogFileWriteBytes: {"kind":"UInt64"},
    Allocate: Windows.Win32.FileSystem.NTFS_STATISTICS_EX+_Allocate_e__Struct,
    DiskResourcesExhausted: {"kind":"UInt32"},
    VolumeTrimCount: {"kind":"UInt64"},
    VolumeTrimTime: {"kind":"UInt64"},
    VolumeTrimByteCount: {"kind":"UInt64"},
    FileLevelTrimCount: {"kind":"UInt64"},
    FileLevelTrimTime: {"kind":"UInt64"},
    FileLevelTrimByteCount: {"kind":"UInt64"},
    VolumeTrimSkippedCount: {"kind":"UInt64"},
    VolumeTrimSkippedByteCount: {"kind":"UInt64"},
    NtfsFillStatInfoFromMftRecordCalledCount: {"kind":"UInt64"},
    NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount: {"kind":"UInt64"},
    NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount: {"kind":"UInt64"},
    // --------------------------------------------------------
    // Type: _MftBitmapWritesUserLevel_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _MftBitmapWritesUserLevel_e__Struct = extern struct {
        Write: {"kind":"UInt32"},
        Create: {"kind":"UInt32"},
        SetInfo: {"kind":"UInt32"},
        Flush: {"kind":"UInt32"},
    };
    // --------------------------------------------------------
    // Type: _Mft2WritesUserLevel_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Mft2WritesUserLevel_e__Struct = extern struct {
        Write: {"kind":"UInt32"},
        Create: {"kind":"UInt32"},
        SetInfo: {"kind":"UInt32"},
        Flush: {"kind":"UInt32"},
    };
    // --------------------------------------------------------
    // Type: _BitmapWritesUserLevel_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _BitmapWritesUserLevel_e__Struct = extern struct {
        Write: {"kind":"UInt32"},
        Create: {"kind":"UInt32"},
        SetInfo: {"kind":"UInt32"},
        Flush: {"kind":"UInt32"},
    };
    // --------------------------------------------------------
    // Type: _Allocate_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Allocate_e__Struct = extern struct {
        Calls: {"kind":"UInt32"},
        RunsReturned: {"kind":"UInt32"},
        Hints: {"kind":"UInt32"},
        HintsHonored: {"kind":"UInt32"},
        Cache: {"kind":"UInt32"},
        CacheMiss: {"kind":"UInt32"},
        Clusters: {"kind":"UInt64"},
        HintsClusters: {"kind":"UInt64"},
        CacheClusters: {"kind":"UInt64"},
        CacheMissClusters: {"kind":"UInt64"},
    };
    // --------------------------------------------------------
    // Type: _MftWritesUserLevel_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _MftWritesUserLevel_e__Struct = extern struct {
        Write: {"kind":"UInt32"},
        Create: {"kind":"UInt32"},
        SetInfo: {"kind":"UInt32"},
        Flush: {"kind":"UInt32"},
    };
};
// --------------------------------------------------------
// Type: FILE_OBJECTID_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_OBJECTID_BUFFER = extern struct {
    ObjectId: {"kind":"Array","child": {"kind":"Byte"}},
    Anonymous: Windows.Win32.FileSystem.FILE_OBJECTID_BUFFER+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Anonymous_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Anonymous_e__Struct = extern struct {
            BirthVolumeId: {"kind":"Array","child": {"kind":"Byte"}},
            BirthObjectId: {"kind":"Array","child": {"kind":"Byte"}},
            DomainId: {"kind":"Array","child": {"kind":"Byte"}},
        };
    };
};
// --------------------------------------------------------
// Type: FILE_SET_SPARSE_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_SET_SPARSE_BUFFER = extern struct {
    SetSparse: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: FILE_ZERO_DATA_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_ZERO_DATA_INFORMATION = extern struct {
    FileOffset: Windows.Win32.SystemServices.LARGE_INTEGER,
    BeyondFinalZero: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: FILE_ALLOCATED_RANGE_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_ALLOCATED_RANGE_BUFFER = extern struct {
    FileOffset: Windows.Win32.SystemServices.LARGE_INTEGER,
    Length: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: PLEX_READ_DATA_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const PLEX_READ_DATA_REQUEST = extern struct {
    ByteOffset: Windows.Win32.SystemServices.LARGE_INTEGER,
    ByteLength: {"kind":"UInt32"},
    PlexNumber: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: FILE_MAKE_COMPATIBLE_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_MAKE_COMPATIBLE_BUFFER = extern struct {
    CloseDisc: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: FILE_SET_DEFECT_MGMT_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_SET_DEFECT_MGMT_BUFFER = extern struct {
    Disable: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: FILE_QUERY_SPARING_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_QUERY_SPARING_BUFFER = extern struct {
    SparingUnitBytes: {"kind":"UInt32"},
    SoftwareSparing: {"kind":"Byte"},
    TotalSpareBlocks: {"kind":"UInt32"},
    FreeSpareBlocks: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: FILE_QUERY_ON_DISK_VOL_INFO_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_QUERY_ON_DISK_VOL_INFO_BUFFER = extern struct {
    DirectoryCount: Windows.Win32.SystemServices.LARGE_INTEGER,
    FileCount: Windows.Win32.SystemServices.LARGE_INTEGER,
    FsFormatMajVersion: {"kind":"UInt16"},
    FsFormatMinVersion: {"kind":"UInt16"},
    FsFormatName: {"kind":"Array","child": {"kind":"UInt16"}},
    FormatTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    LastUpdateTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    CopyrightInfo: {"kind":"Array","child": {"kind":"UInt16"}},
    AbstractInfo: {"kind":"Array","child": {"kind":"UInt16"}},
    FormattingImplementationInfo: {"kind":"Array","child": {"kind":"UInt16"}},
    LastModifyingImplementationInfo: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SHRINK_VOLUME_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SHRINK_VOLUME_INFORMATION = extern struct {
    ShrinkRequestType: Windows.Win32.SystemServices.SHRINK_VOLUME_REQUEST_TYPES,
    Flags: {"kind":"UInt64"},
    NewNumberOfSectors: {"kind":"Int64"},
};
// --------------------------------------------------------
// Type: TXFS_MODIFY_RM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TXFS_MODIFY_RM = extern struct {
    Flags: {"kind":"UInt32"},
    LogContainerCountMax: {"kind":"UInt32"},
    LogContainerCountMin: {"kind":"UInt32"},
    LogContainerCount: {"kind":"UInt32"},
    LogGrowthIncrement: {"kind":"UInt32"},
    LogAutoShrinkPercentage: {"kind":"UInt32"},
    Reserved: {"kind":"UInt64"},
    LoggingMode: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: TXFS_QUERY_RM_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TXFS_QUERY_RM_INFORMATION = extern struct {
    BytesRequired: {"kind":"UInt32"},
    TailLsn: {"kind":"UInt64"},
    CurrentLsn: {"kind":"UInt64"},
    ArchiveTailLsn: {"kind":"UInt64"},
    LogContainerSize: {"kind":"UInt64"},
    HighestVirtualClock: Windows.Win32.SystemServices.LARGE_INTEGER,
    LogContainerCount: {"kind":"UInt32"},
    LogContainerCountMax: {"kind":"UInt32"},
    LogContainerCountMin: {"kind":"UInt32"},
    LogGrowthIncrement: {"kind":"UInt32"},
    LogAutoShrinkPercentage: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    LoggingMode: {"kind":"UInt16"},
    Reserved: {"kind":"UInt16"},
    RmState: {"kind":"UInt32"},
    LogCapacity: {"kind":"UInt64"},
    LogFree: {"kind":"UInt64"},
    TopsSize: {"kind":"UInt64"},
    TopsUsed: {"kind":"UInt64"},
    TransactionCount: {"kind":"UInt64"},
    OnePCCount: {"kind":"UInt64"},
    TwoPCCount: {"kind":"UInt64"},
    NumberLogFileFull: {"kind":"UInt64"},
    OldestTransactionAge: {"kind":"UInt64"},
    RMName: Guid,
    TmLogPathOffset: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: TXFS_GET_METADATA_INFO_OUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TXFS_GET_METADATA_INFO_OUT = extern struct {
    TxfFileId: Windows.Win32.FileSystem.TXFS_GET_METADATA_INFO_OUT+_TxfFileId_e__Struct,
    LockingTransaction: Guid,
    LastLsn: {"kind":"UInt64"},
    TransactionState: {"kind":"UInt32"},
    // --------------------------------------------------------
    // Type: _TxfFileId_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _TxfFileId_e__Struct = extern struct {
        LowPart: {"kind":"Int64"},
        HighPart: {"kind":"Int64"},
    };
};
// --------------------------------------------------------
// Type: TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY = extern struct {
    Offset: {"kind":"UInt64"},
    NameFlags: {"kind":"UInt32"},
    FileId: {"kind":"Int64"},
    Reserved1: {"kind":"UInt32"},
    Reserved2: {"kind":"UInt32"},
    Reserved3: {"kind":"Int64"},
    FileName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: TXFS_LIST_TRANSACTION_LOCKED_FILES
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TXFS_LIST_TRANSACTION_LOCKED_FILES = extern struct {
    KtmTransaction: Guid,
    NumberOfFiles: {"kind":"UInt64"},
    BufferSizeRequired: {"kind":"UInt64"},
    Offset: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: TXFS_LIST_TRANSACTIONS_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TXFS_LIST_TRANSACTIONS_ENTRY = extern struct {
    TransactionId: Guid,
    TransactionState: {"kind":"UInt32"},
    Reserved1: {"kind":"UInt32"},
    Reserved2: {"kind":"UInt32"},
    Reserved3: {"kind":"Int64"},
};
// --------------------------------------------------------
// Type: TXFS_LIST_TRANSACTIONS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TXFS_LIST_TRANSACTIONS = extern struct {
    NumberOfTransactions: {"kind":"UInt64"},
    BufferSizeRequired: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: TXFS_READ_BACKUP_INFORMATION_OUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TXFS_READ_BACKUP_INFORMATION_OUT = extern struct {
    Anonymous: Windows.Win32.FileSystem.TXFS_READ_BACKUP_INFORMATION_OUT+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: TXFS_WRITE_BACKUP_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TXFS_WRITE_BACKUP_INFORMATION = extern struct {
    Buffer: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: TXFS_GET_TRANSACTED_VERSION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TXFS_GET_TRANSACTED_VERSION = extern struct {
    ThisBaseVersion: {"kind":"UInt32"},
    LatestVersion: {"kind":"UInt32"},
    ThisMiniVersion: {"kind":"UInt16"},
    FirstMiniVersion: {"kind":"UInt16"},
    LatestMiniVersion: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: TXFS_SAVEPOINT_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TXFS_SAVEPOINT_INFORMATION = extern struct {
    KtmTransaction: Windows.Win32.SystemServices.HANDLE,
    ActionCode: {"kind":"UInt32"},
    SavepointId: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: TXFS_CREATE_MINIVERSION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TXFS_CREATE_MINIVERSION_INFO = extern struct {
    StructureVersion: {"kind":"UInt16"},
    StructureLength: {"kind":"UInt16"},
    BaseVersion: {"kind":"UInt32"},
    MiniVersion: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: TXFS_TRANSACTION_ACTIVE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TXFS_TRANSACTION_ACTIVE_INFO = extern struct {
    TransactionsActiveAtSnapshot: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: BOOT_AREA_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BOOT_AREA_INFO = extern struct {
    BootSectorCount: {"kind":"UInt32"},
    BootSectors: {"kind":"Array","child": Windows.Win32.FileSystem.BOOT_AREA_INFO+_Anonymous_e__Struct},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _Anonymous_e__Struct = extern struct {
        Offset: Windows.Win32.SystemServices.LARGE_INTEGER,
    };
};
// --------------------------------------------------------
// Type: RETRIEVAL_POINTER_BASE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const RETRIEVAL_POINTER_BASE = extern struct {
    FileAreaOffset: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: FILE_SYSTEM_RECOGNITION_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_SYSTEM_RECOGNITION_INFORMATION = extern struct {
    FileSystem: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: REQUEST_OPLOCK_INPUT_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REQUEST_OPLOCK_INPUT_BUFFER = extern struct {
    StructureVersion: {"kind":"UInt16"},
    StructureLength: {"kind":"UInt16"},
    RequestedOplockLevel: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: REQUEST_OPLOCK_OUTPUT_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REQUEST_OPLOCK_OUTPUT_BUFFER = extern struct {
    StructureVersion: {"kind":"UInt16"},
    StructureLength: {"kind":"UInt16"},
    OriginalOplockLevel: {"kind":"UInt32"},
    NewOplockLevel: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    AccessMode: {"kind":"UInt32"},
    ShareMode: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: LOOKUP_STREAM_FROM_CLUSTER_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LOOKUP_STREAM_FROM_CLUSTER_INPUT = extern struct {
    Flags: {"kind":"UInt32"},
    NumberOfClusters: {"kind":"UInt32"},
    Cluster: {"kind":"Array","child": Windows.Win32.SystemServices.LARGE_INTEGER},
};
// --------------------------------------------------------
// Type: LOOKUP_STREAM_FROM_CLUSTER_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LOOKUP_STREAM_FROM_CLUSTER_OUTPUT = extern struct {
    Offset: {"kind":"UInt32"},
    NumberOfMatches: {"kind":"UInt32"},
    BufferSizeRequired: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: LOOKUP_STREAM_FROM_CLUSTER_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LOOKUP_STREAM_FROM_CLUSTER_ENTRY = extern struct {
    OffsetToNext: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    Reserved: Windows.Win32.SystemServices.LARGE_INTEGER,
    Cluster: Windows.Win32.SystemServices.LARGE_INTEGER,
    FileName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: CSV_NAMESPACE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CSV_NAMESPACE_INFO = extern struct {
    Version: {"kind":"UInt32"},
    DeviceNumber: {"kind":"UInt32"},
    StartingOffset: Windows.Win32.SystemServices.LARGE_INTEGER,
    SectorSize: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CSV_CONTROL_OP
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CSV_CONTROL_OP = *opaque{
};
// --------------------------------------------------------
// Type: CSV_CONTROL_PARAM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CSV_CONTROL_PARAM = extern struct {
    Operation: Windows.Win32.FileSystem.CSV_CONTROL_OP,
    Unused: {"kind":"Int64"},
};
// --------------------------------------------------------
// Type: CSV_QUERY_REDIRECT_STATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CSV_QUERY_REDIRECT_STATE = extern struct {
    MdsNodeId: {"kind":"UInt32"},
    DsNodeId: {"kind":"UInt32"},
    FileRedirected: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: CSV_QUERY_FILE_REVISION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CSV_QUERY_FILE_REVISION = extern struct {
    FileId: {"kind":"Int64"},
    FileRevision: {"kind":"Array","child": {"kind":"Int64"}},
};
// --------------------------------------------------------
// Type: CSV_QUERY_MDS_PATH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CSV_QUERY_MDS_PATH = extern struct {
    MdsNodeId: {"kind":"UInt32"},
    DsNodeId: {"kind":"UInt32"},
    PathLength: {"kind":"UInt32"},
    Path: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT = extern struct {
    VetoedFromAltitudeIntegral: {"kind":"UInt64"},
    VetoedFromAltitudeDecimal: {"kind":"UInt64"},
    Reason: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: CSV_IS_OWNED_BY_CSVFS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CSV_IS_OWNED_BY_CSVFS = extern struct {
    OwnedByCSVFS: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: FILE_LEVEL_TRIM_RANGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_LEVEL_TRIM_RANGE = extern struct {
    Offset: {"kind":"UInt64"},
    Length: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: FILE_LEVEL_TRIM
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_LEVEL_TRIM = extern struct {
    Key: {"kind":"UInt32"},
    NumRanges: {"kind":"UInt32"},
    Ranges: {"kind":"Array","child": Windows.Win32.FileSystem.FILE_LEVEL_TRIM_RANGE},
};
// --------------------------------------------------------
// Type: FILE_LEVEL_TRIM_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_LEVEL_TRIM_OUTPUT = extern struct {
    NumRangesProcessed: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: FSCTL_GET_INTEGRITY_INFORMATION_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FSCTL_GET_INTEGRITY_INFORMATION_BUFFER = extern struct {
    ChecksumAlgorithm: {"kind":"UInt16"},
    Reserved: {"kind":"UInt16"},
    Flags: {"kind":"UInt32"},
    ChecksumChunkSizeInBytes: {"kind":"UInt32"},
    ClusterSizeInBytes: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: FSCTL_SET_INTEGRITY_INFORMATION_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FSCTL_SET_INTEGRITY_INFORMATION_BUFFER = extern struct {
    ChecksumAlgorithm: {"kind":"UInt16"},
    Reserved: {"kind":"UInt16"},
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: REPAIR_COPIES_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REPAIR_COPIES_INPUT = extern struct {
    Size: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    FileOffset: Windows.Win32.SystemServices.LARGE_INTEGER,
    Length: {"kind":"UInt32"},
    SourceCopy: {"kind":"UInt32"},
    NumberOfRepairCopies: {"kind":"UInt32"},
    RepairCopies: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: REPAIR_COPIES_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const REPAIR_COPIES_OUTPUT = extern struct {
    Size: {"kind":"UInt32"},
    Status: {"kind":"UInt32"},
    ResumeFileOffset: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: FILE_STORAGE_TIER_MEDIA_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FILE_STORAGE_TIER_MEDIA_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: FILE_STORAGE_TIER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_STORAGE_TIER = extern struct {
    Id: Guid,
    Name: {"kind":"Array","child": {"kind":"UInt16"}},
    Description: {"kind":"Array","child": {"kind":"UInt16"}},
    Flags: {"kind":"UInt64"},
    ProvisionedCapacity: {"kind":"UInt64"},
    MediaType: Windows.Win32.FileSystem.FILE_STORAGE_TIER_MEDIA_TYPE,
    Class: Windows.Win32.SystemServices.FILE_STORAGE_TIER_CLASS,
};
// --------------------------------------------------------
// Type: FSCTL_QUERY_STORAGE_CLASSES_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FSCTL_QUERY_STORAGE_CLASSES_OUTPUT = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    TotalNumberOfTiers: {"kind":"UInt32"},
    NumberOfTiersReturned: {"kind":"UInt32"},
    Tiers: {"kind":"Array","child": Windows.Win32.FileSystem.FILE_STORAGE_TIER},
};
// --------------------------------------------------------
// Type: FSCTL_QUERY_REGION_INFO_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FSCTL_QUERY_REGION_INFO_INPUT = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    NumberOfTierIds: {"kind":"UInt32"},
    TierIds: {"kind":"Array","child": Guid},
};
// --------------------------------------------------------
// Type: FILE_STORAGE_TIER_REGION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_STORAGE_TIER_REGION = extern struct {
    TierId: Guid,
    Offset: {"kind":"UInt64"},
    Length: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: FSCTL_QUERY_REGION_INFO_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FSCTL_QUERY_REGION_INFO_OUTPUT = extern struct {
    Version: {"kind":"UInt32"},
    Size: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    Reserved: {"kind":"UInt32"},
    Alignment: {"kind":"UInt64"},
    TotalNumberOfRegions: {"kind":"UInt32"},
    NumberOfRegionsReturned: {"kind":"UInt32"},
    Regions: {"kind":"Array","child": Windows.Win32.FileSystem.FILE_STORAGE_TIER_REGION},
};
// --------------------------------------------------------
// Type: DUPLICATE_EXTENTS_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DUPLICATE_EXTENTS_DATA = extern struct {
    FileHandle: Windows.Win32.SystemServices.HANDLE,
    SourceFileOffset: Windows.Win32.SystemServices.LARGE_INTEGER,
    TargetFileOffset: Windows.Win32.SystemServices.LARGE_INTEGER,
    ByteCount: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: DISK_EXTENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISK_EXTENT = extern struct {
    DiskNumber: {"kind":"UInt32"},
    StartingOffset: Windows.Win32.SystemServices.LARGE_INTEGER,
    ExtentLength: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: VOLUME_DISK_EXTENTS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VOLUME_DISK_EXTENTS = extern struct {
    NumberOfDiskExtents: {"kind":"UInt32"},
    Extents: {"kind":"Array","child": Windows.Win32.FileSystem.DISK_EXTENT},
};
// --------------------------------------------------------
// Type: VOLUME_GET_GPT_ATTRIBUTES_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VOLUME_GET_GPT_ATTRIBUTES_INFORMATION = extern struct {
    GptAttributes: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: TRANSACTION_NOTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRANSACTION_NOTIFICATION = extern struct {
    TransactionKey: {"kind""Ptr","child":{"kind":"Void"}},
    TransactionNotification: {"kind":"UInt32"},
    TmVirtualClock: Windows.Win32.SystemServices.LARGE_INTEGER,
    ArgumentLength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT = extern struct {
    EnlistmentId: Guid,
    UOW: Guid,
};
// --------------------------------------------------------
// Type: TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT = extern struct {
    TmIdentity: Guid,
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT = extern struct {
    SavepointId: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT = extern struct {
    PropagationCookie: {"kind":"UInt32"},
    UOW: Guid,
    TmIdentity: Guid,
    BufferLength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT = extern struct {
    MarshalCookie: {"kind":"UInt32"},
    UOW: Guid,
};
// --------------------------------------------------------
// Type: KCRM_MARSHAL_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KCRM_MARSHAL_HEADER = extern struct {
    VersionMajor: {"kind":"UInt32"},
    VersionMinor: {"kind":"UInt32"},
    NumProtocols: {"kind":"UInt32"},
    Unused: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: KCRM_TRANSACTION_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KCRM_TRANSACTION_BLOB = extern struct {
    UOW: Guid,
    TmIdentity: Guid,
    IsolationLevel: {"kind":"UInt32"},
    IsolationFlags: {"kind":"UInt32"},
    Timeout: {"kind":"UInt32"},
    Description: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: KCRM_PROTOCOL_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const KCRM_PROTOCOL_BLOB = extern struct {
    ProtocolId: Guid,
    StaticInfoLength: {"kind":"UInt32"},
    TransactionIdInfoLength: {"kind":"UInt32"},
    Unused1: {"kind":"UInt32"},
    Unused2: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DISK_SPACE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISK_SPACE_INFORMATION = extern struct {
    ActualTotalAllocationUnits: {"kind":"UInt64"},
    ActualAvailableAllocationUnits: {"kind":"UInt64"},
    ActualPoolUnavailableAllocationUnits: {"kind":"UInt64"},
    CallerTotalAllocationUnits: {"kind":"UInt64"},
    CallerAvailableAllocationUnits: {"kind":"UInt64"},
    CallerPoolUnavailableAllocationUnits: {"kind":"UInt64"},
    UsedAllocationUnits: {"kind":"UInt64"},
    TotalReservedAllocationUnits: {"kind":"UInt64"},
    VolumeStorageReserveAllocationUnits: {"kind":"UInt64"},
    AvailableCommittedAllocationUnits: {"kind":"UInt64"},
    PoolAvailableAllocationUnits: {"kind":"UInt64"},
    SectorsPerAllocationUnit: {"kind":"UInt32"},
    BytesPerSector: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: WIN32_FILE_ATTRIBUTE_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WIN32_FILE_ATTRIBUTE_DATA = extern struct {
    dwFileAttributes: {"kind":"UInt32"},
    ftCreationTime: Windows.Win32.WindowsProgramming.FILETIME,
    ftLastAccessTime: Windows.Win32.WindowsProgramming.FILETIME,
    ftLastWriteTime: Windows.Win32.WindowsProgramming.FILETIME,
    nFileSizeHigh: {"kind":"UInt32"},
    nFileSizeLow: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: BY_HANDLE_FILE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const BY_HANDLE_FILE_INFORMATION = extern struct {
    dwFileAttributes: {"kind":"UInt32"},
    ftCreationTime: Windows.Win32.WindowsProgramming.FILETIME,
    ftLastAccessTime: Windows.Win32.WindowsProgramming.FILETIME,
    ftLastWriteTime: Windows.Win32.WindowsProgramming.FILETIME,
    dwVolumeSerialNumber: {"kind":"UInt32"},
    nFileSizeHigh: {"kind":"UInt32"},
    nFileSizeLow: {"kind":"UInt32"},
    nNumberOfLinks: {"kind":"UInt32"},
    nFileIndexHigh: {"kind":"UInt32"},
    nFileIndexLow: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CREATEFILE2_EXTENDED_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CREATEFILE2_EXTENDED_PARAMETERS = extern struct {
    dwSize: {"kind":"UInt32"},
    dwFileAttributes: {"kind":"UInt32"},
    dwFileFlags: {"kind":"UInt32"},
    dwSecurityQosFlags: {"kind":"UInt32"},
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    hTemplateFile: Windows.Win32.SystemServices.HANDLE,
};
// --------------------------------------------------------
// Type: STREAM_INFO_LEVELS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const STREAM_INFO_LEVELS = *opaque{
};
// --------------------------------------------------------
// Type: WIN32_FIND_STREAM_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WIN32_FIND_STREAM_DATA = extern struct {
    StreamSize: Windows.Win32.SystemServices.LARGE_INTEGER,
    cStreamName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: EFS_CERTIFICATE_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EFS_CERTIFICATE_BLOB = extern struct {
    dwCertEncodingType: {"kind":"UInt32"},
    cbData: {"kind":"UInt32"},
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: EFS_HASH_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EFS_HASH_BLOB = extern struct {
    cbData: {"kind":"UInt32"},
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: EFS_RPC_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EFS_RPC_BLOB = extern struct {
    cbData: {"kind":"UInt32"},
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: EFS_PIN_BLOB
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EFS_PIN_BLOB = extern struct {
    cbPadding: {"kind":"UInt32"},
    cbData: {"kind":"UInt32"},
    pbData: {"kind""Ptr","child":{"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: EFS_KEY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EFS_KEY_INFO = extern struct {
    dwVersion: {"kind":"UInt32"},
    Entropy: {"kind":"UInt32"},
    Algorithm: {"kind":"UInt32"},
    KeyLength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: EFS_COMPATIBILITY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EFS_COMPATIBILITY_INFO = extern struct {
    EfsVersion: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: EFS_VERSION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EFS_VERSION_INFO = extern struct {
    EfsVersion: {"kind":"UInt32"},
    SubVersion: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: EFS_DECRYPTION_STATUS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EFS_DECRYPTION_STATUS_INFO = extern struct {
    dwDecryptionError: {"kind":"UInt32"},
    dwHashOffset: {"kind":"UInt32"},
    cbHash: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: EFS_ENCRYPTION_STATUS_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const EFS_ENCRYPTION_STATUS_INFO = extern struct {
    bHasCurrentKey: Windows.Win32.SystemServices.BOOL,
    dwEncryptionError: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: ENCRYPTION_CERTIFICATE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENCRYPTION_CERTIFICATE = extern struct {
    cbTotalLength: {"kind":"UInt32"},
    pUserSid: {"kind""Ptr","child":Windows.Win32.Security.SID},
    pCertBlob: {"kind""Ptr","child":Windows.Win32.FileSystem.EFS_CERTIFICATE_BLOB},
};
// --------------------------------------------------------
// Type: ENCRYPTION_CERTIFICATE_HASH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENCRYPTION_CERTIFICATE_HASH = extern struct {
    cbTotalLength: {"kind":"UInt32"},
    pUserSid: {"kind""Ptr","child":Windows.Win32.Security.SID},
    pHash: {"kind""Ptr","child":Windows.Win32.FileSystem.EFS_HASH_BLOB},
    lpDisplayInformation: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: ENCRYPTION_CERTIFICATE_HASH_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENCRYPTION_CERTIFICATE_HASH_LIST = extern struct {
    nCert_Hash: {"kind":"UInt32"},
    pUsers: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.FileSystem.ENCRYPTION_CERTIFICATE_HASH}},
};
// --------------------------------------------------------
// Type: ENCRYPTION_CERTIFICATE_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENCRYPTION_CERTIFICATE_LIST = extern struct {
    nUsers: {"kind":"UInt32"},
    pUsers: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.FileSystem.ENCRYPTION_CERTIFICATE}},
};
// --------------------------------------------------------
// Type: ENCRYPTED_FILE_METADATA_SIGNATURE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENCRYPTED_FILE_METADATA_SIGNATURE = extern struct {
    dwEfsAccessType: {"kind":"UInt32"},
    pCertificatesAdded: {"kind""Ptr","child":Windows.Win32.FileSystem.ENCRYPTION_CERTIFICATE_HASH_LIST},
    pEncryptionCertificate: {"kind""Ptr","child":Windows.Win32.FileSystem.ENCRYPTION_CERTIFICATE},
    pEfsStreamSignature: {"kind""Ptr","child":Windows.Win32.FileSystem.EFS_RPC_BLOB},
};
// --------------------------------------------------------
// Type: ENCRYPTION_PROTECTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENCRYPTION_PROTECTOR = extern struct {
    cbTotalLength: {"kind":"UInt32"},
    pUserSid: {"kind""Ptr","child":Windows.Win32.Security.SID},
    lpProtectorDescriptor: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: ENCRYPTION_PROTECTOR_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const ENCRYPTION_PROTECTOR_LIST = extern struct {
    nProtectors: {"kind":"UInt32"},
    pProtectors: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.FileSystem.ENCRYPTION_PROTECTOR}},
};
// --------------------------------------------------------
// Type: NtmsObjectsTypes
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsObjectsTypes = *opaque{
};
// --------------------------------------------------------
// Type: NTMS_ASYNC_IO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_ASYNC_IO = extern struct {
    OperationId: Guid,
    EventId: Guid,
    dwOperationType: {"kind":"UInt32"},
    dwResult: {"kind":"UInt32"},
    dwAsyncState: {"kind":"UInt32"},
    hEvent: Windows.Win32.SystemServices.HANDLE,
    bOnStateChange: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: NtmsAsyncStatus
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsAsyncStatus = *opaque{
};
// --------------------------------------------------------
// Type: NtmsAsyncOperations
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsAsyncOperations = *opaque{
};
// --------------------------------------------------------
// Type: NtmsSessionOptions
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsSessionOptions = *opaque{
};
// --------------------------------------------------------
// Type: NtmsMountOptions
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsMountOptions = *opaque{
};
// --------------------------------------------------------
// Type: NtmsDismountOptions
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsDismountOptions = *opaque{
};
// --------------------------------------------------------
// Type: NtmsMountPriority
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsMountPriority = *opaque{
};
// --------------------------------------------------------
// Type: NTMS_MOUNT_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_MOUNT_INFORMATION = extern struct {
    dwSize: {"kind":"UInt32"},
    lpReserved: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: NtmsAllocateOptions
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsAllocateOptions = *opaque{
};
// --------------------------------------------------------
// Type: NTMS_ALLOCATION_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_ALLOCATION_INFORMATION = extern struct {
    dwSize: {"kind":"UInt32"},
    lpReserved: {"kind""Ptr","child":{"kind":"Void"}},
    AllocatedFrom: Guid,
};
// --------------------------------------------------------
// Type: NtmsCreateOptions
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsCreateOptions = *opaque{
};
// --------------------------------------------------------
// Type: NtmsDriveState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsDriveState = *opaque{
};
// --------------------------------------------------------
// Type: NTMS_DRIVEINFORMATIONA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_DRIVEINFORMATIONA = extern struct {
    Number: {"kind":"UInt32"},
    State: {"kind":"UInt32"},
    DriveType: Guid,
    szDeviceName: {"kind":"Array","child": {"kind":"SByte"}},
    szSerialNumber: {"kind":"Array","child": {"kind":"SByte"}},
    szRevision: {"kind":"Array","child": {"kind":"SByte"}},
    ScsiPort: {"kind":"UInt16"},
    ScsiBus: {"kind":"UInt16"},
    ScsiTarget: {"kind":"UInt16"},
    ScsiLun: {"kind":"UInt16"},
    dwMountCount: {"kind":"UInt32"},
    LastCleanedTs: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    SavedPartitionId: Guid,
    Library: Guid,
    Reserved: Guid,
    dwDeferDismountDelay: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NTMS_DRIVEINFORMATIONW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_DRIVEINFORMATIONW = extern struct {
    Number: {"kind":"UInt32"},
    State: {"kind":"UInt32"},
    DriveType: Guid,
    szDeviceName: {"kind":"Array","child": {"kind":"UInt16"}},
    szSerialNumber: {"kind":"Array","child": {"kind":"UInt16"}},
    szRevision: {"kind":"Array","child": {"kind":"UInt16"}},
    ScsiPort: {"kind":"UInt16"},
    ScsiBus: {"kind":"UInt16"},
    ScsiTarget: {"kind":"UInt16"},
    ScsiLun: {"kind":"UInt16"},
    dwMountCount: {"kind":"UInt32"},
    LastCleanedTs: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    SavedPartitionId: Guid,
    Library: Guid,
    Reserved: Guid,
    dwDeferDismountDelay: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NtmsLibraryType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsLibraryType = *opaque{
};
// --------------------------------------------------------
// Type: NtmsLibraryFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsLibraryFlags = *opaque{
};
// --------------------------------------------------------
// Type: NtmsInventoryMethod
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsInventoryMethod = *opaque{
};
// --------------------------------------------------------
// Type: NTMS_LIBRARYINFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_LIBRARYINFORMATION = extern struct {
    LibraryType: {"kind":"UInt32"},
    CleanerSlot: Guid,
    CleanerSlotDefault: Guid,
    LibrarySupportsDriveCleaning: Windows.Win32.SystemServices.BOOL,
    BarCodeReaderInstalled: Windows.Win32.SystemServices.BOOL,
    InventoryMethod: {"kind":"UInt32"},
    dwCleanerUsesRemaining: {"kind":"UInt32"},
    FirstDriveNumber: {"kind":"UInt32"},
    dwNumberOfDrives: {"kind":"UInt32"},
    FirstSlotNumber: {"kind":"UInt32"},
    dwNumberOfSlots: {"kind":"UInt32"},
    FirstDoorNumber: {"kind":"UInt32"},
    dwNumberOfDoors: {"kind":"UInt32"},
    FirstPortNumber: {"kind":"UInt32"},
    dwNumberOfPorts: {"kind":"UInt32"},
    FirstChangerNumber: {"kind":"UInt32"},
    dwNumberOfChangers: {"kind":"UInt32"},
    dwNumberOfMedia: {"kind":"UInt32"},
    dwNumberOfMediaTypes: {"kind":"UInt32"},
    dwNumberOfLibRequests: {"kind":"UInt32"},
    Reserved: Guid,
    AutoRecovery: Windows.Win32.SystemServices.BOOL,
    dwFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NTMS_CHANGERINFORMATIONA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_CHANGERINFORMATIONA = extern struct {
    Number: {"kind":"UInt32"},
    ChangerType: Guid,
    szSerialNumber: {"kind":"Array","child": {"kind":"SByte"}},
    szRevision: {"kind":"Array","child": {"kind":"SByte"}},
    szDeviceName: {"kind":"Array","child": {"kind":"SByte"}},
    ScsiPort: {"kind":"UInt16"},
    ScsiBus: {"kind":"UInt16"},
    ScsiTarget: {"kind":"UInt16"},
    ScsiLun: {"kind":"UInt16"},
    Library: Guid,
};
// --------------------------------------------------------
// Type: NTMS_CHANGERINFORMATIONW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_CHANGERINFORMATIONW = extern struct {
    Number: {"kind":"UInt32"},
    ChangerType: Guid,
    szSerialNumber: {"kind":"Array","child": {"kind":"UInt16"}},
    szRevision: {"kind":"Array","child": {"kind":"UInt16"}},
    szDeviceName: {"kind":"Array","child": {"kind":"UInt16"}},
    ScsiPort: {"kind":"UInt16"},
    ScsiBus: {"kind":"UInt16"},
    ScsiTarget: {"kind":"UInt16"},
    ScsiLun: {"kind":"UInt16"},
    Library: Guid,
};
// --------------------------------------------------------
// Type: NtmsSlotState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsSlotState = *opaque{
};
// --------------------------------------------------------
// Type: NTMS_STORAGESLOTINFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_STORAGESLOTINFORMATION = extern struct {
    Number: {"kind":"UInt32"},
    State: {"kind":"UInt32"},
    Library: Guid,
};
// --------------------------------------------------------
// Type: NtmsDoorState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsDoorState = *opaque{
};
// --------------------------------------------------------
// Type: NTMS_IEDOORINFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_IEDOORINFORMATION = extern struct {
    Number: {"kind":"UInt32"},
    State: {"kind":"UInt32"},
    MaxOpenSecs: {"kind":"UInt16"},
    Library: Guid,
};
// --------------------------------------------------------
// Type: NtmsPortPosition
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsPortPosition = *opaque{
};
// --------------------------------------------------------
// Type: NtmsPortContent
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsPortContent = *opaque{
};
// --------------------------------------------------------
// Type: NTMS_IEPORTINFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_IEPORTINFORMATION = extern struct {
    Number: {"kind":"UInt32"},
    Content: {"kind":"UInt32"},
    Position: {"kind":"UInt32"},
    MaxExtendSecs: {"kind":"UInt16"},
    Library: Guid,
};
// --------------------------------------------------------
// Type: NtmsBarCodeState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsBarCodeState = *opaque{
};
// --------------------------------------------------------
// Type: NtmsMediaState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsMediaState = *opaque{
};
// --------------------------------------------------------
// Type: NTMS_PMIDINFORMATIONA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_PMIDINFORMATIONA = extern struct {
    CurrentLibrary: Guid,
    MediaPool: Guid,
    Location: Guid,
    LocationType: {"kind":"UInt32"},
    MediaType: Guid,
    HomeSlot: Guid,
    szBarCode: {"kind":"Array","child": {"kind":"SByte"}},
    BarCodeState: {"kind":"UInt32"},
    szSequenceNumber: {"kind":"Array","child": {"kind":"SByte"}},
    MediaState: {"kind":"UInt32"},
    dwNumberOfPartitions: {"kind":"UInt32"},
    dwMediaTypeCode: {"kind":"UInt32"},
    dwDensityCode: {"kind":"UInt32"},
    MountedPartition: Guid,
};
// --------------------------------------------------------
// Type: NTMS_PMIDINFORMATIONW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_PMIDINFORMATIONW = extern struct {
    CurrentLibrary: Guid,
    MediaPool: Guid,
    Location: Guid,
    LocationType: {"kind":"UInt32"},
    MediaType: Guid,
    HomeSlot: Guid,
    szBarCode: {"kind":"Array","child": {"kind":"UInt16"}},
    BarCodeState: {"kind":"UInt32"},
    szSequenceNumber: {"kind":"Array","child": {"kind":"UInt16"}},
    MediaState: {"kind":"UInt32"},
    dwNumberOfPartitions: {"kind":"UInt32"},
    dwMediaTypeCode: {"kind":"UInt32"},
    dwDensityCode: {"kind":"UInt32"},
    MountedPartition: Guid,
};
// --------------------------------------------------------
// Type: NTMS_LMIDINFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_LMIDINFORMATION = extern struct {
    MediaPool: Guid,
    dwNumberOfPartitions: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NtmsPartitionState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsPartitionState = *opaque{
};
// --------------------------------------------------------
// Type: NTMS_PARTITIONINFORMATIONA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_PARTITIONINFORMATIONA = extern struct {
    PhysicalMedia: Guid,
    LogicalMedia: Guid,
    State: {"kind":"UInt32"},
    Side: {"kind":"UInt16"},
    dwOmidLabelIdLength: {"kind":"UInt32"},
    OmidLabelId: {"kind":"Array","child": {"kind":"Byte"}},
    szOmidLabelType: {"kind":"Array","child": {"kind":"SByte"}},
    szOmidLabelInfo: {"kind":"Array","child": {"kind":"SByte"}},
    dwMountCount: {"kind":"UInt32"},
    dwAllocateCount: {"kind":"UInt32"},
    Capacity: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: NTMS_PARTITIONINFORMATIONW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_PARTITIONINFORMATIONW = extern struct {
    PhysicalMedia: Guid,
    LogicalMedia: Guid,
    State: {"kind":"UInt32"},
    Side: {"kind":"UInt16"},
    dwOmidLabelIdLength: {"kind":"UInt32"},
    OmidLabelId: {"kind":"Array","child": {"kind":"Byte"}},
    szOmidLabelType: {"kind":"Array","child": {"kind":"UInt16"}},
    szOmidLabelInfo: {"kind":"Array","child": {"kind":"UInt16"}},
    dwMountCount: {"kind":"UInt32"},
    dwAllocateCount: {"kind":"UInt32"},
    Capacity: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: NtmsPoolType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsPoolType = *opaque{
};
// --------------------------------------------------------
// Type: NtmsAllocationPolicy
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsAllocationPolicy = *opaque{
};
// --------------------------------------------------------
// Type: NtmsDeallocationPolicy
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsDeallocationPolicy = *opaque{
};
// --------------------------------------------------------
// Type: NTMS_MEDIAPOOLINFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_MEDIAPOOLINFORMATION = extern struct {
    PoolType: {"kind":"UInt32"},
    MediaType: Guid,
    Parent: Guid,
    AllocationPolicy: {"kind":"UInt32"},
    DeallocationPolicy: {"kind":"UInt32"},
    dwMaxAllocates: {"kind":"UInt32"},
    dwNumberOfPhysicalMedia: {"kind":"UInt32"},
    dwNumberOfLogicalMedia: {"kind":"UInt32"},
    dwNumberOfMediaPools: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NtmsReadWriteCharacteristics
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsReadWriteCharacteristics = *opaque{
};
// --------------------------------------------------------
// Type: NTMS_MEDIATYPEINFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_MEDIATYPEINFORMATION = extern struct {
    MediaType: {"kind":"UInt32"},
    NumberOfSides: {"kind":"UInt32"},
    ReadWriteCharacteristics: {"kind":"UInt32"},
    DeviceType: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NTMS_DRIVETYPEINFORMATIONA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_DRIVETYPEINFORMATIONA = extern struct {
    szVendor: {"kind":"Array","child": {"kind":"SByte"}},
    szProduct: {"kind":"Array","child": {"kind":"SByte"}},
    NumberOfHeads: {"kind":"UInt32"},
    DeviceType: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NTMS_DRIVETYPEINFORMATIONW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_DRIVETYPEINFORMATIONW = extern struct {
    szVendor: {"kind":"Array","child": {"kind":"UInt16"}},
    szProduct: {"kind":"Array","child": {"kind":"UInt16"}},
    NumberOfHeads: {"kind":"UInt32"},
    DeviceType: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NTMS_CHANGERTYPEINFORMATIONA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_CHANGERTYPEINFORMATIONA = extern struct {
    szVendor: {"kind":"Array","child": {"kind":"SByte"}},
    szProduct: {"kind":"Array","child": {"kind":"SByte"}},
    DeviceType: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NTMS_CHANGERTYPEINFORMATIONW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_CHANGERTYPEINFORMATIONW = extern struct {
    szVendor: {"kind":"Array","child": {"kind":"UInt16"}},
    szProduct: {"kind":"Array","child": {"kind":"UInt16"}},
    DeviceType: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NtmsLmOperation
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsLmOperation = *opaque{
};
// --------------------------------------------------------
// Type: NtmsLmState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsLmState = *opaque{
};
// --------------------------------------------------------
// Type: NTMS_LIBREQUESTINFORMATIONA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_LIBREQUESTINFORMATIONA = extern struct {
    OperationCode: {"kind":"UInt32"},
    OperationOption: {"kind":"UInt32"},
    State: {"kind":"UInt32"},
    PartitionId: Guid,
    DriveId: Guid,
    PhysMediaId: Guid,
    Library: Guid,
    SlotId: Guid,
    TimeQueued: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    TimeCompleted: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    szApplication: {"kind":"Array","child": {"kind":"SByte"}},
    szUser: {"kind":"Array","child": {"kind":"SByte"}},
    szComputer: {"kind":"Array","child": {"kind":"SByte"}},
    dwErrorCode: {"kind":"UInt32"},
    WorkItemId: Guid,
    dwPriority: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NTMS_LIBREQUESTINFORMATIONW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_LIBREQUESTINFORMATIONW = extern struct {
    OperationCode: {"kind":"UInt32"},
    OperationOption: {"kind":"UInt32"},
    State: {"kind":"UInt32"},
    PartitionId: Guid,
    DriveId: Guid,
    PhysMediaId: Guid,
    Library: Guid,
    SlotId: Guid,
    TimeQueued: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    TimeCompleted: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    szApplication: {"kind":"Array","child": {"kind":"UInt16"}},
    szUser: {"kind":"Array","child": {"kind":"UInt16"}},
    szComputer: {"kind":"Array","child": {"kind":"UInt16"}},
    dwErrorCode: {"kind":"UInt32"},
    WorkItemId: Guid,
    dwPriority: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NtmsOpreqCommand
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsOpreqCommand = *opaque{
};
// --------------------------------------------------------
// Type: NtmsOpreqState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsOpreqState = *opaque{
};
// --------------------------------------------------------
// Type: NTMS_OPREQUESTINFORMATIONA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_OPREQUESTINFORMATIONA = extern struct {
    Request: {"kind":"UInt32"},
    Submitted: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    State: {"kind":"UInt32"},
    szMessage: {"kind":"Array","child": {"kind":"SByte"}},
    Arg1Type: {"kind":"UInt32"},
    Arg1: Guid,
    Arg2Type: {"kind":"UInt32"},
    Arg2: Guid,
    szApplication: {"kind":"Array","child": {"kind":"SByte"}},
    szUser: {"kind":"Array","child": {"kind":"SByte"}},
    szComputer: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: NTMS_OPREQUESTINFORMATIONW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_OPREQUESTINFORMATIONW = extern struct {
    Request: {"kind":"UInt32"},
    Submitted: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    State: {"kind":"UInt32"},
    szMessage: {"kind":"Array","child": {"kind":"UInt16"}},
    Arg1Type: {"kind":"UInt32"},
    Arg1: Guid,
    Arg2Type: {"kind":"UInt32"},
    Arg2: Guid,
    szApplication: {"kind":"Array","child": {"kind":"UInt16"}},
    szUser: {"kind":"Array","child": {"kind":"UInt16"}},
    szComputer: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: NTMS_COMPUTERINFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_COMPUTERINFORMATION = extern struct {
    dwLibRequestPurgeTime: {"kind":"UInt32"},
    dwOpRequestPurgeTime: {"kind":"UInt32"},
    dwLibRequestFlags: {"kind":"UInt32"},
    dwOpRequestFlags: {"kind":"UInt32"},
    dwMediaPoolPolicy: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NtmsLibRequestFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsLibRequestFlags = *opaque{
};
// --------------------------------------------------------
// Type: NtmsOpRequestFlags
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsOpRequestFlags = *opaque{
};
// --------------------------------------------------------
// Type: NtmsMediaPoolPolicy
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsMediaPoolPolicy = *opaque{
};
// --------------------------------------------------------
// Type: NtmsOperationalState
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsOperationalState = *opaque{
};
// --------------------------------------------------------
// Type: NTMS_OBJECTINFORMATIONA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_OBJECTINFORMATIONA = extern struct {
    dwSize: {"kind":"UInt32"},
    dwType: {"kind":"UInt32"},
    Created: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    Modified: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    ObjectGuid: Guid,
    Enabled: Windows.Win32.SystemServices.BOOL,
    dwOperationalState: {"kind":"UInt32"},
    szName: {"kind":"Array","child": {"kind":"SByte"}},
    szDescription: {"kind":"Array","child": {"kind":"SByte"}},
    Info: Windows.Win32.FileSystem.NTMS_OBJECTINFORMATIONA+_Info_e__Union,
    // --------------------------------------------------------
    // Type: _Info_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Info_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: NTMS_OBJECTINFORMATIONW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_OBJECTINFORMATIONW = extern struct {
    dwSize: {"kind":"UInt32"},
    dwType: {"kind":"UInt32"},
    Created: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    Modified: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    ObjectGuid: Guid,
    Enabled: Windows.Win32.SystemServices.BOOL,
    dwOperationalState: {"kind":"UInt32"},
    szName: {"kind":"Array","child": {"kind":"UInt16"}},
    szDescription: {"kind":"Array","child": {"kind":"UInt16"}},
    Info: Windows.Win32.FileSystem.NTMS_OBJECTINFORMATIONW+_Info_e__Union,
    // --------------------------------------------------------
    // Type: _Info_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Info_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: NTMS_I1_LIBRARYINFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_I1_LIBRARYINFORMATION = extern struct {
    LibraryType: {"kind":"UInt32"},
    CleanerSlot: Guid,
    CleanerSlotDefault: Guid,
    LibrarySupportsDriveCleaning: Windows.Win32.SystemServices.BOOL,
    BarCodeReaderInstalled: Windows.Win32.SystemServices.BOOL,
    InventoryMethod: {"kind":"UInt32"},
    dwCleanerUsesRemaining: {"kind":"UInt32"},
    FirstDriveNumber: {"kind":"UInt32"},
    dwNumberOfDrives: {"kind":"UInt32"},
    FirstSlotNumber: {"kind":"UInt32"},
    dwNumberOfSlots: {"kind":"UInt32"},
    FirstDoorNumber: {"kind":"UInt32"},
    dwNumberOfDoors: {"kind":"UInt32"},
    FirstPortNumber: {"kind":"UInt32"},
    dwNumberOfPorts: {"kind":"UInt32"},
    FirstChangerNumber: {"kind":"UInt32"},
    dwNumberOfChangers: {"kind":"UInt32"},
    dwNumberOfMedia: {"kind":"UInt32"},
    dwNumberOfMediaTypes: {"kind":"UInt32"},
    dwNumberOfLibRequests: {"kind":"UInt32"},
    Reserved: Guid,
};
// --------------------------------------------------------
// Type: NTMS_I1_LIBREQUESTINFORMATIONA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_I1_LIBREQUESTINFORMATIONA = extern struct {
    OperationCode: {"kind":"UInt32"},
    OperationOption: {"kind":"UInt32"},
    State: {"kind":"UInt32"},
    PartitionId: Guid,
    DriveId: Guid,
    PhysMediaId: Guid,
    Library: Guid,
    SlotId: Guid,
    TimeQueued: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    TimeCompleted: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    szApplication: {"kind":"Array","child": {"kind":"SByte"}},
    szUser: {"kind":"Array","child": {"kind":"SByte"}},
    szComputer: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: NTMS_I1_LIBREQUESTINFORMATIONW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_I1_LIBREQUESTINFORMATIONW = extern struct {
    OperationCode: {"kind":"UInt32"},
    OperationOption: {"kind":"UInt32"},
    State: {"kind":"UInt32"},
    PartitionId: Guid,
    DriveId: Guid,
    PhysMediaId: Guid,
    Library: Guid,
    SlotId: Guid,
    TimeQueued: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    TimeCompleted: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    szApplication: {"kind":"Array","child": {"kind":"UInt16"}},
    szUser: {"kind":"Array","child": {"kind":"UInt16"}},
    szComputer: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: NTMS_I1_PMIDINFORMATIONA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_I1_PMIDINFORMATIONA = extern struct {
    CurrentLibrary: Guid,
    MediaPool: Guid,
    Location: Guid,
    LocationType: {"kind":"UInt32"},
    MediaType: Guid,
    HomeSlot: Guid,
    szBarCode: {"kind":"Array","child": {"kind":"SByte"}},
    BarCodeState: {"kind":"UInt32"},
    szSequenceNumber: {"kind":"Array","child": {"kind":"SByte"}},
    MediaState: {"kind":"UInt32"},
    dwNumberOfPartitions: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NTMS_I1_PMIDINFORMATIONW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_I1_PMIDINFORMATIONW = extern struct {
    CurrentLibrary: Guid,
    MediaPool: Guid,
    Location: Guid,
    LocationType: {"kind":"UInt32"},
    MediaType: Guid,
    HomeSlot: Guid,
    szBarCode: {"kind":"Array","child": {"kind":"UInt16"}},
    BarCodeState: {"kind":"UInt32"},
    szSequenceNumber: {"kind":"Array","child": {"kind":"UInt16"}},
    MediaState: {"kind":"UInt32"},
    dwNumberOfPartitions: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NTMS_I1_PARTITIONINFORMATIONA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_I1_PARTITIONINFORMATIONA = extern struct {
    PhysicalMedia: Guid,
    LogicalMedia: Guid,
    State: {"kind":"UInt32"},
    Side: {"kind":"UInt16"},
    dwOmidLabelIdLength: {"kind":"UInt32"},
    OmidLabelId: {"kind":"Array","child": {"kind":"Byte"}},
    szOmidLabelType: {"kind":"Array","child": {"kind":"SByte"}},
    szOmidLabelInfo: {"kind":"Array","child": {"kind":"SByte"}},
    dwMountCount: {"kind":"UInt32"},
    dwAllocateCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NTMS_I1_PARTITIONINFORMATIONW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_I1_PARTITIONINFORMATIONW = extern struct {
    PhysicalMedia: Guid,
    LogicalMedia: Guid,
    State: {"kind":"UInt32"},
    Side: {"kind":"UInt16"},
    dwOmidLabelIdLength: {"kind":"UInt32"},
    OmidLabelId: {"kind":"Array","child": {"kind":"Byte"}},
    szOmidLabelType: {"kind":"Array","child": {"kind":"UInt16"}},
    szOmidLabelInfo: {"kind":"Array","child": {"kind":"UInt16"}},
    dwMountCount: {"kind":"UInt32"},
    dwAllocateCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NTMS_I1_OPREQUESTINFORMATIONA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_I1_OPREQUESTINFORMATIONA = extern struct {
    Request: {"kind":"UInt32"},
    Submitted: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    State: {"kind":"UInt32"},
    szMessage: {"kind":"Array","child": {"kind":"SByte"}},
    Arg1Type: {"kind":"UInt32"},
    Arg1: Guid,
    Arg2Type: {"kind":"UInt32"},
    Arg2: Guid,
    szApplication: {"kind":"Array","child": {"kind":"SByte"}},
    szUser: {"kind":"Array","child": {"kind":"SByte"}},
    szComputer: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: NTMS_I1_OPREQUESTINFORMATIONW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_I1_OPREQUESTINFORMATIONW = extern struct {
    Request: {"kind":"UInt32"},
    Submitted: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    State: {"kind":"UInt32"},
    szMessage: {"kind":"Array","child": {"kind":"UInt16"}},
    Arg1Type: {"kind":"UInt32"},
    Arg1: Guid,
    Arg2Type: {"kind":"UInt32"},
    Arg2: Guid,
    szApplication: {"kind":"Array","child": {"kind":"UInt16"}},
    szUser: {"kind":"Array","child": {"kind":"UInt16"}},
    szComputer: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: NTMS_I1_OBJECTINFORMATIONA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_I1_OBJECTINFORMATIONA = extern struct {
    dwSize: {"kind":"UInt32"},
    dwType: {"kind":"UInt32"},
    Created: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    Modified: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    ObjectGuid: Guid,
    Enabled: Windows.Win32.SystemServices.BOOL,
    dwOperationalState: {"kind":"UInt32"},
    szName: {"kind":"Array","child": {"kind":"SByte"}},
    szDescription: {"kind":"Array","child": {"kind":"SByte"}},
    Info: Windows.Win32.FileSystem.NTMS_I1_OBJECTINFORMATIONA+_Info_e__Union,
    // --------------------------------------------------------
    // Type: _Info_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Info_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: NTMS_I1_OBJECTINFORMATIONW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_I1_OBJECTINFORMATIONW = extern struct {
    dwSize: {"kind":"UInt32"},
    dwType: {"kind":"UInt32"},
    Created: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    Modified: Windows.Win32.WindowsProgramming.SYSTEMTIME,
    ObjectGuid: Guid,
    Enabled: Windows.Win32.SystemServices.BOOL,
    dwOperationalState: {"kind":"UInt32"},
    szName: {"kind":"Array","child": {"kind":"UInt16"}},
    szDescription: {"kind":"Array","child": {"kind":"UInt16"}},
    Info: Windows.Win32.FileSystem.NTMS_I1_OBJECTINFORMATIONW+_Info_e__Union,
    // --------------------------------------------------------
    // Type: _Info_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Info_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: NtmsCreateNtmsMediaOptions
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsCreateNtmsMediaOptions = *opaque{
};
// --------------------------------------------------------
// Type: NtmsEnumerateOption
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsEnumerateOption = *opaque{
};
// --------------------------------------------------------
// Type: NtmsEjectOperation
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsEjectOperation = *opaque{
};
// --------------------------------------------------------
// Type: NtmsInjectOperation
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsInjectOperation = *opaque{
};
// --------------------------------------------------------
// Type: NTMS_FILESYSTEM_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_FILESYSTEM_INFO = extern struct {
    FileSystemType: {"kind":"Array","child": {"kind":"UInt16"}},
    VolumeName: {"kind":"Array","child": {"kind":"UInt16"}},
    SerialNumber: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: NtmsDriveType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsDriveType = *opaque{
};
// --------------------------------------------------------
// Type: NtmsAccessMask
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsAccessMask = *opaque{
};
// --------------------------------------------------------
// Type: NtmsUITypes
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsUITypes = *opaque{
};
// --------------------------------------------------------
// Type: NtmsUIOperations
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsUIOperations = *opaque{
};
// --------------------------------------------------------
// Type: NtmsNotificationOperations
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NtmsNotificationOperations = *opaque{
};
// --------------------------------------------------------
// Type: NTMS_NOTIFICATIONINFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NTMS_NOTIFICATIONINFORMATION = extern struct {
    dwOperation: {"kind":"UInt32"},
    ObjectId: Guid,
};
// --------------------------------------------------------
// Type: MediaLabelInfo
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MediaLabelInfo = extern struct {
    LabelType: {"kind":"Array","child": {"kind":"UInt16"}},
    LabelIDSize: {"kind":"UInt32"},
    LabelID: {"kind":"Array","child": {"kind":"Byte"}},
    LabelAppDescr: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: MAXMEDIALABEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MAXMEDIALABEL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CLAIMMEDIALABEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CLAIMMEDIALABEL = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CLAIMMEDIALABELEX
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CLAIMMEDIALABELEX = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CLS_LSN
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLS_LSN = extern struct {
    Internal: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: CLS_CONTEXT_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CLS_CONTEXT_MODE = *opaque{
};
// --------------------------------------------------------
// Type: CLFS_CONTEXT_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CLFS_CONTEXT_MODE = *opaque{
};
// --------------------------------------------------------
// Type: CLFS_NODE_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLFS_NODE_ID = extern struct {
    cType: {"kind":"UInt32"},
    cbNode: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CLS_WRITE_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLS_WRITE_ENTRY = extern struct {
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},
    ByteLength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CLS_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLS_INFORMATION = extern struct {
    TotalAvailable: {"kind":"Int64"},
    CurrentAvailable: {"kind":"Int64"},
    TotalReservation: {"kind":"Int64"},
    BaseFileSize: {"kind":"UInt64"},
    ContainerSize: {"kind":"UInt64"},
    TotalContainers: {"kind":"UInt32"},
    FreeContainers: {"kind":"UInt32"},
    TotalClients: {"kind":"UInt32"},
    Attributes: {"kind":"UInt32"},
    FlushThreshold: {"kind":"UInt32"},
    SectorSize: {"kind":"UInt32"},
    MinArchiveTailLsn: Windows.Win32.FileSystem.CLS_LSN,
    BaseLsn: Windows.Win32.FileSystem.CLS_LSN,
    LastFlushedLsn: Windows.Win32.FileSystem.CLS_LSN,
    LastLsn: Windows.Win32.FileSystem.CLS_LSN,
    RestartLsn: Windows.Win32.FileSystem.CLS_LSN,
    Identity: Guid,
};
// --------------------------------------------------------
// Type: CLFS_LOG_NAME_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLFS_LOG_NAME_INFORMATION = extern struct {
    NameLengthInBytes: {"kind":"UInt16"},
    Name: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: CLFS_STREAM_ID_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLFS_STREAM_ID_INFORMATION = extern struct {
    StreamIdentifier: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: CLFS_PHYSICAL_LSN_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLFS_PHYSICAL_LSN_INFORMATION = extern struct {
    StreamIdentifier: {"kind":"Byte"},
    VirtualLsn: Windows.Win32.FileSystem.CLS_LSN,
    PhysicalLsn: Windows.Win32.FileSystem.CLS_LSN,
};
// --------------------------------------------------------
// Type: CLS_CONTAINER_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLS_CONTAINER_INFORMATION = extern struct {
    FileAttributes: {"kind":"UInt32"},
    CreationTime: {"kind":"UInt64"},
    LastAccessTime: {"kind":"UInt64"},
    LastWriteTime: {"kind":"UInt64"},
    ContainerSize: {"kind":"Int64"},
    FileNameActualLength: {"kind":"UInt32"},
    FileNameLength: {"kind":"UInt32"},
    FileName: {"kind":"Array","child": {"kind":"UInt16"}},
    State: {"kind":"UInt32"},
    PhysicalContainerId: {"kind":"UInt32"},
    LogicalContainerId: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CLS_LOG_INFORMATION_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CLS_LOG_INFORMATION_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: CLS_IOSTATS_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CLS_IOSTATS_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: CLFS_IOSTATS_CLASS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CLFS_IOSTATS_CLASS = *opaque{
};
// --------------------------------------------------------
// Type: CLS_IO_STATISTICS_HEADER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLS_IO_STATISTICS_HEADER = extern struct {
    ubMajorVersion: {"kind":"Byte"},
    ubMinorVersion: {"kind":"Byte"},
    eStatsClass: Windows.Win32.FileSystem.CLFS_IOSTATS_CLASS,
    cbLength: {"kind":"UInt16"},
    coffData: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CLS_IO_STATISTICS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLS_IO_STATISTICS = extern struct {
    hdrIoStats: Windows.Win32.FileSystem.CLS_IO_STATISTICS_HEADER,
    cFlush: {"kind":"UInt64"},
    cbFlush: {"kind":"UInt64"},
    cMetaFlush: {"kind":"UInt64"},
    cbMetaFlush: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: CLS_SCAN_CONTEXT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLS_SCAN_CONTEXT = extern struct {
    cidNode: Windows.Win32.FileSystem.CLFS_NODE_ID,
    hLog: Windows.Win32.SystemServices.HANDLE,
    cIndex: {"kind":"UInt32"},
    cContainers: {"kind":"UInt32"},
    cContainersReturned: {"kind":"UInt32"},
    eScanMode: {"kind":"Byte"},
    pinfoContainer: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_CONTAINER_INFORMATION},
};
// --------------------------------------------------------
// Type: CLS_ARCHIVE_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLS_ARCHIVE_DESCRIPTOR = extern struct {
    coffLow: {"kind":"UInt64"},
    coffHigh: {"kind":"UInt64"},
    infoContainer: Windows.Win32.FileSystem.CLS_CONTAINER_INFORMATION,
};
// --------------------------------------------------------
// Type: CLFS_BLOCK_ALLOCATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CLFS_BLOCK_ALLOCATION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CLFS_BLOCK_DEALLOCATION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CLFS_BLOCK_DEALLOCATION = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CLFS_LOG_ARCHIVE_MODE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CLFS_LOG_ARCHIVE_MODE = *opaque{
};
// --------------------------------------------------------
// Type: PCLFS_COMPLETION_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PCLFS_COMPLETION_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: CLFS_MGMT_POLICY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CLFS_MGMT_POLICY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: CLFS_MGMT_POLICY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLFS_MGMT_POLICY = extern struct {
    Version: {"kind":"UInt32"},
    LengthInBytes: {"kind":"UInt32"},
    PolicyFlags: {"kind":"UInt32"},
    PolicyType: Windows.Win32.FileSystem.CLFS_MGMT_POLICY_TYPE,
    PolicyParameters: Windows.Win32.FileSystem.CLFS_MGMT_POLICY+_PolicyParameters_e__Union,
    // --------------------------------------------------------
    // Type: _PolicyParameters_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _PolicyParameters_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _NewContainerSuffix_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _NewContainerSuffix_e__Struct = extern struct {
            NextContainerSuffix: {"kind":"UInt64"},
        };
        // --------------------------------------------------------
        // Type: _AutoGrow_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _AutoGrow_e__Struct = extern struct {
            Enabled: {"kind":"UInt32"},
        };
        // --------------------------------------------------------
        // Type: _LogTail_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _LogTail_e__Struct = extern struct {
            MinimumAvailablePercentage: {"kind":"UInt32"},
            MinimumAvailableContainers: {"kind":"UInt32"},
        };
        // --------------------------------------------------------
        // Type: _NewContainerSize_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _NewContainerSize_e__Struct = extern struct {
            SizeInBytes: {"kind":"UInt32"},
        };
        // --------------------------------------------------------
        // Type: _MaximumSize_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _MaximumSize_e__Struct = extern struct {
            Containers: {"kind":"UInt32"},
        };
        // --------------------------------------------------------
        // Type: _NewContainerExtension_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _NewContainerExtension_e__Struct = extern struct {
            ExtensionLengthInBytes: {"kind":"UInt16"},
            ExtensionString: {"kind":"Array","child": {"kind":"UInt16"}},
        };
        // --------------------------------------------------------
        // Type: _AutoShrink_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _AutoShrink_e__Struct = extern struct {
            Percentage: {"kind":"UInt32"},
        };
        // --------------------------------------------------------
        // Type: _MinimumSize_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _MinimumSize_e__Struct = extern struct {
            Containers: {"kind":"UInt32"},
        };
        // --------------------------------------------------------
        // Type: _NewContainerPrefix_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _NewContainerPrefix_e__Struct = extern struct {
            PrefixLengthInBytes: {"kind":"UInt16"},
            PrefixString: {"kind":"Array","child": {"kind":"UInt16"}},
        };
        // --------------------------------------------------------
        // Type: _GrowthRate_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _GrowthRate_e__Struct = extern struct {
            AbsoluteGrowthInContainers: {"kind":"UInt32"},
            RelativeGrowthPercentage: {"kind":"UInt32"},
        };
    };
};
// --------------------------------------------------------
// Type: CLFS_MGMT_NOTIFICATION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const CLFS_MGMT_NOTIFICATION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: CLFS_MGMT_NOTIFICATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CLFS_MGMT_NOTIFICATION = extern struct {
    Notification: Windows.Win32.FileSystem.CLFS_MGMT_NOTIFICATION_TYPE,
    Lsn: Windows.Win32.FileSystem.CLS_LSN,
    LogIsPinned: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: PLOG_TAIL_ADVANCE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLOG_TAIL_ADVANCE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLOG_FULL_HANDLER_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLOG_FULL_HANDLER_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PLOG_UNPINNED_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PLOG_UNPINNED_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LOG_MANAGEMENT_CALLBACKS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const LOG_MANAGEMENT_CALLBACKS = extern struct {
    CallbackContext: {"kind""Ptr","child":{"kind":"Void"}},
    AdvanceTailCallback: Windows.Win32.FileSystem.PLOG_TAIL_ADVANCE_CALLBACK,
    LogFullHandlerCallback: Windows.Win32.FileSystem.PLOG_FULL_HANDLER_CALLBACK,
    LogUnpinnedCallback: Windows.Win32.FileSystem.PLOG_UNPINNED_CALLBACK,
};
// --------------------------------------------------------
// Type: DISKQUOTA_USER_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DISKQUOTA_USER_INFORMATION = extern struct {
    QuotaUsed: {"kind":"Int64"},
    QuotaThreshold: {"kind":"Int64"},
    QuotaLimit: {"kind":"Int64"},
};
// --------------------------------------------------------
// Type: IDiskQuotaUser
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDiskQuotaUser = *opaque{
    // TODO: Method 'GetID'
    // TODO: Method 'GetName'
    // TODO: Method 'GetSidLength'
    // TODO: Method 'GetSid'
    // TODO: Method 'GetQuotaThreshold'
    // TODO: Method 'GetQuotaThresholdText'
    // TODO: Method 'GetQuotaLimit'
    // TODO: Method 'GetQuotaLimitText'
    // TODO: Method 'GetQuotaUsed'
    // TODO: Method 'GetQuotaUsedText'
    // TODO: Method 'GetQuotaInformation'
    // TODO: Method 'SetQuotaThreshold'
    // TODO: Method 'SetQuotaLimit'
    // TODO: Method 'Invalidate'
    // TODO: Method 'GetAccountStatus'
};
// --------------------------------------------------------
// Type: IEnumDiskQuotaUsers
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumDiskQuotaUsers = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IDiskQuotaUserBatch
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDiskQuotaUserBatch = *opaque{
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'RemoveAll'
    // TODO: Method 'FlushToDisk'
};
// --------------------------------------------------------
// Type: IDiskQuotaControl
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDiskQuotaControl = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'SetQuotaState'
    // TODO: Method 'GetQuotaState'
    // TODO: Method 'SetQuotaLogFlags'
    // TODO: Method 'GetQuotaLogFlags'
    // TODO: Method 'SetDefaultQuotaThreshold'
    // TODO: Method 'GetDefaultQuotaThreshold'
    // TODO: Method 'GetDefaultQuotaThresholdText'
    // TODO: Method 'SetDefaultQuotaLimit'
    // TODO: Method 'GetDefaultQuotaLimit'
    // TODO: Method 'GetDefaultQuotaLimitText'
    // TODO: Method 'AddUserSid'
    // TODO: Method 'AddUserName'
    // TODO: Method 'DeleteUser'
    // TODO: Method 'FindUserSid'
    // TODO: Method 'FindUserName'
    // TODO: Method 'CreateEnumUsers'
    // TODO: Method 'CreateUserBatch'
    // TODO: Method 'InvalidateSidNameCache'
    // TODO: Method 'GiveUserNameResolutionPriority'
    // TODO: Method 'ShutdownNameResolution'
};
// --------------------------------------------------------
// Type: IDiskQuotaEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDiskQuotaEvents = *opaque{
    // TODO: Method 'OnUserNameChanged'
};
// --------------------------------------------------------
// Type: WofEnumEntryProc
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WofEnumEntryProc = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WofEnumFilesProc
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const WofEnumFilesProc = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: WIM_ENTRY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WIM_ENTRY_INFO = extern struct {
    WimEntryInfoSize: {"kind":"UInt32"},
    WimType: {"kind":"UInt32"},
    DataSourceId: Windows.Win32.SystemServices.LARGE_INTEGER,
    WimGuid: Guid,
    WimPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    WimIndex: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: WIM_EXTERNAL_FILE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WIM_EXTERNAL_FILE_INFO = extern struct {
    DataSourceId: Windows.Win32.SystemServices.LARGE_INTEGER,
    ResourceHash: {"kind":"Array","child": {"kind":"Byte"}},
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: WOF_FILE_COMPRESSION_INFO_V0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WOF_FILE_COMPRESSION_INFO_V0 = extern struct {
    Algorithm: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: WOF_FILE_COMPRESSION_INFO_V1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const WOF_FILE_COMPRESSION_INFO_V1 = extern struct {
    Algorithm: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: TXF_ID
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TXF_ID = extern struct {
    Anonymous: Windows.Win32.FileSystem.TXF_ID+_Anonymous_e__Struct,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Struct
    // TypeLayoutAttr: sequential
    // not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
    pub const _Anonymous_e__Struct = *opaque{
    };
};
// --------------------------------------------------------
// Type: TXF_LOG_RECORD_BASE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TXF_LOG_RECORD_BASE = extern struct {
    Version: {"kind":"UInt16"},
    RecordType: {"kind":"UInt16"},
    RecordLength: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: TXF_LOG_RECORD_WRITE
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const TXF_LOG_RECORD_WRITE = *opaque{
};
// --------------------------------------------------------
// Type: TXF_LOG_RECORD_TRUNCATE
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=4 Size=0
pub const TXF_LOG_RECORD_TRUNCATE = *opaque{
};
// --------------------------------------------------------
// Type: TXF_LOG_RECORD_AFFECTED_FILE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const TXF_LOG_RECORD_AFFECTED_FILE = extern struct {
    Version: {"kind":"UInt16"},
    RecordLength: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    TxfFileId: Windows.Win32.FileSystem.TXF_ID,
    KtmGuid: Guid,
    FileNameLength: {"kind":"UInt32"},
    FileNameByteOffsetInStructure: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VOLUME_FAILOVER_SET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VOLUME_FAILOVER_SET = extern struct {
    NumberOfDisks: {"kind":"UInt32"},
    DiskNumbers: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: VOLUME_NUMBER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VOLUME_NUMBER = extern struct {
    VolumeNumber: {"kind":"UInt32"},
    VolumeManagerName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: VOLUME_LOGICAL_OFFSET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VOLUME_LOGICAL_OFFSET = extern struct {
    LogicalOffset: {"kind":"Int64"},
};
// --------------------------------------------------------
// Type: VOLUME_PHYSICAL_OFFSET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VOLUME_PHYSICAL_OFFSET = extern struct {
    DiskNumber: {"kind":"UInt32"},
    Offset: {"kind":"Int64"},
};
// --------------------------------------------------------
// Type: VOLUME_PHYSICAL_OFFSETS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VOLUME_PHYSICAL_OFFSETS = extern struct {
    NumberOfPhysicalOffsets: {"kind":"UInt32"},
    PhysicalOffset: {"kind":"Array","child": Windows.Win32.FileSystem.VOLUME_PHYSICAL_OFFSET},
};
// --------------------------------------------------------
// Type: VOLUME_READ_PLEX_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VOLUME_READ_PLEX_INPUT = extern struct {
    ByteOffset: Windows.Win32.SystemServices.LARGE_INTEGER,
    Length: {"kind":"UInt32"},
    PlexNumber: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VOLUME_SET_GPT_ATTRIBUTES_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VOLUME_SET_GPT_ATTRIBUTES_INFORMATION = extern struct {
    GptAttributes: {"kind":"UInt64"},
    RevertOnClose: {"kind":"Byte"},
    ApplyToAllConnectedVolumes: {"kind":"Byte"},
    Reserved1: {"kind":"UInt16"},
    Reserved2: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VOLUME_GET_BC_PROPERTIES_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VOLUME_GET_BC_PROPERTIES_INPUT = extern struct {
    Version: {"kind":"UInt32"},
    Reserved1: {"kind":"UInt32"},
    LowestByteOffset: {"kind":"UInt64"},
    HighestByteOffset: {"kind":"UInt64"},
    AccessType: {"kind":"UInt32"},
    AccessMode: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VOLUME_GET_BC_PROPERTIES_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VOLUME_GET_BC_PROPERTIES_OUTPUT = extern struct {
    MaximumRequestsPerPeriod: {"kind":"UInt32"},
    MinimumPeriod: {"kind":"UInt32"},
    MaximumRequestSize: {"kind":"UInt64"},
    EstimatedTimePerRequest: {"kind":"UInt32"},
    NumOutStandingRequests: {"kind":"UInt32"},
    RequestSize: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: VOLUME_ALLOCATE_BC_STREAM_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VOLUME_ALLOCATE_BC_STREAM_INPUT = extern struct {
    Version: {"kind":"UInt32"},
    RequestsPerPeriod: {"kind":"UInt32"},
    Period: {"kind":"UInt32"},
    RetryFailures: {"kind":"Byte"},
    Discardable: {"kind":"Byte"},
    Reserved1: {"kind":"Array","child": {"kind":"Byte"}},
    LowestByteOffset: {"kind":"UInt64"},
    HighestByteOffset: {"kind":"UInt64"},
    AccessType: {"kind":"UInt32"},
    AccessMode: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: VOLUME_ALLOCATE_BC_STREAM_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VOLUME_ALLOCATE_BC_STREAM_OUTPUT = extern struct {
    RequestSize: {"kind":"UInt64"},
    NumOutStandingRequests: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: FILE_EXTENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_EXTENT = extern struct {
    VolumeOffset: {"kind":"UInt64"},
    ExtentLength: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: VOLUME_CRITICAL_IO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VOLUME_CRITICAL_IO = extern struct {
    AccessType: {"kind":"UInt32"},
    ExtentsCount: {"kind":"UInt32"},
    Extents: {"kind":"Array","child": Windows.Win32.FileSystem.FILE_EXTENT},
};
// --------------------------------------------------------
// Type: VOLUME_ALLOCATION_HINT_INPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VOLUME_ALLOCATION_HINT_INPUT = extern struct {
    ClusterSize: {"kind":"UInt32"},
    NumberOfClusters: {"kind":"UInt32"},
    StartingClusterNumber: {"kind":"Int64"},
};
// --------------------------------------------------------
// Type: VOLUME_ALLOCATION_HINT_OUTPUT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VOLUME_ALLOCATION_HINT_OUTPUT = extern struct {
    Bitmap: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: VOLUME_SHRINK_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const VOLUME_SHRINK_INFO = extern struct {
    VolumeSize: {"kind":"UInt64"},
};
// --------------------------------------------------------
// Type: SHARE_INFO_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SHARE_INFO_0 = extern struct {
    shi0_netname: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SHARE_INFO_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SHARE_INFO_1 = extern struct {
    shi1_netname: {"kind""Ptr","child":{"kind":"UInt16"}},
    shi1_type: {"kind":"UInt32"},
    shi1_remark: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SHARE_INFO_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SHARE_INFO_2 = extern struct {
    shi2_netname: {"kind""Ptr","child":{"kind":"UInt16"}},
    shi2_type: {"kind":"UInt32"},
    shi2_remark: {"kind""Ptr","child":{"kind":"UInt16"}},
    shi2_permissions: {"kind":"UInt32"},
    shi2_max_uses: {"kind":"UInt32"},
    shi2_current_uses: {"kind":"UInt32"},
    shi2_path: {"kind""Ptr","child":{"kind":"UInt16"}},
    shi2_passwd: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SHARE_INFO_501
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SHARE_INFO_501 = extern struct {
    shi501_netname: {"kind""Ptr","child":{"kind":"UInt16"}},
    shi501_type: {"kind":"UInt32"},
    shi501_remark: {"kind""Ptr","child":{"kind":"UInt16"}},
    shi501_flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SHARE_INFO_502
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SHARE_INFO_502 = extern struct {
    shi502_netname: {"kind""Ptr","child":{"kind":"UInt16"}},
    shi502_type: {"kind":"UInt32"},
    shi502_remark: {"kind""Ptr","child":{"kind":"UInt16"}},
    shi502_permissions: {"kind":"UInt32"},
    shi502_max_uses: {"kind":"UInt32"},
    shi502_current_uses: {"kind":"UInt32"},
    shi502_path: {"kind""Ptr","child":{"kind":"UInt16"}},
    shi502_passwd: {"kind""Ptr","child":{"kind":"UInt16"}},
    shi502_reserved: {"kind":"UInt32"},
    shi502_security_descriptor: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: SHARE_INFO_503
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SHARE_INFO_503 = extern struct {
    shi503_netname: {"kind""Ptr","child":{"kind":"UInt16"}},
    shi503_type: {"kind":"UInt32"},
    shi503_remark: {"kind""Ptr","child":{"kind":"UInt16"}},
    shi503_permissions: {"kind":"UInt32"},
    shi503_max_uses: {"kind":"UInt32"},
    shi503_current_uses: {"kind":"UInt32"},
    shi503_path: {"kind""Ptr","child":{"kind":"UInt16"}},
    shi503_passwd: {"kind""Ptr","child":{"kind":"UInt16"}},
    shi503_servername: {"kind""Ptr","child":{"kind":"UInt16"}},
    shi503_reserved: {"kind":"UInt32"},
    shi503_security_descriptor: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: SHARE_INFO_1004
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SHARE_INFO_1004 = extern struct {
    shi1004_remark: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SHARE_INFO_1005
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SHARE_INFO_1005 = extern struct {
    shi1005_flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SHARE_INFO_1006
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SHARE_INFO_1006 = extern struct {
    shi1006_max_uses: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SHARE_INFO_1501
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SHARE_INFO_1501 = extern struct {
    shi1501_reserved: {"kind":"UInt32"},
    shi1501_security_descriptor: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: SHARE_INFO_1503
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SHARE_INFO_1503 = extern struct {
    shi1503_sharefilter: Guid,
};
// --------------------------------------------------------
// Type: SERVER_ALIAS_INFO_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_ALIAS_INFO_0 = extern struct {
    srvai0_alias: {"kind""Ptr","child":{"kind":"UInt16"}},
    srvai0_target: {"kind""Ptr","child":{"kind":"UInt16"}},
    srvai0_default: {"kind":"Byte"},
    srvai0_reserved: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SESSION_INFO_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SESSION_INFO_0 = extern struct {
    sesi0_cname: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SESSION_INFO_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SESSION_INFO_1 = extern struct {
    sesi1_cname: {"kind""Ptr","child":{"kind":"UInt16"}},
    sesi1_username: {"kind""Ptr","child":{"kind":"UInt16"}},
    sesi1_num_opens: {"kind":"UInt32"},
    sesi1_time: {"kind":"UInt32"},
    sesi1_idle_time: {"kind":"UInt32"},
    sesi1_user_flags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SESSION_INFO_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SESSION_INFO_2 = extern struct {
    sesi2_cname: {"kind""Ptr","child":{"kind":"UInt16"}},
    sesi2_username: {"kind""Ptr","child":{"kind":"UInt16"}},
    sesi2_num_opens: {"kind":"UInt32"},
    sesi2_time: {"kind":"UInt32"},
    sesi2_idle_time: {"kind":"UInt32"},
    sesi2_user_flags: {"kind":"UInt32"},
    sesi2_cltype_name: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SESSION_INFO_10
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SESSION_INFO_10 = extern struct {
    sesi10_cname: {"kind""Ptr","child":{"kind":"UInt16"}},
    sesi10_username: {"kind""Ptr","child":{"kind":"UInt16"}},
    sesi10_time: {"kind":"UInt32"},
    sesi10_idle_time: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: SESSION_INFO_502
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SESSION_INFO_502 = extern struct {
    sesi502_cname: {"kind""Ptr","child":{"kind":"UInt16"}},
    sesi502_username: {"kind""Ptr","child":{"kind":"UInt16"}},
    sesi502_num_opens: {"kind":"UInt32"},
    sesi502_time: {"kind":"UInt32"},
    sesi502_idle_time: {"kind":"UInt32"},
    sesi502_user_flags: {"kind":"UInt32"},
    sesi502_cltype_name: {"kind""Ptr","child":{"kind":"UInt16"}},
    sesi502_transport: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: CONNECTION_INFO_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CONNECTION_INFO_0 = extern struct {
    coni0_id: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: CONNECTION_INFO_1
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const CONNECTION_INFO_1 = extern struct {
    coni1_id: {"kind":"UInt32"},
    coni1_type: {"kind":"UInt32"},
    coni1_num_opens: {"kind":"UInt32"},
    coni1_num_users: {"kind":"UInt32"},
    coni1_time: {"kind":"UInt32"},
    coni1_username: {"kind""Ptr","child":{"kind":"UInt16"}},
    coni1_netname: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: FILE_INFO_2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_INFO_2 = extern struct {
    fi2_id: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: FILE_INFO_3
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_INFO_3 = extern struct {
    fi3_id: {"kind":"UInt32"},
    fi3_permissions: {"kind":"UInt32"},
    fi3_num_locks: {"kind":"UInt32"},
    fi3_pathname: {"kind""Ptr","child":{"kind":"UInt16"}},
    fi3_username: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: SERVER_CERTIFICATE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const SERVER_CERTIFICATE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: SERVER_CERTIFICATE_INFO_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SERVER_CERTIFICATE_INFO_0 = extern struct {
    srvci0_name: {"kind""Ptr","child":{"kind":"UInt16"}},
    srvci0_subject: {"kind""Ptr","child":{"kind":"UInt16"}},
    srvci0_issuer: {"kind""Ptr","child":{"kind":"UInt16"}},
    srvci0_thumbprint: {"kind""Ptr","child":{"kind":"UInt16"}},
    srvci0_friendlyname: {"kind""Ptr","child":{"kind":"UInt16"}},
    srvci0_notbefore: {"kind""Ptr","child":{"kind":"UInt16"}},
    srvci0_notafter: {"kind""Ptr","child":{"kind":"UInt16"}},
    srvci0_storelocation: {"kind""Ptr","child":{"kind":"UInt16"}},
    srvci0_storename: {"kind""Ptr","child":{"kind":"UInt16"}},
    srvci0_type: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STAT_WORKSTATION_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STAT_WORKSTATION_0 = extern struct {
    StatisticsStartTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    BytesReceived: Windows.Win32.SystemServices.LARGE_INTEGER,
    SmbsReceived: Windows.Win32.SystemServices.LARGE_INTEGER,
    PagingReadBytesRequested: Windows.Win32.SystemServices.LARGE_INTEGER,
    NonPagingReadBytesRequested: Windows.Win32.SystemServices.LARGE_INTEGER,
    CacheReadBytesRequested: Windows.Win32.SystemServices.LARGE_INTEGER,
    NetworkReadBytesRequested: Windows.Win32.SystemServices.LARGE_INTEGER,
    BytesTransmitted: Windows.Win32.SystemServices.LARGE_INTEGER,
    SmbsTransmitted: Windows.Win32.SystemServices.LARGE_INTEGER,
    PagingWriteBytesRequested: Windows.Win32.SystemServices.LARGE_INTEGER,
    NonPagingWriteBytesRequested: Windows.Win32.SystemServices.LARGE_INTEGER,
    CacheWriteBytesRequested: Windows.Win32.SystemServices.LARGE_INTEGER,
    NetworkWriteBytesRequested: Windows.Win32.SystemServices.LARGE_INTEGER,
    InitiallyFailedOperations: {"kind":"UInt32"},
    FailedCompletionOperations: {"kind":"UInt32"},
    ReadOperations: {"kind":"UInt32"},
    RandomReadOperations: {"kind":"UInt32"},
    ReadSmbs: {"kind":"UInt32"},
    LargeReadSmbs: {"kind":"UInt32"},
    SmallReadSmbs: {"kind":"UInt32"},
    WriteOperations: {"kind":"UInt32"},
    RandomWriteOperations: {"kind":"UInt32"},
    WriteSmbs: {"kind":"UInt32"},
    LargeWriteSmbs: {"kind":"UInt32"},
    SmallWriteSmbs: {"kind":"UInt32"},
    RawReadsDenied: {"kind":"UInt32"},
    RawWritesDenied: {"kind":"UInt32"},
    NetworkErrors: {"kind":"UInt32"},
    Sessions: {"kind":"UInt32"},
    FailedSessions: {"kind":"UInt32"},
    Reconnects: {"kind":"UInt32"},
    CoreConnects: {"kind":"UInt32"},
    Lanman20Connects: {"kind":"UInt32"},
    Lanman21Connects: {"kind":"UInt32"},
    LanmanNtConnects: {"kind":"UInt32"},
    ServerDisconnects: {"kind":"UInt32"},
    HungSessions: {"kind":"UInt32"},
    UseCount: {"kind":"UInt32"},
    FailedUseCount: {"kind":"UInt32"},
    CurrentCommands: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: STAT_SERVER_0
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const STAT_SERVER_0 = extern struct {
    sts0_start: {"kind":"UInt32"},
    sts0_fopens: {"kind":"UInt32"},
    sts0_devopens: {"kind":"UInt32"},
    sts0_jobsqueued: {"kind":"UInt32"},
    sts0_sopens: {"kind":"UInt32"},
    sts0_stimedout: {"kind":"UInt32"},
    sts0_serrorout: {"kind":"UInt32"},
    sts0_pwerrors: {"kind":"UInt32"},
    sts0_permerrors: {"kind":"UInt32"},
    sts0_syserrors: {"kind":"UInt32"},
    sts0_bytessent_low: {"kind":"UInt32"},
    sts0_bytessent_high: {"kind":"UInt32"},
    sts0_bytesrcvd_low: {"kind":"UInt32"},
    sts0_bytesrcvd_high: {"kind":"UInt32"},
    sts0_avresponse: {"kind":"UInt32"},
    sts0_reqbufneed: {"kind":"UInt32"},
    sts0_bigbufneed: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: OFSTRUCT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const OFSTRUCT = extern struct {
    cBytes: {"kind":"Byte"},
    fFixedDisk: {"kind":"Byte"},
    nErrCode: {"kind":"UInt16"},
    Reserved1: {"kind":"UInt16"},
    Reserved2: {"kind":"UInt16"},
    szPathName: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: PFE_EXPORT_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFE_EXPORT_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PFE_IMPORT_FUNC
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PFE_IMPORT_FUNC = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: LPPROGRESS_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const LPPROGRESS_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: COPYFILE2_MESSAGE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const COPYFILE2_MESSAGE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: COPYFILE2_MESSAGE_ACTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const COPYFILE2_MESSAGE_ACTION = *opaque{
};
// --------------------------------------------------------
// Type: COPYFILE2_COPY_PHASE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const COPYFILE2_COPY_PHASE = *opaque{
};
// --------------------------------------------------------
// Type: COPYFILE2_MESSAGE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COPYFILE2_MESSAGE = extern struct {
    Type: Windows.Win32.FileSystem.COPYFILE2_MESSAGE_TYPE,
    dwPadding: {"kind":"UInt32"},
    Info: Windows.Win32.FileSystem.COPYFILE2_MESSAGE+_Info_e__Union,
    // --------------------------------------------------------
    // Type: _Info_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Info_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Error_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Error_e__Struct = extern struct {
            CopyPhase: Windows.Win32.FileSystem.COPYFILE2_COPY_PHASE,
            dwStreamNumber: {"kind":"UInt32"},
            hrFailure: Windows.Win32.Com.HRESULT,
            dwReserved: {"kind":"UInt32"},
            uliChunkNumber: Windows.Win32.SystemServices.ULARGE_INTEGER,
            uliStreamSize: Windows.Win32.SystemServices.ULARGE_INTEGER,
            uliStreamBytesTransferred: Windows.Win32.SystemServices.ULARGE_INTEGER,
            uliTotalFileSize: Windows.Win32.SystemServices.ULARGE_INTEGER,
            uliTotalBytesTransferred: Windows.Win32.SystemServices.ULARGE_INTEGER,
        };
        // --------------------------------------------------------
        // Type: _StreamFinished_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _StreamFinished_e__Struct = extern struct {
            dwStreamNumber: {"kind":"UInt32"},
            dwReserved: {"kind":"UInt32"},
            hSourceFile: Windows.Win32.SystemServices.HANDLE,
            hDestinationFile: Windows.Win32.SystemServices.HANDLE,
            uliStreamSize: Windows.Win32.SystemServices.ULARGE_INTEGER,
            uliStreamBytesTransferred: Windows.Win32.SystemServices.ULARGE_INTEGER,
            uliTotalFileSize: Windows.Win32.SystemServices.ULARGE_INTEGER,
            uliTotalBytesTransferred: Windows.Win32.SystemServices.ULARGE_INTEGER,
        };
        // --------------------------------------------------------
        // Type: _ChunkFinished_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _ChunkFinished_e__Struct = extern struct {
            dwStreamNumber: {"kind":"UInt32"},
            dwFlags: {"kind":"UInt32"},
            hSourceFile: Windows.Win32.SystemServices.HANDLE,
            hDestinationFile: Windows.Win32.SystemServices.HANDLE,
            uliChunkNumber: Windows.Win32.SystemServices.ULARGE_INTEGER,
            uliChunkSize: Windows.Win32.SystemServices.ULARGE_INTEGER,
            uliStreamSize: Windows.Win32.SystemServices.ULARGE_INTEGER,
            uliStreamBytesTransferred: Windows.Win32.SystemServices.ULARGE_INTEGER,
            uliTotalFileSize: Windows.Win32.SystemServices.ULARGE_INTEGER,
            uliTotalBytesTransferred: Windows.Win32.SystemServices.ULARGE_INTEGER,
        };
        // --------------------------------------------------------
        // Type: _PollContinue_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _PollContinue_e__Struct = extern struct {
            dwReserved: {"kind":"UInt32"},
        };
        // --------------------------------------------------------
        // Type: _ChunkStarted_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _ChunkStarted_e__Struct = extern struct {
            dwStreamNumber: {"kind":"UInt32"},
            dwReserved: {"kind":"UInt32"},
            hSourceFile: Windows.Win32.SystemServices.HANDLE,
            hDestinationFile: Windows.Win32.SystemServices.HANDLE,
            uliChunkNumber: Windows.Win32.SystemServices.ULARGE_INTEGER,
            uliChunkSize: Windows.Win32.SystemServices.ULARGE_INTEGER,
            uliStreamSize: Windows.Win32.SystemServices.ULARGE_INTEGER,
            uliTotalFileSize: Windows.Win32.SystemServices.ULARGE_INTEGER,
        };
        // --------------------------------------------------------
        // Type: _StreamStarted_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _StreamStarted_e__Struct = extern struct {
            dwStreamNumber: {"kind":"UInt32"},
            dwReserved: {"kind":"UInt32"},
            hSourceFile: Windows.Win32.SystemServices.HANDLE,
            hDestinationFile: Windows.Win32.SystemServices.HANDLE,
            uliStreamSize: Windows.Win32.SystemServices.ULARGE_INTEGER,
            uliTotalFileSize: Windows.Win32.SystemServices.ULARGE_INTEGER,
        };
    };
};
// --------------------------------------------------------
// Type: PCOPYFILE2_PROGRESS_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PCOPYFILE2_PROGRESS_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: COPYFILE2_EXTENDED_PARAMETERS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const COPYFILE2_EXTENDED_PARAMETERS = extern struct {
    dwSize: {"kind":"UInt32"},
    dwCopyFlags: {"kind":"UInt32"},
    pfCancel: {"kind""Ptr","child":{"kind":"Int32"}},
    pProgressRoutine: Windows.Win32.FileSystem.PCOPYFILE2_PROGRESS_ROUTINE,
    pvCallbackContext: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: FILE_BASIC_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_BASIC_INFO = extern struct {
    CreationTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    LastAccessTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    LastWriteTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    ChangeTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    FileAttributes: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: FILE_STANDARD_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_STANDARD_INFO = extern struct {
    AllocationSize: Windows.Win32.SystemServices.LARGE_INTEGER,
    EndOfFile: Windows.Win32.SystemServices.LARGE_INTEGER,
    NumberOfLinks: {"kind":"UInt32"},
    DeletePending: {"kind":"Byte"},
    Directory: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: FILE_NAME_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_NAME_INFO = extern struct {
    FileNameLength: {"kind":"UInt32"},
    FileName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: FILE_RENAME_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_RENAME_INFO = extern struct {
    Anonymous: Windows.Win32.FileSystem.FILE_RENAME_INFO+_Anonymous_e__Union,
    RootDirectory: Windows.Win32.SystemServices.HANDLE,
    FileNameLength: {"kind":"UInt32"},
    FileName: {"kind":"Array","child": {"kind":"UInt16"}},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: FILE_ALLOCATION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_ALLOCATION_INFO = extern struct {
    AllocationSize: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: FILE_END_OF_FILE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_END_OF_FILE_INFO = extern struct {
    EndOfFile: Windows.Win32.SystemServices.LARGE_INTEGER,
};
// --------------------------------------------------------
// Type: FILE_STREAM_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_STREAM_INFO = extern struct {
    NextEntryOffset: {"kind":"UInt32"},
    StreamNameLength: {"kind":"UInt32"},
    StreamSize: Windows.Win32.SystemServices.LARGE_INTEGER,
    StreamAllocationSize: Windows.Win32.SystemServices.LARGE_INTEGER,
    StreamName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: FILE_COMPRESSION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_COMPRESSION_INFO = extern struct {
    CompressedFileSize: Windows.Win32.SystemServices.LARGE_INTEGER,
    CompressionFormat: {"kind":"UInt16"},
    CompressionUnitShift: {"kind":"Byte"},
    ChunkShift: {"kind":"Byte"},
    ClusterShift: {"kind":"Byte"},
    Reserved: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: FILE_ATTRIBUTE_TAG_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_ATTRIBUTE_TAG_INFO = extern struct {
    FileAttributes: {"kind":"UInt32"},
    ReparseTag: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: FILE_DISPOSITION_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_DISPOSITION_INFO = extern struct {
    DeleteFileA: {"kind":"Byte"},
};
// --------------------------------------------------------
// Type: FILE_ID_BOTH_DIR_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_ID_BOTH_DIR_INFO = extern struct {
    NextEntryOffset: {"kind":"UInt32"},
    FileIndex: {"kind":"UInt32"},
    CreationTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    LastAccessTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    LastWriteTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    ChangeTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    EndOfFile: Windows.Win32.SystemServices.LARGE_INTEGER,
    AllocationSize: Windows.Win32.SystemServices.LARGE_INTEGER,
    FileAttributes: {"kind":"UInt32"},
    FileNameLength: {"kind":"UInt32"},
    EaSize: {"kind":"UInt32"},
    ShortNameLength: {"kind":"SByte"},
    ShortName: {"kind":"Array","child": {"kind":"UInt16"}},
    FileId: Windows.Win32.SystemServices.LARGE_INTEGER,
    FileName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: FILE_FULL_DIR_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_FULL_DIR_INFO = extern struct {
    NextEntryOffset: {"kind":"UInt32"},
    FileIndex: {"kind":"UInt32"},
    CreationTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    LastAccessTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    LastWriteTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    ChangeTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    EndOfFile: Windows.Win32.SystemServices.LARGE_INTEGER,
    AllocationSize: Windows.Win32.SystemServices.LARGE_INTEGER,
    FileAttributes: {"kind":"UInt32"},
    FileNameLength: {"kind":"UInt32"},
    EaSize: {"kind":"UInt32"},
    FileName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: PRIORITY_HINT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PRIORITY_HINT = *opaque{
};
// --------------------------------------------------------
// Type: FILE_IO_PRIORITY_HINT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_IO_PRIORITY_HINT_INFO = extern struct {
    PriorityHint: Windows.Win32.FileSystem.PRIORITY_HINT,
};
// --------------------------------------------------------
// Type: FILE_ALIGNMENT_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_ALIGNMENT_INFO = extern struct {
    AlignmentRequirement: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: FILE_STORAGE_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_STORAGE_INFO = extern struct {
    LogicalBytesPerSector: {"kind":"UInt32"},
    PhysicalBytesPerSectorForAtomicity: {"kind":"UInt32"},
    PhysicalBytesPerSectorForPerformance: {"kind":"UInt32"},
    FileSystemEffectivePhysicalBytesPerSectorForAtomicity: {"kind":"UInt32"},
    Flags: {"kind":"UInt32"},
    ByteOffsetForSectorAlignment: {"kind":"UInt32"},
    ByteOffsetForPartitionAlignment: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: FILE_ID_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_ID_INFO = extern struct {
    VolumeSerialNumber: {"kind":"UInt64"},
    FileId: Windows.Win32.FileSystem.FILE_ID_128,
};
// --------------------------------------------------------
// Type: FILE_ID_EXTD_DIR_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_ID_EXTD_DIR_INFO = extern struct {
    NextEntryOffset: {"kind":"UInt32"},
    FileIndex: {"kind":"UInt32"},
    CreationTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    LastAccessTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    LastWriteTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    ChangeTime: Windows.Win32.SystemServices.LARGE_INTEGER,
    EndOfFile: Windows.Win32.SystemServices.LARGE_INTEGER,
    AllocationSize: Windows.Win32.SystemServices.LARGE_INTEGER,
    FileAttributes: {"kind":"UInt32"},
    FileNameLength: {"kind":"UInt32"},
    EaSize: {"kind":"UInt32"},
    ReparsePointTag: {"kind":"UInt32"},
    FileId: Windows.Win32.FileSystem.FILE_ID_128,
    FileName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: FILE_REMOTE_PROTOCOL_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_REMOTE_PROTOCOL_INFO = extern struct {
    StructureVersion: {"kind":"UInt16"},
    StructureSize: {"kind":"UInt16"},
    Protocol: {"kind":"UInt32"},
    ProtocolMajorVersion: {"kind":"UInt16"},
    ProtocolMinorVersion: {"kind":"UInt16"},
    ProtocolRevision: {"kind":"UInt16"},
    Reserved: {"kind":"UInt16"},
    Flags: {"kind":"UInt32"},
    GenericReserved: Windows.Win32.FileSystem.FILE_REMOTE_PROTOCOL_INFO+_GenericReserved_e__Struct,
    ProtocolSpecific: Windows.Win32.FileSystem.FILE_REMOTE_PROTOCOL_INFO+_ProtocolSpecific_e__Union,
    // --------------------------------------------------------
    // Type: _ProtocolSpecific_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _ProtocolSpecific_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _Smb2_e__Struct
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _Smb2_e__Struct = extern struct {
            Server: Windows.Win32.FileSystem.FILE_REMOTE_PROTOCOL_INFO+_ProtocolSpecific_e__Union+_Smb2_e__Struct+_Server_e__Struct,
            Share: Windows.Win32.FileSystem.FILE_REMOTE_PROTOCOL_INFO+_ProtocolSpecific_e__Union+_Smb2_e__Struct+_Share_e__Struct,
            // --------------------------------------------------------
            // Type: _Server_e__Struct
            // TypeLayoutAttr: sequential
            // TODO: I think this is a struct, but not sure at this point, assuming it is for now
            pub const _Server_e__Struct = extern struct {
                Capabilities: {"kind":"UInt32"},
            };
            // --------------------------------------------------------
            // Type: _Share_e__Struct
            // TypeLayoutAttr: sequential
            // TODO: I think this is a struct, but not sure at this point, assuming it is for now
            pub const _Share_e__Struct = extern struct {
                Capabilities: {"kind":"UInt32"},
                CachingFlags: {"kind":"UInt32"},
            };
        };
    };
    // --------------------------------------------------------
    // Type: _GenericReserved_e__Struct
    // TypeLayoutAttr: sequential
    // TODO: I think this is a struct, but not sure at this point, assuming it is for now
    pub const _GenericReserved_e__Struct = extern struct {
        Reserved: {"kind":"Array","child": {"kind":"UInt32"}},
    };
};
// --------------------------------------------------------
// Type: FILE_ID_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FILE_ID_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: FILE_ID_DESCRIPTOR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const FILE_ID_DESCRIPTOR = extern struct {
    dwSize: {"kind":"UInt32"},
    Type: Windows.Win32.FileSystem.FILE_ID_TYPE,
    Anonymous: Windows.Win32.FileSystem.FILE_ID_DESCRIPTOR+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
],

"func_definitions": [

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateDirectoryA(
    lpPathName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateDirectoryW(
    lpPathName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateFileA(
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwDesiredAccess: Windows.Win32.FileSystem.FILE_ACCESS_FLAGS,
    dwShareMode: Windows.Win32.FileSystem.FILE_SHARE_FLAGS,
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    dwCreationDisposition: Windows.Win32.FileSystem.FILE_CREATE_FLAGS,
    dwFlagsAndAttributes: Windows.Win32.FileSystem.FILE_FLAGS_AND_ATTRIBUTES,
    hTemplateFile: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateFileW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwDesiredAccess: Windows.Win32.FileSystem.FILE_ACCESS_FLAGS,
    dwShareMode: Windows.Win32.FileSystem.FILE_SHARE_FLAGS,
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    dwCreationDisposition: Windows.Win32.FileSystem.FILE_CREATE_FLAGS,
    dwFlagsAndAttributes: Windows.Win32.FileSystem.FILE_FLAGS_AND_ATTRIBUTES,
    hTemplateFile: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DefineDosDeviceW(
    dwFlags: Windows.Win32.FileSystem.DEFINE_DOS_DEVICE_FLAGS,
    lpDeviceName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpTargetPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DeleteFileA(
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DeleteFileW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DeleteVolumeMountPointW(
    lpszVolumeMountPoint: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindClose(
    hFindFile: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindCloseChangeNotification(
    hChangeHandle: Windows.Win32.FileSystem.FindChangeNotifcationHandle,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindFirstChangeNotificationA(
    lpPathName: {"kind""Ptr","child":{"kind":"SByte"}},
    bWatchSubtree: Windows.Win32.SystemServices.BOOL,
    dwNotifyFilter: Windows.Win32.FileSystem.FILE_NOTIFY_CHANGE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindFirstChangeNotificationW(
    lpPathName: {"kind""Ptr","child":{"kind":"UInt16"}},
    bWatchSubtree: Windows.Win32.SystemServices.BOOL,
    dwNotifyFilter: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindFirstFileA(
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpFindFileData: {"kind""Ptr","child":Windows.Win32.FileSystem.WIN32_FIND_DATAA},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindFirstFileW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpFindFileData: {"kind""Ptr","child":Windows.Win32.FileSystem.WIN32_FIND_DATAW},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindFirstFileExA(
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    fInfoLevelId: Windows.Win32.FileSystem.FINDEX_INFO_LEVELS,
    lpFindFileData: {"kind""Ptr","child":{"kind":"Void"}},
    fSearchOp: Windows.Win32.FileSystem.FINDEX_SEARCH_OPS,
    lpSearchFilter: {"kind""Ptr","child":{"kind":"Void"}},
    dwAdditionalFlags: Windows.Win32.FileSystem.FIND_FIRST_EX_FLAGS,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindFirstFileExW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    fInfoLevelId: Windows.Win32.FileSystem.FINDEX_INFO_LEVELS,
    lpFindFileData: {"kind""Ptr","child":{"kind":"Void"}},
    fSearchOp: Windows.Win32.FileSystem.FINDEX_SEARCH_OPS,
    lpSearchFilter: {"kind""Ptr","child":{"kind":"Void"}},
    dwAdditionalFlags: Windows.Win32.FileSystem.FIND_FIRST_EX_FLAGS,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindFirstVolumeW(
    lpszVolumeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchBufferLength: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindNextChangeNotification(
    hChangeHandle: Windows.Win32.FileSystem.FindChangeNotifcationHandle,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindNextFileA(
    hFindFile: Windows.Win32.FileSystem.FindFileHandle,
    lpFindFileData: {"kind""Ptr","child":Windows.Win32.FileSystem.WIN32_FIND_DATAA},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindNextFileW(
    hFindFile: Windows.Win32.SystemServices.HANDLE,
    lpFindFileData: {"kind""Ptr","child":Windows.Win32.FileSystem.WIN32_FIND_DATAW},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindNextVolumeW(
    hFindVolume: Windows.Win32.FileSystem.FindVolumeHandle,
    lpszVolumeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchBufferLength: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindVolumeClose(
    hFindVolume: Windows.Win32.FileSystem.FindVolumeHandle,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FlushFileBuffers(
    hFile: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetDiskFreeSpaceA(
    lpRootPathName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpSectorsPerCluster: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpBytesPerSector: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpNumberOfFreeClusters: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpTotalNumberOfClusters: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetDiskFreeSpaceW(
    lpRootPathName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpSectorsPerCluster: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpBytesPerSector: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpNumberOfFreeClusters: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpTotalNumberOfClusters: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetDiskFreeSpaceExA(
    lpDirectoryName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpFreeBytesAvailableToCaller: {"kind""Ptr","child":Windows.Win32.SystemServices.ULARGE_INTEGER},
    lpTotalNumberOfBytes: {"kind""Ptr","child":Windows.Win32.SystemServices.ULARGE_INTEGER},
    lpTotalNumberOfFreeBytes: {"kind""Ptr","child":Windows.Win32.SystemServices.ULARGE_INTEGER},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetDiskFreeSpaceExW(
    lpDirectoryName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpFreeBytesAvailableToCaller: {"kind""Ptr","child":Windows.Win32.SystemServices.ULARGE_INTEGER},
    lpTotalNumberOfBytes: {"kind""Ptr","child":Windows.Win32.SystemServices.ULARGE_INTEGER},
    lpTotalNumberOfFreeBytes: {"kind""Ptr","child":Windows.Win32.SystemServices.ULARGE_INTEGER},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetDiskSpaceInformationA(
    rootPath: {"kind""Ptr","child":{"kind":"SByte"}},
    diskSpaceInfo: {"kind""Ptr","child":Windows.Win32.FileSystem.DISK_SPACE_INFORMATION},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetDiskSpaceInformationW(
    rootPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    diskSpaceInfo: {"kind""Ptr","child":Windows.Win32.FileSystem.DISK_SPACE_INFORMATION},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetDriveTypeA(
    lpRootPathName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn GetDriveTypeW(
    lpRootPathName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFileAttributesA(
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFileAttributesW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFileAttributesExA(
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    fInfoLevelId: Windows.Win32.FileSystem.GET_FILEEX_INFO_LEVELS,
    lpFileInformation: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFileAttributesExW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    fInfoLevelId: Windows.Win32.FileSystem.GET_FILEEX_INFO_LEVELS,
    lpFileInformation: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFileInformationByHandle(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpFileInformation: {"kind""Ptr","child":Windows.Win32.FileSystem.BY_HANDLE_FILE_INFORMATION},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFileSize(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpFileSizeHigh: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFileSizeEx(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpFileSize: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFileType(
    hFile: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFinalPathNameByHandleA(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpszFilePath: {"kind""Ptr","child":{"kind":"SByte"}},
    cchFilePath: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFinalPathNameByHandleW(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpszFilePath: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchFilePath: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFullPathNameW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    nBufferLength: {"kind":"UInt32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpFilePart: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFullPathNameA(
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    nBufferLength: {"kind":"UInt32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"SByte"}},
    lpFilePart: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetLogicalDrives(

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetLogicalDriveStringsW(
    nBufferLength: {"kind":"UInt32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetLongPathNameA(
    lpszShortPath: {"kind""Ptr","child":{"kind":"SByte"}},
    lpszLongPath: {"kind""Ptr","child":{"kind":"SByte"}},
    cchBuffer: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetLongPathNameW(
    lpszShortPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszLongPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchBuffer: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetShortPathNameW(
    lpszLongPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszShortPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchBuffer: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetTempFileNameW(
    lpPathName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpPrefixString: {"kind""Ptr","child":{"kind":"UInt16"}},
    uUnique: {"kind":"UInt32"},
    lpTempFileName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetVolumeInformationByHandleW(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpVolumeNameBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    nVolumeNameSize: {"kind":"UInt32"},
    lpVolumeSerialNumber: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpMaximumComponentLength: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpFileSystemFlags: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpFileSystemNameBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    nFileSystemNameSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetVolumeInformationW(
    lpRootPathName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpVolumeNameBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    nVolumeNameSize: {"kind":"UInt32"},
    lpVolumeSerialNumber: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpMaximumComponentLength: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpFileSystemFlags: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpFileSystemNameBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    nFileSystemNameSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetVolumePathNameW(
    lpszFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszVolumePathName: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchBufferLength: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn LockFile(
    hFile: Windows.Win32.SystemServices.HANDLE,
    dwFileOffsetLow: {"kind":"UInt32"},
    dwFileOffsetHigh: {"kind":"UInt32"},
    nNumberOfBytesToLockLow: {"kind":"UInt32"},
    nNumberOfBytesToLockHigh: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn LockFileEx(
    hFile: Windows.Win32.SystemServices.HANDLE,
    dwFlags: {"kind":"UInt32"},
    dwReserved: {"kind":"UInt32"},
    nNumberOfBytesToLockLow: {"kind":"UInt32"},
    nNumberOfBytesToLockHigh: {"kind":"UInt32"},
    lpOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn QueryDosDeviceW(
    lpDeviceName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpTargetPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    ucchMax: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ReadFile(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    nNumberOfBytesToRead: {"kind":"UInt32"},
    lpNumberOfBytesRead: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ReadFileEx(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    nNumberOfBytesToRead: {"kind":"UInt32"},
    lpOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},
    lpCompletionRoutine: Windows.Win32.FileSystem.LPOVERLAPPED_COMPLETION_ROUTINE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ReadFileScatter(
    hFile: Windows.Win32.SystemServices.HANDLE,
    aSegmentArray: {"kind""Ptr","child":Windows.Win32.SystemServices.FILE_SEGMENT_ELEMENT},
    nNumberOfBytesToRead: {"kind":"UInt32"},
    lpReserved: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn RemoveDirectoryA(
    lpPathName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn RemoveDirectoryW(
    lpPathName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetEndOfFile(
    hFile: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetFileAttributesA(
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFileAttributes: Windows.Win32.FileSystem.FILE_FLAGS_AND_ATTRIBUTES,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetFileAttributesW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFileAttributes: Windows.Win32.FileSystem.FILE_FLAGS_AND_ATTRIBUTES,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetFileInformationByHandle(
    hFile: Windows.Win32.SystemServices.HANDLE,
    FileInformationClass: Windows.Win32.FileSystem.FILE_INFO_BY_HANDLE_CLASS,
    lpFileInformation: {"kind""Ptr","child":{"kind":"Void"}},
    dwBufferSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetFilePointer(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lDistanceToMove: {"kind":"Int32"},
    lpDistanceToMoveHigh: {"kind""Ptr","child":{"kind":"Int32"}},
    dwMoveMethod: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetFilePointerEx(
    hFile: Windows.Win32.SystemServices.HANDLE,
    liDistanceToMove: Windows.Win32.SystemServices.LARGE_INTEGER,
    lpNewFilePointer: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},
    dwMoveMethod: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetFileValidData(
    hFile: Windows.Win32.SystemServices.HANDLE,
    ValidDataLength: {"kind":"Int64"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn UnlockFile(
    hFile: Windows.Win32.SystemServices.HANDLE,
    dwFileOffsetLow: {"kind":"UInt32"},
    dwFileOffsetHigh: {"kind":"UInt32"},
    nNumberOfBytesToUnlockLow: {"kind":"UInt32"},
    nNumberOfBytesToUnlockHigh: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn UnlockFileEx(
    hFile: Windows.Win32.SystemServices.HANDLE,
    dwReserved: {"kind":"UInt32"},
    nNumberOfBytesToUnlockLow: {"kind":"UInt32"},
    nNumberOfBytesToUnlockHigh: {"kind":"UInt32"},
    lpOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WriteFile(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    nNumberOfBytesToWrite: {"kind":"UInt32"},
    lpNumberOfBytesWritten: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WriteFileEx(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    nNumberOfBytesToWrite: {"kind":"UInt32"},
    lpOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},
    lpCompletionRoutine: Windows.Win32.FileSystem.LPOVERLAPPED_COMPLETION_ROUTINE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn WriteFileGather(
    hFile: Windows.Win32.SystemServices.HANDLE,
    aSegmentArray: {"kind""Ptr","child":Windows.Win32.SystemServices.FILE_SEGMENT_ELEMENT},
    nNumberOfBytesToWrite: {"kind":"UInt32"},
    lpReserved: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetTempPathW(
    nBufferLength: {"kind":"UInt32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetVolumeNameForVolumeMountPointW(
    lpszVolumeMountPoint: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszVolumeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchBufferLength: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetVolumePathNamesForVolumeNameW(
    lpszVolumeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszVolumePathNames: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchBufferLength: {"kind":"UInt32"},
    lpcchReturnLength: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateFile2(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwDesiredAccess: Windows.Win32.FileSystem.FILE_ACCESS_FLAGS,
    dwShareMode: Windows.Win32.FileSystem.FILE_SHARE_FLAGS,
    dwCreationDisposition: Windows.Win32.FileSystem.FILE_CREATE_FLAGS,
    pCreateExParams: {"kind""Ptr","child":Windows.Win32.FileSystem.CREATEFILE2_EXTENDED_PARAMETERS},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetFileIoOverlappedRange(
    FileHandle: Windows.Win32.SystemServices.HANDLE,
    OverlappedRangeStart: {"kind""Ptr","child":{"kind":"Byte"}},
    Length: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetCompressedFileSizeA(
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpFileSizeHigh: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetCompressedFileSizeW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpFileSizeHigh: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindFirstStreamW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    InfoLevel: Windows.Win32.FileSystem.STREAM_INFO_LEVELS,
    lpFindStreamData: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindNextStreamW(
    hFindStream: Windows.Win32.FileSystem.FindStreamHandle,
    lpFindStreamData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn AreFileApisANSI(

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetTempPathA(
    nBufferLength: {"kind":"UInt32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindFirstFileNameW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    StringLength: {"kind""Ptr","child":{"kind":"UInt32"}},
    LinkName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindNextFileNameW(
    hFindStream: Windows.Win32.FileSystem.FindFileNameHandle,
    StringLength: {"kind""Ptr","child":{"kind":"UInt32"}},
    LinkName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetVolumeInformationA(
    lpRootPathName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpVolumeNameBuffer: {"kind""Ptr","child":{"kind":"SByte"}},
    nVolumeNameSize: {"kind":"UInt32"},
    lpVolumeSerialNumber: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpMaximumComponentLength: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpFileSystemFlags: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpFileSystemNameBuffer: {"kind""Ptr","child":{"kind":"SByte"}},
    nFileSystemNameSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetTempFileNameA(
    lpPathName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpPrefixString: {"kind""Ptr","child":{"kind":"SByte"}},
    uUnique: {"kind":"UInt32"},
    lpTempFileName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetFileApisToOEM(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn SetFileApisToANSI(

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-file-fromapp-l1-1-0" fn CopyFileFromAppW(
    lpExistingFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpNewFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    bFailIfExists: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-file-fromapp-l1-1-0" fn CreateDirectoryFromAppW(
    lpPathName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-file-fromapp-l1-1-0" fn CreateFileFromAppW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwDesiredAccess: {"kind":"UInt32"},
    dwShareMode: {"kind":"UInt32"},
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    dwCreationDisposition: {"kind":"UInt32"},
    dwFlagsAndAttributes: {"kind":"UInt32"},
    hTemplateFile: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-file-fromapp-l1-1-0" fn CreateFile2FromAppW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwDesiredAccess: {"kind":"UInt32"},
    dwShareMode: {"kind":"UInt32"},
    dwCreationDisposition: {"kind":"UInt32"},
    pCreateExParams: {"kind""Ptr","child":Windows.Win32.FileSystem.CREATEFILE2_EXTENDED_PARAMETERS},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-file-fromapp-l1-1-0" fn DeleteFileFromAppW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-file-fromapp-l1-1-0" fn FindFirstFileExFromAppW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    fInfoLevelId: Windows.Win32.FileSystem.FINDEX_INFO_LEVELS,
    lpFindFileData: {"kind""Ptr","child":{"kind":"Void"}},
    fSearchOp: Windows.Win32.FileSystem.FINDEX_SEARCH_OPS,
    lpSearchFilter: {"kind""Ptr","child":{"kind":"Void"}},
    dwAdditionalFlags: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-file-fromapp-l1-1-0" fn GetFileAttributesExFromAppW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    fInfoLevelId: Windows.Win32.FileSystem.GET_FILEEX_INFO_LEVELS,
    lpFileInformation: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-file-fromapp-l1-1-0" fn MoveFileFromAppW(
    lpExistingFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpNewFileName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-file-fromapp-l1-1-0" fn RemoveDirectoryFromAppW(
    lpPathName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-file-fromapp-l1-1-0" fn ReplaceFileFromAppW(
    lpReplacedFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpReplacementFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpBackupFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwReplaceFlags: {"kind":"UInt32"},
    lpExclude: {"kind""Ptr","child":{"kind":"Void"}},
    lpReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-file-fromapp-l1-1-0" fn SetFileAttributesFromAppW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFileAttributes: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateIoCompletionPort(
    FileHandle: Windows.Win32.SystemServices.HANDLE,
    ExistingCompletionPort: Windows.Win32.SystemServices.HANDLE,
    CompletionKey: {"kind":"UIntPtr"},
    NumberOfConcurrentThreads: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetQueuedCompletionStatus(
    CompletionPort: Windows.Win32.SystemServices.HANDLE,
    lpNumberOfBytesTransferred: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpCompletionKey: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpOverlapped: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED}},
    dwMilliseconds: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetQueuedCompletionStatusEx(
    CompletionPort: Windows.Win32.SystemServices.HANDLE,
    lpCompletionPortEntries: {"kind""Ptr","child":Windows.Win32.FileSystem.OVERLAPPED_ENTRY},
    ulCount: {"kind":"UInt32"},
    ulNumEntriesRemoved: {"kind""Ptr","child":{"kind":"UInt32"}},
    dwMilliseconds: {"kind":"UInt32"},
    fAlertable: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn PostQueuedCompletionStatus(
    CompletionPort: Windows.Win32.SystemServices.HANDLE,
    dwNumberOfBytesTransferred: {"kind":"UInt32"},
    dwCompletionKey: {"kind":"UIntPtr"},
    lpOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CancelIoEx(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CancelIo(
    hFile: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CancelSynchronousIo(
    hThread: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn Wow64DisableWow64FsRedirection(
    OldValue: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn Wow64RevertWow64FsRedirection(
    OlValue: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "api-ms-win-core-wow64-l1-1-1" fn Wow64SetThreadDefaultGuestMachine(
    Machine: {"kind":"UInt16"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn Wow64SuspendThread(
    hThread: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn LZStart(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn LZDone(

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CopyLZFile(
    hfSource: {"kind":"Int32"},
    hfDest: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn LZCopy(
    hfSource: {"kind":"Int32"},
    hfDest: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn LZInit(
    hfSource: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetExpandedNameA(
    lpszSource: {"kind""Ptr","child":{"kind":"SByte"}},
    lpszBuffer: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetExpandedNameW(
    lpszSource: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn LZOpenFileA(
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpReOpenBuf: {"kind""Ptr","child":Windows.Win32.FileSystem.OFSTRUCT},
    wStyle: {"kind":"UInt16"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn LZOpenFileW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpReOpenBuf: {"kind""Ptr","child":Windows.Win32.FileSystem.OFSTRUCT},
    wStyle: {"kind":"UInt16"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn LZSeek(
    hFile: {"kind":"Int32"},
    lOffset: {"kind":"Int32"},
    iOrigin: {"kind":"Int32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn LZRead(
    hFile: {"kind":"Int32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"SByte"}},
    cbRead: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn LZClose(
    hFile: {"kind":"Int32"},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn QueryUsersOnEncryptedFile(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pUsers: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.FileSystem.ENCRYPTION_CERTIFICATE_HASH_LIST}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn QueryRecoveryAgentsOnEncryptedFile(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pRecoveryAgents: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.FileSystem.ENCRYPTION_CERTIFICATE_HASH_LIST}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn RemoveUsersFromEncryptedFile(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pHashes: {"kind""Ptr","child":Windows.Win32.FileSystem.ENCRYPTION_CERTIFICATE_HASH_LIST},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn AddUsersToEncryptedFile(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pEncryptionCertificates: {"kind""Ptr","child":Windows.Win32.FileSystem.ENCRYPTION_CERTIFICATE_LIST},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn SetUserFileEncryptionKey(
    pEncryptionCertificate: {"kind""Ptr","child":Windows.Win32.FileSystem.ENCRYPTION_CERTIFICATE},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn SetUserFileEncryptionKeyEx(
    pEncryptionCertificate: {"kind""Ptr","child":Windows.Win32.FileSystem.ENCRYPTION_CERTIFICATE},
    dwCapabilities: {"kind":"UInt32"},
    dwFlags: {"kind":"UInt32"},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn FreeEncryptionCertificateHashList(
    pUsers: {"kind""Ptr","child":Windows.Win32.FileSystem.ENCRYPTION_CERTIFICATE_HASH_LIST},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn EncryptionDisable(
    DirPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    Disable: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn DuplicateEncryptionInfoFile(
    SrcFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    DstFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwCreationDistribution: {"kind":"UInt32"},
    dwAttributes: {"kind":"UInt32"},
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn GetEncryptedFileMetadata(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pcbMetadata: {"kind""Ptr","child":{"kind":"UInt32"}},
    ppbMetadata: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn SetEncryptedFileMetadata(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pbOldMetadata: {"kind""Ptr","child":{"kind":"Byte"}},
    pbNewMetadata: {"kind""Ptr","child":{"kind":"Byte"}},
    pOwnerHash: {"kind""Ptr","child":Windows.Win32.FileSystem.ENCRYPTION_CERTIFICATE_HASH},
    dwOperation: {"kind":"UInt32"},
    pCertificatesAdded: {"kind""Ptr","child":Windows.Win32.FileSystem.ENCRYPTION_CERTIFICATE_HASH_LIST},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn FreeEncryptedFileMetadata(
    pbMetadata: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "clfsw32" fn LsnEqual(
    plsn1: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    plsn2: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},

// set_last_errror=False (can and should we use this?)
pub extern "clfsw32" fn LsnLess(
    plsn1: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    plsn2: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},

// set_last_errror=False (can and should we use this?)
pub extern "clfsw32" fn LsnGreater(
    plsn1: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    plsn2: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},

// set_last_errror=False (can and should we use this?)
pub extern "clfsw32" fn LsnNull(
    plsn: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},

// set_last_errror=False (can and should we use this?)
pub extern "clfsw32" fn LsnContainer(
    plsn: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},

// set_last_errror=False (can and should we use this?)
pub extern "clfsw32" fn LsnCreate(
    cidContainer: {"kind":"UInt32"},
    offBlock: {"kind":"UInt32"},
    cRecord: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "clfsw32" fn LsnBlockOffset(
    plsn: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},

// set_last_errror=False (can and should we use this?)
pub extern "clfsw32" fn LsnRecordSequence(
    plsn: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},

// set_last_errror=False (can and should we use this?)
pub extern "clfsw32" fn LsnInvalid(
    plsn: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},

// set_last_errror=False (can and should we use this?)
pub extern "clfsw32" fn LsnIncrement(
    plsn: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn CreateLogFile(
    pszLogFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    fDesiredAccess: {"kind":"UInt32"},
    dwShareMode: {"kind":"UInt32"},
    psaLogFile: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    fCreateDisposition: {"kind":"UInt32"},
    fFlagsAndAttributes: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn DeleteLogByHandle(
    hLog: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn DeleteLogFile(
    pszLogFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pvReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn AddLogContainer(
    hLog: Windows.Win32.SystemServices.HANDLE,
    pcbContainer: {"kind""Ptr","child":{"kind":"UInt64"}},
    pwszContainerPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    pReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn AddLogContainerSet(
    hLog: Windows.Win32.SystemServices.HANDLE,
    cContainer: {"kind":"UInt16"},
    pcbContainer: {"kind""Ptr","child":{"kind":"UInt64"}},
    rgwszContainerPath: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    pReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn RemoveLogContainer(
    hLog: Windows.Win32.SystemServices.HANDLE,
    pwszContainerPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    fForce: Windows.Win32.SystemServices.BOOL,
    pReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn RemoveLogContainerSet(
    hLog: Windows.Win32.SystemServices.HANDLE,
    cContainer: {"kind":"UInt16"},
    rgwszContainerPath: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    fForce: Windows.Win32.SystemServices.BOOL,
    pReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn SetLogArchiveTail(
    hLog: Windows.Win32.SystemServices.HANDLE,
    plsnArchiveTail: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    pReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn SetEndOfLog(
    hLog: Windows.Win32.SystemServices.HANDLE,
    plsnEnd: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    lpOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn TruncateLog(
    pvMarshal: {"kind""Ptr","child":{"kind":"Void"}},
    plsnEnd: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    lpOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn CreateLogContainerScanContext(
    hLog: Windows.Win32.SystemServices.HANDLE,
    cFromContainer: {"kind":"UInt32"},
    cContainers: {"kind":"UInt32"},
    eScanMode: {"kind":"Byte"},
    pcxScan: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_SCAN_CONTEXT},
    pOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn ScanLogContainers(
    pcxScan: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_SCAN_CONTEXT},
    eScanMode: {"kind":"Byte"},
    pReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn AlignReservedLog(
    pvMarshal: {"kind""Ptr","child":{"kind":"Void"}},
    cReservedRecords: {"kind":"UInt32"},
    rgcbReservation: {"kind""Ptr","child":{"kind":"Int64"}},
    pcbAlignReservation: {"kind""Ptr","child":{"kind":"Int64"}},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn AllocReservedLog(
    pvMarshal: {"kind""Ptr","child":{"kind":"Void"}},
    cReservedRecords: {"kind":"UInt32"},
    pcbAdjustment: {"kind""Ptr","child":{"kind":"Int64"}},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn FreeReservedLog(
    pvMarshal: {"kind""Ptr","child":{"kind":"Void"}},
    cReservedRecords: {"kind":"UInt32"},
    pcbAdjustment: {"kind""Ptr","child":{"kind":"Int64"}},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn GetLogFileInformation(
    hLog: Windows.Win32.SystemServices.HANDLE,
    pinfoBuffer: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_INFORMATION},
    cbBuffer: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn SetLogArchiveMode(
    hLog: Windows.Win32.SystemServices.HANDLE,
    eMode: Windows.Win32.FileSystem.CLFS_LOG_ARCHIVE_MODE,

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn ReadLogRestartArea(
    pvMarshal: {"kind""Ptr","child":{"kind":"Void"}},
    ppvRestartBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pcbRestartBuffer: {"kind""Ptr","child":{"kind":"UInt32"}},
    plsn: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    ppvContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn ReadPreviousLogRestartArea(
    pvReadContext: {"kind""Ptr","child":{"kind":"Void"}},
    ppvRestartBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pcbRestartBuffer: {"kind""Ptr","child":{"kind":"UInt32"}},
    plsnRestart: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    pOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn WriteLogRestartArea(
    pvMarshal: {"kind""Ptr","child":{"kind":"Void"}},
    pvRestartBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    cbRestartBuffer: {"kind":"UInt32"},
    plsnBase: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    fFlags: {"kind":"UInt32"},
    pcbWritten: {"kind""Ptr","child":{"kind":"UInt32"}},
    plsnNext: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    pOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},

// set_last_errror=False (can and should we use this?)
pub extern "clfsw32" fn GetLogReservationInfo(
    pvMarshal: {"kind""Ptr","child":{"kind":"Void"}},
    pcbRecordNumber: {"kind""Ptr","child":{"kind":"UInt32"}},
    pcbUserReservation: {"kind""Ptr","child":{"kind":"Int64"}},
    pcbCommitReservation: {"kind""Ptr","child":{"kind":"Int64"}},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn AdvanceLogBase(
    pvMarshal: {"kind""Ptr","child":{"kind":"Void"}},
    plsnBase: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    fFlags: {"kind":"UInt32"},
    pOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn CloseAndResetLogFile(
    hLog: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn CreateLogMarshallingArea(
    hLog: Windows.Win32.SystemServices.HANDLE,
    pfnAllocBuffer: Windows.Win32.FileSystem.CLFS_BLOCK_ALLOCATION,
    pfnFreeBuffer: Windows.Win32.FileSystem.CLFS_BLOCK_DEALLOCATION,
    pvBlockAllocContext: {"kind""Ptr","child":{"kind":"Void"}},
    cbMarshallingBuffer: {"kind":"UInt32"},
    cMaxWriteBuffers: {"kind":"UInt32"},
    cMaxReadBuffers: {"kind":"UInt32"},
    ppvMarshal: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn DeleteLogMarshallingArea(
    pvMarshal: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn ReserveAndAppendLog(
    pvMarshal: {"kind""Ptr","child":{"kind":"Void"}},
    rgWriteEntries: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_WRITE_ENTRY},
    cWriteEntries: {"kind":"UInt32"},
    plsnUndoNext: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    plsnPrevious: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    cReserveRecords: {"kind":"UInt32"},
    rgcbReservation: {"kind""Ptr","child":{"kind":"Int64"}},
    fFlags: {"kind":"UInt32"},
    plsn: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    pOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn ReserveAndAppendLogAligned(
    pvMarshal: {"kind""Ptr","child":{"kind":"Void"}},
    rgWriteEntries: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_WRITE_ENTRY},
    cWriteEntries: {"kind":"UInt32"},
    cbEntryAlignment: {"kind":"UInt32"},
    plsnUndoNext: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    plsnPrevious: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    cReserveRecords: {"kind":"UInt32"},
    rgcbReservation: {"kind""Ptr","child":{"kind":"Int64"}},
    fFlags: {"kind":"UInt32"},
    plsn: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    pOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn FlushLogBuffers(
    pvMarshal: {"kind""Ptr","child":{"kind":"Void"}},
    pOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn FlushLogToLsn(
    pvMarshalContext: {"kind""Ptr","child":{"kind":"Void"}},
    plsnFlush: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    plsnLastFlushed: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    pOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn ReadLogRecord(
    pvMarshal: {"kind""Ptr","child":{"kind":"Void"}},
    plsnFirst: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    eContextMode: Windows.Win32.FileSystem.CLFS_CONTEXT_MODE,
    ppvReadBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pcbReadBuffer: {"kind""Ptr","child":{"kind":"UInt32"}},
    peRecordType: {"kind""Ptr","child":{"kind":"Byte"}},
    plsnUndoNext: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    plsnPrevious: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    ppvReadContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn ReadNextLogRecord(
    pvReadContext: {"kind""Ptr","child":{"kind":"Void"}},
    ppvBuffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},
    pcbBuffer: {"kind""Ptr","child":{"kind":"UInt32"}},
    peRecordType: {"kind""Ptr","child":{"kind":"Byte"}},
    plsnUser: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    plsnUndoNext: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    plsnPrevious: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    plsnRecord: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    pOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn TerminateReadLog(
    pvCursorContext: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn PrepareLogArchive(
    hLog: Windows.Win32.SystemServices.HANDLE,
    pszBaseLogFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    cLen: {"kind":"UInt32"},
    plsnLow: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    plsnHigh: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    pcActualLength: {"kind""Ptr","child":{"kind":"UInt32"}},
    poffBaseLogFileData: {"kind""Ptr","child":{"kind":"UInt64"}},
    pcbBaseLogFileLength: {"kind""Ptr","child":{"kind":"UInt64"}},
    plsnBase: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    plsnLast: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    plsnCurrentArchiveTail: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    ppvArchiveContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn ReadLogArchiveMetadata(
    pvArchiveContext: {"kind""Ptr","child":{"kind":"Void"}},
    cbOffset: {"kind":"UInt32"},
    cbBytesToRead: {"kind":"UInt32"},
    pbReadBuffer: {"kind""Ptr","child":{"kind":"Byte"}},
    pcbBytesRead: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn GetNextLogArchiveExtent(
    pvArchiveContext: {"kind""Ptr","child":{"kind":"Void"}},
    rgadExtent: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_ARCHIVE_DESCRIPTOR},
    cDescriptors: {"kind":"UInt32"},
    pcDescriptorsReturned: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn TerminateLogArchive(
    pvArchiveContext: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn ValidateLog(
    pszLogFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    psaLogFile: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    pinfoBuffer: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_INFORMATION},
    pcbBuffer: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn GetLogContainerName(
    hLog: Windows.Win32.SystemServices.HANDLE,
    cidLogicalContainer: {"kind":"UInt32"},
    pwstrContainerName: {"kind""Ptr","child":{"kind":"UInt16"}},
    cLenContainerName: {"kind":"UInt32"},
    pcActualLenContainerName: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn GetLogIoStatistics(
    hLog: Windows.Win32.SystemServices.HANDLE,
    pvStatsBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    cbStatsBuffer: {"kind":"UInt32"},
    eStatsClass: Windows.Win32.FileSystem.CLFS_IOSTATS_CLASS,
    pcbStatsWritten: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn RegisterManageableLogClient(
    hLog: Windows.Win32.SystemServices.HANDLE,
    pCallbacks: {"kind""Ptr","child":Windows.Win32.FileSystem.LOG_MANAGEMENT_CALLBACKS},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn DeregisterManageableLogClient(
    hLog: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn ReadLogNotification(
    hLog: Windows.Win32.SystemServices.HANDLE,
    pNotification: {"kind""Ptr","child":Windows.Win32.FileSystem.CLFS_MGMT_NOTIFICATION},
    lpOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn InstallLogPolicy(
    hLog: Windows.Win32.SystemServices.HANDLE,
    pPolicy: {"kind""Ptr","child":Windows.Win32.FileSystem.CLFS_MGMT_POLICY},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn RemoveLogPolicy(
    hLog: Windows.Win32.SystemServices.HANDLE,
    ePolicyType: Windows.Win32.FileSystem.CLFS_MGMT_POLICY_TYPE,

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn QueryLogPolicy(
    hLog: Windows.Win32.SystemServices.HANDLE,
    ePolicyType: Windows.Win32.FileSystem.CLFS_MGMT_POLICY_TYPE,
    pPolicyBuffer: {"kind""Ptr","child":Windows.Win32.FileSystem.CLFS_MGMT_POLICY},
    pcbPolicyBuffer: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn SetLogFileSizeWithPolicy(
    hLog: Windows.Win32.SystemServices.HANDLE,
    pDesiredSize: {"kind""Ptr","child":{"kind":"UInt64"}},
    pResultingSize: {"kind""Ptr","child":{"kind":"UInt64"}},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn HandleLogFull(
    hLog: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn LogTailAdvanceFailure(
    hLog: Windows.Win32.SystemServices.HANDLE,
    dwReason: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "clfsw32" fn RegisterForLogWriteNotification(
    hLog: Windows.Win32.SystemServices.HANDLE,
    cbThreshold: {"kind":"UInt32"},
    fEnable: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "WOFUTIL" fn WofShouldCompressBinaries(
    Volume: {"kind""Ptr","child":{"kind":"UInt16"}},
    Algorithm: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WOFUTIL" fn WofGetDriverVersion(
    FileOrVolumeHandle: Windows.Win32.SystemServices.HANDLE,
    Provider: {"kind":"UInt32"},
    WofVersion: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WOFUTIL" fn WofSetFileDataLocation(
    FileHandle: Windows.Win32.SystemServices.HANDLE,
    Provider: {"kind":"UInt32"},
    ExternalFileInfo: {"kind""Ptr","child":{"kind":"Void"}},
    Length: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "WOFUTIL" fn WofIsExternalFile(
    FilePath: {"kind""Ptr","child":{"kind":"UInt16"}},
    IsExternalFile: {"kind""Ptr","child":{"kind":"Int32"}},
    Provider: {"kind""Ptr","child":{"kind":"UInt32"}},
    ExternalFileInfo: {"kind""Ptr","child":{"kind":"Void"}},
    BufferLength: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "WOFUTIL" fn WofEnumEntries(
    VolumeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Provider: {"kind":"UInt32"},
    EnumProc: Windows.Win32.FileSystem.WofEnumEntryProc,
    UserData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "WOFUTIL" fn WofWimAddEntry(
    VolumeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    WimPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    WimType: {"kind":"UInt32"},
    WimIndex: {"kind":"UInt32"},
    DataSourceId: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=False (can and should we use this?)
pub extern "WOFUTIL" fn WofWimEnumFiles(
    VolumeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    DataSourceId: Windows.Win32.SystemServices.LARGE_INTEGER,
    EnumProc: Windows.Win32.FileSystem.WofEnumFilesProc,
    UserData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "WOFUTIL" fn WofWimSuspendEntry(
    VolumeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    DataSourceId: Windows.Win32.SystemServices.LARGE_INTEGER,

// set_last_errror=False (can and should we use this?)
pub extern "WOFUTIL" fn WofWimRemoveEntry(
    VolumeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    DataSourceId: Windows.Win32.SystemServices.LARGE_INTEGER,

// set_last_errror=False (can and should we use this?)
pub extern "WOFUTIL" fn WofWimUpdateEntry(
    VolumeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    DataSourceId: Windows.Win32.SystemServices.LARGE_INTEGER,
    NewWimPath: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "WOFUTIL" fn WofFileEnumFiles(
    VolumeName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Algorithm: {"kind":"UInt32"},
    EnumProc: Windows.Win32.FileSystem.WofEnumFilesProc,
    UserData: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "txfw32" fn TxfLogCreateFileReadContext(
    LogPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    BeginningLsn: Windows.Win32.FileSystem.CLS_LSN,
    EndingLsn: Windows.Win32.FileSystem.CLS_LSN,
    TxfFileId: {"kind""Ptr","child":Windows.Win32.FileSystem.TXF_ID},
    TxfLogContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "txfw32" fn TxfLogCreateRangeReadContext(
    LogPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    BeginningLsn: Windows.Win32.FileSystem.CLS_LSN,
    EndingLsn: Windows.Win32.FileSystem.CLS_LSN,
    BeginningVirtualClock: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},
    EndingVirtualClock: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},
    RecordTypeMask: {"kind":"UInt32"},
    TxfLogContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=True (can and should we use this?)
pub extern "txfw32" fn TxfLogDestroyReadContext(
    TxfLogContext: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "txfw32" fn TxfLogReadRecords(
    TxfLogContext: {"kind""Ptr","child":{"kind":"Void"}},
    BufferLength: {"kind":"UInt32"},
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},
    BytesUsed: {"kind""Ptr","child":{"kind":"UInt32"}},
    RecordCount: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "txfw32" fn TxfReadMetadataInfo(
    FileHandle: Windows.Win32.SystemServices.HANDLE,
    TxfFileId: {"kind""Ptr","child":Windows.Win32.FileSystem.TXF_ID},
    LastLsn: {"kind""Ptr","child":Windows.Win32.FileSystem.CLS_LSN},
    TransactionState: {"kind""Ptr","child":{"kind":"UInt32"}},
    LockingTransaction: {"kind""Ptr","child":Guid},

// set_last_errror=False (can and should we use this?)
pub extern "txfw32" fn TxfLogRecordGetFileName(
    RecordBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    RecordBufferLengthInBytes: {"kind":"UInt32"},
    NameBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    NameBufferLengthInBytes: {"kind""Ptr","child":{"kind":"UInt32"}},
    TxfId: {"kind""Ptr","child":Windows.Win32.FileSystem.TXF_ID},

// set_last_errror=False (can and should we use this?)
pub extern "txfw32" fn TxfLogRecordGetGenericType(
    RecordBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    RecordBufferLengthInBytes: {"kind":"UInt32"},
    GenericType: {"kind""Ptr","child":{"kind":"UInt32"}},
    VirtualClock: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=False (can and should we use this?)
pub extern "txfw32" fn TxfSetThreadMiniVersionForCreate(
    MiniVersion: {"kind":"UInt16"},

// set_last_errror=False (can and should we use this?)
pub extern "txfw32" fn TxfGetThreadMiniVersionForCreate(
    MiniVersion: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn CreateTransaction(
    lpTransactionAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    UOW: {"kind""Ptr","child":Guid},
    CreateOptions: {"kind":"UInt32"},
    IsolationLevel: {"kind":"UInt32"},
    IsolationFlags: {"kind":"UInt32"},
    Timeout: {"kind":"UInt32"},
    Description: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn OpenTransaction(
    dwDesiredAccess: {"kind":"UInt32"},
    TransactionId: {"kind""Ptr","child":Guid},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn CommitTransaction(
    TransactionHandle: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn CommitTransactionAsync(
    TransactionHandle: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn RollbackTransaction(
    TransactionHandle: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn RollbackTransactionAsync(
    TransactionHandle: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn GetTransactionId(
    TransactionHandle: Windows.Win32.SystemServices.HANDLE,
    TransactionId: {"kind""Ptr","child":Guid},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn GetTransactionInformation(
    TransactionHandle: Windows.Win32.SystemServices.HANDLE,
    Outcome: {"kind""Ptr","child":{"kind":"UInt32"}},
    IsolationLevel: {"kind""Ptr","child":{"kind":"UInt32"}},
    IsolationFlags: {"kind""Ptr","child":{"kind":"UInt32"}},
    Timeout: {"kind""Ptr","child":{"kind":"UInt32"}},
    BufferLength: {"kind":"UInt32"},
    Description: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn SetTransactionInformation(
    TransactionHandle: Windows.Win32.SystemServices.HANDLE,
    IsolationLevel: {"kind":"UInt32"},
    IsolationFlags: {"kind":"UInt32"},
    Timeout: {"kind":"UInt32"},
    Description: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn CreateTransactionManager(
    lpTransactionAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    LogFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    CreateOptions: {"kind":"UInt32"},
    CommitStrength: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn OpenTransactionManager(
    LogFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    DesiredAccess: {"kind":"UInt32"},
    OpenOptions: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn OpenTransactionManagerById(
    TransactionManagerId: {"kind""Ptr","child":Guid},
    DesiredAccess: {"kind":"UInt32"},
    OpenOptions: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn RenameTransactionManager(
    LogFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ExistingTransactionManagerGuid: {"kind""Ptr","child":Guid},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn RollforwardTransactionManager(
    TransactionManagerHandle: Windows.Win32.SystemServices.HANDLE,
    TmVirtualClock: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn RecoverTransactionManager(
    TransactionManagerHandle: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn GetCurrentClockTransactionManager(
    TransactionManagerHandle: Windows.Win32.SystemServices.HANDLE,
    TmVirtualClock: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn GetTransactionManagerId(
    TransactionManagerHandle: Windows.Win32.SystemServices.HANDLE,
    TransactionManagerId: {"kind""Ptr","child":Guid},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn CreateResourceManager(
    lpResourceManagerAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    ResourceManagerId: {"kind""Ptr","child":Guid},
    CreateOptions: {"kind":"UInt32"},
    TmHandle: Windows.Win32.SystemServices.HANDLE,
    Description: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn OpenResourceManager(
    dwDesiredAccess: {"kind":"UInt32"},
    TmHandle: Windows.Win32.SystemServices.HANDLE,
    ResourceManagerId: {"kind""Ptr","child":Guid},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn RecoverResourceManager(
    ResourceManagerHandle: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn GetNotificationResourceManager(
    ResourceManagerHandle: Windows.Win32.SystemServices.HANDLE,
    TransactionNotification: {"kind""Ptr","child":Windows.Win32.FileSystem.TRANSACTION_NOTIFICATION},
    NotificationLength: {"kind":"UInt32"},
    dwMilliseconds: {"kind":"UInt32"},
    ReturnLength: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn GetNotificationResourceManagerAsync(
    ResourceManagerHandle: Windows.Win32.SystemServices.HANDLE,
    TransactionNotification: {"kind""Ptr","child":Windows.Win32.FileSystem.TRANSACTION_NOTIFICATION},
    TransactionNotificationLength: {"kind":"UInt32"},
    ReturnLength: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn SetResourceManagerCompletionPort(
    ResourceManagerHandle: Windows.Win32.SystemServices.HANDLE,
    IoCompletionPortHandle: Windows.Win32.SystemServices.HANDLE,
    CompletionKey: {"kind":"UIntPtr"},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn CreateEnlistment(
    lpEnlistmentAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    ResourceManagerHandle: Windows.Win32.SystemServices.HANDLE,
    TransactionHandle: Windows.Win32.SystemServices.HANDLE,
    NotificationMask: {"kind":"UInt32"},
    CreateOptions: {"kind":"UInt32"},
    EnlistmentKey: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn OpenEnlistment(
    dwDesiredAccess: {"kind":"UInt32"},
    ResourceManagerHandle: Windows.Win32.SystemServices.HANDLE,
    EnlistmentId: {"kind""Ptr","child":Guid},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn RecoverEnlistment(
    EnlistmentHandle: Windows.Win32.SystemServices.HANDLE,
    EnlistmentKey: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn GetEnlistmentRecoveryInformation(
    EnlistmentHandle: Windows.Win32.SystemServices.HANDLE,
    BufferSize: {"kind":"UInt32"},
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},
    BufferUsed: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn GetEnlistmentId(
    EnlistmentHandle: Windows.Win32.SystemServices.HANDLE,
    EnlistmentId: {"kind""Ptr","child":Guid},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn SetEnlistmentRecoveryInformation(
    EnlistmentHandle: Windows.Win32.SystemServices.HANDLE,
    BufferSize: {"kind":"UInt32"},
    Buffer: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn PrepareEnlistment(
    EnlistmentHandle: Windows.Win32.SystemServices.HANDLE,
    TmVirtualClock: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn PrePrepareEnlistment(
    EnlistmentHandle: Windows.Win32.SystemServices.HANDLE,
    TmVirtualClock: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn CommitEnlistment(
    EnlistmentHandle: Windows.Win32.SystemServices.HANDLE,
    TmVirtualClock: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn RollbackEnlistment(
    EnlistmentHandle: Windows.Win32.SystemServices.HANDLE,
    TmVirtualClock: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn PrePrepareComplete(
    EnlistmentHandle: Windows.Win32.SystemServices.HANDLE,
    TmVirtualClock: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn PrepareComplete(
    EnlistmentHandle: Windows.Win32.SystemServices.HANDLE,
    TmVirtualClock: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn ReadOnlyEnlistment(
    EnlistmentHandle: Windows.Win32.SystemServices.HANDLE,
    TmVirtualClock: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn CommitComplete(
    EnlistmentHandle: Windows.Win32.SystemServices.HANDLE,
    TmVirtualClock: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn RollbackComplete(
    EnlistmentHandle: Windows.Win32.SystemServices.HANDLE,
    TmVirtualClock: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=True (can and should we use this?)
pub extern "ktmw32" fn SinglePhaseReject(
    EnlistmentHandle: Windows.Win32.SystemServices.HANDLE,
    TmVirtualClock: {"kind""Ptr","child":Windows.Win32.SystemServices.LARGE_INTEGER},

// set_last_errror=False (can and should we use this?)
pub extern "srvcli" fn NetShareAdd(
    servername: {"kind""Ptr","child":{"kind":"UInt16"}},
    level: {"kind":"UInt32"},
    buf: {"kind""Ptr","child":{"kind":"Byte"}},
    parm_err: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "srvcli" fn NetShareEnum(
    servername: {"kind""Ptr","child":{"kind":"UInt16"}},
    level: {"kind":"UInt32"},
    bufptr: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    prefmaxlen: {"kind":"UInt32"},
    entriesread: {"kind""Ptr","child":{"kind":"UInt32"}},
    totalentries: {"kind""Ptr","child":{"kind":"UInt32"}},
    resume_handle: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "srvcli" fn NetShareEnumSticky(
    servername: {"kind""Ptr","child":{"kind":"UInt16"}},
    level: {"kind":"UInt32"},
    bufptr: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    prefmaxlen: {"kind":"UInt32"},
    entriesread: {"kind""Ptr","child":{"kind":"UInt32"}},
    totalentries: {"kind""Ptr","child":{"kind":"UInt32"}},
    resume_handle: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "srvcli" fn NetShareGetInfo(
    servername: {"kind""Ptr","child":{"kind":"UInt16"}},
    netname: {"kind""Ptr","child":{"kind":"UInt16"}},
    level: {"kind":"UInt32"},
    bufptr: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "srvcli" fn NetShareSetInfo(
    servername: {"kind""Ptr","child":{"kind":"UInt16"}},
    netname: {"kind""Ptr","child":{"kind":"UInt16"}},
    level: {"kind":"UInt32"},
    buf: {"kind""Ptr","child":{"kind":"Byte"}},
    parm_err: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "srvcli" fn NetShareDel(
    servername: {"kind""Ptr","child":{"kind":"UInt16"}},
    netname: {"kind""Ptr","child":{"kind":"UInt16"}},
    reserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "srvcli" fn NetShareDelSticky(
    servername: {"kind""Ptr","child":{"kind":"UInt16"}},
    netname: {"kind""Ptr","child":{"kind":"UInt16"}},
    reserved: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "srvcli" fn NetShareCheck(
    servername: {"kind""Ptr","child":{"kind":"UInt16"}},
    device: {"kind""Ptr","child":{"kind":"UInt16"}},
    type: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "srvcli" fn NetShareDelEx(
    servername: {"kind""Ptr","child":{"kind":"UInt16"}},
    level: {"kind":"UInt32"},
    buf: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "srvcli" fn NetServerAliasAdd(
    servername: {"kind""Ptr","child":{"kind":"UInt16"}},
    level: {"kind":"UInt32"},
    buf: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "srvcli" fn NetServerAliasDel(
    servername: {"kind""Ptr","child":{"kind":"UInt16"}},
    level: {"kind":"UInt32"},
    buf: {"kind""Ptr","child":{"kind":"Byte"}},

// set_last_errror=False (can and should we use this?)
pub extern "srvcli" fn NetServerAliasEnum(
    servername: {"kind""Ptr","child":{"kind":"UInt16"}},
    level: {"kind":"UInt32"},
    bufptr: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    prefmaxlen: {"kind":"UInt32"},
    entriesread: {"kind""Ptr","child":{"kind":"UInt32"}},
    totalentries: {"kind""Ptr","child":{"kind":"UInt32"}},
    resumehandle: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "srvcli" fn NetSessionEnum(
    servername: {"kind""Ptr","child":{"kind":"UInt16"}},
    UncClientName: {"kind""Ptr","child":{"kind":"UInt16"}},
    username: {"kind""Ptr","child":{"kind":"UInt16"}},
    level: {"kind":"UInt32"},
    bufptr: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    prefmaxlen: {"kind":"UInt32"},
    entriesread: {"kind""Ptr","child":{"kind":"UInt32"}},
    totalentries: {"kind""Ptr","child":{"kind":"UInt32"}},
    resume_handle: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "srvcli" fn NetSessionDel(
    servername: {"kind""Ptr","child":{"kind":"UInt16"}},
    UncClientName: {"kind""Ptr","child":{"kind":"UInt16"}},
    username: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "srvcli" fn NetSessionGetInfo(
    servername: {"kind""Ptr","child":{"kind":"UInt16"}},
    UncClientName: {"kind""Ptr","child":{"kind":"UInt16"}},
    username: {"kind""Ptr","child":{"kind":"UInt16"}},
    level: {"kind":"UInt32"},
    bufptr: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "srvcli" fn NetConnectionEnum(
    servername: {"kind""Ptr","child":{"kind":"UInt16"}},
    qualifier: {"kind""Ptr","child":{"kind":"UInt16"}},
    level: {"kind":"UInt32"},
    bufptr: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    prefmaxlen: {"kind":"UInt32"},
    entriesread: {"kind""Ptr","child":{"kind":"UInt32"}},
    totalentries: {"kind""Ptr","child":{"kind":"UInt32"}},
    resume_handle: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "srvcli" fn NetFileClose(
    servername: {"kind""Ptr","child":{"kind":"UInt16"}},
    fileid: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "srvcli" fn NetFileEnum(
    servername: {"kind""Ptr","child":{"kind":"UInt16"}},
    basepath: {"kind""Ptr","child":{"kind":"UInt16"}},
    username: {"kind""Ptr","child":{"kind":"UInt16"}},
    level: {"kind":"UInt32"},
    bufptr: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},
    prefmaxlen: {"kind":"UInt32"},
    entriesread: {"kind""Ptr","child":{"kind":"UInt32"}},
    totalentries: {"kind""Ptr","child":{"kind":"UInt32"}},
    resume_handle: {"kind""Ptr","child":{"kind":"UIntPtr"}},

// set_last_errror=False (can and should we use this?)
pub extern "srvcli" fn NetFileGetInfo(
    servername: {"kind""Ptr","child":{"kind":"UInt16"}},
    fileid: {"kind":"UInt32"},
    level: {"kind":"UInt32"},
    bufptr: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=False (can and should we use this?)
pub extern "NETAPI32" fn NetStatisticsGet(
    ServerName: {"kind""Ptr","child":{"kind":"SByte"}},
    Service: {"kind""Ptr","child":{"kind":"SByte"}},
    Level: {"kind":"UInt32"},
    Options: {"kind":"UInt32"},
    Buffer: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Byte"}}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SearchPathW(
    lpPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpExtension: {"kind""Ptr","child":{"kind":"UInt16"}},
    nBufferLength: {"kind":"UInt32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpFilePart: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SearchPathA(
    lpPath: {"kind""Ptr","child":{"kind":"SByte"}},
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpExtension: {"kind""Ptr","child":{"kind":"SByte"}},
    nBufferLength: {"kind":"UInt32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"SByte"}},
    lpFilePart: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetBinaryTypeA(
    lpApplicationName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpBinaryType: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetBinaryTypeW(
    lpApplicationName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpBinaryType: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetShortPathNameA(
    lpszLongPath: {"kind""Ptr","child":{"kind":"SByte"}},
    lpszShortPath: {"kind""Ptr","child":{"kind":"SByte"}},
    cchBuffer: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetLongPathNameTransactedA(
    lpszShortPath: {"kind""Ptr","child":{"kind":"SByte"}},
    lpszLongPath: {"kind""Ptr","child":{"kind":"SByte"}},
    cchBuffer: {"kind":"UInt32"},
    hTransaction: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetLongPathNameTransactedW(
    lpszShortPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszLongPath: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchBuffer: {"kind":"UInt32"},
    hTransaction: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetFileCompletionNotificationModes(
    FileHandle: Windows.Win32.SystemServices.HANDLE,
    Flags: {"kind":"Byte"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetFileShortNameA(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpShortName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetFileShortNameW(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpShortName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn EncryptFileA(
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn EncryptFileW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn DecryptFileA(
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwReserved: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn DecryptFileW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwReserved: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn FileEncryptionStatusA(
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpStatus: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "ADVAPI32" fn FileEncryptionStatusW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpStatus: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn OpenEncryptedFileRawA(
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    ulFlags: {"kind":"UInt32"},
    pvContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn OpenEncryptedFileRawW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ulFlags: {"kind":"UInt32"},
    pvContext: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn ReadEncryptedFileRaw(
    pfExportCallback: Windows.Win32.FileSystem.PFE_EXPORT_FUNC,
    pvCallbackContext: {"kind""Ptr","child":{"kind":"Void"}},
    pvContext: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn WriteEncryptedFileRaw(
    pfImportCallback: Windows.Win32.FileSystem.PFE_IMPORT_FUNC,
    pvCallbackContext: {"kind""Ptr","child":{"kind":"Void"}},
    pvContext: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "ADVAPI32" fn CloseEncryptedFileRaw(
    pvContext: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn OpenFile(
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpReOpenBuff: {"kind""Ptr","child":Windows.Win32.FileSystem.OFSTRUCT},
    uStyle: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetLogicalDriveStringsA(
    nBufferLength: {"kind":"UInt32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn Wow64EnableWow64FsRedirection(
    Wow64FsEnableRedirection: {"kind":"Byte"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetSearchPathMode(
    Flags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateDirectoryExA(
    lpTemplateDirectory: {"kind""Ptr","child":{"kind":"SByte"}},
    lpNewDirectory: {"kind""Ptr","child":{"kind":"SByte"}},
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateDirectoryExW(
    lpTemplateDirectory: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpNewDirectory: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateDirectoryTransactedA(
    lpTemplateDirectory: {"kind""Ptr","child":{"kind":"SByte"}},
    lpNewDirectory: {"kind""Ptr","child":{"kind":"SByte"}},
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    hTransaction: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateDirectoryTransactedW(
    lpTemplateDirectory: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpNewDirectory: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    hTransaction: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn RemoveDirectoryTransactedA(
    lpPathName: {"kind""Ptr","child":{"kind":"SByte"}},
    hTransaction: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn RemoveDirectoryTransactedW(
    lpPathName: {"kind""Ptr","child":{"kind":"UInt16"}},
    hTransaction: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFullPathNameTransactedA(
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    nBufferLength: {"kind":"UInt32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"SByte"}},
    lpFilePart: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"SByte"}}},
    hTransaction: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFullPathNameTransactedW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    nBufferLength: {"kind":"UInt32"},
    lpBuffer: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpFilePart: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    hTransaction: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DefineDosDeviceA(
    dwFlags: {"kind":"UInt32"},
    lpDeviceName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpTargetPath: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn QueryDosDeviceA(
    lpDeviceName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpTargetPath: {"kind""Ptr","child":{"kind":"SByte"}},
    ucchMax: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateFileTransactedA(
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwDesiredAccess: {"kind":"UInt32"},
    dwShareMode: {"kind":"UInt32"},
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    dwCreationDisposition: {"kind":"UInt32"},
    dwFlagsAndAttributes: {"kind":"UInt32"},
    hTemplateFile: Windows.Win32.SystemServices.HANDLE,
    hTransaction: Windows.Win32.SystemServices.HANDLE,
    pusMiniVersion: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpExtendedParameter: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateFileTransactedW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwDesiredAccess: {"kind":"UInt32"},
    dwShareMode: {"kind":"UInt32"},
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    dwCreationDisposition: {"kind":"UInt32"},
    dwFlagsAndAttributes: {"kind":"UInt32"},
    hTemplateFile: Windows.Win32.SystemServices.HANDLE,
    hTransaction: Windows.Win32.SystemServices.HANDLE,
    pusMiniVersion: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpExtendedParameter: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ReOpenFile(
    hOriginalFile: Windows.Win32.SystemServices.HANDLE,
    dwDesiredAccess: {"kind":"UInt32"},
    dwShareMode: {"kind":"UInt32"},
    dwFlagsAndAttributes: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetFileAttributesTransactedA(
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFileAttributes: {"kind":"UInt32"},
    hTransaction: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetFileAttributesTransactedW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFileAttributes: {"kind":"UInt32"},
    hTransaction: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFileAttributesTransactedA(
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    fInfoLevelId: Windows.Win32.FileSystem.GET_FILEEX_INFO_LEVELS,
    lpFileInformation: {"kind""Ptr","child":{"kind":"Void"}},
    hTransaction: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFileAttributesTransactedW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    fInfoLevelId: Windows.Win32.FileSystem.GET_FILEEX_INFO_LEVELS,
    lpFileInformation: {"kind""Ptr","child":{"kind":"Void"}},
    hTransaction: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetCompressedFileSizeTransactedA(
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpFileSizeHigh: {"kind""Ptr","child":{"kind":"UInt32"}},
    hTransaction: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetCompressedFileSizeTransactedW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpFileSizeHigh: {"kind""Ptr","child":{"kind":"UInt32"}},
    hTransaction: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DeleteFileTransactedA(
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    hTransaction: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DeleteFileTransactedW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    hTransaction: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CheckNameLegalDOS8Dot3A(
    lpName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpOemName: {"kind""Ptr","child":{"kind":"SByte"}},
    OemNameSize: {"kind":"UInt32"},
    pbNameContainsSpaces: {"kind""Ptr","child":{"kind":"Int32"}},
    pbNameLegal: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CheckNameLegalDOS8Dot3W(
    lpName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpOemName: {"kind""Ptr","child":{"kind":"SByte"}},
    OemNameSize: {"kind":"UInt32"},
    pbNameContainsSpaces: {"kind""Ptr","child":{"kind":"Int32"}},
    pbNameLegal: {"kind""Ptr","child":{"kind":"Int32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindFirstFileTransactedA(
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    fInfoLevelId: Windows.Win32.FileSystem.FINDEX_INFO_LEVELS,
    lpFindFileData: {"kind""Ptr","child":{"kind":"Void"}},
    fSearchOp: Windows.Win32.FileSystem.FINDEX_SEARCH_OPS,
    lpSearchFilter: {"kind""Ptr","child":{"kind":"Void"}},
    dwAdditionalFlags: {"kind":"UInt32"},
    hTransaction: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindFirstFileTransactedW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    fInfoLevelId: Windows.Win32.FileSystem.FINDEX_INFO_LEVELS,
    lpFindFileData: {"kind""Ptr","child":{"kind":"Void"}},
    fSearchOp: Windows.Win32.FileSystem.FINDEX_SEARCH_OPS,
    lpSearchFilter: {"kind""Ptr","child":{"kind":"Void"}},
    dwAdditionalFlags: {"kind":"UInt32"},
    hTransaction: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CopyFileA(
    lpExistingFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpNewFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    bFailIfExists: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CopyFileW(
    lpExistingFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpNewFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    bFailIfExists: Windows.Win32.SystemServices.BOOL,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CopyFileExA(
    lpExistingFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpNewFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpProgressRoutine: Windows.Win32.FileSystem.LPPROGRESS_ROUTINE,
    lpData: {"kind""Ptr","child":{"kind":"Void"}},
    pbCancel: {"kind""Ptr","child":{"kind":"Int32"}},
    dwCopyFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CopyFileExW(
    lpExistingFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpNewFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpProgressRoutine: Windows.Win32.FileSystem.LPPROGRESS_ROUTINE,
    lpData: {"kind""Ptr","child":{"kind":"Void"}},
    pbCancel: {"kind""Ptr","child":{"kind":"Int32"}},
    dwCopyFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CopyFileTransactedA(
    lpExistingFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpNewFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpProgressRoutine: Windows.Win32.FileSystem.LPPROGRESS_ROUTINE,
    lpData: {"kind""Ptr","child":{"kind":"Void"}},
    pbCancel: {"kind""Ptr","child":{"kind":"Int32"}},
    dwCopyFlags: {"kind":"UInt32"},
    hTransaction: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CopyFileTransactedW(
    lpExistingFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpNewFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpProgressRoutine: Windows.Win32.FileSystem.LPPROGRESS_ROUTINE,
    lpData: {"kind""Ptr","child":{"kind":"Void"}},
    pbCancel: {"kind""Ptr","child":{"kind":"Int32"}},
    dwCopyFlags: {"kind":"UInt32"},
    hTransaction: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "KERNEL32" fn CopyFile2(
    pwszExistingFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszNewFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pExtendedParameters: {"kind""Ptr","child":Windows.Win32.FileSystem.COPYFILE2_EXTENDED_PARAMETERS},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn MoveFileA(
    lpExistingFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpNewFileName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn MoveFileW(
    lpExistingFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpNewFileName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn MoveFileExA(
    lpExistingFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpNewFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn MoveFileExW(
    lpExistingFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpNewFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn MoveFileWithProgressA(
    lpExistingFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpNewFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpProgressRoutine: Windows.Win32.FileSystem.LPPROGRESS_ROUTINE,
    lpData: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn MoveFileWithProgressW(
    lpExistingFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpNewFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpProgressRoutine: Windows.Win32.FileSystem.LPPROGRESS_ROUTINE,
    lpData: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn MoveFileTransactedA(
    lpExistingFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpNewFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpProgressRoutine: Windows.Win32.FileSystem.LPPROGRESS_ROUTINE,
    lpData: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},
    hTransaction: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn MoveFileTransactedW(
    lpExistingFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpNewFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpProgressRoutine: Windows.Win32.FileSystem.LPPROGRESS_ROUTINE,
    lpData: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},
    hTransaction: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ReplaceFileA(
    lpReplacedFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpReplacementFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpBackupFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwReplaceFlags: {"kind":"UInt32"},
    lpExclude: {"kind""Ptr","child":{"kind":"Void"}},
    lpReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ReplaceFileW(
    lpReplacedFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpReplacementFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpBackupFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwReplaceFlags: {"kind":"UInt32"},
    lpExclude: {"kind""Ptr","child":{"kind":"Void"}},
    lpReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateHardLinkA(
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpExistingFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateHardLinkW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpExistingFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateHardLinkTransactedA(
    lpFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpExistingFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    hTransaction: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateHardLinkTransactedW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpExistingFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    hTransaction: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindFirstStreamTransactedW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    InfoLevel: Windows.Win32.FileSystem.STREAM_INFO_LEVELS,
    lpFindStreamData: {"kind""Ptr","child":{"kind":"Void"}},
    dwFlags: {"kind":"UInt32"},
    hTransaction: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindFirstFileNameTransactedW(
    lpFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    StringLength: {"kind""Ptr","child":{"kind":"UInt32"}},
    LinkName: {"kind""Ptr","child":{"kind":"UInt16"}},
    hTransaction: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetVolumeLabelA(
    lpRootPathName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpVolumeName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetVolumeLabelW(
    lpRootPathName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpVolumeName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetFileBandwidthReservation(
    hFile: Windows.Win32.SystemServices.HANDLE,
    nPeriodMilliseconds: {"kind":"UInt32"},
    nBytesPerPeriod: {"kind":"UInt32"},
    bDiscardable: Windows.Win32.SystemServices.BOOL,
    lpTransferSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpNumOutstandingRequests: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFileBandwidthReservation(
    hFile: Windows.Win32.SystemServices.HANDLE,
    lpPeriodMilliseconds: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpBytesPerPeriod: {"kind""Ptr","child":{"kind":"UInt32"}},
    pDiscardable: {"kind""Ptr","child":{"kind":"Int32"}},
    lpTransferSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpNumOutstandingRequests: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ReadDirectoryChangesW(
    hDirectory: Windows.Win32.SystemServices.HANDLE,
    lpBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    nBufferLength: {"kind":"UInt32"},
    bWatchSubtree: Windows.Win32.SystemServices.BOOL,
    dwNotifyFilter: {"kind":"UInt32"},
    lpBytesReturned: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},
    lpCompletionRoutine: Windows.Win32.FileSystem.LPOVERLAPPED_COMPLETION_ROUTINE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn ReadDirectoryChangesExW(
    hDirectory: Windows.Win32.SystemServices.HANDLE,
    lpBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    nBufferLength: {"kind":"UInt32"},
    bWatchSubtree: Windows.Win32.SystemServices.BOOL,
    dwNotifyFilter: {"kind":"UInt32"},
    lpBytesReturned: {"kind""Ptr","child":{"kind":"UInt32"}},
    lpOverlapped: {"kind""Ptr","child":Windows.Win32.SystemServices.OVERLAPPED},
    lpCompletionRoutine: Windows.Win32.FileSystem.LPOVERLAPPED_COMPLETION_ROUTINE,
    ReadDirectoryNotifyInformationClass: Windows.Win32.FileSystem.READ_DIRECTORY_NOTIFY_INFORMATION_CLASS,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindFirstVolumeA(
    lpszVolumeName: {"kind""Ptr","child":{"kind":"SByte"}},
    cchBufferLength: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindNextVolumeA(
    hFindVolume: Windows.Win32.FileSystem.FindVolumeHandle,
    lpszVolumeName: {"kind""Ptr","child":{"kind":"SByte"}},
    cchBufferLength: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindFirstVolumeMountPointA(
    lpszRootPathName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpszVolumeMountPoint: {"kind""Ptr","child":{"kind":"SByte"}},
    cchBufferLength: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindFirstVolumeMountPointW(
    lpszRootPathName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszVolumeMountPoint: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchBufferLength: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindNextVolumeMountPointA(
    hFindVolumeMountPoint: Windows.Win32.FileSystem.FindVolumeMointPointHandle,
    lpszVolumeMountPoint: {"kind""Ptr","child":{"kind":"SByte"}},
    cchBufferLength: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindNextVolumeMountPointW(
    hFindVolumeMountPoint: Windows.Win32.FileSystem.FindVolumeMointPointHandle,
    lpszVolumeMountPoint: {"kind""Ptr","child":{"kind":"UInt16"}},
    cchBufferLength: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn FindVolumeMountPointClose(
    hFindVolumeMountPoint: Windows.Win32.FileSystem.FindVolumeMointPointHandle,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetVolumeMountPointA(
    lpszVolumeMountPoint: {"kind""Ptr","child":{"kind":"SByte"}},
    lpszVolumeName: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn SetVolumeMountPointW(
    lpszVolumeMountPoint: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpszVolumeName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn DeleteVolumeMountPointA(
    lpszVolumeMountPoint: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetVolumeNameForVolumeMountPointA(
    lpszVolumeMountPoint: {"kind""Ptr","child":{"kind":"SByte"}},
    lpszVolumeName: {"kind""Ptr","child":{"kind":"SByte"}},
    cchBufferLength: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetVolumePathNameA(
    lpszFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpszVolumePathName: {"kind""Ptr","child":{"kind":"SByte"}},
    cchBufferLength: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetVolumePathNamesForVolumeNameA(
    lpszVolumeName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpszVolumePathNames: {"kind""Ptr","child":{"kind":"SByte"}},
    cchBufferLength: {"kind":"UInt32"},
    lpcchReturnLength: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn GetFileInformationByHandleEx(
    hFile: Windows.Win32.SystemServices.HANDLE,
    FileInformationClass: Windows.Win32.FileSystem.FILE_INFO_BY_HANDLE_CLASS,
    lpFileInformation: {"kind""Ptr","child":{"kind":"Void"}},
    dwBufferSize: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn OpenFileById(
    hVolumeHint: Windows.Win32.SystemServices.HANDLE,
    lpFileId: {"kind""Ptr","child":Windows.Win32.FileSystem.FILE_ID_DESCRIPTOR},
    dwDesiredAccess: {"kind":"UInt32"},
    dwShareMode: {"kind":"UInt32"},
    lpSecurityAttributes: {"kind""Ptr","child":Windows.Win32.SystemServices.SECURITY_ATTRIBUTES},
    dwFlagsAndAttributes: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateSymbolicLinkA(
    lpSymlinkFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpTargetFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateSymbolicLinkW(
    lpSymlinkFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpTargetFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateSymbolicLinkTransactedA(
    lpSymlinkFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    lpTargetFileName: {"kind""Ptr","child":{"kind":"SByte"}},
    dwFlags: {"kind":"UInt32"},
    hTransaction: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=True (can and should we use this?)
pub extern "KERNEL32" fn CreateSymbolicLinkTransactedW(
    lpSymlinkFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    lpTargetFileName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwFlags: {"kind":"UInt32"},
    hTransaction: Windows.Win32.SystemServices.HANDLE,
],

"unicode_aliases": [
     "WIN32_FIND_DATA"
     "NTMS_DRIVEINFORMATION"
     "NTMS_CHANGERINFORMATION"
     "NTMS_PMIDINFORMATION"
     "NTMS_PARTITIONINFORMATION"
     "NTMS_DRIVETYPEINFORMATION"
     "NTMS_CHANGERTYPEINFORMATION"
     "NTMS_LIBREQUESTINFORMATION"
     "NTMS_OPREQUESTINFORMATION"
     "NTMS_OBJECTINFORMATION"
     "NTMS_I1_LIBREQUESTINFORMATION"
     "NTMS_I1_PMIDINFORMATION"
     "NTMS_I1_PARTITIONINFORMATION"
     "NTMS_I1_OPREQUESTINFORMATION"
     "NTMS_I1_OBJECTINFORMATION"
     "CreateDirectory"
     "CreateFile"
     "DefineDosDevice"
     "DeleteFile"
     "DeleteVolumeMountPoint"
     "FindFirstChangeNotification"
     "FindFirstFile"
     "FindFirstFileEx"
     "FindFirstVolume"
     "FindNextFile"
     "FindNextVolume"
     "GetDiskFreeSpace"
     "GetDiskFreeSpaceEx"
     "GetDiskSpaceInformation"
     "GetDriveType"
     "GetFileAttributes"
     "GetFileAttributesEx"
     "GetFinalPathNameByHandle"
     "GetFullPathName"
     "GetLogicalDriveStrings"
     "GetLongPathName"
     "GetShortPathName"
     "GetTempFileName"
     "GetVolumeInformation"
     "GetVolumePathName"
     "QueryDosDevice"
     "RemoveDirectory"
     "SetFileAttributes"
     "GetTempPath"
     "GetVolumeNameForVolumeMountPoint"
     "GetVolumePathNamesForVolumeName"
     "GetCompressedFileSize"
     "GetExpandedName"
     "LZOpenFile"
     "SearchPath"
     "GetBinaryType"
     "GetLongPathNameTransacted"
     "SetFileShortName"
     "EncryptFile"
     "DecryptFile"
     "FileEncryptionStatus"
     "OpenEncryptedFileRaw"
     "CreateDirectoryEx"
     "CreateDirectoryTransacted"
     "RemoveDirectoryTransacted"
     "GetFullPathNameTransacted"
     "CreateFileTransacted"
     "SetFileAttributesTransacted"
     "GetFileAttributesTransacted"
     "GetCompressedFileSizeTransacted"
     "DeleteFileTransacted"
     "CheckNameLegalDOS8Dot3"
     "FindFirstFileTransacted"
     "CopyFile"
     "CopyFileEx"
     "CopyFileTransacted"
     "MoveFile"
     "MoveFileEx"
     "MoveFileWithProgress"
     "MoveFileTransacted"
     "ReplaceFile"
     "CreateHardLink"
     "CreateHardLinkTransacted"
     "SetVolumeLabel"
     "FindFirstVolumeMountPoint"
     "FindNextVolumeMountPoint"
     "SetVolumeMountPoint"
     "CreateSymbolicLink"
     "CreateSymbolicLinkTransacted"
]}
