{
"constants": [
     {
         "name": "IMAPI_S_PROPERTIESIGNORED"
        ,"type": {"kind":"Int32"}
        ,"value": 262656
    }
    ,{
         "name": "IMAPI_S_BUFFER_TO_SMALL"
        ,"type": {"kind":"Int32"}
        ,"value": 262657
    }
    ,{
         "name": "IMAPI_E_NOTOPENED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220981
    }
    ,{
         "name": "IMAPI_E_NOTINITIALIZED"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220980
    }
    ,{
         "name": "IMAPI_E_USERABORT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220979
    }
    ,{
         "name": "IMAPI_E_GENERIC"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220978
    }
    ,{
         "name": "IMAPI_E_MEDIUM_NOTPRESENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220977
    }
    ,{
         "name": "IMAPI_E_MEDIUM_INVALIDTYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220976
    }
    ,{
         "name": "IMAPI_E_DEVICE_NOPROPERTIES"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220975
    }
    ,{
         "name": "IMAPI_E_DEVICE_NOTACCESSIBLE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220974
    }
    ,{
         "name": "IMAPI_E_DEVICE_NOTPRESENT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220973
    }
    ,{
         "name": "IMAPI_E_DEVICE_INVALIDTYPE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220972
    }
    ,{
         "name": "IMAPI_E_INITIALIZE_WRITE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220971
    }
    ,{
         "name": "IMAPI_E_INITIALIZE_ENDWRITE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220970
    }
    ,{
         "name": "IMAPI_E_FILESYSTEM"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220969
    }
    ,{
         "name": "IMAPI_E_FILEACCESS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220968
    }
    ,{
         "name": "IMAPI_E_DISCINFO"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220967
    }
    ,{
         "name": "IMAPI_E_TRACKNOTOPEN"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220966
    }
    ,{
         "name": "IMAPI_E_TRACKOPEN"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220965
    }
    ,{
         "name": "IMAPI_E_DISCFULL"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220964
    }
    ,{
         "name": "IMAPI_E_BADJOLIETNAME"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220963
    }
    ,{
         "name": "IMAPI_E_INVALIDIMAGE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220962
    }
    ,{
         "name": "IMAPI_E_NOACTIVEFORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220961
    }
    ,{
         "name": "IMAPI_E_NOACTIVERECORDER"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220960
    }
    ,{
         "name": "IMAPI_E_WRONGFORMAT"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220959
    }
    ,{
         "name": "IMAPI_E_ALREADYOPEN"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220958
    }
    ,{
         "name": "IMAPI_E_WRONGDISC"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220957
    }
    ,{
         "name": "IMAPI_E_FILEEXISTS"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220956
    }
    ,{
         "name": "IMAPI_E_STASHINUSE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220955
    }
    ,{
         "name": "IMAPI_E_DEVICE_STILL_IN_USE"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220954
    }
    ,{
         "name": "IMAPI_E_LOSS_OF_STREAMING"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220953
    }
    ,{
         "name": "IMAPI_E_COMPRESSEDSTASH"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220952
    }
    ,{
         "name": "IMAPI_E_ENCRYPTEDSTASH"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220951
    }
    ,{
         "name": "IMAPI_E_NOTENOUGHDISKFORSTASH"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220950
    }
    ,{
         "name": "IMAPI_E_REMOVABLESTASH"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220949
    }
    ,{
         "name": "IMAPI_E_CANNOT_WRITE_TO_MEDIA"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220948
    }
    ,{
         "name": "IMAPI_E_TRACK_NOT_BIG_ENOUGH"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220947
    }
    ,{
         "name": "IMAPI_E_BOOTIMAGE_AND_NONBLANK_DISC"
        ,"type": {"kind":"Int32"}
        ,"value": -2147220946
    }
],

"types_definitions": [
// --------------------------------------------------------
// Type: MsftDiscMaster2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MsftDiscMaster2 = opaque {
};
// --------------------------------------------------------
// Type: MsftDiscRecorder2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MsftDiscRecorder2 = opaque {
};
// --------------------------------------------------------
// Type: MsftWriteEngine2
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MsftWriteEngine2 = opaque {
};
// --------------------------------------------------------
// Type: MsftDiscFormat2Erase
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MsftDiscFormat2Erase = opaque {
};
// --------------------------------------------------------
// Type: MsftDiscFormat2Data
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MsftDiscFormat2Data = opaque {
};
// --------------------------------------------------------
// Type: MsftDiscFormat2TrackAtOnce
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MsftDiscFormat2TrackAtOnce = opaque {
};
// --------------------------------------------------------
// Type: MsftDiscFormat2RawCD
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MsftDiscFormat2RawCD = opaque {
};
// --------------------------------------------------------
// Type: MsftStreamZero
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MsftStreamZero = opaque {
};
// --------------------------------------------------------
// Type: MsftStreamPrng001
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MsftStreamPrng001 = opaque {
};
// --------------------------------------------------------
// Type: MsftStreamConcatenate
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MsftStreamConcatenate = opaque {
};
// --------------------------------------------------------
// Type: MsftStreamInterleave
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MsftStreamInterleave = opaque {
};
// --------------------------------------------------------
// Type: MsftWriteSpeedDescriptor
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MsftWriteSpeedDescriptor = opaque {
};
// --------------------------------------------------------
// Type: MsftMultisessionSequential
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MsftMultisessionSequential = opaque {
};
// --------------------------------------------------------
// Type: MsftMultisessionRandomWrite
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MsftMultisessionRandomWrite = opaque {
};
// --------------------------------------------------------
// Type: MsftRawCDImageCreator
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MsftRawCDImageCreator = opaque {
};
// --------------------------------------------------------
// Type: IMAPI_MEDIA_PHYSICAL_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMAPI_MEDIA_PHYSICAL_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IMAPI_MEDIA_WRITE_PROTECT_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMAPI_MEDIA_WRITE_PROTECT_STATE = *opaque{
};
// --------------------------------------------------------
// Type: IMAPI_READ_TRACK_ADDRESS_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMAPI_READ_TRACK_ADDRESS_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IMAPI_MODE_PAGE_REQUEST_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMAPI_MODE_PAGE_REQUEST_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IMAPI_MODE_PAGE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMAPI_MODE_PAGE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IMAPI_FEATURE_PAGE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMAPI_FEATURE_PAGE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IMAPI_PROFILE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMAPI_PROFILE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IMAPI_FORMAT2_DATA_WRITE_ACTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMAPI_FORMAT2_DATA_WRITE_ACTION = *opaque{
};
// --------------------------------------------------------
// Type: IMAPI_FORMAT2_DATA_MEDIA_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMAPI_FORMAT2_DATA_MEDIA_STATE = *opaque{
};
// --------------------------------------------------------
// Type: IMAPI_FORMAT2_TAO_WRITE_ACTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMAPI_FORMAT2_TAO_WRITE_ACTION = *opaque{
};
// --------------------------------------------------------
// Type: IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IMAPI_FORMAT2_RAW_CD_WRITE_ACTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMAPI_FORMAT2_RAW_CD_WRITE_ACTION = *opaque{
};
// --------------------------------------------------------
// Type: IMAPI_CD_SECTOR_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMAPI_CD_SECTOR_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: IMAPI_CD_TRACK_DIGITAL_COPY_SETTING
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMAPI_CD_TRACK_DIGITAL_COPY_SETTING = *opaque{
};
// --------------------------------------------------------
// Type: IMAPI_BURN_VERIFICATION_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const IMAPI_BURN_VERIFICATION_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: IDiscMaster2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDiscMaster2 = *opaque{
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'get_Item'
    // TODO: Method 'get_Count'
    // TODO: Method 'get_IsSupportedEnvironment'
};
// --------------------------------------------------------
// Type: DDiscMaster2Events
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DDiscMaster2Events = *opaque{
    // TODO: Method 'NotifyDeviceAdded'
    // TODO: Method 'NotifyDeviceRemoved'
};
// --------------------------------------------------------
// Type: IDiscRecorder2Ex
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDiscRecorder2Ex = *opaque{
    // TODO: Method 'SendCommandNoData'
    // TODO: Method 'SendCommandSendDataToDevice'
    // TODO: Method 'SendCommandGetDataFromDevice'
    // TODO: Method 'ReadDvdStructure'
    // TODO: Method 'SendDvdStructure'
    // TODO: Method 'GetAdapterDescriptor'
    // TODO: Method 'GetDeviceDescriptor'
    // TODO: Method 'GetDiscInformation'
    // TODO: Method 'GetTrackInformation'
    // TODO: Method 'GetFeaturePage'
    // TODO: Method 'GetModePage'
    // TODO: Method 'SetModePage'
    // TODO: Method 'GetSupportedFeaturePages'
    // TODO: Method 'GetSupportedProfiles'
    // TODO: Method 'GetSupportedModePages'
    // TODO: Method 'GetByteAlignmentMask'
    // TODO: Method 'GetMaximumNonPageAlignedTransferSize'
    // TODO: Method 'GetMaximumPageAlignedTransferSize'
};
// --------------------------------------------------------
// Type: IDiscRecorder2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDiscRecorder2 = *opaque{
    // TODO: Method 'EjectMedia'
    // TODO: Method 'CloseTray'
    // TODO: Method 'AcquireExclusiveAccess'
    // TODO: Method 'ReleaseExclusiveAccess'
    // TODO: Method 'DisableMcn'
    // TODO: Method 'EnableMcn'
    // TODO: Method 'InitializeDiscRecorder'
    // TODO: Method 'get_ActiveDiscRecorder'
    // TODO: Method 'get_VendorId'
    // TODO: Method 'get_ProductId'
    // TODO: Method 'get_ProductRevision'
    // TODO: Method 'get_VolumeName'
    // TODO: Method 'get_VolumePathNames'
    // TODO: Method 'get_DeviceCanLoadMedia'
    // TODO: Method 'get_LegacyDeviceNumber'
    // TODO: Method 'get_SupportedFeaturePages'
    // TODO: Method 'get_CurrentFeaturePages'
    // TODO: Method 'get_SupportedProfiles'
    // TODO: Method 'get_CurrentProfiles'
    // TODO: Method 'get_SupportedModePages'
    // TODO: Method 'get_ExclusiveAccessOwner'
};
// --------------------------------------------------------
// Type: IWriteEngine2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWriteEngine2 = *opaque{
    // TODO: Method 'WriteSection'
    // TODO: Method 'CancelWrite'
    // TODO: Method 'put_Recorder'
    // TODO: Method 'get_Recorder'
    // TODO: Method 'put_UseStreamingWrite12'
    // TODO: Method 'get_UseStreamingWrite12'
    // TODO: Method 'put_StartingSectorsPerSecond'
    // TODO: Method 'get_StartingSectorsPerSecond'
    // TODO: Method 'put_EndingSectorsPerSecond'
    // TODO: Method 'get_EndingSectorsPerSecond'
    // TODO: Method 'put_BytesPerSector'
    // TODO: Method 'get_BytesPerSector'
    // TODO: Method 'get_WriteInProgress'
};
// --------------------------------------------------------
// Type: IWriteEngine2EventArgs
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWriteEngine2EventArgs = *opaque{
    // TODO: Method 'get_StartLba'
    // TODO: Method 'get_SectorCount'
    // TODO: Method 'get_LastReadLba'
    // TODO: Method 'get_LastWrittenLba'
    // TODO: Method 'get_TotalSystemBuffer'
    // TODO: Method 'get_UsedSystemBuffer'
    // TODO: Method 'get_FreeSystemBuffer'
};
// --------------------------------------------------------
// Type: DWriteEngine2Events
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DWriteEngine2Events = *opaque{
    // TODO: Method 'Update'
};
// --------------------------------------------------------
// Type: IDiscFormat2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDiscFormat2 = *opaque{
    // TODO: Method 'IsRecorderSupported'
    // TODO: Method 'IsCurrentMediaSupported'
    // TODO: Method 'get_MediaPhysicallyBlank'
    // TODO: Method 'get_MediaHeuristicallyBlank'
    // TODO: Method 'get_SupportedMediaTypes'
};
// --------------------------------------------------------
// Type: IDiscFormat2Erase
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDiscFormat2Erase = *opaque{
    // TODO: Method 'put_Recorder'
    // TODO: Method 'get_Recorder'
    // TODO: Method 'put_FullErase'
    // TODO: Method 'get_FullErase'
    // TODO: Method 'get_CurrentPhysicalMediaType'
    // TODO: Method 'put_ClientName'
    // TODO: Method 'get_ClientName'
    // TODO: Method 'EraseMedia'
};
// --------------------------------------------------------
// Type: DDiscFormat2EraseEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DDiscFormat2EraseEvents = *opaque{
    // TODO: Method 'Update'
};
// --------------------------------------------------------
// Type: IDiscFormat2Data
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDiscFormat2Data = *opaque{
    // TODO: Method 'put_Recorder'
    // TODO: Method 'get_Recorder'
    // TODO: Method 'put_BufferUnderrunFreeDisabled'
    // TODO: Method 'get_BufferUnderrunFreeDisabled'
    // TODO: Method 'put_PostgapAlreadyInImage'
    // TODO: Method 'get_PostgapAlreadyInImage'
    // TODO: Method 'get_CurrentMediaStatus'
    // TODO: Method 'get_WriteProtectStatus'
    // TODO: Method 'get_TotalSectorsOnMedia'
    // TODO: Method 'get_FreeSectorsOnMedia'
    // TODO: Method 'get_NextWritableAddress'
    // TODO: Method 'get_StartAddressOfPreviousSession'
    // TODO: Method 'get_LastWrittenAddressOfPreviousSession'
    // TODO: Method 'put_ForceMediaToBeClosed'
    // TODO: Method 'get_ForceMediaToBeClosed'
    // TODO: Method 'put_DisableConsumerDvdCompatibilityMode'
    // TODO: Method 'get_DisableConsumerDvdCompatibilityMode'
    // TODO: Method 'get_CurrentPhysicalMediaType'
    // TODO: Method 'put_ClientName'
    // TODO: Method 'get_ClientName'
    // TODO: Method 'get_RequestedWriteSpeed'
    // TODO: Method 'get_RequestedRotationTypeIsPureCAV'
    // TODO: Method 'get_CurrentWriteSpeed'
    // TODO: Method 'get_CurrentRotationTypeIsPureCAV'
    // TODO: Method 'get_SupportedWriteSpeeds'
    // TODO: Method 'get_SupportedWriteSpeedDescriptors'
    // TODO: Method 'put_ForceOverwrite'
    // TODO: Method 'get_ForceOverwrite'
    // TODO: Method 'get_MultisessionInterfaces'
    // TODO: Method 'Write'
    // TODO: Method 'CancelWrite'
    // TODO: Method 'SetWriteSpeed'
};
// --------------------------------------------------------
// Type: DDiscFormat2DataEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DDiscFormat2DataEvents = *opaque{
    // TODO: Method 'Update'
};
// --------------------------------------------------------
// Type: IDiscFormat2DataEventArgs
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDiscFormat2DataEventArgs = *opaque{
    // TODO: Method 'get_ElapsedTime'
    // TODO: Method 'get_RemainingTime'
    // TODO: Method 'get_TotalTime'
    // TODO: Method 'get_CurrentAction'
};
// --------------------------------------------------------
// Type: IDiscFormat2TrackAtOnce
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDiscFormat2TrackAtOnce = *opaque{
    // TODO: Method 'PrepareMedia'
    // TODO: Method 'AddAudioTrack'
    // TODO: Method 'CancelAddTrack'
    // TODO: Method 'ReleaseMedia'
    // TODO: Method 'SetWriteSpeed'
    // TODO: Method 'put_Recorder'
    // TODO: Method 'get_Recorder'
    // TODO: Method 'put_BufferUnderrunFreeDisabled'
    // TODO: Method 'get_BufferUnderrunFreeDisabled'
    // TODO: Method 'get_NumberOfExistingTracks'
    // TODO: Method 'get_TotalSectorsOnMedia'
    // TODO: Method 'get_FreeSectorsOnMedia'
    // TODO: Method 'get_UsedSectorsOnMedia'
    // TODO: Method 'put_DoNotFinalizeMedia'
    // TODO: Method 'get_DoNotFinalizeMedia'
    // TODO: Method 'get_ExpectedTableOfContents'
    // TODO: Method 'get_CurrentPhysicalMediaType'
    // TODO: Method 'put_ClientName'
    // TODO: Method 'get_ClientName'
    // TODO: Method 'get_RequestedWriteSpeed'
    // TODO: Method 'get_RequestedRotationTypeIsPureCAV'
    // TODO: Method 'get_CurrentWriteSpeed'
    // TODO: Method 'get_CurrentRotationTypeIsPureCAV'
    // TODO: Method 'get_SupportedWriteSpeeds'
    // TODO: Method 'get_SupportedWriteSpeedDescriptors'
};
// --------------------------------------------------------
// Type: DDiscFormat2TrackAtOnceEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DDiscFormat2TrackAtOnceEvents = *opaque{
    // TODO: Method 'Update'
};
// --------------------------------------------------------
// Type: IDiscFormat2TrackAtOnceEventArgs
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDiscFormat2TrackAtOnceEventArgs = *opaque{
    // TODO: Method 'get_CurrentTrackNumber'
    // TODO: Method 'get_CurrentAction'
    // TODO: Method 'get_ElapsedTime'
    // TODO: Method 'get_RemainingTime'
};
// --------------------------------------------------------
// Type: IDiscFormat2RawCD
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDiscFormat2RawCD = *opaque{
    // TODO: Method 'PrepareMedia'
    // TODO: Method 'WriteMedia'
    // TODO: Method 'WriteMedia2'
    // TODO: Method 'CancelWrite'
    // TODO: Method 'ReleaseMedia'
    // TODO: Method 'SetWriteSpeed'
    // TODO: Method 'put_Recorder'
    // TODO: Method 'get_Recorder'
    // TODO: Method 'put_BufferUnderrunFreeDisabled'
    // TODO: Method 'get_BufferUnderrunFreeDisabled'
    // TODO: Method 'get_StartOfNextSession'
    // TODO: Method 'get_LastPossibleStartOfLeadout'
    // TODO: Method 'get_CurrentPhysicalMediaType'
    // TODO: Method 'get_SupportedSectorTypes'
    // TODO: Method 'put_RequestedSectorType'
    // TODO: Method 'get_RequestedSectorType'
    // TODO: Method 'put_ClientName'
    // TODO: Method 'get_ClientName'
    // TODO: Method 'get_RequestedWriteSpeed'
    // TODO: Method 'get_RequestedRotationTypeIsPureCAV'
    // TODO: Method 'get_CurrentWriteSpeed'
    // TODO: Method 'get_CurrentRotationTypeIsPureCAV'
    // TODO: Method 'get_SupportedWriteSpeeds'
    // TODO: Method 'get_SupportedWriteSpeedDescriptors'
};
// --------------------------------------------------------
// Type: DDiscFormat2RawCDEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DDiscFormat2RawCDEvents = *opaque{
    // TODO: Method 'Update'
};
// --------------------------------------------------------
// Type: IDiscFormat2RawCDEventArgs
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDiscFormat2RawCDEventArgs = *opaque{
    // TODO: Method 'get_CurrentAction'
    // TODO: Method 'get_ElapsedTime'
    // TODO: Method 'get_RemainingTime'
};
// --------------------------------------------------------
// Type: IBurnVerification
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBurnVerification = *opaque{
    // TODO: Method 'put_BurnVerificationLevel'
    // TODO: Method 'get_BurnVerificationLevel'
};
// --------------------------------------------------------
// Type: IWriteSpeedDescriptor
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IWriteSpeedDescriptor = *opaque{
    // TODO: Method 'get_MediaType'
    // TODO: Method 'get_RotationTypeIsPureCAV'
    // TODO: Method 'get_WriteSpeed'
};
// --------------------------------------------------------
// Type: IMultisession
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMultisession = *opaque{
    // TODO: Method 'get_IsSupportedOnCurrentMediaState'
    // TODO: Method 'put_InUse'
    // TODO: Method 'get_InUse'
    // TODO: Method 'get_ImportRecorder'
};
// --------------------------------------------------------
// Type: IMultisessionSequential
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMultisessionSequential = *opaque{
    // TODO: Method 'get_IsFirstDataSession'
    // TODO: Method 'get_StartAddressOfPreviousSession'
    // TODO: Method 'get_LastWrittenAddressOfPreviousSession'
    // TODO: Method 'get_NextWritableAddress'
    // TODO: Method 'get_FreeSectorsOnMedia'
};
// --------------------------------------------------------
// Type: IMultisessionSequential2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMultisessionSequential2 = *opaque{
    // TODO: Method 'get_WriteUnitSize'
};
// --------------------------------------------------------
// Type: IMultisessionRandomWrite
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IMultisessionRandomWrite = *opaque{
    // TODO: Method 'get_WriteUnitSize'
    // TODO: Method 'get_LastWrittenAddress'
    // TODO: Method 'get_TotalSectorsOnMedia'
};
// --------------------------------------------------------
// Type: IStreamPseudoRandomBased
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IStreamPseudoRandomBased = *opaque{
    // TODO: Method 'put_Seed'
    // TODO: Method 'get_Seed'
    // TODO: Method 'put_ExtendedSeed'
    // TODO: Method 'get_ExtendedSeed'
};
// --------------------------------------------------------
// Type: IStreamConcatenate
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IStreamConcatenate = *opaque{
    // TODO: Method 'Initialize'
    // TODO: Method 'Initialize2'
    // TODO: Method 'Append'
    // TODO: Method 'Append2'
};
// --------------------------------------------------------
// Type: IStreamInterleave
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IStreamInterleave = *opaque{
    // TODO: Method 'Initialize'
};
// --------------------------------------------------------
// Type: IRawCDImageCreator
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRawCDImageCreator = *opaque{
    // TODO: Method 'CreateResultImage'
    // TODO: Method 'AddTrack'
    // TODO: Method 'AddSpecialPregap'
    // TODO: Method 'AddSubcodeRWGenerator'
    // TODO: Method 'put_ResultingImageType'
    // TODO: Method 'get_ResultingImageType'
    // TODO: Method 'get_StartOfLeadout'
    // TODO: Method 'put_StartOfLeadoutLimit'
    // TODO: Method 'get_StartOfLeadoutLimit'
    // TODO: Method 'put_DisableGaplessAudio'
    // TODO: Method 'get_DisableGaplessAudio'
    // TODO: Method 'put_MediaCatalogNumber'
    // TODO: Method 'get_MediaCatalogNumber'
    // TODO: Method 'put_StartingTrackNumber'
    // TODO: Method 'get_StartingTrackNumber'
    // TODO: Method 'get_TrackInfo'
    // TODO: Method 'get_NumberOfExistingTracks'
    // TODO: Method 'get_LastUsedUserSectorInImage'
    // TODO: Method 'get_ExpectedTableOfContents'
};
// --------------------------------------------------------
// Type: IRawCDImageTrackInfo
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRawCDImageTrackInfo = *opaque{
    // TODO: Method 'get_StartingLba'
    // TODO: Method 'get_SectorCount'
    // TODO: Method 'get_TrackNumber'
    // TODO: Method 'get_SectorType'
    // TODO: Method 'get_ISRC'
    // TODO: Method 'put_ISRC'
    // TODO: Method 'get_DigitalAudioCopySetting'
    // TODO: Method 'put_DigitalAudioCopySetting'
    // TODO: Method 'get_AudioHasPreemphasis'
    // TODO: Method 'put_AudioHasPreemphasis'
    // TODO: Method 'get_TrackIndexes'
    // TODO: Method 'AddTrackIndex'
    // TODO: Method 'ClearTrackIndex'
};
// --------------------------------------------------------
// Type: IBlockRange
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBlockRange = *opaque{
    // TODO: Method 'get_StartLba'
    // TODO: Method 'get_EndLba'
};
// --------------------------------------------------------
// Type: IBlockRangeList
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBlockRangeList = *opaque{
    // TODO: Method 'get_BlockRanges'
};
// --------------------------------------------------------
// Type: BootOptions
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const BootOptions = opaque {
};
// --------------------------------------------------------
// Type: FsiStream
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const FsiStream = opaque {
};
// --------------------------------------------------------
// Type: FileSystemImageResult
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const FileSystemImageResult = opaque {
};
// --------------------------------------------------------
// Type: ProgressItem
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ProgressItem = opaque {
};
// --------------------------------------------------------
// Type: EnumProgressItems
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const EnumProgressItems = opaque {
};
// --------------------------------------------------------
// Type: ProgressItems
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const ProgressItems = opaque {
};
// --------------------------------------------------------
// Type: FsiDirectoryItem
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const FsiDirectoryItem = opaque {
};
// --------------------------------------------------------
// Type: FsiFileItem
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const FsiFileItem = opaque {
};
// --------------------------------------------------------
// Type: EnumFsiItems
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const EnumFsiItems = opaque {
};
// --------------------------------------------------------
// Type: FsiNamedStreams
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const FsiNamedStreams = opaque {
};
// --------------------------------------------------------
// Type: MsftFileSystemImage
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MsftFileSystemImage = opaque {
};
// --------------------------------------------------------
// Type: MsftIsoImageManager
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MsftIsoImageManager = opaque {
};
// --------------------------------------------------------
// Type: BlockRange
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const BlockRange = opaque {
};
// --------------------------------------------------------
// Type: BlockRangeList
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const BlockRangeList = opaque {
};
// --------------------------------------------------------
// Type: FsiItemType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FsiItemType = *opaque{
};
// --------------------------------------------------------
// Type: FsiFileSystems
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const FsiFileSystems = *opaque{
};
// --------------------------------------------------------
// Type: EmulationType
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const EmulationType = *opaque{
};
// --------------------------------------------------------
// Type: PlatformId
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PlatformId = *opaque{
};
// --------------------------------------------------------
// Type: IBootOptions
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IBootOptions = *opaque{
    // TODO: Method 'get_BootImage'
    // TODO: Method 'get_Manufacturer'
    // TODO: Method 'put_Manufacturer'
    // TODO: Method 'get_PlatformId'
    // TODO: Method 'put_PlatformId'
    // TODO: Method 'get_Emulation'
    // TODO: Method 'put_Emulation'
    // TODO: Method 'get_ImageSize'
    // TODO: Method 'AssignBootImage'
};
// --------------------------------------------------------
// Type: IProgressItem
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IProgressItem = *opaque{
    // TODO: Method 'get_Description'
    // TODO: Method 'get_FirstBlock'
    // TODO: Method 'get_LastBlock'
    // TODO: Method 'get_BlockCount'
};
// --------------------------------------------------------
// Type: IEnumProgressItems
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumProgressItems = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IProgressItems
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IProgressItems = *opaque{
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'get_Item'
    // TODO: Method 'get_Count'
    // TODO: Method 'ProgressItemFromBlock'
    // TODO: Method 'ProgressItemFromDescription'
    // TODO: Method 'get_EnumProgressItems'
};
// --------------------------------------------------------
// Type: IFileSystemImageResult
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFileSystemImageResult = *opaque{
    // TODO: Method 'get_ImageStream'
    // TODO: Method 'get_ProgressItems'
    // TODO: Method 'get_TotalBlocks'
    // TODO: Method 'get_BlockSize'
    // TODO: Method 'get_DiscId'
};
// --------------------------------------------------------
// Type: IFileSystemImageResult2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFileSystemImageResult2 = *opaque{
    // TODO: Method 'get_ModifiedBlocks'
};
// --------------------------------------------------------
// Type: IFsiItem
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFsiItem = *opaque{
    // TODO: Method 'get_Name'
    // TODO: Method 'get_FullPath'
    // TODO: Method 'get_CreationTime'
    // TODO: Method 'put_CreationTime'
    // TODO: Method 'get_LastAccessedTime'
    // TODO: Method 'put_LastAccessedTime'
    // TODO: Method 'get_LastModifiedTime'
    // TODO: Method 'put_LastModifiedTime'
    // TODO: Method 'get_IsHidden'
    // TODO: Method 'put_IsHidden'
    // TODO: Method 'FileSystemName'
    // TODO: Method 'FileSystemPath'
};
// --------------------------------------------------------
// Type: IEnumFsiItems
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumFsiItems = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IFsiFileItem
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFsiFileItem = *opaque{
    // TODO: Method 'get_DataSize'
    // TODO: Method 'get_DataSize32BitLow'
    // TODO: Method 'get_DataSize32BitHigh'
    // TODO: Method 'get_Data'
    // TODO: Method 'put_Data'
};
// --------------------------------------------------------
// Type: IFsiFileItem2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFsiFileItem2 = *opaque{
    // TODO: Method 'get_FsiNamedStreams'
    // TODO: Method 'get_IsNamedStream'
    // TODO: Method 'AddStream'
    // TODO: Method 'RemoveStream'
    // TODO: Method 'get_IsRealTime'
    // TODO: Method 'put_IsRealTime'
};
// --------------------------------------------------------
// Type: IFsiNamedStreams
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFsiNamedStreams = *opaque{
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'get_Item'
    // TODO: Method 'get_Count'
    // TODO: Method 'get_EnumNamedStreams'
};
// --------------------------------------------------------
// Type: IFsiDirectoryItem
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFsiDirectoryItem = *opaque{
    // TODO: Method 'get__NewEnum'
    // TODO: Method 'get_Item'
    // TODO: Method 'get_Count'
    // TODO: Method 'get_EnumFsiItems'
    // TODO: Method 'AddDirectory'
    // TODO: Method 'AddFile'
    // TODO: Method 'AddTree'
    // TODO: Method 'Add'
    // TODO: Method 'Remove'
    // TODO: Method 'RemoveTree'
};
// --------------------------------------------------------
// Type: IFsiDirectoryItem2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFsiDirectoryItem2 = *opaque{
    // TODO: Method 'AddTreeWithNamedStreams'
};
// --------------------------------------------------------
// Type: IFileSystemImage
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFileSystemImage = *opaque{
    // TODO: Method 'get_Root'
    // TODO: Method 'get_SessionStartBlock'
    // TODO: Method 'put_SessionStartBlock'
    // TODO: Method 'get_FreeMediaBlocks'
    // TODO: Method 'put_FreeMediaBlocks'
    // TODO: Method 'SetMaxMediaBlocksFromDevice'
    // TODO: Method 'get_UsedBlocks'
    // TODO: Method 'get_VolumeName'
    // TODO: Method 'put_VolumeName'
    // TODO: Method 'get_ImportedVolumeName'
    // TODO: Method 'get_BootImageOptions'
    // TODO: Method 'put_BootImageOptions'
    // TODO: Method 'get_FileCount'
    // TODO: Method 'get_DirectoryCount'
    // TODO: Method 'get_WorkingDirectory'
    // TODO: Method 'put_WorkingDirectory'
    // TODO: Method 'get_ChangePoint'
    // TODO: Method 'get_StrictFileSystemCompliance'
    // TODO: Method 'put_StrictFileSystemCompliance'
    // TODO: Method 'get_UseRestrictedCharacterSet'
    // TODO: Method 'put_UseRestrictedCharacterSet'
    // TODO: Method 'get_FileSystemsToCreate'
    // TODO: Method 'put_FileSystemsToCreate'
    // TODO: Method 'get_FileSystemsSupported'
    // TODO: Method 'put_UDFRevision'
    // TODO: Method 'get_UDFRevision'
    // TODO: Method 'get_UDFRevisionsSupported'
    // TODO: Method 'ChooseImageDefaults'
    // TODO: Method 'ChooseImageDefaultsForMediaType'
    // TODO: Method 'put_ISO9660InterchangeLevel'
    // TODO: Method 'get_ISO9660InterchangeLevel'
    // TODO: Method 'get_ISO9660InterchangeLevelsSupported'
    // TODO: Method 'CreateResultImage'
    // TODO: Method 'Exists'
    // TODO: Method 'CalculateDiscIdentifier'
    // TODO: Method 'IdentifyFileSystemsOnDisc'
    // TODO: Method 'GetDefaultFileSystemForImport'
    // TODO: Method 'ImportFileSystem'
    // TODO: Method 'ImportSpecificFileSystem'
    // TODO: Method 'RollbackToChangePoint'
    // TODO: Method 'LockInChangePoint'
    // TODO: Method 'CreateDirectoryItem'
    // TODO: Method 'CreateFileItem'
    // TODO: Method 'get_VolumeNameUDF'
    // TODO: Method 'get_VolumeNameJoliet'
    // TODO: Method 'get_VolumeNameISO9660'
    // TODO: Method 'get_StageFiles'
    // TODO: Method 'put_StageFiles'
    // TODO: Method 'get_MultisessionInterfaces'
    // TODO: Method 'put_MultisessionInterfaces'
};
// --------------------------------------------------------
// Type: IFileSystemImage2
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFileSystemImage2 = *opaque{
    // TODO: Method 'get_BootImageOptionsArray'
    // TODO: Method 'put_BootImageOptionsArray'
};
// --------------------------------------------------------
// Type: IFileSystemImage3
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IFileSystemImage3 = *opaque{
    // TODO: Method 'get_CreateRedundantUdfMetadataFiles'
    // TODO: Method 'put_CreateRedundantUdfMetadataFiles'
    // TODO: Method 'ProbeSpecificFileSystem'
};
// --------------------------------------------------------
// Type: DFileSystemImageEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DFileSystemImageEvents = *opaque{
    // TODO: Method 'Update'
};
// --------------------------------------------------------
// Type: DFileSystemImageImportEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const DFileSystemImageImportEvents = *opaque{
    // TODO: Method 'UpdateImport'
};
// --------------------------------------------------------
// Type: IIsoImageManager
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IIsoImageManager = *opaque{
    // TODO: Method 'get_Path'
    // TODO: Method 'get_Stream'
    // TODO: Method 'SetPath'
    // TODO: Method 'SetStream'
    // TODO: Method 'Validate'
};
// --------------------------------------------------------
// Type: MSDiscRecorderObj
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MSDiscRecorderObj = opaque {
};
// --------------------------------------------------------
// Type: MSDiscMasterObj
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MSDiscMasterObj = opaque {
};
// --------------------------------------------------------
// Type: MSEnumDiscRecordersObj
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
// a struct with no fields? this means Zig can't use it in extern structs, so we're making it opaque
pub const MSEnumDiscRecordersObj = opaque {
};
// --------------------------------------------------------
// Type: MEDIA_TYPES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MEDIA_TYPES = *opaque{
};
// --------------------------------------------------------
// Type: MEDIA_FLAGS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MEDIA_FLAGS = *opaque{
};
// --------------------------------------------------------
// Type: RECORDER_TYPES
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const RECORDER_TYPES = *opaque{
};
// --------------------------------------------------------
// Type: IDiscRecorder
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDiscRecorder = *opaque{
    // TODO: Method 'Init'
    // TODO: Method 'GetRecorderGUID'
    // TODO: Method 'GetRecorderType'
    // TODO: Method 'GetDisplayNames'
    // TODO: Method 'GetBasePnPID'
    // TODO: Method 'GetPath'
    // TODO: Method 'GetRecorderProperties'
    // TODO: Method 'SetRecorderProperties'
    // TODO: Method 'GetRecorderState'
    // TODO: Method 'OpenExclusive'
    // TODO: Method 'QueryMediaType'
    // TODO: Method 'QueryMediaInfo'
    // TODO: Method 'Eject'
    // TODO: Method 'Erase'
    // TODO: Method 'Close'
};
// --------------------------------------------------------
// Type: IEnumDiscRecorders
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumDiscRecorders = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IEnumDiscMasterFormats
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IEnumDiscMasterFormats = *opaque{
    // TODO: Method 'Next'
    // TODO: Method 'Skip'
    // TODO: Method 'Reset'
    // TODO: Method 'Clone'
};
// --------------------------------------------------------
// Type: IRedbookDiscMaster
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IRedbookDiscMaster = *opaque{
    // TODO: Method 'GetTotalAudioTracks'
    // TODO: Method 'GetTotalAudioBlocks'
    // TODO: Method 'GetUsedAudioBlocks'
    // TODO: Method 'GetAvailableAudioTrackBlocks'
    // TODO: Method 'GetAudioBlockSize'
    // TODO: Method 'CreateAudioTrack'
    // TODO: Method 'AddAudioTrackBlocks'
    // TODO: Method 'CloseAudioTrack'
};
// --------------------------------------------------------
// Type: IJolietDiscMaster
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IJolietDiscMaster = *opaque{
    // TODO: Method 'GetTotalDataBlocks'
    // TODO: Method 'GetUsedDataBlocks'
    // TODO: Method 'GetDataBlockSize'
    // TODO: Method 'AddData'
    // TODO: Method 'GetJolietProperties'
    // TODO: Method 'SetJolietProperties'
};
// --------------------------------------------------------
// Type: IDiscMasterProgressEvents
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDiscMasterProgressEvents = *opaque{
    // TODO: Method 'QueryCancel'
    // TODO: Method 'NotifyPnPActivity'
    // TODO: Method 'NotifyAddProgress'
    // TODO: Method 'NotifyBlockProgress'
    // TODO: Method 'NotifyTrackProgress'
    // TODO: Method 'NotifyPreparingBurn'
    // TODO: Method 'NotifyClosingDisc'
    // TODO: Method 'NotifyBurnComplete'
    // TODO: Method 'NotifyEraseComplete'
};
// --------------------------------------------------------
// Type: IDiscMaster
// TypeLayoutAttr: auto
// not generating the actual code for this type because its an abstract type (probably a COM type?)
pub const IDiscMaster = *opaque{
    // TODO: Method 'Open'
    // TODO: Method 'EnumDiscMasterFormats'
    // TODO: Method 'GetActiveDiscMasterFormat'
    // TODO: Method 'SetActiveDiscMasterFormat'
    // TODO: Method 'EnumDiscRecorders'
    // TODO: Method 'GetActiveDiscRecorder'
    // TODO: Method 'SetActiveDiscRecorder'
    // TODO: Method 'ClearFormatContent'
    // TODO: Method 'ProgressAdvise'
    // TODO: Method 'ProgressUnadvise'
    // TODO: Method 'RecordDisc'
    // TODO: Method 'Close'
};
],

"func_definitions": [
],

"unicode_aliases": [
]}
