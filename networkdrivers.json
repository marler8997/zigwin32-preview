{
"constants": [
],

"types_definitions": [
// --------------------------------------------------------
// Type: L2_NOTIFICATION_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const L2_NOTIFICATION_DATA = extern struct {
    NotificationSource: {"kind":"UInt32"},
    NotificationCode: {"kind":"UInt32"},
    InterfaceGuid: Guid,
    dwDataSize: {"kind":"UInt32"},
    pData: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: NET_IF_OPER_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NET_IF_OPER_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: NET_IF_ADMIN_STATUS
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NET_IF_ADMIN_STATUS = *opaque{
};
// --------------------------------------------------------
// Type: NET_IF_CONNECTION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NET_IF_CONNECTION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: TUNNEL_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const TUNNEL_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: NET_IF_ACCESS_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NET_IF_ACCESS_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: NET_IF_DIRECTION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NET_IF_DIRECTION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: NET_IF_MEDIA_CONNECT_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NET_IF_MEDIA_CONNECT_STATE = *opaque{
};
// --------------------------------------------------------
// Type: NET_IF_MEDIA_DUPLEX_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NET_IF_MEDIA_DUPLEX_STATE = *opaque{
};
// --------------------------------------------------------
// Type: NET_PHYSICAL_LOCATION_LH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NET_PHYSICAL_LOCATION_LH = extern struct {
    BusNumber: {"kind":"UInt32"},
    SlotNumber: {"kind":"UInt32"},
    FunctionNumber: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: IF_COUNTED_STRING_LH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IF_COUNTED_STRING_LH = extern struct {
    Length: {"kind":"UInt16"},
    String: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: NDIS_INTERFACE_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const NDIS_INTERFACE_INFORMATION = extern struct {
    ifOperStatus: Windows.Win32.NetworkDrivers.NET_IF_OPER_STATUS,
    ifOperStatusFlags: {"kind":"UInt32"},
    MediaConnectState: Windows.Win32.NetworkDrivers.NET_IF_MEDIA_CONNECT_STATE,
    MediaDuplexState: Windows.Win32.NetworkDrivers.NET_IF_MEDIA_DUPLEX_STATE,
    ifMtu: {"kind":"UInt32"},
    ifPromiscuousMode: {"kind":"Byte"},
    ifDeviceWakeUpEnable: {"kind":"Byte"},
    XmitLinkSpeed: {"kind":"UInt64"},
    RcvLinkSpeed: {"kind":"UInt64"},
    ifLastChange: {"kind":"UInt64"},
    ifCounterDiscontinuityTime: {"kind":"UInt64"},
    ifInUnknownProtos: {"kind":"UInt64"},
    ifInDiscards: {"kind":"UInt64"},
    ifInErrors: {"kind":"UInt64"},
    ifHCInOctets: {"kind":"UInt64"},
    ifHCInUcastPkts: {"kind":"UInt64"},
    ifHCInMulticastPkts: {"kind":"UInt64"},
    ifHCInBroadcastPkts: {"kind":"UInt64"},
    ifHCOutOctets: {"kind":"UInt64"},
    ifHCOutUcastPkts: {"kind":"UInt64"},
    ifHCOutMulticastPkts: {"kind":"UInt64"},
    ifHCOutBroadcastPkts: {"kind":"UInt64"},
    ifOutErrors: {"kind":"UInt64"},
    ifOutDiscards: {"kind":"UInt64"},
    ifHCInUcastOctets: {"kind":"UInt64"},
    ifHCInMulticastOctets: {"kind":"UInt64"},
    ifHCInBroadcastOctets: {"kind":"UInt64"},
    ifHCOutUcastOctets: {"kind":"UInt64"},
    ifHCOutMulticastOctets: {"kind":"UInt64"},
    ifHCOutBroadcastOctets: {"kind":"UInt64"},
    CompartmentId: {"kind":"UInt32"},
    SupportedStatistics: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: MIB_IF_TABLE_LEVEL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MIB_IF_TABLE_LEVEL = *opaque{
};
// --------------------------------------------------------
// Type: SOCKET_ADDRESS_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SOCKET_ADDRESS_LIST = extern struct {
    iAddressCount: {"kind":"Int32"},
    Address: {"kind":"Array","child": Windows.Win32.WinSock.SOCKET_ADDRESS},
};
// --------------------------------------------------------
// Type: SOCKADDR_STORAGE_LH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SOCKADDR_STORAGE_LH = extern struct {
    ss_family: {"kind":"UInt16"},
    __ss_pad1: {"kind":"Array","child": {"kind":"SByte"}},
    __ss_align: {"kind":"Int64"},
    __ss_pad2: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: SOCKADDR_IN6_LH
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const SOCKADDR_IN6_LH = extern struct {
    sin6_family: {"kind":"UInt16"},
    sin6_port: {"kind":"UInt16"},
    sin6_flowinfo: {"kind":"UInt32"},
    sin6_addr: Windows.Win32.WinSock.in6_addr,
    Anonymous: Windows.Win32.NetworkDrivers.SOCKADDR_IN6_LH+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: NL_ROUTE_PROTOCOL
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NL_ROUTE_PROTOCOL = *opaque{
};
// --------------------------------------------------------
// Type: NL_ADDRESS_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NL_ADDRESS_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: NL_ROUTE_ORIGIN
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NL_ROUTE_ORIGIN = *opaque{
};
// --------------------------------------------------------
// Type: NL_NEIGHBOR_STATE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NL_NEIGHBOR_STATE = *opaque{
};
// --------------------------------------------------------
// Type: NL_LINK_LOCAL_ADDRESS_BEHAVIOR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NL_LINK_LOCAL_ADDRESS_BEHAVIOR = *opaque{
};
// --------------------------------------------------------
// Type: NL_ROUTER_DISCOVERY_BEHAVIOR
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const NL_ROUTER_DISCOVERY_BEHAVIOR = *opaque{
};
],

"func_definitions": [

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn GetCurrentThreadCompartmentId(

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn SetCurrentThreadCompartmentId(
    CompartmentId: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn GetSessionCompartmentId(
    SessionId: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn SetSessionCompartmentId(
    SessionId: {"kind":"UInt32"},
    CompartmentId: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn GetNetworkInformation(
    NetworkGuid: {"kind""Ptr","child":Guid},
    CompartmentId: {"kind""Ptr","child":{"kind":"UInt32"}},
    SiteId: {"kind""Ptr","child":{"kind":"UInt32"}},
    NetworkName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Length: {"kind":"UInt32"},

// set_last_errror=False (can and should we use this?)
pub extern "IPHLPAPI" fn SetNetworkInformation(
    NetworkGuid: {"kind""Ptr","child":Guid},
    CompartmentId: {"kind":"UInt32"},
    NetworkName: {"kind""Ptr","child":{"kind":"UInt16"}},
],

"unicode_aliases": [
]}
