{
"constants": [
],

"types_definitions": [
// --------------------------------------------------------
// Type: IP4_ARRAY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const IP4_ARRAY = extern struct {
    AddrCount: {"kind":"UInt32"},
    AddrArray: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: IP6_ADDRESS
// TypeLayoutAttr: explicit
// not generating the actual code for this type because it has an explicit layout
pub const IP6_ADDRESS = *opaque{
};
// --------------------------------------------------------
// Type: DNS_ADDR
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_ADDR = extern struct {
    MaxSa: {"kind":"Array","child": {"kind":"SByte"}},
    Data: Windows.Win32.Dns.DNS_ADDR+_Data_e__Union,
    // --------------------------------------------------------
    // Type: _Data_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Data_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: DNS_ADDR_ARRAY
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DNS_ADDR_ARRAY = *opaque{
};
// --------------------------------------------------------
// Type: DNS_HEADER
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DNS_HEADER = *opaque{
};
// --------------------------------------------------------
// Type: DNS_HEADER_EXT
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DNS_HEADER_EXT = *opaque{
};
// --------------------------------------------------------
// Type: DNS_WIRE_QUESTION
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DNS_WIRE_QUESTION = *opaque{
};
// --------------------------------------------------------
// Type: DNS_WIRE_RECORD
// TypeLayoutAttr: sequential
// not generating the actual code for this type because it has a non-default layout IsDefault=False PackingSize=1 Size=0
pub const DNS_WIRE_RECORD = *opaque{
};
// --------------------------------------------------------
// Type: DNS_CONFIG_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DNS_CONFIG_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DNS_A_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_A_DATA = extern struct {
    IpAddress: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DNS_PTR_DATAW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_PTR_DATAW = extern struct {
    pNameHost: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: DNS_PTR_DATAA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_PTR_DATAA = extern struct {
    pNameHost: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: DNS_SOA_DATAW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_SOA_DATAW = extern struct {
    pNamePrimaryServer: {"kind""Ptr","child":{"kind":"UInt16"}},
    pNameAdministrator: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwSerialNo: {"kind":"UInt32"},
    dwRefresh: {"kind":"UInt32"},
    dwRetry: {"kind":"UInt32"},
    dwExpire: {"kind":"UInt32"},
    dwDefaultTtl: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DNS_SOA_DATAA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_SOA_DATAA = extern struct {
    pNamePrimaryServer: {"kind""Ptr","child":{"kind":"SByte"}},
    pNameAdministrator: {"kind""Ptr","child":{"kind":"SByte"}},
    dwSerialNo: {"kind":"UInt32"},
    dwRefresh: {"kind":"UInt32"},
    dwRetry: {"kind":"UInt32"},
    dwExpire: {"kind":"UInt32"},
    dwDefaultTtl: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DNS_MINFO_DATAW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_MINFO_DATAW = extern struct {
    pNameMailbox: {"kind""Ptr","child":{"kind":"UInt16"}},
    pNameErrorsMailbox: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: DNS_MINFO_DATAA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_MINFO_DATAA = extern struct {
    pNameMailbox: {"kind""Ptr","child":{"kind":"SByte"}},
    pNameErrorsMailbox: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: DNS_MX_DATAW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_MX_DATAW = extern struct {
    pNameExchange: {"kind""Ptr","child":{"kind":"UInt16"}},
    wPreference: {"kind":"UInt16"},
    Pad: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: DNS_MX_DATAA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_MX_DATAA = extern struct {
    pNameExchange: {"kind""Ptr","child":{"kind":"SByte"}},
    wPreference: {"kind":"UInt16"},
    Pad: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: DNS_TXT_DATAW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_TXT_DATAW = extern struct {
    dwStringCount: {"kind":"UInt32"},
    pStringArray: {"kind":"Array","child": {"kind""Ptr","child":{"kind":"UInt16"}}},
};
// --------------------------------------------------------
// Type: DNS_TXT_DATAA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_TXT_DATAA = extern struct {
    dwStringCount: {"kind":"UInt32"},
    pStringArray: {"kind":"Array","child": {"kind""Ptr","child":{"kind":"SByte"}}},
};
// --------------------------------------------------------
// Type: DNS_NULL_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_NULL_DATA = extern struct {
    dwByteCount: {"kind":"UInt32"},
    Data: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: DNS_WKS_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_WKS_DATA = extern struct {
    IpAddress: {"kind":"UInt32"},
    chProtocol: {"kind":"Byte"},
    BitMask: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: DNS_AAAA_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_AAAA_DATA = extern struct {
    Ip6Address: Windows.Win32.Dns.IP6_ADDRESS,
};
// --------------------------------------------------------
// Type: DNS_SIG_DATAW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_SIG_DATAW = extern struct {
    wTypeCovered: {"kind":"UInt16"},
    chAlgorithm: {"kind":"Byte"},
    chLabelCount: {"kind":"Byte"},
    dwOriginalTtl: {"kind":"UInt32"},
    dwExpiration: {"kind":"UInt32"},
    dwTimeSigned: {"kind":"UInt32"},
    wKeyTag: {"kind":"UInt16"},
    wSignatureLength: {"kind":"UInt16"},
    pNameSigner: {"kind""Ptr","child":{"kind":"UInt16"}},
    Signature: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: DNS_SIG_DATAA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_SIG_DATAA = extern struct {
    wTypeCovered: {"kind":"UInt16"},
    chAlgorithm: {"kind":"Byte"},
    chLabelCount: {"kind":"Byte"},
    dwOriginalTtl: {"kind":"UInt32"},
    dwExpiration: {"kind":"UInt32"},
    dwTimeSigned: {"kind":"UInt32"},
    wKeyTag: {"kind":"UInt16"},
    wSignatureLength: {"kind":"UInt16"},
    pNameSigner: {"kind""Ptr","child":{"kind":"SByte"}},
    Signature: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: DNS_KEY_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_KEY_DATA = extern struct {
    wFlags: {"kind":"UInt16"},
    chProtocol: {"kind":"Byte"},
    chAlgorithm: {"kind":"Byte"},
    wKeyLength: {"kind":"UInt16"},
    wPad: {"kind":"UInt16"},
    Key: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: DNS_DHCID_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_DHCID_DATA = extern struct {
    dwByteCount: {"kind":"UInt32"},
    DHCID: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: DNS_NSEC_DATAW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_NSEC_DATAW = extern struct {
    pNextDomainName: {"kind""Ptr","child":{"kind":"UInt16"}},
    wTypeBitMapsLength: {"kind":"UInt16"},
    wPad: {"kind":"UInt16"},
    TypeBitMaps: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: DNS_NSEC_DATAA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_NSEC_DATAA = extern struct {
    pNextDomainName: {"kind""Ptr","child":{"kind":"SByte"}},
    wTypeBitMapsLength: {"kind":"UInt16"},
    wPad: {"kind":"UInt16"},
    TypeBitMaps: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: DNS_NSEC3_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_NSEC3_DATA = extern struct {
    chAlgorithm: {"kind":"Byte"},
    bFlags: {"kind":"Byte"},
    wIterations: {"kind":"UInt16"},
    bSaltLength: {"kind":"Byte"},
    bHashLength: {"kind":"Byte"},
    wTypeBitMapsLength: {"kind":"UInt16"},
    chData: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: DNS_NSEC3PARAM_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_NSEC3PARAM_DATA = extern struct {
    chAlgorithm: {"kind":"Byte"},
    bFlags: {"kind":"Byte"},
    wIterations: {"kind":"UInt16"},
    bSaltLength: {"kind":"Byte"},
    bPad: {"kind":"Array","child": {"kind":"Byte"}},
    pbSalt: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: DNS_TLSA_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_TLSA_DATA = extern struct {
    bCertUsage: {"kind":"Byte"},
    bSelector: {"kind":"Byte"},
    bMatchingType: {"kind":"Byte"},
    bCertificateAssociationDataLength: {"kind":"UInt16"},
    bPad: {"kind":"Array","child": {"kind":"Byte"}},
    bCertificateAssociationData: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: DNS_DS_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_DS_DATA = extern struct {
    wKeyTag: {"kind":"UInt16"},
    chAlgorithm: {"kind":"Byte"},
    chDigestType: {"kind":"Byte"},
    wDigestLength: {"kind":"UInt16"},
    wPad: {"kind":"UInt16"},
    Digest: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: DNS_OPT_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_OPT_DATA = extern struct {
    wDataLength: {"kind":"UInt16"},
    wPad: {"kind":"UInt16"},
    Data: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: DNS_LOC_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_LOC_DATA = extern struct {
    wVersion: {"kind":"UInt16"},
    wSize: {"kind":"UInt16"},
    wHorPrec: {"kind":"UInt16"},
    wVerPrec: {"kind":"UInt16"},
    dwLatitude: {"kind":"UInt32"},
    dwLongitude: {"kind":"UInt32"},
    dwAltitude: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DNS_NXT_DATAW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_NXT_DATAW = extern struct {
    pNameNext: {"kind""Ptr","child":{"kind":"UInt16"}},
    wNumTypes: {"kind":"UInt16"},
    wTypes: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: DNS_NXT_DATAA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_NXT_DATAA = extern struct {
    pNameNext: {"kind""Ptr","child":{"kind":"SByte"}},
    wNumTypes: {"kind":"UInt16"},
    wTypes: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: DNS_SRV_DATAW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_SRV_DATAW = extern struct {
    pNameTarget: {"kind""Ptr","child":{"kind":"UInt16"}},
    wPriority: {"kind":"UInt16"},
    wWeight: {"kind":"UInt16"},
    wPort: {"kind":"UInt16"},
    Pad: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: DNS_SRV_DATAA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_SRV_DATAA = extern struct {
    pNameTarget: {"kind""Ptr","child":{"kind":"SByte"}},
    wPriority: {"kind":"UInt16"},
    wWeight: {"kind":"UInt16"},
    wPort: {"kind":"UInt16"},
    Pad: {"kind":"UInt16"},
};
// --------------------------------------------------------
// Type: DNS_NAPTR_DATAW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_NAPTR_DATAW = extern struct {
    wOrder: {"kind":"UInt16"},
    wPreference: {"kind":"UInt16"},
    pFlags: {"kind""Ptr","child":{"kind":"UInt16"}},
    pService: {"kind""Ptr","child":{"kind":"UInt16"}},
    pRegularExpression: {"kind""Ptr","child":{"kind":"UInt16"}},
    pReplacement: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: DNS_NAPTR_DATAA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_NAPTR_DATAA = extern struct {
    wOrder: {"kind":"UInt16"},
    wPreference: {"kind":"UInt16"},
    pFlags: {"kind""Ptr","child":{"kind":"SByte"}},
    pService: {"kind""Ptr","child":{"kind":"SByte"}},
    pRegularExpression: {"kind""Ptr","child":{"kind":"SByte"}},
    pReplacement: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: DNS_ATMA_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_ATMA_DATA = extern struct {
    AddressType: {"kind":"Byte"},
    Address: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: DNS_TKEY_DATAW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_TKEY_DATAW = extern struct {
    pNameAlgorithm: {"kind""Ptr","child":{"kind":"UInt16"}},
    pAlgorithmPacket: {"kind""Ptr","child":{"kind":"Byte"}},
    pKey: {"kind""Ptr","child":{"kind":"Byte"}},
    pOtherData: {"kind""Ptr","child":{"kind":"Byte"}},
    dwCreateTime: {"kind":"UInt32"},
    dwExpireTime: {"kind":"UInt32"},
    wMode: {"kind":"UInt16"},
    wError: {"kind":"UInt16"},
    wKeyLength: {"kind":"UInt16"},
    wOtherLength: {"kind":"UInt16"},
    cAlgNameLength: {"kind":"Byte"},
    bPacketPointers: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: DNS_TKEY_DATAA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_TKEY_DATAA = extern struct {
    pNameAlgorithm: {"kind""Ptr","child":{"kind":"SByte"}},
    pAlgorithmPacket: {"kind""Ptr","child":{"kind":"Byte"}},
    pKey: {"kind""Ptr","child":{"kind":"Byte"}},
    pOtherData: {"kind""Ptr","child":{"kind":"Byte"}},
    dwCreateTime: {"kind":"UInt32"},
    dwExpireTime: {"kind":"UInt32"},
    wMode: {"kind":"UInt16"},
    wError: {"kind":"UInt16"},
    wKeyLength: {"kind":"UInt16"},
    wOtherLength: {"kind":"UInt16"},
    cAlgNameLength: {"kind":"Byte"},
    bPacketPointers: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: DNS_TSIG_DATAW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_TSIG_DATAW = extern struct {
    pNameAlgorithm: {"kind""Ptr","child":{"kind":"UInt16"}},
    pAlgorithmPacket: {"kind""Ptr","child":{"kind":"Byte"}},
    pSignature: {"kind""Ptr","child":{"kind":"Byte"}},
    pOtherData: {"kind""Ptr","child":{"kind":"Byte"}},
    i64CreateTime: {"kind":"Int64"},
    wFudgeTime: {"kind":"UInt16"},
    wOriginalXid: {"kind":"UInt16"},
    wError: {"kind":"UInt16"},
    wSigLength: {"kind":"UInt16"},
    wOtherLength: {"kind":"UInt16"},
    cAlgNameLength: {"kind":"Byte"},
    bPacketPointers: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: DNS_TSIG_DATAA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_TSIG_DATAA = extern struct {
    pNameAlgorithm: {"kind""Ptr","child":{"kind":"SByte"}},
    pAlgorithmPacket: {"kind""Ptr","child":{"kind":"Byte"}},
    pSignature: {"kind""Ptr","child":{"kind":"Byte"}},
    pOtherData: {"kind""Ptr","child":{"kind":"Byte"}},
    i64CreateTime: {"kind":"Int64"},
    wFudgeTime: {"kind":"UInt16"},
    wOriginalXid: {"kind":"UInt16"},
    wError: {"kind":"UInt16"},
    wSigLength: {"kind":"UInt16"},
    wOtherLength: {"kind":"UInt16"},
    cAlgNameLength: {"kind":"Byte"},
    bPacketPointers: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: DNS_UNKNOWN_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_UNKNOWN_DATA = extern struct {
    dwByteCount: {"kind":"UInt32"},
    bData: {"kind":"Array","child": {"kind":"Byte"}},
};
// --------------------------------------------------------
// Type: DNS_WINS_DATA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_WINS_DATA = extern struct {
    dwMappingFlag: {"kind":"UInt32"},
    dwLookupTimeout: {"kind":"UInt32"},
    dwCacheTimeout: {"kind":"UInt32"},
    cWinsServerCount: {"kind":"UInt32"},
    WinsServers: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: DNS_WINSR_DATAW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_WINSR_DATAW = extern struct {
    dwMappingFlag: {"kind":"UInt32"},
    dwLookupTimeout: {"kind":"UInt32"},
    dwCacheTimeout: {"kind":"UInt32"},
    pNameResultDomain: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: DNS_WINSR_DATAA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_WINSR_DATAA = extern struct {
    dwMappingFlag: {"kind":"UInt32"},
    dwLookupTimeout: {"kind":"UInt32"},
    dwCacheTimeout: {"kind":"UInt32"},
    pNameResultDomain: {"kind""Ptr","child":{"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: DNS_RECORD_FLAGS
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_RECORD_FLAGS = extern struct {
    _bitfield: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DNS_SECTION
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DNS_SECTION = *opaque{
};
// --------------------------------------------------------
// Type: DNS_RECORDW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_RECORDW = extern struct {
    pNext: {"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDW},
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    wType: {"kind":"UInt16"},
    wDataLength: {"kind":"UInt16"},
    Flags: Windows.Win32.Dns.DNS_RECORDW+_Flags_e__Union,
    dwTtl: {"kind":"UInt32"},
    dwReserved: {"kind":"UInt32"},
    Data: Windows.Win32.Dns.DNS_RECORDW+_Data_e__Union,
    // --------------------------------------------------------
    // Type: _Flags_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Flags_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Data_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Data_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: _DnsRecordOptW
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _DnsRecordOptW = extern struct {
    pNext: {"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDW},
    pName: {"kind""Ptr","child":{"kind":"UInt16"}},
    wType: {"kind":"UInt16"},
    wDataLength: {"kind":"UInt16"},
    Flags: Windows.Win32.Dns._DnsRecordOptW+_Flags_e__Union,
    ExtHeader: Windows.Win32.Dns.DNS_HEADER_EXT,
    wPayloadSize: {"kind":"UInt16"},
    wReserved: {"kind":"UInt16"},
    Data: Windows.Win32.Dns._DnsRecordOptW+_Data_e__Union,
    // --------------------------------------------------------
    // Type: _Flags_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Flags_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Data_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Data_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: DNS_RECORDA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_RECORDA = extern struct {
    pNext: {"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDA},
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    wType: {"kind":"UInt16"},
    wDataLength: {"kind":"UInt16"},
    Flags: Windows.Win32.Dns.DNS_RECORDA+_Flags_e__Union,
    dwTtl: {"kind":"UInt32"},
    dwReserved: {"kind":"UInt32"},
    Data: Windows.Win32.Dns.DNS_RECORDA+_Data_e__Union,
    // --------------------------------------------------------
    // Type: _Flags_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Flags_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Data_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Data_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: _DnsRecordOptA
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const _DnsRecordOptA = extern struct {
    pNext: {"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDA},
    pName: {"kind""Ptr","child":{"kind":"SByte"}},
    wType: {"kind":"UInt16"},
    wDataLength: {"kind":"UInt16"},
    Flags: Windows.Win32.Dns._DnsRecordOptA+_Flags_e__Union,
    ExtHeader: Windows.Win32.Dns.DNS_HEADER_EXT,
    wPayloadSize: {"kind":"UInt16"},
    wReserved: {"kind":"UInt16"},
    Data: Windows.Win32.Dns._DnsRecordOptA+_Data_e__Union,
    // --------------------------------------------------------
    // Type: _Flags_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Flags_e__Union = *opaque{
    };
    // --------------------------------------------------------
    // Type: _Data_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Data_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: DNS_RRSET
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_RRSET = extern struct {
    pFirstRR: {"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDA},
    pLastRR: {"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDA},
};
// --------------------------------------------------------
// Type: DNS_PROXY_COMPLETION_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DNS_PROXY_COMPLETION_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DNS_PROXY_INFORMATION_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DNS_PROXY_INFORMATION_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DNS_PROXY_INFORMATION
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_PROXY_INFORMATION = extern struct {
    version: {"kind":"UInt32"},
    proxyInformationType: Windows.Win32.Dns.DNS_PROXY_INFORMATION_TYPE,
    proxyName: {"kind""Ptr","child":{"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: DNS_CHARSET
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DNS_CHARSET = *opaque{
};
// --------------------------------------------------------
// Type: DNS_FREE_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DNS_FREE_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DNS_QUERY_RESULT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_QUERY_RESULT = extern struct {
    Version: {"kind":"UInt32"},
    QueryStatus: {"kind":"Int32"},
    QueryOptions: {"kind":"UInt64"},
    pQueryRecords: {"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDA},
    Reserved: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: DNS_QUERY_COMPLETION_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DNS_QUERY_COMPLETION_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDNS_QUERY_COMPLETION_ROUTINE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDNS_QUERY_COMPLETION_ROUTINE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DNS_QUERY_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_QUERY_REQUEST = extern struct {
    Version: {"kind":"UInt32"},
    QueryName: {"kind""Ptr","child":{"kind":"UInt16"}},
    QueryType: {"kind":"UInt16"},
    QueryOptions: {"kind":"UInt64"},
    pDnsServerList: {"kind""Ptr","child":Windows.Win32.Dns.DNS_ADDR_ARRAY},
    InterfaceIndex: {"kind":"UInt32"},
    pQueryCompletionCallback: Windows.Win32.Dns.PDNS_QUERY_COMPLETION_ROUTINE,
    pQueryContext: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: DNS_QUERY_CANCEL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_QUERY_CANCEL = extern struct {
    Reserved: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: DNS_NAME_FORMAT
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DNS_NAME_FORMAT = *opaque{
};
// --------------------------------------------------------
// Type: DNS_MESSAGE_BUFFER
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_MESSAGE_BUFFER = extern struct {
    MessageHead: Windows.Win32.Dns.DNS_HEADER,
    MessageBody: {"kind":"Array","child": {"kind":"SByte"}},
};
// --------------------------------------------------------
// Type: DNS_CONNECTION_PROXY_TYPE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DNS_CONNECTION_PROXY_TYPE = *opaque{
};
// --------------------------------------------------------
// Type: DNS_CONNECTION_PROXY_INFO_SWITCH
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DNS_CONNECTION_PROXY_INFO_SWITCH = *opaque{
};
// --------------------------------------------------------
// Type: DNS_CONNECTION_PROXY_INFO
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_CONNECTION_PROXY_INFO = extern struct {
    Version: {"kind":"UInt32"},
    pwszFriendlyName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Flags: {"kind":"UInt32"},
    Switch: Windows.Win32.Dns.DNS_CONNECTION_PROXY_INFO_SWITCH,
    Anonymous: Windows.Win32.Dns.DNS_CONNECTION_PROXY_INFO+_Anonymous_e__Union,
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
        // --------------------------------------------------------
        // Type: _DNS_CONNECTION_PROXY_INFO_CONFIG
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _DNS_CONNECTION_PROXY_INFO_CONFIG = extern struct {
            pwszServer: {"kind""Ptr","child":{"kind":"UInt16"}},
            pwszUsername: {"kind""Ptr","child":{"kind":"UInt16"}},
            pwszPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
            pwszException: {"kind""Ptr","child":{"kind":"UInt16"}},
            pwszExtraInfo: {"kind""Ptr","child":{"kind":"UInt16"}},
            Port: {"kind":"UInt16"},
        };
        // --------------------------------------------------------
        // Type: _DNS_CONNECTION_PROXY_INFO_SCRIPT
        // TypeLayoutAttr: sequential
        // TODO: I think this is a struct, but not sure at this point, assuming it is for now
        pub const _DNS_CONNECTION_PROXY_INFO_SCRIPT = extern struct {
            pwszScript: {"kind""Ptr","child":{"kind":"UInt16"}},
            pwszUsername: {"kind""Ptr","child":{"kind":"UInt16"}},
            pwszPassword: {"kind""Ptr","child":{"kind":"UInt16"}},
        };
    };
};
// --------------------------------------------------------
// Type: DNS_CONNECTION_PROXY_INFO_EX
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_CONNECTION_PROXY_INFO_EX = extern struct {
    ProxyInfo: Windows.Win32.Dns.DNS_CONNECTION_PROXY_INFO,
    dwInterfaceIndex: {"kind":"UInt32"},
    pwszConnectionName: {"kind""Ptr","child":{"kind":"UInt16"}},
    fDirectConfiguration: Windows.Win32.SystemServices.BOOL,
    hConnection: Windows.Win32.SystemServices.HANDLE,
};
// --------------------------------------------------------
// Type: DNS_CONNECTION_PROXY_ELEMENT
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_CONNECTION_PROXY_ELEMENT = extern struct {
    Type: Windows.Win32.Dns.DNS_CONNECTION_PROXY_TYPE,
    Info: Windows.Win32.Dns.DNS_CONNECTION_PROXY_INFO,
};
// --------------------------------------------------------
// Type: DNS_CONNECTION_PROXY_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_CONNECTION_PROXY_LIST = extern struct {
    cProxies: {"kind":"UInt32"},
    pProxies: {"kind""Ptr","child":Windows.Win32.Dns.DNS_CONNECTION_PROXY_ELEMENT},
};
// --------------------------------------------------------
// Type: DNS_CONNECTION_NAME
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_CONNECTION_NAME = extern struct {
    wszName: {"kind":"Array","child": {"kind":"UInt16"}},
};
// --------------------------------------------------------
// Type: DNS_CONNECTION_NAME_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_CONNECTION_NAME_LIST = extern struct {
    cNames: {"kind":"UInt32"},
    pNames: {"kind""Ptr","child":Windows.Win32.Dns.DNS_CONNECTION_NAME},
};
// --------------------------------------------------------
// Type: DNS_CONNECTION_IFINDEX_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_CONNECTION_IFINDEX_ENTRY = extern struct {
    pwszConnectionName: {"kind""Ptr","child":{"kind":"UInt16"}},
    dwIfIndex: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DNS_CONNECTION_IFINDEX_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_CONNECTION_IFINDEX_LIST = extern struct {
    pConnectionIfIndexEntries: {"kind""Ptr","child":Windows.Win32.Dns.DNS_CONNECTION_IFINDEX_ENTRY},
    nEntries: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DNS_CONNECTION_POLICY_ENTRY
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_CONNECTION_POLICY_ENTRY = extern struct {
    pwszHost: {"kind""Ptr","child":{"kind":"UInt16"}},
    pwszAppId: {"kind""Ptr","child":{"kind":"UInt16"}},
    cbAppSid: {"kind":"UInt32"},
    pbAppSid: {"kind""Ptr","child":{"kind":"Byte"}},
    nConnections: {"kind":"UInt32"},
    ppwszConnections: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    dwPolicyEntryFlags: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DNS_CONNECTION_POLICY_ENTRY_LIST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_CONNECTION_POLICY_ENTRY_LIST = extern struct {
    pPolicyEntries: {"kind""Ptr","child":Windows.Win32.Dns.DNS_CONNECTION_POLICY_ENTRY},
    nEntries: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DNS_CONNECTION_POLICY_TAG
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DNS_CONNECTION_POLICY_TAG = *opaque{
};
// --------------------------------------------------------
// Type: DNS_SERVICE_INSTANCE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_SERVICE_INSTANCE = extern struct {
    pszInstanceName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pszHostName: {"kind""Ptr","child":{"kind":"UInt16"}},
    ip4Address: {"kind""Ptr","child":{"kind":"UInt32"}},
    ip6Address: {"kind""Ptr","child":Windows.Win32.Dns.IP6_ADDRESS},
    wPort: {"kind":"UInt16"},
    wPriority: {"kind":"UInt16"},
    wWeight: {"kind":"UInt16"},
    dwPropertyCount: {"kind":"UInt32"},
    keys: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    values: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    dwInterfaceIndex: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DNS_SERVICE_CANCEL
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_SERVICE_CANCEL = extern struct {
    reserved: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: DNS_SERVICE_BROWSE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DNS_SERVICE_BROWSE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDNS_SERVICE_BROWSE_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDNS_SERVICE_BROWSE_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DNS_SERVICE_BROWSE_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_SERVICE_BROWSE_REQUEST = extern struct {
    Version: {"kind":"UInt32"},
    InterfaceIndex: {"kind":"UInt32"},
    QueryName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Anonymous: Windows.Win32.Dns.DNS_SERVICE_BROWSE_REQUEST+_Anonymous_e__Union,
    pQueryContext: {"kind""Ptr","child":{"kind":"Void"}},
    // --------------------------------------------------------
    // Type: _Anonymous_e__Union
    // TypeLayoutAttr: explicit
    // not generating the actual code for this type because it has an explicit layout
    pub const _Anonymous_e__Union = *opaque{
    };
};
// --------------------------------------------------------
// Type: DNS_SERVICE_RESOLVE_COMPLETE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DNS_SERVICE_RESOLVE_COMPLETE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDNS_SERVICE_RESOLVE_COMPLETE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDNS_SERVICE_RESOLVE_COMPLETE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DNS_SERVICE_RESOLVE_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_SERVICE_RESOLVE_REQUEST = extern struct {
    Version: {"kind":"UInt32"},
    InterfaceIndex: {"kind":"UInt32"},
    QueryName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pResolveCompletionCallback: Windows.Win32.Dns.PDNS_SERVICE_RESOLVE_COMPLETE,
    pQueryContext: {"kind""Ptr","child":{"kind":"Void"}},
};
// --------------------------------------------------------
// Type: DNS_SERVICE_REGISTER_COMPLETE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const DNS_SERVICE_REGISTER_COMPLETE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PDNS_SERVICE_REGISTER_COMPLETE
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PDNS_SERVICE_REGISTER_COMPLETE = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: DNS_SERVICE_REGISTER_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const DNS_SERVICE_REGISTER_REQUEST = extern struct {
    Version: {"kind":"UInt32"},
    InterfaceIndex: {"kind":"UInt32"},
    pServiceInstance: {"kind""Ptr","child":Windows.Win32.Dns.DNS_SERVICE_INSTANCE},
    pRegisterCompletionCallback: Windows.Win32.Dns.PDNS_SERVICE_REGISTER_COMPLETE,
    pQueryContext: {"kind""Ptr","child":{"kind":"Void"}},
    hCredentials: Windows.Win32.SystemServices.HANDLE,
    unicastEnabled: Windows.Win32.SystemServices.BOOL,
};
// --------------------------------------------------------
// Type: MDNS_QUERY_HANDLE
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MDNS_QUERY_HANDLE = extern struct {
    nameBuf: {"kind":"Array","child": {"kind":"UInt16"}},
    wType: {"kind":"UInt16"},
    pSubscription: {"kind""Ptr","child":{"kind":"Void"}},
    pWnfCallbackParams: {"kind""Ptr","child":{"kind":"Void"}},
    stateNameData: {"kind":"Array","child": {"kind":"UInt32"}},
};
// --------------------------------------------------------
// Type: MDNS_QUERY_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const MDNS_QUERY_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: PMDNS_QUERY_CALLBACK
// TypeLayoutAttr: auto
// not generating the actual code for this type because it has an 'auto' layout (follow up on https://github.com/microsoft/win32metadata/issues/188)
pub const PMDNS_QUERY_CALLBACK = *opaque{
    // TODO: Method '.ctor'
    // TODO: Method 'Invoke'
};
// --------------------------------------------------------
// Type: MDNS_QUERY_REQUEST
// TypeLayoutAttr: sequential
// TODO: I think this is a struct, but not sure at this point, assuming it is for now
pub const MDNS_QUERY_REQUEST = extern struct {
    Version: {"kind":"UInt32"},
    ulRefCount: {"kind":"UInt32"},
    Query: {"kind""Ptr","child":{"kind":"UInt16"}},
    QueryType: {"kind":"UInt16"},
    QueryOptions: {"kind":"UInt64"},
    InterfaceIndex: {"kind":"UInt32"},
    pQueryCallback: Windows.Win32.Dns.PMDNS_QUERY_CALLBACK,
    pQueryContext: {"kind""Ptr","child":{"kind":"Void"}},
    fAnswerReceived: Windows.Win32.SystemServices.BOOL,
    ulResendCount: {"kind":"UInt32"},
};
// --------------------------------------------------------
// Type: DnsContextHandle
// TypeLayoutAttr: sequential
// RAIIFree 'DnsReleaseContextHandle' (TODO: can we use this information?)
pub const DnsContextHandle = {"kind":"IntPtr"};
],

"func_definitions": [

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsQueryConfig(
    Config: Windows.Win32.Dns.DNS_CONFIG_TYPE,
    Flag: {"kind":"UInt32"},
    pwsAdapterName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pReserved: {"kind""Ptr","child":{"kind":"Void"}},
    pBuffer: {"kind""Ptr","child":{"kind":"Void"}},
    pBufLen: {"kind""Ptr","child":{"kind":"UInt32"}},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsRecordCopyEx(
    pRecord: {"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDA},
    CharSetIn: Windows.Win32.Dns.DNS_CHARSET,
    CharSetOut: Windows.Win32.Dns.DNS_CHARSET,

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsRecordSetCopyEx(
    pRecordSet: {"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDA},
    CharSetIn: Windows.Win32.Dns.DNS_CHARSET,
    CharSetOut: Windows.Win32.Dns.DNS_CHARSET,

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsRecordCompare(
    pRecord1: {"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDA},
    pRecord2: {"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDA},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsRecordSetCompare(
    pRR1: {"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDA},
    pRR2: {"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDA},
    ppDiff1: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDA}},
    ppDiff2: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDA}},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsRecordSetDetach(
    pRecordList: {"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDA},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsFree(
    pData: {"kind""Ptr","child":{"kind":"Void"}},
    FreeType: Windows.Win32.Dns.DNS_FREE_TYPE,

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsQuery_A(
    pszName: {"kind""Ptr","child":{"kind":"SByte"}},
    wType: {"kind":"UInt16"},
    Options: {"kind":"UInt32"},
    pExtra: {"kind""Ptr","child":{"kind":"Void"}},
    ppQueryResults: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDA}},
    pReserved: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsQuery_UTF8(
    pszName: {"kind""Ptr","child":{"kind":"SByte"}},
    wType: {"kind":"UInt16"},
    Options: {"kind":"UInt32"},
    pExtra: {"kind""Ptr","child":{"kind":"Void"}},
    ppQueryResults: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDA}},
    pReserved: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsQuery_W(
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    wType: {"kind":"UInt16"},
    Options: {"kind":"UInt32"},
    pExtra: {"kind""Ptr","child":{"kind":"Void"}},
    ppQueryResults: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDA}},
    pReserved: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"Void"}}},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsQueryEx(
    pQueryRequest: {"kind""Ptr","child":Windows.Win32.Dns.DNS_QUERY_REQUEST},
    pQueryResults: {"kind""Ptr","child":Windows.Win32.Dns.DNS_QUERY_RESULT},
    pCancelHandle: {"kind""Ptr","child":Windows.Win32.Dns.DNS_QUERY_CANCEL},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsCancelQuery(
    pCancelHandle: {"kind""Ptr","child":Windows.Win32.Dns.DNS_QUERY_CANCEL},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsAcquireContextHandle_W(
    CredentialFlags: {"kind":"UInt32"},
    Credentials: {"kind""Ptr","child":{"kind":"Void"}},
    pContext: {"kind""Ptr","child":Windows.Win32.Dns.DnsContextHandle},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsAcquireContextHandle_A(
    CredentialFlags: {"kind":"UInt32"},
    Credentials: {"kind""Ptr","child":{"kind":"Void"}},
    pContext: {"kind""Ptr","child":Windows.Win32.Dns.DnsContextHandle},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsReleaseContextHandle(
    hContext: Windows.Win32.SystemServices.HANDLE,

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsModifyRecordsInSet_W(
    pAddRecords: {"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDA},
    pDeleteRecords: {"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDA},
    Options: {"kind":"UInt32"},
    hCredentials: Windows.Win32.SystemServices.HANDLE,
    pExtraList: {"kind""Ptr","child":{"kind":"Void"}},
    pReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsModifyRecordsInSet_A(
    pAddRecords: {"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDA},
    pDeleteRecords: {"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDA},
    Options: {"kind":"UInt32"},
    hCredentials: Windows.Win32.SystemServices.HANDLE,
    pExtraList: {"kind""Ptr","child":{"kind":"Void"}},
    pReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsModifyRecordsInSet_UTF8(
    pAddRecords: {"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDA},
    pDeleteRecords: {"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDA},
    Options: {"kind":"UInt32"},
    hCredentials: Windows.Win32.SystemServices.HANDLE,
    pExtraList: {"kind""Ptr","child":{"kind":"Void"}},
    pReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsReplaceRecordSetW(
    pReplaceSet: {"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDA},
    Options: {"kind":"UInt32"},
    hContext: Windows.Win32.SystemServices.HANDLE,
    pExtraInfo: {"kind""Ptr","child":{"kind":"Void"}},
    pReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsReplaceRecordSetA(
    pReplaceSet: {"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDA},
    Options: {"kind":"UInt32"},
    hContext: Windows.Win32.SystemServices.HANDLE,
    pExtraInfo: {"kind""Ptr","child":{"kind":"Void"}},
    pReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsReplaceRecordSetUTF8(
    pReplaceSet: {"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDA},
    Options: {"kind":"UInt32"},
    hContext: Windows.Win32.SystemServices.HANDLE,
    pExtraInfo: {"kind""Ptr","child":{"kind":"Void"}},
    pReserved: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsValidateName_W(
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Format: Windows.Win32.Dns.DNS_NAME_FORMAT,

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsValidateName_A(
    pszName: {"kind""Ptr","child":{"kind":"SByte"}},
    Format: Windows.Win32.Dns.DNS_NAME_FORMAT,

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsValidateName_UTF8(
    pszName: {"kind""Ptr","child":{"kind":"SByte"}},
    Format: Windows.Win32.Dns.DNS_NAME_FORMAT,

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsNameCompare_A(
    pName1: {"kind""Ptr","child":{"kind":"SByte"}},
    pName2: {"kind""Ptr","child":{"kind":"SByte"}},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsNameCompare_W(
    pName1: {"kind""Ptr","child":{"kind":"UInt16"}},
    pName2: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsWriteQuestionToBuffer_W(
    pDnsBuffer: {"kind""Ptr","child":Windows.Win32.Dns.DNS_MESSAGE_BUFFER},
    pdwBufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    pszName: {"kind""Ptr","child":{"kind":"UInt16"}},
    wType: {"kind":"UInt16"},
    Xid: {"kind":"UInt16"},
    fRecursionDesired: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsWriteQuestionToBuffer_UTF8(
    pDnsBuffer: {"kind""Ptr","child":Windows.Win32.Dns.DNS_MESSAGE_BUFFER},
    pdwBufferSize: {"kind""Ptr","child":{"kind":"UInt32"}},
    pszName: {"kind""Ptr","child":{"kind":"SByte"}},
    wType: {"kind":"UInt16"},
    Xid: {"kind":"UInt16"},
    fRecursionDesired: Windows.Win32.SystemServices.BOOL,

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsExtractRecordsFromMessage_W(
    pDnsBuffer: {"kind""Ptr","child":Windows.Win32.Dns.DNS_MESSAGE_BUFFER},
    wMessageLength: {"kind":"UInt16"},
    ppRecord: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDA}},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsExtractRecordsFromMessage_UTF8(
    pDnsBuffer: {"kind""Ptr","child":Windows.Win32.Dns.DNS_MESSAGE_BUFFER},
    wMessageLength: {"kind":"UInt16"},
    ppRecord: {"kind""Ptr","child":{"kind""Ptr","child":Windows.Win32.Dns.DNS_RECORDA}},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsGetProxyInformation(
    hostName: {"kind""Ptr","child":{"kind":"UInt16"}},
    proxyInformation: {"kind""Ptr","child":Windows.Win32.Dns.DNS_PROXY_INFORMATION},
    defaultProxyInformation: {"kind""Ptr","child":Windows.Win32.Dns.DNS_PROXY_INFORMATION},
    completionRoutine: Windows.Win32.Dns.DNS_PROXY_COMPLETION_ROUTINE,
    completionContext: {"kind""Ptr","child":{"kind":"Void"}},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsFreeProxyName(
    proxyName: {"kind""Ptr","child":{"kind":"UInt16"}},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsConnectionGetProxyInfoForHostUrl(
    pwszHostUrl: {"kind""Ptr","child":{"kind":"UInt16"}},
    pSelectionContext: {"kind""Ptr","child":{"kind":"Byte"}},
    dwSelectionContextLength: {"kind":"UInt32"},
    dwExplicitInterfaceIndex: {"kind":"UInt32"},
    pProxyInfoEx: {"kind""Ptr","child":Windows.Win32.Dns.DNS_CONNECTION_PROXY_INFO_EX},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsConnectionFreeProxyInfoEx(
    pProxyInfoEx: {"kind""Ptr","child":Windows.Win32.Dns.DNS_CONNECTION_PROXY_INFO_EX},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsConnectionGetProxyInfo(
    pwszConnectionName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Type: Windows.Win32.Dns.DNS_CONNECTION_PROXY_TYPE,
    pProxyInfo: {"kind""Ptr","child":Windows.Win32.Dns.DNS_CONNECTION_PROXY_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsConnectionFreeProxyInfo(
    pProxyInfo: {"kind""Ptr","child":Windows.Win32.Dns.DNS_CONNECTION_PROXY_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsConnectionSetProxyInfo(
    pwszConnectionName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Type: Windows.Win32.Dns.DNS_CONNECTION_PROXY_TYPE,
    pProxyInfo: {"kind""Ptr","child":Windows.Win32.Dns.DNS_CONNECTION_PROXY_INFO},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsConnectionDeleteProxyInfo(
    pwszConnectionName: {"kind""Ptr","child":{"kind":"UInt16"}},
    Type: Windows.Win32.Dns.DNS_CONNECTION_PROXY_TYPE,

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsConnectionGetProxyList(
    pwszConnectionName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pProxyList: {"kind""Ptr","child":Windows.Win32.Dns.DNS_CONNECTION_PROXY_LIST},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsConnectionFreeProxyList(
    pProxyList: {"kind""Ptr","child":Windows.Win32.Dns.DNS_CONNECTION_PROXY_LIST},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsConnectionGetNameList(
    pNameList: {"kind""Ptr","child":Windows.Win32.Dns.DNS_CONNECTION_NAME_LIST},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsConnectionFreeNameList(
    pNameList: {"kind""Ptr","child":Windows.Win32.Dns.DNS_CONNECTION_NAME_LIST},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsConnectionUpdateIfIndexTable(
    pConnectionIfIndexEntries: {"kind""Ptr","child":Windows.Win32.Dns.DNS_CONNECTION_IFINDEX_LIST},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsConnectionSetPolicyEntries(
    PolicyEntryTag: Windows.Win32.Dns.DNS_CONNECTION_POLICY_TAG,
    pPolicyEntryList: {"kind""Ptr","child":Windows.Win32.Dns.DNS_CONNECTION_POLICY_ENTRY_LIST},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsConnectionDeletePolicyEntries(
    PolicyEntryTag: Windows.Win32.Dns.DNS_CONNECTION_POLICY_TAG,

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsServiceConstructInstance(
    pServiceName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pHostName: {"kind""Ptr","child":{"kind":"UInt16"}},
    pIp4: {"kind""Ptr","child":{"kind":"UInt32"}},
    pIp6: {"kind""Ptr","child":Windows.Win32.Dns.IP6_ADDRESS},
    wPort: {"kind":"UInt16"},
    wPriority: {"kind":"UInt16"},
    wWeight: {"kind":"UInt16"},
    dwPropertiesCount: {"kind":"UInt32"},
    keys: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},
    values: {"kind""Ptr","child":{"kind""Ptr","child":{"kind":"UInt16"}}},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsServiceCopyInstance(
    pOrig: {"kind""Ptr","child":Windows.Win32.Dns.DNS_SERVICE_INSTANCE},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsServiceFreeInstance(
    pInstance: {"kind""Ptr","child":Windows.Win32.Dns.DNS_SERVICE_INSTANCE},

// set_last_errror=True (can and should we use this?)
pub extern "DNSAPI" fn DnsServiceBrowse(
    pRequest: {"kind""Ptr","child":Windows.Win32.Dns.DNS_SERVICE_BROWSE_REQUEST},
    pCancel: {"kind""Ptr","child":Windows.Win32.Dns.DNS_SERVICE_CANCEL},

// set_last_errror=True (can and should we use this?)
pub extern "DNSAPI" fn DnsServiceBrowseCancel(
    pCancelHandle: {"kind""Ptr","child":Windows.Win32.Dns.DNS_SERVICE_CANCEL},

// set_last_errror=True (can and should we use this?)
pub extern "DNSAPI" fn DnsServiceResolve(
    pRequest: {"kind""Ptr","child":Windows.Win32.Dns.DNS_SERVICE_RESOLVE_REQUEST},
    pCancel: {"kind""Ptr","child":Windows.Win32.Dns.DNS_SERVICE_CANCEL},

// set_last_errror=True (can and should we use this?)
pub extern "DNSAPI" fn DnsServiceResolveCancel(
    pCancelHandle: {"kind""Ptr","child":Windows.Win32.Dns.DNS_SERVICE_CANCEL},

// set_last_errror=True (can and should we use this?)
pub extern "DNSAPI" fn DnsServiceRegister(
    pRequest: {"kind""Ptr","child":Windows.Win32.Dns.DNS_SERVICE_REGISTER_REQUEST},
    pCancel: {"kind""Ptr","child":Windows.Win32.Dns.DNS_SERVICE_CANCEL},

// set_last_errror=True (can and should we use this?)
pub extern "DNSAPI" fn DnsServiceDeRegister(
    pRequest: {"kind""Ptr","child":Windows.Win32.Dns.DNS_SERVICE_REGISTER_REQUEST},
    pCancel: {"kind""Ptr","child":Windows.Win32.Dns.DNS_SERVICE_CANCEL},

// set_last_errror=False (can and should we use this?)
pub extern "DNSAPI" fn DnsServiceRegisterCancel(
    pCancelHandle: {"kind""Ptr","child":Windows.Win32.Dns.DNS_SERVICE_CANCEL},

// set_last_errror=True (can and should we use this?)
pub extern "DNSAPI" fn DnsStartMulticastQuery(
    pQueryRequest: {"kind""Ptr","child":Windows.Win32.Dns.MDNS_QUERY_REQUEST},
    pHandle: {"kind""Ptr","child":Windows.Win32.Dns.MDNS_QUERY_HANDLE},

// set_last_errror=True (can and should we use this?)
pub extern "DNSAPI" fn DnsStopMulticastQuery(
    pHandle: {"kind""Ptr","child":Windows.Win32.Dns.MDNS_QUERY_HANDLE},
],

"unicode_aliases": [
     "DNS_PTR_DATA"
     "DNS_SOA_DATA"
     "DNS_MINFO_DATA"
     "DNS_MX_DATA"
     "DNS_TXT_DATA"
     "DNS_SIG_DATA"
     "DNS_NSEC_DATA"
     "DNS_NXT_DATA"
     "DNS_SRV_DATA"
     "DNS_NAPTR_DATA"
     "DNS_TKEY_DATA"
     "DNS_TSIG_DATA"
     "DNS_WINSR_DATA"
     "DNS_RECORD"
     "_DnsRecordOpt"
     "DnsQuery_"
     "DnsAcquireContextHandle_"
     "DnsModifyRecordsInSet_"
     "DnsReplaceRecordSet"
     "DnsValidateName_"
     "DnsNameCompare_"
]}
